mads 2.1.5
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/03/17] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 2000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 FFFF> 2000-2B28> 0A 4F + .by  $0A $4F $70 $65 $6E $20 $66 $69  $6C $65 $20 $00 $0C $43 $68 $75  $6E $6B $20 $74 $79 $70 $65 $3A
     2 2018 20 00 0C 43 68 75 + .by  $20 $00 $0C $43 $68 $75 $6E $6B  $20 $73 $69 $7A $65 $3A $20 $00  $04 $4D $54 $68 $64 $00 $04 $4D
     3 2030 54 72 6B 00 0F 48 + .by  $54 $72 $6B $00 $0F $48 $31 $3A  $53 $45 $4C $46 $54 $45 $53 $54  $2E $4D $49 $44 $00
Source: MIDICar Player.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 2045			RTLIB
   113 2045				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D3
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $2045..$24A4
   118
   119 				; ------------------------------------------------------------
   120
   121 24A5			START
   122 24A5 BA				tsx
   123 24A6 8E 14 2B			stx MAIN.@halt+1
   124
   125 					.ifdef fmulinit
   126 					fmulinit
   127 					.fi
   128
   129 = 0262			VLEN	= VARDATASIZE-VARINITSIZE
   130 = 2B32			VADR	= DATAORIGIN+VARINITSIZE
   131
   132 					ift VADR > $BFFF
   133 					ert 'Invalid memory address range ',VADR
   134 					eli (VLEN>0) && (VLEN<=256)
   135 					ldx #256-VLEN
   136 					lda #$00
   137 					sta:rne VADR+VLEN-256,x+
   138 					eli VLEN>256
   139 					@fill #VADR #VLEN #$00
   139 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   139 24A9 A9 32 85 88 A9 2B +  MWA #VADR @FILL.PTR1
   139 24B1 A9 62 85 8C A9 02 +  MWA #VLEN @FILL.PTR3
   139 24B9 A9 00 85 84		 MVA #$00 @FILL.PTR2
   139 24BD 20 7C 22		 JSR @FILL
   140 					eif
   141
   142 				.ifdef :psptr
   143 					mwa #PROGRAMSTACK :psptr
   144 				.fi
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 					icl 'atari\romoff.asm'
   148 					.fi
   149
   150 24C0 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 24C2 BD 40 03 9D 19 2B + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 24CB E8				inx						; X = 0
   154 24CC 86 80			stx bp						; BP = 0
   155
   156 24CE 8E 0F D2			stx skctl					; reset POKEY
   157 24D1 A9 03			lda #3
   158 24D3 8D 0F D2			sta skctl
   159
   160 24D6 CA				dex						; X = 255
   161
   162 24D7				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
Source: MIDICar Player.a65
   163
   164 24D7			.local	MAIN						; PROCEDURE
   165
   166 24D7 4C E9 2A			jmp l_004C
   167
   168 				; ------------------------------------------------------------
   169
   170 24DA			.local	SYSTEM						; UNIT
   171
   172 24DA			.local	FILEPOS						; FUNCTION | ASSEMBLER
   173
   174 				; -------------------  ASM Block 00000011  -------------------
   175
   176 24DA 8A 48			txa:pha
   177
   178 24DC AD 37 2B 85 82 AD + 	mwa f :bp2
   179
   180 24E6 A0 04			ldy #s@file.chanel
   181 24E8 B1 82			lda (:bp2),y
   182 24EA AA				tax
   183 24EB A9 26			lda #38
   184 24ED 9D 42 03			sta iccmd,x
   185
   186 24F0				m@call	ciov
Macro: M@CALL [Source: macros.asm]
    12 24F0 20 56 E4				jsr CIOV
Source: MIDICar Player.a65
   187
   188 24F3 8C 33 2B			sty IOResult
   189
   190 24F6 BD 4C 03 85 84		mva icax3,x :eax
   191 24FB BD 4D 03 85 85		mva icax4,x :eax+1
   192 2500 BD 4E 03 85 86		mva icax5,x :eax+2
   193
   194 2505 A9 00 85 87			mva #$00 :eax+3
   195 2509 85 8E			sta :ecx+2
   196 250B 85 8F			sta :ecx+3
   197
   198 250D A0 02			ldy #s@file.record
   199 250F B1 82			lda (:bp2),y
   200 2511 85 8C			sta :ecx
   201 2513 C8				iny
   202 2514 B1 82			lda (:bp2),y
   203 2516 85 8D			sta :ecx+1
   204
   205 2518 20 7D 23			jsr idivEAX_ECX.main
   206
   207 251B A5 84 8D 39 2B		mva :eax Result
   208 2520 A5 85 8D 3A 2B		mva :eax+1 Result+1
   209 2525 A5 86 8D 3B 2B		mva :eax+2 Result+2
   210 252A A5 87 8D 3C 2B		mva :eax+3 Result+3
   211
   212 252F 68 AA			pla:tax
   213
   214 2531			@exit
   215
   216 				; ------------------------------------------------------------
   217
   218 = 2B37			F	= DATAORIGIN+$000B
   219 = 2B39			RESULT	= DATAORIGIN+$000D
   220
   221 = 2B37			@VarData	= F
   222 = 0002			@VarDataSize	= 2
   223
   224 2531 60				rts						; ret
   225 				.endl
   226
   227 2532			.local	SEEK						; PROCEDURE | ASSEMBLER
   228
   229 				; -------------------  ASM Block 00000012  -------------------
   230
   231 2532 8A 48			txa:pha
   232
   233 2534 AD 3D 2B 85 82 AD + 	mwa f :bp2
   234
   235 253E A0 04			ldy #s@file.chanel
   236 2540 B1 82			lda (:bp2),y
   237 2542 AA				tax
   238 2543 A9 25			lda #37
   239 2545 9D 42 03			sta iccmd,x
   240
   241 2548 A0 02			ldy #s@file.record
   242 254A B1 82			lda (:bp2),y
   243 254C 85 84			sta :eax
   244 254E C8				iny
   245 254F B1 82			lda (:bp2),y
   246 2551 85 85			sta :eax+1
   247 2553 A9 00			lda #$00
   248 2555 85 86			sta :eax+2
   249 2557 85 87			sta :eax+3
   250
   251 2559 AD 3F 2B 85 8C		mva a :ecx
   252 255E AD 40 2B 85 8D		mva a+1 :ecx+1
   253 2563 AD 41 2B 85 8E		mva a+2 :ecx+2
   254 2568 AD 42 2B 85 8F		mva a+3 :ecx+3
   255
   256 256D 20 37 23			jsr imulECX
   257
   258 2570 A5 84 9D 4C 03		mva :eax icax3,x
   259 2575 A5 85 9D 4D 03		mva :eax+1 icax4,x
   260 257A A5 86 9D 4E 03		mva :eax+2 icax5,x
   261
   262 257F				m@call	ciov
Macro: M@CALL [Source: macros.asm]
    12 257F 20 56 E4				jsr CIOV
Source: MIDICar Player.a65
   263
   264 2582 8C 33 2B			sty IOResult
   265
   266 2585 68 AA			pla:tax
   267
   268 				; ------------------------------------------------------------
   269
   270 = 2B3D			F	= DATAORIGIN+$0011
   271 = 2B3F			A	= DATAORIGIN+$0013
   272
   273 = 2B3D			@VarData	= F
   274 = 0006			@VarDataSize	= 6
   275
   276 2587			@exit
   277 					.ifdef @new
   278 					lda <@VarData
   279 					sta :ztmp
   280 					lda >@VarData
   281 					ldy #@VarDataSize-1
   282 					jmp @FreeMem
   283 					els
   284 2587 60				rts						; ret
   285 					eif
   286 				.endl
   287
   288 2588			.local	EOF						; FUNCTION
   289
   290 				; optimize OK (SYSTEM), line = 1151
   291
   292 2588 AD 43 2B			lda F
   293 258B 8D 37 2B			sta FILEPOS.F
   294 258E AD 44 2B			lda F+1
   295 2591 8D 38 2B			sta FILEPOS.F+1
   296 2594 20 DA 24			jsr FILEPOS
   297 2597 AD 39 2B			lda FILEPOS.RESULT
   298 259A 8D 46 2B			sta I
   299 259D AD 3A 2B			lda FILEPOS.RESULT+1
   300 25A0 8D 47 2B			sta I+1
   301 25A3 AD 3B 2B			lda FILEPOS.RESULT+2
   302 25A6 8D 48 2B			sta I+2
   303 25A9 AD 3C 2B			lda FILEPOS.RESULT+3
   304 25AC 8D 49 2B			sta I+3
   305 				; BlockRead
   306
   307 				; optimize OK (SYSTEM), line = 1153
   308
   309 25AF AC 43 2B 84 82 AC + 	mwy F :bp2
   310 25B9 A0 06			ldy #s@file.buffer
   311 25BB AD 1C 26			lda BF
   312 25BE 91 82			sta (:bp2),y
   313 25C0 C8				iny
   314 25C1 AD 1D 26			lda BF+1
   315 25C4 91 82			sta (:bp2),y
   316 25C6 A0 08			ldy #s@file.nrecord
   317 25C8 A9 01			lda #$01
   318 25CA 91 82			sta (:bp2),y
   319 25CC C8				iny
   320 25CD A9 00			lda #$00
   321 25CF 91 82			sta (:bp2),y
   322
   323 25D1 8A 48			txa:pha
   324 25D3 38				sec
   325 					@readfile F, #7
   325 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
   325 25D4 AC 44 2B		 LDY F+1
   325 25D7 AD 43 2B		 LDA F
   325 25DA A2 07		 LDX# 7
   325 25DC 20 08 21		 JSR @READFILE
   326 25DF 68 AA			pla:tax
   327
   328 				; optimize OK (SYSTEM), line = 1155
   329
   330 25E1 AD 43 2B			lda F
   331 25E4 8D 3D 2B			sta SEEK.F
   332 25E7 AD 44 2B			lda F+1
   333 25EA 8D 3E 2B			sta SEEK.F+1
   334 25ED AD 46 2B			lda I
   335 25F0 8D 3F 2B			sta SEEK.A
   336 25F3 AD 47 2B			lda I+1
   337 25F6 8D 40 2B			sta SEEK.A+1
   338 25F9 AD 48 2B			lda I+2
   339 25FC 8D 41 2B			sta SEEK.A+2
   340 25FF AD 49 2B			lda I+3
   341 2602 8D 42 2B			sta SEEK.A+3
   342 2605 20 32 25			jsr SEEK
   343
   344 				; -------------------  ASM Block 00000013  -------------------
   345
   346 2608 AD 43 2B 85 82 AD + 	mwa f :bp2
   347
   348 2612 A0 05			ldy #s@file.status
   349 2614 B1 82			lda (:bp2),y
   350 2616 29 01			and #e@file.eof
   351 2618 8D 45 2B			sta Result
   352
   353 261B			@exit
   354
   355 				; ------------------------------------------------------------
   356
   357 = 2B43			F	= DATAORIGIN+$0017
   358 = 2B45			RESULT	= DATAORIGIN+$0019
   359 = 2B46			I	= DATAORIGIN+$001A
   360 = 2B4A			adr.BF	= [DATAORIGIN+$001E] .array [256]
   361 261B			.var BF	= adr.BF .word
   362
   363 = 2B43			@VarData	= F
   364 = 0106			@VarDataSize	= 262
   365
   366 261B 60				rts						; ret
   367 = 261C 4A 2B		BF
   367 				.endl
   368
   369 261E			.local	FILLCHAR_00A1					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   370
   371 					.MACRO m@INLINE
   372 				
   373 				; -------------------  ASM Block 00000021  -------------------
   374 				
   375 					jsr @fill
   376 				
   377 					.ENDM
   378
   379 				; ------------------------------------------------------------
   380
   381 = 0088			A	= :EDX
   382 = 008C			COUNT	= :ECX
   383 = 0084			VALUE	= :EAX
   384 261E			@exit
   385 				.endl
   386
   387 261E			.local	SETLENGTH					; PROCEDURE | ASSEMBLER | REGISTER
   388
   389 				; -------------------  ASM Block 00000033  -------------------
   390
   391 261E A0 00			ldy #0
   392 2620 A5 8C 91 88			mva Len (:edx),y
   393
   394 				; ------------------------------------------------------------
   395
   396 = 0088			S	= :EDX
   397 = 008C			LEN	= :ECX
   398 2624			@exit
   399 					.ifdef @new
   400 					lda <@VarData
   401 					sta :ztmp
   402 					lda >@VarData
   403 					ldy #@VarDataSize-1
   404 					jmp @FreeMem
   405 					els
   406 2624 60				rts						; ret
   407 					eif
   408 				.endl
   409
   410 				; ------------------------------------------------------------
   411
   412 = 0101			__PORTB_BANKS	= $0101
   413 = 0648			M_PI_2	= $0648
   414 = 0192			D_PI_2	= $0192
   415 = 0004			D_PI_180	= $04
   416 = 0000			MGTIA	= $00
   417 = 0080			MVBXE	= $80
   418 = 0000			VBXE_XDLADR	= $00
   419 = 0100			VBXE_BCBADR	= $0100
   420 = 1000			VBXE_MAPADR	= $1000
   421 = 1000			VBXE_CHBASE	= $1000
   422 = 5000			VBXE_OVRADR	= $5000
   423 = B000			VBXE_WINDOW	= $B000
   424 = 0000			IDLI	= $00
   425 = 0001			IVBL	= $01
   426 = 0002			ITIM1	= $02
   427 = 0003			ITIM2	= $03
   428 = 0004			ITIM4	= $04
   429 = 00FE			CH_DELCHR	= $FE
   430 = 009B			CH_ENTER	= $9B
   431 = 001B			CH_ESC	= $1B
   432 = 001C			CH_CURS_UP	= $1C
   433 = 001D			CH_CURS_DOWN	= $1D
   434 = 001E			CH_CURS_LEFT	= $1E
   435 = 001F			CH_CURS_RIGHT	= $1F
   436 = 007F			CH_TAB	= $7F
   437 = 009B			CH_EOL	= $9B
   438 = 007D			CH_CLR	= $7D
   439 = 00FD			CH_BELL	= $FD
   440 = 007E			CH_DEL	= $7E
   441 = 009C			CH_DELLINE	= $9C
   442 = 009D			CH_INSLINE	= $9D
   443 = 0000			COLOR_BLACK	= $00
   444 = 000E			COLOR_WHITE	= $0E
   445 = 0032			COLOR_RED	= $32
   446 = 0096			COLOR_CYAN	= $96
   447 = 0068			COLOR_VIOLET	= $68
   448 = 00C4			COLOR_GREEN	= $C4
   449 = 0074			COLOR_BLUE	= $74
   450 = 00EE			COLOR_YELLOW	= $EE
   451 = 0028			COLOR_ORANGE	= $28
   452 = 00E4			COLOR_BROWN	= $E4
   453 = 003C			COLOR_LIGHTRED	= $3C
   454 = 0004			COLOR_GRAY1	= $04
   455 = 0006			COLOR_GRAY2	= $06
   456 = 000A			COLOR_GRAY3	= $0A
   457 = 00CC			COLOR_LIGHTGREEN	= $CC
   458 = 007C			COLOR_LIGHTBLUE	= $7C
   459 = 0004			FMOPENREAD	= $04
   460 = 0008			FMOPENWRITE	= $08
   461 = 0009			FMOPENAPPEND	= $09
   462 = 000C			FMOPENREADWRITE	= $0C
   463 = 2B2C			SCREENWIDTH	= DATAORIGIN+$0000
   464 = 2B2E			SCREENHEIGHT	= DATAORIGIN+$0002
   465 = 2B30			DATESEPARATOR	= DATAORIGIN+$0004
   466 = D20A			RND	= $D20A
   467 = 02C0			adr.PALETTE	= $02C0
   468 2625			.var PALETTE	= adr.PALETTE .word
   469 = D012			adr.HPALETTE	= $D012
   470 2625			.var HPALETTE	= adr.HPALETTE .word
   471 = 2B31			FILEMODE	= DATAORIGIN+$0005
   472 = 2B32			GRAPHMODE	= DATAORIGIN+$0006
   473 = 2B33			IORESULT	= DATAORIGIN+$0007
   474 = 2B34			EOLN	= DATAORIGIN+$0008
   475 = 2B35			RNDSEED	= DATAORIGIN+$0009
   476
   477 = 2625 C0 02		PALETTE
   477 = 2627 12 D0		HPALETTE
   477 				.endl							; UNIT SYSTEM
   478
   479 				; ------------------------------------------------------------
   480
   481 2629			.local	MC6850						; UNIT
   482
   483 2629			.local	MC6850_RESET					; PROCEDURE
   484
   485 				; optimize OK (MC6850), line = 68
   486
   487 2629 A9 03			lda #$03
   488 262B 8D 00 D5			sta MC6850_CNTRREG
   489 262E			@exit
   490 					.ifdef @new
   491 					lda <@VarData
   492 					sta :ztmp
   493 					lda >@VarData
   494 					ldy #@VarDataSize-1
   495 					jmp @FreeMem
   496 					els
   497 262E 60				rts						; ret
   498 					eif
   499 				.endl
   500
   501 262F			.local	MC6850_INIT					; PROCEDURE
   502 262F 8D 4A 2C			sta SETUP
   503
   504 				; optimize OK (MC6850), line = 73
   505
   506 2632 8D 00 D5			sta MC6850_CNTRREG
   507
   508 				; ------------------------------------------------------------
   509
   510 = 2C4A			SETUP	= DATAORIGIN+$011E
   511
   512 = 2C4A			@VarData	= SETUP
   513 = 0001			@VarDataSize	= 1
   514
   515 2635			@exit
   516 					.ifdef @new
   517 					lda <@VarData
   518 					sta :ztmp
   519 					lda >@VarData
   520 					ldy #@VarDataSize-1
   521 					jmp @FreeMem
   522 					els
   523 2635 60				rts						; ret
   524 					eif
   525 				.endl
   526
   527 2636			.local	MC6850_SEND					; PROCEDURE
   528 2636 8D 4B 2C			sta DATA
   529
   530 				; --- RepeatUntilProlog
   531 2639			l_00E3
   532
   533 				; optimize OK (MC6850), line = 84
   534
   535 2639 AD 00 D5			lda MC6850_CNTRREG
   536 263C 29 02			and #$02
   537 263E F0 F9			jeq l_00E3
   538
   539 				; optimize OK (MC6850), line = 85
   540
   541 2640 AD 4B 2C			lda DATA
   542 2643 8D 01 D5			sta MC6850_BUFFER
   543
   544 				; ------------------------------------------------------------
   545
   546 = 2C4B			DATA	= DATAORIGIN+$011F
   547
   548 = 2C4B			@VarData	= DATA
   549 = 0001			@VarDataSize	= 1
   550
   551 2646			@exit
   552 					.ifdef @new
   553 					lda <@VarData
   554 					sta :ztmp
   555 					lda >@VarData
   556 					ldy #@VarDataSize-1
   557 					jmp @FreeMem
   558 					els
   559 2646 60				rts						; ret
   560 					eif
   561 				.endl
   562
   563 				; ------------------------------------------------------------
   564
   565 = D500			MC6850_BASE	= $D500
   566 = D500			ADDR_MC6850_CNTRREG	= $D500
   567 = D501			ADDR_MC6850_BUFFER	= $D501
   568 = D500			ADDR_MC6850_STATREG	= $D500
   569 = 0001			CR0	= $01
   570 = 0002			CR1	= $02
   571 = 0004			CR2	= $04
   572 = 0008			CR3	= $08
   573 = 0010			CR4	= $10
   574 = 0020			CR5	= $20
   575 = 0040			CR6	= $40
   576 = 0080			CR7	= $80
   577 = 0000			CD_1	= $00
   578 = 0001			CD_16	= $01
   579 = 0002			CD_64	= $02
   580 = 0003			MASTERRESET	= $03
   581 = 0000			WS_7BITS	= $00
   582 = 0010			WS_8BITS	= $10
   583 = 0000			WS_2BITSTOP	= $00
   584 = 0008			WS_1BITSTOP	= $08
   585 = 0000			WS_EVENPARITY	= $00
   586 = 0004			WS_ODDPARITY	= $04
   587 = 0000			TC_RTSLOW_NOTIRQ	= $00
   588 = 0020			TC_RTSLOW_TIRQ	= $20
   589 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   590 = 0060			TC_BREAKLEVEL	= $60
   591 = 0000			NOIRQ_RECEIVE	= $00
   592 = 0080			IRQ_RECEIVE	= $80
   593 = 0001			RDRF	= $01
   594 = 0002			TDRE	= $02
   595 = 0004			DCD	= $04
   596 = 0008			CTS	= $08
   597 = 0010			FE	= $10
   598 = 0020			OVRN	= $20
   599 = 0040			PE	= $40
   600 = 0080			IRQ	= $80
   601 = D500			MC6850_CNTRREG	= $D500
   602 = D501			MC6850_BUFFER	= $D501
   603 = D500			MC6850_STATREG	= $D500
   604
   605 				.endl							; UNIT MC6850
   606
   607 				; ------------------------------------------------------------
   608
   609 2647			.local	MIDI_FIFO					; UNIT
   610
   611 2647			.local	FIFO_RESET					; PROCEDURE
   612
   613 				; optimize OK (MIDI_FIFO), line = 31
   614
   615 2647 A9 00			lda #$00
   616 2649 85 F0			sta FIFO_HEAD
   617
   618 				; optimize OK (MIDI_FIFO), line = 32
   619
   620 264B 85 F1			sta FIFO_TAIL
   621
   622 				; optimize OK (MIDI_FIFO), line = 33
   623
   624 264D 85 88			sta SYSTEM.FILLCHAR_00A1.A
   625 264F A9 06			lda #$06
   626 2651 85 89			sta SYSTEM.FILLCHAR_00A1.A+1
   627 2653 A9 FF			lda #$FF
   628 2655 85 8C			sta SYSTEM.FILLCHAR_00A1.COUNT
   629 2657 A9 00			lda #$00
   630 2659 85 8D			sta SYSTEM.FILLCHAR_00A1.COUNT+1
   631 265B 85 84			sta SYSTEM.FILLCHAR_00A1.VALUE
   632 265D				.local +MAIN.SYSTEM.FILLCHAR_00A1
   633 265D				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_00A1.M@INLINE [Source: MIDICar Player.a65]
     4 265D 20 7C 22			jsr @fill
Source: MIDICar Player.a65
   634 					.endl
   635 2660			@exit
   636 					.ifdef @new
   637 					lda <@VarData
   638 					sta :ztmp
   639 					lda >@VarData
   640 					ldy #@VarDataSize-1
   641 					jmp @FreeMem
   642 					els
   643 2660 60				rts						; ret
   644 					eif
   645 				.endl
   646
   647 2661			.local	FIFO_READBYTE					; FUNCTION
   648
   649 				; optimize OK (MIDI_FIFO), line = 38
   650
   651 2661 A4 F1			ldy FIFO_TAIL
   652 2663 C4 F0			cpy FIFO_HEAD
   653 2665 F0 21			jeq l_0122
   654
   655 				; optimize OK (MIDI_FIFO), line = 40
   656
   657 2667 B9 00 06			lda adr.FIFO_BUF,y
   658 266A AC 4D 2C 84 81		mvy DATA+1 :bp+1
   659 266F AC 4C 2C			ldy DATA
   660 2672 91 80			sta (:bp),y
   661
   662 				; optimize FAIL (0, MIDI_FIFO), line = 41
   663
   664 2674 E6 F1			inc FIFO_TAIL
   665
   666 				; optimize OK (MIDI_FIFO), line = 42
   667
   668 2676 A5 F1			lda FIFO_TAIL
   669 2678 C9 FF			cmp #$FF
   670 267A D0 04			jne l_0142
   671 267C A9 00			lda #$00
   672 267E 85 F1			sta FIFO_TAIL
   673 2680			l_0142
   674
   675 				; optimize OK (MIDI_FIFO), line = 43
   676
   677 2680 A9 01			lda #$01
   678 2682 8D 4E 2C			sta RESULT
   679 2685 4C 8D 26			jmp l_0156
   680 2688			l_0122
   681
   682 				; optimize OK (MIDI_FIFO), line = 46
   683
   684 2688 A9 00			lda #$00
   685 268A 8D 4E 2C			sta RESULT
   686 268D			l_0156
   687 268D			@exit
   688
   689 				; ------------------------------------------------------------
   690
   691 = 2C4C			DATA	= DATAORIGIN+$0120
   692 = 2C4E			RESULT	= DATAORIGIN+$0122
   693
   694 = 2C4C			@VarData	= DATA
   695 = 0002			@VarDataSize	= 2
   696
   697 268D 60				rts						; ret
   698 				.endl
   699
   700 268E			.local	FIFO_WRITEBYTE					; FUNCTION
   701 268E 8D 4F 2C			sta DATA
   702
   703 				; optimize OK (MIDI_FIFO), line = 51
   704
   705 2691 A5 F0			lda FIFO_HEAD
   706 2693 18 69 01			add #$01
   707 2696 85 9D			sta :STACKORIGIN+9
   708 2698 A9 00			lda #$00
   709 269A 69 00			adc #$00
   710 269C 85 AD			sta :STACKORIGIN+STACKWIDTH+9
   711 269E A9 00			lda #$00
   712 26A0 69 00			adc #$00
   713 26A2 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
   714 26A4 A9 00			lda #$00
   715 26A6 69 00			adc #$00
   716 26A8 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
   717 26AA A0 01			ldy #1
   718 26AC A5 CD			lda :STACKORIGIN+STACKWIDTH*3+9
   719 26AE C9 00			cmp #$00
   720 26B0 D0 10			bne @+
   721 26B2 A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
   722 26B4 C9 00			cmp #$00
   723 26B6 D0 0A			bne @+
   724 26B8 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
   725 26BA C9 00			cmp #$00
   726 26BC D0 04			bne @+
   727 26BE A5 9D			lda :STACKORIGIN+9
   728 26C0 C5 F1			cmp FIFO_TAIL
   729 				@
   730 26C2 F0 01			beq @+
   731 26C4 88				dey
   732 				@
   733 26C5 84 9D			sty :STACKORIGIN+9
   734 26C7 A5 F0			lda FIFO_HEAD
   735 26C9 18 69 01			add #$01
   736 26CC 85 9E			sta :STACKORIGIN+10
   737 26CE A9 00			lda #$00
   738 26D0 69 00			adc #$00
   739 26D2 85 AE			sta :STACKORIGIN+STACKWIDTH+10
   740 26D4 A9 00			lda #$00
   741 26D6 69 00			adc #$00
   742 26D8 85 BE			sta :STACKORIGIN+STACKWIDTH*2+10
   743 26DA A9 00			lda #$00
   744 26DC 69 00			adc #$00
   745 26DE 85 CE			sta :STACKORIGIN+STACKWIDTH*3+10
   746 26E0 A0 01			ldy #1
   747 26E2 A5 CE			lda :STACKORIGIN+STACKWIDTH*3+10
   748 26E4 C9 00			cmp #$00
   749 26E6 D0 10			bne @+
   750 26E8 A5 BE			lda :STACKORIGIN+STACKWIDTH*2+10
   751 26EA C9 00			cmp #$00
   752 26EC D0 0A			bne @+
   753 26EE A5 AE			lda :STACKORIGIN+STACKWIDTH+10
   754 26F0 C9 00			cmp #$00
   755 26F2 D0 04			bne @+
   756 26F4 A5 9E			lda :STACKORIGIN+10
   757 26F6 C9 FF			cmp #$FF
   758 				@
   759 26F8 F0 01			beq @+
   760 26FA 88				dey
   761 				@
   762 26FB 84 9E			sty :STACKORIGIN+10
   763 26FD A0 01			ldy #1
   764 26FF A5 F1			lda FIFO_TAIL
   765 2701 F0 01			beq @+
   766 2703 88				dey
   767 				@
   768 2704 98				tya
   769 2705 25 9E			and :STACKORIGIN+10
   770 2707 05 9D			ora :STACKORIGIN+9
   771 2709 F0 08			jeq l_0192
   772
   773 				; optimize OK (MIDI_FIFO), line = 53
   774
   775 270B A9 00			lda #$00
   776 270D 8D 50 2C			sta RESULT
   777 2710 4C 2C 27			jmp @exit					; exit
   778 2713			l_0192
   779
   780 				; optimize OK (MIDI_FIFO), line = 56
   781
   782 2713 A4 F0			ldy FIFO_HEAD
   783 2715 AD 4F 2C			lda DATA
   784 2718 99 00 06			sta adr.FIFO_BUF,y
   785
   786 				; optimize FAIL (0, MIDI_FIFO), line = 57
   787
   788 271B E6 F0			inc FIFO_HEAD
   789
   790 				; optimize OK (MIDI_FIFO), line = 58
   791
   792 271D A5 F0			lda FIFO_HEAD
   793 271F C9 FF			cmp #$FF
   794 2721 D0 04			jne l_01BF
   795 2723 A9 00			lda #$00
   796 2725 85 F0			sta FIFO_HEAD
   797 2727			l_01BF
   798 2727			l_01A0
   799
   800 				; optimize OK (MIDI_FIFO), line = 60
   801
   802 2727 A9 01			lda #$01
   803 2729 8D 50 2C			sta RESULT
   804 272C			@exit
   805
   806 				; ------------------------------------------------------------
   807
   808 = 2C4F			DATA	= DATAORIGIN+$0123
   809 = 2C50			RESULT	= DATAORIGIN+$0124
   810
   811 = 2C4F			@VarData	= DATA
   812 = 0001			@VarDataSize	= 1
   813
   814 272C 60				rts						; ret
   815 				.endl
   816
   817 272D			.local	FIFO_FLUSH					; PROCEDURE
   818
   819 				; --- WhileProlog
   820 272D 4C 35 27			jmp l_01D0
   821 2730			l_01D1
   822
   823 				; optimize OK (MIDI_FIFO), line = 66
   824
   825 2730 A5 FF			lda ZP_DATA
   826 2732 20 36 26			jsr MC6850.MC6850_SEND
   827 2735			l_01D0
   828
   829 				; optimize OK (MIDI_FIFO), line = 65
   830
   831 2735 A9 FF			lda <ZP_DATA
   832 2737 8D 4C 2C			sta FIFO_READBYTE.DATA
   833 273A A9 00			lda >ZP_DATA
   834 273C 8D 4D 2C			sta FIFO_READBYTE.DATA+1
   835 273F 20 61 26			jsr FIFO_READBYTE
   836 2742 AD 4E 2C			lda FIFO_READBYTE.RESULT
   837 2745 D0 E9			jne l_01D1
   838 2747			@exit
   839 					.ifdef @new
   840 					lda <@VarData
   841 					sta :ztmp
   842 					lda >@VarData
   843 					ldy #@VarDataSize-1
   844 					jmp @FreeMem
   845 					els
   846 2747 60				rts						; ret
   847 					eif
   848 				.endl
   849
   850 				; ------------------------------------------------------------
   851
   852 = 00FF			ZP_DATA	= $FF
   853 = 00FF			FIFO_SIZE	= $FF
   854 = 0600			FIFO_ADDR	= $0600
   855 = 0600			adr.FIFO_BUF	= $0600
   856 2748			.var FIFO_BUF	= adr.FIFO_BUF .word
   857 = 00F0			FIFO_HEAD	= $F0
   858 = 00F1			FIFO_TAIL	= $F1
   859
   860 = 2748 00 06		FIFO_BUF
   860 				.endl							; UNIT MIDI_FIFO
   861
   862 				; ------------------------------------------------------------
   863
   864 274A			.local	ATARI						; UNIT
   865
   866 				; ------------------------------------------------------------
   867
   868 = 0010			IRQENS	= $10
   869 = 0012			RTCLOK	= $12
   870 = 0012			RTCLOK1	= $12
   871 = 0013			RTCLOK2	= $13
   872 = 0014			RTCLOK3	= $14
   873 = 004D			ATRACT	= $4D
   874 = 0052			LMARGIN	= $52
   875 = 0053			RMARGIN	= $53
   876 = 0054			ROWCRS	= $54
   877 = 0055			COLCRS	= $55
   878 = 0057			DINDEX	= $57
   879 = 0058			SAVMSC	= $58
   880 = 0062			PALNTS	= $62
   881 = 006A			RAMTOP	= $6A
   882 = 0200			VDSLST	= $0200
   883 = 0230			SDLSTL	= $0230
   884 = 0290			TXTROW	= $0290
   885 = 0291			TXTCOL	= $0291
   886 = 0293			TINDEX	= $0293
   887 = 0294			TXTMSC	= $0294
   888 = 022F			SDMCTL	= $022F
   889 = 026F			GPRIOR	= $026F
   890 = 02F0			CRSINH	= $02F0
   891 = 02F3			CHACT	= $02F3
   892 = 02F4			CHBAS	= $02F4
   893 = 02FC			CH	= $02FC
   894 = 02C0			PCOLR0	= $02C0
   895 = 02C1			PCOLR1	= $02C1
   896 = 02C2			PCOLR2	= $02C2
   897 = 02C3			PCOLR3	= $02C3
   898 = 02C4			COLOR0	= $02C4
   899 = 02C5			COLOR1	= $02C5
   900 = 02C6			COLOR2	= $02C6
   901 = 02C7			COLOR3	= $02C7
   902 = 02C8			COLOR4	= $02C8
   903 = 02C8			COLBAKS	= $02C8
   904 = D000			HPOSP0	= $D000
   905 = D001			HPOSP1	= $D001
   906 = D002			HPOSP2	= $D002
   907 = D003			HPOSP3	= $D003
   908 = D004			HPOSM0	= $D004
   909 = D005			HPOSM1	= $D005
   910 = D006			HPOSM2	= $D006
   911 = D007			HPOSM3	= $D007
   912 = D008			SIZEP0	= $D008
   913 = D009			SIZEP1	= $D009
   914 = D00A			SIZEP2	= $D00A
   915 = D00B			SIZEP3	= $D00B
   916 = D00C			SIZEM	= $D00C
   917 = D00D			GRAFP0	= $D00D
   918 = D00E			GRAFP1	= $D00E
   919 = D00F			GRAFP2	= $D00F
   920 = D010			GRAFP3	= $D010
   921 = D011			GRAFM	= $D011
   922 = D004			P0PF	= $D004
   923 = D014			PAL	= $D014
   924 = D012			COLPM0	= $D012
   925 = D013			COLPM1	= $D013
   926 = D014			COLPM2	= $D014
   927 = D015			COLPM3	= $D015
   928 = D016			COLPF0	= $D016
   929 = D017			COLPF1	= $D017
   930 = D018			COLPF2	= $D018
   931 = D019			COLPF3	= $D019
   932 = D01A			COLBK	= $D01A
   933 = D01B			PRIOR	= $D01B
   934 = D01D			GRACTL	= $D01D
   935 = D01E			HITCLR	= $D01E
   936 = D01F			CONSOL	= $D01F
   937 = D200			AUDF1	= $D200
   938 = D201			AUDC1	= $D201
   939 = D202			AUDF2	= $D202
   940 = D203			AUDC2	= $D203
   941 = D204			AUDF3	= $D204
   942 = D205			AUDC3	= $D205
   943 = D206			AUDF4	= $D206
   944 = D207			AUDC4	= $D207
   945 = D208			AUDCTL	= $D208
   946 = D209			KBCODE	= $D209
   947 = D20E			IRQEN	= $D20E
   948 = D20F			SKSTAT	= $D20F
   949 = D300			PORTA	= $D300
   950 = D301			PORTB	= $D301
   951 = D400			DMACTL	= $D400
   952 = D401			CHACTL	= $D401
   953 = D402			DLISTL	= $D402
   954 = D404			HSCROL	= $D404
   955 = D405			VSCROL	= $D405
   956 = D407			PMBASE	= $D407
   957 = D409			CHBASE	= $D409
   958 = D40A			WSYNC	= $D40A
   959 = D40B			VCOUNT	= $D40B
   960 = D40C			PENH	= $D40C
   961 = D40D			PENV	= $D40D
   962 = D40E			NMIEN	= $D40E
   963 = FFFA			NMIVEC	= $FFFA
   964 = FFFC			RESETVEC	= $FFFC
   965 = FFFE			IRQVEC	= $FFFE
   966
   967 				.endl							; UNIT ATARI
   968
   969 				; ------------------------------------------------------------
   970
   971 274A			.local	CRT						; UNIT
   972
   973 				; ------------------------------------------------------------
   974
   975 = 2C51			TEXTATTR	= DATAORIGIN+$0125
   976 = D01F			CONSOL	= $D01F
   977 = 0000			CN_START_SELECT_OPTION	= $00
   978 = 0001			CN_SELECT_OPTION	= $01
   979 = 0002			CN_START_OPTION	= $02
   980 = 0003			CN_OPTION	= $03
   981 = 0004			CN_START_SELECT	= $04
   982 = 0005			CN_SELECT	= $05
   983 = 0006			CN_START	= $06
   984 = 0007			CN_NONE	= $07
   985 = 0000			BW40	= $00
   986 = 0001			CO40	= $01
   987 = 0002			BW80	= $02
   988 = 0003			CO80	= $03
   989 = 0007			MONO	= $07
   990 = 0001			C40	= $01
   991 = 0003			C80	= $03
   992 = 0000			BLACK	= $00
   993 = 000F			WHITE	= $0F
   994 = 0026			RED	= $26
   995 = 00AC			CYAN	= $AC
   996 = 0048			PURPLE	= $48
   997 = 00B6			GREEN	= $B6
   998 = 0086			BLUE	= $86
   999 = 00DC			YELLOW	= $DC
  1000 = 0018			ORANGE	= $18
  1001 = 00F4			BROWN	= $F4
  1002 = 002A			LIGHT_RED	= $2A
  1003 = 0004			DARK_GREY	= $04
  1004 = 0008			GREY	= $08
  1005 = 00BC			LIGHT_GREEN	= $BC
  1006 = 009A			LIGHT_BLUE	= $9A
  1007 = 000C			LIGHT_GREY	= $0C
  1008 = 0080			BLINK	= $80
  1009
  1010 				.endl							; UNIT CRT
  1011
  1012 				; ------------------------------------------------------------
  1013
  1014 274A			.local	MIDFILES					; UNIT
  1015
  1016 274A			.local	READWORDBI					; FUNCTION
  1017
  1018 				; BlockRead
  1019
  1020 				; optimize OK (MIDFILES), line = 41
  1021
  1022 274A AC 64 2C 84 82 AC + 	mwy F :bp2
  1023 2754 A0 06			ldy #s@file.buffer
  1024 2756 AD B6 2A			lda BI
  1025 2759 91 82			sta (:bp2),y
  1026 275B C8				iny
  1027 275C AD B7 2A			lda BI+1
  1028 275F 91 82			sta (:bp2),y
  1029 2761 A0 08			ldy #s@file.nrecord
  1030 2763 A9 02			lda #$02
  1031 2765 91 82			sta (:bp2),y
  1032 2767 C8				iny
  1033 2768 A9 00			lda #$00
  1034 276A 91 82			sta (:bp2),y
  1035
  1036 276C 8A 48			txa:pha
  1037 276E 38				sec
  1038 					@readfile F, #7
  1038 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1038 276F AC 65 2C		 LDY F+1
  1038 2772 AD 64 2C		 LDA F
  1038 2775 A2 07		 LDX# 7
  1038 2777 20 08 21		 JSR @READFILE
  1039 277A 68 AA			pla:tax
  1040
  1041 				; optimize OK (MIDFILES), line = 42
  1042
  1043 277C A9 66			lda <RESULT
  1044 277E 8D 68 2C			sta RESULTPTR
  1045 2781 A9 2C			lda >RESULT
  1046 2783 8D 69 2C			sta RESULTPTR+1
  1047
  1048 				; optimize OK (MIDFILES), line = 43
  1049
  1050 2786 AD 61 2C			lda adr.BI+$01
  1051 2789 AC 69 2C 84 81		mvy RESULTPTR+1 :bp+1
  1052 278E AC 68 2C			ldy RESULTPTR
  1053 2791 91 80			sta (:bp),y
  1054 2793 EE 68 2C			inc RESULTPTR
  1055 2796 D0 03			sne
  1056 2798 EE 69 2C			inc RESULTPTR+1
  1057
  1058 				; optimize OK (MIDFILES), line = 44
  1059
  1060 279B AD 60 2C			lda adr.BI+$00
  1061 279E AC 69 2C 84 81		mvy RESULTPTR+1 :bp+1
  1062 27A3 AC 68 2C			ldy RESULTPTR
  1063 27A6 91 80			sta (:bp),y
  1064 27A8			@exit
  1065
  1066 				; ------------------------------------------------------------
  1067
  1068 = 2C64			F	= DATAORIGIN+$0138
  1069 = 2C66			RESULT	= DATAORIGIN+$013A
  1070 = 2C68			RESULTPTR	= DATAORIGIN+$013C
  1071
  1072 = 2C64			@VarData	= F
  1073 = 0004			@VarDataSize	= 4
  1074
  1075 27A8 60				rts						; ret
  1076 				.endl
  1077
  1078 27A9			.local	READLONGBI					; FUNCTION
  1079
  1080 				; BlockRead
  1081
  1082 				; optimize OK (MIDFILES), line = 53
  1083
  1084 27A9 AC 6A 2C 84 82 AC + 	mwy F :bp2
  1085 27B3 A0 06			ldy #s@file.buffer
  1086 27B5 AD B6 2A			lda BI
  1087 27B8 91 82			sta (:bp2),y
  1088 27BA C8				iny
  1089 27BB AD B7 2A			lda BI+1
  1090 27BE 91 82			sta (:bp2),y
  1091 27C0 A0 08			ldy #s@file.nrecord
  1092 27C2 A9 04			lda #$04
  1093 27C4 91 82			sta (:bp2),y
  1094 27C6 C8				iny
  1095 27C7 A9 00			lda #$00
  1096 27C9 91 82			sta (:bp2),y
  1097
  1098 27CB 8A 48			txa:pha
  1099 27CD 38				sec
  1100 					@readfile F, #7
  1100 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1100 27CE AC 6B 2C		 LDY F+1
  1100 27D1 AD 6A 2C		 LDA F
  1100 27D4 A2 07		 LDX# 7
  1100 27D6 20 08 21		 JSR @READFILE
  1101 27D9 68 AA			pla:tax
  1102
  1103 				; optimize OK (MIDFILES), line = 54
  1104
  1105 27DB A9 6C			lda <RESULT
  1106 27DD 8D 70 2C			sta RESULTPTR
  1107 27E0 A9 2C			lda >RESULT
  1108 27E2 8D 71 2C			sta RESULTPTR+1
  1109
  1110 				; optimize OK (MIDFILES), line = 55
  1111
  1112 27E5 A9 03			lda #$03
  1113 27E7 8D 72 2C			sta I
  1114
  1115 27EA			l_0217
  1116 				; --- ForToDoCondition
  1117
  1118 				; optimize OK (MIDFILES), line = 57
  1119
  1120 27EA AC 72 2C			ldy I
  1121 27ED B9 60 2C			lda adr.BI,y
  1122 27F0 AC 71 2C 84 81		mvy RESULTPTR+1 :bp+1
  1123 27F5 AC 70 2C			ldy RESULTPTR
  1124 27F8 91 80			sta (:bp),y
  1125
  1126 				; optimize FAIL (0, MIDFILES), line = 58
  1127
  1128 27FA EE 70 2C			inc RESULTPTR
  1129 27FD D0 03			sne
  1130 27FF EE 71 2C			inc RESULTPTR+1
  1131
  1132 				; --- ForToDoEpilog
  1133 2802 CE 72 2C			dec I
  1134 2805 10 E3			jpl l_0217
  1135 2807			l_0225
  1136 2807			@exit
  1137
  1138 				; ------------------------------------------------------------
  1139
  1140 = 2C6A			F	= DATAORIGIN+$013E
  1141 = 2C6C			RESULT	= DATAORIGIN+$0140
  1142 = 2C70			RESULTPTR	= DATAORIGIN+$0144
  1143 = 2C72			I	= DATAORIGIN+$0146
  1144
  1145 = 2C6A			@VarData	= F
  1146 = 0005			@VarDataSize	= 5
  1147
  1148 2807 60				rts						; ret
  1149 				.endl
  1150
  1151 2808			.local	LOADMIDI					; PROCEDURE
  1152
  1153 				; ------------------------------------------------------------
  1154
  1155 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1156 				; as Pointer
  1157 2808 B5 94			lda :STACKORIGIN,x
  1158 280A 85 82			sta :bp2
  1159 280C B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1160 280E 85 83			sta :bp2+1
  1161 2810 A0 00			ldy #$00
  1162 2812 B1 82 99 73 2C C8 + 	mva:rne (:bp2),y adr.FN,y+
  1163 281A A9 73 8D A8 2A A9 + 	mwa #adr.FN FN
  1164 2824 CA				dex
  1165 2825			@main
  1166
  1167 				; optimize OK (MIDFILES), line = 73
  1168
  1169 2825 A9 00			lda #$00
  1170 2827 8D 7F 2D			sta OFS
  1171 282A A9 60			lda #$60
  1172 282C 8D 80 2D			sta OFS+1
  1173
  1174 				; optimize FAIL ('@print', MIDFILES), line = 75
  1175
  1176 					@printSTRING #CODEORIGIN+$0000
  1176 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  1176 282F A0 20		 LDY> CODEORIGIN+$0000
  1176 2831 A9 00		 LDA< CODEORIGIN+$0000
  1176 2833 20 D3 23		 JSR @PRINTSTRING
  1177 					@printSTRING FN
  1177 				 LDY FN+1\ LDA FN\ JSR @PRINTSTRING
  1177 2836 AC A9 2A		 LDY FN+1
  1177 2839 AD A8 2A		 LDA FN
  1177 283C 20 D3 23		 JSR @PRINTSTRING
  1178 283F 20 C5 23			@printEOL
  1179 				; AssignFile
  1180
  1181 				; optimize OK (MIDFILES), line = 77
  1182
  1183 2842 AC AA 2A 84 82 AC + 	mwy F :bp2
  1184 284C A0 00			ldy #s@file.pfname
  1185 284E AD A8 2A			lda FN
  1186 2851 91 82			sta (:bp2),y
  1187 2853 C8				iny
  1188 2854 AD A9 2A			lda FN+1
  1189 2857 91 82			sta (:bp2),y
  1190 2859 A0 05			ldy #s@file.status
  1191 285B A9 00			lda #$00
  1192 285D 91 82			sta (:bp2),y
  1193 				; Reset
  1194 285F A0 02			ldy #s@file.record
  1195 2861 A9 01			lda #$01
  1196 2863 91 82			sta (:bp2),y
  1197 2865 C8				iny
  1198 2866 A9 00			lda #$00
  1199 2868 91 82			sta (:bp2),y
  1200
  1201 286A 8A 48			txa:pha
  1202 286C 38				sec
  1203 					@openfile F, MAIN.SYSTEM.FileMode
  1203 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  1203 286D AC AB 2A		 LDY F+1
  1203 2870 AD AA 2A		 LDA F
  1203 2873 AE 31 2B		 LDX MAIN.SYSTEM.FILEMODE
  1203 2876 20 45 20		 JSR @OPENFILE
  1204 2879 68 AA			pla:tax
  1205
  1206 				; optimize OK (MIDFILES), line = 78
  1207
  1208 287B A9 00			lda #$00
  1209 287D 8D 81 2D			sta CURTRACK
  1210 2880 A9 FF			lda #$FF
  1211 2882 8D 82 2D			sta TRACKCOUNT
  1212 2885 A9 00			lda #$00
  1213 2887 8D 8A 2D			sta DATAPOS
  1214 288A 8D 8B 2D			sta DATAPOS+1
  1215
  1216 				; optimize OK (MIDFILES), line = 79
  1217
  1218 288D AD AC 2A			lda CHUNKHEAD
  1219 2890 85 88			sta SYSTEM.SETLENGTH.S
  1220 2892 AD AD 2A			lda CHUNKHEAD+1
  1221 2895 85 89			sta SYSTEM.SETLENGTH.S+1
  1222 2897 A9 04			lda #$04
  1223 2899 85 8C			sta SYSTEM.SETLENGTH.LEN
  1224 289B 20 1E 26			jsr SYSTEM.SETLENGTH
  1225
  1226 				; --- WhileProlog
  1227 289E 4C 6B 2A			jmp l_026A
  1228 28A1			l_026B
  1229 				; BlockRead
  1230
  1231 				; optimize OK (MIDFILES), line = 82
  1232
  1233 28A1 AC AA 2A 84 82 AC + 	mwy F :bp2
  1234 28AB A0 06			ldy #s@file.buffer
  1235 28AD A9 83			lda <adr.CHUNKHEAD
  1236 28AF 18 69 01			add #$01
  1237 28B2 91 82			sta (:bp2),y
  1238 28B4 C8				iny
  1239 28B5 A9 2D			lda >adr.CHUNKHEAD
  1240 28B7 69 00			adc #$00
  1241 28B9 91 82			sta (:bp2),y
  1242 28BB A0 08			ldy #s@file.nrecord
  1243 28BD A9 04			lda #$04
  1244 28BF 91 82			sta (:bp2),y
  1245 28C1 C8				iny
  1246 28C2 A9 00			lda #$00
  1247 28C4 91 82			sta (:bp2),y
  1248 28C6 A0 0A			ldy #s@file.numread
  1249 28C8 A9 88			lda <V
  1250 28CA 91 82			sta (:bp2),y
  1251 28CC C8				iny
  1252 28CD A9 2D			lda >V
  1253 28CF 91 82			sta (:bp2),y
  1254
  1255 28D1 8A 48			txa:pha
  1256 28D3 38				sec
  1257 					@readfile F, #135
  1257 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1257 28D4 AC AB 2A		 LDY F+1
  1257 28D7 AD AA 2A		 LDA F
  1257 28DA A2 87		 LDX# 135
  1257 28DC 20 08 21		 JSR @READFILE
  1258 28DF 68 AA			pla:tax
  1259
  1260 				; optimize OK (MIDFILES), line = 83
  1261
  1262 28E1 AD 89 2D			lda V+1
  1263 28E4 D0 05			bne @+
  1264 28E6 AD 88 2D			lda V
  1265 28E9 C9 04			cmp #$04
  1266 				@
  1267 28EB F0 03			jeq l_0288
  1268 28ED 4C 99 2A			jmp b_026B					; break
  1269 28F0			l_0288
  1270
  1271 				; optimize OK (MIDFILES), line = 84
  1272
  1273 28F0 AD AA 2A			lda F
  1274 28F3 8D 6A 2C			sta READLONGBI.F
  1275 28F6 AD AB 2A			lda F+1
  1276 28F9 8D 6B 2C			sta READLONGBI.F+1
  1277 28FC 20 A9 27			jsr READLONGBI
  1278 28FF AD 6C 2C			lda READLONGBI.RESULT
  1279 2902 8D 8C 2D			sta LEN
  1280 2905 AD 6D 2C			lda READLONGBI.RESULT+1
  1281 2908 8D 8D 2D			sta LEN+1
  1282 290B AD 6E 2C			lda READLONGBI.RESULT+2
  1283 290E 8D 8E 2D			sta LEN+2
  1284 2911 AD 6F 2C			lda READLONGBI.RESULT+3
  1285 2914 8D 8F 2D			sta LEN+3
  1286
  1287 				; optimize FAIL ('@print', MIDFILES), line = 86
  1288
  1289 					@printSTRING #CODEORIGIN+$000C
  1289 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
  1289 2917 A0 20		 LDY> CODEORIGIN+$000C
  1289 2919 A9 0C		 LDA< CODEORIGIN+$000C
  1289 291B 20 D3 23		 JSR @PRINTSTRING
  1290 					@printSTRING CHUNKHEAD
  1290 				 LDY CHUNKHEAD+1\ LDA CHUNKHEAD\ JSR @PRINTSTRING
  1290 291E AC AD 2A		 LDY CHUNKHEAD+1
  1290 2921 AD AC 2A		 LDA CHUNKHEAD
  1290 2924 20 D3 23		 JSR @PRINTSTRING
  1291 2927 20 C5 23			@printEOL
  1292
  1293 				; optimize FAIL ('@print', MIDFILES), line = 87
  1294
  1295 					@printSTRING #CODEORIGIN+$001A
  1295 				 LDY> CODEORIGIN+$001A\ LDA< CODEORIGIN+$001A\ JSR @PRINTSTRING
  1295 292A A0 20		 LDY> CODEORIGIN+$001A
  1295 292C A9 1A		 LDA< CODEORIGIN+$001A
  1295 292E 20 D3 23		 JSR @PRINTSTRING
  1296 2931 E8				inx
  1297 2932 AD 8C 2D 95 94		mva LEN :STACKORIGIN,x
  1298 2937 AD 8D 2D 95 A4		mva LEN+1 :STACKORIGIN+STACKWIDTH,x
  1299 293C AD 8E 2D 95 B4		mva LEN+2 :STACKORIGIN+STACKWIDTH*2,x
  1300 2941 AD 8F 2D 95 C4		mva LEN+3 :STACKORIGIN+STACKWIDTH*3,x
  1301 2946 20 02 24			jsr @printINT
  1302 2949 CA				dex
  1303 294A 20 C5 23			@printEOL
  1304
  1305 				; optimize FAIL ('cmpSTRING', MIDFILES), line = 89
  1306
  1307 294D E8				inx
  1308 294E AD AC 2A 95 94		mva CHUNKHEAD :STACKORIGIN,x
  1309 2953 AD AD 2A 95 A4		mva CHUNKHEAD+1 :STACKORIGIN+STACKWIDTH,x
  1310 2958 E8				inx
  1311 2959 A9 28 95 94			mva #$28 :STACKORIGIN,x
  1312 295D A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  1313 2961 A0 01			ldy #1
  1314 2963 20 2A 22			jsr cmpSTRING
  1315 2966 F0 01			beq @+
  1316 2968 88				dey
  1317 				@
  1318 2969 CA				dex
  1319 296A CA				dex
  1320 296B 98				tya
  1321 296C D0 03 4C FC 29		jeq l_02B4
  1322
  1323 				; optimize OK (MIDFILES), line = 91
  1324
  1325 2971 AD AA 2A			lda F
  1326 2974 8D 64 2C			sta READWORDBI.F
  1327 2977 AD AB 2A			lda F+1
  1328 297A 8D 65 2C			sta READWORDBI.F+1
  1329 297D 20 4A 27			jsr READWORDBI
  1330 2980 AD 66 2C			lda READWORDBI.RESULT
  1331 2983 8D 58 2C			sta MIDHEADER.FORMAT
  1332 2986 AD 67 2C			lda READWORDBI.RESULT+1
  1333 2989 8D 59 2C			sta MIDHEADER.FORMAT+1
  1334
  1335 				; optimize OK (MIDFILES), line = 92
  1336
  1337 298C AD AA 2A			lda F
  1338 298F 8D 64 2C			sta READWORDBI.F
  1339 2992 AD AB 2A			lda F+1
  1340 2995 8D 65 2C			sta READWORDBI.F+1
  1341 2998 20 4A 27			jsr READWORDBI
  1342 299B AD 66 2C			lda READWORDBI.RESULT
  1343 299E 8D 5A 2C			sta MIDHEADER.NTRACKS
  1344 29A1 AD 67 2C			lda READWORDBI.RESULT+1
  1345 29A4 8D 5B 2C			sta MIDHEADER.NTRACKS+1
  1346
  1347 				; optimize OK (MIDFILES), line = 93
  1348
  1349 29A7 AD AA 2A			lda F
  1350 29AA 8D 64 2C			sta READWORDBI.F
  1351 29AD AD AB 2A			lda F+1
  1352 29B0 8D 65 2C			sta READWORDBI.F+1
  1353 29B3 20 4A 27			jsr READWORDBI
  1354 29B6 AD 66 2C			lda READWORDBI.RESULT
  1355 29B9 8D 88 2D			sta V
  1356 29BC AD 67 2C			lda READWORDBI.RESULT+1
  1357 29BF 8D 89 2D			sta V+1
  1358
  1359 				; optimize OK (MIDFILES), line = 94
  1360
  1361 29C2 10 35			jpl l_02DC
  1362
  1363 				; optimize OK (MIDFILES), line = 96
  1364
  1365 29C4 29 7F			and #$7F
  1366 29C6 8D 5C 2C			sta MIDHEADER.FPS
  1367
  1368 				; optimize OK (MIDFILES), line = 97
  1369
  1370 29C9 8D 90 2D			sta @CASETMP_0003
  1371 29CC C9 E8			cmp #$E8
  1372 29CE D0 08			jne l_02F5
  1373 				@
  1374
  1375 				; optimize OK (MIDFILES), line = 98
  1376
  1377 29D0 A9 18			lda #$18
  1378 29D2 8D 5C 2C			sta MIDHEADER.FPS
  1379
  1380 29D5 4C F9 29			jmp a_0003
  1381 29D8			l_02F5
  1382 29D8 C9 E7			cmp #$E7
  1383 29DA D0 08			jne l_0302
  1384 				@
  1385
  1386 				; optimize OK (MIDFILES), line = 99
  1387
  1388 29DC A9 19			lda #$19
  1389 29DE 8D 5C 2C			sta MIDHEADER.FPS
  1390
  1391 29E1 4C F9 29			jmp a_0003
  1392 29E4			l_0302
  1393 29E4 C9 E3			cmp #$E3
  1394 29E6 D0 08			jne l_030F
  1395 				@
  1396
  1397 				; optimize OK (MIDFILES), line = 100
  1398
  1399 29E8 A9 1D			lda #$1D
  1400 29EA 8D 5C 2C			sta MIDHEADER.FPS
  1401
  1402 29ED 4C F9 29			jmp a_0003
  1403 29F0			l_030F
  1404 29F0 C9 E2			cmp #$E2
  1405 29F2 D0 05			jne l_031C
  1406 				@
  1407
  1408 				; optimize OK (MIDFILES), line = 101
  1409
  1410 29F4 A9 1E			lda #$1E
  1411 29F6 8D 5C 2C			sta MIDHEADER.FPS
  1412
  1413 29F9			l_031C
  1414 29F9			a_0003
  1415 29F9			l_02DC
  1416 29F9 4C 6B 2A			jmp l_0333
  1417 29FC			l_02B4
  1418
  1419 				; optimize FAIL ('cmpSTRING', MIDFILES), line = 105
  1420
  1421 29FC E8				inx
  1422 29FD AD AC 2A 95 94		mva CHUNKHEAD :STACKORIGIN,x
  1423 2A02 AD AD 2A 95 A4		mva CHUNKHEAD+1 :STACKORIGIN+STACKWIDTH,x
  1424 2A07 E8				inx
  1425 2A08 A9 2E 95 94			mva #$2E :STACKORIGIN,x
  1426 2A0C A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  1427 2A10 A0 01			ldy #1
  1428 2A12 20 2A 22			jsr cmpSTRING
  1429 2A15 F0 01			beq @+
  1430 2A17 88				dey
  1431 				@
  1432 2A18 CA				dex
  1433 2A19 CA				dex
  1434 2A1A 98				tya
  1435 2A1B F0 4E			jeq l_0344
  1436 				; BlockRead
  1437
  1438 				; optimize OK (MIDFILES), line = 107
  1439
  1440 2A1D AC AA 2A 84 82 AC + 	mwy F :bp2
  1441 2A27 A0 06			ldy #s@file.buffer
  1442 2A29 AD AE 2A			lda MID_DATA
  1443 2A2C 18 6D 8A 2D			add DATAPOS
  1444 2A30 91 82			sta (:bp2),y
  1445 2A32 C8				iny
  1446 2A33 AD AF 2A			lda MID_DATA+1
  1447 2A36 6D 8B 2D			adc DATAPOS+1
  1448 2A39 91 82			sta (:bp2),y
  1449 2A3B A0 08			ldy #s@file.nrecord
  1450 2A3D AD 8C 2D			lda LEN
  1451 2A40 91 82			sta (:bp2),y
  1452 2A42 C8				iny
  1453 2A43 AD 8D 2D			lda LEN+1
  1454 2A46 91 82			sta (:bp2),y
  1455
  1456 2A48 8A 48			txa:pha
  1457 2A4A 38				sec
  1458 					@readfile F, #7
  1458 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1458 2A4B AC AB 2A		 LDY F+1
  1458 2A4E AD AA 2A		 LDA F
  1458 2A51 A2 07		 LDX# 7
  1458 2A53 20 08 21		 JSR @READFILE
  1459 2A56 68 AA			pla:tax
  1460
  1461 				; optimize OK (MIDFILES), line = 108
  1462
  1463 2A58 AD 8A 2D			lda DATAPOS
  1464 2A5B 18 6D 8C 2D			add LEN
  1465 2A5F 8D 8A 2D			sta DATAPOS
  1466 2A62 AD 8B 2D			lda DATAPOS+1
  1467 2A65 6D 8D 2D			adc LEN+1
  1468 2A68 8D 8B 2D			sta DATAPOS+1
  1469 2A6B			l_0344
  1470 2A6B			l_0333
  1471 2A6B			l_026A
  1472
  1473 				; optimize OK (MIDFILES), line = 80
  1474
  1475 2A6B AD AA 2A			lda F
  1476 2A6E 8D 43 2B			sta SYSTEM.EOF.F
  1477 2A71 AD AB 2A			lda F+1
  1478 2A74 8D 44 2B			sta SYSTEM.EOF.F+1
  1479 2A77 20 88 25			jsr SYSTEM.EOF
  1480 2A7A E8				inx
  1481 2A7B AD 45 2B 95 94		mva SYSTEM.EOF.RESULT :STACKORIGIN,x
  1482 2A80 20 09 22			jsr notBOOLEAN
  1483 2A83 CA				dex
  1484 2A84 A0 01			ldy #1
  1485 2A86 AD 82 2D			lda TRACKCOUNT
  1486 2A89 CD 81 2D			cmp CURTRACK
  1487 2A8C B0 01			bcs @+
  1488 2A8E 88				dey
  1489 				@
  1490 2A8F 98				tya
  1491 2A90 35 95			and :STACKORIGIN+1,x
  1492 2A92 95 95			sta :STACKORIGIN+1,x
  1493 2A94 F0 03 4C A1 28		jne l_026B
  1494 2A99			b_026B
  1495 				; CloseFile
  1496
  1497 2A99 8A 48			txa:pha
  1498 2A9B 38				sec
  1499 					@closefile F
  1499 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1499 2A9C AC AB 2A		 LDY F+1
  1499 2A9F AD AA 2A		 LDA F
  1499 2AA2 20 DB 20		 JSR @CLOSEFILE
  1500 2AA5 68 AA			pla:tax
  1501
  1502 				; ------------------------------------------------------------
  1503
  1504 = 2C73			adr.FN	= [DATAORIGIN+$0147] .array [256]
  1505 2AA7			.var FN	= adr.FN .word
  1506 2AA7			.var F	= DATAORIGIN+$0247 .word
  1507 = 2D7F			OFS	= DATAORIGIN+$0253
  1508 = 2D81			CURTRACK	= DATAORIGIN+$0255
  1509 = 2D82			TRACKCOUNT	= DATAORIGIN+$0256
  1510 = 2D83			adr.CHUNKHEAD	= [DATAORIGIN+$0257] .array [5]
  1511 2AA7			.var CHUNKHEAD	= adr.CHUNKHEAD .word
  1512 = 2D88			V	= DATAORIGIN+$025C
  1513 = 2D8A			DATAPOS	= DATAORIGIN+$025E
  1514 = 2D8C			LEN	= DATAORIGIN+$0260
  1515 = 2D90			@CASETMP_0003	= DATAORIGIN+$0264
  1516
  1517 = 2AA8			@VarData	= FN
  1518 = 0112			@VarDataSize	= 274
  1519
  1520 2AA7			@exit
  1521 					.ifdef @new
  1522 					lda <@VarData
  1523 					sta :ztmp
  1524 					lda >@VarData
  1525 					ldy #@VarDataSize-1
  1526 					jmp @FreeMem
  1527 					els
  1528 2AA7 60				rts						; ret
  1529 					eif
  1530 = 2AA8 73 2C		FN
  1530 = 2AAA 73 2D		F
  1530 = 2AAC 83 2D		CHUNKHEAD
  1530 				.endl
  1531
  1532 				; ------------------------------------------------------------
  1533
  1534 = 6000			MIDDATA_ADDR	= $6000
  1535 = 0081			MIDDATA_LENGTH	= $81
  1536 = 6000			adr.MID_DATA	= $6000
  1537 2AAE			.var MID_DATA	= adr.MID_DATA .word
  1538 = 6081			adr.TRACKS	= $6081
  1539 2AAE			.var TRACKS	= adr.TRACKS .word
  1540 = 2C52			adr.CURTRACK	= [DATAORIGIN+$0126] .array [7] ; type unknown
  1541 2AAE			.var CURTRACK	= adr.CURTRACK .word
  1542 = 2C52			CURTRACK.PTR	= DATAORIGIN+$0126
  1543 = 2C54			CURTRACK.DELTATIME	= DATAORIGIN+$0128
  1544 = 2C58			adr.MIDHEADER	= [DATAORIGIN+$012C] .array [8] ; type unknown
  1545 2AAE			.var MIDHEADER	= adr.MIDHEADER .word
  1546 = 2C58			MIDHEADER.FORMAT	= DATAORIGIN+$012C
  1547 = 2C5A			MIDHEADER.NTRACKS	= DATAORIGIN+$012E
  1548 = 2C5C			MIDHEADER.FPS	= DATAORIGIN+$0130
  1549 = 2C5D			MIDHEADER.FSD	= DATAORIGIN+$0131
  1550 = 2C5E			MIDHEADER.TIMING	= DATAORIGIN+$0132
  1551 = 2C60			adr.BI	= [DATAORIGIN+$0134] .array [4]
  1552 2AAE			.var BI	= adr.BI .word
  1553
  1554 = 2AAE 00 60		MID_DATA
  1554 = 2AB0 81 60		TRACKS
  1554 = 2AB2 52 2C		CURTRACK
  1554 = 2AB4 58 2C		MIDHEADER
  1554 = 2AB6 60 2C		BI
  1554 				.endl							; UNIT MIDFILES
  1555
  1556 2AB8			.local	MIDI_SENDNOTEON					; PROCEDURE
  1557
  1558 				; optimize OK (MIDICar Player.pas), line = 5
  1559
  1560 2AB8 AD 91 2D			lda CH
  1561 2ABB 29 0F			and #$0F
  1562 2ABD 18 69 90			add #$90
  1563 2AC0 85 FF			sta MIDI_FIFO.ZP_DATA
  1564
  1565 				; optimize OK (MIDICar Player.pas), line = 6
  1566
  1567 2AC2 20 8E 26			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1568 2AC5 AD 50 2C 95 95		mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x
  1569
  1570 				; optimize OK (MIDICar Player.pas), line = 7
  1571
  1572 2ACA AD 92 2D			lda NOTE
  1573 2ACD 29 7F			and #$7F
  1574 2ACF 85 FF			sta MIDI_FIFO.ZP_DATA
  1575
  1576 				; optimize OK (MIDICar Player.pas), line = 8
  1577
  1578 2AD1 20 8E 26			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1579 2AD4 AD 50 2C 95 95		mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x
  1580
  1581 				; optimize OK (MIDICar Player.pas), line = 9
  1582
  1583 2AD9 AD 93 2D			lda VEL
  1584 2ADC 29 7F			and #$7F
  1585 2ADE 85 FF			sta MIDI_FIFO.ZP_DATA
  1586
  1587 				; optimize OK (MIDICar Player.pas), line = 10
  1588
  1589 2AE0 20 8E 26			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1590 2AE3 AD 50 2C 95 95		mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x
  1591
  1592 				; ------------------------------------------------------------
  1593
  1594 = 2D91			CH	= DATAORIGIN+$0265
  1595 = 2D92			NOTE	= DATAORIGIN+$0266
  1596 = 2D93			VEL	= DATAORIGIN+$0267
  1597
  1598 = 2D91			@VarData	= CH
  1599 = 0003			@VarDataSize	= 3
  1600
  1601 2AE8			@exit
  1602 					.ifdef @new
  1603 					lda <@VarData
  1604 					sta :ztmp
  1605 					lda >@VarData
  1606 					ldy #@VarDataSize-1
  1607 					jmp @FreeMem
  1608 					els
  1609 2AE8 60				rts						; ret
  1610 					eif
  1611 				.endl
  1612 2AE9			l_004C
  1613
  1614 				; optimize FAIL ('MIDFILES.LOADMIDI', MIDICar Player.pas), line = 14
  1615
  1616 2AE9 E8				inx
  1617 2AEA A9 34 95 94			mva #$34 :STACKORIGIN,x
  1618 2AEE A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  1619 2AF2 20 08 28			jsr MIDFILES.LOADMIDI
  1620
  1621 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', MIDICar Player.pas), line = 16
  1622
  1623 2AF5 20 47 26			jsr MIDI_FIFO.FIFO_RESET
  1624
  1625 				; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 17
  1626
  1627 2AF8 20 29 26			jsr MC6850.MC6850_RESET
  1628
  1629 				; optimize OK (MIDICar Player.pas), line = 18
  1630
  1631 2AFB A9 16			lda #$16
  1632 2AFD 20 2F 26			jsr MC6850.MC6850_INIT
  1633
  1634 				; optimize OK (MIDICar Player.pas), line = 20
  1635
  1636 2B00 A9 00			lda #$00
  1637 2B02 8D 91 2D			sta MIDI_SENDNOTEON.CH
  1638 2B05 A9 40			lda #$40
  1639 2B07 8D 92 2D			sta MIDI_SENDNOTEON.NOTE
  1640 2B0A 8D 93 2D			sta MIDI_SENDNOTEON.VEL
  1641 2B0D 20 B8 2A			jsr MIDI_SENDNOTEON
  1642
  1643 				; optimize FAIL ('MIDI_FIFO.FIFO_FLUSH', MIDICar Player.pas), line = 21
  1644
  1645 2B10 20 2D 27			jsr MIDI_FIFO.FIFO_FLUSH
  1646
  1647 				; ------------------------------------------------------------
  1648
  1649 2B13			@exit
  1650
  1651 2B13 A2 00		@halt	ldx #$00
  1652 2B15 9A				txs
  1653 					.ifdef MAIN.@DEFINES.ROMOFF
  1654 					inc portb
  1655 					.fi
  1656
  1657 2B16 A0 01			ldy #$01
  1658
  1659 2B18 60				rts
  1660
  1661 				; ------------------------------------------------------------
  1662
  1663 2B19 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1664
  1665 				; ------------------------------------------------------------
  1666
  1667 2B29			.local	@DEFINES
  1668 2B29			ATARI
  1669 2B29			DEBUG
  1670 				.endl
  1671
  1672 2B29			.local	@RESOURCE
  1673 				.endl
  1674
  1675 				.endl							; MAIN
  1676
  1677 				; ------------------------------------------------------------
  1678 				; ------------------------------------------------------------
  1679
  1680 				.macro	UNITINITIALIZATION
  1681 				
  1682 					.ifdef MAIN.SYSTEM.@UnitInit
  1683 					jsr MAIN.SYSTEM.@UnitInit
  1684 					.fi
  1685 				
  1686 					.ifdef MAIN.MC6850.@UnitInit
  1687 					jsr MAIN.MC6850.@UnitInit
  1688 					.fi
  1689 				
  1690 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  1691 					jsr MAIN.MIDI_FIFO.@UnitInit
  1692 					.fi
  1693 				
  1694 					.ifdef MAIN.ATARI.@UnitInit
  1695 					jsr MAIN.ATARI.@UnitInit
  1696 					.fi
  1697 				
  1698 					.ifdef MAIN.CRT.@UnitInit
  1699 					jsr MAIN.CRT.@UnitInit
  1700 					.fi
  1701 				
  1702 					.ifdef MAIN.MIDFILES.@UnitInit
  1703 					jsr MAIN.MIDFILES.@UnitInit
  1704 					.fi
  1705 				.endm
  1706
  1707 				; ------------------------------------------------------------
  1708
  1709 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1710 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1710 				SYSTEM: $24DA..$2628
  1711 					eif
  1712
  1713 					ift .SIZEOF(MAIN.MC6850) > 0
  1714 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  1714 				MC6850: $2629..$2646
  1715 					eif
  1716
  1717 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  1718 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  1718 				MIDI_FIFO: $2647..$2749
  1719 					eif
  1720
  1721 					ift .SIZEOF(MAIN.ATARI) > 0
  1722 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1723 					eif
  1724
  1725 					ift .SIZEOF(MAIN.CRT) > 0
  1726 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1727 					eif
  1728
  1729 					ift .SIZEOF(MAIN.MIDFILES) > 0
  1730 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  1730 				MIDFILES: $274A..$2AB7
  1731 					eif
  1732
  1733 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1733 				CODE: $2000..$2B28
  1734
  1735 				; ------------------------------------------------------------
  1736
  1737 2B29				.align $0004
  1738
  1739 2B2C			DATAORIGIN
  1740 2B2C-2B31> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1741
  1742 = 0006			VARINITSIZE	= *-DATAORIGIN
  1743 = 0268			VARDATASIZE	= 616
  1744
  1745 = 2D94			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1746
  1747 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1747 				DATA: $2B2C..$2D94
  1748
  1749 02E0-02E1> A5 24			run START
  1750
  1751 				; ------------------------------------------------------------
  1752
  1753 				.macro	STATICDATA
  1754 				.by  $0A $4F $70 $65 $6E $20 $66 $69  $6C $65 $20 $00 $0C $43 $68 $75  $6E $6B $20 $74 $79 $70 $65 $3A
  1755 				.by  $20 $00 $0C $43 $68 $75 $6E $6B  $20 $73 $69 $7A $65 $3A $20 $00  $04 $4D $54 $68 $64 $00 $04 $4D
  1756 				.by  $54 $72 $6B $00 $0F $48 $31 $3A  $53 $45 $4C $46 $54 $45 $53 $54  $2E $4D $49 $44 $00
  1757 				.endm
  1758
  1759 					end
