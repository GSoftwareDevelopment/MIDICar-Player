    org $8000

BOOT?  = $09
DOSVEC  = $0A
AEXTMEM = $4B
MCBASE  = $D8
PORTB   = $D301

START:
; Detect Command Line
;     jsr detect_CMD
;     bne NoCMD

;     jsr getParams

; NoCMD:

; Detect MIDICar
step1:
    jsr detect_MC
    bcs MCNotFound

MCFound:
    sty MCBASE
    stx MCBASE+1

    jsr MCBASEPORT

    lda #<MIDICAR_EXIST
    ldy #>MIDICAR_EXIST
    jsr PRINT

    jmp step2

MCNotFound:
    lda #$FF
    sta MCBASE
    lda #$00
    sta MCBASE+1
    lda #$02
    sta $4ff
    lda #<MIDICAR_NOT_FOUND
    ldy #>MIDICAR_NOT_FOUND
    jsr PRINT

; SpartaDOS X detect
step2:
    jsr detect_sdx
    cmp #$ff
    beq step3

; SDX user

    lda #<SDX_FOUND
    ldy #>SDX_FOUND
    jsr PRINT

    jsr detect_xms_by_sdx

    jmp run_mcplay

; extended RAM detection for non-SDX user

; AXLON Memory extention detect
step3:
    jsr detect_axlon
    cpy #$00
    beq step4
    lda #<AXLON_FOUND
    ldy #>AXLON_FOUND
    jsr PRINT
    jmp exit2DOS

; Determine extended memory size (PORTB based)
step4:
    jsr detect_xms

run_mcplay:
	sty AEXTMEM

    lda #$fe
    sta $0100

; Turn off BASIC

    lda PORTB
    ora #2
    sta PORTB

    rts

exit2DOS:
    jmp (DOSVEC)

;

    ; icl 'asm/detect_CMD.a65'
    icl 'asm/detect_mc.a65'
    icl 'asm/detect_axlon.a65'
    icl 'asm/detect_sdx.a65'
    icl 'asm/detect_xms.a65'
    icl 'asm/detect_xms_by_sdx.a65'
    icl 'asm/print.a65'
    icl 'asm/16bit2hex.a65'
    ; icl 'asm/get_params.a65'

//
//

; Strings
MSG_NO_DOS:
    dta c'Need DOS',$9B
MIDICAR_EXIST:
    dta 'Yoppie! MIDICar found at $'
MIDICAR_BASE:
    dta 'xxxx',$9b
MIDICAR_NOT_FOUND:
    dta 'Ouch! MIDICar not found :(',$9B
AXLON_FOUND:
    dta 'Oh, AXLON extention is not supported :(',$9B
SDX_FOUND:
    dta 'SDX user. Oh yeah!',$9B
HEX:
    dta '0123456789abcdef'
parbuf  equ *

    ini START