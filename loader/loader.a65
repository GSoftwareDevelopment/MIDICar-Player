; .def DEBUG

    org $3000

; constants
EOL = $9B

; OS
BOOT?   = $09
DOSVEC  = $0A
PORTB   = $D301

; variables

refreshRate     = $61
AEXTMEM         = $62
playerStatus    = $D8
screenStatus    = $D9

isSDX           = $80   ; SDX detected
isLoaded        = $81   ; driver is loaded
driverBaseAddr  = $82
cmdlnVec        = $84
colors_tab      = $4E0
SysEx_MSG       = $3D00
outstr          = $55A  ; MCP full file spec input

; MCBASE  = $D8

START:
    lda #0
    sta isLoaded

; SpartaDOS X detect
.ifdef DEBUG
    m@print msg_detectSDX
.endif

step1:
    jsr sdx.detect
    sta isSDX
    cmp #$ff
    beq step3

; SDX user

.ifdef DEBUG
    m@print msg_SDXxmsDetect
.endif

    jsr sdx.detect_xms

    jmp skip_steps_3_4

; extended RAM detection for non-SDX user

; AXLON Memory extention detect
step3:
.ifdef DEBUG
    m@print msg_AXLONDetect
.endif

    jsr ext_RAM.detect_axlon
    cpy #$00
    beq step4

    lda #<AXLON_FOUND
    ldy #>AXLON_FOUND
    jmp exit2DOS

; Determine extended memory size (PORTB based)
step4:

.ifdef DEBUG
    m@print msg_PORTBDetect
.endif

    jsr ext_RAM.detect_portb

;
skip_steps_3_4:
	sty AEXTMEM

    lda #$fe
    sta $0100

; --------------------
; set defaults for MCP

.ifdef DEBUG
    m@print msg_setDefaults
.endif

    jsr set_defaults

; -------------------
; Detect Command Line

.ifdef DEBUG
    m@print msg_CMDLnDetect
.endif

    jsr detect_CMD
    bne endOfCMD

.ifdef DEBUG
    m@print msg_getParameters
.endif

; -----------------------------
; Parse command line parameters

getParameters:
    icl 'asm/check_param.a65'

endOfCMD:
; ---------------
; validate driver

    jsr verify_driver
    bcs run_MCP

    jmp exit2DOS+3

run_MCP:
; Turn off BASIC

    lda PORTB
    ora #2
    sta PORTB

.ifdef DEBUG
    m@print msg_LoaderEdn
.endif
    rts

; ---------------------
;

exit2DOS:
kbcodes = $02FC

    jsr print

    lda isSDX
    cmp #$FF
    bne exit

wait4key:
    lda kbcodes
    cmp #$ff
    beq wait4key
    ldx #$ff
    stx kbcodes

exit:
    jmp (DOSVEC)

;

    icl 'asm/sdx.a65'
    icl 'asm/ext_ram.a65'
    icl 'asm/detect_CMD.a65'

    icl 'asm/A2hex.a65'
    icl 'asm/get_param.a65'
    icl 'asm/load_driver.a65'
    icl 'asm/verify_driver.a65'
    icl 'asm/set_driverBaseAddr.a65'
    icl 'asm/set_refresh_rate.a65'
    icl 'asm/set_colors.a65'
    icl 'asm/set_sysexMsg.a65'
    icl 'asm/set_file_spec.a65'
    icl 'asm/CIO.a65'
    icl 'asm/print.a65'
    icl 'asm/read_hex_data.a65'
    icl 'asm/set_defaults.a65'
//
//

; Strings
AXLON_FOUND:
    dta 'Oh, AXLON extention is not supported :(',EOL
MSG_NO_DOS:
    dta c'Need DOS',EOL
MSG_IOERR:
    dta c'I/O Error $'
MSG_ERRNO:
    dta c'00 - Driver not loaded.',EOL
MSG_DRV_TWICE:
    dta c'Unable to load more drivers.',EOL
MSG_NODRIVER:
    dta c'Specified file isnt correct driver.',EOL
MSG_UNRECOGNIZED_SWITCH_PARAM:
    dta c'Unrecognized switch parameter!',EOL

.ifdef debug
msg_detectSDX   dta c'detect SDX...',EOL
msg_PORTBDetect dta c'detect PORTB extention...',EOL
msg_AXLONDetect dta c'detect AXLON extention...',EOL
msg_SDXxmsDetect dta c'SDX free RAM detect...',EOL
msg_setDefaults dta c'set defaults...',EOL
msg_CMDLnDetect dta c'Command line detect...',EOL
msg_getParameters dta c'Get parameters...',EOL

msg_LoadDriver  dta c'Driver load...',EOL
msg_DriverTest  dta c'Driver test...',EOL
msg_DriverInit  dta c'Driver init...',EOL

msg_LoaderEdn   dta c'Loader end.',EOL
.endif

parbuf  equ *

    ini START
