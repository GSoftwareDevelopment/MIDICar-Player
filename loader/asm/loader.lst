mads 2.1.6
Source: loader.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 8000			CODEORIGIN	= $8000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 8000				STATICDATA
Macro: STATICDATA [Source: loader.a65]
     1 FFFF> 8000-811E> 14 4D + .by  $14 $4D $49 $44 $49 $43 $61 $72  $20 $6E $6F $74 $20 $66 $6F $75  $6E $64 $20 $3A $28 $00
Source: loader.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 8016			RTLIB
   113 8016				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D3
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $8016..$8065
   118
   119 				; ------------------------------------------------------------
   120
   121 8066			START
   122 8066 BA				tsx
   123 8067 8E 0A 81			stx MAIN.@halt+1
   124
   125 					.ifdef fmulinit
   126 					fmulinit
   127 					.fi
   128
   129 = 0006			VLEN	= VARDATASIZE-VARINITSIZE
   130 = 8126			VADR	= DATAORIGIN+VARINITSIZE
   131
   132 					ift VADR > $BFFF
   133 					ert 'Invalid memory address range ',VADR
   134 					eli (VLEN>0) && (VLEN<=256)
   135 806A A2 FA			ldx #256-VLEN
   136 806C A9 00			lda #$00
   137 806E 9D 2C 80 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   138 					eli VLEN>256
   139 					@fill #VADR #VLEN #$00
   140 					eif
   141
   142 				.ifdef :psptr
   143 					mwa #PROGRAMSTACK :psptr
   144 				.fi
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 					icl 'atari\romoff.asm'
   148 					.fi
   149
   150 8074 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 8076 BD 40 03 9D 0F 81 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 807F E8				inx						; X = 0
   154 8080 86 80			stx bp						; BP = 0
   155
   156 8082 8E 0F D2			stx skctl					; reset POKEY
   157 8085 A9 03			lda #3
   158 8087 8D 0F D2			sta skctl
   159
   160 808A CA				dex						; X = 255
   161
   162 808B				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: loader.a65]
   163
   164 808B			.local	MAIN						; PROCEDURE
   165
   166 808B 4C F3 80			jmp l_001D
   167
   168 				; ------------------------------------------------------------
   169
   170 808E			.local	SYSTEM						; UNIT
   171
   172 				; ------------------------------------------------------------
   173
   174 = 0101			__PORTB_BANKS	= $0101
   175 = 0648			M_PI_2	= $0648
   176 = 0192			D_PI_2	= $0192
   177 = 0004			D_PI_180	= $04
   178 = 0000			MGTIA	= $00
   179 = 0080			MVBXE	= $80
   180 = 0000			VBXE_XDLADR	= $00
   181 = 00E0			VBXE_BCBTMP	= $E0
   182 = 0100			VBXE_BCBADR	= $0100
   183 = 1000			VBXE_MAPADR	= $1000
   184 = 1000			VBXE_CHBASE	= $1000
   185 = 5000			VBXE_OVRADR	= $5000
   186 = B000			VBXE_WINDOW	= $B000
   187 = 0000			IDLI	= $00
   188 = 0001			IVBL	= $01
   189 = 0002			ITIM1	= $02
   190 = 0003			ITIM2	= $03
   191 = 0004			ITIM4	= $04
   192 = 00FE			CH_DELCHR	= $FE
   193 = 009B			CH_ENTER	= $9B
   194 = 001B			CH_ESC	= $1B
   195 = 001C			CH_CURS_UP	= $1C
   196 = 001D			CH_CURS_DOWN	= $1D
   197 = 001E			CH_CURS_LEFT	= $1E
   198 = 001F			CH_CURS_RIGHT	= $1F
   199 = 007F			CH_TAB	= $7F
   200 = 009B			CH_EOL	= $9B
   201 = 007D			CH_CLR	= $7D
   202 = 00FD			CH_BELL	= $FD
   203 = 007E			CH_DEL	= $7E
   204 = 009C			CH_DELLINE	= $9C
   205 = 009D			CH_INSLINE	= $9D
   206 = 0000			PAL_PMCOLOR0	= $00
   207 = 0001			PAL_PMCOLOR1	= $01
   208 = 0002			PAL_PMCOLOR2	= $02
   209 = 0003			PAL_PMCOLOR3	= $03
   210 = 0004			PAL_COLOR0	= $04
   211 = 0005			PAL_COLOR1	= $05
   212 = 0006			PAL_COLOR2	= $06
   213 = 0007			PAL_COLOR3	= $07
   214 = 0008			PAL_COLBAK	= $08
   215 = 0000			COLOR_BLACK	= $00
   216 = 000E			COLOR_WHITE	= $0E
   217 = 0032			COLOR_RED	= $32
   218 = 0096			COLOR_CYAN	= $96
   219 = 0068			COLOR_VIOLET	= $68
   220 = 00C4			COLOR_GREEN	= $C4
   221 = 0074			COLOR_BLUE	= $74
   222 = 00EE			COLOR_YELLOW	= $EE
   223 = 0028			COLOR_ORANGE	= $28
   224 = 00E4			COLOR_BROWN	= $E4
   225 = 003C			COLOR_LIGHTRED	= $3C
   226 = 0004			COLOR_GRAY1	= $04
   227 = 0006			COLOR_GRAY2	= $06
   228 = 000A			COLOR_GRAY3	= $0A
   229 = 00CC			COLOR_LIGHTGREEN	= $CC
   230 = 007C			COLOR_LIGHTBLUE	= $7C
   231 = 0004			FMOPENREAD	= $04
   232 = 0008			FMOPENWRITE	= $08
   233 = 0009			FMOPENAPPEND	= $09
   234 = 000C			FMOPENREADWRITE	= $0C
   235 = 8120			SCREENWIDTH	= DATAORIGIN+$0000
   236 = 8122			SCREENHEIGHT	= DATAORIGIN+$0002
   237 = 8124			DATESEPARATOR	= DATAORIGIN+$0004
   238 = D20A			RND	= $D20A
   239 = 02C0			adr.PALETTE	= $02C0
   240 808E			.var PALETTE	= adr.PALETTE .word
   241 = D012			adr.HPALETTE	= $D012
   242 808E			.var HPALETTE	= adr.HPALETTE .word
   243 = 8125			FILEMODE	= DATAORIGIN+$0005
   244 = 8126			GRAPHMODE	= DATAORIGIN+$0006
   245 = 8127			IORESULT	= DATAORIGIN+$0007
   246 = 8128			EOLN	= DATAORIGIN+$0008
   247 = 8129			RNDSEED	= DATAORIGIN+$0009
   248
   249 = 808E C0 02		PALETTE
   249 = 8090 12 D0		HPALETTE
   249 				.endl							; UNIT SYSTEM
   250
   251 				; ------------------------------------------------------------
   252
   253 8092			.local	ATARI						; UNIT
   254
   255 				; ------------------------------------------------------------
   256
   257 = 0010			IRQENS	= $10
   258 = 0012			RTCLOK	= $12
   259 = 0012			RTCLOK1	= $12
   260 = 0013			RTCLOK2	= $13
   261 = 0014			RTCLOK3	= $14
   262 = 004D			ATRACT	= $4D
   263 = 0052			LMARGIN	= $52
   264 = 0053			RMARGIN	= $53
   265 = 0054			ROWCRS	= $54
   266 = 0055			COLCRS	= $55
   267 = 0057			DINDEX	= $57
   268 = 0058			SAVMSC	= $58
   269 = 0062			PALNTS	= $62
   270 = 006A			RAMTOP	= $6A
   271 = 0200			VDSLST	= $0200
   272 = 0230			SDLSTL	= $0230
   273 = 0290			TXTROW	= $0290
   274 = 0291			TXTCOL	= $0291
   275 = 0293			TINDEX	= $0293
   276 = 0294			TXTMSC	= $0294
   277 = 022F			SDMCTL	= $022F
   278 = 026F			GPRIOR	= $026F
   279 = 02F0			CRSINH	= $02F0
   280 = 02F3			CHACT	= $02F3
   281 = 02F4			CHBAS	= $02F4
   282 = 02FC			CH	= $02FC
   283 = 02C0			PCOLR0	= $02C0
   284 = 02C1			PCOLR1	= $02C1
   285 = 02C2			PCOLR2	= $02C2
   286 = 02C3			PCOLR3	= $02C3
   287 = 02C4			COLOR0	= $02C4
   288 = 02C5			COLOR1	= $02C5
   289 = 02C6			COLOR2	= $02C6
   290 = 02C7			COLOR3	= $02C7
   291 = 02C8			COLOR4	= $02C8
   292 = 02C8			COLBAKS	= $02C8
   293 = D000			HPOSP0	= $D000
   294 = D001			HPOSP1	= $D001
   295 = D002			HPOSP2	= $D002
   296 = D003			HPOSP3	= $D003
   297 = D004			HPOSM0	= $D004
   298 = D005			HPOSM1	= $D005
   299 = D006			HPOSM2	= $D006
   300 = D007			HPOSM3	= $D007
   301 = D008			SIZEP0	= $D008
   302 = D009			SIZEP1	= $D009
   303 = D00A			SIZEP2	= $D00A
   304 = D00B			SIZEP3	= $D00B
   305 = D00C			SIZEM	= $D00C
   306 = D00D			GRAFP0	= $D00D
   307 = D00E			GRAFP1	= $D00E
   308 = D00F			GRAFP2	= $D00F
   309 = D010			GRAFP3	= $D010
   310 = D011			GRAFM	= $D011
   311 = D004			P0PF	= $D004
   312 = D014			PAL	= $D014
   313 = D012			COLPM0	= $D012
   314 = D013			COLPM1	= $D013
   315 = D014			COLPM2	= $D014
   316 = D015			COLPM3	= $D015
   317 = D016			COLPF0	= $D016
   318 = D017			COLPF1	= $D017
   319 = D018			COLPF2	= $D018
   320 = D019			COLPF3	= $D019
   321 = D01A			COLBK	= $D01A
   322 = D01B			PRIOR	= $D01B
   323 = D01D			GRACTL	= $D01D
   324 = D01E			HITCLR	= $D01E
   325 = D01F			CONSOL	= $D01F
   326 = D200			AUDF1	= $D200
   327 = D201			AUDC1	= $D201
   328 = D202			AUDF2	= $D202
   329 = D203			AUDC2	= $D203
   330 = D204			AUDF3	= $D204
   331 = D205			AUDC3	= $D205
   332 = D206			AUDF4	= $D206
   333 = D207			AUDC4	= $D207
   334 = D208			AUDCTL	= $D208
   335 = D209			KBCODE	= $D209
   336 = D20E			IRQEN	= $D20E
   337 = D20F			SKSTAT	= $D20F
   338 = D300			PORTA	= $D300
   339 = D301			PORTB	= $D301
   340 = D400			DMACTL	= $D400
   341 = D401			CHACTL	= $D401
   342 = D402			DLISTL	= $D402
   343 = D404			HSCROL	= $D404
   344 = D405			VSCROL	= $D405
   345 = D407			PMBASE	= $D407
   346 = D409			CHBASE	= $D409
   347 = D40A			WSYNC	= $D40A
   348 = D40B			VCOUNT	= $D40B
   349 = D40C			PENH	= $D40C
   350 = D40D			PENV	= $D40D
   351 = D40E			NMIEN	= $D40E
   352 = FFFA			NMIVEC	= $FFFA
   353 = FFFC			RESETVEC	= $FFFC
   354 = FFFE			IRQVEC	= $FFFE
   355
   356 				.endl							; UNIT ATARI
   357
   358 				; ------------------------------------------------------------
   359
   360 8092			.local	CRT						; UNIT
   361
   362 				; ------------------------------------------------------------
   363
   364 = 812B			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 000F			WHITE	= $0F
   383 = 0026			RED	= $26
   384 = 00AC			CYAN	= $AC
   385 = 0048			PURPLE	= $48
   386 = 00B6			GREEN	= $B6
   387 = 0086			BLUE	= $86
   388 = 00DC			YELLOW	= $DC
   389 = 0018			ORANGE	= $18
   390 = 00F4			BROWN	= $F4
   391 = 002A			LIGHT_RED	= $2A
   392 = 0004			DARK_GREY	= $04
   393 = 0008			GREY	= $08
   394 = 00BC			LIGHT_GREEN	= $BC
   395 = 009A			LIGHT_BLUE	= $9A
   396 = 000C			LIGHT_GREY	= $0C
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 8092			.local	DETECT_MC6850					; PROCEDURE | ASSEMBLER | KEEP
   402
   403 				; -------------------  ASM Block 00000063  -------------------
   404
   405 8092			  icl 'asm/detect_mc.a65'
Source: detect_mc.a65
     1 = 0016			MC_SETUP = $16
     2 = 0003			MC_RESET = $03
     3
     4 				; result:
     5 				; C - MC found
     6 				; A,Y - base of MC
     7
     8 8092			DetectMC:
     9 8092 A2 D5		    ldx #$d5
    10
    11 8094			start:
    12 8094 A0 00		    ldy #$00
    13
    14 8096			detectLoop:
    15 8096 8E 9B 80		    stx *+5
    16 8099 B9 00 D5		    lda $d500,y
    17 809C F0 04		    beq test1
    18 809E C9 02		    cmp #$02
    19 80A0 D0 2C		    bne next
    20
    21 80A2			test1:
    22 80A2 8D AE 80		    sta repval
    23 80A5 8E AC 80		    stx *+7
    24
    25 80A8			loop:
    26 80A8 C8			    iny
    27 80A9 C8			    iny
    28 80AA B9 00 D5		    lda $d500,y
    29 80AD C9 00		    cmp repval:#00
    30 80AF D0 1D		    bne next
    31 80B1 98			    tya
    32 80B2 29 1F		    and #$1f
    33 80B4 C9 1E		    cmp #$1e
    34 80B6 D0 F0		    bne loop
    35
    36 80B8 98			    tya
    37 80B9 29 E0		    and #%11100000
    38 80BB A8			    tay
    39
    40 80BC			test2:
    41 80BC A9 16		    lda #MC_SETUP
    42 80BE 8E C3 80		    stx *+5
    43 80C1 99 00 D5		    sta $d500,y
    44
    45 80C4 8E C9 80		    stx *+5
    46 80C7 B9 00 D5		    lda $d500,y
    47 80CA C9 02		    cmp #$02
    48 80CC F0 15		    beq found
    49
    50 80CE			next:
    51 80CE 98			    tya
    52 80CF 29 E0		    and #%11100000
    53 80D1 18			    clc
    54 80D2 69 20		    adc #$20
    55 80D4 B0 04		    bcs changeMSBBase
    56 80D6 A8			    tay
    57 80D7 4C 96 80		    jmp detectLoop
    58
    59 80DA			changeMSBBase:
    60 80DA E0 D1		    cpx #$d1
    61 80DC F0 0F		    beq notFound
    62 80DE A2 D1		    ldx #$d1
    63 80E0 4C 94 80		    jmp start
    64
    65 				; ------------------
    66
    67 80E3			found:
    68 80E3 A9 03		    lda #MC_RESET
    69 80E5 8E EA 80		    stx *+5
    70 80E8 99 00 D5		    sta $d500,y
    71 80EB 18			    clc
    72 80EC 60			    rts
    73
    74 80ED			notfound:
    75 80ED A2 00		    ldx #0
    76 80EF A0 00		    ldy #0
    77 80F1 38			    sec
   406
   407 80F2			@exit
   408 					.ifdef @new
   409 					lda <@VarData
   410 					sta :ztmp
   411 					lda >@VarData
   412 					ldy #@VarDataSize-1
   413 					jmp @FreeMem
   414 					els
   415 80F2 60				rts						; ret
   416 					eif
   417 				.endl
   418 80F3			l_001D
   419
   420 				; optimize FAIL ('DETECT_MC6850', loader.pas), line = 10
   421
   422 80F3 20 92 80			jsr DETECT_MC6850
   423
   424 				; -------------------  ASM Block 00000064  -------------------
   425
   426 80F6 84 D8		    sty $d8
   427 80F8 86 D9		    stx $d9
   428 80FA 90 0D		    bcc MCFound
   429 				  
   430 				; optimize FAIL ('@print', loader.pas), line = 18
   431
   432 					@printSTRING #CODEORIGIN+$0000
   432 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
   432 80FC A0 80		 LDY> CODEORIGIN+$0000
   432 80FE A9 00		 LDA< CODEORIGIN+$0000
   432 8100 20 37 80		 JSR @PRINTSTRING
   433 8103 20 29 80			@printEOL
   434
   435 				; -------------------  ASM Block 00000065  -------------------
   436
   437 8106 6C 0A 00		    jmp ($a)
   438 				  
   439 				; -------------------  ASM Block 00000066  -------------------
   440
   441 8109			    MCFound:
   442 				  
   443 				; ------------------------------------------------------------
   444
   445 8109			@exit
   446
   447 8109 A2 00		@halt	ldx #$00
   448 810B 9A				txs
   449 					.ifdef MAIN.@DEFINES.ROMOFF
   450 					inc portb
   451 					.fi
   452
   453 810C A0 01			ldy #$01
   454
   455 810E 60				rts
   456
   457 				; ------------------------------------------------------------
   458
   459 810F 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   460
   461 				; ------------------------------------------------------------
   462
   463 811F			.local	@DEFINES
   464 811F			ATARI
   465 				.endl
   466
   467 811F			.local	@RESOURCE
   468 				.endl
   469
   470 				.endl							; MAIN
   471
   472 				; ------------------------------------------------------------
   473 				; ------------------------------------------------------------
   474
   475 				.macro	UNITINITIALIZATION
   476 				
   477 					.ifdef MAIN.SYSTEM.@UnitInit
   478 					jsr MAIN.SYSTEM.@UnitInit
   479 					.fi
   480 				
   481 					.ifdef MAIN.ATARI.@UnitInit
   482 					jsr MAIN.ATARI.@UnitInit
   483 					.fi
   484 				
   485 					.ifdef MAIN.CRT.@UnitInit
   486 					jsr MAIN.CRT.@UnitInit
   487 					.fi
   488 				.endm
   489
   490 				; ------------------------------------------------------------
   491
   492 					ift .SIZEOF(MAIN.SYSTEM) > 0
   493 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   493 				SYSTEM: $808E..$8091
   494 					eif
   495
   496 					ift .SIZEOF(MAIN.ATARI) > 0
   497 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   498 					eif
   499
   500 					ift .SIZEOF(MAIN.CRT) > 0
   501 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   502 					eif
   503
   504 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   504 				CODE: $8000..$811E
   505
   506 				; ------------------------------------------------------------
   507
   508 811F				.align $0004
   509
   510 8120			DATAORIGIN
   511 8120-8125> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
   512
   513 = 0006			VARINITSIZE	= *-DATAORIGIN
   514 = 000C			VARDATASIZE	= 12
   515
   516 = 812C			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   517
   518 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   518 				DATA: $8120..$812C
   519
   520 02E0-02E1> 66 80			run START
   521
   522 				; ------------------------------------------------------------
   523
   524 				.macro	STATICDATA
   525 				.by  $14 $4D $49 $44 $49 $43 $61 $72  $20 $6E $6F $74 $20 $66 $6F $75  $6E $64 $20 $3A $28 $00
   526 				.endm
   527
   528 					end
