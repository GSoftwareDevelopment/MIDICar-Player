    .local load_Driver
isLoaded= $81   ; driver is loaded

_head   = $2000
_sadr   = $2002
_eadr   = $2004

; check that the Driver has not alredy been loaded
    lda isLoaded
    seq:jmp cantLoadDriverTwice

    stx tmp             ; store position in parbuf in tmp variable

.ifdef DEBUG
    m@print msg_LoadDriver
.endif

    jsr CIO._find_IOCB
    bmi IOError
    ; spl:jmp IOError

; -------------------------
; begin of driver file load

; open IOCB channel
    lda tmp
    add #<parbuf        ; increment lo byte of parbuf address
    sta CIO.icbufa,x        ; store
    lda #>parbuf        ; load hi byte of parbuf address
    adc #0              ; increment if C=1
    sta CIO.icbufa+1,X      ; store

    jsr CIO._open_channel
    bmi IOError
    ; spl:jmp IOError

; load file header
    lda #<$2000     ; set load address
    sta CIO.icbufa,X
    lda #>$2000
    sta CIO.icbufa+1,X

    lda #<$06       ; 6 bytes to load
    sta CIO.icbufl,X
    lda #>$00
    sta CIO.icbufl+1,X

    jsr CIO._bget
    bmi IOError

; check header
    lda _head
    and _head+1
    cmp #$ff
    bne wrongDriver

; check start address - must be $2000
    lda _sadr+1
    cmp #$20
    bne wrongDriver
    lda _sadr
    bne wrongDriver

; set driver length in IOCB
    lda _eadr
    add #1
    sub _sadr
    sta CIO.icbufl,x
    lda _eadr+1
    sbc _sadr+1
    sta CIO.icbufl+1,x

    jsr CIO._bget
    bmi IOError

; close IOCB
    jsr CIO._close_IOCB

; end of driver file load
; -----------------------

; verify that the loaded file is a valid driver file
testDRV:
.ifdef DEBUG
    m@print msg_DriverTest
.endif

    jsr test_driver
    bcs wrongDriver

    sty isLoaded

.ifdef DEBUG
    m@print msg_DriverInit
.endif

; call driver - init
    jsr $2000

    rts

; --------------------------------------
; Displays message if IO operation fails

IOError:
    tya:pha
    jsr CIO._close_IOCB

    lda #<MSG_ERRNO
    sta A2HEX.msgptr
    lda #>MSG_ERRNO
    sta A2HEX.msgptr+1

    pla
    jsr A2HEX
    lda #<MSG_IOERR
    ldy #>MSG_IOERR
    ; jsr print
    jmp exit2DOS

; ------------------------------------------
; Displays a message when the specified file
; is not a valid driver file

wrongDriver:
    jsr CIO._close_IOCB

    lda #<MSG_NODRIVER
    ldy #>MSG_NODRIVER
    ; jsr print
    jmp exit2DOS

; -----------------------------------------
; Displays a message when there has been an
; attempt to load two drivers into memory

cantLoadDriverTwice:
    lda #<MSG_DRV_TWICE
    ldy #>MSG_DRV_TWICE
    ; jsr print
    jmp exit2DOS

    .endl
