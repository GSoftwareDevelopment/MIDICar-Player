mads 2.1.6
Source: loader.a65
     1 				    org $8000
     2
     3 				; BOOT?   = $09
     4 = 000A			DOSVEC  = $0A
     5 = 00D8			MCBASE  = $D8
     6
     7 = 0340			ICCHID  = $0340
     8 = 0342			ICCMD   = $0342
     9 = 0344			ICBUFA  = $0344
    10 = 0348			ICBUFL  = $0348
    11 = E456			CIOV    = $E456
    12
    13 				START:
    14 				; Detect MIDICar
    15 				step1:
    16 FFFF> 8000-8244> 20 55 +     jsr detect_MC
    17 8003 B0 0E		    bcs MCNotFound
    18
    19 8005			MCFound:
    20 8005 84 D8		    sty MCBASE
    21 8007 86 D9		    stx MCBASE+1
    22
    23 8009 A9 D3		    lda #<MIDICAR_EXIST
    24 800B A0 81		    ldy #>MIDICAR_EXIST
    25 800D 20 B7 81		    jsr PRINT
    26 8010 4C 27 80		    jmp step2
    27
    28 8013			MCNotFound:
    29 8013 A9 FE		    lda #$FE
    30 8015 85 D8		    sta MCBASE
    31 8017 A9 04		    lda #$04
    32 8019 85 D9		    sta MCBASE+1
    33 801B A9 02		    lda #$02
    34 801D 8D FF 04		    sta $4ff
    35 8020 A9 EC		    lda #<MIDICAR_NOT_FOUND
    36 8022 A0 81		    ldy #>MIDICAR_NOT_FOUND
    37 8024 20 B7 81		    jsr PRINT
    38
    39 				; SpartaDOS X detect
    40 8027			step2:
    41 8027 20 EA 80		    jsr detect_sdx
    42 802A C9 FF		    cmp #$ff
    43 802C F0 0A		    beq step3
    44 802E A9 2F		    lda #<SDX_FOUND
    45 8030 A0 82		    ldy #>SDX_FOUND
    46 8032 20 B7 81		    jsr PRINT
    47 8035 4C 52 80		    jmp exit2DOS
    48
    49 				; AXLON Memory extention detect
    50 8038			step3:
    51 8038 20 B6 80		    jsr detect_axlon
    52 803B C0 00		    cpy #$00
    53 803D F0 0A		    beq step4
    54 803F A9 07		    lda #<AXLON_FOUND
    55 8041 A0 82		    ldy #>AXLON_FOUND
    56 8043 20 B7 81		    jsr PRINT
    57 8046 4C 52 80		    jmp exit2DOS
    58
    59 				; Determine extended memory size (PORTB based)
    60 8049			step4:
    61 8049 20 28 81		    jsr detect_xms
    62 804C A9 FE		    lda #$fe
    63 804E 8D 00 01		    sta $0100
    64
    65 8051 60			    rts
    66 8052			exit2DOS:
    67 8052 6C 0A 00		    jmp (DOSVEC)
    68
    69 				;
    70
    71 8055			    icl 'asm/detect_mc.a65'
Source: detect_mc.a65
     1
     2 = 0016			MC_SETUP = $16
     3 = 0003			MC_RESET = $03
     4
     5 				; result:
     6 				; C - MC found
     7 				; A,Y - base of MC
     8
     9 8055			detect_MC:
    10 8055 A2 D5		    ldx #$d5
    11
    12 8057			MCBegin:
    13 8057 A0 00		    ldy #$00
    14
    15 8059			detectLoop:
    16 8059 8E 5E 80		    stx *+5
    17 805C B9 00 D5		    lda $d500,y
    18 805F F0 04		    beq test1
    19 8061 C9 02		    cmp #$02
    20 8063 D0 2C		    bne next
    21
    22 8065			test1:
    23 8065 8D 71 80		    sta repval
    24 8068 8E 6F 80		    stx *+7
    25
    26 806B			loop:
    27 806B C8			    iny
    28 806C C8			    iny
    29 806D B9 00 D5		    lda $d500,y
    30 8070 C9 00		    cmp repval:#00
    31 8072 D0 1D		    bne next
    32 8074 98			    tya
    33 8075 29 1F		    and #$1f
    34 8077 C9 1E		    cmp #$1e
    35 8079 D0 F0		    bne loop
    36
    37 807B 98			    tya
    38 807C 29 E0		    and #%11100000
    39 807E A8			    tay
    40
    41 807F			test2:
    42 807F A9 16		    lda #MC_SETUP
    43 8081 8E 86 80		    stx *+5
    44 8084 99 00 D5		    sta $d500,y
    45
    46 8087 8E 8C 80		    stx *+5
    47 808A B9 00 D5		    lda $d500,y
    48 808D C9 02		    cmp #$02
    49 808F F0 15		    beq found
    50
    51 8091			next:
    52 8091 98			    tya
    53 8092 29 E0		    and #%11100000
    54 8094 18			    clc
    55 8095 69 20		    adc #$20
    56 8097 B0 04		    bcs changeMSBBase
    57 8099 A8			    tay
    58 809A 4C 59 80		    jmp detectLoop
    59
    60 809D			changeMSBBase:
    61 809D E0 D1		    cpx #$d1
    62 809F F0 0F		    beq notFound
    63 80A1 A2 D1		    ldx #$d1
    64 80A3 4C 57 80		    jmp MCBegin
    65
    66 				; ------------------
    67
    68 80A6			found:
    69 80A6 A9 03		    lda #MC_RESET
    70 80A8 8E AD 80		    stx *+5
    71 80AB 99 00 D5		    sta $d500,y
    72 80AE 18			    clc
    73 80AF 60			    rts
    74
    75 80B0			notfound:
    76 80B0 A2 00		    ldx #0
    77 80B2 A0 00		    ldy #0
    78 80B4 38			    sec
    79 80B5 60			    rts
    72 80B6			    icl 'asm/detect_axlon.a65'
Source: detect_axlon.a65
     1 = 4000			ext_b  = $4000       ;cokolwiek z zakresu $4000-$7FFF
     2 = CFFF			axlon  = $cfff
     3 = 0600			bsav   = $0600
     4
     5 				; procedura
     6 80B6			detect_axlon
     7 80B6 A2 FF		       ldx #$ff      ;zapamiętanie bajtów ext
     8 80B8 8E FF CF		_p0    stx axlon
     9 80BB AD 00 40		       lda ext_b
    10 80BE 9D 00 06		       sta bsav,x
    11 80C1 8E 00 40		       stx ext_b     ;oznaczenie bankow
    12 80C4 CA			       dex           ;koniecznie w kolejnosci malejacej
    13 80C5 E0 FF		       cpx #$ff
    14 80C7 D0 EF		       bne _p0
    15
    16 80C9 E8			       inx
    17
    18 80CA E8			_p1    inx           ;sprawdzenie numerow bankow
    19 80CB F0 08		       beq _x1
    20 80CD 8E FF CF		       stx axlon
    21 80D0 EC 00 40		       cpx ext_b
    22 80D3 F0 F5		       beq _p1       ;pierwsza niezgodnosc przerywa petle
    23
    24 80D5 CA			_x1    dex           ;odliczamy bank podstawowy
    25 80D6 8A			       txa
    26 80D7 A8			       tay
    27
    28 80D8 A2 00		       ldx #$00      ;przywrocenie wartosci
    29 80DA 8E FF CF		_p2    stx axlon
    30 80DD BD 00 06		       lda bsav,x
    31 80E0 8D 00 40		       sta ext_b
    32 80E3 E8			       inx
    33 80E4 D0 F4		       bne _p2
    34
    35 80E6 8E FF CF		       stx axlon     ;ustaw bank podstawowy
    36 80E9 60			       rts
    73 80EA			    icl 'asm/detect_sdx.a65'
Source: detect_sdx.a65
     1 				; sparta_detect.asm
     2 				; (c) idea by KMK, code: mikey
     3 				;
     4 				; $Id: sparta_detect.asm,v 1.2 2006/09/27 22:59:27 mikey Exp $
     5 				;
     6
     7 = 00F0			p0      = $f0
     8 = 07EB			fsymbol = $07EB
     9
    10 80EA			detect_sdx
    11
    12 				; if peek($700) = 'S' and bit($701) sets V then we're SDX
    13
    14 80EA AD 00 07		    lda $0700
    15 80ED C9 53		    cmp #$53         ; 'S'
    16 80EF D0 2C		    bne no_sparta
    17 80F1 AD 01 07		    lda $0701
    18 80F4 C9 40		    cmp #$40
    19 80F6 90 25		    bcc no_sparta
    20 80F8 C9 44		    cmp #$44
    21 80FA 90 0F		    bcc _oldsdx
    22
    23 				; we're running 4.4 - the old method is INVALID as of 4.42
    24
    25 				;    lda #<sym_comtab2
    26 				;    ldx #>sym_comtab2
    27 				;    jsr fsymbol
    28 				;    sta p0
    29 				;    sec
    30 				;    sbc #2
    31 				;    sta p0
    32 				;    stx p0+1
    33
    34 				;    ldy #0
    35 				;    lda (p0),y
    36 				;    sta $72
    37
    38 80FC A9 20		    lda #<sym_t
    39 80FE A2 81		    ldx #>sym_t
    40 8100 20 EB 07		    jsr fsymbol
    41 8103 85 F0		    sta p0
    42 8105 86 F1		    stx p0+1
    43 8107 A0 06		    ldy #$06
    44 8109 D0 0F		    bne _fv
    45
    46 				; we're running SDX, find (DOSVEC)-$150
    47
    48 810B A5 0A		_oldsdx         lda $a
    49 810D 38			    sec
    50 810E E9 50		    sbc #<$150
    51 8110 85 F0		    sta p0
    52 8112 A5 0B		    lda $b
    53 8114 E9 01		    sbc #>$150
    54 8116 85 F1		    sta p0+1
    55
    56 				; ok, hopefully we have established the address.
    57 				; now peek at it. return the value.
    58
    59 8118 A0 00		    ldy #0
    60 811A B1 F0		_fv lda (p0),y
    61 811C 60			    rts
    62
    63 811D			no_sparta
    64 811D A9 FF		    lda #$ff
    65 811F 60			    rts
    66
    67 8120			sym_t
    68 8120 54 5F 20 20 20 20 +     .byte 'T_      '
    69 				;sym_comtab2
    70 				;    .byte 'COMTAB2 '
    71
    72 				; if A=$FF -> No SDX :(
    73 				; if A=$FE -> SDX is in OSROM mode
    74 				; if A=$00 -> SDX doesn't use any XMS banks
    75 				; if A=anything else -> BANKED mode, and A is the bank number
    74 8128			    icl 'asm/detect_xms.a65'
Source: detect_xms.a65
     1 8128			detect_xms:
     2
     3 8128			    .local
     4
     5 = 0600			bsav	= $0600
     6 = 0101			banks   = $0101
     7 = 4000			ext_b	= $4000		;cokolwiek z zakresu $4000-$7FFF
     8 = D40B			vcount  = $D40B
     9 = D301			portb   = $D301
    10 = 004B			result  = $4B
    11
    12 8128 8A 48		    txa:pha
    13
    14 812A AD 01 D3			lda portb
    15 812D 48				pha
    16
    17 812E AD 0B D4 D0 FB		lda:rne vcount
    18
    19 8133 AD 00 40			lda ext_b
    20 8136 48				pha
    21
    22 8137 A2 0F			ldx #$0f	;zapamiętanie bajtów ext (z 16 bloków po 64k)
    23 8139 20 AA 81		_p0	jsr setpb
    24 813C AD 00 40			lda ext_b
    25 813F 9D 00 06			sta bsav,x
    26 8142 CA				dex
    27 8143 10 F4			bpl _p0
    28
    29 8145 A2 0F			ldx #$0f	;wyzerowanie ich (w oddzielnej pętli, bo nie wiadomo
    30 8147 20 AA 81		_p1	jsr setpb	;które kombinacje bitów PORTB wybierają te same banki)
    31 814A A9 00			lda #$00
    32 814C 8D 00 40			sta ext_b
    33 814F CA				dex
    34 8150 10 F5			bpl _p1
    35
    36 8152 8E 01 D3			stx portb	;eliminacja pamięci podstawowej
    37 8155 8E 00 40			stx ext_b
    38 8158 86 00			stx $00		;niezbędne dla niektórych rozszerzeń do 256k
    39
    40 815A A0 00			ldy #$00	;pętla zliczająca bloki 64k
    41 815C A2 0F			ldx #$0f
    42 815E 20 AA 81		_p2	jsr setpb
    43 8161 AD 00 40			lda ext_b	;jeśli ext_b jest różne od zera, blok 64k już zliczony
    44 8164 D0 23			bne _n2
    45
    46 8166 CE 00 40			dec ext_b	;w przeciwnym wypadku zaznacz jako zliczony
    47
    48 8169 AD 00 40			lda ext_b	;sprawdz, czy sie zaznaczyl; jesli nie -> cos nie tak ze sprzetem
    49 816C 10 1B			bpl _n2
    50
    51 816E AD 01 D3			lda portb	;wpisz wartość PORTB do tablicy dla banku 0
    52
    53 8171 29 FE			and #$fe
    54
    55 8173 99 01 01			sta banks,y
    56 8176 49 04			eor #%00000100	;uzupełnij wartości dla banków 1, 2, 3
    57 8178 99 02 01			sta banks+1,y
    58 817B 49 0C			eor #%00001100
    59 817D 99 03 01			sta banks+2,y
    60 8180 49 04			eor #%00000100
    61 8182 99 04 01			sta banks+3,y
    62 8185 C8				iny
    63 8186 C8				iny
    64 8187 C8				iny
    65 8188 C8				iny
    66
    67 8189 CA			_n2	dex
    68 818A 10 D2			bpl _p2
    69
    70 818C A2 0F			ldx #$0f	;przywrócenie zawartości ext
    71 818E 20 AA 81		_p3	jsr setpb
    72 8191 BD 00 06			lda bsav,x
    73 8194 8D 00 40			sta ext_b
    74 8197 CA				dex
    75 8198 10 F4			bpl _p3
    76
    77 819A 8E 01 D3			stx portb	;X=$FF
    78
    79 819D 68				pla
    80 819E 8D 00 40			sta ext_b
    81
    82 81A1 68				pla
    83 81A2 8D 01 D3			sta portb
    84
    85 81A5 84 4B			sty Result
    86
    87 81A7 68 AA		stop	pla:tax
    88
    89 81A9 60				rts
    90
    91 				; podprogramy
    92 81AA 8A			setpb	txa		;zmiana kolejności bitów: %0000dcba -> %cba000d0
    93 81AB 4A				lsr
    94 81AC 6A				ror
    95 81AD 6A				ror
    96 81AE 6A				ror
    97 81AF 69 01			adc #$01	;ustawienie bitu nr 1 w zaleznosci od stanu C
    98 81B1 09 01			ora #$01	;ustawienie bitu sterującego OS ROM na wartosc domyslna
    99 81B3 8D 01 D3			sta portb
   100 81B6 60				rts
   101
   102 				    .endl
    75
    76 81B7			PRINT:
    77 81B7 A2 00		    ldx #$00
    78 81B9 9D 44 03		    sta ICBUFA,X
    79 81BC 98			    tya
    80 81BD 9D 45 03		    sta ICBUFA+1,X
    81 81C0 A9 FF		    lda #$ff
    82 81C2 9D 48 03		    sta ICBUFL,X
    83 81C5 A9 09		    lda #$09
    84 81C7 9D 42 03		    sta ICCMD,X
    85 81CA BD 40 03		    lda ICCHID,x
    86 81CD 30 03		    bmi ExitPRINT
    87 81CF 4C 56 E4		    jmp CIOV
    88 81D2			ExitPRINT:
    89 81D2 60			    rts
    90
    91 				//
    92 				//
    93
    94 				; Strings
    95
    96 81D3			MIDICAR_EXIST:
    97 81D3 59 6F 70 70 69 65 +     dta 'Yoppie! MIDICar found :)',$9B
    98 81EC			MIDICAR_NOT_FOUND:
    99 81EC 4F 75 63 68 21 20 +     dta 'Ouch! MIDICar not found :(',$9B
   100 8207			AXLON_FOUND:
   101 8207 4F 68 2C 20 41 58 +     dta 'Oh, AXLON extention is not supported :(',$9B
   102 822F			SDX_FOUND:
   103 822F 53 44 58 20 75 73 +     dta 'SDX user must wait :P',$9B
   104
   105 02E2-02E3> 00 80		    ini START
