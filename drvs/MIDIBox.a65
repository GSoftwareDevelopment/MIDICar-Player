    org $2000

; -----------------
; Driver Jump Table

  .local jumpTable

  jmp driver.init
  jmp driver.start
  jmp driver.send
  jmp driver.flush
  jmp driver.stop
  jmp driver.Receive

DESC	dta c'MIDIBox Driver 2.0a by GSD',$9B

  .endl

; ----------------------
; Main driver procedures

  .local driver

  icl './atari.hea'
  icl './fifo.hea'

;--------------------------------------------------
; Start serial port service

  .local start

    lda OVSEROUT
    ora OVSEROUT+1
    bne exitStart

; store old vector
    lda VSEROUT
    sta OVSEROUT
    lda VSEROUT+1
    sta OVSEROUT+1

; set new vector
    lda #<IOutMIDISer
    sta VSEROUT
    lda #>IOutMIDISer
    sta VSEROUT+1

; turn on MOTOR - power up MIDIMate
    lda pactl
    and #$f7
    sta pactl
; set COMMAND LINE active
    ; lda pbctl
    ; and #$f7
    ; sta pbctl

; set serial transmission speed - ~31669 baud=1773447/(2*(0x15+7))
; altirra says (under debbug) it is 31960.2 baud = ?how?
    LDA #$15
    STA AUDF3
    LDA #$00
    STA AUDF4

; set serial
    LDA #%00000111	; $07
        ; -------x - keep keyboard debounce as is
        ; ------x- - keep keyboard scanning as is
        ; -----x-- - keep fast POT scan as is
        ; ----0--- - clear POKEY two-tone mode
        ; 0------- - clear force break; serial output to zero
    AND SSKCTL
    ORA #%00100000	; $20
        ; -010---- - Trans. & Receive rates set by Channel 4
        ;		   - Channel 4 output on Bi-Directional clock line
    STA SSKCTL
    STA SKCTL

; set interrupts
    LDA #%11000111	; $C7
        ; x-------  - keep Break IRQ
        ; -x------  - keep Other key IRQ
        ; -----xxx  - keep timer 4,2 & 1 IRQs
    AND POKMSK
    ORA #%00010000	; $10
        ; --0-----  - disable serial input data ready
        ; ---1----  - enabled serial output data ready
        ; ----0---  - disable serial output transmission done
    STA POKMSK
    STA IRQEN

; set POKEY
    LDA #%00101000 ; $28
        ; --1----- - clock channel three with 1.79 MHz
        ; ----1--- - join channels 4 & 3 (16 bit)
    STA AUDCTL

    LDA #%10100000 ; $A0
      ; 101----- - no poly counters (pure tone)
      ; ---00000 - silence (0 volume)
    STA AUDC3
    STA AUDC4

; checksum sent flag ($ff equals sent)
    LDA #$FF
    STA CHKSNT

; Transmission done flag - pending
    LDY #$01
    STY XMTDON

; Reset FIFO
    lda #0
    sta fifo_head
    sta fifo_tail

exitStart:
    RTS
  .endl

;--------------------------------------------------
;

  .local Send

    fifo@put

startSend:
; skip if trasmission not end
    LDA XMTDON
    BEQ exitSend

; skip if fifo is empty
    ldy fifo_tail
    cpy fifo_head
    beq exitSend

;
    LDA #$01
    STA CRITIC

; reset transmission done flag
    LDA #$00
    STA XMTDON

; start transmission by send byte to serial out
    LDA FIFO_BUF,Y
    STA SEROUT

exitSend:
    rts

  .endl

;--------------------------------------------------
; Flush buffer
; C = 0 - start send if buffer is not empty and serial is free
; C = 1 -
  .local Flush

    bcs Send.startSend

All:
    txa:pha

; time out counter for flush FIFO
; 5 = roundUp(((1 / 3125) * 256) * 50)
; 256 = FIFO buffer size
; 50 = frame per second for PAL (for NTSC = 60)

    ldx #5

setClock:
    ldy RCLOCK

flush_loop:
    lda XMTDON
    bne flush_done
    cpy RCLOCK
    beq flush_loop
    dex
    bne setClock

flush_timeout:
    lda #0
    sta fifo_head
    sta fifo_tail

flush_done:

    pla:tax

    rts

  .endl

;--------------------------------------------------
; Stop serial port service

  .local Stop

    lda OVSEROUT
    ora OVSEROUT
    beq exitUnInit

    bcc noFlush
    jsr Flush
    jsr Flush.All

noFlush:

waitFrame:
    bit VCOUNT
    bmi *-3
    bit VCOUNT
    bpl *-3

;restore old vector
    lda OVSEROUT
    sta VSEROUT
    lda OVSEROUT+1
    sta VSEROUT+1

; turn off MOTOR - power down MIDIMate
    lda pactl
    ora #$08
    sta pactl
; clear COMMAND LINE
    ; lda pbctl
    ; ora #$08
    ; sta pbctl

; Clear interrupts
; (5) serial input data ready
; (4) serial output data required
; (3) serial out transmission finished
    LDA #%11000111 ; $C7
    AND POKMSK
    STA POKMSK
    STA IRQEN

; clear critic NMI time
    LDA #$00
    STA CRITIC

; clear old vector
    sta OVSEROUT
    sta OVSEROUT+1

; set POKEY AUDC's registers
set_AUDC:
    STA AUDC3
    STA AUDC4

    sta fifo_head
    sta fifo_tail

exitUnInit:

    RTS

  .endl

;--------------------------------------------------
;

  .local Receive
; not implemented
    clc
    rts
  .endl

;--------------------------------------------------
;Output MIDI Data by Serial Bus - Interrupt

IOutMIDISer:

  tya:pha

  fifo@check FIFO_Tail FIFO_Head
  sty fifo_tail
  bne send_next

send_stop:

  lda POKMSK
  ora #%00001000	; $08
  sta POKMSK
  sta IRQEN

  LDA #$00
  STA CRITIC

  pla:tay:pla

  rti

send_next:
  lda FIFO_BUF,y
  sta SEROUT

  pla:tay:pla

  rti

;--------------------------------------------------
; driver variables

; old serial out vector
OVSEROUT    dta a(0)

;--------------------------------------------------
; Initialize

  .local init

    lda #<jumpTable.DESC
    ldy #>jumpTable.DESC
    jsr PRINT

    sec

    rts

    icl './print.a65'
  .endl

  .endl

;--------------------------------------------------

  icl 'driver_summary.a65'

