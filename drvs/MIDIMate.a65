    org $2000

drvjtab:

  jmp serial_drv.init
  jmp serial_drv.start
  jmp serial_drv.send
  jmp serial_drv.flush
  jmp serial_drv.stop


    .local serial_drv

  icl './atari.hea'
  icl './fifo.hea'

;--------------------------------------------------
; Initialize

DESC	dta c'MIDIMate Driver 1.0 by GSD',$9B

init:
  lda #<DESC
  ldy #>DESC
  jsr PRINT

  rts
;--------------------------------------------------
; Start serial port service

  .local Start
  lda OVSEROUT
  ora OVSEROUT+1
  bne exitStart

;store old vector
  lda VSEROUT
  sta OVSEROUT
  lda VSEROUT+1
  sta OVSEROUT+1

;set new vector
  lda #<IOutMIDISer
  sta VSEROUT
  lda #>IOutMIDISer
  sta VSEROUT+1

; turn on MOTOR - power up MIDIMate
  lda pactl
  and #$f7
  sta pactl

; set serial
  LDA #%00000111	; $07
    ; -------x - keep keyboard debounce as is
    ; ------x- - keep keyboard scanning as is
    ; -----x-- - keep fast POT scan as is
    ; ----0--- - clear POKEY two-tone mode
    ; 0------- - clear force break; serial output to zero
  AND SSKCTL
  STA SSKCTL
  STA SKCTL

; set interrupts
  LDA #%11000111	; $C7
    ; x-------  - keep Break IRQ
    ; -x------  - keep Other key IRQ
    ; -----xxx  - keep timer 1,2 & 4 IRQs
  AND POKMSK
  ORA #%00010000	; $10
    ; --0-----  - disable serial input data ready
    ; ---1----  - enabled serial output data ready
    ; ----0---  - disable serial output transmission done
  STA POKMSK
  STA IRQEN

; checksum sent flag ($ff equals sent)
  LDA #$FF
  STA CHKSNT

; Transmission done flag - pending
  LDY #$01
  STY XMTDON

; Reset FIFO
  lda #0
  sta fifo_head
  sta fifo_tail

;   ldy #0
; clearFIFO_Loop:
;   sta $600,Y
;   iny
;   bne clearFIFO_Loop

exitStart:
  RTS

  .endl

;--------------------------------------------------
;

  .local Send

  fifo@put

StartSend:
; skip if trasmission not end
  LDA XMTDON
  BEQ exitSend

  ldy fifo_tail
  cpy fifo_head
  beq exitSend

;
  LDA #$01
  STA CRITIC

; reset transmission done flag
  LDA #$00
  STA XMTDON

; start transmission by send byte to serial out
  LDA FIFO_BUF,Y
  STA SEROUT

exitSend:
  rts

  .endl

;--------------------------------------------------
; Flush buffer
; C = 0 - start send if buffer is not empty and serial is free
; C = 1 -
  .local Flush
  bcs Send.startSend

All:

flush_loop:
  lda XMTDON
  beq flush_loop

  rts

  .endl

;--------------------------------------------------
; Stop serial port service

  .local Stop

  lda OVSEROUT
  ora OVSEROUT
  beq exitUnInit

  bcc noFlush
  jsr Flush.All

noFlush:

; restore old vector
  lda OVSEROUT
  sta VSEROUT
  lda OVSEROUT+1
  sta VSEROUT+1

; turn off MOTOR - power down MIDIMate
  lda pactl
  ora #$08
  sta pactl

; Clear interrupts
; (5) serial input data ready
; (4) serial output data required
; (3) serial out transmission finished
  LDA #%11000111 ; $C7
  AND POKMSK
  STA POKMSK
  STA IRQEN

; clear critic NMI time
  LDA #$00
  STA CRITIC

; clear old vector
  sta OVSEROUT
  sta OVSEROUT+1

; Reset FIFO
  sta fifo_head
  sta fifo_tail

exitUnInit:
  RTS

  .endl

;--------------------------------------------------
;Output MIDI Data by Serial Bus - Interrupt

IOutMIDISer:

  tya:pha

  fifo@check FIFO_Tail FIFO_Head
  sty fifo_tail
  bne send_next

send_stop:
  lda POKMSK
  ora #%00001000	; $08
  sta POKMSK
  sta IRQEN

  LDA #$00
  STA CRITIC


  pla:tay:pla
  rti

send_next:
  lda FIFO_BUF,y
  sta SEROUT

  pla:tay:pla
  rti

;--------------------------------------------------
;

  icl './print.a65'

;--------------------------------------------------
; driver variables

; old serial out vector
OVSEROUT    dta a(0)

    .endl

  ; ini serial_drv.init
