mads 2.1.6
Source: MIDIBox_drv.a65
     1 				    org $2000
     2
     3 				drvjtab:
     4 FFFF> 2000-2132> 4C 25 +   jmp serial_drv.init
     5 2003 4C 2D 20			jmp serial_drv.start
     6 2006 4C 89 20			jmp serial_drv.send
     7 2009 4C B4 20		  jmp serial_drv.flush
     8 200C 4C C0 20			jmp serial_drv.stop
     9
    10
    11 200F			  .local serial_drv
    12
    13 200F				icl './atari.inc'
Source: atari.inc
     1 = 0010			POKMSK		= $10
     2
     3 				// STATUS		= $30
     4 = 0031			CHKSUM      = $31
     5 = 003A			XMTDON		= $3A
     6 = 003B			CHKSNT		= $3B
     7
     8 = 0042			CRITIC		= $42
     9
    10 = 020C			VSEROUT		= $020C
    11
    12 = 0232			SSKCTL		= $0232
    13
    14 = D204			AUDF3		= $D204
    15 = D205			AUDC3       = $D205
    16 = D206			AUDF4		= $D206
    17 = D207			AUDC4       = $D207
    18 = D20F			SKCTL		= $D20F
    19 = D208			AUDCTL		= $D208
    20 = D20D			SEROUT		= $D20D
    21 = D20E			IRQEN		= $D20E
    22
    23 = D302			PACTL       = $d302
    14 200F				icl './fifo.inc'
Source: fifo.inc
     1 = 00FD			FIFO_HEAD   = $FD
     2 = 00FE			FIFO_TAIL   = $FE
     3 = 00FF			FIFO_BYTE   = $FF
     4
     5 = 0600			FIFO_BUF    = $0600
    15
    16 				;--------------------------------------------------
    17 				; Initialize
    18
    19 200F 4D 49 44 49 42 6F + DESC	dta c'MIDIBox Driver by GSD',$9B
    20
    21 2025			init:
    22 2025 A9 0F		  lda #<DESC
    23 2027 A0 20		  ldy #>DESC
    24 2029 20 15 21		  jsr PRINT
    25 202C 60				rts
    26
    27 				;--------------------------------------------------
    28 				; Start serial port service
    29
    30 202D			start:
    31 202D AD 31 21			lda OVSEROUT
    32 2030 0D 32 21			ora OVSEROUT+1
    33 2033 D0 53			bne exitStart
    34
    35 				; store old vector
    36 2035 AD 0C 02		  lda VSEROUT
    37 2038 8D 31 21		  sta OVSEROUT
    38 203B AD 0D 02		  lda VSEROUT+1
    39 203E 8D 32 21		  sta OVSEROUT+1
    40
    41 				; set new vector
    42 2041 A9 EE			lda #<IOutMIDISer
    43 2043 8D 0C 02			sta VSEROUT
    44 2046 A9 20			lda #>IOutMIDISer
    45 2048 8D 0D 02			sta VSEROUT+1
    46
    47 				; set serial transmission speed - ~31669 baud=1773447/(2*(0x15+7))
    48 				; altirra says (under debbug) it is 31960.2 baud = ?how?
    49 204B A9 15			LDA #$15
    50 204D 8D 04 D2			STA AUDF3
    51 2050 A9 00			LDA #$00
    52 2052 8D 06 D2			STA AUDF4
    53
    54 				; set serial
    55 2055 A9 07			LDA #%00000111	; $07
    56 						; -------x - keep keyboard debounce as is
    57 						; ------x- - keep keyboard scanning as is
    58 						; -----x-- - keep fast POT scan as is
    59 						; ----0--- - clear POKEY two-tone mode
    60 						; 0------- - clear force break; serial output to zero
    61 2057 2D 32 02			AND SSKCTL
    62 205A 09 20			ORA #%00100000	; $20
    63 						; -010---- - Trans. & Receive rates set by Channel 4
    64 						;		   - Channel 4 output on Bi-Directional clock line
    65 205C 8D 32 02			STA SSKCTL
    66 205F 8D 0F D2			STA SKCTL
    67
    68 				; set interrupts
    69 2062 A9 C7			LDA #%11000111	; $C7
    70 						; x-------  - keep Break IRQ
    71 						; -x------  - keep Other key IRQ
    72 						; -----xxx  - keep timer 4,2 & 1 IRQs
    73 2064 25 10			AND POKMSK
    74 2066 09 10			ORA #%00010000	; $10
    75 						; --0-----  - disable serial input data ready
    76 						; ---1----  - enabled serial output data ready
    77 						; ----0---  - disable serial output transmission done
    78 2068 85 10			STA POKMSK
    79 206A 8D 0E D2			STA IRQEN
    80
    81 				;set POKEY
    82 206D A9 28			LDA #%00101000 ; $28
    83 						; --1----- - clock channel three with 1.79 MHz
    84 						; ----1--- - join channels 4 & 3 (16 bit)
    85 206F 8D 08 D2			STA AUDCTL
    86
    87 2072 A9 A0			LDA #%10100000 ; $A0
    88 						; 101----- - no poly counters (pure tone)
    89 						; ---00000 - silence (0 volume)
    90 2074 8D 05 D2			STA AUDC3
    91 2077 8D 07 D2			STA AUDC4
    92
    93 				; checksum sent flag ($ff equals sent)
    94 207A A9 FF			LDA #$FF
    95 207C 85 3B			STA CHKSNT
    96
    97 				; Transmission done flag - pending
    98 207E A0 01			LDY #$01
    99 2080 84 3A			STY XMTDON
   100
   101 				; Reset FIFO
   102 2082 A9 00			lda #0
   103 2084 85 FD			sta fifo_head
   104 2086 85 FE			sta fifo_tail
   105
   106 2088			exitStart:
   107 2088 60			    RTS
   108
   109 				;--------------------------------------------------
   110 				;
   111
   112 				m@putInFIFO	.macro
   113 				// Check if the FIFO buffer is full?
   114 				  ldy FIFO_Head   // 3
   115 				  iny             // 2
   116 				  cpy FIFO_Tail   // 3
   117 				  bne storeInFIFO
   118 				
   119 				// If it is full, flush it and wait until buffer is not empty
   120 				  clc
   121 				  jsr flush
   122 				
   123 				storeInFIFO:
   124 				// Put a byte in the FIFO buffer
   125 				  ldy FIFO_Head // 3
   126 				  ; lda FIFO_BYTE
   127 				  sta FIFO_BUF,y
   128 				  inc FIFO_Head
   129 				
   130 					.endm
   131
   132 2089			Send:
   133
   134 2089			  m@putInFIFO
Macro: SERIAL_DRV.M@PUTINFIFO [Source: MIDIBox_drv.a65]
     2 2089 A4 FD		  ldy FIFO_Head   // 3
     3 208B C8			  iny             // 2
     4 208C C4 FE		  cpy FIFO_Tail   // 3
     5 208E D0 04		  bne storeInFIFO
     8 2090 18			  clc
     9 2091 20 B4 20		  jsr flush
    11 2094			storeInFIFO:
    13 2094 A4 FD		  ldy FIFO_Head // 3
    15 2096 99 00 06		  sta FIFO_BUF,y
    16 2099 E6 FD		  inc FIFO_Head
Source: MIDIBox_drv.a65
   135
   136 209B			startSend:
   137 				; skip if trasmission not end
   138 209B A5 3A			LDA XMTDON
   139 209D F0 14			BEQ exitSend
   140
   141 				; skip if fifo is empty
   142 209F A4 FE		  ldy fifo_tail
   143 20A1 C4 FD			cpy fifo_head
   144 20A3 F0 0E			beq exitSend
   145
   146 				;
   147 20A5 A9 01			LDA #$01
   148 20A7 85 42			STA CRITIC
   149
   150 				; reset transmission done flag
   151 20A9 A9 00			LDA #$00
   152 20AB 85 3A			STA XMTDON
   153
   154 				; start transmission by send byte to serial out
   155 20AD B9 00 06			LDA FIFO_BUF,Y
   156 20B0 8D 0D D2			STA SEROUT
   157
   158 20B3			exitSend:
   159 20B3 60			  rts
   160
   161 				;--------------------------------------------------
   162 				; Flush buffer
   163 				; C = 0 - start send if buffer is not empty and serial is free
   164 				; C = 1 -
   165 20B4			Flush:
   166 20B4 90 03		  bcc FlushAll
   167 20B6 4C 9B 20		  jmp startSend
   168
   169 20B9			FlushAll:
   170 20B9 48			  pha
   171
   172 20BA			flush_loop:
   173 20BA A5 3A			lda XMTDON
   174 20BC F0 FC			beq flush_loop
   175
   176 20BE 68			  pla
   177 20BF 60			  rts
   178
   179 				;--------------------------------------------------
   180 				; Stop serial port service
   181
   182 20C0			Stop:
   183 20C0 AD 31 21		  lda OVSEROUT
   184 20C3 0D 31 21			ora OVSEROUT
   185 20C6 F0 25			beq exitUnInit
   186
   187 				;restore old vector
   188 20C8 AD 31 21			lda OVSEROUT
   189 20CB 8D 0C 02		  sta VSEROUT
   190 20CE AD 32 21		  lda OVSEROUT+1
   191 20D1 8D 0D 02		  sta VSEROUT+1
   192
   193 				; Clear interrupts
   194 				; (5) serial input data ready
   195 				; (4) serial output data required
   196 				; (3) serial out transmission finished
   197 20D4 A9 C7			LDA #%11000111 ; $C7
   198 20D6 25 10			AND POKMSK
   199 20D8 85 10			STA POKMSK
   200 20DA 8D 0E D2			STA IRQEN
   201
   202 				; clear critic NMI time
   203 20DD A9 00			LDA #$00
   204 20DF 85 42			STA CRITIC
   205
   206 				; clear old vector
   207 20E1 8D 31 21			sta OVSEROUT
   208 20E4 8D 32 21			sta OVSEROUT+1
   209
   210 				; set POKEY AUDC's registers
   211 20E7			set_AUDC:
   212 20E7 8D 05 D2			STA AUDC3
   213 20EA 8D 07 D2			STA AUDC4
   214
   215 20ED			exitUnInit:
   216 20ED 60				RTS
   217
   218 				;--------------------------------------------------
   219 				;Output MIDI Data by Serial Bus - Interrupt
   220
   221 20EE			IOutMIDISer:
   222
   223 20EE 98 48			tya:pha
   224
   225 20F0 A4 FE		  ldy fifo_tail
   226 20F2 C8				iny
   227 20F3 C4 FD			cpy fifo_head
   228 20F5 D0 13			bne send_next
   229
   230 20F7			dont_send_checksum:
   231 20F7 84 FE		  sty fifo_tail
   232
   233 20F9 A5 10			lda POKMSK
   234 20FB 09 08			ora #%00001000	; $08
   235 20FD 85 10			sta POKMSK
   236 20FF 8D 0E D2			sta IRQEN
   237
   238 2102 A9 00			LDA #$00
   239 2104 85 42			STA CRITIC
   240
   241 2106			serial_rti:
   242 2106 68 A8 68			pla:tay:pla
   243 2109 40				rti
   244
   245 210A			send_next:
   246 210A 84 FE		  sty fifo_tail
   247 210C B9 00 06			lda FIFO_BUF,y
   248 210F 8D 0D D2			sta SEROUT
   249
   250 2112 4C 06 21			jmp serial_rti
   251
   252 				;--------------------------------------------------
   253 				;
   254
   255 2115				icl './print.a65'
Source: print.a65
     1 2115			PRINT:
     2
     3 2115			    .local
     4
     5 = 0340			ICCHID  = $0340
     6 = 0342			ICCMD   = $0342
     7 = 0344			ICBUFA  = $0344
     8 = 0348			ICBUFL  = $0348
     9 = E456			CIOV    = $E456
    10
    11 2115 A2 00		    ldx #$00
    12 2117 9D 44 03		    sta ICBUFA,X
    13 211A 98			    tya
    14 211B 9D 45 03		    sta ICBUFA+1,X
    15 211E A9 FF		    lda #$ff
    16 2120 9D 48 03		    sta ICBUFL,X
    17 2123 A9 09		    lda #$09
    18 2125 9D 42 03		    sta ICCMD,X
    19 2128 BD 40 03		    lda ICCHID,x
    20 212B 30 03		    bmi ExitPRINT
    21 212D 4C 56 E4		    jmp CIOV
    22 2130			ExitPRINT:
    23 2130 60			    rts
    24
    25 				    .endl
   256
   257 				;--------------------------------------------------
   258 				; driver variables
   259
   260 				; old serial out vector
   261 2131 00 00		OVSEROUT    dta a(0)
   262
   263 				  .endl
   264
   265 02E2-02E3> 25 20			ini serial_drv.init
