mads 2.1.6
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 8000			CODEORIGIN	= $8000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				.local	RESOURCE
   105 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1142 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 8075				RCDATA 'resources/screen_addresses.obj' SCREEN_ADRSES 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0020			len = .filesize('resources/screen_addresses.obj')-0
    28 8075				org main.SCREEN_ADRSES
    30 0410-042F> 28 37 50 37 + 	ins 'resources/screen_addresses.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_ADRSES,'..',*-1," 'resources/screen_addresses.obj'"
    32 				$R RCDATA  $0410..$042F 'resources/screen_addresses.obj'
Source: MIDICar Player.a65
   110 0430				RCDATA 'resources/font_blk.fnt' CHARS_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('resources/font_blk.fnt')-0
    28 0430				org main.CHARS_ADDR
    30 3000-33FF> 00 00 00 00 + 	ins 'resources/font_blk.fnt',0
    32 					.print '$R RCDATA  ',main.CHARS_ADDR,'..',*-1," 'resources/font_blk.fnt'"
    32 				$R RCDATA  $3000..$33FF 'resources/font_blk.fnt'
Source: MIDICar Player.a65
   111 3400				RCASM 'resources/dlist.asm' DLIST_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 3400				org RESORIGIN
     4 = 004D			len = .sizeof(_DLIST_ADDR)
     6 				mcpy	ift main.DLIST_ADDR+len >= $bc20
    11 8075-80E2> 20 41 80		jsr sys.off
    13 8078 A9 96 85 88 A9 80 +  MWA #DATA EDX
    13 8080 A9 B3 85 8C A9 3F +  MWA #MAIN.DLIST_ADDR ECX
    13 8088 A9 4D 85 84 A9 00 +  MWA #LEN EAX
    13 8090 20 00 80		 JSR RESOURCE.MEMCPY
    15 8093 4C 65 80			jmp sys.on
    16 8096			data
Source: dlist.inc
     1 = 0000			DL_BLANK1 = 0; // 1 blank line
     2 = 0010			DL_BLANK2 = %00010000; // 2 blank lines
     3 = 0020			DL_BLANK3 = %00100000; // 3 blank lines
     4 = 0030			DL_BLANK4 = %00110000; // 4 blank lines
     5 = 0040			DL_BLANK5 = %01000000; // 5 blank lines
     6 = 0050			DL_BLANK6 = %01010000; // 6 blank lines
     7 = 0060			DL_BLANK7 = %01100000; // 7 blank lines
     8 = 0070			DL_BLANK8 = %01110000; // 8 blank lines
    10 = 0080			DL_DLI = %10000000; // Order to run DLI
    11 = 0040			DL_LMS = %01000000; // Order to set new memory address
    12 = 0020			DL_VSCROLL = %00100000; // Turn on vertical scroll on this line
    13 = 0010			DL_HSCROLL = %00010000; // Turn on horizontal scroll on this line
    15 = 0002			DL_MODE_40x24T2 = 2; // Antic Modes
    16 = 0004			DL_MODE_40x24T5 = 4;
    17 = 0005			DL_MODE_40x12T5 = 5;
    18 = 0006			DL_MODE_20x24T5 = 6;
    19 = 0007			DL_MODE_20x12T5 = 7;
    20 = 0008			DL_MODE_40x24G4 = 8;
    21 = 0009			DL_MODE_80x48G2 = 9;
    22 = 000A			DL_MODE_80x48G4 = $A;
    23 = 000B			DL_MODE_160x96G2 = $B;
    24 = 000C			DL_MODE_160x192G2 = $C;
    25 = 000D			DL_MODE_160x96G4 = $D;
    26 = 000E			DL_MODE_160x192G4 = $E;
    27 = 000F			DL_MODE_320x192G2 = $F;
    29 = 0001			DL_JMP = %00000001; // Order to jump
    30 = 0041			DL_JVB = %01000001; // Jump to begining
     3 3FB3			dl_start
     4 3FB3 70 70		    :2  dta DL_BLANK8
     6 3FB5 4F 00 34		        dta DL_MODE_320x192G2 + DL_LMS, A(MAIN.SCREEN_ADDR)
     7 3FB8 0F 0F 0F 0F 0F 0F +     :18 dta DL_MODE_320x192G2
     9 3FCA 00			        dta DL_BLANK1
    11 3FCB 42 F8 36 00		        dta DL_MODE_40x24T2 + DL_LMS, A(MAIN.SCREEN_WORK), DL_BLANK1
    12 3FCF 02 00 02 00 02 00 +     :17 dta DL_MODE_40x24T2, DL_BLANK1
    14 3FF1 47 C8 39		        dta DL_MODE_20x12T5 + DL_LMS, A(MAIN.SCREEN_TIME)
    15 3FF4 00			        dta DL_BLANK1
    16 3FF5 02			        dta DL_MODE_40x24T2
    18 3FF6 00			        dta DL_BLANK1
    19 3FF7 0F 0F 0F 0F 0F 0F	    :6 dta DL_MODE_320x192G2
    21 3FFD 41 B3 3F		        dta DL_JVB, A(dl_start)
    23 					.print '$R RCASM   ',main.DLIST_ADDR,'..',main.DLIST_ADDR+len-1," 'resources/dlist.asm'"
    23 				$R RCASM   $3FB3..$3FFF 'resources/dlist.asm'
    25 02E2-02E3> 75 80			ini mcpy
Source: MIDICar Player.a65
   112 80E3				RCDATA 'resources/header-gr8.obj' SCREEN_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 02F8			len = .filesize('resources/header-gr8.obj')-0
    28 80E3				org main.SCREEN_ADDR
    30 3400-36F7> 07 FF FF FF + 	ins 'resources/header-gr8.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_ADDR,'..',*-1," 'resources/header-gr8.obj'"
    32 				$R RCDATA  $3400..$36F7 'resources/header-gr8.obj'
Source: MIDICar Player.a65
   113 36F8				RCDATA 'resources/footer-gr8-3.obj' SCREEN_FOOT 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 00F0			len = .filesize('resources/footer-gr8-3.obj')-0
    28 36F8				org main.SCREEN_FOOT
    30 3A04-3AF3> FF FF 00 00 + 	ins 'resources/footer-gr8-3.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_FOOT,'..',*-1," 'resources/footer-gr8-3.obj'"
    32 				$R RCDATA  $3A04..$3AF3 'resources/footer-gr8-3.obj'
Source: MIDICar Player.a65
   114 3AF4				RCDATA 'resources/uvmeter.obj' UVMETER_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0040			len = .filesize('resources/uvmeter.obj')-0
    28 3AF4				org main.UVMETER_ADDR
    30 3B00-3E0F> 41 41 41 41 + 	ins 'resources/uvmeter.obj',0
    32 					.print '$R RCDATA  ',main.UVMETER_ADDR,'..',*-1," 'resources/uvmeter.obj'"
    32 				$R RCDATA  $3B00..$3B3F 'resources/uvmeter.obj'
Source: MIDICar Player.a65
   115 3B40				RCDATA 'resources/help.obj' HELPSCR_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 02D0			len = .filesize('resources/help.obj')-0
    28 3B40				org main.HELPSCR_ADDR
    30 3B40 4A 4E A3 AF AE B4 + 	ins 'resources/help.obj',0
    32 					.print '$R RCDATA  ',main.HELPSCR_ADDR,'..',*-1," 'resources/help.obj'"
    32 				$R RCDATA  $3B40..$3E0F 'resources/help.obj'
Source: MIDICar Player.a65
   116 				.endl
   117
   118 				; ------------------------------------------------------------
   119
   120 3E10				org CODEORIGIN
   121
   122 8000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 8000-A7AA> 00 00 05 FB + .by  $00 $00 $05 $FB $00 $FC $00 $FD  $00 $04 $2D $65 $6D $1A $00 $02  $2B $22 $00 $02 $45 $3A $00 $02
     2 8018 00 00 00 02 7E 7F + .by  $00 $00 $00 $02 $7E $7F $00 $02  $5C $5D $00 $02 $5E $5F $00 $05  $3B $00 $FC $00 $FD $00 $09 $4E
     3 8030 B0 EC E1 F9 E9 EE + .by  $B0 $EC $E1 $F9 $E9 $EE $E7 $CE  $00 $09 $4E $AE $EF $80 $F3 $EF  $EE $E7 $CE $00 $05 $FB $00 $3C
     4 8048 00 FD 00 09 4E 80 + .by  $00 $FD $00 $09 $4E $80 $B0 $E1  $F5 $F3 $E5 $80 $CE $00 $05 $FB  $00 $FC $00 $3D $00 $09 $4E $B3
     5 8060 F4 EF F0 F0 E5 E4 + .by  $F4 $EF $F0 $F0 $E5 $E4 $CE $00  $09 $4E $AC $EF $E1 $E4 $E9 $EE  $E7 $80 $00 $13 $4E $B2 $E5 $E1
     6 8078 E4 E9 EE E7 80 E4 + .by  $E4 $E9 $EE $E7 $80 $E4 $E9 $F2  $E5 $E3 $F4 $EF $F2 $F9 $80 $00  $14 $4E $B5 $EE $F3 $F5 $F0 $F0
     7 8090 EF F2 F4 E5 E4 80 + .by  $EF $F2 $F4 $E5 $E4 $80 $E6 $EF  $F2 $ED $E1 $F4 $CE $00 $14 $4E  $AE $EF $F4 $80 $E5 $EE $EF $F5
     8 80A8 E7 E8 F4 80 ED E5 + .by  $E7 $E8 $F4 $80 $ED $E5 $ED $EF  $F2 $F9 $CE $00 $11 $4E $AE $EF  $F4 $80 $E1 $80 $AD $A9 $A4 $A9
     9 80C0 80 E6 E9 EC E5 CE + .by  $80 $E6 $E9 $EC $E5 $CE $00 $0C  $4E $A9 $8F $AF $80 $A5 $F2 $F2  $EF $F2 $80 $83 $00 $0B $4E $A4
    10 80D8 E9 F2 E5 E3 F4 EF + .by  $E9 $F2 $E5 $E3 $F4 $EF $F2 $F9  $CE $00 $02 $44 $3A $00 $08 $4E  $B3 $F4 $E1 $F4 $F5 $F3 $CE $00
    11 80F0 09 4E A3 EF F5 EE + .by  $09 $4E $A3 $EF $F5 $EE $F4 $E5  $F2 $CE $00 $03 $2A $2E $2A $00  $A8 $00 $0A $08 $0A $A8 $0A $00
    12 8108 02 00 17 80 1B 80 + .by  $02 $00 $17 $80 $1B $80 $1F $80  $23 $80
Source: MIDICar Player.a65
   123
   124 				; ------------------------------------------------------------
   125
   126 8112			RTLIB
   127 8112				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   128
   129 				.print 'ZPAGE: ',zpage,'..',zpend-1
   129 				ZPAGE: $0080..$00D3
   130
   131 				.print 'RTLIB: ',RTLIB,'..',*-1
   131 				RTLIB: $8112..$88CF
   132
   133 				; ------------------------------------------------------------
   134
   135 88D0			START
   136 88D0 BA				tsx
   137 88D1 8E 89 A7			stx MAIN.@halt+1
   138
   139 					.ifdef fmulinit
   140 					fmulinit
   141 					.fi
   142
   143 = 00A4			VLEN	= VARDATASIZE-VARINITSIZE
   144 = 3E86			VADR	= DATAORIGIN+VARINITSIZE
   145
   146 					ift VADR > $BFFF
   147 					ert 'Invalid memory address range ',VADR
   148 					eli (VLEN>0) && (VLEN<=256)
   149 88D4 A2 5C			ldx #256-VLEN
   150 88D6 A9 00			lda #$00
   151 88D8 9D 2A 3E E8 D0 FA		sta:rne VADR+VLEN-256,x+
   152 					eli VLEN>256
   153 					@fill #VADR #VLEN #$00
   154 					eif
   155
   156 				.ifdef :psptr
   157 					mwa #PROGRAMSTACK :psptr
   158 				.fi
   159
   160 					.ifdef MAIN.@DEFINES.ROMOFF
   161 88DE				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 88DE			.local	rominit
     5
     6 88DE 78			        sei
     7 88DF A9 00		        lda #%00000000
     8 88E1 8D 0E D4		        sta NMIEN       ;$D40E
     9 88E4 A9 FE		        lda #%11111110
    10 88E6 8D 01 D3		        sta PORTB       ;$D301
    11
    12 88E9 A2 03			ldx #3
    13 88EB A0 00			ldy #0
    14 88ED EE 01 D3		mv	inc portb
    15 88F0 B9 00 E0		afnt0	lda $e000,y
    16 88F3 CE 01 D3			dec portb
    17 88F6 99 00 E0		afnt1	sta $e000,y
    18 88F9 C8				iny
    19 88FA D0 F1			bne mv
    20 88FC EE F2 88			inc afnt0+2
    21 88FF EE F8 88			inc afnt1+2
    22 8902 CA				dex
    23 8903 10 E8			bpl mv
    24
    25 8905 A2 22		        ldx #<nmiint
    26 8907 A0 89		        ldy #>nmiint
    27 8909 8E FA FF		        stx NMIVEC      ;$FFFA
    28 890C 8C FB FF		        sty NMIVEC+1
    29
    30 890F A2 2C		        ldx #<irqint
    31 8911 A0 89		        ldy #>irqint
    32 8913 8E FE FF		        stx IRQVEC      ;$FFFE
    33 8916 8C FF FF		        sty IRQVEC+1
    34
    35 8919 A9 40		        lda #%01000000
    36 891B 8D 0E D4		        sta NMIEN       ;$D40E
    37 891E 58			        cli
    38
    39 891F 4C 4D 89			jmp skp
    40
    41
    42
    43 8922 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 8925 10 03		        spl
    45 8927 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 892A 38			        sec
    48 892B 24			        .byte $24        ;BIT $18
    49
    50 892C 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 892D EE 01 D3		        inc PORTB       ;$D301
    55
    56 8930 48			        pha
    57 8931 8A			        txa
    58 8932 48			        pha
    59 8933 BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 8934 A9 89		        lda #>iret      ;adres procedury iret
    64 8936 48			        pha
    65 8937 A9 46		        lda #<iret
    66 8939 48			        pha
    67 893A BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 893D 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 893E 90 03		        scc
    73 8940 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 8943 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 8946 68			iret	pla
    77 8947 AA				tax
    78 8948 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 8949 CE 01 D3		        dec PORTB       ;$D301
    83 894C 40			        rti
    84
    85 894D			skp
    86
    87 				.endl
    88
   162 					.fi
   163
   164 894D A2 0F			ldx #$0F					; DOS II+/D ParamStr
   165 894F BD 40 03 9D 91 A7 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   166
   167 8958 E8				inx						; X = 0
   168 8959 86 80			stx bp						; BP = 0
   169
   170 895B 8E 0F D2			stx skctl					; reset POKEY
   171 895E A9 03			lda #3
   172 8960 8D 0F D2			sta skctl
   173
   174 8963 CA				dex						; X = 255
   175
   176 8964				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
    19 8964 20 A8 93			jsr MAIN.MIDFILES.@UnitInit
   177
   178 8967			.local	MAIN						; PROCEDURE
   179
   180 8967 4C 43 A2			jmp l_0107
   181
   182 				; ------------------------------------------------------------
   183
   184 896A			.local	SYSTEM						; UNIT
   185
   186 896A			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   187
   188 				; ------------------------------------------------------------
   189
   190 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   191 				; as Pointer
   192 896A B5 94			lda :STACKORIGIN,x
   193 896C 85 88			sta A
   194 896E B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   195 8970 85 89			sta A+1
   196 8972 CA				dex
   197 8973 10 03 4C 7D 89		jmi @main
   198
   199 				; ------------------------------------------------------------
   200
   201 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   202 				; as Pointer
   203 8978 B5 94			lda :STACKORIGIN,x
   204 897A 85 8C			sta VALUE
   205 897C CA				dex
   206 897D			@main
   207
   208 				; -------------------  ASM Block 00000018  -------------------
   209
   210 897D A0 00			ldy #0
   211 897F A5 8C 91 88			mva value (:edx),y
   212
   213 				; ------------------------------------------------------------
   214
   215 = 0088			A	= :EDX
   216 = 008C			VALUE	= :ECX
   217 8983			@exit
   218 					.ifdef @new
   219 					lda <@VarData
   220 					sta :ztmp
   221 					lda >@VarData
   222 					ldy #@VarDataSize-1
   223 					jmp @FreeMem
   224 					els
   225 8983 60				rts						; ret
   226 					eif
   227 				.endl
   228
   229 8984			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   230
   231 				; ------------------------------------------------------------
   232
   233 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   234 				; as Pointer
   235 8984 B5 94			lda :STACKORIGIN,x
   236 8986 85 88			sta A
   237 8988 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   238 898A 85 89			sta A+1
   239 898C CA				dex
   240 898D 30 09			jmi @main
   241
   242 				; ------------------------------------------------------------
   243
   244 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   245 				; as Pointer
   246 898F B5 94			lda :STACKORIGIN,x
   247 8991 85 8C			sta VALUE
   248 8993 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   249 8995 85 8D			sta VALUE+1
   250 8997 CA				dex
   251 8998			@main
   252
   253 				; -------------------  ASM Block 00000019  -------------------
   254
   255 8998 A0 00			ldy #0
   256 899A A5 8C 91 88			mva value (:edx),y
   257 899E C8				iny
   258 899F A5 8D 91 88			mva value+1 (:edx),y
   259
   260 				; ------------------------------------------------------------
   261
   262 = 0088			A	= :EDX
   263 = 008C			VALUE	= :ECX
   264 89A3			@exit
   265 					.ifdef @new
   266 					lda <@VarData
   267 					sta :ztmp
   268 					lda >@VarData
   269 					ldy #@VarDataSize-1
   270 					jmp @FreeMem
   271 					els
   272 89A3 60				rts						; ret
   273 					eif
   274 				.endl
   275
   276 89A4			.local	FILLCHAR_0151					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   277
   278 					.MACRO m@INLINE
   279 				
   280 				; -------------------  ASM Block 00000021  -------------------
   281 				
   282 					jsr @fill
   283 				
   284 					.ENDM
   285
   286 				; ------------------------------------------------------------
   287
   288 = 0088			A	= :EDX
   289 = 008C			COUNT	= :ECX
   290 = 0084			VALUE	= :EAX
   291 89A4			@exit
   292 				.endl
   293
   294 89A4			.local	FILLCHAR_0152					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   295
   296 					.MACRO m@INLINE
   297 				
   298 				; -------------------  ASM Block 00000024  -------------------
   299 				
   300 					jsr @fill
   301 				
   302 					.ENDM
   303
   304 				; ------------------------------------------------------------
   305
   306 = 0088			X	= :EDX
   307 = 008C			COUNT	= :ECX
   308 = 0084			VALUE	= :EAX
   309 89A4			@exit
   310 				.endl
   311
   312 89A4			.local	MOVE_0153					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   313
   314 					.MACRO m@INLINE
   315 				
   316 				; -------------------  ASM Block 00000028  -------------------
   317 				
   318 					jsr @move
   319 				
   320 					.ENDM
   321
   322 				; ------------------------------------------------------------
   323
   324 = 0088			SOURCE	= :EDX
   325 = 008C			DEST	= :ECX
   326 = 0084			COUNT	= :EAX
   327 89A4			@exit
   328 				.endl
   329
   330 89A4			.local	RANDOM_0172					; FUNCTION | ASSEMBLER | OVERLOAD
   331 89A4 8D 8B 3E			sta RANGE
   332
   333 				; -------------------  ASM Block 00000042  -------------------
   334
   335
   336 				;BYTE FUNC Rand(BYTE range)
   337 				; returns random number between 0 and
   338 				; range-1.  If range=0, then a random
   339 				; number between 0 and 255 is returned
   340
   341 89A7 AC 0A D2		  ldy $d20a   ; RANDOM
   342
   343 89AA AD 8B 3E		  lda range
   344 89AD F0 08		  beq stop
   345
   346 89AF 85 8C		  sta :ecx
   347 89B1 84 84		  sty :eax
   348
   349 89B3 20 C3 83		  jsr imulCL
   350 89B6 A8			  tay
   351
   352 89B7 8C 8C 3E		stop  sty Result
   353
   354
   355 89BA			@exit
   356
   357 				; ------------------------------------------------------------
   358
   359 = 3E8B			RANGE	= DATAORIGIN+$000B
   360 = 3E8C			RESULT	= DATAORIGIN+$000C
   361
   362 = 3E8B			@VarData	= RANGE
   363 = 0001			@VarDataSize	= 1
   364
   365 89BA 60				rts						; ret
   366 				.endl
   367
   368 89BB			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   369 89BB 8D 8D 3E			sta I
   370
   371 				; -------------------  ASM Block 00000045  -------------------
   372
   373 					@cmdline i
   373 				 LDA I\ JSR @CMDLINE
   373 89BE AD 8D 3E		 LDA I
   373 89C1 20 12 81		 JSR @CMDLINE
   374
   375 				;	@move #@buf Result #33
   376 89C4 A0 DF			ldy #256-33
   377 89C6 B9 21 03 99 AF 3D + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   378
   379 89CF			@exit
   380
   381 				; ------------------------------------------------------------
   382
   383 = 3E8D			I	= DATAORIGIN+$000D
   384 = 3E8E			adr.RESULT	= [DATAORIGIN+$000E] .array [33]
   385 89CF			.var RESULT	= adr.RESULT .word
   386
   387 = 3E8D			@VarData	= I
   388 = 0022			@VarDataSize	= 34
   389
   390 89CF 60				rts						; ret
   391 = 89D0 8E 3E		RESULT
   391 				.endl
   392
   393 				; ------------------------------------------------------------
   394
   395 = 0101			__PORTB_BANKS	= $0101
   396 = 0648			M_PI_2	= $0648
   397 = 0192			D_PI_2	= $0192
   398 = 0004			D_PI_180	= $04
   399 = 0000			MGTIA	= $00
   400 = 0080			MVBXE	= $80
   401 = 0000			VBXE_XDLADR	= $00
   402 = 00E0			VBXE_BCBTMP	= $E0
   403 = 0100			VBXE_BCBADR	= $0100
   404 = 1000			VBXE_MAPADR	= $1000
   405 = 1000			VBXE_CHBASE	= $1000
   406 = 5000			VBXE_OVRADR	= $5000
   407 = B000			VBXE_WINDOW	= $B000
   408 = 0000			IDLI	= $00
   409 = 0001			IVBL	= $01
   410 = 0002			ITIM1	= $02
   411 = 0003			ITIM2	= $03
   412 = 0004			ITIM4	= $04
   413 = 00FE			CH_DELCHR	= $FE
   414 = 009B			CH_ENTER	= $9B
   415 = 001B			CH_ESC	= $1B
   416 = 001C			CH_CURS_UP	= $1C
   417 = 001D			CH_CURS_DOWN	= $1D
   418 = 001E			CH_CURS_LEFT	= $1E
   419 = 001F			CH_CURS_RIGHT	= $1F
   420 = 007F			CH_TAB	= $7F
   421 = 009B			CH_EOL	= $9B
   422 = 007D			CH_CLR	= $7D
   423 = 00FD			CH_BELL	= $FD
   424 = 007E			CH_DEL	= $7E
   425 = 009C			CH_DELLINE	= $9C
   426 = 009D			CH_INSLINE	= $9D
   427 = 0000			PAL_PMCOLOR0	= $00
   428 = 0001			PAL_PMCOLOR1	= $01
   429 = 0002			PAL_PMCOLOR2	= $02
   430 = 0003			PAL_PMCOLOR3	= $03
   431 = 0004			PAL_COLOR0	= $04
   432 = 0005			PAL_COLOR1	= $05
   433 = 0006			PAL_COLOR2	= $06
   434 = 0007			PAL_COLOR3	= $07
   435 = 0008			PAL_COLBAK	= $08
   436 = 0000			COLOR_BLACK	= $00
   437 = 000E			COLOR_WHITE	= $0E
   438 = 0032			COLOR_RED	= $32
   439 = 0096			COLOR_CYAN	= $96
   440 = 0068			COLOR_VIOLET	= $68
   441 = 00C4			COLOR_GREEN	= $C4
   442 = 0074			COLOR_BLUE	= $74
   443 = 00EE			COLOR_YELLOW	= $EE
   444 = 0028			COLOR_ORANGE	= $28
   445 = 00E4			COLOR_BROWN	= $E4
   446 = 003C			COLOR_LIGHTRED	= $3C
   447 = 0004			COLOR_GRAY1	= $04
   448 = 0006			COLOR_GRAY2	= $06
   449 = 000A			COLOR_GRAY3	= $0A
   450 = 00CC			COLOR_LIGHTGREEN	= $CC
   451 = 007C			COLOR_LIGHTBLUE	= $7C
   452 = 0004			FMOPENREAD	= $04
   453 = 0008			FMOPENWRITE	= $08
   454 = 0009			FMOPENAPPEND	= $09
   455 = 000C			FMOPENREADWRITE	= $0C
   456 = 3E80			SCREENWIDTH	= DATAORIGIN+$0000
   457 = 3E82			SCREENHEIGHT	= DATAORIGIN+$0002
   458 = 3E84			DATESEPARATOR	= DATAORIGIN+$0004
   459 = D20A			RND	= $D20A
   460 = 02C0			adr.PALETTE	= $02C0
   461 89D2			.var PALETTE	= adr.PALETTE .word
   462 = D012			adr.HPALETTE	= $D012
   463 89D2			.var HPALETTE	= adr.HPALETTE .word
   464 = 3E85			FILEMODE	= DATAORIGIN+$0005
   465 = 3E86			GRAPHMODE	= DATAORIGIN+$0006
   466 = 3E87			IORESULT	= DATAORIGIN+$0007
   467 = 3E88			EOLN	= DATAORIGIN+$0008
   468 = 3E89			RNDSEED	= DATAORIGIN+$0009
   469
   470 = 89D2 C0 02		PALETTE
   470 = 89D4 12 D0		HPALETTE
   470 				.endl							; UNIT SYSTEM
   471
   472 				; ------------------------------------------------------------
   473
   474 89D6			.local	MC6850						; UNIT
   475
   476 89D6			.local	MC6850_INIT					; PROCEDURE | ASSEMBLER | KEEP
   477 89D6 8D AF 3E			sta SETUP
   478
   479 				; -------------------  ASM Block 00000052  -------------------
   480
   481 89D9 AD AF 3E		    lda setup
   482 89DC 8D 00 D5		    sta MCBaseState:$d500
   483
   484 				; ------------------------------------------------------------
   485
   486 = 3EAF			SETUP	= DATAORIGIN+$002F
   487
   488 = 3EAF			@VarData	= SETUP
   489 = 0001			@VarDataSize	= 1
   490
   491 89DF			@exit
   492 					.ifdef @new
   493 					lda <@VarData
   494 					sta :ztmp
   495 					lda >@VarData
   496 					ldy #@VarDataSize-1
   497 					jmp @FreeMem
   498 					els
   499 89DF 60				rts						; ret
   500 					eif
   501 				.endl
   502
   503 89E0			.local	MC6850_SEND2					; PROCEDURE | ASSEMBLER | KEEP
   504
   505 				; -------------------  ASM Block 00000053  -------------------
   506
   507 89E0			wait:
   508 89E0 AD 00 D5		    lda MCBaseState:$d500
   509 89E3 29 02		    and #TDRE
   510 89E5 D0 F9		    bne wait
   511
   512 89E7 A5 FF		    lda MC_Byte
   513 89E9 8D 00 D5		    sta MCBaseBuf:$d500
   514
   515 89EC			@exit
   516 					.ifdef @new
   517 					lda <@VarData
   518 					sta :ztmp
   519 					lda >@VarData
   520 					ldy #@VarDataSize-1
   521 					jmp @FreeMem
   522 					els
   523 89EC 60				rts						; ret
   524 					eif
   525 				.endl
   526
   527 				; ------------------------------------------------------------
   528
   529 = 0001			CR0	= $01
   530 = 0002			CR1	= $02
   531 = 0004			CR2	= $04
   532 = 0008			CR3	= $08
   533 = 0010			CR4	= $10
   534 = 0020			CR5	= $20
   535 = 0040			CR6	= $40
   536 = 0080			CR7	= $80
   537 = 0000			CD_1	= $00
   538 = 0001			CD_16	= $01
   539 = 0002			CD_64	= $02
   540 = 0003			MASTERRESET	= $03
   541 = 0000			WS_7BITS	= $00
   542 = 0010			WS_8BITS	= $10
   543 = 0000			WS_2BITSTOP	= $00
   544 = 0008			WS_1BITSTOP	= $08
   545 = 0000			WS_EVENPARITY	= $00
   546 = 0004			WS_ODDPARITY	= $04
   547 = 0000			TC_RTSLOW_NOTIRQ	= $00
   548 = 0020			TC_RTSLOW_TIRQ	= $20
   549 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   550 = 0060			TC_BREAKLEVEL	= $60
   551 = 0000			NOIRQ_RECEIVE	= $00
   552 = 0080			IRQ_RECEIVE	= $80
   553 = 0001			RDRF	= $01
   554 = 0002			TDRE	= $02
   555 = 0004			DCD	= $04
   556 = 0008			CTS	= $08
   557 = 0010			FE	= $10
   558 = 0020			OVRN	= $20
   559 = 0040			PE	= $40
   560 = 0080			IRQ	= $80
   561 = 00FF			MC_BYTE	= $FF
   562
   563 				.endl							; UNIT MC6850
   564
   565 				; ------------------------------------------------------------
   566
   567 89ED			.local	MIDI_FIFO					; UNIT
   568
   569 89ED			.local	FIFO_RESET					; PROCEDURE
   570
   571 				; optimize OK (MIDI_FIFO), line = 30
   572
   573 89ED A9 00			lda #$00
   574 89EF 85 FD			sta FIFO_HEAD
   575
   576 				; optimize OK (MIDI_FIFO), line = 31
   577
   578 89F1 85 FE			sta FIFO_TAIL
   579 89F3			@exit
   580 					.ifdef @new
   581 					lda <@VarData
   582 					sta :ztmp
   583 					lda >@VarData
   584 					ldy #@VarDataSize-1
   585 					jmp @FreeMem
   586 					els
   587 89F3 60				rts						; ret
   588 					eif
   589 				.endl
   590
   591 89F4			.local	FIFO_PUSHDIRECT2MC6850				; PROCEDURE | ASSEMBLER
   592
   593 				; -------------------  ASM Block 00000054  -------------------
   594
   595 89F4 AD 00 D5		  lda MCBaseState:$d500 // MC6850.MC6850_CNTRREG
   596 89F7 29 02		  and #MC6850.TDRE
   597 89F9 F0 0E		  beq exitPush
   598
   599 89FB A4 FE		  ldy FIFO_Tail
   600 89FD C4 FD		  cpy FIFO_Head
   601 89FF F0 08		  beq exitPush
   602
   603 8A01 B9 00 06		  lda FIFO_ADDR,y
   604 8A04 8D 00 D5		  sta MCBaseBuf:$d500  //MC6850.MC6850_BUFFER
   605 8A07 E6 FE		  inc FIFO_Tail
   606
   607 8A09			exitPush:
   608
   609 8A09			@exit
   610 					.ifdef @new
   611 					lda <@VarData
   612 					sta :ztmp
   613 					lda >@VarData
   614 					ldy #@VarDataSize-1
   615 					jmp @FreeMem
   616 					els
   617 8A09 60				rts						; ret
   618 					eif
   619 				.endl
   620
   621 8A0A			.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER
   622
   623 				; -------------------  ASM Block 00000055  -------------------
   624
   625 8A0A A5 FD		  lda FIFO_Head
   626 8A0C 18			  clc
   627 8A0D 69 01		  adc #1
   628 8A0F C5 FE		  cmp FIFO_Tail
   629 8A11 D0 03		  bne storeInFIFO
   630
   631 8A13 20 23 8A		  jsr FIFO_Flush
   632
   633 8A16			storeInFIFO:
   634 8A16 A4 FD		  ldy FIFO_Head
   635 8A18 A5 FF		  lda FIFO_Byte
   636 8A1A 99 00 06		  sta FIFO_ADDR,y
   637 8A1D E6 FD		  inc FIFO_Head
   638
   639 8A1F 20 F4 89		  jsr FIFO_PushDirect2MC6850
   640 8A22			exitWrite:
   641
   642 8A22			@exit
   643 					.ifdef @new
   644 					lda <@VarData
   645 					sta :ztmp
   646 					lda >@VarData
   647 					ldy #@VarDataSize-1
   648 					jmp @FreeMem
   649 					els
   650 8A22 60				rts						; ret
   651 					eif
   652 				.endl
   653
   654 8A23			.local	FIFO_FLUSH					; PROCEDURE | ASSEMBLER | KEEP
   655
   656 				; -------------------  ASM Block 00000056  -------------------
   657
   658 8A23 78			  sei
   659 				  // lda _timerStatus
   660 				  // eor #$80
   661 				  // sta _timerStatus
   662
   663 8A24 A4 FE		  ldy FIFO_Tail
   664 8A26			flushLoop:
   665 8A26 C4 FD		  cpy FIFO_Head
   666 8A28 F0 11		  beq endFlush
   667
   668 8A2A			waitOnMC:
   669 8A2A AD 00 D5		  lda MCBaseState:$d500 // MC6850.MC6850_CNTRReg
   670 8A2D 29 02		  and #MC6850.TDRE
   671 8A2F F0 F9		  beq waitOnMc
   672
   673 8A31 B9 00 06		  lda FIFO_ADDR,y
   674 8A34 8D 00 D5		  sta MCBaseBuf:$d500   // MC6850.MC6850_BUFFER
   675
   676 8A37 C8			  iny
   677 8A38 4C 26 8A		  jmp flushLoop
   678
   679 8A3B			endFlush:
   680 8A3B 84 FE		  sty FIFO_Tail
   681
   682 8A3D 58			  cli
   683 				  // lda _timerStatus
   684 				  // eor #$80
   685 				  // sta _timerStatus
   686
   687 8A3E			@exit
   688 					.ifdef @new
   689 					lda <@VarData
   690 					sta :ztmp
   691 					lda >@VarData
   692 					ldy #@VarDataSize-1
   693 					jmp @FreeMem
   694 					els
   695 8A3E 60				rts						; ret
   696 					eif
   697 				.endl
   698
   699 				; ------------------------------------------------------------
   700
   701 = 00FD			FIFO_HEAD	= $FD
   702 = 00FE			FIFO_TAIL	= $FE
   703 = 00FF			FIFO_BYTE	= $FF
   704 = 3EB0			FIFO2NULL	= DATAORIGIN+$0030
   705 = 0600			FIFO_ADDR	= $0600
   706 = 0600			adr.FIFO_BUF	= $0600
   707 8A3F			.var FIFO_BUF	= adr.FIFO_BUF .word
   708 = 00F5			_TIMERSTATUS	= $F5
   709
   710 = 8A3F 00 06		FIFO_BUF
   710 				.endl							; UNIT MIDI_FIFO
   711
   712 				; ------------------------------------------------------------
   713
   714 8A41			.local	CIO						; UNIT
   715
   716 8A41			.local	OPN						; PROCEDURE | ASSEMBLER
   717
   718 				; -------------------  ASM Block 00000057  -------------------
   719
   720 8A41 8A 48			txa:pha
   721
   722 8A43 AD B1 3E			lda chn
   723 8A46 0A 0A 0A 0A			:4 asl @
   724 8A4A AA				tax
   725
   726 8A4B A9 03			lda #$03		;komenda: OPEN
   727 8A4D 9D 42 03			sta iccmd,x
   728
   729 8A50 EE B4 3E D0 03 EE + 	inw device		;omin bajt z dlugoscia STRING-a
   730
   731 8A58 AD B4 3E			lda device		;adres nazwy pliku
   732 8A5B 9D 44 03			sta icbufa,x
   733 8A5E AD B5 3E			lda device+1
   734 8A61 9D 45 03			sta icbufa+1,x
   735
   736 8A64 AD B2 3E			lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
   737 8A67 9D 4A 03			sta icax1,x
   738
   739 8A6A AD B3 3E			lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
   740 8A6D 9D 4B 03			sta icax2,x
   741
   742 8A70				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8A70 EE 01 D3				inc portb
     6 8A73 20 56 E4				jsr CIOV
     8 8A76 CE 01 D3				dec portb
Source: MIDICar Player.a65
   743
   744 8A79 8C 87 3E			sty MAIN.SYSTEM.IOResult
   745
   746 8A7C 68 AA			pla:tax
   747
   748 				; ------------------------------------------------------------
   749
   750 = 3EB1			CHN	= DATAORIGIN+$0031
   751 = 3EB2			AX1	= DATAORIGIN+$0032
   752 = 3EB3			AX2	= DATAORIGIN+$0033
   753 = 3EB4			DEVICE	= DATAORIGIN+$0034
   754
   755 = 3EB1			@VarData	= CHN
   756 = 0005			@VarDataSize	= 5
   757
   758 8A7E			@exit
   759 					.ifdef @new
   760 					lda <@VarData
   761 					sta :ztmp
   762 					lda >@VarData
   763 					ldy #@VarDataSize-1
   764 					jmp @FreeMem
   765 					els
   766 8A7E 60				rts						; ret
   767 					eif
   768 				.endl
   769
   770 8A7F			.local	CLS						; PROCEDURE | ASSEMBLER
   771 8A7F 8D B6 3E			sta CHN
   772
   773 				; -------------------  ASM Block 00000058  -------------------
   774
   775 8A82 8A 48			txa:pha
   776
   777 8A84 AD B6 3E			lda chn
   778 8A87 0A 0A 0A 0A			:4 asl @
   779 8A8B AA				tax
   780
   781 8A8C A9 0C			lda #$0c		;komenda: CLOSE
   782 8A8E 9D 42 03			sta iccmd,x
   783
   784 8A91				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8A91 EE 01 D3				inc portb
     6 8A94 20 56 E4				jsr CIOV
     8 8A97 CE 01 D3				dec portb
Source: MIDICar Player.a65
   785
   786 8A9A 8C 87 3E			sty MAIN.SYSTEM.IOResult
   787
   788 8A9D 68 AA			pla:tax
   789
   790 				; ------------------------------------------------------------
   791
   792 = 3EB6			CHN	= DATAORIGIN+$0036
   793
   794 = 3EB6			@VarData	= CHN
   795 = 0001			@VarDataSize	= 1
   796
   797 8A9F			@exit
   798 					.ifdef @new
   799 					lda <@VarData
   800 					sta :ztmp
   801 					lda >@VarData
   802 					ldy #@VarDataSize-1
   803 					jmp @FreeMem
   804 					els
   805 8A9F 60				rts						; ret
   806 					eif
   807 				.endl
   808
   809 8AA0			.local	BGET						; PROCEDURE | ASSEMBLER | REGISTER
   810
   811 				; -------------------  ASM Block 00000060  -------------------
   812
   813 8AA0 8A 48			txa:pha
   814
   815 8AA2 A5 88			lda chn
   816 8AA4 0A 0A 0A 0A			:4 asl @
   817 8AA8 AA				tax
   818
   819 8AA9 A9 07			lda #7		;get char/s command
   820 8AAB 9D 42 03			sta iccmd,x
   821
   822 8AAE A5 8C			lda buf
   823 8AB0 9D 44 03			sta icbufa,x
   824 8AB3 A5 8D			lda buf+1
   825 8AB5 9D 45 03			sta icbufa+1,x
   826
   827 8AB8 A5 84			lda cnt
   828 8ABA 9D 48 03			sta icbufl,x
   829 8ABD A5 85			lda cnt+1
   830 8ABF 9D 49 03			sta icbufh,x
   831
   832 8AC2				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8AC2 EE 01 D3				inc portb
     6 8AC5 20 56 E4				jsr CIOV
     8 8AC8 CE 01 D3				dec portb
Source: MIDICar Player.a65
   833
   834 8ACB 8C 87 3E			sty MAIN.SYSTEM.IOResult
   835
   836 8ACE 68 AA			pla:tax
   837
   838 				; ------------------------------------------------------------
   839
   840 = 0088			CHN	= :EDX
   841 = 008C			BUF	= :ECX
   842 = 0084			CNT	= :EAX
   843 8AD0			@exit
   844 					.ifdef @new
   845 					lda <@VarData
   846 					sta :ztmp
   847 					lda >@VarData
   848 					ldy #@VarDataSize-1
   849 					jmp @FreeMem
   850 					els
   851 8AD0 60				rts						; ret
   852 					eif
   853 				.endl
   854
   855 				; ------------------------------------------------------------
   856
   857 				.endl							; UNIT CIO
   858
   859 				; ------------------------------------------------------------
   860
   861 8AD1			.local	MIDFILES					; UNIT
   862
   863 8AD1			.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT
   864
   865 				; -------------------  ASM Block 00000067  -------------------
   866
   867 8AD1			  icl 'midfile/asms/int_timer.a65'
Source: int_timer.a65
     1 8AD1 A5 F5		    lda _timerStatus
     2 8AD3 30 1E		    bmi skip
     3
     4 8AD5			doSubTick:
     5 8AD5 29 0F		    and #f_ratio
     6 8AD7 C5 F4		    cmp _subCnt
     7 8AD9 F0 04		    beq doMainTick
     8
     9 8ADB E6 F4		    inc _subCnt
    10 8ADD 70 14		    bvs skip
    11
    12 8ADF			doMainTick:
    13 8ADF A9 01		    lda #1
    14 8AE1 85 F4		    sta _subCnt
    15
    16 8AE3 A5 F5		    lda _timerStatus
    17 8AE5 09 40		    ora #f_tick
    18 8AE7 85 F5		    sta _timerStatus
    19
    20 8AE9 E6 F0		    inc _totalTicks
    21 8AEB D0 06		    bne skip
    22 8AED E6 F1		    inc _totalTicks+1
    23 8AEF D0 02		    bne skip
    24 8AF1 E6 F2		    inc _totalTicks+2
    25 				    // bne skip
    26 				    // inc _totalTicks+3
    27
    28 8AF3			skip:
    29
    30 				//   sty regy
    31
    32 				//   ldy MIDI_FIFO.FIFO_Tail
    33 				//   cpy MIDI_FIFO.FIFO_Head
    34 				//   beq fifo_end
    35
    36 				//   lda MC6850.MC6850_CNTRREG
    37 				//   and #MC6850.TDRE
    38 				//   beq fifo_end
    39
    40 				//   lda MIDI_FIFO.FIFO_ADDR,y
    41 				//   sta MC6850.MC6850_BUFFER
    42
    43 				//   inc MIDI_FIFO.FIFO_Tail
    44
    45 				// fifo_end:
    46 				//   ldy regy:#$00
    47
    48 8AF3 68			  pla
   868
   869 8AF4 40				rti						; ret
   870 				.endl
   871
   872 8AF5			.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER
   873
   874 				; -------------------  ASM Block 00000068  -------------------
   875
   876 8AF5			  icl 'midfile/asms/memory_bound_check.a65'
Source: memory_bound_check.a65
     1 8AF5 A5 E2		  lda _adr            // get LSB of address
     2 8AF7 F0 01		  beq checkMemType    // zero means, we crossing the page. Check block bounds
     3 8AF9 60			  rts
     4
     5 8AFA			checkMemType
     6 8AFA A5 E3		  lda _adr+1          // get MSB of address
     7 8AFC A4 E1		  ldy _bank           // get current bank index
     8 8AFE D0 17		  bne checkXMSBound   // zero, means we checking bounds in base memory
     9 				                      // otherwise, we checking bound of extended memory
    10
    11 				// base memory bounds check
    12 				// 1nd, $d800..$ff00
    13 8B00			check1Bound:
    14 8B00 C9 FF		  cmp #$ff
    15 8B02 D0 05		  bne check2Bound
    16
    17 8B04 A9 A8		  lda #$a8
    18 8B06 85 E3		  sta _adr+1
    19 8B08 60			  rts
    20
    21 				// 2st, $a800..$cfff
    22 8B09			check2bound:
    23 8B09 C9 D0		  cmp #$d0
    24 8B0B D0 05		  bne check3Bound
    25
    26 8B0D A9 40		  lda #$40
    27 8B0F 85 E3		  sta _adr+1
    28 8B11 60			  rts
    29
    30 				// 3nd, $4000..$8000
    31 8B12			check3Bound
    32 8B12 C9 80		  cmp #$80
    33 8B14 F0 22		  beq outOfMem
    34 8B16 60			  rts
    35
    36 				// extended memory bound check
    37
    38 8B17			checkXMSBound         // extender memory window $4000..$7fff
    39 8B17 C9 80		  cmp #$80            // the bank's memory area ends at $7fff
    40 8B19 F0 01		  beq switchXMSBank   // if MSB addres is out of this address, we need switch bank
    41
    42 8B1B 60			  rts
    43
    44 8B1C			switchXMSBank:
    45 8B1C 88			  dey             // decrement current bank index
    46 8B1D F0 0D		  beq switch2Conv // if zero, meand we back to conventional memory
    47
    48 8B1F B9 00 01		  lda $100,y      // get bank set
    49 8B22 84 E1		  sty _bank       // store current bank index
    50 8B24 8D 01 D3		  sta PORTB       // set PORTB (switch bank)
    51 8B27 A9 40		  lda #$40        // set MSB address to the begining of bank
    52 8B29 85 E3		  sta _adr+1
    53 8B2B 60			  rts
    54
    55 8B2C			switch2Conv:
    56 8B2C 84 E1		  sty _bank
    57 8B2E A9 FE		  lda #$fe        // switch to conventional memory and turn off ROM
    58 8B30 8D 01 D3		  sta PORTB
    59 8B33 A9 A8		  lda #$a8        // set MSB address
    60 8B35 85 E3		  sta _adr+1
    61 8B37 60			  rts
    62
    63 8B38			outOfMem:
    64 8B38 A9 65		  lda #ERR_NOT_ENOUGHT_MEMORY
    65 8B3A 8D 87 3E		  sta SYSTEM.IOResult
   877
   878 8B3D			@exit
   879 					.ifdef @new
   880 					lda <@VarData
   881 					sta :ztmp
   882 					lda >@VarData
   883 					ldy #@VarDataSize-1
   884 					jmp @FreeMem
   885 					els
   886 8B3D 60				rts						; ret
   887 					eif
   888 				.endl
   889
   890 8B3E			.local	LOADMID						; FUNCTION
   891
   892 8B3E 4C 6B 8C			jmp l_019B
   893
   894 8B41			.local	READWORDBI					; FUNCTION
   895
   896 				; optimize OK (bigendian.inc), line = 3
   897
   898 8B41 A9 01			lda #$01
   899 8B43 85 88			sta CIO.BGET.CHN
   900 8B45 A9 F0			lda <RESULT
   901 8B47 85 8C			sta CIO.BGET.BUF
   902 8B49 A9 3E			lda >RESULT
   903 8B4B 85 8D			sta CIO.BGET.BUF+1
   904 8B4D A9 02			lda #$02
   905 8B4F 85 84			sta CIO.BGET.CNT
   906 8B51 A9 00			lda #$00
   907 8B53 85 85			sta CIO.BGET.CNT+1
   908 8B55 20 A0 8A			jsr CIO.BGET
   909
   910 				; -------------------  ASM Block 00000069  -------------------
   911
   912 8B58 AE F0 3E		    ldx result
   913 8B5B AC F1 3E		    ldy result+1
   914 8B5E 8E F1 3E		    stx result+1
   915 8B61 8C F0 3E		    sty result
   916 				  
   917 8B64			@exit
   918
   919 				; ------------------------------------------------------------
   920
   921 = 3EF0			RESULT	= DATAORIGIN+$0070
   922 8B64 60				rts						; ret
   923 				.endl
   924
   925 8B65			.local	READLONGBI					; FUNCTION
   926
   927 				; optimize OK (bigendian.inc), line = 15
   928
   929 8B65 A9 01			lda #$01
   930 8B67 85 88			sta CIO.BGET.CHN
   931 8B69 A9 F2			lda <RESULT
   932 8B6B 85 8C			sta CIO.BGET.BUF
   933 8B6D A9 3E			lda >RESULT
   934 8B6F 85 8D			sta CIO.BGET.BUF+1
   935 8B71 A9 04			lda #$04
   936 8B73 85 84			sta CIO.BGET.CNT
   937 8B75 A9 00			lda #$00
   938 8B77 85 85			sta CIO.BGET.CNT+1
   939 8B79 20 A0 8A			jsr CIO.BGET
   940
   941 				; -------------------  ASM Block 00000070  -------------------
   942
   943 8B7C AE F2 3E		    ldx result
   944 8B7F AC F5 3E		    ldy result+3
   945 8B82 8E F5 3E		    stx result+3
   946 8B85 8C F2 3E		    sty result
   947
   948 8B88 AE F3 3E		    ldx result+1
   949 8B8B AC F4 3E		    ldy result+2
   950 8B8E 8E F4 3E		    stx result+2
   951 8B91 8C F3 3E		    sty result+1
   952 				  
   953 8B94			@exit
   954
   955 				; ------------------------------------------------------------
   956
   957 = 3EF2			RESULT	= DATAORIGIN+$0072
   958 8B94 60				rts						; ret
   959 				.endl
   960
   961 8B95			.local	_BGET						; PROCEDURE
   962
   963 				; optimize OK (loadmid.inc), line = 21
   964
   965 8B95 A9 01			lda #$01
   966 8B97 85 88			sta CIO.BGET.CHN
   967 8B99 AD F6 3E			lda DEST
   968 8B9C 85 8C			sta CIO.BGET.BUF
   969 8B9E AD F7 3E			lda DEST+1
   970 8BA1 85 8D			sta CIO.BGET.BUF+1
   971 8BA3 AD E8 3E			lda LOADSIZE
   972 8BA6 85 84			sta CIO.BGET.CNT
   973 8BA8 AD E9 3E			lda LOADSIZE+1
   974 8BAB 85 85			sta CIO.BGET.CNT+1
   975 8BAD 20 A0 8A			jsr CIO.BGET
   976
   977 				; ------------------------------------------------------------
   978
   979 = 3EF6			DEST	= DATAORIGIN+$0076
   980
   981 = 3EF6			@VarData	= DEST
   982 = 0002			@VarDataSize	= 2
   983
   984 8BB0			@exit
   985 					.ifdef @new
   986 					lda <@VarData
   987 					sta :ztmp
   988 					lda >@VarData
   989 					ldy #@VarDataSize-1
   990 					jmp @FreeMem
   991 					els
   992 8BB0 60				rts						; ret
   993 					eif
   994 				.endl
   995
   996 8BB1			.local	CHECKLOADSIZE					; PROCEDURE
   997
   998 				; optimize OK (loadmid.inc), line = 26
   999
  1000 8BB1 A9 00			lda #$00
  1001 8BB3 8D E8 3E			sta LOADSIZE
  1002 8BB6 8D E9 3E			sta LOADSIZE+1
  1003
  1004 				; --- RepeatUntilProlog
  1005 8BB9			l_01BD
  1006
  1007 				; optimize FAIL ('MEMBOUNDCHECK', loadmid.inc), line = 28
  1008
  1009 8BB9 20 F5 8A			jsr MEMBOUNDCHECK
  1010
  1011 				; optimize OK (loadmid.inc), line = 29
  1012
  1013 8BBC AD 87 3E			lda SYSTEM.IORESULT
  1014 8BBF C9 01			cmp #$01
  1015 8BC1 F0 03			jeq l_01D0
  1016 8BC3 4C 6A 8C			jmp @exit					; exit
  1017 8BC6			l_01D0
  1018
  1019 				; optimize OK (loadmid.inc), line = 31
  1020
  1021 8BC6 A5 E3			lda _ADR+1
  1022 8BC8 C9 D8			cmp #$D8
  1023 8BCA 90 0D			jcc l_01E4
  1024 8BCC A9 00			lda #$00
  1025 8BCE 8D E8 3E			sta LOADSIZE
  1026 8BD1 A9 FF			lda #$FF
  1027 8BD3 8D E9 3E			sta LOADSIZE+1
  1028 8BD6 4C 0F 8C			jmp l_01F2
  1029 8BD9			l_01E4
  1030
  1031 				; optimize OK (loadmid.inc), line = 32
  1032
  1033 8BD9 A5 E3			lda _ADR+1
  1034 8BDB C9 C0			cmp #$C0
  1035 8BDD 90 0D			jcc l_0203
  1036 8BDF A9 00			lda #$00
  1037 8BE1 8D E8 3E			sta LOADSIZE
  1038 8BE4 A9 D0			lda #$D0
  1039 8BE6 8D E9 3E			sta LOADSIZE+1
  1040 8BE9 4C 0F 8C			jmp l_0211
  1041 8BEC			l_0203
  1042
  1043 				; optimize OK (loadmid.inc), line = 33
  1044
  1045 8BEC A5 E3			lda _ADR+1
  1046 8BEE C9 A8			cmp #$A8
  1047 8BF0 90 0D			jcc l_0222
  1048 8BF2 A9 00			lda #$00
  1049 8BF4 8D E8 3E			sta LOADSIZE
  1050 8BF7 A9 C0			lda #$C0
  1051 8BF9 8D E9 3E			sta LOADSIZE+1
  1052 8BFC 4C 0F 8C			jmp l_0230
  1053 8BFF			l_0222
  1054
  1055 				; optimize OK (loadmid.inc), line = 34
  1056
  1057 8BFF A5 E3			lda _ADR+1
  1058 8C01 C9 40			cmp #$40
  1059 8C03 90 0A			jcc l_0241
  1060 8C05 A9 00			lda #$00
  1061 8C07 8D E8 3E			sta LOADSIZE
  1062 8C0A A9 80			lda #$80
  1063 8C0C 8D E9 3E			sta LOADSIZE+1
  1064 8C0F			l_0241
  1065 8C0F			l_0230
  1066 8C0F			l_0211
  1067 8C0F			l_01F2
  1068
  1069 				; optimize OK (loadmid.inc), line = 35
  1070
  1071 8C0F AD E8 3E			lda LOADSIZE
  1072 8C12 38 E5 E2			sub _ADR
  1073 8C15 8D E8 3E			sta LOADSIZE
  1074 8C18 AD E9 3E			lda LOADSIZE+1
  1075 8C1B E5 E3			sbc _ADR+1
  1076 8C1D 8D E9 3E			sta LOADSIZE+1
  1077
  1078 				; optimize OK (loadmid.inc), line = 36
  1079
  1080 8C20				.LOCAL
  1081 8C20 A9 00			lda #$00
  1082 8C22 38 ED ED 3E			sub LEN+3
  1083 8C26 D0 21			bne L4
  1084 8C28 A9 00			lda #$00
  1085 8C2A CD EC 3E			cmp LEN+2
  1086 8C2D D0 0E			bne L1
  1087 8C2F AD E9 3E			lda LOADSIZE+1
  1088 8C32 CD EB 3E			cmp LEN+1
  1089 8C35 D0 06			bne L1
  1090 8C37 AD E8 3E			lda LOADSIZE
  1091 8C3A CD EA 3E			cmp LEN
  1092 8C3D F0 10		L1	beq L5
  1093 8C3F B0 04			bcs L3
  1094 8C41 A9 FF			lda #$FF
  1095 8C43 D0 0A			bne L5
  1096 8C45 A9 01		L3	lda #$01
  1097 8C47 D0 06			bne L5
  1098 8C49 50 04		L4	bvc L5
  1099 8C4B 49 FF			eor #$FF
  1100 8C4D 09 01			ora #$01
  1101 8C4F			L5
  1102 					.ENDL
  1103 8C4F 30 0E			jmi l_025B
  1104 8C51 F0 0C			jeq l_025B
  1105 8C53 AD EA 3E			lda LEN
  1106 8C56 8D E8 3E			sta LOADSIZE
  1107 8C59 AD EB 3E			lda LEN+1
  1108 8C5C 8D E9 3E			sta LOADSIZE+1
  1109 8C5F			l_025B
  1110
  1111 				; optimize OK (loadmid.inc), line = 37
  1112
  1113 8C5F AD E9 3E			lda LOADSIZE+1
  1114 8C62 0D E8 3E			ora LOADSIZE
  1115 8C65 D0 03 4C B9 8B		jeq l_01BD
  1116 8C6A			@exit
  1117 					.ifdef @new
  1118 					lda <@VarData
  1119 					sta :ztmp
  1120 					lda >@VarData
  1121 					ldy #@VarDataSize-1
  1122 					jmp @FreeMem
  1123 					els
  1124 8C6A 60				rts						; ret
  1125 					eif
  1126 				.endl
  1127 8C6B			l_019B
  1128
  1129 				; optimize OK (loadmid.inc), line = 41
  1130
  1131 8C6B A9 01			lda #$01
  1132 8C6D 8D B1 3E			sta CIO.OPN.CHN
  1133 8C70 A9 04			lda #$04
  1134 8C72 8D B2 3E			sta CIO.OPN.AX1
  1135 8C75 A9 00			lda #$00
  1136 8C77 8D B3 3E			sta CIO.OPN.AX2
  1137 8C7A AD DA 3E			lda FN
  1138 8C7D 8D B4 3E			sta CIO.OPN.DEVICE
  1139 8C80 AD DB 3E			lda FN+1
  1140 8C83 8D B5 3E			sta CIO.OPN.DEVICE+1
  1141 8C86 20 41 8A			jsr CIO.OPN
  1142
  1143 				; optimize OK (loadmid.inc), line = 42
  1144
  1145 8C89 AD 87 3E			lda SYSTEM.IORESULT
  1146 8C8C 10 0B			jpl l_0287
  1147
  1148 				; optimize OK (loadmid.inc), line = 44
  1149
  1150 8C8E 8D DC 3E			sta RESULT
  1151
  1152 				; optimize OK (loadmid.inc), line = 45
  1153
  1154 8C91 A9 01			lda #$01
  1155 8C93 20 7F 8A			jsr CIO.CLS
  1156 8C96 4C 8A 8E			jmp @exit					; exit
  1157 8C99			l_0287
  1158
  1159 				; optimize OK (loadmid.inc), line = 49
  1160
  1161 8C99 AD EE 93			lda MIDTRACKS
  1162 8C9C 8D EE 3E			sta TRKDATA
  1163 8C9F AD EF 93			lda MIDTRACKS+1
  1164 8CA2 8D EF 3E			sta TRKDATA+1
  1165
  1166 				; optimize OK (loadmid.inc), line = 50
  1167
  1168 8CA5 A9 00			lda #$00
  1169 8CA7 8D DD 3E			sta TRACKCOUNT
  1170
  1171 				; optimize OK (loadmid.inc), line = 51
  1172
  1173 8CAA A9 FF			lda #$FF
  1174 8CAC 8D BB 3E			sta TOTALTRACKS
  1175
  1176 				; --- WhileProlog
  1177 8CAF 4C 6D 8E			jmp l_02A1
  1178 8CB2			l_02A2
  1179
  1180 				; optimize OK (loadmid.inc), line = 55
  1181
  1182 8CB2 A9 01			lda #$01
  1183 8CB4 85 88			sta CIO.BGET.CHN
  1184 8CB6 A9 DE			lda <CHUNKTAG
  1185 8CB8 85 8C			sta CIO.BGET.BUF
  1186 8CBA A9 3E			lda >CHUNKTAG
  1187 8CBC 85 8D			sta CIO.BGET.BUF+1
  1188 8CBE A9 04			lda #$04
  1189 8CC0 85 84			sta CIO.BGET.CNT
  1190 8CC2 A9 00			lda #$00
  1191 8CC4 85 85			sta CIO.BGET.CNT+1
  1192 8CC6 20 A0 8A			jsr CIO.BGET
  1193
  1194 				; optimize FAIL ('READLONGBI', loadmid.inc), line = 56
  1195
  1196 8CC9 20 65 8B			jsr READLONGBI
  1197 8CCC AD F2 3E			lda READLONGBI.RESULT
  1198 8CCF 8D EA 3E			sta LEN
  1199 8CD2 AD F3 3E			lda READLONGBI.RESULT+1
  1200 8CD5 8D EB 3E			sta LEN+1
  1201 8CD8 AD F4 3E			lda READLONGBI.RESULT+2
  1202 8CDB 8D EC 3E			sta LEN+2
  1203 8CDE AD F5 3E			lda READLONGBI.RESULT+3
  1204 8CE1 8D ED 3E			sta LEN+3
  1205
  1206 				; optimize OK (loadmid.inc), line = 57
  1207
  1208 8CE4 AD E1 3E			lda CHUNKTAG+3
  1209 8CE7 49 64			eor #$64
  1210 8CE9 D0 55			jne l_02BA
  1211 8CEB AD E0 3E			lda CHUNKTAG+2
  1212 8CEE 49 68			eor #$68
  1213 8CF0 D0 4E			jne l_02BA
  1214 8CF2 AD DF 3E			lda CHUNKTAG+1
  1215 8CF5 49 54			eor #$54
  1216 8CF7 D0 47			jne l_02BA
  1217 8CF9 AD DE 3E			lda CHUNKTAG
  1218 8CFC 49 4D			eor #$4D
  1219 8CFE D0 40			jne l_02BA
  1220
  1221 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 59
  1222
  1223 8D00 20 41 8B			jsr READWORDBI
  1224 8D03 AD F0 3E			lda READWORDBI.RESULT
  1225 8D06 8D BA 3E			sta FORMAT
  1226
  1227 				; optimize OK (loadmid.inc), line = 60
  1228
  1229 8D09 F0 0C			jeq l_02DD
  1230 8D0B C9 01			cmp #$01
  1231 8D0D F0 08			jeq l_02DD
  1232
  1233 				; optimize OK (loadmid.inc), line = 62
  1234
  1235 8D0F A9 64			lda #$64
  1236 8D11 8D 87 3E			sta SYSTEM.IORESULT
  1237 8D14 4C 7F 8E			jmp b_02A2					; break
  1238 8D17			l_02DD
  1239
  1240 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 65
  1241
  1242 8D17 20 41 8B			jsr READWORDBI
  1243 8D1A AD F0 3E			lda READWORDBI.RESULT
  1244 8D1D 8D BB 3E			sta TOTALTRACKS
  1245
  1246 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 66
  1247
  1248 8D20 20 41 8B			jsr READWORDBI
  1249 8D23 AD F0 3E			lda READWORDBI.RESULT
  1250 8D26 8D E2 3E			sta V
  1251 8D29 AD F1 3E			lda READWORDBI.RESULT+1
  1252 8D2C 8D E3 3E			sta V+1
  1253
  1254 				; optimize OK (loadmid.inc), line = 67
  1255
  1256 8D2F 30 0C			jmi l_0301
  1257
  1258 				; optimize OK (loadmid.inc), line = 68
  1259
  1260 8D31 AD E2 3E			lda V
  1261 8D34 8D BC 3E			sta TICKDIV
  1262 8D37 AD E3 3E			lda V+1
  1263 8D3A 8D BD 3E			sta TICKDIV+1
  1264 8D3D			l_0301
  1265 8D3D 4C 6D 8E			jmp l_0312
  1266 8D40			l_02BA
  1267
  1268 				; optimize OK (loadmid.inc), line = 83
  1269
  1270 8D40 AD E1 3E			lda CHUNKTAG+3
  1271 8D43 49 6B			eor #$6B
  1272 8D45 F0 03 4C 68 8E		jne l_0322
  1273 8D4A AD E0 3E			lda CHUNKTAG+2
  1274 8D4D 49 72			eor #$72
  1275 8D4F F0 03 4C 68 8E		jne l_0322
  1276 8D54 AD DF 3E			lda CHUNKTAG+1
  1277 8D57 49 54			eor #$54
  1278 8D59 F0 03 4C 68 8E		jne l_0322
  1279 8D5E AD DE 3E			lda CHUNKTAG
  1280 8D61 49 4D			eor #$4D
  1281 8D63 F0 03 4C 68 8E		jne l_0322
  1282
  1283 				; optimize FAIL (0, loadmid.inc), line = 85
  1284
  1285 8D68 EE DD 3E			inc TRACKCOUNT
  1286
  1287 				; optimize OK (loadmid.inc), line = 87
  1288
  1289 8D6B AC EE 3E 84 82 AC + 	mwy TRKDATA :bp2
  1290 8D75 A0 00			ldy #$00
  1291 8D77 98				tya
  1292 8D78 91 82			sta (:bp2),y
  1293
  1294 				; optimize OK (loadmid.inc), line = 88
  1295
  1296 8D7A A0 04			ldy #$04
  1297 8D7C 91 82			sta (:bp2),y
  1298 8D7E C8				iny
  1299 8D7F 91 82			sta (:bp2),y
  1300 8D81 C8				iny
  1301 8D82 91 82			sta (:bp2),y
  1302 8D84 C8				iny
  1303 8D85 91 82			sta (:bp2),y
  1304
  1305 				; optimize OK (loadmid.inc), line = 89
  1306
  1307 8D87 A0 01			ldy #$01
  1308 8D89 A5 E1			lda _BANK
  1309 8D8B 91 82			sta (:bp2),y
  1310
  1311 				; optimize OK (loadmid.inc), line = 90
  1312
  1313 8D8D C8				iny
  1314 8D8E A5 E2			lda _ADR
  1315 8D90 91 82			sta (:bp2),y
  1316 8D92 C8				iny
  1317 8D93 A5 E3			lda _ADR+1
  1318 8D95 91 82			sta (:bp2),y
  1319
  1320 				; -------------------  ASM Block 00000071  -------------------
  1321
  1322 				 ldy _bank \ lda $100,y \ sta PORTB 
  1322 8D97 A4 E1		 LDY _BANK 
  1322 8D99 B9 00 01		 LDA $100,Y 
  1322 8D9C 8D 01 D3		 STA PORTB 
  1323 				; --- WhileProlog
  1324 8D9F 4C 44 8E			jmp l_033C
  1325 8DA2			l_033D
  1326
  1327 				; optimize FAIL (':TMP', loadmid.inc), line = 96
  1328
  1329 8DA2 AD D4 3E			lda LOADPROCESS
  1330 8DA5 85 91			sta :TMP+1
  1331 8DA7 AD D5 3E			lda LOADPROCESS+1
  1332 8DAA 85 92			sta :TMP+2
  1333 8DAC A9 4C			lda #$4C
  1334 8DAE 85 90			sta :TMP
  1335 8DB0 E8				inx
  1336 8DB1 AD DD 3E 95 94		mva TRACKCOUNT :STACKORIGIN,x
  1337 8DB6 20 90 00			jsr :TMP
  1338
  1339 				; optimize FAIL ('CHECKLOADSIZE', loadmid.inc), line = 97
  1340
  1341 8DB9 20 B1 8B			jsr CHECKLOADSIZE
  1342
  1343 				; optimize OK (loadmid.inc), line = 98
  1344
  1345 8DBC AD 87 3E			lda SYSTEM.IORESULT
  1346 8DBF C9 01			cmp #$01
  1347 8DC1 F0 03			jeq l_0354
  1348 8DC3 4C 57 8E			jmp b_033D					; break
  1349 8DC6			l_0354
  1350
  1351 				; optimize OK (loadmid.inc), line = 100
  1352
  1353 8DC6 A5 E3			lda _ADR+1
  1354 8DC8 C9 C0			cmp #$C0
  1355 8DCA 90 2F			jcc l_0368
  1356
  1357 				; optimize OK (loadmid.inc), line = 102
  1358
  1359 8DCC A9 00			lda #$00
  1360 8DCE 8D F6 3E			sta _BGET.DEST
  1361 8DD1 A9 40			lda #$40
  1362 8DD3 8D F7 3E			sta _BGET.DEST+1
  1363 8DD6 20 95 8B			jsr _BGET
  1364
  1365 				; optimize OK (loadmid.inc), line = 103
  1366
  1367 8DD9 AD 8B 8E			lda RBUF
  1368 8DDC 85 88			sta SYSTEM.MOVE_0153.SOURCE
  1369 8DDE AD 8C 8E			lda RBUF+1
  1370 8DE1 85 89			sta SYSTEM.MOVE_0153.SOURCE+1
  1371 8DE3 A5 E2			lda _PTR
  1372 8DE5 85 8C			sta SYSTEM.MOVE_0153.DEST
  1373 8DE7 A5 E3			lda _PTR+1
  1374 8DE9 85 8D			sta SYSTEM.MOVE_0153.DEST+1
  1375 8DEB AD E8 3E			lda LOADSIZE
  1376 8DEE 85 84			sta SYSTEM.MOVE_0153.COUNT
  1377 8DF0 AD E9 3E			lda LOADSIZE+1
  1378 8DF3 85 85			sta SYSTEM.MOVE_0153.COUNT+1
  1379 8DF5				.local +MAIN.SYSTEM.MOVE_0153
  1380 8DF5				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0153.M@INLINE [Source: MIDICar Player.a65]
     4 8DF5 20 CF 82			jsr @move
Source: MIDICar Player.a65
  1381 					.endl
  1382 8DF8 4C 08 8E			jmp l_037B
  1383 8DFB			l_0368
  1384
  1385 				; optimize OK (loadmid.inc), line = 106
  1386
  1387 8DFB A5 E2			lda _PTR
  1388 8DFD 8D F6 3E			sta _BGET.DEST
  1389 8E00 A5 E3			lda _PTR+1
  1390 8E02 8D F7 3E			sta _BGET.DEST+1
  1391 8E05 20 95 8B			jsr _BGET
  1392 8E08			l_037B
  1393
  1394 				; optimize OK (loadmid.inc), line = 108
  1395
  1396 8E08 AD 87 3E			lda SYSTEM.IORESULT
  1397 8E0B C9 01			cmp #$01
  1398 8E0D F0 03			jeq l_0390
  1399 8E0F 4C 57 8E			jmp b_033D					; break
  1400 8E12			l_0390
  1401
  1402 				; optimize OK (loadmid.inc), line = 110
  1403
  1404 8E12 A5 E2			lda _ADR
  1405 8E14 18 6D E8 3E			add LOADSIZE
  1406 8E18 85 E2			sta _ADR
  1407 8E1A A5 E3			lda _ADR+1
  1408 8E1C 6D E9 3E			adc LOADSIZE+1
  1409 8E1F 85 E3			sta _ADR+1
  1410
  1411 				; optimize OK (loadmid.inc), line = 111
  1412
  1413 8E21 AD EA 3E			lda LEN
  1414 8E24 38 ED E8 3E			sub LOADSIZE
  1415 8E28 8D EA 3E			sta LEN
  1416 8E2B AD EB 3E			lda LEN+1
  1417 8E2E ED E9 3E			sbc LOADSIZE+1
  1418 8E31 8D EB 3E			sta LEN+1
  1419 8E34 AD EC 3E			lda LEN+2
  1420 8E37 E9 00			sbc #$00
  1421 8E39 8D EC 3E			sta LEN+2
  1422 8E3C AD ED 3E			lda LEN+3
  1423 8E3F E9 00			sbc #$00
  1424 8E41 8D ED 3E			sta LEN+3
  1425 8E44			l_033C
  1426
  1427 				; optimize OK (loadmid.inc), line = 94
  1428
  1429 8E44 AD ED 3E			lda LEN+3
  1430 8E47 30 0E			bmi @+
  1431 8E49 0D EC 3E			ora LEN+2
  1432 8E4C 0D EB 3E			ora LEN+1
  1433 8E4F 0D EA 3E			ora LEN
  1434 8E52 F0 03 4C A2 8D		jne l_033D
  1435 				@
  1436 8E57			b_033D
  1437
  1438 				; optimize OK (loadmid.inc), line = 113
  1439
  1440 8E57 AD EE 3E			lda TRKDATA
  1441 8E5A 18 69 09			add #$09
  1442 8E5D 8D EE 3E			sta TRKDATA
  1443 8E60 90 03			scc
  1444 8E62 EE EF 3E			inc TRKDATA+1
  1445 8E65 4C 6D 8E			jmp l_03AB
  1446 8E68			l_0322
  1447
  1448 				; optimize OK (loadmid.inc), line = 115
  1449
  1450 8E68 A9 66			lda #$66
  1451 8E6A 8D 87 3E			sta SYSTEM.IORESULT
  1452 8E6D			l_03AB
  1453 8E6D			l_0312
  1454 8E6D			l_02A1
  1455
  1456 				; optimize OK (loadmid.inc), line = 53
  1457
  1458 8E6D AD 87 3E			lda SYSTEM.IORESULT
  1459 8E70 C9 01			cmp #$01
  1460 8E72 D0 0B			jne l_02A2w
  1461 8E74 AD DD 3E			lda TRACKCOUNT
  1462 8E77 CD BB 3E			cmp TOTALTRACKS
  1463 8E7A B0 03 4C B2 8C		jcc l_02A2
  1464 8E7F			l_02A2w
  1465 8E7F			b_02A2
  1466
  1467 				; optimize OK (loadmid.inc), line = 117
  1468
  1469 8E7F AD 87 3E			lda SYSTEM.IORESULT
  1470 8E82 8D DC 3E			sta RESULT
  1471
  1472 				; optimize OK (loadmid.inc), line = 118
  1473
  1474 8E85 A9 01			lda #$01
  1475 8E87 20 7F 8A			jsr CIO.CLS
  1476 8E8A			@exit
  1477
  1478 				; ------------------------------------------------------------
  1479
  1480 = 3EDA			FN	= DATAORIGIN+$005A
  1481 = 3EDC			RESULT	= DATAORIGIN+$005C
  1482 = 4000			LOADBUF_SIZE	= $4000
  1483 = 0001			CIO_CHN	= $01
  1484 = 3EDD			TRACKCOUNT	= DATAORIGIN+$005D
  1485 = 3EDE			CHUNKTAG	= DATAORIGIN+$005E
  1486 = 3EE2			V	= DATAORIGIN+$0062
  1487 = 3EE4			TOP	= DATAORIGIN+$0064
  1488 = 3EE6			ENDADR	= DATAORIGIN+$0066
  1489 = 3EE8			LOADSIZE	= DATAORIGIN+$0068
  1490 = 3EEA			LEN	= DATAORIGIN+$006A
  1491 = 3EEE			TRKDATA	= DATAORIGIN+$006E
  1492 = 3E80			TRKDATA.STATUS	= DATAORIGIN+$0000
  1493 = 3E81			TRKDATA.BANK	= DATAORIGIN+$0001
  1494 = 3E82			TRKDATA.PTR	= DATAORIGIN+$0002
  1495 = 3E84			TRKDATA.TRACKTIME	= DATAORIGIN+$0004
  1496 = 3E88			TRKDATA._EVENT	= DATAORIGIN+$0008
  1497 = 4000			adr.RBUF	= $4000
  1498 8E8A			.var RBUF	= adr.RBUF .word
  1499
  1500 = 3EDA			@VarData	= FN
  1501 = 0020			@VarDataSize	= 32
  1502
  1503 8E8A 60				rts						; ret
  1504 = 8E8B 00 40		RBUF
  1504 				.endl
  1505
  1506 8E8D			.local	SETTEMPO					; PROCEDURE
  1507
  1508 				; optimize OK (settempo.inc), line = 10
  1509
  1510 8E8D A5 F5			lda _TIMERSTATUS
  1511 8E8F 49 80			eor #$80
  1512 8E91 85 F5			sta _TIMERSTATUS
  1513
  1514 				; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 13
  1515
  1516 8E93 E8				inx
  1517 8E94 AD BE 3E 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  1518 8E99 AD BF 3E 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  1519 8E9E AD C0 3E 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  1520 8EA3 AD C1 3E 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  1521 8EA8 E8				inx
  1522 8EA9 AD D6 3E 95 94		mva TEMPOSHIFT :STACKORIGIN,x
  1523 8EAE AD D7 3E 95 A4		mva TEMPOSHIFT+1 :STACKORIGIN+STACKWIDTH,x
  1524 8EB3 AD D8 3E 95 B4		mva TEMPOSHIFT+2 :STACKORIGIN+STACKWIDTH*2,x
  1525 8EB8 AD D9 3E 95 C4		mva TEMPOSHIFT+3 :STACKORIGIN+STACKWIDTH*3,x
  1526 8EBD 20 13 82			jsr addEAX_ECX
  1527 8EC0 AD BC 3E 95 94		mva TICKDIV :STACKORIGIN,x
  1528 8EC5 AD BD 3E 95 A4		mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
  1529 8ECA A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1530 8ECE A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1531 8ED2 20 8E 83			jsr divmulINT.DIV
  1532 8ED5 CA				dex
  1533 8ED6 B5 94			lda :STACKORIGIN,x
  1534 8ED8 8D FC 3E			sta _FREQ
  1535 8EDB B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1536 8EDD 8D FD 3E			sta _FREQ+1
  1537 8EE0 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1538 8EE2 8D FE 3E			sta _FREQ+2
  1539 8EE5 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1540 8EE7 8D FF 3E			sta _FREQ+3
  1541
  1542 				; optimize FAIL ('@I2F_m', settempo.inc), line = 14
  1543
  1544 8EEA AD FC 3E 95 94		mva _FREQ :STACKORIGIN,x
  1545 8EEF AD FD 3E 95 A4		mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1546 8EF4 AD FE 3E 95 B4		mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1547 8EF9 AD FF 3E 95 C4		mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1548 8EFE E8				inx
  1549 8EFF A9 00 95 94			mva #$00 :STACKORIGIN,x
  1550 8F03 A9 24 95 A4			mva #$24 :STACKORIGIN+STACKWIDTH,x
  1551 8F07 A9 74 95 B4			mva #$74 :STACKORIGIN+STACKWIDTH*2,x
  1552 8F0B A9 49 95 C4			mva #$49 :STACKORIGIN+STACKWIDTH*3,x
  1553 8F0F 20 AE 88			jsr @I2F_m
  1554 8F12 20 70 87			jsr @FDIV
  1555 8F15 CA				dex
  1556 8F16 B5 94			lda :STACKORIGIN,x
  1557 8F18 8D F8 3E			sta FREQ
  1558 8F1B B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1559 8F1D 8D F9 3E			sta FREQ+1
  1560 8F20 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1561 8F22 8D FA 3E			sta FREQ+2
  1562 8F25 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1563 8F27 8D FB 3E			sta FREQ+3
  1564
  1565 				; optimize FAIL ('@FDIV', settempo.inc), line = 15
  1566
  1567 8F2A A9 00 95 94			mva #$00 :STACKORIGIN,x
  1568 8F2E A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1569 8F32 A9 80 95 B4			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  1570 8F36 A9 3F 95 C4			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  1571 8F3A E8				inx
  1572 8F3B AD F8 3E 95 94		mva FREQ :STACKORIGIN,x
  1573 8F40 AD F9 3E 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1574 8F45 AD FA 3E 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1575 8F4A AD FB 3E 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1576 8F4F 20 70 87			jsr @FDIV
  1577 8F52 CA				dex
  1578 8F53 B5 94			lda :STACKORIGIN,x
  1579 8F55 8D F8 3E			sta FREQ
  1580 8F58 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1581 8F5A 8D F9 3E			sta FREQ+1
  1582 8F5D B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1583 8F5F 8D FA 3E			sta FREQ+2
  1584 8F62 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1585 8F64 8D FB 3E			sta FREQ+3
  1586
  1587 				; optimize FAIL ('@FDIV', settempo.inc), line = 24
  1588
  1589 8F67 A9 F5 95 94			mva #$F5 :STACKORIGIN,x
  1590 8F6B A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1591 8F6F A9 7A 95 B4			mva #$7A :STACKORIGIN+STACKWIDTH*2,x
  1592 8F73 A9 43 95 C4			mva #$43 :STACKORIGIN+STACKWIDTH*3,x
  1593 8F77 E8				inx
  1594 8F78 AD F8 3E 95 94		mva FREQ :STACKORIGIN,x
  1595 8F7D AD F9 3E 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1596 8F82 AD FA 3E 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1597 8F87 AD FB 3E 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1598 8F8C 20 70 87			jsr @FDIV
  1599 8F8F CA				dex
  1600 8F90 B5 94			lda :STACKORIGIN,x
  1601 8F92 8D 01 3F			sta RATIO
  1602 8F95 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1603 8F97 8D 02 3F			sta RATIO+1
  1604 8F9A B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1605 8F9C 8D 03 3F			sta RATIO+2
  1606 8F9F B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1607 8FA1 8D 04 3F			sta RATIO+3
  1608
  1609 				; optimize FAIL ('@F2I', settempo.inc), line = 25
  1610
  1611 8FA4 A9 01 95 94			mva #$01 :STACKORIGIN,x
  1612 8FA8 E8				inx
  1613 8FA9 AD 01 3F 95 94		mva RATIO :STACKORIGIN,x
  1614 8FAE AD 02 3F 95 A4		mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
  1615 8FB3 AD 03 3F 95 B4		mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
  1616 8FB8 AD 04 3F 95 C4		mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
  1617 8FBD 20 FF 87			jsr @F2I
  1618 8FC0 A9 00 95 A3			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  1619 8FC4 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1620 8FC8 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1621 8FCC B5 93			lda :STACKORIGIN-1,x
  1622 8FCE 18 75 94			add :STACKORIGIN,x
  1623 8FD1 8D 05 3F			sta _RATIO
  1624 8FD4 CA				dex
  1625 8FD5 CA				dex
  1626
  1627 				; optimize OK (settempo.inc), line = 26
  1628
  1629 8FD6 AD 05 3F			lda _RATIO
  1630 8FD9 C9 10			cmp #$10
  1631 8FDB 90 12			jcc l_0429
  1632 8FDD A9 00			lda #$00
  1633 8FDF 8D 01 3F			sta RATIO
  1634 8FE2 8D 02 3F			sta RATIO+1
  1635 8FE5 A9 70			lda #$70
  1636 8FE7 8D 03 3F			sta RATIO+2
  1637 8FEA A9 41			lda #$41
  1638 8FEC 8D 04 3F			sta RATIO+3
  1639 8FEF			l_0429
  1640
  1641 				; optimize OK (settempo.inc), line = 29
  1642
  1643 8FEF A5 F5			lda _TIMERSTATUS
  1644 8FF1 29 C0			and #$C0
  1645 8FF3 0D 05 3F			ora _RATIO
  1646 8FF6 85 F5			sta _TIMERSTATUS
  1647
  1648 				; optimize OK (settempo.inc), line = 30
  1649
  1650 8FF8 A9 01			lda #$01
  1651 8FFA 85 F4			sta _SUBCNT
  1652
  1653 				; optimize FAIL ('@I2F', settempo.inc), line = 32
  1654
  1655 8FFC E8				inx
  1656 8FFD A9 00 95 94			mva #$00 :STACKORIGIN,x
  1657 9001 A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1658 9005 E8				inx
  1659 9006 AD F8 3E 95 94		mva FREQ :STACKORIGIN,x
  1660 900B AD F9 3E 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1661 9010 AD FA 3E 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1662 9015 AD FB 3E 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1663 901A E8				inx
  1664 901B AD 05 3F 95 94		mva _RATIO :STACKORIGIN,x
  1665 9020 A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1666 9024 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1667 9028 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1668 902C 20 89 88			jsr @I2F
  1669 902F 20 B9 86			jsr @FMUL
  1670 9032 CA				dex
  1671 9033 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1672 9037 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1673 903B 20 AE 88			jsr @I2F_m
  1674 903E 20 70 87			jsr @FDIV
  1675 9041 CA				dex
  1676 9042 20 D9 84			jsr @FROUND
  1677 9045 20 FF 87			jsr @F2I
  1678 9048 B5 94			lda :STACKORIGIN,x
  1679 904A 8D 00 3F			sta FDIV
  1680 904D CA				dex
  1681
  1682 				; optimize OK (settempo.inc), line = 39
  1683
  1684 904E A5 F5			lda _TIMERSTATUS
  1685 9050 49 80			eor #$80
  1686 9052 85 F5			sta _TIMERSTATUS
  1687
  1688 				; -------------------  ASM Block 00000072  -------------------
  1689
  1690 9054 78			    sei  // disable IRQ
  1691 				  // reset POKEY
  1692 9055 A9 00		    lda #$00
  1693 9057 A0 03		    ldy #$03
  1694 9059 8D 08 D2		    sta AUDCTL
  1695 905C 8D 01 D2		    sta AUDC1
  1696 905F 8C 0F D2		    sty SKCTL
  1697 				  // setup TIMER1
  1698 9062 8D 08 D2		    sta AUDCTL
  1699 9065 AD 00 3F 8D 00 D2	    mva FDIV AUDF1
  1700 				  // initialize IRQ for TIMER1
  1701 				    // lda irqens
  1702 				    // ora #$01
  1703 				    // sta irqens
  1704 				    // sta irqen
  1705 				  // start timer strobe
  1706 906B 8D 09 D2		    sta stimer
  1707
  1708 906E 58			    cli  // enable IRQ
  1709 				  
  1710 				; ------------------------------------------------------------
  1711
  1712 = 3EF8			FREQ	= DATAORIGIN+$0078
  1713 = 3EFC			_FREQ	= DATAORIGIN+$007C
  1714 = 3F00			FDIV	= DATAORIGIN+$0080
  1715 = 3F01			RATIO	= DATAORIGIN+$0081
  1716 = 3F05			_RATIO	= DATAORIGIN+$0085
  1717
  1718 = 3EF8			@VarData	= FREQ
  1719 = 000E			@VarDataSize	= 14
  1720
  1721 906F			@exit
  1722 					.ifdef @new
  1723 					lda <@VarData
  1724 					sta :ztmp
  1725 					lda >@VarData
  1726 					ldy #@VarDataSize-1
  1727 					jmp @FreeMem
  1728 					els
  1729 906F 60				rts						; ret
  1730 					eif
  1731 				.endl
  1732
  1733 9070			.local	PROCESSTRACK					; PROCEDURE | KEEP
  1734
  1735 9070 4C 2D 92			jmp l_0463
  1736
  1737 9073			.local	READB						; PROCEDURE | INLINE
  1738
  1739 					.MACRO m@INLINE
  1740 				
  1741 				; optimize OK (processtrack.inc), line = 11
  1742 				
  1743 					ldy #$00
  1744 					lda (_PTR),y
  1745 					sta EVENT
  1746 				
  1747 				; optimize FAIL (0, processtrack.inc), line = 12
  1748 				
  1749 					inc _ADR
  1750 					sne
  1751 					inc _ADR+1
  1752 				
  1753 				; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 13
  1754 				
  1755 					jsr MEMBOUNDCHECK
  1756 					.ENDM
  1757 9073			@exit
  1758 				.endl
  1759
  1760 9073			.local	READVARL					; PROCEDURE | ASSEMBLER
  1761
  1762 				; -------------------  ASM Block 00000073  -------------------
  1763
  1764 9073			    icl 'midfile/asms/readvar.asm'
Source: readvar.asm
     1 = 00F6			A equ _delta;
     2 = 00F7			B equ _delta+1;
     3 = 00F8			C equ _delta+2;
     4 = 00F9			D equ _delta+3;
     5
     6 				  .MACRO m@read2A
     7 				    ldy #0
     8 				    lda (_PTR),y
     9 				    sta A
    10 				    inc _ADR
    11 				    sne
    12 				    inc _ADR+1
    13 				    jsr MEMBOUNDCHECK
    14 				    lda A
    15 				  .ENDM
    16
    17 9073 A0 00		  ldy #0
    18 9075 84 F6		  sty A
    19 9077 84 F7		  sty B
    20 9079 84 F8		  sty C
    21 907B 84 F9		  sty D
    22
    23 				// read block
    24
    25 				// read 1st byte to A
    26 907D			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 907D A0 00		    ldy #0
     2 907F B1 E2		    lda (_PTR),y
     3 9081 85 F6		    sta A
     4 9083 E6 E2		    inc _ADR
     5 9085 D0 02		    sne
     6 9087 E6 E3		    inc _ADR+1
     7 9089 20 F5 8A		    jsr MEMBOUNDCHECK
     8 908C A5 F6		    lda A
Source: readvar.asm
    27
    28 908E 10 53		  bpl endRead
    29
    30 				// move A to B and read 2nd byte to A
    31 				// B <- A = 4th readed byte
    32 9090 29 7F			and #$7F
    33 9092 85 F7			sta B
    34
    35 				// read 2nd byte
    36 9094			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 9094 A0 00		    ldy #0
     2 9096 B1 E2		    lda (_PTR),y
     3 9098 85 F6		    sta A
     4 909A E6 E2		    inc _ADR
     5 909C D0 02		    sne
     6 909E E6 E3		    inc _ADR+1
     7 90A0 20 F5 8A		    jsr MEMBOUNDCHECK
     8 90A3 A5 F6		    lda A
Source: readvar.asm
    37
    38 90A5 10 3C		  bpl endRead
    39
    40 				// mova B to C, A to B and read 3rd byte to A
    41 				// C <- B <- A = 4th readed byte
    42 90A7 A5 F7			lda B
    43 90A9 85 F8			sta C
    44 90AB A5 F6			lda A
    45 90AD 29 7F			and #$7F
    46 90AF 85 F7			sta B
    47
    48 				// read 3rd
    49 90B1			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 90B1 A0 00		    ldy #0
     2 90B3 B1 E2		    lda (_PTR),y
     3 90B5 85 F6		    sta A
     4 90B7 E6 E2		    inc _ADR
     5 90B9 D0 02		    sne
     6 90BB E6 E3		    inc _ADR+1
     7 90BD 20 F5 8A		    jsr MEMBOUNDCHECK
     8 90C0 A5 F6		    lda A
Source: readvar.asm
    50
    51 90C2 10 1F		  bpl endRead
    52
    53 				// move C to D, B to C, A to B and read 4th byte to A
    54 				// D <- C <- B <- A = 4th readed byte
    55 90C4 A5 F8			lda C
    56 90C6 85 F9			sta D
    57 90C8 A5 F7			lda B
    58 90CA 85 F8			sta C
    59 90CC A5 F6			lda A
    60 90CE 29 7F			and #$7F
    61 90D0 85 F7			sta B
    62
    63 				// read 4th
    64 90D2			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 90D2 A0 00		    ldy #0
     2 90D4 B1 E2		    lda (_PTR),y
     3 90D6 85 F6		    sta A
     4 90D8 E6 E2		    inc _ADR
     5 90DA D0 02		    sne
     6 90DC E6 E3		    inc _ADR+1
     7 90DE 20 F5 8A		    jsr MEMBOUNDCHECK
     8 90E1 A5 F6		    lda A
Source: readvar.asm
    65
    66 				// end read block
    67 90E3			endRead:
    68
    69 				// decode block
    70 				// 'A' stays as it is
    71
    72 				// 'B' if geather than zero, lets decode
    73 90E3 A5 F7		  lda B
    74 90E5 F0 0A		  beq decodeC
    75
    76 				// 76543210
    77 				// 0bbbbbbb and %1
    78 				// 0000000b
    79 				//        |
    80 				// +------+ 7:asl
    81 				// v
    82 				// b0000000 ora A
    83 				// baaaaaaa
    84
    85 90E7 46 F7		  lsr B
    86 90E9 90 06		  bcc decodeC
    87
    88 90EB A5 F6		  lda A
    89 90ED 09 80		  ora #$80
    90 90EF 85 F6		  sta A
    91
    92 90F1			decodeC:
    93 				// 'C' if geather than zero, lets decode
    94 90F1 A5 F8		  lda C
    95 90F3 F0 12		  beq decodeD
    96
    97 				// 76543210
    98 				// 0ccccccc and %11
    99 				// 000000cc
   100 				//       ||
   101 				// +-----+| 6:asl
   102 				// |+-----+
   103 				// vv
   104 				// cc000000 ora B
   105 				// ccbbbbbb
   106 90F5 29 03		  and #%11    // 2
   107 90F7 F0 08		  beq noOrC   // 2**
   108 90F9 A8			  tay         // 2
   109 90FA B9 1F 91		  lda OrC,y   // 4*
   110 90FD 05 F7		  ora B       // 3
   111 90FF 85 F7		  sta B       // 3
   112
   113 9101			noOrC:
   114 9101 A5 F8		  lda C       // 3
   115 9103 4A			  lsr @       // 2
   116 9104 4A			  lsr @       // 2
   117 9105 85 F8		  sta C       // 3
   118 				              //=26*+**
   119
   120 9107			decodeD:
   121 				// 'D' if geather than zero, lets decode
   122 9107 A5 F9		  lda D
   123 9109 F0 13		  beq endDecode
   124
   125 				// 76543210
   126 				// 0ddddddd and %111
   127 				// 00000ddd
   128 				//      |||
   129 				// +----+||
   130 				// |+----+| 5:asl
   131 				// ||+----+
   132 				// vvv
   133 				// ddd00000 ora C
   134 				// dddccccc
   135
   136 910B 29 07		  and #%111   // 2
   137 910D F0 08		  beq noOrD   // 2**
   138 910F A8			  tay         // 2
   139 9110 B9 23 91		  lda OrD,y   // 4*
   140 9113 05 F8		  ora C       // 3
   141 9115 85 F8		  sta C       // 3
   142
   143 9117			noOrD:
   144 9117 A5 F9		  lda D       // 3
   145 9119 4A			  lsr @       // 2
   146 911A 4A			  lsr @       // 2
   147 911B 4A			  lsr @       // 2
   148 911C 85 F9		  sta D       // 3
   149 				              //=28*+**
   150 911E			endDecode:
   151 911E 60			  rts
   152
   153 911F			OrC:
   154 911F 00			  dta %00000000
   155 9120 40			  dta %01000000
   156 9121 80			  dta %10000000
   157 9122 C0			  dta %11000000
   158
   159 9123			OrD:
   160 9123 00			  dta %00000000
   161 9124 20			  dta %00100000
   162 9125 40			  dta %01000000
   163 9126 60			  dta %01100000
   164 9127 80			  dta %10000000
   165 9128 A0			  dta %10100000
   166 9129 C0			  dta %11000000
   167 912A E0			  dta %11100000
  1765 				  
  1766 912B			@exit
  1767 					.ifdef @new
  1768 					lda <@VarData
  1769 					sta :ztmp
  1770 					lda >@VarData
  1771 					ldy #@VarDataSize-1
  1772 					jmp @FreeMem
  1773 					els
  1774 912B 60				rts						; ret
  1775 					eif
  1776 				.endl
  1777
  1778 912C			.local	READ24						; PROCEDURE | ASSEMBLER
  1779
  1780 				; -------------------  ASM Block 00000074  -------------------
  1781
  1782 912C			    icl 'midfile/asms/read24bigendian.pas'
Source: read24bigendian.pas
     1 				  .MACRO m@readByte storeTo
     2 				    ldy #0
     3 				    lda (_PTR),y
     4 				    sta :storeTo
     5 				    inc _ADR
     6 				    sne
     7 				    inc _ADR+1
     8 				    jsr MEMBOUNDCHECK
     9 				  .ENDM
    10
    11 912C			  m@readByte _delta+2
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 912C A0 00		    ldy #0
     2 912E B1 E2		    lda (_PTR),y
     3 9130 85 F8		    sta _DELTA+2
     4 9132 E6 E2		    inc _ADR
     5 9134 D0 02		    sne
     6 9136 E6 E3		    inc _ADR+1
     7 9138 20 F5 8A		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    12 913B			  m@readByte _delta+1
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 913B A0 00		    ldy #0
     2 913D B1 E2		    lda (_PTR),y
     3 913F 85 F7		    sta _DELTA+1
     4 9141 E6 E2		    inc _ADR
     5 9143 D0 02		    sne
     6 9145 E6 E3		    inc _ADR+1
     7 9147 20 F5 8A		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    13 914A			  m@readByte _delta+0
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 914A A0 00		    ldy #0
     2 914C B1 E2		    lda (_PTR),y
     3 914E 85 F6		    sta _DELTA+0
     4 9150 E6 E2		    inc _ADR
     5 9152 D0 02		    sne
     6 9154 E6 E3		    inc _ADR+1
     7 9156 20 F5 8A		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    14 9159 A9 00		  lda #0
    15 915B 85 F9		  sta _delta+3
  1783 				  
  1784 915D			@exit
  1785 					.ifdef @new
  1786 					lda <@VarData
  1787 					sta :ztmp
  1788 					lda >@VarData
  1789 					ldy #@VarDataSize-1
  1790 					jmp @FreeMem
  1791 					els
  1792 915D 60				rts						; ret
  1793 					eif
  1794 				.endl
  1795
  1796 915E			.local	EVENTMIDI3					; PROCEDURE
  1797
  1798 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 4
  1799
  1800 915E 20 0A 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1801
  1802 				; optimize FAIL ('m@INLINE', events.inc), line = 5
  1803
  1804 9161				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1805 9161				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9161 A0 00			ldy #$00
     5 9163 B1 E2			lda (_PTR),y
     6 9165 85 FF			sta EVENT
    10 9167 E6 E2			inc _ADR
    11 9169 D0 02			sne
    12 916B E6 E3			inc _ADR+1
    16 916D 20 F5 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1806 					.endl
  1807 9170 20 0A 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1808
  1809 				; optimize FAIL ('m@INLINE', events.inc), line = 6
  1810
  1811 9173				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1812 9173				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9173 A0 00			ldy #$00
     5 9175 B1 E2			lda (_PTR),y
     6 9177 85 FF			sta EVENT
    10 9179 E6 E2			inc _ADR
    11 917B D0 02			sne
    12 917D E6 E3			inc _ADR+1
    16 917F 20 F5 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1813 					.endl
  1814 9182 20 0A 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1815
  1816 				; optimize OK (events.inc), line = 15
  1817
  1818 9185 A5 FF			lda EVENT
  1819 9187 F0 12			jeq l_049E
  1820 9189 A5 E8			lda _EVENT
  1821 918B 29 F0			and #$F0
  1822 918D C9 90			cmp #$90
  1823 918F D0 0A			jne l_049E
  1824
  1825 				; optimize OK (events.inc), line = 16
  1826
  1827 9191 A5 E8			lda _EVENT
  1828 9193 29 0F			and #$0F
  1829 9195 A8				tay
  1830 9196 A5 FF			lda MC6850.MC_BYTE
  1831 9198 99 C2 3E			sta adr.CHNVOLUME,y
  1832 919B			l_049E
  1833 919B			@exit
  1834 					.ifdef @new
  1835 					lda <@VarData
  1836 					sta :ztmp
  1837 					lda >@VarData
  1838 					ldy #@VarDataSize-1
  1839 					jmp @FreeMem
  1840 					els
  1841 919B 60				rts						; ret
  1842 					eif
  1843 				.endl
  1844
  1845 919C			.local	EVENTMIDI2					; PROCEDURE
  1846
  1847 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 22
  1848
  1849 919C 20 0A 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1850
  1851 				; optimize FAIL ('m@INLINE', events.inc), line = 23
  1852
  1853 919F				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1854 919F				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 919F A0 00			ldy #$00
     5 91A1 B1 E2			lda (_PTR),y
     6 91A3 85 FF			sta EVENT
    10 91A5 E6 E2			inc _ADR
    11 91A7 D0 02			sne
    12 91A9 E6 E3			inc _ADR+1
    16 91AB 20 F5 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1855 					.endl
  1856 91AE 20 0A 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1857 91B1			@exit
  1858 					.ifdef @new
  1859 					lda <@VarData
  1860 					sta :ztmp
  1861 					lda >@VarData
  1862 					ldy #@VarDataSize-1
  1863 					jmp @FreeMem
  1864 					els
  1865 91B1 60				rts						; ret
  1866 					eif
  1867 				.endl
  1868
  1869 91B2			.local	EVENTSYSEX					; PROCEDURE
  1870
  1871 				; optimize FAIL ('READVARL', events.inc), line = 32
  1872
  1873 91B2 20 73 90			jsr READVARL
  1874
  1875 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 34
  1876
  1877 91B5 20 0A 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1878
  1879 				; --- WhileProlog
  1880 91B8 4C CF 91			jmp l_04BD
  1881 91BB			l_04BE
  1882
  1883 				; optimize FAIL ('m@INLINE', events.inc), line = 40
  1884
  1885 91BB				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1886 91BB				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 91BB A0 00			ldy #$00
     5 91BD B1 E2			lda (_PTR),y
     6 91BF 85 FF			sta EVENT
    10 91C1 E6 E2			inc _ADR
    11 91C3 D0 02			sne
    12 91C5 E6 E3			inc _ADR+1
    16 91C7 20 F5 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1887 					.endl
  1888
  1889 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 42
  1890
  1891 91CA 20 0A 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1892
  1893 				; optimize FAIL (0, events.inc), line = 46
  1894
  1895 91CD C6 F6			dec _TMP
  1896 91CF			l_04BD
  1897
  1898 				; optimize OK (events.inc), line = 38
  1899
  1900 91CF A5 F6			lda _TMP
  1901 91D1 D0 E8			jne l_04BE
  1902 91D3			@exit
  1903 					.ifdef @new
  1904 					lda <@VarData
  1905 					sta :ztmp
  1906 					lda >@VarData
  1907 					ldy #@VarDataSize-1
  1908 					jmp @FreeMem
  1909 					els
  1910 91D3 60				rts						; ret
  1911 					eif
  1912 				.endl
  1913
  1914 91D4			.local	EVENTMETA					; PROCEDURE
  1915
  1916 				; optimize FAIL ('m@INLINE', events.inc), line = 58
  1917
  1918 91D4				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1919 91D4				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 91D4 A0 00			ldy #$00
     5 91D6 B1 E2			lda (_PTR),y
     6 91D8 85 FF			sta EVENT
    10 91DA E6 E2			inc _ADR
    11 91DC D0 02			sne
    12 91DE E6 E3			inc _ADR+1
    16 91E0 20 F5 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1920 					.endl
  1921
  1922 				; optimize FAIL ('READVARL', events.inc), line = 59
  1923
  1924 91E3 20 73 90			jsr READVARL
  1925
  1926 				; optimize OK (events.inc), line = 61
  1927
  1928 91E6 A5 FF			lda EVENT
  1929 91E8 C9 2F			cmp #$2F
  1930 91EA D0 0B			jne l_04E8
  1931
  1932 				; optimize FAIL (0, events.inc), line = 63
  1933
  1934 91EC C6 DF			dec PLAYINGTRACKS
  1935
  1936 				; optimize OK (events.inc), line = 64
  1937
  1938 91EE A5 E0			lda _STATUS
  1939 91F0 09 40			ora #$40
  1940 91F2 85 E0			sta _STATUS
  1941 91F4 4C 2C 92			jmp l_0500
  1942 91F7			l_04E8
  1943
  1944 				; optimize OK (events.inc), line = 66
  1945
  1946 91F7 A5 FF			lda EVENT
  1947 91F9 C9 51			cmp #$51
  1948 91FB D0 1D			jne l_0512
  1949
  1950 				; optimize FAIL ('READ24', events.inc), line = 68
  1951
  1952 91FD 20 2C 91			jsr READ24
  1953
  1954 				; optimize OK (events.inc), line = 69
  1955
  1956 9200 A5 F6			lda _DELTA
  1957 9202 8D BE 3E			sta MS_PER_QNOTE
  1958 9205 A5 F7			lda _DELTA+1
  1959 9207 8D BF 3E			sta MS_PER_QNOTE+1
  1960 920A A5 F8			lda _DELTA+2
  1961 920C 8D C0 3E			sta MS_PER_QNOTE+2
  1962 920F A5 F9			lda _DELTA+3
  1963 9211 8D C1 3E			sta MS_PER_QNOTE+3
  1964
  1965 				; optimize FAIL ('SETTEMPO', events.inc), line = 70
  1966
  1967 9214 20 8D 8E			jsr SETTEMPO
  1968 9217 4C 2C 92			jmp l_0522
  1969 921A			l_0512
  1970
  1971 				; --- WhileProlog
  1972 921A 4C 28 92			jmp l_0524
  1973 921D			l_0525
  1974
  1975 				; optimize FAIL (0, events.inc), line = 85
  1976
  1977 921D C6 F6			dec _TMP
  1978
  1979 				; optimize FAIL (0, events.inc), line = 86
  1980
  1981 921F E6 E2			inc _ADR
  1982 9221 D0 02			sne
  1983 9223 E6 E3			inc _ADR+1
  1984
  1985 				; optimize FAIL ('MEMBOUNDCHECK', events.inc), line = 87
  1986
  1987 9225 20 F5 8A			jsr MEMBOUNDCHECK
  1988 9228			l_0524
  1989
  1990 				; optimize OK (events.inc), line = 83
  1991
  1992 9228 A5 F6			lda _TMP
  1993 922A D0 F1			jne l_0525
  1994 922C			l_0522
  1995 922C			l_0500
  1996 922C			@exit
  1997 					.ifdef @new
  1998 					lda <@VarData
  1999 					sta :ztmp
  2000 					lda >@VarData
  2001 					ldy #@VarDataSize-1
  2002 					jmp @FreeMem
  2003 					els
  2004 922C 60				rts						; ret
  2005 					eif
  2006 				.endl
  2007 922D			l_0463
  2008
  2009 				; -------------------  ASM Block 00000075  -------------------
  2010
  2011 				 ldy _bank \ lda $100,y \ sta PORTB 
  2011 922D A4 E1		 LDY _BANK 
  2011 922F B9 00 01		 LDA $100,Y 
  2011 9232 8D 01 D3		 STA PORTB 
  2012 				; --- RepeatUntilProlog
  2013 9235			l_053C
  2014
  2015 				; optimize OK (processtrack.inc), line = 33
  2016
  2017 9235 A5 E0			lda _STATUS
  2018 9237 30 2E			jmi l_0552
  2019
  2020 				; optimize FAIL ('READVARL', processtrack.inc), line = 35
  2021
  2022 9239 20 73 90			jsr READVARL
  2023
  2024 				; optimize OK (processtrack.inc), line = 36
  2025
  2026 923C A5 F9			lda _DELTA+3
  2027 923E 30 24			jmi l_0564
  2028 9240 05 F8			ora _DELTA+2
  2029 9242 05 F7			ora _DELTA+1
  2030 9244 05 F6			ora _DELTA
  2031 9246 F0 1C			jeq l_0564
  2032
  2033 				; optimize OK (processtrack.inc), line = 38
  2034
  2035 9248 A5 E4			lda _TRACKTIME
  2036 924A 18 65 F6			add _DELTA
  2037 924D 85 E4			sta _TRACKTIME
  2038 924F A5 E5			lda _TRACKTIME+1
  2039 9251 65 F7			adc _DELTA+1
  2040 9253 85 E5			sta _TRACKTIME+1
  2041 9255 A5 E6			lda _TRACKTIME+2
  2042 9257 65 F8			adc _DELTA+2
  2043 9259 85 E6			sta _TRACKTIME+2
  2044 925B A5 E7			lda _TRACKTIME+3
  2045 925D 65 F9			adc _DELTA+3
  2046 925F 85 E7			sta _TRACKTIME+3
  2047 9261 4C CF 92			jmp b_053C					; break
  2048 9264			l_0564
  2049 9264 4C 6D 92			jmp l_0578
  2050 9267			l_0552
  2051
  2052 				; optimize OK (processtrack.inc), line = 43
  2053
  2054 9267 A5 E0			lda _STATUS
  2055 9269 29 7F			and #$7F
  2056 926B 85 E0			sta _STATUS
  2057 926D			l_0578
  2058
  2059 				; optimize OK (processtrack.inc), line = 45
  2060
  2061 926D A0 00			ldy #$00
  2062 926F B1 E2			lda (_PTR),y
  2063 9271 10 16			jpl l_059B
  2064
  2065 				; optimize FAIL ('m@INLINE', processtrack.inc), line = 47
  2066
  2067 9273				.local READB
  2068 9273				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9273 A0 00			ldy #$00
     5 9275 B1 E2			lda (_PTR),y
     6 9277 85 FF			sta EVENT
    10 9279 E6 E2			inc _ADR
    11 927B D0 02			sne
    12 927D E6 E3			inc _ADR+1
    16 927F 20 F5 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2069 					.endl
  2070 9282 A5 FF			lda EVENT
  2071 9284 85 E8			sta _EVENT
  2072 9286 4C 8D 92			jmp l_05AC
  2073 9289			l_059B
  2074
  2075 				; optimize OK (processtrack.inc), line = 50
  2076
  2077 9289 A5 E8			lda _EVENT
  2078 928B 85 FF			sta EVENT
  2079 928D			l_05AC
  2080
  2081 				; optimize OK (processtrack.inc), line = 52
  2082
  2083 928D A9 BF			lda #$BF
  2084 928F C5 E8			cmp _EVENT
  2085 9291 90 06			jcc l_05C4
  2086
  2087 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 54
  2088
  2089 9293 20 5E 91			jsr EVENTMIDI3
  2090 9296 4C C6 92			jmp l_05CF
  2091 9299			l_05C4
  2092 9299 A9 DF			lda #$DF
  2093 929B C5 E8			cmp _EVENT
  2094 929D 90 06			jcc l_05E1
  2095
  2096 				; optimize FAIL ('EVENTMIDI2', processtrack.inc), line = 56
  2097
  2098 929F 20 9C 91			jsr EVENTMIDI2
  2099 92A2 4C C6 92			jmp l_05EC
  2100 92A5			l_05E1
  2101 92A5 A9 EF			lda #$EF
  2102 92A7 C5 E8			cmp _EVENT
  2103 92A9 90 06			jcc l_05FE
  2104
  2105 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 58
  2106
  2107 92AB 20 5E 91			jsr EVENTMIDI3
  2108 92AE 4C C6 92			jmp l_0609
  2109 92B1			l_05FE
  2110 92B1 A9 F7			lda #$F7
  2111 92B3 C5 E8			cmp _EVENT
  2112 92B5 90 06			jcc l_061B
  2113
  2114 				; optimize FAIL ('EVENTSYSEX', processtrack.inc), line = 60
  2115
  2116 92B7 20 B2 91			jsr EVENTSYSEX
  2117 92BA 4C C6 92			jmp l_0626
  2118 92BD			l_061B
  2119 92BD A5 E8			lda _EVENT
  2120 92BF C9 FF			cmp #$FF
  2121 92C1 D0 03			jne l_0638
  2122
  2123 				; optimize FAIL ('EVENTMETA', processtrack.inc), line = 61
  2124
  2125 92C3 20 D4 91			jsr EVENTMETA
  2126 92C6			l_0638
  2127 92C6			l_0626
  2128 92C6			l_0609
  2129 92C6			l_05EC
  2130 92C6			l_05CF
  2131
  2132 				; optimize OK (processtrack.inc), line = 63
  2133
  2134 92C6 A5 E0			lda _STATUS
  2135 92C8 29 40			and #$40
  2136 92CA D0 03 4C 35 92		jeq l_053C
  2137 92CF			b_053C
  2138
  2139 				; optimize OK (processtrack.inc), line = 65
  2140
  2141 92CF A5 E0			lda _STATUS
  2142 92D1 09 80			ora #$80
  2143 92D3 85 E0			sta _STATUS
  2144
  2145 				; ------------------------------------------------------------
  2146
  2147 = 00FF			EVENT	= $FF
  2148 92D5			@exit
  2149 					.ifdef @new
  2150 					lda <@VarData
  2151 					sta :ztmp
  2152 					lda >@VarData
  2153 					ldy #@VarDataSize-1
  2154 					jmp @FreeMem
  2155 					els
  2156 92D5 60				rts						; ret
  2157 					eif
  2158 				.endl
  2159
  2160 92D6			.local	PROCESSMIDI					; PROCEDURE
  2161
  2162 				; optimize FAIL ('MIDI_FIFO.FIFO_PUSHDIRECT2MC6850', processmidi.inc), line = 29
  2163
  2164 92D6 20 F4 89			jsr MIDI_FIFO.FIFO_PUSHDIRECT2MC6850
  2165
  2166 				; optimize OK (processmidi.inc), line = 31
  2167
  2168 92D9 A5 F5			lda _TIMERSTATUS
  2169 92DB 10 03			jpl l_0672
  2170 92DD 4C 57 93			jmp @exit					; exit
  2171 92E0			l_0672
  2172
  2173 				; optimize OK (processmidi.inc), line = 32
  2174
  2175 92E0 A5 DE			lda CTRK
  2176 92E2 CD BB 3E			cmp TOTALTRACKS
  2177 92E5 D0 11			jne l_0689
  2178
  2179 				; optimize OK (processmidi.inc), line = 34
  2180
  2181 92E7 A9 01			lda #$01
  2182 92E9 85 DE			sta CTRK
  2183
  2184 				; optimize OK (processmidi.inc), line = 35
  2185
  2186 92EB AD EE 93			lda MIDTRACKS
  2187 92EE 85 DC			sta CURTRACKPTR
  2188 92F0 AD EF 93			lda MIDTRACKS+1
  2189 92F3 85 DD			sta CURTRACKPTR+1
  2190 92F5 4C 05 93			jmp l_069C
  2191 92F8			l_0689
  2192
  2193 				; optimize FAIL (0, processmidi.inc), line = 39
  2194
  2195 92F8 E6 DE			inc CTRK
  2196
  2197 				; optimize OK (processmidi.inc), line = 40
  2198
  2199 92FA A5 DC			lda CURTRACKPTR
  2200 92FC 18 69 09			add #$09
  2201 92FF 85 DC			sta CURTRACKPTR
  2202 9301 90 02			scc
  2203 9303 E6 DD			inc CURTRACKPTR+1
  2204 9305			l_069C
  2205
  2206 				; -------------------  ASM Block 00000076  -------------------
  2207
  2208 				// if _status and f_stop=0 then
  2209 9305 A0 00		    ldy #0
  2210 9307 B1 DC		    lda (curTrackPtr),y
  2211 9309 29 40		    and #f_stop
  2212 930B D0 4A		    bne skipProcessTrack
  2213
  2214 				// if _totalTicks>=_trackTime then ProcessTrack;
  2215 930D A0 07		    ldy #7
  2216 930F A5 F3		    lda _totalTicks+3
  2217 9311 38 F1 DC		    sub (curTrackPtr),y
  2218 9314 D0 22		    bne L4
  2219 9316 A5 F2		    lda _totalTicks+2
  2220 9318 88			    dey
  2221 9319 38 F1 DC		    sub (curTrackPtr),y
  2222 931C D0 0E		    bne L1
  2223 931E A5 F1		    lda _totalTicks+1
  2224 9320 88			    dey
  2225 9321 38 F1 DC		    sub (curTrackPtr),y
  2226 9324 D0 06		    bne L1
  2227 9326 A5 F0		    lda _totalTicks
  2228 9328 88			    dey
  2229 9329 38 F1 DC		    sub (curTrackPtr),y
  2230 932C			  L1:
  2231 932C F0 10		    beq L5
  2232 932E B0 04		    bcs L3
  2233 9330 A9 FF		    lda #$ff
  2234 9332 D0 0A		    bne L5
  2235 9334			  L3:
  2236 9334 A9 01		    lda #$01
  2237 9336 D0 06		    bne L5
  2238 9338			  L4:
  2239 9338 50 04		    bvc L5
  2240 933A 49 FF		    eor #$ff
  2241 933C 09 01		    ora #$01
  2242 933E			  L5:
  2243 933E 30 17		    jmi skipProcessTrack
  2244
  2245 				  // copy current track data to work registers
  2246 9340 A0 08		    ldy #sizeOf_TMIDTrack-1
  2247 9342			  loop:
  2248 9342 B1 DC		    lda (curTrackPtr),y
  2249 9344 99 E0 00		    sta _trkRegs,y
  2250 9347 88			    dey
  2251 9348 10 F8		    bpl loop
  2252
  2253 				  
  2254 				; optimize FAIL ('PROCESSTRACK', processmidi.inc), line = 92
  2255
  2256 934A 20 70 90			jsr PROCESSTRACK
  2257
  2258 				; -------------------  ASM Block 00000077  -------------------
  2259
  2260 				// store work registers in track data
  2261 934D A0 08		    ldy #sizeOf_TMIDTrack-1
  2262 934F			  loop2:
  2263 934F B9 E0 00		    lda _trkRegs,y
  2264 9352 91 DC		    sta (curTrackPtr),y
  2265 9354 88			    dey
  2266 9355 10 F8		    bpl loop2
  2267
  2268 9357			  skipProcessTrack:
  2269 				  
  2270 9357			@exit
  2271 					.ifdef @new
  2272 					lda <@VarData
  2273 					sta :ztmp
  2274 					lda >@VarData
  2275 					ldy #@VarDataSize-1
  2276 					jmp @FreeMem
  2277 					els
  2278 9357 60				rts						; ret
  2279 					eif
  2280 				.endl
  2281
  2282 9358			.local	INITTIMER					; PROCEDURE
  2283
  2284 				; optimize OK (MIDFILES), line = 84
  2285
  2286 9358 A9 00			lda #$00
  2287 935A 85 F0			sta _TOTALTICKS
  2288 935C 85 F1			sta _TOTALTICKS+1
  2289 935E 85 F2			sta _TOTALTICKS+2
  2290 9360 85 F3			sta _TOTALTICKS+3
  2291
  2292 				; optimize OK (MIDFILES), line = 85
  2293
  2294 9362 8D D6 3E			sta TEMPOSHIFT
  2295 9365 8D D7 3E			sta TEMPOSHIFT+1
  2296 9368 8D D8 3E			sta TEMPOSHIFT+2
  2297 936B 8D D9 3E			sta TEMPOSHIFT+3
  2298
  2299 				; optimize OK (MIDFILES), line = 86
  2300
  2301 936E A9 01			lda #$01
  2302 9370 85 F5			sta _TIMERSTATUS
  2303
  2304 				; optimize OK (MIDFILES), line = 87
  2305
  2306 9372 AD BB 3E			lda TOTALTRACKS
  2307 9375 85 DE			sta CTRK
  2308
  2309 				; optimize OK (MIDFILES), line = 88
  2310
  2311 9377 85 DF			sta PLAYINGTRACKS
  2312
  2313 				; -------------------  ASM Block 00000078  -------------------
  2314
  2315 9379 78			    sei
  2316 937A A9 D1 8D 10 02	    mva <INT_TIMER VTIMR1
  2317 937F A9 8A 8D 11 02	    mva >INT_TIMER VTIMR1+1
  2318 				  // reset POKEY
  2319 9384 A9 00		    lda #$00
  2320 9386 A0 03		    ldy #$03
  2321 9388 8D 08 D2		    sta AUDCTL
  2322 938B 8D 01 D2		    sta AUDC1
  2323 938E 8C 0F D2		    sty SKCTL
  2324 				  // setup TIMER1
  2325 9391 8D 08 D2		    sta AUDCTL
  2326 9394 A5 53 8D 00 D2	    mva 83 AUDF1
  2327 				  // initialize IRQ for TIMER1
  2328 9399 A5 10		    lda irqens
  2329 939B 09 01		    ora #$01
  2330 939D 85 10		    sta irqens
  2331 939F 8D 0E D2		    sta irqen
  2332 				  // start timer strobe
  2333 93A2 8D 09 D2		    sta stimer
  2334
  2335 93A5 58			    cli  // enable IRQ
  2336 				  
  2337 93A6			@exit
  2338 					.ifdef @new
  2339 					lda <@VarData
  2340 					sta :ztmp
  2341 					lda >@VarData
  2342 					ldy #@VarDataSize-1
  2343 					jmp @FreeMem
  2344 					els
  2345 93A6 60				rts						; ret
  2346 					eif
  2347 				.endl
  2348
  2349 93A7			.local	NULLLOADPRCS					; PROCEDURE
  2350
  2351 93A7			@exit
  2352 					.ifdef @new
  2353 					lda <@VarData
  2354 					sta :ztmp
  2355 					lda >@VarData
  2356 					ldy #@VarDataSize-1
  2357 					jmp @FreeMem
  2358 					els
  2359 93A7 60				rts						; ret
  2360 					eif
  2361 				.endl
  2362
  2363 				; ------------------------------------------------------------
  2364 				; ------------------------------------------------------------
  2365 93A8			@UnitInit
  2366
  2367 				; optimize OK (MIDFILES), line = 121
  2368
  2369 93A8 A9 00			lda #$00
  2370 93AA 8D D2 3E			sta OLDTIMERVEC
  2371 93AD 8D D3 3E			sta OLDTIMERVEC+1
  2372
  2373 				; optimize OK (MIDFILES), line = 122
  2374
  2375 93B0 A9 A7			lda <NULLLOADPRCS
  2376 93B2 8D D4 3E			sta LOADPROCESS
  2377 93B5 A9 93			lda >NULLLOADPRCS
  2378 93B7 8D D5 3E			sta LOADPROCESS+1
  2379
  2380 				; optimize OK (MIDFILES), line = 123
  2381
  2382 93BA A9 80			lda #$80
  2383 93BC 8D BC 3E			sta TICKDIV
  2384 93BF A9 01			lda #$01
  2385 93C1 8D BD 3E			sta TICKDIV+1
  2386
  2387 				; optimize OK (MIDFILES), line = 124
  2388
  2389 93C4 A9 20			lda #$20
  2390 93C6 8D BE 3E			sta MS_PER_QNOTE
  2391 93C9 A9 A1			lda #$A1
  2392 93CB 8D BF 3E			sta MS_PER_QNOTE+1
  2393 93CE A9 07			lda #$07
  2394 93D0 8D C0 3E			sta MS_PER_QNOTE+2
  2395 93D3 A9 00			lda #$00
  2396 93D5 8D C1 3E			sta MS_PER_QNOTE+3
  2397
  2398 				; optimize OK (MIDFILES), line = 125
  2399
  2400 93D8 8D BB 3E			sta TOTALTRACKS
  2401
  2402 				; optimize OK (MIDFILES), line = 126
  2403
  2404 93DB 85 DE			sta CTRK
  2405
  2406 				; optimize OK (MIDFILES), line = 127
  2407
  2408 93DD A9 80			lda #$80
  2409 93DF 85 F5			sta _TIMERSTATUS
  2410
  2411 93E1 AD 10 02			lda VTIMR1
  2412 93E4 8D D2 3E			sta OLDTIMERVEC
  2413 93E7 AD 11 02			lda VTIMR1+1
  2414 93EA 8D D3 3E			sta OLDTIMERVEC+1
  2415
  2416 93ED 60				rts
  2417
  2418 				; ------------------------------------------------------------
  2419
  2420 = 0080			F_COUNTER	= $80
  2421 = 0040			F_TICK	= $40
  2422 = 00C0			F_FLAGS	= $C0
  2423 = 000F			F_RATIO	= $0F
  2424 = 0080			F_SKIPDELTA	= $80
  2425 = 0040			F_STOP	= $40
  2426 = 00E0			_TRKREGS	= $E0
  2427 = 0000			MID_0	= $00
  2428 = 0001			MID_1	= $01
  2429 = 0064			ERR_UNSUPPORTED_FORMAT	= $64
  2430 = 0065			ERR_NOT_ENOUGHT_MEMORY	= $65
  2431 = 0066			ERR_NOT_A_MIDI_FILE	= $66
  2432 = 6468544D		TAG_MTHD	= $6468544D
  2433 = 6B72544D		TAG_MTRK	= $6B72544D
  2434 = 0009			SIZEOF_TMIDTRACK	= $09
  2435 = 00DC			CURTRACKPTR	= $DC
  2436 = 00DE			CTRK	= $DE
  2437 = 00DF			PLAYINGTRACKS	= $DF
  2438 = 00F0			_TOTALTICKS	= $F0
  2439 = 00F4			_SUBCNT	= $F4
  2440 = 00F5			_TIMERSTATUS	= $F5
  2441 = 00F6			_DELTA	= $F6
  2442 = 00F6			_TMP	= $F6
  2443 = 00E0			_STATUS	= $E0
  2444 = 00E1			_BANK	= $E1
  2445 = 00E2			_PTR	= $E2
  2446 = 00E2			_ADR	= $E2
  2447 = 00E4			_TRACKTIME	= $E4
  2448 = 00E8			_EVENT	= $E8
  2449 = 3EB7			MIDDATA	= DATAORIGIN+$0037
  2450 = 3EB9			adr.MIDTRACKS	= [DATAORIGIN+$0039] .array [1]
  2451 93EE			.var MIDTRACKS	= adr.MIDTRACKS .word
  2452 = 3EBA			FORMAT	= DATAORIGIN+$003A
  2453 = 3EBB			TOTALTRACKS	= DATAORIGIN+$003B
  2454 = 3EBC			TICKDIV	= DATAORIGIN+$003C
  2455 = 3EBE			MS_PER_QNOTE	= DATAORIGIN+$003E
  2456 = 3EC2			adr.CHNVOLUME	= [DATAORIGIN+$0042] .array [16]
  2457 93EE			.var CHNVOLUME	= adr.CHNVOLUME .word
  2458 = 3ED2			OLDTIMERVEC	= DATAORIGIN+$0052
  2459 = 3ED4			LOADPROCESS	= DATAORIGIN+$0054
  2460 = 3ED6			TEMPOSHIFT	= DATAORIGIN+$0056
  2461
  2462 = 93EE B9 3E		MIDTRACKS
  2462 = 93F0 C2 3E		CHNVOLUME
  2462 				.endl							; UNIT MIDFILES
  2463
  2464 				; ------------------------------------------------------------
  2465
  2466 93F2			.local	MISC						; UNIT
  2467
  2468 				; ------------------------------------------------------------
  2469
  2470 = 0101			adr.BANKS	= $0101
  2471 93F2			.var BANKS	= adr.BANKS .word
  2472 = FFF7			DETECTOS	= $FFF7
  2473
  2474 = 93F2 01 01		BANKS
  2474 				.endl							; UNIT MISC
  2475
  2476 93F4			.local	SETCOLORS					; PROCEDURE | ASSEMBLER
  2477
  2478 				; -------------------  ASM Block 00000089  -------------------
  2479
  2480 93F4			  icl 'asms/setColors.a65'
Source: setColors.a65
     1 = 0088			colptr = $88
     2
     3 93F4 AD A9 A7		  lda colors
     4 93F7 85 88		  sta colptr
     5 93F9 AD AA A7		  lda colors+1
     6 93FC 85 89		  sta colptr+1
     7
     8 93FE A5 4A		  lda playerStatus
     9 9400 29 01		  and #ps_colorSet
    10 9402 F0 0B		  beq skip
    11 9404 A5 88		  lda colptr
    12 9406 18 69 05		  add #5
    13 9409 85 88		  sta colptr
    14 940B 90 02 E6 89		  scc:inc colptr+1
    15
    16 940F			skip:
    17 940F A0 04		  ldy #4
    18 9411			copyColors:
    19 9411 B1 88		  lda (colptr),y
    20 9413 99 16 D0		  sta $D016,y
    21 9416 99 C4 02		  sta 708,y
    22 9419 88			  dey
    23 941A 10 F5		  bpl copyColors
  2481
  2482 941C			@exit
  2483 					.ifdef @new
  2484 					lda <@VarData
  2485 					sta :ztmp
  2486 					lda >@VarData
  2487 					ldy #@VarDataSize-1
  2488 					jmp @FreeMem
  2489 					els
  2490 941C 60				rts						; ret
  2491 					eif
  2492 				.endl
  2493
  2494 941D			.local	INVERS						; PROCEDURE | ASSEMBLER | REGISTER
  2495 941D 85 88			sta CHARS
  2496
  2497 				; -------------------  ASM Block 00000090  -------------------
  2498
  2499 941F			  icl 'asms/invers.a65'
Source: invers.a65
     1 941F A8			  tay // ldy spaces
     2 9420 D0 01 60		  sne:rts
     3 9423 88			  dey
     4 9424			loop:
     5 9424 B1 D4		  lda (scradr),y
     6 9426 49 80		  eor #$80
     7 9428 91 D4		  sta (scradr),y
     8 942A 88			  dey
     9 942B 10 F7		  bpl loop
  2500
  2501 				; ------------------------------------------------------------
  2502
  2503 = 0088			CHARS	= :EDX
  2504 942D			@exit
  2505 					.ifdef @new
  2506 					lda <@VarData
  2507 					sta :ztmp
  2508 					lda >@VarData
  2509 					ldy #@VarDataSize-1
  2510 					jmp @FreeMem
  2511 					els
  2512 942D 60				rts						; ret
  2513 					eif
  2514 				.endl
  2515
  2516 942E			.local	PUTSPACES					; PROCEDURE | ASSEMBLER | REGISTER
  2517 942E 85 88			sta SPACES
  2518
  2519 				; -------------------  ASM Block 00000091  -------------------
  2520
  2521 9430			  icl 'asms/put_spaces.a65'
Source: put_spaces.a65
     1 9430 A8			  tay // ldy spaces
     2 9431 D0 01 60		  sne:rts
     3 9434 A9 00		  lda #0
     4 9436			loop:
     5 9436 88			  dey
     6 9437 91 D4		  sta (scradr),y
     7 9439 D0 FB		  bne loop
  2522
  2523 				; ------------------------------------------------------------
  2524
  2525 = 0088			SPACES	= :EDX
  2526 943B			@exit
  2527 					.ifdef @new
  2528 					lda <@VarData
  2529 					sta :ztmp
  2530 					lda >@VarData
  2531 					ldy #@VarDataSize-1
  2532 					jmp @FreeMem
  2533 					els
  2534 943B 60				rts						; ret
  2535 					eif
  2536 				.endl
  2537
  2538 943C			.local	PUTINTTEXT					; PROCEDURE | ASSEMBLER | REGISTER
  2539
  2540 				; -------------------  ASM Block 00000092  -------------------
  2541
  2542 943C			  icl 'asms/putinttext.a65'
Source: putinttext.a65
     1 = 0088			  regptr = $88
     2
     3 943C A5 89		  lda s+1
     4 943E 85 89		  sta regptr+1
     5 9440 A5 88		  lda s
     6 9442 85 88		  sta regptr
     7
     8 9444 A0 00		  ldy #0
     9 9446 B1 88		  lda (regptr),y
    10 9448 F0 1A		  beq exitPutText
    11
    12 944A 48 A8		  pha:tay
    13 944C 88			  dey
    14 944D E6 88		  inc regptr
    15 944F D0 02 E6 89		  sne:inc regptr+1
    16
    17 9453			putText:
    18 9453 B1 88		  lda (regptr),y   // get string character
    19 9455 91 D4		  sta (scradr),y   // put on screen
    20 9457 88			  dey
    21 9458 10 F9		  bpl putText
    22
    23 945A 68			  pla
    24 945B 18			  clc
    25 945C 65 D4		  adc scradr
    26 945E 85 D4		  sta scradr
    27 9460 90 02 E6 D5		  scc:inc scradr+1
    28
    29 9464			exitPutText:
  2543
  2544 				; ------------------------------------------------------------
  2545
  2546 = 0088			S	= :EDX
  2547 9464			@exit
  2548 					.ifdef @new
  2549 					lda <@VarData
  2550 					sta :ztmp
  2551 					lda >@VarData
  2552 					ldy #@VarDataSize-1
  2553 					jmp @FreeMem
  2554 					els
  2555 9464 60				rts						; ret
  2556 					eif
  2557 				.endl
  2558
  2559 9465			.local	PUTASCTEXT					; PROCEDURE | ASSEMBLER | REGISTER
  2560
  2561 				; -------------------  ASM Block 00000093  -------------------
  2562
  2563 9465			  icl 'asms/putasctext.a65'
Source: putasctext.a65
     1 = 0088			  regptr = $88
     2
     3 9465 8A 48		  txa:pha
     4
     5 9467 A0 00		  ldy #0
     6 9469 B1 88		  lda (regptr),y
     7 946B F0 26		  beq exitPutText
     8
     9 946D 48 A8		  pha:tay
    10 946F 88			  dey
    11 9470 E6 88		  inc regptr
    12 9472 D0 02 E6 89		  sne:inc regptr+1
    13
    14 9476			putText:
    15 9476 B1 88		  lda (regptr),y   // get string character
    16
    17 9478			atasci2antic:
    18 9478 0A			  asl
    19 9479 69 C0		  adc #$c0
    20 947B 10 02 49 40		  spl:eor #$40
    21 947F 4A			  lsr
    22 9480 90 02 49 80		  scc:eor #$80
    23
    24 9484 91 D4		  sta (scradr),y   // put on screen
    25 9486 88			  dey
    26 9487 10 ED		  bpl putText
    27
    28 9489 68			  pla
    29 948A 18			  clc
    30 948B 65 D4		  adc scradr
    31 948D 85 D4		  sta scradr
    32 948F 90 02 E6 D5		  scc:inc scradr+1
    33
    34 9493			exitPutText:
    35 9493 68 AA		  pla:tax
  2564
  2565 				; ------------------------------------------------------------
  2566
  2567 = 0088			S	= :EDX
  2568 9495			@exit
  2569 					.ifdef @new
  2570 					lda <@VarData
  2571 					sta :ztmp
  2572 					lda >@VarData
  2573 					ldy #@VarDataSize-1
  2574 					jmp @FreeMem
  2575 					els
  2576 9495 60				rts						; ret
  2577 					eif
  2578 				.endl
  2579
  2580 9496			.local	PUTHEX						; PROCEDURE | ASSEMBLER
  2581
  2582 				; -------------------  ASM Block 00000094  -------------------
  2583
  2584 9496			  icl 'asms/puthex.a65'
Source: puthex.a65
     1 				// store `scradr` value as a operand of opcode
     2 9496 8A 48		  txa:pha
     3
     4 9498 A5 D4		  lda scradr
     5 949A 8D DE 94		  sta screen
     6 949D A5 D5		  lda scradr+1
     7 949F 8D DF 94		  sta screen+1
     8 94A2 AD 0A 3F		  lda v
     9 94A5 8D C7 94		  sta vadr1
    10 94A8 8D CF 94		  sta vadr2
    11 94AB AD 0B 3F		  lda v+1
    12 94AE 8D C8 94		  sta vadr1+1
    13 94B1 8D D0 94		  sta vadr2+1
    14
    15 94B4 A9 00		  lda #0
    16 94B6 8D F3 94		  sta _vofs
    17
    18 				// get nibbles to show, if =0 exit
    19 94B9 AC 0C 3F		  ldy n
    20 94BC F0 32		  beq stop
    21
    22 94BE			hexLoop:
    23 94BE AE F3 94		  ldx _vofs
    24 94C1 98			  tya
    25 94C2 29 01		  and #1
    26 94C4 D0 08		  bne HiNibble
    27 94C6 BD 00 F0		  lda vadr1:$f000,x
    28 94C9 29 0F		  and #$0f
    29 94CB 4C D8 94		  jmp put2screen
    30 94CE			HiNibble:
    31 94CE BD 00 F0		  lda vadr2:$f000,x
    32 94D1 4A 4A 4A 4A		  :4 lsr @
    33 94D5 EE F3 94		  inc _vofs
    34
    35 94D8			put2screen:
    36 94D8 AA			  tax
    37 94D9 BD F4 94		  lda hexTab,x
    38 				//  ora puttextinvert
    39 94DC 88			  dey
    40 94DD 99 00 F0		  sta screen:$f000,y
    41
    42 94E0 C0 00		  cpy #0
    43 94E2 D0 DA		  bne hexLoop
    44
    45 94E4			calcEndAddr:
    46 94E4 A5 D4		  lda scradr
    47 94E6 18			  clc
    48 94E7 6D 0C 3F		  adc n
    49 94EA 85 D4		  sta scradr
    50 94EC 90 02		  bcc stop
    51 94EE E6 D5		  inc scradr+1
    52
    53 94F0			stop:
    54 94F0 68 AA		  pla:tax
    55 94F2 60			  rts
    56
    57 94F3			_vofs
    58 94F3 00			  .by 0
    59 94F4			hexTab:
    60 94F4 10 11 12 13 14 15 +   dta d'0123456789ABCDEF'
  2585
  2586 				; ------------------------------------------------------------
  2587
  2588 = 3F0A			V	= DATAORIGIN+$008A
  2589 = 3F0C			N	= DATAORIGIN+$008C
  2590
  2591 = 3F0A			@VarData	= V
  2592 = 0003			@VarDataSize	= 3
  2593
  2594 9504			@exit
  2595 					.ifdef @new
  2596 					lda <@VarData
  2597 					sta :ztmp
  2598 					lda >@VarData
  2599 					ldy #@VarDataSize-1
  2600 					jmp @FreeMem
  2601 					els
  2602 9504 60				rts						; ret
  2603 					eif
  2604 				.endl
  2605
  2606 9505			.local	PUTINT						; PROCEDURE | ASSEMBLER
  2607
  2608 				; -------------------  ASM Block 00000095  -------------------
  2609
  2610 9505			  icl 'asms/int2str.a65'
Source: int2str.a65
     1 = 0000			EOL = 0
     2
     3 9505 A5 D4		    lda scradr
     4 9507 8D 51 95		    sta screen1
     5 950A 8D 68 95		    sta screen2
     6 950D A5 D5		    lda scradr+1
     7 950F 8D 52 95		    sta screen1+1
     8 9512 8D 69 95		    sta screen2+1
     9
    10 9515			INT2STR:
    11 9515 A0 00		    ldy #0
    12 9517 8C 76 95		    sty _cnt
    13 951A			ITSNEXT:
    14 951A A2 00		    ldx #0
    15 951C			ITSSLP:
    16 951C AD 0D 3F		    lda value
    17 951F 38			    sec
    18 9520 F9 77 95		    sbc Pow10Tab,Y
    19 9523 8D 0D 3F		    sta value
    20 9526 AD 0E 3F		    lda value+1
    21 9529 C8			    iny
    22 952A F9 77 95		    sbc Pow10Tab,Y
    23 952D 90 08		    bcc ITSADD
    24 952F 8D 0E 3F		    sta value+1
    25 9532 E8			    inx
    26 9533 88			    dey
    27 9534 18			    clc
    28 9535 90 E5		    bcc ITSSLP
    29 9537			ITSADD:
    30 9537 88			    dey
    31 9538 AD 0D 3F		    lda value
    32 953B 79 77 95		    adc Pow10Tab,Y
    33 953E 8D 0D 3F		    sta value
    34 9541 8A			    txa
    35 9542 09 10		    ora #$10
    36
    37 				; skip lead zeros
    38 9544 AE 76 95		    ldx _cnt
    39 9547 D0 04		    bne storeDigit
    40 9549 C9 10		    cmp #$10
    41 954B F0 09		    beq skipDigit
    42
    43 954D			storeDigit:
    44 954D 0D 08 3F		    ora puttextinvert
    45 9550 9D 00 F0		    sta screen1:$f000,X
    46 9553 EE 76 95		    inc _cnt
    47 9556			skipDigit:
    48 9556 C8			    iny
    49 9557 C8			    iny
    50 9558 C0 08		    cpy #8
    51 955A 90 BE		    bcc ITSNEXT
    52
    53 				; last digit
    54 955C AD 0D 3F		    lda value
    55 955F 09 10		    ora #$10
    56 9561 AE 76 95		    ldx _cnt
    57 9564 0D 08 3F		    ora puttextinvert
    58 9567 9D 00 F0		    sta screen2:$f000,X
    59 956A E8			    inx
    60
    61 				; set screen addres to the end of value
    62 956B 8A			    txa
    63 956C 18			    clc
    64 956D 65 D4		    adc scradr
    65 956F 85 D4		    sta scradr
    66 9571 90 02		    bcc stop
    67 9573 E6 D5		    inc scradr+1
    68
    69 9575			stop:
    70 9575 60			    rts
    71
    72 9576			_cnt
    73 9576 00			    .by 0
    74 9577			Pow10Tab
    75 9577 10 27		    .wo 10000
    76 9579 E8 03		    .wo 1000
    77 957B 64 00		    .wo 100
    78 957D 0A 00		    .wo 10
  2611
  2612 				; ------------------------------------------------------------
  2613
  2614 = 3F0D			VALUE	= DATAORIGIN+$008D
  2615
  2616 = 3F0D			@VarData	= VALUE
  2617 = 0002			@VarDataSize	= 2
  2618
  2619 957F			@exit
  2620 					.ifdef @new
  2621 					lda <@VarData
  2622 					sta :ztmp
  2623 					lda >@VarData
  2624 					ldy #@VarDataSize-1
  2625 					jmp @FreeMem
  2626 					els
  2627 957F 60				rts						; ret
  2628 					eif
  2629 				.endl
  2630
  2631 9580			.local	HLINE						; PROCEDURE | ASSEMBLER
  2632
  2633 				; -------------------  ASM Block 00000096  -------------------
  2634
  2635 9580			  icl 'asms/hline.a65'
Source: hline.a65
     1 9580 A0 27		  ldy #39
     2 9582 A9 4A		  lda #$4a
     3 9584			loop:
     4 9584 91 D4		  sta (scradr),y
     5 9586 88			  dey
     6 9587 10 FB		  bpl loop
  2636
  2637 9589			@exit
  2638 					.ifdef @new
  2639 					lda <@VarData
  2640 					sta :ztmp
  2641 					lda >@VarData
  2642 					ldy #@VarDataSize-1
  2643 					jmp @FreeMem
  2644 					els
  2645 9589 60				rts						; ret
  2646 					eif
  2647 				.endl
  2648
  2649 958A			.local	CLEARWORKAREA					; PROCEDURE | ASSEMBLER
  2650
  2651 				; -------------------  ASM Block 00000097  -------------------
  2652
  2653 958A			  icl 'asms/clear_workarea.a65'
Source: clear_workarea.a65
     1 958A A0 00		  ldy #0
     2 958C A9 00		  lda #0
     3 958E			loop1:
     4 958E 99 F8 36		  sta SCREEN_WORK,y
     5 9591 99 F8 37		  sta SCREEN_WORK+$100,y
     6 9594 C8			  iny
     7 9595 D0 F7		  bne loop1
     8 9597 A0 A8		  ldy #$A8
     9 9599			loop2:
    10 9599 99 F7 38		  sta SCREEN_WORK+$1FF,y
    11 959C 88			  dey
    12 959D D0 FA		  bne loop2
  2654
  2655 959F			@exit
  2656 					.ifdef @new
  2657 					lda <@VarData
  2658 					sta :ztmp
  2659 					lda >@VarData
  2660 					ldy #@VarDataSize-1
  2661 					jmp @FreeMem
  2662 					els
  2663 959F 60				rts						; ret
  2664 					eif
  2665 				.endl
  2666
  2667 95A0			.local	GETFILEEXT					; PROCEDURE | ASSEMBLER | REGISTER
  2668
  2669 				; -------------------  ASM Block 00000098  -------------------
  2670
  2671 95A0			  icl 'asms/get_file_ext.a65'
Source: get_file_ext.a65
     1 = 0088			hlpptr = $88
     2 = 04F8			result = $4f8
     3
     4 95A0 A9 00		  lda #0
     5 95A2 8D F8 04		  sta result
     6 95A5 8D F9 04		  sta result+1
     7 95A8 8D FA 04		  sta result+2
     8 95AB 8D FB 04		  sta result+3
     9
    10 95AE A0 00		  ldy #0
    11 95B0 B1 88		  lda (hlpptr),y
    12 95B2 8D DF 95		  sta fnlen
    13 95B5 F0 27		  beq endGetFileExt
    14 95B7 A8			  tay
    15
    16 95B8			dotSearch:
    17 95B8 B1 88		  lda (hlpptr),y
    18 95BA C9 2E		  cmp #'.'
    19 95BC F0 05		  beq endDotSearch
    20 95BE 88			  dey
    21 95BF D0 F7		  bne dotSearch
    22 95C1 F0 1B		  beq endGetFileExt
    23
    24 95C3			endDotSearch:
    25 95C3 8C E0 95		  sty extst
    26 95C6 AD DF 95		  lda fnlen
    27 95C9 38			  sec
    28 95CA ED E0 95		  sbc extst
    29 95CD C9 04		  cmp #4
    30 95CF B0 0D		  bcs endGetFileExt
    31
    32 95D1 C8			  iny
    33 95D2 AA			  tax
    34 95D3 F0 09		  beq endGetFileExt
    35
    36 95D5			copyExt2Result:
    37 95D5 B1 88		  lda (hlpptr),y
    38 95D7 9D F8 04		  sta result,x
    39 95DA C8			  iny
    40 95DB CA			  dex
    41 95DC D0 F7		  bne copyExt2Result
    42
    43 95DE			endGetFileExt:
    44 95DE 60			  rts
    45
    46 95DF 00			fnlen .byte 0
    47 95E0 00			extst .byte 0
  2672
  2673 				; ------------------------------------------------------------
  2674
  2675 = 0088			FN	= :EDX
  2676 95E1			@exit
  2677 					.ifdef @new
  2678 					lda <@VarData
  2679 					sta :ztmp
  2680 					lda >@VarData
  2681 					ldy #@VarDataSize-1
  2682 					jmp @FreeMem
  2683 					els
  2684 95E1 60				rts						; ret
  2685 					eif
  2686 				.endl
  2687
  2688 95E2			.local	REDUCEFILENAME					; PROCEDURE | ASSEMBLER | REGISTER
  2689
  2690 				; -------------------  ASM Block 00000099  -------------------
  2691
  2692 95E2			  icl 'asms/reduce_filename.a65'
Source: reduce_filename.a65
     1 = 0088			inreg  = $88
     2 = 008C			outReg = $8c
     3
     4 95E2 8A 48		  txa:pha
     5
     6 95E4 A5 88		  lda inreg
     7 95E6 8D F8 95		  sta inptr
     8 95E9 A5 89		  lda inreg+1
     9 95EB 8D F9 95		  sta inptr+1
    10
    11 				; 0123456789abcdef01
    12 				;  *:FILENAMEEXT 000
    13
    14 95EE A9 0B		  lda #$0b
    15 95F0 8D 03 96		  sta fpos
    16
    17 95F3 A2 03		  ldx #3
    18 95F5 A0 01		  ldy #1
    19
    20 95F7			fnLoop:
    21 95F7 BD 00 20		  lda inptr:$2000,x
    22 95FA C9 20		  cmp #' '
    23 95FC F0 03		  beq skip
    24 95FE 91 8C		  sta (outreg),y
    25 9600 C8			  iny
    26 9601			skip:
    27 9601 E8			  inx
    28 9602 E0 0B		  cpx fpos:#11
    29 9604 D0 F1		  bne fnLoop
    30
    31 9606			dot:
    32 9606 E0 0E		  cpx #$0e
    33 9608 F0 0B		  beq storeDot
    34
    35 960A 98 48		  tya:pha
    36 960C C8			  iny
    37 960D A9 0E		  lda #$0e
    38 960F 8D 03 96		  sta fpos
    39 9612 4C F7 95		  jmp fnLoop
    40
    41 9615			storeDot:
    42 9615 88			  dey
    43 9616 98 AA		  tya:tax   // move Y to X - string length
    44 9618 68 A8		  pla:tay   // pop stored dot position
    45 961A A9 2E		  lda #'.'
    46 961C 91 8C		  sta (outreg),y
    47
    48 961E 8A			  txa       // move string length to Accu
    49 961F A0 00		  ldy #0
    50 9621 91 8C		  sta (outreg),y
    51
    52 9623 68 AA		  pla:tax
  2693
  2694 				; ------------------------------------------------------------
  2695
  2696 = 0088			INFN	= :EDX
  2697 = 008C			OUTFN	= :ECX
  2698 9625			@exit
  2699 					.ifdef @new
  2700 					lda <@VarData
  2701 					sta :ztmp
  2702 					lda >@VarData
  2703 					ldy #@VarDataSize-1
  2704 					jmp @FreeMem
  2705 					els
  2706 9625 60				rts						; ret
  2707 					eif
  2708 				.endl
  2709
  2710 9626			.local	GETDEVICESPEC					; FUNCTION | ASSEMBLER | REGISTER
  2711
  2712 				; -------------------  ASM Block 00000101  -------------------
  2713
  2714 9626			  icl 'asms/getDeviceSpec.a65'
Source: getDeviceSpec.a65
     1 = 0088			fnreg   = $88
     2 = 008C			specreg = $8c
     3
     4 9626			getDeviceSpec:
     5 9626 A0 01		  ldy #1
     6 9628			colonLoop:
     7 9628 B1 88		  lda (fnreg),y
     8 962A C9 3A		  cmp #':'
     9 962C F0 0A		  beq foundSpec
    10 962E C8			  iny
    11 962F C0 04		  cpy #4
    12 9631 D0 F5		  bne colonLoop
    13
    14 9633			specNotFound:
    15 9633 A9 00		  lda #0
    16 				  ; tay
    17 				  ; sta (specreg),y
    18 9635 85 90		  sta result
    19 9637 60			  rts
    20
    21 9638			foundSpec:
    22 9638 98			  tya
    23 9639 A0 00		  ldy #0
    24 963B 91 8C		  sta (specreg),y
    25 963D A8			  tay
    26
    27 963E			copySpec:
    28 963E B1 88		  lda (fnreg),y
    29 9640 91 8C		  sta (specreg),y
    30 9642 88			  dey
    31 9643 D0 F9		  bne copySpec
    32
    33 9645 A9 01		  lda #1
    34 9647 85 90		  sta result
  2715
  2716 9649			@exit
  2717
  2718 				; ------------------------------------------------------------
  2719
  2720 = 0088			FN	= :EDX
  2721 = 008C			SPEC	= :ECX
  2722 = 0090			RESULT	= :STACKORIGIN-4
  2723 9649 60				rts						; ret
  2724 				.endl
  2725
  2726 964A			.local	JOINSTRINGS					; PROCEDURE | ASSEMBLER | REGISTER
  2727
  2728 				; -------------------  ASM Block 00000102  -------------------
  2729
  2730 964A			  icl 'asms/joinStrings.a65'
Source: joinStrings.a65
     1 964A			JoinStrings:
     2
     3 964A 8A 48		    txa:pha
     4
     5 964C A0 00		    ldy #0
     6 964E B1 88		    lda (s1),y
     7 9650 8D 5D 96		    sta devlen
     8 9653 A2 01		    ldx #1
     9
    10 9655			copyS1:
    11 9655 C8			    iny
    12 9656 B1 88		    lda (s1),y
    13 9658 9D 80 05		    sta adr.outstr,x
    14 965B E8			    inx
    15 965C C0 00		    cpy devlen:#00
    16 965E D0 F5		    bne copyS1
    17
    18 9660			nextCopy:
    19 9660 A0 00		    ldy #0
    20 9662 B1 8C		    lda (s2),y
    21 9664 8D 6F 96		    sta fnlen
    22
    23 9667			copyS2:
    24 9667 C8			    iny
    25 9668 B1 8C		    lda (s2),y
    26 966A 9D 80 05		    sta adr.outstr,x
    27 966D E8			    inx
    28 966E C0 00		    cpy fnlen:#00
    29 9670 D0 F5		    bne copyS2
    30
    31 9672 CA			    dex
    32 9673 8E 80 05		    stx adr.outstr
    33
    34 9676 68 AA		    pla:tax
    35 9678 60			    rts
  2731
  2732 				; ------------------------------------------------------------
  2733
  2734 = 0088			S1	= :EDX
  2735 = 008C			S2	= :ECX
  2736 9679			@exit
  2737 					.ifdef @new
  2738 					lda <@VarData
  2739 					sta :ztmp
  2740 					lda >@VarData
  2741 					ldy #@VarDataSize-1
  2742 					jmp @FreeMem
  2743 					els
  2744 9679 60				rts						; ret
  2745 					eif
  2746 				.endl
  2747
  2748 967A			.local	GETLN						; PROCEDURE | ASSEMBLER | REGISTER
  2749
  2750 				; -------------------  ASM Block 00000103  -------------------
  2751
  2752 967A			  icl 'asms/get_line.a65'
Source: get_line.a65
     1 967A 8A 48		  txa:pha
     2
     3 967C A5 88		  lda chn
     4 967E 0A 0A 0A 0A		  :4 asl @
     5 9682 AA			  tax
     6
     7 9683 A9 05		  lda #5
     8 9685 9D 42 03		  sta iccmd,x
     9
    10 9688 A5 8D		  lda buf+1
    11 968A 9D 45 03		  sta icbufa+1,x
    12 968D A5 8C		  lda buf
    13 968F 18 69 01		  add #1
    14 9692 9D 44 03		  sta icbufa,x
    15 9695 90 03 FE 45 03	  scc:inc icbufa+1,X
    16
    17 969A A9 80		  lda #$80
    18 969C 9D 48 03		  sta icbufl,x
    19 969F A9 00		  lda #0
    20 96A1 9D 49 03		  sta icbufl+1,x
    21
    22 96A4			  m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 96A4 EE 01 D3				inc portb
     6 96A7 20 56 E4				jsr CIOV
     8 96AA CE 01 D3				dec portb
Source: get_line.a65
    23 96AD 8C 87 3E		  sty MAIN.SYSTEM.IOResult
    24
    25 96B0 BD 48 03		  lda icbufl,x
    26 96B3 A0 00		  ldy #0
    27 96B5 91 8C		  sta (buf),y
    28
    29 96B7 68 AA		  pla:tax
  2753
  2754 				; ------------------------------------------------------------
  2755
  2756 = 0088			CHN	= :EDX
  2757 = 008C			BUF	= :ECX
  2758 96B9			@exit
  2759 					.ifdef @new
  2760 					lda <@VarData
  2761 					sta :ztmp
  2762 					lda >@VarData
  2763 					ldy #@VarDataSize-1
  2764 					jmp @FreeMem
  2765 					els
  2766 96B9 60				rts						; ret
  2767 					eif
  2768 				.endl
  2769
  2770 96BA			.local	MYNMI						; PROCEDURE | ASSEMBLER | INTERRUPT
  2771
  2772 				; -------------------  ASM Block 00000104  -------------------
  2773
  2774 96BA			  icl 'asms/nmi.a65'
Source: nmi.a65
     1 = 0012			RTCLOK = $12
     2 = D209			KBCODE = $d209
     3 = D20F			SKSTAT = $d20f
     4 = D40F			NMIRES = $d40f
     5
     6 = 022B			SRTIMR = $022b
     7 = 026D			KEYDIS = $026d
     8 = 02DA			KEYREP = $02da
     9 = 02F1			KEYDEL = $02f1
    10 = 02FC			CH     = $02fc
    11 = 02C0			PCOLR0 = $02c0
    12 = D012			COLPM0 = $d012
    13
    14 				// systemowa procedure obsługi RTClock ($C0E2)
    15 96BA D8			    cld
    16 96BB 8D FE 96		    sta rega
    17 96BE 8E 00 97		    stx regx
    18 96C1 8C 02 97		    sty regy
    19 96C4 8D 0F D4		    STA NMIRES
    20
    21 96C7 E6 14		    inc RTCLOK+2
    22 96C9			end_rtclk:
    23
    24 96C9			skipTHI:
    25 				// fragment systemowej procedury kopiowania rejestrów kolorów
    26 				//    ldx #$08
    27 				//colloop:
    28 				//    lda PCOLR0,x
    29 				//    sta COLPM0,x
    30 				//    dex
    31 				//    bpl colloop
    32
    33 				// systemowa procedura obsługi klawiatry ($C1A1)
    34 96C9 AD 0F D2		    lda SKSTAT
    35 96CC 29 04		    and #$04
    36 96CE F0 08		    beq skip_keyDelay
    37 96D0 AD F1 02		    lda KEYDEL
    38 96D3 F0 03		    beq skip_keyDelay
    39 96D5 CE F1 02		    dec KEYDEL
    40 96D8			skip_keyDelay:
    41 96D8 AD 2B 02		    lda SRTIMR
    42 96DB F0 20		    beq end_key
    43
    44 96DD AD 0F D2		    lda SKSTAT
    45 96E0 29 04		    and #$04
    46 96E2 D0 14		    bne skip_key
    47
    48 96E4 CE 2B 02		    dec SRTIMR
    49 96E7 D0 14		    bne end_key
    50 96E9 AD DA 02		    lda KEYREP
    51 96EC 8D 2B 02		    sta SRTIMR
    52
    53 96EF AD 09 D2		    lda KBCODE
    54 96F2 8D FC 02		    sta CH
    55 96F5 4C FD 96		    jmp end_key
    56
    57 96F8			skip_key:
    58 96F8 A9 00		    lda #$00
    59 96FA 8D 2B 02		    sta SRTIMR
    60
    61 96FD			end_key:
    62
    63 96FD A9 00		    lda rega:#0
    64 96FF A2 00		    ldx regx:#0
    65 9701 A0 00		    ldy regy:#0
  2775
  2776 9703 40				rti						; ret
  2777 				.endl
  2778
  2779 9704			.local	IMMEDIATEVBLK					; PROCEDURE | ASSEMBLER | INTERRUPT
  2780
  2781 				; -------------------  ASM Block 00000105  -------------------
  2782
  2783 = 0012			RTCLOK = $12
  2784 = E45F			JSYSVB = $E45F
  2785
  2786 				  // pha
  2787 				  // txa:pha
  2788
  2789 9704 A5 14		  lda RTCLOK+2
  2790 9706 29 03		  and #%11
  2791 9708 D0 11		  bne skipTHI
  2792
  2793 970A A6 1F		  ldx thi
  2794 970C 30 0D		  bmi skipTHI
  2795 970E BD 1E 97		  lda thumblr,x
  2796 9711 8D DC 39		  sta SCREEN_STATUS
  2797 9714 CA			  dex
  2798 9715 10 02 A2 03		  spl:ldx #3
  2799 9719 86 1F		  stx thi
  2800
  2801 971B			skipTHI:
  2802 				  // pla:tax
  2803 				  // pla
  2804
  2805 971B 4C 00 00		  JMP OLD_VBLKI:0000
  2806 				  // jmp JSYSVB
  2807
  2808 971E			thumblr:
  2809 971E 29 1C 1D 1E		    .byte $29,$1c,$1d,$1e
  2810
  2811 9722 40				rti						; ret
  2812 				.endl
  2813
  2814 9723			.local	SETNMI						; PROCEDURE
  2815
  2816 				; optimize OK (mynmi.inc), line = 48
  2817
  2818 9723 AD FA FF			lda NMIVEC
  2819 9726 8D 11 3F			sta OLDNMIVEC
  2820 9729 AD FB FF			lda NMIVEC+1
  2821 972C 8D 12 3F			sta OLDNMIVEC+1
  2822
  2823 				; optimize OK (mynmi.inc), line = 49
  2824
  2825 972F AD 22 02			lda VVBLKI
  2826 9732 8D 0F 3F			sta OLDVVBLKI
  2827 9735 AD 23 02			lda VVBLKI+1
  2828 9738 8D 10 3F			sta OLDVVBLKI+1
  2829
  2830 				; optimize OK (mynmi.inc), line = 50
  2831
  2832 973B A9 00			lda #$00
  2833 973D 8D 0E D4			sta NMIEN
  2834
  2835 				; -------------------  ASM Block 00000106  -------------------
  2836
  2837 9740 8A 48		    txa:pha
  2838 9742 AD 22 02		    lda VVBLKI
  2839 9745 8D 1C 97		    sta ImmediateVBLK.OLD_VBLKI
  2840 9748 AD 23 02		    lda VVBLKI+1
  2841 974B 8D 1D 97		    sta ImmediateVBLK.OLD_VBLKI+1
  2842 974E EE 01 D3		    inc PORTB
  2843 9751 A9 06		    lda #6
  2844 9753 A0 04		    ldy #<ImmediateVBLK
  2845 9755 A2 97		    ldx #>ImmediateVBLK
  2846 9757 20 5C E4		    jsr $e45c
  2847 975A CE 01 D3		    dec PORTB
  2848 975D 68 AA		    pla:tax
  2849 				  
  2850 				; optimize OK (mynmi.inc), line = 66
  2851
  2852 975F A9 BA			lda <MYNMI
  2853 9761 8D FA FF			sta NMIVEC
  2854 9764 A9 96			lda >MYNMI
  2855 9766 8D FB FF			sta NMIVEC+1
  2856
  2857 				; optimize OK (mynmi.inc), line = 67
  2858
  2859 9769 A9 40			lda #$40
  2860 976B 8D 0E D4			sta NMIEN
  2861 976E			@exit
  2862 					.ifdef @new
  2863 					lda <@VarData
  2864 					sta :ztmp
  2865 					lda >@VarData
  2866 					ldy #@VarDataSize-1
  2867 					jmp @FreeMem
  2868 					els
  2869 976E 60				rts						; ret
  2870 					eif
  2871 				.endl
  2872
  2873 976F			.local	UNSETNMI					; PROCEDURE
  2874
  2875 				; optimize OK (mynmi.inc), line = 72
  2876
  2877 976F A9 00			lda #$00
  2878 9771 8D 0E D4			sta NMIEN
  2879
  2880 				; optimize OK (mynmi.inc), line = 73
  2881
  2882 9774 AD 0F 3F			lda OLDVVBLKI
  2883 9777 8D 22 02			sta VVBLKI
  2884 977A AD 10 3F			lda OLDVVBLKI+1
  2885 977D 8D 23 02			sta VVBLKI+1
  2886
  2887 				; optimize OK (mynmi.inc), line = 74
  2888
  2889 9780 AD 11 3F			lda OLDNMIVEC
  2890 9783 8D FA FF			sta NMIVEC
  2891 9786 AD 12 3F			lda OLDNMIVEC+1
  2892 9789 8D FB FF			sta NMIVEC+1
  2893
  2894 				; optimize OK (mynmi.inc), line = 75
  2895
  2896 978C A9 40			lda #$40
  2897 978E 8D 0E D4			sta NMIEN
  2898 9791			@exit
  2899 					.ifdef @new
  2900 					lda <@VarData
  2901 					sta :ztmp
  2902 					lda >@VarData
  2903 					ldy #@VarDataSize-1
  2904 					jmp @FreeMem
  2905 					els
  2906 9791 60				rts						; ret
  2907 					eif
  2908 				.endl
  2909
  2910 9792			.local	KEYSCAN2ASC					; FUNCTION | ASSEMBLER
  2911 9792 8D 13 3F			sta KEYSCAN
  2912
  2913 				; -------------------  ASM Block 00000107  -------------------
  2914
  2915 9795			  icl 'asms/keyscan2asc.a65'
Source: keyscan2asc.a65
     1 9795 A0 00		    ldy #0
     2 9797			loop:
     3 9797 B9 B4 97		    lda scan2asc,y
     4 979A F0 05		    beq skip
     5 979C CD 13 3F		    cmp keyscan
     6 979F F0 0B		    beq found
     7 97A1			skip:
     8 97A1 C8			    iny
     9 97A2 C0 40		    cpy #64
    10 97A4 D0 F1		    bne loop
    11
    12 97A6			notFound:
    13 97A6 A9 00		    lda #0
    14 97A8 8D 14 3F		    sta Result
    15 97AB 60			    rts
    16
    17 97AC			found:
    18 97AC 98			    tya
    19 97AD 18 69 20		    add #32
    20 97B0 8D 14 3F		    sta Result
    21
    22 97B3 60			    rts
    23
    24 97B4			scan2asc:        // from 32 to 95
    25 97B4 21			    .byte 33   //   space
    26 97B5 5F			    .byte 95   // ! exclamation mark
    27 97B6 00			    .byte 0  // " quote mark
    28 97B7 5A			    .byte 90   // # hash
    29 97B8 00			    .byte 0  // $ dolar
    30 97B9 5D			    .byte 93   // % percent
    31 97BA 00			    .byte 0  // & and
    32 97BB 00			    .byte 0  // '
    33 97BC 00			    .byte 0  // (
    34 97BD 00			    .byte 0  // )
    35 97BE 07			    .byte 7    // * star
    36 97BF 00			    .byte 0  // + plus
    37 97C0 00			    .byte 0  //  comma
    38 97C1 0E			    .byte 14   // - hypen
    39 97C2 22			    .byte 34   // . dot
    40 97C3 26			    .byte 38   // / slash
    41 97C4 32 1F 1E 1A 18 1D +     .byte 50,31,30,26,24,29,27,51,53,48 // 0-9 digits
    42 97CE 42			    .byte 66   // :colon
    43 97CF 00			    .byte 0  // ; semicolon
    44 97D0 36			    .byte 54   // < less sign
    45 97D1 00			    .byte 0  // = equal
    46 97D2 37			    .byte 55   // > more sign
    47 97D3 66			    .byte 102  // ? question mark
    48 97D4 00			    .byte 0  // @ at
    49 97D5 3F 15 12 3A 2A 38 +     .byte 63,21,18,58,42,56,61,57,13,1,5,0,37,35,8,10,47,40,62,45,11,16,46,22,43,23 // A-Z letters
    50 97EF 00			    .byte 0  // [
    51 97F0 46			    .byte 70   // \ backslash
    52 97F1 00			    .byte 0  // ]
    53 97F2 00			    .byte 0  // ^
    54 97F3 4E			    .byte 78    // _ underscore mark
  2916
  2917 97F4			@exit
  2918
  2919 				; ------------------------------------------------------------
  2920
  2921 = 3F13			KEYSCAN	= DATAORIGIN+$0093
  2922 = 3F14			RESULT	= DATAORIGIN+$0094
  2923
  2924 = 3F13			@VarData	= KEYSCAN
  2925 = 0001			@VarDataSize	= 1
  2926
  2927 97F4 60				rts						; ret
  2928 				.endl
  2929
  2930 97F5			.local	RESET_MIDI					; PROCEDURE | ASSEMBLER
  2931
  2932 				; -------------------  ASM Block 00000108  -------------------
  2933
  2934 97F5 8A 48		  txa:pha
  2935 97F7 A2 00		  ldx #0
  2936 97F9			sendData:
  2937 97F9 BD 0C 98		  lda GM_RESET,x
  2938 97FC 85 FF		  sta MAIN.MIDI_FIFO.FIFO_Byte
  2939 97FE 20 0A 8A		  jsr MAIN.MIDI_FIFO.FIFO_WriteByte
  2940 9801 E8			  inx
  2941 9802 E0 06		  cpx #6
  2942 9804 D0 F3		  bne sendData
  2943 9806 20 23 8A		  jsr MAIN.MIDI_FIFO.FIFO_Flush
  2944 9809 68 AA		  pla:tax
  2945 980B 60			  rts
  2946 980C			GM_RESET:
  2947 980C F0 7E 7F 09 01 F7	  .byte $f0, $7e, $7f, $09, $01, $f7
  2948
  2949 9812			@exit
  2950 					.ifdef @new
  2951 					lda <@VarData
  2952 					sta :ztmp
  2953 					lda >@VarData
  2954 					ldy #@VarDataSize-1
  2955 					jmp @FreeMem
  2956 					els
  2957 9812 60				rts						; ret
  2958 					eif
  2959 				.endl
  2960
  2961 9813			.local	STOPMIDI					; PROCEDURE
  2962
  2963 				; optimize OK (helpers.inc), line = 33
  2964
  2965 9813 A5 F5			lda MIDFILES._TIMERSTATUS
  2966 9815 09 80			ora #$80
  2967 9817 85 F5			sta MIDFILES._TIMERSTATUS
  2968
  2969 				; optimize OK (helpers.inc), line = 34
  2970
  2971 9819 A9 00			lda #$00
  2972 981B 85 F0			sta MIDFILES._TOTALTICKS
  2973 981D 85 F1			sta MIDFILES._TOTALTICKS+1
  2974 981F 85 F2			sta MIDFILES._TOTALTICKS+2
  2975 9821 85 F3			sta MIDFILES._TOTALTICKS+3
  2976 9823 A9 01			lda #$01
  2977 9825 85 F4			sta MIDFILES._SUBCNT
  2978
  2979 				; optimize OK (helpers.inc), line = 35
  2980
  2981 9827 78				sei
  2982 9828 AD D2 3E 8D 10 02		mva MIDFILES.OLDTIMERVEC VTIMR1
  2983 982E AD D3 3E 8D 11 02		mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
  2984 9834 A5 10			lda irqens
  2985 9836 29 FE			and #$fe
  2986 9838 85 10			sta irqens
  2987 983A 8D 0E D2			sta irqen
  2988 983D 58				cli
  2989
  2990 				; optimize FAIL ('RESET_MIDI', helpers.inc), line = 36
  2991
  2992 983E 20 F5 97			jsr RESET_MIDI
  2993 9841			@exit
  2994 					.ifdef @new
  2995 					lda <@VarData
  2996 					sta :ztmp
  2997 					lda >@VarData
  2998 					ldy #@VarDataSize-1
  2999 					jmp @FreeMem
  3000 					els
  3001 9841 60				rts						; ret
  3002 					eif
  3003 				.endl
  3004
  3005 9842			.local	RESETMEMORYPTR					; PROCEDURE
  3006
  3007 				; optimize OK (helpers.inc), line = 41
  3008
  3009 9842 A5 4B			lda TOTALXMS
  3010 9844 8D 0A 04			sta LAST_BANK
  3011
  3012 				; optimize OK (helpers.inc), line = 42
  3013
  3014 9847 A5 4B			lda TOTALXMS
  3015 9849 F0 0D			jeq l_0754
  3016
  3017 				; optimize OK (helpers.inc), line = 43
  3018
  3019 984B A9 00			lda #$00
  3020 984D 8D 0B 04			sta LAST_ADR
  3021 9850 A9 40			lda #$40
  3022 9852 8D 0C 04			sta LAST_ADR+1
  3023 9855 4C 62 98			jmp l_0762
  3024 9858			l_0754
  3025
  3026 				; optimize OK (helpers.inc), line = 45
  3027
  3028 9858 A9 00			lda #$00
  3029 985A 8D 0B 04			sta LAST_ADR
  3030 985D A9 D8			lda #$D8
  3031 985F 8D 0C 04			sta LAST_ADR+1
  3032 9862			l_0762
  3033 9862			@exit
  3034 					.ifdef @new
  3035 					lda <@VarData
  3036 					sta :ztmp
  3037 					lda >@VarData
  3038 					ldy #@VarDataSize-1
  3039 					jmp @FreeMem
  3040 					els
  3041 9862 60				rts						; ret
  3042 					eif
  3043 				.endl
  3044
  3045 9863			.local	CLEARSTATUS					; PROCEDURE
  3046
  3047 				; optimize OK (helpers.inc), line = 55
  3048
  3049 9863 A9 00			lda #$00
  3050 9865 A0 3B			ldy #$3B
  3051 9867 99 C8 39 88 10 FA		sta:rpl $39C8,y-
  3052
  3053 				; optimize OK (helpers.inc), line = 56
  3054
  3055 986D A9 C8			lda #$C8
  3056 986F 85 D4			sta SCRADR
  3057 9871 A9 39			lda #$39
  3058 9873 85 D5			sta SCRADR+1
  3059 9875 A9 02			lda #$02
  3060 9877 85 88			sta PUTINTTEXT.S
  3061 9879 A9 80			lda #$80
  3062 987B 85 89			sta PUTINTTEXT.S+1
  3063 987D 20 3C 94			jsr PUTINTTEXT
  3064
  3065 				; optimize FAIL ('STATUSLOOP', helpers.inc), line = 57
  3066
  3067 9880 20 BC 99			jsr STATUSLOOP
  3068
  3069 				; optimize OK (helpers.inc), line = 58
  3070
  3071 9883 A9 DC			lda #$DC
  3072 9885 85 D4			sta SCRADR
  3073 9887 A9 39			lda #$39
  3074 9889 85 D5			sta SCRADR+1
  3075 988B 20 80 95			jsr HLINE
  3076
  3077 				; optimize OK (helpers.inc), line = 59
  3078
  3079 988E A9 10			lda #$10
  3080 9890 85 8C			sta :ecx
  3081 9892 A5 4B			lda TOTALXMS
  3082 9894 85 84			sta :eax
  3083 					.ifdef fmulinit
  3084 					fmulu_8
  3085 					els
  3086 9896 20 C3 83			imulCL
  3087 					eif
  3088 9899 A5 84			lda :eax
  3089 989B 18 69 23			add #$23
  3090 989E 8D 18 3F			sta MEMAVAILABLE
  3091 98A1 A5 85			lda :eax+1
  3092 98A3 69 00			adc #$00
  3093 98A5 8D 19 3F			sta MEMAVAILABLE+1
  3094
  3095 				; optimize OK (helpers.inc), line = 60
  3096
  3097 98A8 C9 27			cmp #$27
  3098 98AA D0 05			bne @+
  3099 98AC AD 18 3F			lda MEMAVAILABLE
  3100 98AF C9 10			cmp #$10
  3101 				@
  3102 98B1 B0 08			jcs l_0799
  3103 98B3 A9 F9			lda #$F9
  3104 98B5 85 D4			sta SCRADR
  3105 98B7 A9 39			lda #$39
  3106 98B9 85 D5			sta SCRADR+1
  3107 98BB			l_0799
  3108
  3109 				; optimize OK (helpers.inc), line = 61
  3110
  3111 98BB AD 19 3F			lda MEMAVAILABLE+1
  3112 98BE C9 03			cmp #$03
  3113 98C0 D0 05			bne @+
  3114 98C2 AD 18 3F			lda MEMAVAILABLE
  3115 98C5 C9 E8			cmp #$E8
  3116 				@
  3117 98C7 B0 08			jcs l_07B1
  3118 98C9 A9 FA			lda #$FA
  3119 98CB 85 D4			sta SCRADR
  3120 98CD A9 39			lda #$39
  3121 98CF 85 D5			sta SCRADR+1
  3122 98D1			l_07B1
  3123
  3124 				; optimize OK (helpers.inc), line = 62
  3125
  3126 98D1 AD 19 3F			lda MEMAVAILABLE+1
  3127 98D4 D0 0F			jne l_07C9
  3128 98D6 AD 18 3F			lda MEMAVAILABLE
  3129 98D9 C9 64			cmp #$64
  3130 98DB B0 08			jcs l_07C9
  3131 98DD A9 FB			lda #$FB
  3132 98DF 85 D4			sta SCRADR
  3133 98E1 A9 39			lda #$39
  3134 98E3 85 D5			sta SCRADR+1
  3135 98E5			l_07C9
  3136
  3137 				; optimize OK (helpers.inc), line = 63
  3138
  3139 98E5 AD 19 3F			lda MEMAVAILABLE+1
  3140 98E8 D0 0F			jne l_07E1
  3141 98EA AD 18 3F			lda MEMAVAILABLE
  3142 98ED C9 0A			cmp #$0A
  3143 98EF B0 08			jcs l_07E1
  3144 98F1 A9 FC			lda #$FC
  3145 98F3 85 D4			sta SCRADR
  3146 98F5 A9 39			lda #$39
  3147 98F7 85 D5			sta SCRADR+1
  3148 98F9			l_07E1
  3149
  3150 				; optimize OK (helpers.inc), line = 64
  3151
  3152 98F9 A5 D4			lda SCRADR
  3153 98FB 8D 16 3F			sta OSCRADR
  3154 98FE A5 D5			lda SCRADR+1
  3155 9900 8D 17 3F			sta OSCRADR+1
  3156
  3157 				; optimize OK (helpers.inc), line = 65
  3158
  3159 9903 A9 09			lda #$09
  3160 9905 85 88			sta PUTINTTEXT.S
  3161 9907 A9 80			lda #$80
  3162 9909 85 89			sta PUTINTTEXT.S+1
  3163 990B 20 3C 94			jsr PUTINTTEXT
  3164 990E AD 18 3F			lda MEMAVAILABLE
  3165 9911 8D 0D 3F			sta PUTINT.VALUE
  3166 9914 AD 19 3F			lda MEMAVAILABLE+1
  3167 9917 8D 0E 3F			sta PUTINT.VALUE+1
  3168 991A 20 05 95			jsr PUTINT
  3169 991D A9 0F			lda #$0F
  3170 991F 85 88			sta PUTINTTEXT.S
  3171 9921 A9 80			lda #$80
  3172 9923 85 89			sta PUTINTTEXT.S+1
  3173 9925 20 3C 94			jsr PUTINTTEXT
  3174
  3175 				; optimize OK (helpers.inc), line = 66
  3176
  3177 9928 AD 00 05			lda adr.FN
  3178 992B 8D 15 3F			sta L
  3179
  3180 				; optimize OK (helpers.inc), line = 67
  3181
  3182 992E D0 03			jne l_0809
  3183 9930 4C 63 99			jmp @exit					; exit
  3184 9933			l_0809
  3185
  3186 				; optimize OK (helpers.inc), line = 68
  3187
  3188 9933 AD 15 3F			lda L
  3189 9936 C9 11			cmp #$11
  3190 9938 90 05			jcc l_081E
  3191 993A A9 10			lda #$10
  3192 993C 8D 00 05			sta adr.FN+$00
  3193 993F			l_081E
  3194
  3195 				; optimize OK (helpers.inc), line = 69
  3196
  3197 993F AD 16 3F			lda OSCRADR
  3198 9942 AC 17 3F			ldy OSCRADR+1
  3199 9945 38 ED 15 3F			sub L
  3200 9949 B0 01			scs
  3201 994B 88				dey
  3202 994C 38 E9 01			sub #$01
  3203 994F 85 D4			sta SCRADR
  3204 9951 B0 01			scs
  3205 9953 88				dey
  3206 9954 84 D5			sty SCRADR+1
  3207 9956 AD A5 A7			lda FN
  3208 9959 85 88			sta PUTASCTEXT.S
  3209 995B AD A6 A7			lda FN+1
  3210 995E 85 89			sta PUTASCTEXT.S+1
  3211 9960 20 65 94			jsr PUTASCTEXT
  3212
  3213 				; ------------------------------------------------------------
  3214
  3215 = 3F15			L	= DATAORIGIN+$0095
  3216 = 3F16			OSCRADR	= DATAORIGIN+$0096
  3217 = 3F18			MEMAVAILABLE	= DATAORIGIN+$0098
  3218
  3219 = 3F15			@VarData	= L
  3220 = 0005			@VarDataSize	= 5
  3221
  3222 9963			@exit
  3223 					.ifdef @new
  3224 					lda <@VarData
  3225 					sta :ztmp
  3226 					lda >@VarData
  3227 					ldy #@VarDataSize-1
  3228 					jmp @FreeMem
  3229 					els
  3230 9963 60				rts						; ret
  3231 					eif
  3232 				.endl
  3233
  3234 9964			.local	CLEARUVMETERS					; PROCEDURE | ASSEMBLER
  3235
  3236 				; -------------------  ASM Block 00000109  -------------------
  3237
  3238 9964			  icl 'asms/uvmeters_clear.a65'
Source: uvmeters_clear.a65
     1 9964			clearUVMeter:
     2 9964 8A 48		  txa:pha
     3
     4 9966 A9 22		  lda #<SCREEN_CHANNELS
     5 9968 85 D4		  sta scradr
     6 996A A9 37		  lda #>SCREEN_CHANNELS
     7 996C 85 D5		  sta scradr+1
     8
     9 996E A2 00		  ldx #0
    10 9970			clearLoop:
    11 9970 A0 03		  ldy #3
    12 9972 A9 41		  lda #$41
    13 9974			VClr:
    14 9974 91 D4		  sta (scradr),y
    15 9976 88			  dey
    16 9977 91 D4		  sta (scradr),y
    17 9979 88			  dey
    18 997A 91 D4		  sta (scradr),y
    19 997C 88			  dey
    20 997D 91 D4		  sta (scradr),y
    21 997F 88			  dey
    22
    23 9980			dontClear:
    24 9980 A5 D4		  lda scradr
    25 9982 18 69 28		  add #40
    26 9985 85 D4		  sta scradr
    27 9987 90 02 E6 D5		  scc:inc scradr+1
    28
    29 998B E8			  inx
    30 998C E0 10		  cpx #16
    31 998E D0 E0		  bne clearLoop
    32
    33 9990 68 AA		  pla:tax
  3239
  3240 9992			@exit
  3241 					.ifdef @new
  3242 					lda <@VarData
  3243 					sta :ztmp
  3244 					lda >@VarData
  3245 					ldy #@VarDataSize-1
  3246 					jmp @FreeMem
  3247 					els
  3248 9992 60				rts						; ret
  3249 					eif
  3250 				.endl
  3251
  3252 9993			.local	EXIT2DOS					; PROCEDURE
  3253
  3254 				; optimize FAIL ('STOPMIDI', helpers.inc), line = 80
  3255
  3256 9993 20 13 98			jsr STOPMIDI
  3257
  3258 				; optimize OK (helpers.inc), line = 81
  3259
  3260 9996 A9 00			lda #$00
  3261 9998 20 7F 8A			jsr CIO.CLS
  3262 999B A9 00			lda #$00
  3263 999D 8D B1 3E			sta CIO.OPN.CHN
  3264 99A0 A9 0C			lda #$0C
  3265 99A2 8D B2 3E			sta CIO.OPN.AX1
  3266 99A5 A9 00			lda #$00
  3267 99A7 8D B3 3E			sta CIO.OPN.AX2
  3268 99AA A9 13			lda #$13
  3269 99AC 8D B4 3E			sta CIO.OPN.DEVICE
  3270 99AF A9 80			lda #$80
  3271 99B1 8D B5 3E			sta CIO.OPN.DEVICE+1
  3272 99B4 20 41 8A			jsr CIO.OPN
  3273 99B7 A9 01			lda #$01
  3274 99B9 85 41			sta SOUNDR
  3275 99BB			@exit
  3276 					.ifdef @new
  3277 					lda <@VarData
  3278 					sta :ztmp
  3279 					lda >@VarData
  3280 					ldy #@VarDataSize-1
  3281 					jmp @FreeMem
  3282 					els
  3283 99BB 60				rts						; ret
  3284 					eif
  3285 				.endl
  3286
  3287 99BC			.local	STATUSLOOP					; PROCEDURE
  3288
  3289 				; optimize OK (status.inc), line = 11
  3290
  3291 99BC A9 CE			lda #$CE
  3292 99BE 85 D4			sta SCRADR
  3293 99C0 A9 39			lda #$39
  3294 99C2 85 D5			sta SCRADR+1
  3295
  3296 				; optimize OK (status.inc), line = 12
  3297
  3298 99C4 A5 4A			lda PLAYERSTATUS
  3299 99C6 29 0C			and #$0C
  3300 99C8 4A				lsr @
  3301 99C9 4A				lsr @
  3302 99CA 85 D7			sta V
  3303
  3304 				; optimize OK (status.inc), line = 13
  3305
  3306 99CC 0A				asl @
  3307 99CD A8				tay
  3308 99CE B9 0A 81			lda adr.SLOOP,y
  3309 99D1 85 88			sta PUTINTTEXT.S
  3310 99D3 B9 0B 81			lda adr.SLOOP+1,y
  3311 99D6 85 89			sta PUTINTTEXT.S+1
  3312 99D8 20 3C 94			jsr PUTINTTEXT
  3313
  3314 				; ------------------------------------------------------------
  3315
  3316 = 810A			adr.SLOOP	= CODEORIGIN+$010A
  3317 99DB			.var SLOOP	= adr.SLOOP .word
  3318 99DB			@exit
  3319 					.ifdef @new
  3320 					lda <@VarData
  3321 					sta :ztmp
  3322 					lda >@VarData
  3323 					ldy #@VarDataSize-1
  3324 					jmp @FreeMem
  3325 					els
  3326 99DB 60				rts						; ret
  3327 					eif
  3328 = 99DC 0A 81		SLOOP
  3328 				.endl
  3329
  3330 99DE			.local	STATUSPLAYING					; PROCEDURE
  3331
  3332 				; optimize OK (status.inc), line = 18
  3333
  3334 99DE A9 C8			lda #$C8
  3335 99E0 85 D4			sta SCRADR
  3336 99E2 A9 39			lda #$39
  3337 99E4 85 D5			sta SCRADR+1
  3338
  3339 				; optimize OK (status.inc), line = 19
  3340
  3341 99E6 AD BB 3E			lda MIDFILES.TOTALTRACKS
  3342 99E9 F0 39			jeq l_087F
  3343
  3344 				; optimize OK (status.inc), line = 21
  3345
  3346 99EB A9 27			lda #$27
  3347 99ED 85 88			sta PUTINTTEXT.S
  3348 99EF A9 80			lda #$80
  3349 99F1 85 89			sta PUTINTTEXT.S+1
  3350 99F3 20 3C 94			jsr PUTINTTEXT
  3351
  3352 				; optimize OK (status.inc), line = 22
  3353
  3354 99F6 A9 DD			lda #$DD
  3355 99F8 85 D4			sta SCRADR
  3356 99FA A9 39			lda #$39
  3357 99FC 85 D5			sta SCRADR+1
  3358 99FE A9 2E			lda #$2E
  3359 9A00 85 88			sta PUTINTTEXT.S
  3360 9A02 A9 80			lda #$80
  3361 9A04 85 89			sta PUTINTTEXT.S+1
  3362 9A06 20 3C 94			jsr PUTINTTEXT
  3363
  3364 				; optimize OK (status.inc), line = 23
  3365
  3366 9A09 A5 4A			lda PLAYERSTATUS
  3367 9A0B 29 40			and #$40
  3368 9A0D F0 0C			jeq l_089E
  3369
  3370 				; optimize FAIL ('MIDFILES.INITTIMER', status.inc), line = 25
  3371
  3372 9A0F 20 58 93			jsr MIDFILES.INITTIMER
  3373
  3374 				; optimize OK (status.inc), line = 26
  3375
  3376 9A12 A5 4A			lda PLAYERSTATUS
  3377 9A14 49 40			eor #$40
  3378 9A16 85 4A			sta PLAYERSTATUS
  3379 9A18 4C 21 9A			jmp l_08B3
  3380 9A1B			l_089E
  3381
  3382 				; optimize OK (status.inc), line = 29
  3383
  3384 9A1B A5 F5			lda MIDFILES._TIMERSTATUS
  3385 9A1D 29 7F			and #$7F
  3386 9A1F 85 F5			sta MIDFILES._TIMERSTATUS
  3387 9A21			l_08B3
  3388 9A21 4C 40 9A			jmp l_08C9
  3389 9A24			l_087F
  3390
  3391 				; optimize OK (status.inc), line = 33
  3392
  3393 9A24 A9 02			lda #$02
  3394 9A26 85 88			sta PUTINTTEXT.S
  3395 9A28 A9 80			lda #$80
  3396 9A2A 85 89			sta PUTINTTEXT.S+1
  3397 9A2C 20 3C 94			jsr PUTINTTEXT
  3398
  3399 				; optimize OK (status.inc), line = 34
  3400
  3401 9A2F A9 DD			lda #$DD
  3402 9A31 85 D4			sta SCRADR
  3403 9A33 A9 39			lda #$39
  3404 9A35 85 D5			sta SCRADR+1
  3405 9A37 85 88			sta PUTINTTEXT.S
  3406 9A39 A9 80			lda #$80
  3407 9A3B 85 89			sta PUTINTTEXT.S+1
  3408 9A3D 20 3C 94			jsr PUTINTTEXT
  3409 9A40			l_08C9
  3410 9A40			@exit
  3411 					.ifdef @new
  3412 					lda <@VarData
  3413 					sta :ztmp
  3414 					lda >@VarData
  3415 					ldy #@VarDataSize-1
  3416 					jmp @FreeMem
  3417 					els
  3418 9A40 60				rts						; ret
  3419 					eif
  3420 				.endl
  3421
  3422 9A41			.local	STATUSPAUSE					; PROCEDURE
  3423
  3424 				; optimize OK (status.inc), line = 40
  3425
  3426 9A41 A5 4A			lda PLAYERSTATUS
  3427 9A43 29 40			and #$40
  3428 9A45 F0 03			jeq l_08EB
  3429 9A47 4C 76 9A			jmp @exit					; exit
  3430 9A4A			l_08EB
  3431
  3432 				; optimize OK (status.inc), line = 41
  3433
  3434 9A4A A9 C8			lda #$C8
  3435 9A4C 85 D4			sta SCRADR
  3436 9A4E A9 39			lda #$39
  3437 9A50 85 D5			sta SCRADR+1
  3438 9A52 A9 44			lda #$44
  3439 9A54 85 88			sta PUTINTTEXT.S
  3440 9A56 A9 80			lda #$80
  3441 9A58 85 89			sta PUTINTTEXT.S+1
  3442 9A5A 20 3C 94			jsr PUTINTTEXT
  3443
  3444 				; optimize OK (status.inc), line = 42
  3445
  3446 9A5D A9 DD			lda #$DD
  3447 9A5F 85 D4			sta SCRADR
  3448 9A61 A9 39			lda #$39
  3449 9A63 85 D5			sta SCRADR+1
  3450 9A65 A9 4B			lda #$4B
  3451 9A67 85 88			sta PUTINTTEXT.S
  3452 9A69 A9 80			lda #$80
  3453 9A6B 85 89			sta PUTINTTEXT.S+1
  3454 9A6D 20 3C 94			jsr PUTINTTEXT
  3455
  3456 				; optimize OK (status.inc), line = 43
  3457
  3458 9A70 A5 F5			lda MIDFILES._TIMERSTATUS
  3459 9A72 09 80			ora #$80
  3460 9A74 85 F5			sta MIDFILES._TIMERSTATUS
  3461 9A76			@exit
  3462 					.ifdef @new
  3463 					lda <@VarData
  3464 					sta :ztmp
  3465 					lda >@VarData
  3466 					ldy #@VarDataSize-1
  3467 					jmp @FreeMem
  3468 					els
  3469 9A76 60				rts						; ret
  3470 					eif
  3471 				.endl
  3472
  3473 9A77			.local	STATUSSTOPPED					; PROCEDURE
  3474
  3475 				; optimize OK (status.inc), line = 48
  3476
  3477 9A77 AD BB 3E			lda MIDFILES.TOTALTRACKS
  3478 9A7A D0 03			jne l_091A
  3479 9A7C 4C D9 9A			jmp @exit					; exit
  3480 9A7F			l_091A
  3481
  3482 				; optimize OK (status.inc), line = 49
  3483
  3484 9A7F A5 4A			lda PLAYERSTATUS
  3485 9A81 29 40			and #$40
  3486 9A83 F0 03			jeq l_0933
  3487 9A85 4C D9 9A			jmp @exit					; exit
  3488 9A88			l_0933
  3489
  3490 				; optimize OK (status.inc), line = 50
  3491
  3492 9A88 A5 4A			lda PLAYERSTATUS
  3493 9A8A 09 40			ora #$40
  3494 9A8C 85 4A			sta PLAYERSTATUS
  3495
  3496 				; optimize OK (status.inc), line = 51
  3497
  3498 9A8E A9 C8			lda #$C8
  3499 9A90 85 D4			sta SCRADR
  3500 9A92 A9 39			lda #$39
  3501 9A94 85 D5			sta SCRADR+1
  3502 9A96 A9 56			lda #$56
  3503 9A98 85 88			sta PUTINTTEXT.S
  3504 9A9A A9 80			lda #$80
  3505 9A9C 85 89			sta PUTINTTEXT.S+1
  3506 9A9E 20 3C 94			jsr PUTINTTEXT
  3507
  3508 				; optimize OK (status.inc), line = 52
  3509
  3510 9AA1 A9 DD			lda #$DD
  3511 9AA3 85 D4			sta SCRADR
  3512 9AA5 A9 39			lda #$39
  3513 9AA7 85 D5			sta SCRADR+1
  3514 9AA9 A9 5D			lda #$5D
  3515 9AAB 85 88			sta PUTINTTEXT.S
  3516 9AAD A9 80			lda #$80
  3517 9AAF 85 89			sta PUTINTTEXT.S+1
  3518 9AB1 20 3C 94			jsr PUTINTTEXT
  3519
  3520 				; optimize FAIL ('STOPMIDI', status.inc), line = 53
  3521
  3522 9AB4 20 13 98			jsr STOPMIDI
  3523
  3524 				; optimize OK (status.inc), line = 54
  3525
  3526 9AB7 A9 00			lda #$00
  3527 9AB9 85 88			sta SYSTEM.MOVE_0153.SOURCE
  3528 9ABB A9 2C			lda #$2C
  3529 9ABD 85 89			sta SYSTEM.MOVE_0153.SOURCE+1
  3530 9ABF A9 00			lda #$00
  3531 9AC1 85 8C			sta SYSTEM.MOVE_0153.DEST
  3532 9AC3 A9 2E			lda #$2E
  3533 9AC5 85 8D			sta SYSTEM.MOVE_0153.DEST+1
  3534 9AC7 A9 00			lda #$00
  3535 9AC9 85 84			sta SYSTEM.MOVE_0153.COUNT
  3536 9ACB A9 02			lda #$02
  3537 9ACD 85 85			sta SYSTEM.MOVE_0153.COUNT+1
  3538 9ACF				.local +MAIN.SYSTEM.MOVE_0153
  3539 9ACF				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0153.M@INLINE [Source: MIDICar Player.a65]
     4 9ACF 20 CF 82			jsr @move
Source: MIDICar Player.a65
  3540 					.endl
  3541
  3542 				; optimize OK (status.inc), line = 55
  3543
  3544 9AD2 A9 00			lda #$00
  3545 9AD4 85 D6			sta CHN
  3546
  3547 				; optimize FAIL ('CLEARUVMETERS', status.inc), line = 56
  3548
  3549 9AD6 20 64 99			jsr CLEARUVMETERS
  3550 9AD9			@exit
  3551 					.ifdef @new
  3552 					lda <@VarData
  3553 					sta :ztmp
  3554 					lda >@VarData
  3555 					ldy #@VarDataSize-1
  3556 					jmp @FreeMem
  3557 					els
  3558 9AD9 60				rts						; ret
  3559 					eif
  3560 				.endl
  3561
  3562 9ADA			.local	STATUSLOADING					; PROCEDURE
  3563
  3564 				; optimize OK (status.inc), line = 61
  3565
  3566 9ADA A9 DD			lda #$DD
  3567 9ADC 85 D4			sta SCRADR
  3568 9ADE A9 39			lda #$39
  3569 9AE0 85 D5			sta SCRADR+1
  3570 9AE2 A9 68			lda #$68
  3571 9AE4 85 88			sta PUTINTTEXT.S
  3572 9AE6 A9 80			lda #$80
  3573 9AE8 85 89			sta PUTINTTEXT.S+1
  3574 9AEA 20 3C 94			jsr PUTINTTEXT
  3575 9AED			@exit
  3576 					.ifdef @new
  3577 					lda <@VarData
  3578 					sta :ztmp
  3579 					lda >@VarData
  3580 					ldy #@VarDataSize-1
  3581 					jmp @FreeMem
  3582 					els
  3583 9AED 60				rts						; ret
  3584 					eif
  3585 				.endl
  3586
  3587 9AEE			.local	STATUSREADDIRECTORY				; PROCEDURE
  3588
  3589 				; optimize OK (status.inc), line = 66
  3590
  3591 9AEE A9 DD			lda #$DD
  3592 9AF0 85 D4			sta SCRADR
  3593 9AF2 A9 39			lda #$39
  3594 9AF4 85 D5			sta SCRADR+1
  3595 9AF6 A9 73			lda #$73
  3596 9AF8 85 88			sta PUTINTTEXT.S
  3597 9AFA A9 80			lda #$80
  3598 9AFC 85 89			sta PUTINTTEXT.S+1
  3599 9AFE 20 3C 94			jsr PUTINTTEXT
  3600 9B01			@exit
  3601 					.ifdef @new
  3602 					lda <@VarData
  3603 					sta :ztmp
  3604 					lda >@VarData
  3605 					ldy #@VarDataSize-1
  3606 					jmp @FreeMem
  3607 					els
  3608 9B01 60				rts						; ret
  3609 					eif
  3610 				.endl
  3611
  3612 9B02			.local	STATUSERROR					; PROCEDURE
  3613 9B02 8D 1A 3F			sta ERR
  3614
  3615 				; optimize OK (status.inc), line = 76
  3616
  3617 9B05 A9 FF			lda #$FF
  3618 9B07 8D FC 02			sta KEYB
  3619
  3620 				; optimize OK (status.inc), line = 77
  3621
  3622 9B0A A9 DD			lda #$DD
  3623 9B0C 85 D4			sta SCRADR
  3624 9B0E A9 39			lda #$39
  3625 9B10 85 D5			sta SCRADR+1
  3626
  3627 				; optimize OK (status.inc), line = 78
  3628
  3629 9B12 AD 1A 3F			lda ERR
  3630 9B15 8D 1B 3F			sta @CASETMP_0003
  3631 9B18 C9 64			cmp #$64
  3632 9B1A D0 0E			jne l_0981
  3633 				@
  3634
  3635 				; optimize OK (status.inc), line = 79
  3636
  3637 9B1C A9 88			lda #$88
  3638 9B1E 85 88			sta PUTINTTEXT.S
  3639 9B20 A9 80			lda #$80
  3640 9B22 85 89			sta PUTINTTEXT.S+1
  3641 9B24 20 3C 94			jsr PUTINTTEXT
  3642
  3643 9B27 4C 7B 9B			jmp a_0003
  3644 9B2A			l_0981
  3645 9B2A C9 65			cmp #$65
  3646 9B2C D0 0E			jne l_098C
  3647 				@
  3648
  3649 				; optimize OK (status.inc), line = 80
  3650
  3651 9B2E A9 9E			lda #$9E
  3652 9B30 85 88			sta PUTINTTEXT.S
  3653 9B32 A9 80			lda #$80
  3654 9B34 85 89			sta PUTINTTEXT.S+1
  3655 9B36 20 3C 94			jsr PUTINTTEXT
  3656
  3657 9B39 4C 7B 9B			jmp a_0003
  3658 9B3C			l_098C
  3659 9B3C C9 66			cmp #$66
  3660 9B3E D0 0E			jne l_0997
  3661 				@
  3662
  3663 				; optimize OK (status.inc), line = 81
  3664
  3665 9B40 A9 B4			lda #$B4
  3666 9B42 85 88			sta PUTINTTEXT.S
  3667 9B44 A9 80			lda #$80
  3668 9B46 85 89			sta PUTINTTEXT.S+1
  3669 9B48 20 3C 94			jsr PUTINTTEXT
  3670
  3671 9B4B 4C 7B 9B			jmp a_0003
  3672 9B4E			l_0997
  3673
  3674 				; optimize OK (status.inc), line = 83
  3675
  3676 9B4E A9 80			lda #$80
  3677 9B50 8D 08 3F			sta PUTTEXTINVERT
  3678
  3679 				; optimize OK (status.inc), line = 84
  3680
  3681 9B53 A9 C7			lda #$C7
  3682 9B55 85 88			sta PUTINTTEXT.S
  3683 9B57 A9 80			lda #$80
  3684 9B59 85 89			sta PUTINTTEXT.S+1
  3685 9B5B 20 3C 94			jsr PUTINTTEXT
  3686 9B5E AD 1A 3F			lda ERR
  3687 9B61 8D 0D 3F			sta PUTINT.VALUE
  3688 9B64 A9 00			lda #$00
  3689 9B66 8D 0E 3F			sta PUTINT.VALUE+1
  3690 9B69 20 05 95			jsr PUTINT
  3691 9B6C A4 D5			ldy SCRADR+1
  3692 9B6E 84 81			sty :bp+1
  3693 9B70 A4 D4			ldy SCRADR
  3694 9B72 A9 CE			lda #$CE
  3695 9B74 91 80			sta (:bp),y
  3696
  3697 				; optimize OK (status.inc), line = 85
  3698
  3699 9B76 A9 00			lda #$00
  3700 9B78 8D 08 3F			sta PUTTEXTINVERT
  3701 9B7B			a_0003
  3702
  3703 				; --- WhileProlog
  3704 9B7B			l_09B5
  3705
  3706 				; optimize OK (status.inc), line = 87
  3707
  3708 9B7B AD FC 02			lda KEYB
  3709 9B7E C9 FF			cmp #$FF
  3710 9B80 F0 F9			jeq l_09B5
  3711
  3712 				; optimize FAIL ('CLEARSTATUS', status.inc), line = 88
  3713
  3714 9B82 20 63 98			jsr CLEARSTATUS
  3715
  3716 				; ------------------------------------------------------------
  3717
  3718 = 3F1A			ERR	= DATAORIGIN+$009A
  3719 = 3F1B			@CASETMP_0003	= DATAORIGIN+$009B
  3720
  3721 = 3F1A			@VarData	= ERR
  3722 = 0002			@VarDataSize	= 2
  3723
  3724 9B85			@exit
  3725 					.ifdef @new
  3726 					lda <@VarData
  3727 					sta :ztmp
  3728 					lda >@VarData
  3729 					ldy #@VarDataSize-1
  3730 					jmp @FreeMem
  3731 					els
  3732 9B85 60				rts						; ret
  3733 					eif
  3734 				.endl
  3735
  3736 9B86			.local	LOADSONG					; FUNCTION
  3737
  3738 9B86 4C DC 9B			jmp l_09C6
  3739
  3740 9B89			.local	LOADPRC						; PROCEDURE
  3741 9B89 8D 1F 3F			sta V
  3742
  3743 				; optimize OK (load.inc), line = 7
  3744
  3745 9B8C F0 4D			jeq l_09DB
  3746
  3747 				; optimize OK (load.inc), line = 9
  3748
  3749 9B8E A9 80			lda #$80
  3750 9B90 8D 08 3F			sta PUTTEXTINVERT
  3751
  3752 				; optimize OK (load.inc), line = 10
  3753
  3754 9B93 A9 E6			lda #$E6
  3755 9B95 85 D4			sta SCRADR
  3756 9B97 A9 39			lda #$39
  3757 9B99 85 D5			sta SCRADR+1
  3758
  3759 				; optimize OK (load.inc), line = 11
  3760
  3761 9B9B AD 1F 3F			lda V
  3762 9B9E 38 E9 01			sub #$01
  3763 9BA1 8D 0D 3F			sta PUTINT.VALUE
  3764 9BA4 A9 00			lda #$00
  3765 9BA6 E9 00			sbc #$00
  3766 9BA8 8D 0E 3F			sta PUTINT.VALUE+1
  3767 9BAB 20 05 95			jsr PUTINT
  3768 9BAE A4 D5			ldy SCRADR+1
  3769 9BB0 84 81			sty :bp+1
  3770 9BB2 A4 D4			ldy SCRADR
  3771 9BB4 A9 8F			lda #$8F
  3772 9BB6 91 80			sta (:bp),y
  3773 9BB8 E6 D4			inc SCRADR
  3774 9BBA D0 02			sne
  3775 9BBC E6 D5			inc SCRADR+1
  3776
  3777 				; optimize OK (load.inc), line = 12
  3778
  3779 9BBE AD BB 3E			lda MIDFILES.TOTALTRACKS
  3780 9BC1 8D 0D 3F			sta PUTINT.VALUE
  3781 9BC4 A9 00			lda #$00
  3782 9BC6 8D 0E 3F			sta PUTINT.VALUE+1
  3783 9BC9 20 05 95			jsr PUTINT
  3784
  3785 				; optimize OK (load.inc), line = 13
  3786
  3787 9BCC A4 D5			ldy SCRADR+1
  3788 9BCE 84 81			sty :bp+1
  3789 9BD0 A4 D4			ldy SCRADR
  3790 9BD2 A9 CE			lda #$CE
  3791 9BD4 91 80			sta (:bp),y
  3792
  3793 				; optimize OK (load.inc), line = 14
  3794
  3795 9BD6 A9 00			lda #$00
  3796 9BD8 8D 08 3F			sta PUTTEXTINVERT
  3797 9BDB			l_09DB
  3798
  3799 				; ------------------------------------------------------------
  3800
  3801 = 3F1F			V	= DATAORIGIN+$009F
  3802
  3803 = 3F1F			@VarData	= V
  3804 = 0001			@VarDataSize	= 1
  3805
  3806 9BDB			@exit
  3807 					.ifdef @new
  3808 					lda <@VarData
  3809 					sta :ztmp
  3810 					lda >@VarData
  3811 					ldy #@VarDataSize-1
  3812 					jmp @FreeMem
  3813 					els
  3814 9BDB 60				rts						; ret
  3815 					eif
  3816 				.endl
  3817 9BDC			l_09C6
  3818
  3819 				; optimize OK (load.inc), line = 19
  3820
  3821 9BDC AD 0A 04			lda LAST_BANK
  3822 9BDF 85 E1			sta MIDFILES._BANK
  3823 9BE1 AD 0B 04			lda LAST_ADR
  3824 9BE4 85 E2			sta MIDFILES._ADR
  3825 9BE6 AD 0C 04			lda LAST_ADR+1
  3826 9BE9 85 E3			sta MIDFILES._ADR+1
  3827
  3828 				; optimize FAIL ('CLEARSTATUS', load.inc), line = 20
  3829
  3830 9BEB 20 63 98			jsr CLEARSTATUS
  3831
  3832 				; optimize FAIL ('STATUSLOADING', load.inc), line = 21
  3833
  3834 9BEE 20 DA 9A			jsr STATUSLOADING
  3835
  3836 				; optimize OK (load.inc), line = 22
  3837
  3838 9BF1 A9 89			lda <LOADPRC
  3839 9BF3 8D D4 3E			sta MIDFILES.LOADPROCESS
  3840 9BF6 A9 9B			lda >LOADPRC
  3841 9BF8 8D D5 3E			sta MIDFILES.LOADPROCESS+1
  3842 9BFB A9 00			lda #$00
  3843 9BFD 85 1F			sta THI
  3844
  3845 				; optimize OK (load.inc), line = 23
  3846
  3847 9BFF AD 1C 3F			lda FILENAME
  3848 9C02 8D DA 3E			sta MIDFILES.LOADMID.FN
  3849 9C05 AD 1D 3F			lda FILENAME+1
  3850 9C08 8D DB 3E			sta MIDFILES.LOADMID.FN+1
  3851 9C0B 20 3E 8B			jsr MIDFILES.LOADMID
  3852 9C0E AD DC 3E			lda MIDFILES.LOADMID.RESULT
  3853 9C11 8D 1E 3F			sta RESULT
  3854
  3855 				; optimize OK (load.inc), line = 24
  3856
  3857 9C14 A9 FF			lda #$FF
  3858 9C16 85 1F			sta THI
  3859
  3860 				; optimize FAIL ('CLEARSTATUS', load.inc), line = 25
  3861
  3862 9C18 20 63 98			jsr CLEARSTATUS
  3863
  3864 				; optimize OK (load.inc), line = 26
  3865
  3866 9C1B AD 1E 3F			lda RESULT
  3867 9C1E 29 FC			and #$FC
  3868 9C20 F0 0D			jeq l_0A38
  3869
  3870 				; optimize OK (load.inc), line = 28
  3871
  3872 9C22 A9 FF			lda #$FF
  3873 9C24 8D 04 04			sta CURPLAY
  3874 9C27 A9 00			lda #$00
  3875 9C29 8D BB 3E			sta MIDFILES.TOTALTRACKS
  3876 9C2C 4C 50 9C			jmp l_0A4A
  3877 9C2F			l_0A38
  3878
  3879 				; optimize OK (load.inc), line = 32
  3880
  3881 9C2F A9 00			lda #$00
  3882 9C31 85 88			sta SYSTEM.MOVE_0153.SOURCE
  3883 9C33 A9 2E			lda #$2E
  3884 9C35 85 89			sta SYSTEM.MOVE_0153.SOURCE+1
  3885 9C37 A9 00			lda #$00
  3886 9C39 85 8C			sta SYSTEM.MOVE_0153.DEST
  3887 9C3B A9 2C			lda #$2C
  3888 9C3D 85 8D			sta SYSTEM.MOVE_0153.DEST+1
  3889 9C3F A9 00			lda #$00
  3890 9C41 85 84			sta SYSTEM.MOVE_0153.COUNT
  3891 9C43 A9 02			lda #$02
  3892 9C45 85 85			sta SYSTEM.MOVE_0153.COUNT+1
  3893 9C47				.local +MAIN.SYSTEM.MOVE_0153
  3894 9C47				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0153.M@INLINE [Source: MIDICar Player.a65]
     4 9C47 20 CF 82			jsr @move
Source: MIDICar Player.a65
  3895 					.endl
  3896
  3897 				; optimize OK (load.inc), line = 33
  3898
  3899 9C4A AD 02 04			lda CURFILE
  3900 9C4D 8D 04 04			sta CURPLAY
  3901 9C50			l_0A4A
  3902 9C50			@exit
  3903
  3904 				; ------------------------------------------------------------
  3905
  3906 = 3F1C			FILENAME	= DATAORIGIN+$009C
  3907 = 3F1E			RESULT	= DATAORIGIN+$009E
  3908
  3909 = 3F1C			@VarData	= FILENAME
  3910 = 0002			@VarDataSize	= 2
  3911
  3912 9C50 60				rts						; ret
  3913 				.endl
  3914
  3915 9C51			.local	GETENTRY					; FUNCTION | ASSEMBLER | REGISTER
  3916
  3917 				; -------------------  ASM Block 00000110  -------------------
  3918
  3919 9C51			  icl 'asms/list_getEntry.a65'
Source: list_getEntry.a65
     1 = 0088			hlpptr = $88;
     2
     3 9C51			getEntry:
     4 9C51 8A 48		  txa:pha
     5
     6 9C53 A5 DA		  lda fileList
     7 9C55 8D 66 9C		  sta entryptr
     8 9C58 A5 DB		  lda fileList+1
     9 9C5A 8D 67 9C		  sta entryptr+1
    10
    11 9C5D A9 00		  lda #0
    12 9C5F 85 90		  sta result
    13
    14 9C61 A2 03		  ldx #3
    15 9C63 A0 01		  ldy #1
    16 9C65			loop:
    17 9C65 BD D0 07		  lda entryptr:2000,x
    18 9C68 C9 9B		  cmp #$9B
    19 9C6A F0 06		  beq endEntry
    20 9C6C 91 88		  sta (hlpptr),y
    21 9C6E E8			  inx
    22 9C6F C8			  iny
    23 9C70 D0 F3		  bne loop
    24
    25 9C72			endEntry:
    26 9C72 A9 9B		  lda #$9B
    27 9C74 91 88		  sta (hlpptr),y
    28
    29 9C76 C0 01		  cpy #1
    30 9C78 D0 03		  bne store
    31 9C7A 68 AA		  pla:tax
    32 9C7C 60			  rts
    33
    34 9C7D			store:
    35 9C7D 8A 48		  txa:pha
    36
    37 9C7F A9 01		  lda #1
    38 9C81 85 90		  sta result
    39
    40 9C83 68 AA		  pla:tax
    41 9C85 38			  sec
    42 9C86 E9 03		  sbc #3            // decease position by 3
    43 9C88 A0 00		  ldy #0
    44 9C8A 91 88		  sta (hlpptr),y    // store as string length
    45
    46 9C8C 68 AA		  pla:tax
  3920
  3921 9C8E			@exit
  3922
  3923 				; ------------------------------------------------------------
  3924
  3925 = 0088			FN	= :EDX
  3926 = 0090			RESULT	= :STACKORIGIN-4
  3927 9C8E 60				rts						; ret
  3928 				.endl
  3929
  3930 9C8F			.local	GETENTRYSETS					; PROCEDURE | ASSEMBLER | REGISTER
  3931
  3932 				; -------------------  ASM Block 00000111  -------------------
  3933
  3934 9C8F			  icl 'asms/list_getEntrySets.a65'
Source: list_getEntrySets.a65
     1 9C8F			getEntrySets:
     2 = 0088			PTRREG = $88
     3
     4 9C8F A0 02		    ldy #2
     5 9C91			loop:
     6 9C91 B1 DA		    lda (fileList),y
     7 9C93 91 88		    sta (PTRREG),y
     8 9C95 88			    dey
     9 9C96 10 F9		    bpl loop
  3935
  3936 				; ------------------------------------------------------------
  3937
  3938 = 0088			PTR	= :EDX
  3939 9C98			@exit
  3940 					.ifdef @new
  3941 					lda <@VarData
  3942 					sta :ztmp
  3943 					lda >@VarData
  3944 					ldy #@VarDataSize-1
  3945 					jmp @FreeMem
  3946 					els
  3947 9C98 60				rts						; ret
  3948 					eif
  3949 				.endl
  3950
  3951 9C99			.local	SETENTRYSETS					; PROCEDURE | ASSEMBLER | REGISTER
  3952
  3953 				; -------------------  ASM Block 00000112  -------------------
  3954
  3955 9C99			  icl 'asms/list_setEntrySets.a65'
Source: list_setEntrySets.a65
     1 9C99			setEntrySets:
     2 = 0088			PTRREG = $88
     3
     4 9C99 A0 02		    ldy #2
     5 9C9B			loop:
     6 9C9B B1 88		    lda (PTRREG),y
     7 9C9D 91 DA		    sta (fileList),y
     8 9C9F 88			    dey
     9 9CA0 10 F9		    bpl loop
  3956
  3957 				; ------------------------------------------------------------
  3958
  3959 = 0088			PTR	= :EDX
  3960 9CA2			@exit
  3961 					.ifdef @new
  3962 					lda <@VarData
  3963 					sta :ztmp
  3964 					lda >@VarData
  3965 					ldy #@VarDataSize-1
  3966 					jmp @FreeMem
  3967 					els
  3968 9CA2 60				rts						; ret
  3969 					eif
  3970 				.endl
  3971
  3972 9CA3			.local	NEXTENTRY					; FUNCTION | ASSEMBLER
  3973
  3974 				; -------------------  ASM Block 00000113  -------------------
  3975
  3976 9CA3			  icl 'asms/list_nextEntry.a65'
Source: list_nextEntry.a65
     1 9CA3			nextEntry:
     2 9CA3 A0 03		  ldy #3
     3 9CA5			loop:
     4 9CA5 B1 DA		  lda (fileList),y
     5 9CA7 C9 9B		  cmp #$9B
     6 9CA9 F0 03		  beq endEntry
     7 9CAB C8			  iny
     8 9CAC D0 F7		  bne loop
     9
    10 9CAE			endEntry:
    11 9CAE C0 03		  cpy #3
    12 9CB0 D0 06		  bne moveEntryPtr
    13
    14 9CB2 A9 00		  lda #0
    15 9CB4 8D 20 3F		  sta result
    16 9CB7 60			  rts
    17
    18 9CB8			moveEntryPtr:
    19 9CB8 C8			  iny
    20 9CB9 98			  tya
    21 9CBA 18 65 DA		  add fileList
    22 9CBD 85 DA		  sta fileList
    23 9CBF 90 02 E6 DB		  scc:inc fileList+1
    24
    25 9CC3 A9 01		  lda #1
    26 9CC5 8D 20 3F		  sta result
  3977
  3978 9CC8			@exit
  3979
  3980 				; ------------------------------------------------------------
  3981
  3982 = 3F20			RESULT	= DATAORIGIN+$00A0
  3983 9CC8 60				rts						; ret
  3984 				.endl
  3985
  3986 9CC9			.local	GOTONENTRY					; PROCEDURE | ASSEMBLER
  3987 9CC9 8D 21 3F			sta NENTRY
  3988
  3989 				; -------------------  ASM Block 00000114  -------------------
  3990
  3991 9CCC			  icl 'asms/list_gotoNEntry.a65'
Source: list_gotoNEntry.a65
     1 9CCC			gotoNEntry:
     2 9CCC 8A 48		    txa:pha
     3
     4 9CCE A9 00		    lda #<PLAYLIST_ADDR
     5 9CD0 85 DA		    sta fileList
     6 9CD2 A9 20		    lda #>PLAYLIST_ADDR
     7 9CD4 85 DB		    sta fileList+1
     8
     9 9CD6 AE 21 3F		    ldx nEntry
    10 9CD9 F0 08		    beq exitGotoNEntry
    11
    12 9CDB			loop:
    13 9CDB 20 A3 9C		    jsr nextEntry
    14 9CDE F0 03		    beq exitGotoNEntry
    15 9CE0 CA			    dex
    16 9CE1 D0 F8		    bne loop
    17
    18 9CE3			exitGotoNEntry:
    19
    20 9CE3 68 AA		    pla:tax
  3992
  3993 				; ------------------------------------------------------------
  3994
  3995 = 3F21			NENTRY	= DATAORIGIN+$00A1
  3996
  3997 = 3F21			@VarData	= NENTRY
  3998 = 0001			@VarDataSize	= 1
  3999
  4000 9CE5			@exit
  4001 					.ifdef @new
  4002 					lda <@VarData
  4003 					sta :ztmp
  4004 					lda >@VarData
  4005 					ldy #@VarDataSize-1
  4006 					jmp @FreeMem
  4007 					els
  4008 9CE5 60				rts						; ret
  4009 					eif
  4010 				.endl
  4011
  4012 9CE6			.local	ADDTOLIST					; PROCEDURE | ASSEMBLER | REGISTER
  4013
  4014 				; -------------------  ASM Block 00000115  -------------------
  4015
  4016 9CE6			  icl 'asms/list_addToList.a65'
Source: list_addToList.a65
     1 = 0088			ptrreg = $88;
     2
     3 9CE6 8A 48		  txa:pha
     4
     5 9CE8 A0 00		  ldy #0
     6 9CEA B1 88		  lda (ptrreg),y
     7 9CEC 18 69 01		  add #1
     8 9CEF 8D 17 9D		  sta fnlen
     9
    10 9CF2 A0 00		  ldy #0
    11 9CF4 A5 E1		  lda MAIN.MIDFILES._bank
    12 9CF6 91 DA		  sta (fileList),y
    13 9CF8 C8			  iny
    14 9CF9 A5 E2		  lda MAIN.MIDFILES._adr
    15 9CFB 91 DA		  sta (fileList),y
    16 9CFD C8			  iny
    17 9CFE A5 E3		  lda MAIN.MIDFILES._adr+1
    18 9D00 91 DA		  sta (fileList),y
    19 9D02 C8			  iny
    20
    21 9D03 A5 88		  lda ptrreg
    22 9D05 8D 10 9D		  sta eptr
    23 9D08 A5 89		  lda ptrreg+1
    24 9D0A 8D 11 9D		  sta eptr+1
    25
    26 9D0D A2 01		  ldx #1
    27 9D0F			loop:
    28 9D0F BD 00 20		  lda eptr:$2000,x
    29 9D12 91 DA		  sta (fileList),y
    30 9D14 C8			  iny
    31 9D15 E8			  inx
    32 9D16 E0 00		  cpx fnlen:#00
    33 9D18 30 F5		  bmi loop
    34
    35 9D1A			storeEOFN:
    36 9D1A A9 9B		  lda #$9B
    37 9D1C 91 DA		  sta (fileList),y
    38 9D1E C8			  iny
    39
    40 9D1F 98			  tya
    41 9D20 18 65 DA		  add fileList
    42 9D23 85 DA		  sta fileList
    43 9D25 90 02 E6 DB		  scc:inc fileList+1
    44
    45 9D29 EE 03 04		  inc totalFiles
    46
    47 9D2C 68 AA		  pla:tax
  4017
  4018 				; ------------------------------------------------------------
  4019
  4020 = 0088			ENTRY	= :EDX
  4021 9D2E			@exit
  4022 					.ifdef @new
  4023 					lda <@VarData
  4024 					sta :ztmp
  4025 					lda >@VarData
  4026 					ldy #@VarDataSize-1
  4027 					jmp @FreeMem
  4028 					els
  4029 9D2E 60				rts						; ret
  4030 					eif
  4031 				.endl
  4032
  4033 9D2F			.local	CLEARLIST					; PROCEDURE
  4034
  4035 				; optimize FAIL ('RESETMEMORYPTR', list_asm.inc), line = 39
  4036
  4037 9D2F 20 42 98			jsr RESETMEMORYPTR
  4038
  4039 				; optimize OK (list_asm.inc), line = 40
  4040
  4041 9D32 A9 00			lda #$00
  4042 9D34 85 DA			sta FILELIST
  4043 9D36 A9 20			lda #$20
  4044 9D38 85 DB			sta FILELIST+1
  4045
  4046 				; optimize OK (list_asm.inc), line = 41
  4047
  4048 9D3A A9 00			lda #$00
  4049 9D3C 8D 03 04			sta TOTALFILES
  4050 9D3F 8D 02 04			sta CURFILE
  4051 9D42 8D 00 04			sta YFILE
  4052 9D45 8D 01 04			sta SHFILE
  4053
  4054 				; optimize OK (list_asm.inc), line = 42
  4055
  4056 9D48 85 D6			sta CHN
  4057
  4058 				; --- WhileProlog
  4059 9D4A 4C 62 9D			jmp l_0A79
  4060 9D4D			l_0A7A
  4061
  4062 				; optimize OK (list_asm.inc), line = 45
  4063
  4064 9D4D A5 D6			lda CHN
  4065 9D4F 0A				asl @
  4066 9D50 A8				tay
  4067 9D51 B9 10 04			lda adr.PLAYLISTSCRADR,y
  4068 9D54 85 D4			sta SCRADR
  4069 9D56 B9 11 04			lda adr.PLAYLISTSCRADR+1,y
  4070 9D59 85 D5			sta SCRADR+1
  4071
  4072 				; optimize OK (list_asm.inc), line = 46
  4073
  4074 9D5B A9 20			lda #$20
  4075 9D5D 20 2E 94			jsr PUTSPACES
  4076
  4077 				; optimize FAIL (0, list_asm.inc), line = 47
  4078
  4079 9D60 E6 D6			inc CHN
  4080 9D62			l_0A79
  4081
  4082 				; optimize OK (list_asm.inc), line = 43
  4083
  4084 9D62 A5 D6			lda CHN
  4085 9D64 C9 10			cmp #$10
  4086 9D66 90 E5			jcc l_0A7A
  4087
  4088 				; optimize OK (list_asm.inc), line = 49
  4089
  4090 9D68 A5 DA			lda FILELIST
  4091 9D6A 85 88			sta SYSTEM.FILLCHAR_0151.A
  4092 9D6C A5 DB			lda FILELIST+1
  4093 9D6E 85 89			sta SYSTEM.FILLCHAR_0151.A+1
  4094 9D70 A9 00			lda #$00
  4095 9D72 85 8C			sta SYSTEM.FILLCHAR_0151.COUNT
  4096 9D74 A9 0C			lda #$0C
  4097 9D76 85 8D			sta SYSTEM.FILLCHAR_0151.COUNT+1
  4098 9D78 A9 9B			lda #$9B
  4099 9D7A 85 84			sta SYSTEM.FILLCHAR_0151.VALUE
  4100 9D7C				.local +MAIN.SYSTEM.FILLCHAR_0151
  4101 9D7C				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0151.M@INLINE [Source: MIDICar Player.a65]
     4 9D7C 20 24 83			jsr @fill
Source: MIDICar Player.a65
  4102 					.endl
  4103 9D7F			@exit
  4104 					.ifdef @new
  4105 					lda <@VarData
  4106 					sta :ztmp
  4107 					lda >@VarData
  4108 					ldy #@VarDataSize-1
  4109 					jmp @FreeMem
  4110 					els
  4111 9D7F 60				rts						; ret
  4112 					eif
  4113 				.endl
  4114
  4115 9D80			.local	FILESELECT					; FUNCTION
  4116
  4117 				; optimize OK (fileselect.inc), line = 10
  4118
  4119 9D80 A9 F8			lda #$F8
  4120 9D82 85 D4			sta SCRADR
  4121 9D84 A9 36			lda #$36
  4122 9D86 85 D5			sta SCRADR+1
  4123 9D88 20 80 95			jsr HLINE
  4124
  4125 				; optimize OK (fileselect.inc), line = 11
  4126
  4127 9D8B A9 14			lda #$14
  4128 9D8D 85 D4			sta SCRADR
  4129 9D8F A9 37			lda #$37
  4130 9D91 85 D5			sta SCRADR+1
  4131 9D93 A9 D5			lda #$D5
  4132 9D95 85 88			sta PUTINTTEXT.S
  4133 9D97 A9 80			lda #$80
  4134 9D99 85 89			sta PUTINTTEXT.S+1
  4135 9D9B 20 3C 94			jsr PUTINTTEXT
  4136
  4137 				; optimize FAIL ('CLEARLIST', fileselect.inc), line = 13
  4138
  4139 9D9E 20 2F 9D			jsr CLEARLIST
  4140
  4141 				; optimize OK (fileselect.inc), line = 14
  4142
  4143 9DA1 A9 FF			lda #$FF
  4144 9DA3 85 E2			sta MIDFILES._ADR
  4145 9DA5 85 E3			sta MIDFILES._ADR+1
  4146 9DA7 A9 FE			lda #$FE
  4147 9DA9 85 E1			sta MIDFILES._BANK
  4148 9DAB AD 22 3F			lda PATH
  4149 9DAE 85 88			sta ADDTOLIST.ENTRY
  4150 9DB0 AD 23 3F			lda PATH+1
  4151 9DB3 85 89			sta ADDTOLIST.ENTRY+1
  4152 9DB5 20 E6 9C			jsr ADDTOLIST
  4153
  4154 				; optimize FAIL ('STATUSSTOPPED', fileselect.inc), line = 15
  4155
  4156 9DB8 20 77 9A			jsr STATUSSTOPPED
  4157
  4158 				; optimize FAIL ('STATUSREADDIRECTORY', fileselect.inc), line = 16
  4159
  4160 9DBB 20 EE 9A			jsr STATUSREADDIRECTORY
  4161
  4162 				; optimize OK (fileselect.inc), line = 18
  4163
  4164 9DBE A9 02			lda #$02
  4165 9DC0 8D B1 3E			sta CIO.OPN.CHN
  4166 9DC3 A9 06			lda #$06
  4167 9DC5 8D B2 3E			sta CIO.OPN.AX1
  4168 9DC8 A9 00			lda #$00
  4169 9DCA 8D B3 3E			sta CIO.OPN.AX2
  4170 9DCD AD 22 3F			lda PATH
  4171 9DD0 8D B4 3E			sta CIO.OPN.DEVICE
  4172 9DD3 AD 23 3F			lda PATH+1
  4173 9DD6 8D B5 3E			sta CIO.OPN.DEVICE+1
  4174 9DD9 20 41 8A			jsr CIO.OPN
  4175
  4176 				; --- WhileProlog
  4177 9DDC 4C 7E 9E			jmp l_0ABE
  4178 9DDF			l_0ABF
  4179
  4180 				; optimize OK (fileselect.inc), line = 21
  4181
  4182 9DDF A9 FC			lda #$FC
  4183 9DE1 85 E1			sta MIDFILES._BANK
  4184
  4185 				; optimize OK (fileselect.inc), line = 22
  4186
  4187 9DE3 A9 02			lda #$02
  4188 9DE5 85 88			sta GETLN.CHN
  4189 9DE7 AD A5 A7			lda FN
  4190 9DEA 85 8C			sta GETLN.BUF
  4191 9DEC AD A6 A7			lda FN+1
  4192 9DEF 85 8D			sta GETLN.BUF+1
  4193 9DF1 20 7A 96			jsr GETLN
  4194
  4195 				; optimize OK (fileselect.inc), line = 23
  4196
  4197 9DF4 AD 01 05			lda adr.FN+$01
  4198 9DF7 C9 30			cmp #$30
  4199 9DF9 90 03			jcc l_0ADA
  4200 9DFB 4C 88 9E			jmp b_0ABF					; break
  4201 9DFE			l_0ADA
  4202
  4203 				; optimize OK (fileselect.inc), line = 24
  4204
  4205 9DFE AD A5 A7			lda FN
  4206 9E01 85 88			sta REDUCEFILENAME.INFN
  4207 9E03 AD A6 A7			lda FN+1
  4208 9E06 85 89			sta REDUCEFILENAME.INFN+1
  4209 9E08 AD A7 A7			lda OUTSTR
  4210 9E0B 85 8C			sta REDUCEFILENAME.OUTFN
  4211 9E0D AD A8 A7			lda OUTSTR+1
  4212 9E10 85 8D			sta REDUCEFILENAME.OUTFN+1
  4213 9E12 20 E2 95			jsr REDUCEFILENAME
  4214
  4215 				; optimize OK (fileselect.inc), line = 25
  4216
  4217 9E15 AD A7 A7			lda OUTSTR
  4218 9E18 85 88			sta GETFILEEXT.FN
  4219 9E1A AD A8 A7			lda OUTSTR+1
  4220 9E1D 85 89			sta GETFILEEXT.FN+1
  4221 9E1F 20 A0 95			jsr GETFILEEXT
  4222
  4223 				; optimize OK (fileselect.inc), line = 26
  4224
  4225 9E22 AD 02 05			lda adr.FN+$02
  4226 9E25 C9 3A			cmp #$3A
  4227 9E27 D0 03			jne l_0AF8
  4228 9E29 4C 7E 9E			jmp c_0ABF					; continue
  4229 9E2C			l_0AF8
  4230
  4231 				; optimize OK (fileselect.inc), line = 27
  4232
  4233 9E2C AD 12 05			lda adr.FN+$12
  4234 9E2F C9 3E			cmp #$3E
  4235 9E31 D0 03			jne l_0B0E
  4236 9E33 4C 7E 9E			jmp c_0ABF					; continue
  4237 9E36			l_0B0E
  4238
  4239 				; optimize OK (fileselect.inc), line = 28
  4240
  4241 9E36 AD FB 04			lda EXT+3
  4242 9E39 C9 A4			cmp #$A4
  4243 9E3B D0 11			bne @+
  4244 9E3D AD FA 04			lda EXT+2
  4245 9E40 C9 A9			cmp #$A9
  4246 9E42 D0 0A			bne @+
  4247 9E44 AD F9 04			lda EXT+1
  4248 9E47 C9 B2			cmp #$B2
  4249 9E49 D0 03			bne @+
  4250 9E4B AD F8 04			lda EXT
  4251 				@
  4252 9E4E D0 03			jne l_0B21
  4253 9E50 4C 7E 9E			jmp c_0ABF					; continue
  4254 9E53			l_0B21
  4255
  4256 				; optimize OK (fileselect.inc), line = 29
  4257
  4258 9E53 AD FB 04			lda EXT+3
  4259 9E56 C9 4D			cmp #$4D
  4260 9E58 D0 11			bne @+
  4261 9E5A AD FA 04			lda EXT+2
  4262 9E5D C9 49			cmp #$49
  4263 9E5F D0 0A			bne @+
  4264 9E61 AD F9 04			lda EXT+1
  4265 9E64 C9 44			cmp #$44
  4266 9E66 D0 03			bne @+
  4267 9E68 AD F8 04			lda EXT
  4268 				@
  4269 9E6B D0 04			jne l_0B34
  4270 9E6D A9 FF			lda #$FF
  4271 9E6F 85 E1			sta MIDFILES._BANK
  4272 9E71			l_0B34
  4273
  4274 				; optimize OK (fileselect.inc), line = 32
  4275
  4276 9E71 AD A7 A7			lda OUTSTR
  4277 9E74 85 88			sta ADDTOLIST.ENTRY
  4278 9E76 AD A8 A7			lda OUTSTR+1
  4279 9E79 85 89			sta ADDTOLIST.ENTRY+1
  4280 9E7B 20 E6 9C			jsr ADDTOLIST
  4281 9E7E			c_0ABF
  4282 9E7E			l_0ABE
  4283
  4284 				; optimize OK (fileselect.inc), line = 19
  4285
  4286 9E7E AD 87 3E			lda SYSTEM.IORESULT
  4287 9E81 C9 01			cmp #$01
  4288 9E83 D0 03 4C DF 9D		jeq l_0ABF
  4289 9E88			b_0ABF
  4290
  4291 				; optimize FAIL ('CLEARSTATUS', fileselect.inc), line = 34
  4292
  4293 9E88 20 63 98			jsr CLEARSTATUS
  4294
  4295 				; optimize OK (fileselect.inc), line = 35
  4296
  4297 9E8B AD 87 3E			lda SYSTEM.IORESULT
  4298 9E8E 8D 24 3F			sta RESULT
  4299
  4300 				; optimize OK (fileselect.inc), line = 36
  4301
  4302 9E91 A9 02			lda #$02
  4303 9E93 20 7F 8A			jsr CIO.CLS
  4304 9E96			@exit
  4305
  4306 				; ------------------------------------------------------------
  4307
  4308 = 3F22			PATH	= DATAORIGIN+$00A2
  4309 = 3F24			RESULT	= DATAORIGIN+$00A4
  4310 = 0002			CIO_CHN	= $02
  4311 = 04F8			EXT	= $04F8
  4312
  4313 = 3F22			@VarData	= PATH
  4314 = 0002			@VarDataSize	= 2
  4315
  4316 9E96 60				rts						; ret
  4317 				.endl
  4318
  4319 9E97			.local	SHOW_INPUTLINE					; PROCEDURE
  4320
  4321 				; optimize OK (inputline.inc), line = 4
  4322
  4323 9E97 AD 50 04			lda ILPOS
  4324 9E9A 8D 80 05			sta adr.OUTSTR+$00
  4325
  4326 				; optimize OK (inputline.inc), line = 5
  4327
  4328 9E9D AD 51 04			lda ILSCRADR
  4329 9EA0 85 D4			sta SCRADR
  4330 9EA2 AD 52 04			lda ILSCRADR+1
  4331 9EA5 85 D5			sta SCRADR+1
  4332
  4333 				; optimize OK (inputline.inc), line = 6
  4334
  4335 9EA7 AD A7 A7			lda OUTSTR
  4336 9EAA 85 88			sta PUTASCTEXT.S
  4337 9EAC AD A8 A7			lda OUTSTR+1
  4338 9EAF 85 89			sta PUTASCTEXT.S+1
  4339 9EB1 20 65 94			jsr PUTASCTEXT
  4340
  4341 				; optimize OK (inputline.inc), line = 7
  4342
  4343 9EB4 AD 53 04			lda ILVCRS
  4344 9EB7 F0 07			jeq l_0B72
  4345 9EB9 A9 3F			lda #$3F
  4346 9EBB 85 D6			sta ILCH
  4347 9EBD 4C C4 9E			jmp l_0B80
  4348 9EC0			l_0B72
  4349 9EC0 A9 00			lda #$00
  4350 9EC2 85 D6			sta ILCH
  4351 9EC4			l_0B80
  4352
  4353 				; optimize OK (inputline.inc), line = 8
  4354
  4355 9EC4 A4 D5			ldy SCRADR+1
  4356 9EC6 84 81			sty :bp+1
  4357 9EC8 A4 D4			ldy SCRADR
  4358 9ECA A5 D6			lda ILCH
  4359 9ECC 91 80			sta (:bp),y
  4360
  4361 				; optimize FAIL (0, inputline.inc), line = 9
  4362
  4363 9ECE E6 D4			inc SCRADR
  4364 9ED0 D0 02			sne
  4365 9ED2 E6 D5			inc SCRADR+1
  4366 9ED4 A9 1F			lda #$1F
  4367 9ED6 38 ED 50 04			sub ILPOS
  4368 9EDA 20 2E 94			jsr PUTSPACES
  4369 9EDD			@exit
  4370 					.ifdef @new
  4371 					lda <@VarData
  4372 					sta :ztmp
  4373 					lda >@VarData
  4374 					ldy #@VarDataSize-1
  4375 					jmp @FreeMem
  4376 					els
  4377 9EDD 60				rts						; ret
  4378 					eif
  4379 				.endl
  4380
  4381 9EDE			.local	INIT_INPUTLINE					; PROCEDURE
  4382
  4383 				; optimize OK (inputline.inc), line = 14
  4384
  4385 9EDE AD 80 05			lda adr.OUTSTR
  4386 9EE1 8D 50 04			sta ILPOS
  4387
  4388 				; optimize OK (inputline.inc), line = 15
  4389
  4390 9EE4 A9 7F			lda #$7F
  4391 9EE6 38 ED 50 04			sub ILPOS
  4392 9EEA 85 8C			sta SYSTEM.FILLCHAR_0152.COUNT
  4393 9EEC A9 00			lda #$00
  4394 9EEE E9 00			sbc #$00
  4395 9EF0 85 8D			sta SYSTEM.FILLCHAR_0152.COUNT+1
  4396 9EF2 AD 50 04			lda ILPOS
  4397 9EF5 18 69 01			add #$01
  4398 9EF8 85 9F			sta :STACKORIGIN+11
  4399 9EFA A9 00			lda #$00
  4400 9EFC 69 00			adc #$00
  4401 9EFE 85 AF			sta :STACKORIGIN+STACKWIDTH+11
  4402 9F00 A9 80			lda <adr.OUTSTR
  4403 9F02 18 65 9F			add :STACKORIGIN+11
  4404 9F05 85 88			sta SYSTEM.FILLCHAR_0152.X
  4405 9F07 A9 05			lda >adr.OUTSTR
  4406 9F09 65 AF			adc :STACKORIGIN+STACKWIDTH+11
  4407 9F0B 85 89			sta SYSTEM.FILLCHAR_0152.X+1
  4408 9F0D A9 9B			lda #$9B
  4409 9F0F 85 84			sta SYSTEM.FILLCHAR_0152.VALUE
  4410 9F11				.local +MAIN.SYSTEM.FILLCHAR_0152
  4411 9F11				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0152.M@INLINE [Source: MIDICar Player.a65]
     4 9F11 20 24 83			jsr @fill
Source: MIDICar Player.a65
  4412 					.endl
  4413
  4414 				; optimize OK (inputline.inc), line = 16
  4415
  4416 9F14 A9 FF			lda #$FF
  4417 9F16 8D FC 02			sta KEYB
  4418 9F19 A9 01			lda #$01
  4419 9F1B 8D 53 04			sta ILVCRS
  4420
  4421 				; optimize OK (inputline.inc), line = 17
  4422
  4423 9F1E AD 00 04			lda YFILE
  4424 9F21 0A				asl @
  4425 9F22 A8				tay
  4426 9F23 B9 10 04			lda adr.PLAYLISTSCRADR,y
  4427 9F26 18 69 02			add #$02
  4428 9F29 8D 51 04			sta ILSCRADR
  4429 9F2C B9 11 04			lda adr.PLAYLISTSCRADR+1,y
  4430 9F2F 69 00			adc #$00
  4431 9F31 8D 52 04			sta ILSCRADR+1
  4432
  4433 				; optimize FAIL ('SHOW_INPUTLINE', inputline.inc), line = 18
  4434
  4435 9F34 20 97 9E			jsr SHOW_INPUTLINE
  4436 9F37 A5 14			lda _TM
  4437 9F39 85 12			sta CTM
  4438
  4439 				; optimize OK (inputline.inc), line = 19
  4440
  4441 9F3B A9 01			lda #$01
  4442 9F3D 8D 07 3F			sta STATEINPUTLINE
  4443
  4444 				; optimize OK (inputline.inc), line = 20
  4445
  4446 9F40 A9 00			lda #$00
  4447 9F42 8D 06 3F			sta RESULTINPUTLINE
  4448 9F45			@exit
  4449 					.ifdef @new
  4450 					lda <@VarData
  4451 					sta :ztmp
  4452 					lda >@VarData
  4453 					ldy #@VarDataSize-1
  4454 					jmp @FreeMem
  4455 					els
  4456 9F45 60				rts						; ret
  4457 					eif
  4458 				.endl
  4459
  4460 9F46			.local	DO_INPUTLINE					; PROCEDURE
  4461
  4462 				; optimize OK (inputline.inc), line = 25
  4463
  4464 9F46 AD 50 04			lda ILPOS
  4465 9F49 F0 6C			jeq l_0BE6
  4466
  4467 				; optimize OK (inputline.inc), line = 27
  4468
  4469 9F4B AD FC 02			lda KEYB
  4470 9F4E C9 1C			cmp #$1C
  4471 9F50 F0 04			jeq l_0C05x
  4472 9F52 C9 0C			cmp #$0C
  4473 9F54 D0 4F			jne l_0C05
  4474 9F56			l_0C05x
  4475
  4476 				; optimize OK (inputline.inc), line = 29
  4477
  4478 9F56 AD FC 02			lda KEYB
  4479 9F59 C9 1C			cmp #$1C
  4480 9F5B D0 25			jne l_0C18
  4481
  4482 				; optimize OK (inputline.inc), line = 31
  4483
  4484 9F5D AD 00 05			lda adr.FN+$00
  4485 9F60 8D 50 04			sta ILPOS
  4486
  4487 				; optimize OK (inputline.inc), line = 32
  4488
  4489 9F63 AD A5 A7			lda FN
  4490 9F66 85 88			sta @move.src
  4491 9F68 AD A6 A7			lda FN+1
  4492 9F6B 85 89			sta @move.src+1
  4493 					@moveSTRING OUTSTR #128
  4493 				 MWA OUTSTR @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  4493 9F6D AD A7 A7 85 8C AD +  MWA OUTSTR @MOVE.DST
  4493 9F77 A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  4493 9F7F 20 6C 83		 JSR @MOVESTRING
  4494 9F82			l_0C18
  4495
  4496 				; optimize OK (inputline.inc), line = 34
  4497
  4498 9F82 A9 00			lda #$00
  4499 9F84 8D 53 04			sta ILVCRS
  4500 9F87 20 97 9E			jsr SHOW_INPUTLINE
  4501
  4502 				; optimize OK (inputline.inc), line = 35
  4503
  4504 9F8A A9 02			lda #$02
  4505 9F8C 8D 07 3F			sta STATEINPUTLINE
  4506
  4507 				; optimize OK (inputline.inc), line = 36
  4508
  4509 9F8F A0 01			ldy #1
  4510 9F91 AD FC 02			lda KEYB
  4511 9F94 C9 0C			cmp #$0C
  4512 9F96 F0 01			beq @+
  4513 9F98 88				dey
  4514 				@
  4515 9F99 98				tya
  4516 9F9A 8D 06 3F			sta RESULTINPUTLINE
  4517
  4518 				; optimize OK (inputline.inc), line = 37
  4519
  4520 9F9D A9 0C			lda #$0C
  4521 9F9F 8D FC 02			sta KEYB
  4522 9FA2 4C DC 9F			jmp @exit					; exit
  4523 9FA5			l_0C05
  4524
  4525 				; optimize OK (inputline.inc), line = 39
  4526
  4527 9FA5 AD FC 02			lda KEYB
  4528 9FA8 C9 34			cmp #$34
  4529 9FAA D0 0B			jne l_0C51
  4530
  4531 				; optimize OK (inputline.inc), line = 41
  4532
  4533 9FAC AC 50 04			ldy ILPOS
  4534 9FAF A9 9B			lda #$9B
  4535 9FB1 99 80 05			sta adr.OUTSTR,y
  4536
  4537 				; optimize FAIL (0, inputline.inc), line = 42
  4538
  4539 9FB4 CE 50 04			dec ILPOS
  4540 9FB7			l_0C51
  4541 9FB7			l_0BE6
  4542
  4543 				; optimize OK (inputline.inc), line = 45
  4544
  4545 9FB7 AD 50 04			lda ILPOS
  4546 9FBA C9 1E			cmp #$1E
  4547 9FBC B0 16			jcs l_0C73
  4548
  4549 				; optimize OK (inputline.inc), line = 47
  4550
  4551 9FBE AD FC 02			lda KEYB
  4552 9FC1 20 92 97			jsr KEYSCAN2ASC
  4553 9FC4 AD 14 3F			lda KEYSCAN2ASC.RESULT
  4554 9FC7 85 D6			sta ILCH
  4555
  4556 				; optimize OK (inputline.inc), line = 48
  4557
  4558 9FC9 F0 09			jeq l_0C8D
  4559
  4560 				; optimize FAIL (0, inputline.inc), line = 50
  4561
  4562 9FCB EE 50 04			inc ILPOS
  4563
  4564 				; optimize OK (inputline.inc), line = 51
  4565
  4566 9FCE AC 50 04			ldy ILPOS
  4567 9FD1 99 80 05			sta adr.OUTSTR,y
  4568 9FD4			l_0C8D
  4569 9FD4			l_0C73
  4570
  4571 				; optimize FAIL ('SHOW_INPUTLINE', inputline.inc), line = 54
  4572
  4573 9FD4 20 97 9E			jsr SHOW_INPUTLINE
  4574
  4575 				; optimize OK (inputline.inc), line = 55
  4576
  4577 9FD7 A9 FF			lda #$FF
  4578 9FD9 8D FC 02			sta KEYB
  4579 9FDC			@exit
  4580 					.ifdef @new
  4581 					lda <@VarData
  4582 					sta :ztmp
  4583 					lda >@VarData
  4584 					ldy #@VarDataSize-1
  4585 					jmp @FreeMem
  4586 					els
  4587 9FDC 60				rts						; ret
  4588 					eif
  4589 				.endl
  4590
  4591 9FDD			.local	DRAWLISTSELECTION				; PROCEDURE
  4592
  4593 				; optimize OK (list.inc), line = 7
  4594
  4595 9FDD AD 00 04			lda YFILE
  4596 9FE0 0A				asl @
  4597 9FE1 A8				tay
  4598 9FE2 B9 10 04			lda adr.PLAYLISTSCRADR,y
  4599 9FE5 85 D4			sta SCRADR
  4600 9FE7 B9 11 04			lda adr.PLAYLISTSCRADR+1,y
  4601 9FEA 85 D5			sta SCRADR+1
  4602 9FEC A9 20			lda #$20
  4603 9FEE 20 1D 94			jsr INVERS
  4604 9FF1			@exit
  4605 					.ifdef @new
  4606 					lda <@VarData
  4607 					sta :ztmp
  4608 					lda >@VarData
  4609 					ldy #@VarDataSize-1
  4610 					jmp @FreeMem
  4611 					els
  4612 9FF1 60				rts						; ret
  4613 					eif
  4614 				.endl
  4615
  4616 9FF2			.local	SHOWENTRY					; PROCEDURE
  4617
  4618 				; optimize OK (list.inc), line = 16
  4619
  4620 9FF2 A9 25			lda <P_BANK
  4621 9FF4 85 88			sta GETENTRYSETS.PTR
  4622 9FF6 A9 3F			lda >P_BANK
  4623 9FF8 85 89			sta GETENTRYSETS.PTR+1
  4624 9FFA 20 8F 9C			jsr GETENTRYSETS
  4625
  4626 				; optimize OK (list.inc), line = 17
  4627
  4628 9FFD A9 00			lda #$00
  4629 9FFF 85 D7			sta V
  4630
  4631 				; optimize OK (list.inc), line = 19
  4632
  4633 A001 AD 25 3F			lda P_BANK
  4634 A004 C9 FE			cmp #$FE
  4635 A006 D0 04			jne l_0CCE
  4636 A008 A9 1E			lda #$1E
  4637 A00A 85 D7			sta V
  4638 A00C			l_0CCE
  4639
  4640 				; optimize OK (list.inc), line = 20
  4641
  4642 A00C AD 25 3F			lda P_BANK
  4643 A00F C9 FF			cmp #$FF
  4644 A011 D0 04			jne l_0CE7
  4645 A013 A9 5A			lda #$5A
  4646 A015 85 D7			sta V
  4647 A017			l_0CE7
  4648
  4649 				; optimize OK (list.inc), line = 21
  4650
  4651 A017 AD 25 3F			lda P_BANK
  4652 A01A C9 40			cmp #$40
  4653 A01C B0 13			jcs l_0D00
  4654
  4655 				; optimize OK (list.inc), line = 22
  4656
  4657 A01E AD 27 3F			lda P_ADR+1
  4658 A021 0D 26 3F			ora P_ADR
  4659 A024 D0 07			jne l_0D12
  4660
  4661 				; optimize OK (list.inc), line = 23
  4662
  4663 A026 A9 4D			lda #$4D
  4664 A028 85 D7			sta V
  4665 A02A 4C 31 A0			jmp l_0D20
  4666 A02D			l_0D12
  4667
  4668 				; optimize OK (list.inc), line = 25
  4669
  4670 A02D A9 5A			lda #$5A
  4671 A02F 85 D7			sta V
  4672 A031			l_0D20
  4673 A031			l_0D00
  4674
  4675 				; optimize OK (list.inc), line = 27
  4676
  4677 A031 A4 D5			ldy SCRADR+1
  4678 A033 84 81			sty :bp+1
  4679 A035 A4 D4			ldy SCRADR
  4680 A037 A5 D7			lda V
  4681 A039 91 80			sta (:bp),y
  4682 A03B 98				tya
  4683 A03C 18 69 02			add #$02
  4684 A03F 85 D4			sta SCRADR
  4685 A041 90 02			scc
  4686 A043 E6 D5			inc SCRADR+1
  4687
  4688 				; optimize OK (list.inc), line = 29
  4689
  4690 A045 AD 80 05			lda adr.OUTSTR+$00
  4691 A048 C9 1F			cmp #$1F
  4692 A04A 90 05			jcc l_0D40
  4693 A04C A9 1E			lda #$1E
  4694 A04E 8D 80 05			sta adr.OUTSTR+$00
  4695 A051			l_0D40
  4696
  4697 				; optimize OK (list.inc), line = 30
  4698
  4699 A051 AD A7 A7			lda OUTSTR
  4700 A054 85 88			sta PUTASCTEXT.S
  4701 A056 AD A8 A7			lda OUTSTR+1
  4702 A059 85 89			sta PUTASCTEXT.S+1
  4703 A05B 20 65 94			jsr PUTASCTEXT
  4704
  4705 				; optimize OK (list.inc), line = 31
  4706
  4707 A05E A9 1E			lda #$1E
  4708 A060 38 ED 80 05			sub adr.OUTSTR+$00
  4709 A064 20 2E 94			jsr PUTSPACES
  4710
  4711 				; ------------------------------------------------------------
  4712
  4713 = 3F25			P_BANK	= DATAORIGIN+$00A5
  4714 = 3F26			P_ADR	= DATAORIGIN+$00A6
  4715
  4716 = 3F25			@VarData	= P_BANK
  4717 = 0003			@VarDataSize	= 3
  4718
  4719 A067			@exit
  4720 					.ifdef @new
  4721 					lda <@VarData
  4722 					sta :ztmp
  4723 					lda >@VarData
  4724 					ldy #@VarDataSize-1
  4725 					jmp @FreeMem
  4726 					els
  4727 A067 60				rts						; ret
  4728 					eif
  4729 				.endl
  4730
  4731 A068			.local	SHOWLIST					; PROCEDURE
  4732
  4733 				; optimize OK (list.inc), line = 36
  4734
  4735 A068 AD 01 04			lda SHFILE
  4736 A06B 20 C9 9C			jsr GOTONENTRY
  4737 A06E A9 00			lda #$00
  4738 A070 85 D6			sta CHN
  4739
  4740 				; --- WhileProlog
  4741 A072 4C A7 A0			jmp l_0D62
  4742 A075			l_0D63
  4743
  4744 				; optimize OK (list.inc), line = 39
  4745
  4746 A075 A5 D6			lda CHN
  4747 A077 0A				asl @
  4748 A078 A8				tay
  4749 A079 B9 10 04			lda adr.PLAYLISTSCRADR,y
  4750 A07C 85 D4			sta SCRADR
  4751 A07E B9 11 04			lda adr.PLAYLISTSCRADR+1,y
  4752 A081 85 D5			sta SCRADR+1
  4753
  4754 				; optimize OK (list.inc), line = 40
  4755
  4756 A083 AD A7 A7			lda OUTSTR
  4757 A086 85 88			sta GETENTRY.FN
  4758 A088 AD A8 A7			lda OUTSTR+1
  4759 A08B 85 89			sta GETENTRY.FN+1
  4760 A08D 20 51 9C			jsr GETENTRY
  4761 A090 A5 90			lda GETENTRY.RESULT
  4762 A092 F0 06			jeq l_0D77
  4763
  4764 				; optimize FAIL ('SHOWENTRY', list.inc), line = 42
  4765
  4766 A094 20 F2 9F			jsr SHOWENTRY
  4767 A097 4C 9D A0			jmp l_0D82
  4768 A09A			l_0D77
  4769 A09A 4C AD A0			jmp b_0D63					; break
  4770 A09D			l_0D82
  4771
  4772 				; optimize FAIL (0, list.inc), line = 44
  4773
  4774 A09D E6 D6			inc CHN
  4775
  4776 				; optimize FAIL ('NEXTENTRY', list.inc), line = 45
  4777
  4778 A09F 20 A3 9C			jsr NEXTENTRY
  4779 A0A2 AD 20 3F 95 95		mva NEXTENTRY.RESULT :STACKORIGIN+1,x
  4780 A0A7			l_0D62
  4781
  4782 				; optimize OK (list.inc), line = 37
  4783
  4784 A0A7 A5 D6			lda CHN
  4785 A0A9 C9 10			cmp #$10
  4786 A0AB 90 C8			jcc l_0D63
  4787 A0AD			b_0D63
  4788 A0AD			@exit
  4789 					.ifdef @new
  4790 					lda <@VarData
  4791 					sta :ztmp
  4792 					lda >@VarData
  4793 					ldy #@VarDataSize-1
  4794 					jmp @FreeMem
  4795 					els
  4796 A0AD 60				rts						; ret
  4797 					eif
  4798 				.endl
  4799
  4800 A0AE			.local	CHOICELISTFILE					; FUNCTION
  4801
  4802 				; optimize OK (list.inc), line = 54
  4803
  4804 A0AE AD 07 3F			lda STATEINPUTLINE
  4805 A0B1 D0 7F			jne l_0DA9
  4806
  4807 				; optimize OK (list.inc), line = 56
  4808
  4809 A0B3 AD 02 04			lda CURFILE
  4810 A0B6 20 C9 9C			jsr GOTONENTRY
  4811
  4812 				; optimize OK (list.inc), line = 57
  4813
  4814 A0B9 AD A5 A7			lda FN
  4815 A0BC 85 88			sta GETENTRY.FN
  4816 A0BE AD A6 A7			lda FN+1
  4817 A0C1 85 89			sta GETENTRY.FN+1
  4818 A0C3 20 51 9C			jsr GETENTRY
  4819 A0C6 A5 90			lda GETENTRY.RESULT
  4820 A0C8 8D 28 3F			sta RESULT
  4821
  4822 				; optimize OK (list.inc), line = 58
  4823
  4824 A0CB F0 62			jeq l_0DC0
  4825
  4826 				; optimize OK (list.inc), line = 60
  4827
  4828 A0CD A9 0D			lda <P_BANK
  4829 A0CF 85 88			sta GETENTRYSETS.PTR
  4830 A0D1 A9 04			lda >P_BANK
  4831 A0D3 85 89			sta GETENTRYSETS.PTR+1
  4832 A0D5 20 8F 9C			jsr GETENTRYSETS
  4833
  4834 				; optimize OK (list.inc), line = 62
  4835
  4836 A0D8 AD A5 A7			lda FN
  4837 A0DB 85 88			sta GETDEVICESPEC.FN
  4838 A0DD AD A6 A7			lda FN+1
  4839 A0E0 85 89			sta GETDEVICESPEC.FN+1
  4840 A0E2 AD 38 A1			lda DEV
  4841 A0E5 85 8C			sta GETDEVICESPEC.SPEC
  4842 A0E7 AD 39 A1			lda DEV+1
  4843 A0EA 85 8D			sta GETDEVICESPEC.SPEC+1
  4844 A0EC 20 26 96			jsr GETDEVICESPEC
  4845 A0EF A5 90			lda GETDEVICESPEC.RESULT
  4846 A0F1 F0 03 4C 10 A1		jne l_0DD4
  4847
  4848 				; optimize OK (list.inc), line = 63
  4849
  4850 A0F6 AD A3 A7			lda CURDEV
  4851 A0F9 85 88			sta JOINSTRINGS.S1
  4852 A0FB AD A4 A7			lda CURDEV+1
  4853 A0FE 85 89			sta JOINSTRINGS.S1+1
  4854 A100 AD A5 A7			lda FN
  4855 A103 85 8C			sta JOINSTRINGS.S2
  4856 A105 AD A6 A7			lda FN+1
  4857 A108 85 8D			sta JOINSTRINGS.S2+1
  4858 A10A 20 4A 96			jsr JOINSTRINGS
  4859 A10D 4C 2F A1			jmp l_0DE3
  4860 A110			l_0DD4
  4861
  4862 				; optimize OK (list.inc), line = 65
  4863
  4864 A110 AD A5 A7			lda FN
  4865 A113 85 88			sta @move.src
  4866 A115 AD A6 A7			lda FN+1
  4867 A118 85 89			sta @move.src+1
  4868 					@moveSTRING OUTSTR #128
  4868 				 MWA OUTSTR @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  4868 A11A AD A7 A7 85 8C AD +  MWA OUTSTR @MOVE.DST
  4868 A124 A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  4868 A12C 20 6C 83		 JSR @MOVESTRING
  4869 A12F			l_0DE3
  4870 A12F			l_0DC0
  4871 A12F 4C 37 A1			jmp l_0DF0
  4872 A132			l_0DA9
  4873
  4874 				; optimize OK (list.inc), line = 69
  4875
  4876 A132 A9 00			lda #$00
  4877 A134 8D 28 3F			sta RESULT
  4878 A137			l_0DF0
  4879 A137			@exit
  4880
  4881 				; ------------------------------------------------------------
  4882
  4883 = 3F28			RESULT	= DATAORIGIN+$00A8
  4884 = 04F4			adr.DEV	= $04F4
  4885 A137			.var DEV	= adr.DEV .word
  4886
  4887 = A138			@VarData	= DEV
  4888 = 0004			@VarDataSize	= 4
  4889
  4890 A137 60				rts						; ret
  4891 = A138 F4 04		DEV
  4891 				.endl
  4892
  4893 A13A			.local	INIT						; PROCEDURE
  4894
  4895 A13A 4C 71 A1			jmp l_0DF8
  4896
  4897 A13D			.local	SETMCBASEADDRESS				; PROCEDURE | ASSEMBLER
  4898
  4899 				; -------------------  ASM Block 00000116  -------------------
  4900
  4901 A13D			    icl 'asms/setMCBaseAddr.a65'
Source: setMCBaseAddr.a65
     1 				    .macro m@setMCBase name
     2 				      sty :name
     3 				      stx :name+1
     4 				    .endm
     5
     6 A13D 8A 48		    txa:pha
     7
     8 A13F A4 D8		    ldy MCBaseAddr
     9 A141 A6 D9		    ldx MCBaseAddr+1
    10
    11 A143			    m@setMCBase MAIN.MC6850.MC6850_INIT.MCBASESTATE
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A143 8C DD 89		      sty MAIN.MC6850.MC6850_INIT.MCBASESTATE
     2 A146 8E DE 89		      stx MAIN.MC6850.MC6850_INIT.MCBASESTATE+1
Source: setMCBaseAddr.a65
    12 A149			    m@setMCBase MAIN.MC6850.MC6850_Send2.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A149 8C E1 89		      sty MAIN.MC6850.MC6850_SEND2.MCBASESTATE
     2 A14C 8E E2 89		      stx MAIN.MC6850.MC6850_SEND2.MCBASESTATE+1
Source: setMCBaseAddr.a65
    13 A14F			    m@setMCBase MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A14F 8C F5 89		      sty MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASESTATE
     2 A152 8E F6 89		      stx MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASESTATE+1
Source: setMCBaseAddr.a65
    14 A155			    m@setMCBase MAIN.MIDI_FIFO.FIFO_FLUSH.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A155 8C 2B 8A		      sty MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASESTATE
     2 A158 8E 2C 8A		      stx MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASESTATE+1
Source: setMCBaseAddr.a65
    15
    16 A15B C8			    iny
    17 A15C			    m@setMCBase MAIN.MC6850.MC6850_Send2.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A15C 8C EA 89		      sty MAIN.MC6850.MC6850_SEND2.MCBASEBUF
     2 A15F 8E EB 89		      stx MAIN.MC6850.MC6850_SEND2.MCBASEBUF+1
Source: setMCBaseAddr.a65
    18 A162			    m@setMCBase MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A162 8C 05 8A		      sty MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASEBUF
     2 A165 8E 06 8A		      stx MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASEBUF+1
Source: setMCBaseAddr.a65
    19 A168			    m@setMCBase MAIN.MIDI_FIFO.FIFO_FLUSH.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A168 8C 35 8A		      sty MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASEBUF
     2 A16B 8E 36 8A		      stx MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASEBUF+1
Source: setMCBaseAddr.a65
    20
    21 A16E 68 AA		    pla:tax
  4902 				  
  4903 A170			@exit
  4904 					.ifdef @new
  4905 					lda <@VarData
  4906 					sta :ztmp
  4907 					lda >@VarData
  4908 					ldy #@VarDataSize-1
  4909 					jmp @FreeMem
  4910 					els
  4911 A170 60				rts						; ret
  4912 					eif
  4913 				.endl
  4914 A171			l_0DF8
  4915
  4916 				; optimize FAIL ('SETMCBASEADDRESS', init.inc), line = 10
  4917
  4918 A171 20 3D A1			jsr SETMCBASEADDRESS
  4919
  4920 				; optimize OK (init.inc), line = 13
  4921
  4922 A174 A9 03			lda #$03
  4923 A176 20 D6 89			jsr MC6850.MC6850_INIT
  4924
  4925 				; optimize OK (init.inc), line = 14
  4926
  4927 A179 A9 16			lda #$16
  4928 A17B 20 D6 89			jsr MC6850.MC6850_INIT
  4929
  4930 				; optimize OK (init.inc), line = 16
  4931
  4932 A17E A9 00			lda #$00
  4933 A180 8D 00 D4			sta DMACTL
  4934
  4935 				; optimize OK (init.inc), line = 17
  4936
  4937 A183 A9 32			lda #$32
  4938 A185 8D F4 02			sta CHBASE
  4939
  4940 				; optimize OK (init.inc), line = 18
  4941
  4942 A188 A9 B3			lda #$B3
  4943 A18A 8D 30 02			sta SDLST
  4944 A18D A9 3F			lda #$3F
  4945 A18F 8D 31 02			sta SDLST+1
  4946
  4947 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', init.inc), line = 20
  4948
  4949 A192 20 ED 89			jsr MIDI_FIFO.FIFO_RESET
  4950
  4951 				; optimize FAIL (1, init.inc), line = 22
  4952
  4953 A195 E8				inx
  4954 A196 AD A3 A7 95 94		mva CURDEV :STACKORIGIN,x
  4955 A19B AD A4 A7 95 A4		mva CURDEV+1 :STACKORIGIN+STACKWIDTH,x
  4956 A1A0 A9 00			lda #$00
  4957 A1A2 20 BB 89			jsr SYSTEM.PARAMSTR
  4958 A1A5 AD D0 89			lda SYSTEM.PARAMSTR.RESULT
  4959 A1A8 85 88			sta GETDEVICESPEC.FN
  4960 A1AA AD D1 89			lda SYSTEM.PARAMSTR.RESULT+1
  4961 A1AD 85 89			sta GETDEVICESPEC.FN+1
  4962 A1AF B5 94			lda :STACKORIGIN,x
  4963 A1B1 85 8C			sta GETDEVICESPEC.SPEC
  4964 A1B3 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  4965 A1B5 85 8D			sta GETDEVICESPEC.SPEC+1
  4966 A1B7 CA				dex
  4967 A1B8 20 26 96			jsr GETDEVICESPEC
  4968 A1BB A5 90			lda GETDEVICESPEC.RESULT
  4969 A1BD D0 0B			jne l_0E1C
  4970 A1BF A0 FD			ldy #256-3
  4971 A1C1 B9 E5 7F 99 FF 03 + 	mva:rne CODEORIGIN+$00E2+3-256,y adr.CURDEV+3-256,y+
  4972 A1CA			l_0E1C
  4973 A1CA A9 00 8D 00 05		mva #$00 adr.FN
  4974
  4975 				; optimize FAIL ('CLEARWORKAREA', init.inc), line = 25
  4976
  4977 A1CF 20 8A 95			jsr CLEARWORKAREA
  4978
  4979 				; optimize FAIL ('CLEARSTATUS', init.inc), line = 26
  4980
  4981 A1D2 20 63 98			jsr CLEARSTATUS
  4982
  4983 				; optimize OK (init.inc), line = 27
  4984
  4985 A1D5 A9 A0			lda #$A0
  4986 A1D7 85 D4			sta SCRADR
  4987 A1D9 A9 39			lda #$39
  4988 A1DB 85 D5			sta SCRADR+1
  4989 A1DD 20 80 95			jsr HLINE
  4990
  4991 				; optimize OK (init.inc), line = 28
  4992
  4993 A1E0 A9 A1			lda #$A1
  4994 A1E2 85 D4			sta SCRADR
  4995 A1E4 A9 39			lda #$39
  4996 A1E6 85 D5			sta SCRADR+1
  4997 A1E8 A9 E6			lda #$E6
  4998 A1EA 85 88			sta PUTINTTEXT.S
  4999 A1EC A9 80			lda #$80
  5000 A1EE 85 89			sta PUTINTTEXT.S+1
  5001 A1F0 20 3C 94			jsr PUTINTTEXT
  5002
  5003 				; optimize OK (init.inc), line = 29
  5004
  5005 A1F3 A9 BE			lda #$BE
  5006 A1F5 85 D4			sta SCRADR
  5007 A1F7 A9 39			lda #$39
  5008 A1F9 85 D5			sta SCRADR+1
  5009 A1FB A9 F0			lda #$F0
  5010 A1FD 85 88			sta PUTINTTEXT.S
  5011 A1FF A9 80			lda #$80
  5012 A201 85 89			sta PUTINTTEXT.S+1
  5013 A203 20 3C 94			jsr PUTINTTEXT
  5014
  5015 				; optimize OK (init.inc), line = 31
  5016
  5017 A206 A9 00			lda #$00
  5018 A208 8D EE 93			sta MIDFILES.MIDTRACKS
  5019 A20B A9 2E			lda #$2E
  5020 A20D 8D EF 93			sta MIDFILES.MIDTRACKS+1
  5021
  5022 				; -------------------  ASM Block 00000117  -------------------
  5023
  5024 A210 A5 14		    lda $14
  5025 A212 C5 14		    cmp $14
  5026 A214 F0 FC		    beq *-2
  5027 				  
  5028 				; optimize FAIL ('RESETMEMORYPTR', init.inc), line = 47
  5029
  5030 A216 20 42 98			jsr RESETMEMORYPTR
  5031
  5032 				; optimize OK (init.inc), line = 48
  5033
  5034 A219 A5 14			lda _TM
  5035 A21B 85 13			sta OTM
  5036
  5037 				; optimize FAIL ('SETCOLORS', init.inc), line = 49
  5038
  5039 A21D 20 F4 93			jsr SETCOLORS
  5040 A220 A9 22			lda #$22
  5041 A222 8D 00 D4			sta DMACTL
  5042 A225 A9 00			lda #$00
  5043 A227 85 41			sta SOUNDR
  5044 A229 A9 01			lda #$01
  5045 A22B 8D 05 04			sta PLAYDIR
  5046
  5047 				; optimize OK (init.inc), line = 50
  5048
  5049 A22E A5 4A			lda PLAYERSTATUS
  5050 A230 29 0F			and #$0F
  5051 A232 09 40			ora #$40
  5052 A234 85 4A			sta PLAYERSTATUS
  5053
  5054 				; optimize OK (init.inc), line = 53
  5055
  5056 A236 A9 FF			lda #$FF
  5057 A238 85 1F			sta THI
  5058
  5059 				; optimize OK (init.inc), line = 54
  5060
  5061 A23A A9 00			lda #$00
  5062 A23C 8D 07 3F			sta STATEINPUTLINE
  5063
  5064 				; optimize OK (init.inc), line = 55
  5065
  5066 A23F 8D 06 3F			sta RESULTINPUTLINE
  5067
  5068 				; ------------------------------------------------------------
  5069
  5070 A242			@exit
  5071 					.ifdef @new
  5072 					lda <@VarData
  5073 					sta :ztmp
  5074 					lda >@VarData
  5075 					ldy #@VarDataSize-1
  5076 					jmp @FreeMem
  5077 					els
  5078 A242 60				rts						; ret
  5079 					eif
  5080 				.endl
  5081 A243			l_0107
  5082
  5083 				; optimize FAIL ('INIT', MIDICar Player.pas), line = 68
  5084
  5085 A243 20 3A A1			jsr INIT
  5086
  5087 				; optimize FAIL ('CLEARUVMETERS', MIDICar Player.pas), line = 69
  5088
  5089 A246 20 64 99			jsr CLEARUVMETERS
  5090
  5091 				; optimize OK (MIDICar Player.pas), line = 78
  5092
  5093 A249 AD A3 A7			lda CURDEV
  5094 A24C 85 88			sta JOINSTRINGS.S1
  5095 A24E AD A4 A7			lda CURDEV+1
  5096 A251 85 89			sta JOINSTRINGS.S1+1
  5097 A253 A9 FB			lda #$FB
  5098 A255 85 8C			sta JOINSTRINGS.S2
  5099 A257 A9 80			lda #$80
  5100 A259 85 8D			sta JOINSTRINGS.S2+1
  5101 A25B 20 4A 96			jsr JOINSTRINGS
  5102
  5103 				; optimize OK (MIDICar Player.pas), line = 79
  5104
  5105 A25E A9 00			lda #$00
  5106 A260 20 C9 9C			jsr GOTONENTRY
  5107
  5108 				; optimize OK (MIDICar Player.pas), line = 80
  5109
  5110 A263 A9 FF			lda #$FF
  5111 A265 85 E2			sta MIDFILES._ADR
  5112 A267 85 E3			sta MIDFILES._ADR+1
  5113 A269 A9 FE			lda #$FE
  5114 A26B 85 E1			sta MIDFILES._BANK
  5115 A26D AD A7 A7			lda OUTSTR
  5116 A270 85 88			sta ADDTOLIST.ENTRY
  5117 A272 AD A8 A7			lda OUTSTR+1
  5118 A275 85 89			sta ADDTOLIST.ENTRY+1
  5119 A277 20 E6 9C			jsr ADDTOLIST
  5120
  5121 				; optimize OK (MIDICar Player.pas), line = 81
  5122
  5123 A27A A9 00			lda #$00
  5124 A27C 8D 01 04			sta SHFILE
  5125 A27F 8D 00 04			sta YFILE
  5126 A282 8D 02 04			sta CURFILE
  5127
  5128 				; optimize FAIL ('CHOICELISTFILE', MIDICar Player.pas), line = 82
  5129
  5130 A285 20 AE A0			jsr CHOICELISTFILE
  5131 A288 AD 28 3F 95 95		mva CHOICELISTFILE.RESULT :STACKORIGIN+1,x
  5132 A28D A9 02			lda #$02
  5133 A28F 8D 07 3F			sta STATEINPUTLINE
  5134 A292 A9 01			lda #$01
  5135 A294 8D 06 3F			sta RESULTINPUTLINE
  5136 A297 A9 0C			lda #$0C
  5137 A299 8D FC 02			sta KEYB
  5138
  5139 				; optimize FAIL ('SETNMI', MIDICar Player.pas), line = 85
  5140
  5141 A29C 20 23 97			jsr SETNMI
  5142
  5143 				; --- RepeatUntilProlog
  5144 A29F			l_0E93
  5145
  5146 				; optimize FAIL ('MIDFILES.PROCESSMIDI', MIDICar Player.pas), line = 89
  5147
  5148 A29F 20 D6 92			jsr MIDFILES.PROCESSMIDI
  5149
  5150 				; optimize OK (MIDICar Player.pas), line = 90
  5151
  5152 A2A2 A5 4A			lda PLAYERSTATUS
  5153 A2A4 29 40			and #$40
  5154 A2A6 F0 03 4C 78 A3		jne l_0EB6
  5155 A2AB A5 DF			lda MIDFILES.PLAYINGTRACKS
  5156 A2AD F0 03 4C 78 A3		jne l_0EB6
  5157
  5158 				; optimize OK (MIDICar Player.pas), line = 92
  5159
  5160 A2B2 A5 4A			lda PLAYERSTATUS
  5161 A2B4 29 0C			and #$0C
  5162 A2B6 85 D7			sta V
  5163
  5164 				; optimize FAIL ('STATUSSTOPPED', MIDICar Player.pas), line = 93
  5165
  5166 A2B8 20 77 9A			jsr STATUSSTOPPED
  5167
  5168 				; optimize OK (MIDICar Player.pas), line = 94
  5169
  5170 A2BB A5 D7			lda V
  5171 A2BD D0 03 4C 78 A3		jeq l_0ED4
  5172
  5173 				; optimize OK (MIDICar Player.pas), line = 96
  5174
  5175 A2C2 38 E9 05			sub #$05
  5176 A2C5 50 02			svc
  5177 A2C7 49 80			eor #$80
  5178 A2C9 10 03 4C 78 A3		jmi l_0EE7
  5179
  5180 				; optimize OK (MIDICar Player.pas), line = 97
  5181
  5182 A2CE AD 04 04			lda CURPLAY
  5183 A2D1 C9 FF			cmp #$FF
  5184 A2D3 D0 03 4C 78 A3		jeq l_0EFA
  5185
  5186 				; --- RepeatUntilProlog
  5187 A2D8			l_0EFC
  5188
  5189 				; optimize OK (MIDICar Player.pas), line = 100
  5190
  5191 A2D8 AD 04 04			lda CURPLAY
  5192 A2DB C9 FF			cmp #$FF
  5193 A2DD D0 06			jne l_0F0E
  5194 A2DF AD 02 04			lda CURFILE
  5195 A2E2 8D 04 04			sta CURPLAY
  5196 A2E5			l_0F0E
  5197
  5198 				; optimize OK (MIDICar Player.pas), line = 101
  5199
  5200 A2E5 A5 D7			lda V
  5201 A2E7 C9 0C			cmp #$0C
  5202 A2E9 D0 0F			jne l_0F29
  5203
  5204 				; optimize OK (MIDICar Player.pas), line = 102
  5205
  5206 A2EB AD 03 04			lda TOTALFILES
  5207 A2EE 20 A4 89			jsr SYSTEM.RANDOM_0172
  5208 A2F1 AD 8C 3E			lda SYSTEM.RANDOM_0172.RESULT
  5209 A2F4 8D 04 04			sta CURPLAY
  5210 A2F7 4C 1B A3			jmp l_0F3A
  5211 A2FA			l_0F29
  5212
  5213 				; optimize OK (MIDICar Player.pas), line = 105
  5214
  5215 A2FA AD 04 04			lda CURPLAY
  5216 A2FD 18 6D 05 04			add PLAYDIR
  5217 A301 8D 04 04			sta CURPLAY
  5218
  5219 				; optimize OK (MIDICar Player.pas), line = 106
  5220
  5221 A304 C9 01			cmp #$01
  5222 A306 D0 06			jne l_0F4F
  5223 A308 AD 03 04			lda TOTALFILES
  5224 A30B 8D 04 04			sta CURPLAY
  5225 A30E			l_0F4F
  5226
  5227 				; optimize OK (MIDICar Player.pas), line = 107
  5228
  5229 A30E AD 04 04			lda CURPLAY
  5230 A311 CD 03 04			cmp TOTALFILES
  5231 A314 D0 05			jne l_0F6C
  5232 A316 A9 01			lda #$01
  5233 A318 8D 04 04			sta CURPLAY
  5234 A31B			l_0F6C
  5235 A31B			l_0F3A
  5236
  5237 				; optimize OK (MIDICar Player.pas), line = 109
  5238
  5239 A31B AD 04 04			lda CURPLAY
  5240 A31E 8D 02 04			sta CURFILE
  5241
  5242 				; optimize FAIL ('CHOICELISTFILE', MIDICar Player.pas), line = 110
  5243
  5244 A321 20 AE A0			jsr CHOICELISTFILE
  5245 A324 AD 28 3F 95 95		mva CHOICELISTFILE.RESULT :STACKORIGIN+1,x
  5246
  5247 				; optimize OK (MIDICar Player.pas), line = 111
  5248
  5249 A329 AD 0D 04			lda P_BANK
  5250 A32C C9 FF			cmp #$FF
  5251 A32E D0 18			jne l_0F8C
  5252
  5253 				; optimize OK (MIDICar Player.pas), line = 112
  5254
  5255 A330 AD A7 A7			lda OUTSTR
  5256 A333 8D 1C 3F			sta LOADSONG.FILENAME
  5257 A336 AD A8 A7			lda OUTSTR+1
  5258 A339 8D 1D 3F			sta LOADSONG.FILENAME+1
  5259 A33C 20 86 9B			jsr LOADSONG
  5260 A33F AD 1E 3F			lda LOADSONG.RESULT
  5261 A342 8D 87 3E			sta SYSTEM.IORESULT
  5262 A345 4C 4B A3			jmp l_0F9C
  5263 A348			l_0F8C
  5264 A348 4C 58 A3			jmp c_0EFC					; continue
  5265 A34B			l_0F9C
  5266
  5267 				; optimize OK (MIDICar Player.pas), line = 115
  5268
  5269 A34B A0 01			ldy #1
  5270 A34D AD 87 3E			lda SYSTEM.IORESULT
  5271 A350 C9 01			cmp #$01
  5272 A352 D0 01			bne @+
  5273 A354 88				dey
  5274 				@
  5275 A355 98				tya
  5276 A356 D0 03			bne *+5
  5277 A358			c_0EFC
  5278 A358 4C D8 A2			jmp l_0EFC
  5279
  5280 				; optimize FAIL ('CLEARSTATUS', MIDICar Player.pas), line = 116
  5281
  5282 A35B 20 63 98			jsr CLEARSTATUS
  5283
  5284 				; optimize OK (MIDICar Player.pas), line = 117
  5285
  5286 A35E AD 87 3E			lda SYSTEM.IORESULT
  5287 A361 29 FC			and #$FC
  5288 A363 F0 06			jeq l_0FC0
  5289 A365 AD 87 3E			lda SYSTEM.IORESULT
  5290 A368 20 02 9B			jsr STATUSERROR
  5291 A36B			l_0FC0
  5292
  5293 				; optimize OK (MIDICar Player.pas), line = 118
  5294
  5295 A36B AD BB 3E			lda MIDFILES.TOTALTRACKS
  5296 A36E F0 03			jeq l_0FD9
  5297
  5298 				; optimize FAIL ('STATUSPLAYING', MIDICar Player.pas), line = 119
  5299
  5300 A370 20 DE 99			jsr STATUSPLAYING
  5301 A373			l_0FD9
  5302
  5303 				; optimize OK (MIDICar Player.pas), line = 120
  5304
  5305 A373 A9 01			lda #$01
  5306 A375 8D 05 04			sta PLAYDIR
  5307 A378			l_0EFA
  5308 A378			l_0EE7
  5309 A378			l_0ED4
  5310 A378			l_0EB6
  5311
  5312 				; optimize OK (MIDICar Player.pas), line = 125
  5313
  5314 A378 A5 14			lda _TM
  5315 A37A C5 13			cmp OTM
  5316 A37C D0 03 4C 2A A4		jeq l_0FFD
  5317
  5318 				; optimize OK (MIDICar Player.pas), line = 127
  5319
  5320 A381 85 13			sta OTM
  5321
  5322 				; optimize OK (MIDICar Player.pas), line = 128
  5323
  5324 A383 A5 4A			lda PLAYERSTATUS
  5325 A385 10 0A			jpl l_101A
  5326
  5327 				; optimize OK (MIDICar Player.pas), line = 130
  5328
  5329 A387 49 80			eor #$80
  5330 A389 85 4A			sta PLAYERSTATUS
  5331
  5332 				; optimize FAIL ('SHOWLIST', MIDICar Player.pas), line = 131
  5333
  5334 A38B 20 68 A0			jsr SHOWLIST
  5335
  5336 				; optimize FAIL ('DRAWLISTSELECTION', MIDICar Player.pas), line = 132
  5337
  5338 A38E 20 DD 9F			jsr DRAWLISTSELECTION
  5339 A391			l_101A
  5340
  5341 				; optimize OK (MIDICar Player.pas), line = 134
  5342
  5343 A391 A9 D4			lda #$D4
  5344 A393 85 D4			sta SCRADR
  5345 A395 A9 39			lda #$39
  5346 A397 85 D5			sta SCRADR+1
  5347 A399 A9 F0			lda <MIDFILES._TOTALTICKS
  5348 A39B 8D 0A 3F			sta PUTHEX.V
  5349 A39E A9 00			lda >MIDFILES._TOTALTICKS
  5350 A3A0 8D 0B 3F			sta PUTHEX.V+1
  5351 A3A3 A9 08			lda #$08
  5352 A3A5 8D 0C 3F			sta PUTHEX.N
  5353 A3A8 20 96 94			jsr PUTHEX
  5354
  5355 				; -------------------  ASM Block 00000118  -------------------
  5356
  5357 A3AB			  icl 'asms/uvmeters.a65' 
Source: uvmeters.a65
     1 = 00D6			hlpptr = $D6
     2 A3AB A5 4A		  lda playerStatus
     3 A3AD 29 02		  and #ps_view
     4 A3AF D0 54		  bne dontUpdateUVMeter
     5
     6 A3B1			updateUVMeter:
     7 A3B1 8E 04 A4		  stx regx // txa:pha
     8
     9 A3B4 A9 22		  lda #<SCREEN_CHANNELS
    10 A3B6 85 D4		  sta scradr
    11 A3B8 A9 37		  lda #>SCREEN_CHANNELS
    12 A3BA 85 D5		  sta scradr+1
    13
    14 A3BC A2 00		  ldx #0
    15 A3BE			uvmeterLoop:
    16 A3BE BD C2 3E		  lda MIDFILES.adr.CHNVOLUME,x
    17 A3C1 F0 30		  beq dontUpdate
    18
    19 A3C3 C9 04		  cmp #4
    20 A3C5 10 04		  bpl decVol
    21 A3C7 A9 00		  lda #0
    22 A3C9 F0 03		  beq storeVol
    23 A3CB			decVol:
    24 A3CB 38 E9 04		  sub #4
    25 A3CE			storeVol:
    26 A3CE 9D C2 3E		  sta MIDFILES.adr.CHNVOLUME,x
    27
    28 A3D1 4A			  lsr @
    29 A3D2 29 3C		  and #%00111100
    30
    31 A3D4 18 69 00		  add #<UVMETER_ADDR
    32 A3D7 85 D6		  sta hlpptr
    33 A3D9 A9 3B		  lda #>UVMETER_ADDR
    34 A3DB 85 D7		  sta hlpptr+1
    35
    36 A3DD A0 03		  ldy #3            //2
    37 A3DF B1 D6		  lda (hlpptr),y    //5*
    38 A3E1 91 D4		  sta (scradr),y    //6
    39 A3E3 88			  dey               //2
    40 A3E4 B1 D6		  lda (hlpptr),y
    41 A3E6 91 D4		  sta (scradr),y
    42 A3E8 88			  dey
    43 A3E9 B1 D6		  lda (hlpptr),y
    44 A3EB 91 D4		  sta (scradr),y
    45 A3ED 88			  dey
    46 A3EE B1 D6		  lda (hlpptr),y
    47 A3F0 91 D4		  sta (scradr),y
    48 A3F2 88			  dey
    49 				                    //15*+39*
    50
    51 A3F3			dontUpdate:
    52 A3F3 A5 D4		  lda scradr        //3
    53 A3F5 18 69 28		  add #40           //4
    54 A3F8 85 D4		  sta scradr        //3
    55 A3FA 90 02 E6 D5		  scc:inc scradr+1  //2**+5
    56
    57 A3FE E8			  inx
    58 A3FF E0 10		  cpx #16
    59 A401 D0 BB		  bne uvmeterLoop
    60
    61 A403 A2 00		  ldx regx:#00 // pla:tax
    62 A405			dontUpdateUVMeter
  5358 				; optimize OK (MIDICar Player.pas), line = 137
  5359
  5360 A405 AD 07 3F			lda STATEINPUTLINE
  5361 A408 C9 01			cmp #$01
  5362 A40A D0 1E			jne l_1042
  5363
  5364 				; optimize OK (MIDICar Player.pas), line = 138
  5365
  5366 A40C A5 14			lda _TM
  5367 A40E 38 E5 12			sub CTM
  5368 A411 C9 0A			cmp #$0A
  5369 A413 90 15			jcc l_105B
  5370 A415 F0 13			jeq l_105B
  5371
  5372 				; optimize OK (MIDICar Player.pas), line = 140
  5373
  5374 A417 A5 14			lda _TM
  5375 A419 85 12			sta CTM
  5376
  5377 				; optimize OK (MIDICar Player.pas), line = 141
  5378
  5379 A41B A0 01			ldy #1
  5380 A41D AD 53 04			lda ILVCRS
  5381 A420 F0 01			beq @+
  5382 A422 88				dey
  5383 				@
  5384 A423 98				tya
  5385 A424 8D 53 04			sta ILVCRS
  5386
  5387 				; optimize FAIL ('SHOW_INPUTLINE', MIDICar Player.pas), line = 142
  5388
  5389 A427 20 97 9E			jsr SHOW_INPUTLINE
  5390 A42A			l_105B
  5391 A42A			l_1042
  5392 A42A			l_0FFD
  5393
  5394 				; optimize OK (keyboard.inc), line = 1
  5395
  5396 A42A AD FC 02			lda KEYB
  5397 A42D C9 FF			cmp #$FF
  5398 A42F D0 03 4C 7F A7		jeq l_1084
  5399
  5400 				; optimize OK (keyboard.inc), line = 3
  5401
  5402 A434 A5 4A			lda PLAYERSTATUS
  5403 A436 29 20			and #$20
  5404 A438 F0 15			jeq l_109B
  5405
  5406 				; optimize OK (keyboard.inc), line = 5
  5407
  5408 A43A A5 4A			lda PLAYERSTATUS
  5409 A43C 49 20			eor #$20
  5410 A43E 85 4A			sta PLAYERSTATUS
  5411
  5412 				; optimize OK (keyboard.inc), line = 6
  5413
  5414 A440 A9 F8			lda #$F8
  5415 A442 8D CC 3F			sta $3FCC
  5416 A445 A9 36			lda #$36
  5417 A447 8D CD 3F			sta $3FCC+1
  5418
  5419 				; optimize OK (keyboard.inc), line = 7
  5420
  5421 A44A A9 FF			lda #$FF
  5422 A44C 8D FC 02			sta KEYB
  5423 A44F			l_109B
  5424
  5425 				; optimize OK (keyboard.inc), line = 9
  5426
  5427 A44F AD 07 3F			lda STATEINPUTLINE
  5428 A452 C9 01			cmp #$01
  5429 A454 D0 06			jne l_10C1
  5430
  5431 				; optimize FAIL ('DO_INPUTLINE', keyboard.inc), line = 11
  5432
  5433 A456 20 46 9F			jsr DO_INPUTLINE
  5434 A459 4C 66 A4			jmp l_10CC
  5435 A45C			l_10C1
  5436
  5437 				; optimize OK (keyboard.inc), line = 12
  5438
  5439 A45C AD FC 02			lda KEYB
  5440 A45F C9 1C			cmp #$1C
  5441 A461 D0 03			jne l_10DE
  5442 A463 4C 82 A7			jmp b_0E93					; break
  5443 A466			l_10DE
  5444 A466			l_10CC
  5445
  5446 				; optimize OK (keyboard.inc), line = 14
  5447
  5448 A466 AD FC 02			lda KEYB
  5449 A469 8D 29 3F			sta @CASETMP_0004
  5450 A46C C9 39			cmp #$39
  5451 A46E D0 13			jne l_10EC
  5452 				@
  5453
  5454 				; optimize OK (keyboard.inc), line = 17
  5455
  5456 A470 A5 4A			lda PLAYERSTATUS
  5457 A472 49 20			eor #$20
  5458 A474 85 4A			sta PLAYERSTATUS
  5459
  5460 				; optimize OK (keyboard.inc), line = 18
  5461
  5462 A476 A9 40			lda #$40
  5463 A478 8D CC 3F			sta $3FCC
  5464 A47B A9 3B			lda #$3B
  5465 A47D 8D CD 3F			sta $3FCC+1
  5466
  5467 A480 4C 7A A7			jmp a_0004
  5468 A483			l_10EC
  5469 A483 C9 0C			cmp #$0C
  5470 A485 F0 03 4C 67 A5		jne l_1102
  5471 				@
  5472
  5473 				; optimize FAIL ('CHOICELISTFILE', keyboard.inc), line = 22
  5474
  5475 A48A 20 AE A0			jsr CHOICELISTFILE
  5476 A48D AD 28 3F			lda CHOICELISTFILE.RESULT
  5477 A490 F0 31			jeq l_110C
  5478
  5479 				; optimize OK (keyboard.inc), line = 25
  5480
  5481 A492 AD 0D 04			lda P_BANK
  5482 A495 C9 FE			cmp #$FE
  5483 A497 D0 06			jne l_111F
  5484
  5485 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 27
  5486
  5487 A499 20 DD 9F			jsr DRAWLISTSELECTION
  5488
  5489 				; optimize FAIL ('INIT_INPUTLINE', keyboard.inc), line = 28
  5490
  5491 A49C 20 DE 9E			jsr INIT_INPUTLINE
  5492 A49F			l_111F
  5493
  5494 				; optimize OK (keyboard.inc), line = 30
  5495
  5496 A49F AD 0D 04			lda P_BANK
  5497 A4A2 C9 FF			cmp #$FF
  5498 A4A4 D0 1D			jne l_1136
  5499
  5500 				; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 32
  5501
  5502 A4A6 20 77 9A			jsr STATUSSTOPPED
  5503
  5504 				; optimize OK (keyboard.inc), line = 33
  5505
  5506 A4A9 AD A7 A7			lda OUTSTR
  5507 A4AC 8D 1C 3F			sta LOADSONG.FILENAME
  5508 A4AF AD A8 A7			lda OUTSTR+1
  5509 A4B2 8D 1D 3F			sta LOADSONG.FILENAME+1
  5510 A4B5 20 86 9B			jsr LOADSONG
  5511 A4B8 AD 1E 3F			lda LOADSONG.RESULT
  5512 A4BB 8D 87 3E			sta SYSTEM.IORESULT
  5513
  5514 				; optimize OK (keyboard.inc), line = 34
  5515
  5516 A4BE A9 02			lda #$02
  5517 A4C0 8D 07 3F			sta STATEINPUTLINE
  5518 A4C3			l_1136
  5519 A4C3			l_110C
  5520
  5521 				; optimize OK (keyboard.inc), line = 37
  5522
  5523 A4C3 AD 07 3F			lda STATEINPUTLINE
  5524 A4C6 C9 02			cmp #$02
  5525 A4C8 F0 03 4C 64 A5		jne l_1158
  5526
  5527 				; optimize OK (keyboard.inc), line = 39
  5528
  5529 A4CD AD 0D 04			lda P_BANK
  5530 A4D0 C9 FE			cmp #$FE
  5531 A4D2 D0 74			jne l_116B
  5532
  5533 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 41
  5534
  5535 A4D4 20 DD 9F			jsr DRAWLISTSELECTION
  5536
  5537 				; optimize OK (keyboard.inc), line = 42
  5538
  5539 A4D7 AD 06 3F			lda RESULTINPUTLINE
  5540 A4DA F0 6C			jeq l_1179
  5541
  5542 				; optimize OK (keyboard.inc), line = 44
  5543
  5544 A4DC AD A7 A7			lda OUTSTR
  5545 A4DF 85 88			sta @move.src
  5546 A4E1 AD A8 A7			lda OUTSTR+1
  5547 A4E4 85 89			sta @move.src+1
  5548 					@moveSTRING FN #128
  5548 				 MWA FN @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  5548 A4E6 AD A5 A7 85 8C AD +  MWA FN @MOVE.DST
  5548 A4F0 A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  5548 A4F8 20 6C 83		 JSR @MOVESTRING
  5549
  5550 				; optimize OK (keyboard.inc), line = 45
  5551
  5552 A4FB AD A7 A7			lda OUTSTR
  5553 A4FE 85 88			sta GETDEVICESPEC.FN
  5554 A500 AD A8 A7			lda OUTSTR+1
  5555 A503 85 89			sta GETDEVICESPEC.FN+1
  5556 A505 AD A3 A7			lda CURDEV
  5557 A508 85 8C			sta GETDEVICESPEC.SPEC
  5558 A50A AD A4 A7			lda CURDEV+1
  5559 A50D 85 8D			sta GETDEVICESPEC.SPEC+1
  5560 A50F 20 26 96			jsr GETDEVICESPEC
  5561 A512 A5 90			lda GETDEVICESPEC.RESULT
  5562 A514 D0 17			jne l_118D
  5563 A516 AD A3 A7			lda CURDEV
  5564 A519 85 88			sta JOINSTRINGS.S1
  5565 A51B AD A4 A7			lda CURDEV+1
  5566 A51E 85 89			sta JOINSTRINGS.S1+1
  5567 A520 AD A5 A7			lda FN
  5568 A523 85 8C			sta JOINSTRINGS.S2
  5569 A525 AD A6 A7			lda FN+1
  5570 A528 85 8D			sta JOINSTRINGS.S2+1
  5571 A52A 20 4A 96			jsr JOINSTRINGS
  5572 A52D			l_118D
  5573
  5574 				; optimize OK (keyboard.inc), line = 46
  5575
  5576 A52D AD A7 A7			lda OUTSTR
  5577 A530 8D 22 3F			sta FILESELECT.PATH
  5578 A533 AD A8 A7			lda OUTSTR+1
  5579 A536 8D 23 3F			sta FILESELECT.PATH+1
  5580 A539 20 80 9D			jsr FILESELECT
  5581 A53C AD 24 3F			lda FILESELECT.RESULT
  5582 A53F 8D 87 3E			sta SYSTEM.IORESULT
  5583
  5584 				; optimize OK (keyboard.inc), line = 47
  5585
  5586 A542 A5 4A			lda PLAYERSTATUS
  5587 A544 09 80			ora #$80
  5588 A546 85 4A			sta PLAYERSTATUS
  5589 A548			l_1179
  5590 A548			l_116B
  5591
  5592 				; optimize OK (keyboard.inc), line = 50
  5593
  5594 A548 AD 87 3E			lda SYSTEM.IORESULT
  5595 A54B 29 FC			and #$FC
  5596 A54D F0 06			jeq l_11BF
  5597 A54F AD 87 3E			lda SYSTEM.IORESULT
  5598 A552 20 02 9B			jsr STATUSERROR
  5599 A555			l_11BF
  5600
  5601 				; optimize OK (keyboard.inc), line = 51
  5602
  5603 A555 AD 0D 04			lda P_BANK
  5604 A558 C9 FF			cmp #$FF
  5605 A55A D0 03			jne l_11D8
  5606 A55C 20 DE 99			jsr STATUSPLAYING
  5607 A55F			l_11D8
  5608
  5609 				; optimize OK (keyboard.inc), line = 52
  5610
  5611 A55F A9 00			lda #$00
  5612 A561 8D 07 3F			sta STATEINPUTLINE
  5613 A564			l_1158
  5614
  5615 A564 4C 7A A7			jmp a_0004
  5616 A567			l_1102
  5617 A567 C9 21			cmp #$21
  5618 A569 D0 4C			jne l_11EB
  5619 				@
  5620
  5621 				; optimize OK (keyboard.inc), line = 57
  5622
  5623 A56B AD 02 04			lda CURFILE
  5624 A56E 20 C9 9C			jsr GOTONENTRY
  5625
  5626 				; optimize OK (keyboard.inc), line = 58
  5627
  5628 A571 AD A7 A7			lda OUTSTR
  5629 A574 85 88			sta GETENTRY.FN
  5630 A576 AD A8 A7			lda OUTSTR+1
  5631 A579 85 89			sta GETENTRY.FN+1
  5632 A57B 20 51 9C			jsr GETENTRY
  5633 A57E A5 90 95 95			mva GETENTRY.RESULT :STACKORIGIN+1,x
  5634
  5635 				; optimize OK (keyboard.inc), line = 59
  5636
  5637 A582 A9 0D			lda <P_BANK
  5638 A584 85 88			sta GETENTRYSETS.PTR
  5639 A586 A9 04			lda >P_BANK
  5640 A588 85 89			sta GETENTRYSETS.PTR+1
  5641 A58A 20 8F 9C			jsr GETENTRYSETS
  5642
  5643 				; optimize OK (keyboard.inc), line = 60
  5644
  5645 A58D AD 0D 04			lda P_BANK
  5646 A590 C9 FE			cmp #$FE
  5647 A592 F0 20			jeq l_1216
  5648 A594 29 7F			and #$7F
  5649 A596 F0 1C			jeq l_1216
  5650
  5651 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 62
  5652
  5653 A598 20 DD 9F			jsr DRAWLISTSELECTION
  5654
  5655 				; optimize OK (keyboard.inc), line = 63
  5656
  5657 A59B AD 0D 04			lda P_BANK
  5658 A59E 49 80			eor #$80
  5659 A5A0 8D 0D 04			sta P_BANK
  5660
  5661 				; optimize OK (keyboard.inc), line = 64
  5662
  5663 A5A3 A9 0D			lda <P_BANK
  5664 A5A5 85 88			sta SETENTRYSETS.PTR
  5665 A5A7 A9 04			lda >P_BANK
  5666 A5A9 85 89			sta SETENTRYSETS.PTR+1
  5667 A5AB 20 99 9C			jsr SETENTRYSETS
  5668
  5669 				; optimize FAIL ('SHOWENTRY', keyboard.inc), line = 65
  5670
  5671 A5AE 20 F2 9F			jsr SHOWENTRY
  5672
  5673 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 66
  5674
  5675 A5B1 20 DD 9F			jsr DRAWLISTSELECTION
  5676 A5B4			l_1216
  5677
  5678 A5B4 4C 7A A7			jmp a_0004
  5679 A5B7			l_11EB
  5680 A5B7 C9 0E			cmp #$0E
  5681 A5B9 F0 07			beq @+
  5682 A5BB C9 0F			cmp #$0F
  5683 A5BD F0 03 4C 76 A6		jne l_1233
  5684 				@
  5685
  5686 				; optimize OK (keyboard.inc), line = 71
  5687
  5688 A5C2 A5 4A			lda PLAYERSTATUS
  5689 A5C4 30 03			jmi l_1249
  5690 A5C6 20 DD 9F			jsr DRAWLISTSELECTION
  5691 A5C9			l_1249
  5692
  5693 				; optimize OK (keyboard.inc), line = 72
  5694
  5695 A5C9 A9 00			lda #$00
  5696 A5CB 85 D7			sta V
  5697
  5698 				; optimize OK (keyboard.inc), line = 73
  5699
  5700 A5CD AD FC 02			lda KEYB
  5701 A5D0 C9 0E			cmp #$0E
  5702 A5D2 D0 14			jne l_1263
  5703
  5704 				; optimize OK (keyboard.inc), line = 75
  5705
  5706 A5D4 AD 00 04			lda YFILE
  5707 A5D7 F0 06			jeq l_1276
  5708
  5709 				; optimize FAIL (0, keyboard.inc), line = 76
  5710
  5711 A5D9 CE 00 04			dec YFILE
  5712 A5DC 4C E8 A5			jmp l_1284
  5713 A5DF			l_1276
  5714
  5715 				; optimize OK (keyboard.inc), line = 78
  5716
  5717 A5DF AD 01 04			lda SHFILE
  5718 A5E2 F0 04			jeq l_1296
  5719 A5E4 A9 FF			lda #$FF
  5720 A5E6 85 D7			sta V
  5721 A5E8			l_1296
  5722 A5E8			l_1284
  5723 A5E8			l_1263
  5724
  5725 				; optimize OK (keyboard.inc), line = 80
  5726
  5727 A5E8 AD FC 02			lda KEYB
  5728 A5EB C9 0F			cmp #$0F
  5729 A5ED D0 54			jne l_12B1
  5730
  5731 				; optimize OK (keyboard.inc), line = 82
  5732
  5733 A5EF AD 00 04			lda YFILE
  5734 A5F2 C9 0F			cmp #$0F
  5735 A5F4 B0 06			jcs l_12C4
  5736
  5737 				; optimize FAIL (0, keyboard.inc), line = 83
  5738
  5739 A5F6 EE 00 04			inc YFILE
  5740 A5F9 4C 43 A6			jmp l_12D2
  5741 A5FC			l_12C4
  5742
  5743 				; optimize OK (keyboard.inc), line = 85
  5744
  5745 A5FC AD 03 04			lda TOTALFILES
  5746 A5FF 38 ED 00 04			sub YFILE
  5747 A603 85 9E			sta :STACKORIGIN+10
  5748 A605 A9 00			lda #$00
  5749 A607 E9 00			sbc #$00
  5750 A609 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  5751 A60B A9 00			lda #$00
  5752 A60D E9 00			sbc #$00
  5753 A60F 85 BE			sta :STACKORIGIN+STACKWIDTH*2+10
  5754 A611 A9 00			lda #$00
  5755 A613 E9 00			sbc #$00
  5756 A615 85 CE			sta :STACKORIGIN+STACKWIDTH*3+10
  5757 A617 A5 9E			lda :STACKORIGIN+10
  5758 A619 38 E9 01			sub #$01
  5759 A61C 85 9E			sta :STACKORIGIN+10
  5760 A61E A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  5761 A620 E9 00			sbc #$00
  5762 A622 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  5763 A624 A5 BE			lda :STACKORIGIN+STACKWIDTH*2+10
  5764 A626 E9 00			sbc #$00
  5765 A628 85 BE			sta :STACKORIGIN+STACKWIDTH*2+10
  5766 A62A A5 CE			lda :STACKORIGIN+STACKWIDTH*3+10
  5767 A62C E9 00			sbc #$00
  5768 A62E D0 0D			bne @+
  5769 A630 A5 BE			lda :STACKORIGIN+STACKWIDTH*2+10
  5770 A632 D0 09			bne @+
  5771 A634 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  5772 A636 D0 05			bne @+
  5773 A638 AD 01 04			lda SHFILE
  5774 A63B C5 9E			cmp :STACKORIGIN+10
  5775 				@
  5776 A63D B0 04			jcs l_12F0
  5777 A63F A9 01			lda #$01
  5778 A641 85 D7			sta V
  5779 A643			l_12F0
  5780 A643			l_12D2
  5781 A643			l_12B1
  5782
  5783 				; optimize OK (keyboard.inc), line = 87
  5784
  5785 A643 A5 D7			lda V
  5786 A645 F0 0F			jeq l_130B
  5787
  5788 				; optimize OK (keyboard.inc), line = 89
  5789
  5790 A647 AD 01 04			lda SHFILE
  5791 A64A 18 65 D7			add V
  5792 A64D 8D 01 04			sta SHFILE
  5793
  5794 				; optimize OK (keyboard.inc), line = 90
  5795
  5796 A650 A5 4A			lda PLAYERSTATUS
  5797 A652 09 80			ora #$80
  5798 A654 85 4A			sta PLAYERSTATUS
  5799 A656			l_130B
  5800
  5801 				; optimize OK (keyboard.inc), line = 93
  5802
  5803 A656 AD 01 04			lda SHFILE
  5804 A659 18 6D 00 04			add YFILE
  5805 A65D 8D 02 04			sta CURFILE
  5806
  5807 				; optimize OK (keyboard.inc), line = 94
  5808
  5809 A660 CD 03 04			cmp TOTALFILES
  5810 A663 90 07			jcc l_133B
  5811 A665 AC 03 04			ldy TOTALFILES
  5812 A668 88				dey
  5813 A669 8C 02 04			sty CURFILE
  5814 A66C			l_133B
  5815
  5816 				; optimize OK (keyboard.inc), line = 95
  5817
  5818 A66C A5 4A			lda PLAYERSTATUS
  5819 A66E 30 03			jmi l_135E
  5820 A670 20 DD 9F			jsr DRAWLISTSELECTION
  5821 A673			l_135E
  5822
  5823 A673 4C 7A A7			jmp a_0004
  5824 A676			l_1233
  5825 A676 C9 00			cmp #$00
  5826 A678 D0 17			jne l_136B
  5827 				@
  5828
  5829 				; optimize OK (keyboard.inc), line = 99
  5830
  5831 A67A A5 4A			lda PLAYERSTATUS
  5832 A67C 18 69 04			add #$04
  5833 A67F 29 0C			and #$0C
  5834 A681 85 D7			sta V
  5835
  5836 				; optimize OK (keyboard.inc), line = 100
  5837
  5838 A683 A5 4A			lda PLAYERSTATUS
  5839 A685 29 F3			and #$F3
  5840 A687 05 D7			ora V
  5841 A689 85 4A			sta PLAYERSTATUS
  5842
  5843 				; optimize FAIL ('STATUSLOOP', keyboard.inc), line = 101
  5844
  5845 A68B 20 BC 99			jsr STATUSLOOP
  5846
  5847 A68E 4C 7A A7			jmp a_0004
  5848 A691			l_136B
  5849 A691 C9 25			cmp #$25
  5850 A693 D0 0C			jne l_1393
  5851 				@
  5852
  5853 				; optimize FAIL ('CLEARUVMETERS', keyboard.inc), line = 105
  5854
  5855 A695 20 64 99			jsr CLEARUVMETERS
  5856
  5857 				; optimize OK (keyboard.inc), line = 106
  5858
  5859 A698 A5 4A			lda PLAYERSTATUS
  5860 A69A 49 02			eor #$02
  5861 A69C 85 4A			sta PLAYERSTATUS
  5862
  5863 A69E 4C 7A A7			jmp a_0004
  5864 A6A1			l_1393
  5865 A6A1 C9 27			cmp #$27
  5866 A6A3 D0 0C			jne l_13A7
  5867 				@
  5868
  5869 				; optimize OK (keyboard.inc), line = 110
  5870
  5871 A6A5 A5 4A			lda PLAYERSTATUS
  5872 A6A7 49 01			eor #$01
  5873 A6A9 85 4A			sta PLAYERSTATUS
  5874
  5875 				; optimize FAIL ('SETCOLORS', keyboard.inc), line = 111
  5876
  5877 A6AB 20 F4 93			jsr SETCOLORS
  5878
  5879 A6AE 4C 7A A7			jmp a_0004
  5880 A6B1			l_13A7
  5881 A6B1 C9 17			cmp #$17
  5882 A6B3 F0 04			beq @+
  5883 A6B5 C9 15			cmp #$15
  5884 A6B7 D0 22			jne l_13BD
  5885 				@
  5886
  5887 				; optimize OK (keyboard.inc), line = 115
  5888
  5889 A6B9 AD FC 02			lda KEYB
  5890 A6BC C9 17			cmp #$17
  5891 A6BE D0 05			jne l_13CF
  5892 A6C0 A9 FF			lda #$FF
  5893 A6C2 8D 05 04			sta PLAYDIR
  5894 A6C5			l_13CF
  5895
  5896 				; optimize OK (keyboard.inc), line = 116
  5897
  5898 A6C5 AD FC 02			lda KEYB
  5899 A6C8 C9 15			cmp #$15
  5900 A6CA D0 05			jne l_13E8
  5901 A6CC A9 01			lda #$01
  5902 A6CE 8D 05 04			sta PLAYDIR
  5903 A6D1			l_13E8
  5904
  5905 				; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 117
  5906
  5907 A6D1 20 41 9A			jsr STATUSPAUSE
  5908
  5909 				; optimize OK (keyboard.inc), line = 118
  5910
  5911 A6D4 A9 00			lda #$00
  5912 A6D6 85 DF			sta MIDFILES.PLAYINGTRACKS
  5913
  5914 A6D8 4C 7A A7			jmp a_0004
  5915 A6DB			l_13BD
  5916 A6DB C9 16			cmp #$16
  5917 A6DD D0 09			jne l_13FD
  5918 				@
  5919
  5920 				; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 122
  5921
  5922 A6DF 20 77 9A			jsr STATUSSTOPPED
  5923
  5924 				; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 123
  5925
  5926 A6E2 20 DE 99			jsr STATUSPLAYING
  5927
  5928 A6E5 4C 7A A7			jmp a_0004
  5929 A6E8			l_13FD
  5930 A6E8 C9 12			cmp #$12
  5931 A6EA D0 10			jne l_1408
  5932 				@
  5933
  5934 				; optimize OK (keyboard.inc), line = 127
  5935
  5936 A6EC A5 F5			lda MIDFILES._TIMERSTATUS
  5937 A6EE 10 06			jpl l_141E
  5938
  5939 				; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 129
  5940
  5941 A6F0 20 DE 99			jsr STATUSPLAYING
  5942 A6F3 4C F9 A6			jmp l_1429
  5943 A6F6			l_141E
  5944
  5945 				; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 130
  5946
  5947 A6F6 20 41 9A			jsr STATUSPAUSE
  5948 A6F9			l_1429
  5949
  5950 A6F9 4C 7A A7			jmp a_0004
  5951 A6FC			l_1408
  5952 A6FC C9 10			cmp #$10
  5953 A6FE D0 06			jne l_1433
  5954 				@
  5955
  5956 				; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 132
  5957
  5958 A700 20 77 9A			jsr STATUSSTOPPED
  5959 A703 4C 7A A7			jmp a_0004
  5960 A706			l_1433
  5961 A706 C9 34			cmp #$34
  5962 A708 F0 08			beq @+
  5963 A70A C9 36			cmp #$36
  5964 A70C F0 04			beq @+
  5965 A70E C9 37			cmp #$37
  5966 A710 D0 68			jne l_1441
  5967 				@
  5968
  5969 				; optimize OK (keyboard.inc), line = 135
  5970
  5971 A712 AD FC 02			lda KEYB
  5972 A715 C9 36			cmp #$36
  5973 A717 D0 21			jne l_1453
  5974 A719 AD D6 3E			lda MIDFILES.TEMPOSHIFT
  5975 A71C 18 69 20			add #$20
  5976 A71F 8D D6 3E			sta MIDFILES.TEMPOSHIFT
  5977 A722 AD D7 3E			lda MIDFILES.TEMPOSHIFT+1
  5978 A725 69 4E			adc #$4E
  5979 A727 8D D7 3E			sta MIDFILES.TEMPOSHIFT+1
  5980 A72A AD D8 3E			lda MIDFILES.TEMPOSHIFT+2
  5981 A72D 69 00			adc #$00
  5982 A72F 8D D8 3E			sta MIDFILES.TEMPOSHIFT+2
  5983 A732 AD D9 3E			lda MIDFILES.TEMPOSHIFT+3
  5984 A735 69 00			adc #$00
  5985 A737 8D D9 3E			sta MIDFILES.TEMPOSHIFT+3
  5986 A73A			l_1453
  5987
  5988 				; optimize OK (keyboard.inc), line = 136
  5989
  5990 A73A AD FC 02			lda KEYB
  5991 A73D C9 37			cmp #$37
  5992 A73F D0 21			jne l_1469
  5993 A741 AD D6 3E			lda MIDFILES.TEMPOSHIFT
  5994 A744 38 E9 20			sub #$20
  5995 A747 8D D6 3E			sta MIDFILES.TEMPOSHIFT
  5996 A74A AD D7 3E			lda MIDFILES.TEMPOSHIFT+1
  5997 A74D E9 4E			sbc #$4E
  5998 A74F 8D D7 3E			sta MIDFILES.TEMPOSHIFT+1
  5999 A752 AD D8 3E			lda MIDFILES.TEMPOSHIFT+2
  6000 A755 E9 00			sbc #$00
  6001 A757 8D D8 3E			sta MIDFILES.TEMPOSHIFT+2
  6002 A75A AD D9 3E			lda MIDFILES.TEMPOSHIFT+3
  6003 A75D E9 00			sbc #$00
  6004 A75F 8D D9 3E			sta MIDFILES.TEMPOSHIFT+3
  6005 A762			l_1469
  6006
  6007 				; optimize OK (keyboard.inc), line = 137
  6008
  6009 A762 AD FC 02			lda KEYB
  6010 A765 C9 34			cmp #$34
  6011 A767 D0 0E			jne l_147F
  6012 A769 A9 00			lda #$00
  6013 A76B 8D D6 3E			sta MIDFILES.TEMPOSHIFT
  6014 A76E 8D D7 3E			sta MIDFILES.TEMPOSHIFT+1
  6015 A771 8D D8 3E			sta MIDFILES.TEMPOSHIFT+2
  6016 A774 8D D9 3E			sta MIDFILES.TEMPOSHIFT+3
  6017 A777			l_147F
  6018
  6019 				; optimize FAIL ('MIDFILES.SETTEMPO', keyboard.inc), line = 138
  6020
  6021 A777 20 8D 8E			jsr MIDFILES.SETTEMPO
  6022
  6023 A77A			l_1441
  6024 A77A			a_0004
  6025
  6026 				; optimize OK (keyboard.inc), line = 141
  6027
  6028 A77A A9 FF			lda #$FF
  6029 A77C 8D FC 02			sta KEYB
  6030 A77F			l_1084
  6031
  6032 				; optimize OK (MIDICar Player.pas), line = 148
  6033
  6034 A77F 4C 9F A2			jmp l_0E93
  6035 A782			b_0E93
  6036
  6037 				; optimize FAIL ('UNSETNMI', MIDICar Player.pas), line = 151
  6038
  6039 A782 20 6F 97			jsr UNSETNMI
  6040
  6041 				; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 153
  6042
  6043 A785 20 93 99			jsr EXIT2DOS
  6044
  6045 				; ------------------------------------------------------------
  6046
  6047 = 0410			SCREEN_ADRSES	= $0410
  6048 = 3000			CHARS_ADDR	= $3000
  6049 = 3400			SCREEN_ADDR	= $3400
  6050 = 36F8			SCREEN_WORK	= $36F8
  6051 = 39C8			SCREEN_TIME	= $39C8
  6052 = 39DC			SCREEN_STATUS	= $39DC
  6053 = 3A04			SCREEN_FOOT	= $3A04
  6054 = 3B00			UVMETER_ADDR	= $3B00
  6055 = 3B40			HELPSCR_ADDR	= $3B40
  6056 = 3FB3			DLIST_ADDR	= $3FB3
  6057 = 3722			SCREEN_CHANNELS	= $3722
  6058 = 2000			PLAYLIST_ADDR	= $2000
  6059 = 2C00			START_INFO_ADDR	= $2C00
  6060 = 2E00			TRACK_DATA_ADDR	= $2E00
  6061 = 4000			MIDI_DATA_ADDR	= $4000
  6062 = 0023			FREE_MEM	= $23
  6063 = 0020			F_CLEAR	= $20
  6064 = 0001			PS_COLORSET	= $01
  6065 = 0002			PS_VIEW	= $02
  6066 = 000C			PS_LOOP	= $0C
  6067 = 0000			PS_PLAYONCE	= $00
  6068 = 0004			PS_REPEATONE	= $04
  6069 = 0008			PS_REPEATALL	= $08
  6070 = 000C			PS_SHUFFLE	= $0C
  6071 = 0080			PS_ISREFRESH	= $80
  6072 = 0040			PS_ISSTOPPED	= $40
  6073 = 0020			PS_ISHELP	= $20
  6074 = 001E			LIST_VISIBLE_CHARS	= $1E
  6075 = 0010			LIST_VISIBLE_ITEMS	= $10
  6076 = A4A9B200		FE_DIR	= $A4A9B200
  6077 = 4D494400		FE_MID	= $4D494400
  6078 = 004A			PLAYERSTATUS	= $4A
  6079 = 004B			TOTALXMS	= $4B
  6080 = 00D4			SCRADR	= $D4
  6081 = 00D8			MCBASEADDR	= $D8
  6082 = 0014			_TM	= $14
  6083 = 0013			OTM	= $13
  6084 = 0012			CTM	= $12
  6085 = 00D6			CHN	= $D6
  6086 = 00D7			V	= $D7
  6087 = 00DA			FILELIST	= $DA
  6088 = 0400			YFILE	= $0400
  6089 = 0401			SHFILE	= $0401
  6090 = 0402			CURFILE	= $0402
  6091 = 0403			TOTALFILES	= $0403
  6092 = 0404			CURPLAY	= $0404
  6093 = 0405			PLAYDIR	= $0405
  6094 = 040A			LAST_BANK	= $040A
  6095 = 040B			LAST_ADR	= $040B
  6096 = 0410			adr.PLAYLISTSCRADR	= $0410
  6097 A788			.var PLAYLISTSCRADR	= adr.PLAYLISTSCRADR .word
  6098 = 04FC			adr.CURDEV	= $04FC
  6099 A788			.var CURDEV	= adr.CURDEV .word
  6100 = 0500			adr.FN	= $0500
  6101 A788			.var FN	= adr.FN .word
  6102 = 0580			adr.OUTSTR	= $0580
  6103 A788			.var OUTSTR	= adr.OUTSTR .word
  6104 = 00D6			ILCH	= $D6
  6105 = 0450			ILPOS	= $0450
  6106 = 0451			ILSCRADR	= $0451
  6107 = 0453			ILVCRS	= $0453
  6108 = 3F06			RESULTINPUTLINE	= DATAORIGIN+$0086
  6109 = 3F07			STATEINPUTLINE	= DATAORIGIN+$0087
  6110 = 8100			adr.COLORS	= CODEORIGIN+$0100
  6111 A788			.var COLORS	= adr.COLORS .word
  6112 = 3F08			PUTTEXTINVERT	= DATAORIGIN+$0088
  6113 = 3F09			SDMACTL	= DATAORIGIN+$0089
  6114 = D400			DMACTL	= $D400
  6115 = 0230			SDLST	= $0230
  6116 = 02F4			CHBASE	= $02F4
  6117 = 0222			VVBLKI	= $0222
  6118 = D40E			NMIEN	= $D40E
  6119 = FFFA			NMIVEC	= $FFFA
  6120 = 3F0F			OLDVVBLKI	= DATAORIGIN+$008F
  6121 = 3F11			OLDNMIVEC	= DATAORIGIN+$0091
  6122 = 001F			THI	= $1F
  6123 = 0000			K_L	= $00
  6124 = 0006			K_LEFT	= $06
  6125 = 0007			K_RIGHT	= $07
  6126 = 000A			K_P	= $0A
  6127 = 000C			K_RETURN	= $0C
  6128 = 000E			K_UP	= $0E
  6129 = 000F			K_DOWN	= $0F
  6130 = 0010			K_V	= $10
  6131 = 0011			K_HELP	= $11
  6132 = 0012			K_C	= $12
  6133 = 0015			K_B	= $15
  6134 = 0016			K_X	= $16
  6135 = 0017			K_Z	= $17
  6136 = 001C			K_ESC	= $1C
  6137 = 0021			K_SPACE	= $21
  6138 = 0025			K_M	= $25
  6139 = 0027			K_INVERS	= $27
  6140 = 002C			K_TAB	= $2C
  6141 = 0034			K_DELETE	= $34
  6142 = 0036			K_CLEAR	= $36
  6143 = 0037			K_INSERT	= $37
  6144 = 0039			K_H	= $39
  6145 = 003C			K_CAPS	= $3C
  6146 = 003E			K_S	= $3E
  6147 = 02FC			KEYB	= $02FC
  6148 = 0041			SOUNDR	= $41
  6149 = 040D			P_BANK	= $040D
  6150 = 040E			P_ADR	= $040E
  6151 = 3F29			@CASETMP_0004	= DATAORIGIN+$00A9
  6152 A788			@exit
  6153
  6154 A788 A2 00		@halt	ldx #$00
  6155 A78A 9A				txs
  6156 					.ifdef MAIN.@DEFINES.ROMOFF
  6157 A78B EE 01 D3			inc portb
  6158 					.fi
  6159
  6160 A78E A0 01			ldy #$01
  6161
  6162 A790 60				rts
  6163
  6164 				; ------------------------------------------------------------
  6165
  6166 A791 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  6167
  6168 				; ------------------------------------------------------------
  6169
  6170 A7A1			.local	@DEFINES
  6171 A7A1			ATARI
  6172 A7A1			USE_FIFO
  6173 A7A1			ROMOFF
  6174 				.endl
  6175
  6176 A7A1			.local	@RESOURCE
  6177 				.endl
  6178
  6179 = A7A1 10 04		PLAYLISTSCRADR
  6179 = A7A3 FC 04		CURDEV
  6179 = A7A5 00 05		FN
  6179 = A7A7 80 05		OUTSTR
  6179 = A7A9 00 81		COLORS
  6179 				.endl							; MAIN
  6180
  6181 				; ------------------------------------------------------------
  6182 				; ------------------------------------------------------------
  6183
  6184 				.macro	UNITINITIALIZATION
  6185 				
  6186 					.ifdef MAIN.SYSTEM.@UnitInit
  6187 					jsr MAIN.SYSTEM.@UnitInit
  6188 					.fi
  6189 				
  6190 					.ifdef MAIN.MC6850.@UnitInit
  6191 					jsr MAIN.MC6850.@UnitInit
  6192 					.fi
  6193 				
  6194 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  6195 					jsr MAIN.MIDI_FIFO.@UnitInit
  6196 					.fi
  6197 				
  6198 					.ifdef MAIN.CIO.@UnitInit
  6199 					jsr MAIN.CIO.@UnitInit
  6200 					.fi
  6201 				
  6202 					.ifdef MAIN.MIDFILES.@UnitInit
  6203 					jsr MAIN.MIDFILES.@UnitInit
  6204 					.fi
  6205 				
  6206 					.ifdef MAIN.MISC.@UnitInit
  6207 					jsr MAIN.MISC.@UnitInit
  6208 					.fi
  6209 				.endm
  6210
  6211 				; ------------------------------------------------------------
  6212
  6213 					ift .SIZEOF(MAIN.SYSTEM) > 0
  6214 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  6214 				SYSTEM: $896A..$89D5
  6215 					eif
  6216
  6217 					ift .SIZEOF(MAIN.MC6850) > 0
  6218 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  6218 				MC6850: $89D6..$89EC
  6219 					eif
  6220
  6221 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  6222 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  6222 				MIDI_FIFO: $89ED..$8A40
  6223 					eif
  6224
  6225 					ift .SIZEOF(MAIN.CIO) > 0
  6226 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  6226 				CIO: $8A41..$8AD0
  6227 					eif
  6228
  6229 					ift .SIZEOF(MAIN.MIDFILES) > 0
  6230 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  6230 				MIDFILES: $8AD1..$93F1
  6231 					eif
  6232
  6233 					ift .SIZEOF(MAIN.MISC) > 0
  6234 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  6234 				MISC: $93F2..$93F3
  6235 					eif
  6236
  6237 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  6237 				CODE: $8000..$A7A0
  6238
  6239 				; ------------------------------------------------------------
  6240
  6241 					org $3E80
  6242
  6243 3E80			DATAORIGIN
  6244 3E80-3E85> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  6245
  6246 = 0006			VARINITSIZE	= *-DATAORIGIN
  6247 = 00AA			VARDATASIZE	= 170
  6248
  6249 = 3F2A			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  6250
  6251 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  6251 				DATA: $3E80..$3F2A
  6252
  6253 02E0-02E1> D0 88			run START
  6254
  6255 				; ------------------------------------------------------------
  6256
  6257 				.macro	STATICDATA
  6258 				.by  $00 $00 $05 $FB $00 $FC $00 $FD  $00 $04 $2D $65 $6D $1A $00 $02  $2B $22 $00 $02 $45 $3A $00 $02
  6259 				.by  $00 $00 $00 $02 $7E $7F $00 $02  $5C $5D $00 $02 $5E $5F $00 $05  $3B $00 $FC $00 $FD $00 $09 $4E
  6260 				.by  $B0 $EC $E1 $F9 $E9 $EE $E7 $CE  $00 $09 $4E $AE $EF $80 $F3 $EF  $EE $E7 $CE $00 $05 $FB $00 $3C
  6261 				.by  $00 $FD $00 $09 $4E $80 $B0 $E1  $F5 $F3 $E5 $80 $CE $00 $05 $FB  $00 $FC $00 $3D $00 $09 $4E $B3
  6262 				.by  $F4 $EF $F0 $F0 $E5 $E4 $CE $00  $09 $4E $AC $EF $E1 $E4 $E9 $EE  $E7 $80 $00 $13 $4E $B2 $E5 $E1
  6263 				.by  $E4 $E9 $EE $E7 $80 $E4 $E9 $F2  $E5 $E3 $F4 $EF $F2 $F9 $80 $00  $14 $4E $B5 $EE $F3 $F5 $F0 $F0
  6264 				.by  $EF $F2 $F4 $E5 $E4 $80 $E6 $EF  $F2 $ED $E1 $F4 $CE $00 $14 $4E  $AE $EF $F4 $80 $E5 $EE $EF $F5
  6265 				.by  $E7 $E8 $F4 $80 $ED $E5 $ED $EF  $F2 $F9 $CE $00 $11 $4E $AE $EF  $F4 $80 $E1 $80 $AD $A9 $A4 $A9
  6266 				.by  $80 $E6 $E9 $EC $E5 $CE $00 $0C  $4E $A9 $8F $AF $80 $A5 $F2 $F2  $EF $F2 $80 $83 $00 $0B $4E $A4
  6267 				.by  $E9 $F2 $E5 $E3 $F4 $EF $F2 $F9  $CE $00 $02 $44 $3A $00 $08 $4E  $B3 $F4 $E1 $F4 $F5 $F3 $CE $00
  6268 				.by  $09 $4E $A3 $EF $F5 $EE $F4 $E5  $F2 $CE $00 $03 $2A $2E $2A $00  $A8 $00 $0A $08 $0A $A8 $0A $00
  6269 				.by  $02 $00 $17 $80 $1B $80 $1F $80  $23 $80
  6270 				.endm
  6271
  6272 					end
