mads 2.1.6
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 8000			CODEORIGIN	= $8000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				.local	RESOURCE
   105 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1142 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 8075				RCDATA 'resources/selftest.mti' TRACK_DATA_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0009			len = .filesize('resources/selftest.mti')-0
    28 8075				org main.TRACK_DATA_ADDR
    30 3E00-3E08> 00 00 40 00 + 	ins 'resources/selftest.mti',0
    32 					.print '$R RCDATA  ',main.TRACK_DATA_ADDR,'..',*-1," 'resources/selftest.mti'"
    32 				$R RCDATA  $3E00..$3E08 'resources/selftest.mti'
Source: MIDICar Player.a65
   110 3E09				RCDATA 'resources/selftest.rmd' MIDI_DATA_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 006A			len = .filesize('resources/selftest.rmd')-0
    28 3E09				org main.MIDI_DATA_ADDR
    30 4000-4069> 00 FF 21 01 + 	ins 'resources/selftest.rmd',0
    32 					.print '$R RCDATA  ',main.MIDI_DATA_ADDR,'..',*-1," 'resources/selftest.rmd'"
    32 				$R RCDATA  $4000..$4069 'resources/selftest.rmd'
Source: MIDICar Player.a65
   111 406A				RCASM 'resources/dlist.asm' DLIST_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 406A				org RESORIGIN
     4 = 0023			len = .sizeof(_DLIST_ADDR)
     6 				mcpy	ift main.DLIST_ADDR+len >= $bc20
    11 8075-80B8> 20 41 80		jsr sys.off
    13 8078 A9 96 85 88 A9 80 +  MWA #DATA EDX
    13 8080 A9 00 85 8C A9 34 +  MWA #MAIN.DLIST_ADDR ECX
    13 8088 A9 23 85 84 A9 00 +  MWA #LEN EAX
    13 8090 20 00 80		 JSR RESOURCE.MEMCPY
    15 8093 4C 65 80			jmp sys.on
    16 8096			data
Source: dlist.inc
     1 = 0000			DL_BLANK1 = 0; // 1 blank line
     2 = 0010			DL_BLANK2 = %00010000; // 2 blank lines
     3 = 0020			DL_BLANK3 = %00100000; // 3 blank lines
     4 = 0030			DL_BLANK4 = %00110000; // 4 blank lines
     5 = 0040			DL_BLANK5 = %01000000; // 5 blank lines
     6 = 0050			DL_BLANK6 = %01010000; // 6 blank lines
     7 = 0060			DL_BLANK7 = %01100000; // 7 blank lines
     8 = 0070			DL_BLANK8 = %01110000; // 8 blank lines
    10 = 0080			DL_DLI = %10000000; // Order to run DLI
    11 = 0040			DL_LMS = %01000000; // Order to set new memory address
    12 = 0020			DL_VSCROLL = %00100000; // Turn on vertical scroll on this line
    13 = 0010			DL_HSCROLL = %00010000; // Turn on horizontal scroll on this line
    15 = 0002			DL_MODE_40x24T2 = 2; // Antic Modes
    16 = 0004			DL_MODE_40x24T5 = 4;
    17 = 0005			DL_MODE_40x12T5 = 5;
    18 = 0006			DL_MODE_20x24T5 = 6;
    19 = 0007			DL_MODE_20x12T5 = 7;
    20 = 0008			DL_MODE_40x24G4 = 8;
    21 = 0009			DL_MODE_80x48G2 = 9;
    22 = 000A			DL_MODE_80x48G4 = $A;
    23 = 000B			DL_MODE_160x96G2 = $B;
    24 = 000C			DL_MODE_160x192G2 = $C;
    25 = 000D			DL_MODE_160x96G4 = $D;
    26 = 000E			DL_MODE_160x192G4 = $E;
    27 = 000F			DL_MODE_320x192G2 = $F;
    29 = 0001			DL_JMP = %00000001; // Order to jump
    30 = 0041			DL_JVB = %01000001; // Jump to begining
     3 3400			dl_start
     4 3400 70 70		    :2 dta DL_BLANK8
     6 3402 42 30 34		    dta DL_MODE_40x24T2 + DL_LMS, A(MAIN.SCREEN_ADDR)
     7 3405 00			    dta DL_BLANK1
     9 3406 02 02 02 02 02 02 +     :24 dta DL_MODE_40x24T2
    11 341E 00			    dta DL_BLANK1
    12 341F 02			    dta DL_MODE_40x24T2
    14 3420 41 00 34		    dta DL_JVB, A(dl_start)
    23 					.print '$R RCASM   ',main.DLIST_ADDR,'..',main.DLIST_ADDR+len-1," 'resources/dlist.asm'"
    23 				$R RCASM   $3400..$3422 'resources/dlist.asm'
    25 02E2-02E3> 75 80			ini mcpy
Source: MIDICar Player.a65
   112 				.endl
   113
   114 				; ------------------------------------------------------------
   115
   116 80B9				org CODEORIGIN
   117
   118 8000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 8000-9E34> 04 54 52 55 + .by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $02  $45 $3A $00 $12 $AD $A9 $A4 $A9
     2 8018 A3 E1 F2 80 B0 EC + .by  $A3 $E1 $F2 $80 $B0 $EC $E1 $F9  $E5 $F2 $80 $B2 $A3 $91 $00 $08  $92 $90 $92 $92 $80 $A7 $B3 $A4
     3 8030 00 0D AC EF E1 E4 + .by  $00 $0D $AC $EF $E1 $E4 $E9 $EE  $E7 $80 $8E $8E $8F $8E $8E $00  $12 $B5 $EE $F3 $F5 $F0 $F0 $EF
     4 8048 F2 F4 E5 E4 80 E6 + .by  $F2 $F4 $E5 $E4 $80 $E6 $EF $F2  $ED $E1 $F4 $00 $12 $AE $EF $F4  $80 $E5 $EE $EF $F5 $E7 $E8 $F4
     5 8060 80 ED E5 ED EF F2 + .by  $80 $ED $E5 $ED $EF $F2 $F9 $00  $0B $A9 $8F $AF $80 $A5 $F2 $F2  $EF $F2 $80 $83 $00 $07 $B0 $EC
     6 8078 E1 F9 E9 EE E7 00 + .by  $E1 $F9 $E9 $EE $E7 $00 $07 $B0  $E1 $F5 $F3 $E5 $80 $80 $00 $F0  $7E $7F $09 $01 $F7 $10 $11 $12
     7 8090 13 14 15 16 17 18 + .by  $13 $14 $15 $16 $17 $18 $19 $61  $62 $63 $64 $65 $66
Source: MIDICar Player.a65
   119
   120 				; ------------------------------------------------------------
   121
   122 809D			RTLIB
   123 809D				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   124
   125 				.print 'ZPAGE: ',zpage,'..',zpend-1
   125 				ZPAGE: $0080..$00D3
   126
   127 				.print 'RTLIB: ',RTLIB,'..',*-1
   127 				RTLIB: $809D..$8BB0
   128
   129 				; ------------------------------------------------------------
   130
   131 8BB1			START
   132 8BB1 BA				tsx
   133 8BB2 8E 17 9E			stx MAIN.@halt+1
   134
   135 					.ifdef fmulinit
   136 					fmulinit
   137 					.fi
   138
   139 = 01F9			VLEN	= VARDATASIZE-VARINITSIZE
   140 = 9E3E			VADR	= DATAORIGIN+VARINITSIZE
   141
   142 					ift VADR > $BFFF
   143 					ert 'Invalid memory address range ',VADR
   144 					eli (VLEN>0) && (VLEN<=256)
   145 					ldx #256-VLEN
   146 					lda #$00
   147 					sta:rne VADR+VLEN-256,x+
   148 					eli VLEN>256
   149 					@fill #VADR #VLEN #$00
   149 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   149 8BB5 A9 3E 85 88 A9 9E +  MWA #VADR @FILL.PTR1
   149 8BBD A9 F9 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   149 8BC5 A9 00 85 84		 MVA #$00 @FILL.PTR2
   149 8BC9 20 7C 84		 JSR @FILL
   150 					eif
   151
   152 				.ifdef :psptr
   153 					mwa #PROGRAMSTACK :psptr
   154 				.fi
   155
   156 					.ifdef MAIN.@DEFINES.ROMOFF
   157 8BCC				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 8BCC			.local	rominit
     5
     6 8BCC 78			        sei
     7 8BCD A9 00		        lda #%00000000
     8 8BCF 8D 0E D4		        sta NMIEN       ;$D40E
     9 8BD2 A9 FE		        lda #%11111110
    10 8BD4 8D 01 D3		        sta PORTB       ;$D301
    11
    12 8BD7 A2 03			ldx #3
    13 8BD9 A0 00			ldy #0
    14 8BDB EE 01 D3		mv	inc portb
    15 8BDE B9 00 E0		afnt0	lda $e000,y
    16 8BE1 CE 01 D3			dec portb
    17 8BE4 99 00 E0		afnt1	sta $e000,y
    18 8BE7 C8				iny
    19 8BE8 D0 F1			bne mv
    20 8BEA EE E0 8B			inc afnt0+2
    21 8BED EE E6 8B			inc afnt1+2
    22 8BF0 CA				dex
    23 8BF1 10 E8			bpl mv
    24
    25 8BF3 A2 10		        ldx #<nmiint
    26 8BF5 A0 8C		        ldy #>nmiint
    27 8BF7 8E FA FF		        stx NMIVEC      ;$FFFA
    28 8BFA 8C FB FF		        sty NMIVEC+1
    29
    30 8BFD A2 1A		        ldx #<irqint
    31 8BFF A0 8C		        ldy #>irqint
    32 8C01 8E FE FF		        stx IRQVEC      ;$FFFE
    33 8C04 8C FF FF		        sty IRQVEC+1
    34
    35 8C07 A9 40		        lda #%01000000
    36 8C09 8D 0E D4		        sta NMIEN       ;$D40E
    37 8C0C 58			        cli
    38
    39 8C0D 4C 3B 8C			jmp skp
    40
    41
    42
    43 8C10 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 8C13 10 03		        spl
    45 8C15 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 8C18 38			        sec
    48 8C19 24			        .byte $24        ;BIT $18
    49
    50 8C1A 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 8C1B EE 01 D3		        inc PORTB       ;$D301
    55
    56 8C1E 48			        pha
    57 8C1F 8A			        txa
    58 8C20 48			        pha
    59 8C21 BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 8C22 A9 8C		        lda #>iret      ;adres procedury iret
    64 8C24 48			        pha
    65 8C25 A9 34		        lda #<iret
    66 8C27 48			        pha
    67 8C28 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 8C2B 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 8C2C 90 03		        scc
    73 8C2E 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 8C31 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 8C34 68			iret	pla
    77 8C35 AA				tax
    78 8C36 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 8C37 CE 01 D3		        dec PORTB       ;$D301
    83 8C3A 40			        rti
    84
    85 8C3B			skp
    86
    87 				.endl
    88
   158 					.fi
   159
   160 8C3B A2 0F			ldx #$0F					; DOS II+/D ParamStr
   161 8C3D BD 40 03 9D 1F 9E + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   162
   163 8C46 E8				inx						; X = 0
   164 8C47 86 80			stx bp						; BP = 0
   165
   166 8C49 8E 0F D2			stx skctl					; reset POKEY
   167 8C4C A9 03			lda #3
   168 8C4E 8D 0F D2			sta skctl
   169
   170 8C51 CA				dex						; X = 255
   171
   172 8C52				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
    27 8C52 20 9A 98			jsr MAIN.MIDFILES.@UnitInit
Source: MIDICar Player.a65
   173
   174 8C55			.local	MAIN						; PROCEDURE
   175
   176 8C55 4C 50 9D			jmp l_008E
   177
   178 				; ------------------------------------------------------------
   179
   180 8C58			.local	SYSTEM						; UNIT
   181
   182 8C58			.local	FILEPOS						; FUNCTION | ASSEMBLER
   183
   184 				; -------------------  ASM Block 00000011  -------------------
   185
   186 8C58 8A 48			txa:pha
   187
   188 8C5A AD 43 9E 85 82 AD + 	mwa f :bp2
   189
   190 8C64 A0 04			ldy #s@file.chanel
   191 8C66 B1 82			lda (:bp2),y
   192 8C68 AA				tax
   193 8C69 A9 26			lda #38
   194 8C6B 9D 42 03			sta iccmd,x
   195
   196 8C6E				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8C6E EE 01 D3				inc portb
     6 8C71 20 56 E4				jsr CIOV
     8 8C74 CE 01 D3				dec portb
Source: MIDICar Player.a65
   197
   198 8C77 8C 3F 9E			sty IOResult
   199
   200 8C7A BD 4C 03 85 84		mva icax3,x :eax
   201 8C7F BD 4D 03 85 85		mva icax4,x :eax+1
   202 8C84 BD 4E 03 85 86		mva icax5,x :eax+2
   203
   204 8C89 A9 00 85 87			mva #$00 :eax+3
   205 8C8D 85 8E			sta :ecx+2
   206 8C8F 85 8F			sta :ecx+3
   207
   208 8C91 A0 02			ldy #s@file.record
   209 8C93 B1 82			lda (:bp2),y
   210 8C95 85 8C			sta :ecx
   211 8C97 C8				iny
   212 8C98 B1 82			lda (:bp2),y
   213 8C9A 85 8D			sta :ecx+1
   214
   215 8C9C 20 EB 85			jsr idivEAX_ECX.main
   216
   217 8C9F A5 84 8D 45 9E		mva :eax Result
   218 8CA4 A5 85 8D 46 9E		mva :eax+1 Result+1
   219 8CA9 A5 86 8D 47 9E		mva :eax+2 Result+2
   220 8CAE A5 87 8D 48 9E		mva :eax+3 Result+3
   221
   222 8CB3 68 AA			pla:tax
   223
   224 8CB5			@exit
   225
   226 				; ------------------------------------------------------------
   227
   228 = 9E43			F	= DATAORIGIN+$000B
   229 = 9E45			RESULT	= DATAORIGIN+$000D
   230
   231 = 9E43			@VarData	= F
   232 = 0002			@VarDataSize	= 2
   233
   234 8CB5 60				rts						; ret
   235 				.endl
   236
   237 8CB6			.local	SEEK						; PROCEDURE | ASSEMBLER
   238
   239 				; -------------------  ASM Block 00000012  -------------------
   240
   241 8CB6 8A 48			txa:pha
   242
   243 8CB8 AD 49 9E 85 82 AD + 	mwa f :bp2
   244
   245 8CC2 A0 04			ldy #s@file.chanel
   246 8CC4 B1 82			lda (:bp2),y
   247 8CC6 AA				tax
   248 8CC7 A9 25			lda #37
   249 8CC9 9D 42 03			sta iccmd,x
   250
   251 8CCC A0 02			ldy #s@file.record
   252 8CCE B1 82			lda (:bp2),y
   253 8CD0 85 84			sta :eax
   254 8CD2 C8				iny
   255 8CD3 B1 82			lda (:bp2),y
   256 8CD5 85 85			sta :eax+1
   257 8CD7 A9 00			lda #$00
   258 8CD9 85 86			sta :eax+2
   259 8CDB 85 87			sta :eax+3
   260
   261 8CDD AD 4B 9E 85 8C		mva a :ecx
   262 8CE2 AD 4C 9E 85 8D		mva a+1 :ecx+1
   263 8CE7 AD 4D 9E 85 8E		mva a+2 :ecx+2
   264 8CEC AD 4E 9E 85 8F		mva a+3 :ecx+3
   265
   266 8CF1 20 9F 85			jsr imulECX
   267
   268 8CF4 A5 84 9D 4C 03		mva :eax icax3,x
   269 8CF9 A5 85 9D 4D 03		mva :eax+1 icax4,x
   270 8CFE A5 86 9D 4E 03		mva :eax+2 icax5,x
   271
   272 8D03				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8D03 EE 01 D3				inc portb
     6 8D06 20 56 E4				jsr CIOV
     8 8D09 CE 01 D3				dec portb
Source: MIDICar Player.a65
   273
   274 8D0C 8C 3F 9E			sty IOResult
   275
   276 8D0F 68 AA			pla:tax
   277
   278 				; ------------------------------------------------------------
   279
   280 = 9E49			F	= DATAORIGIN+$0011
   281 = 9E4B			A	= DATAORIGIN+$0013
   282
   283 = 9E49			@VarData	= F
   284 = 0006			@VarDataSize	= 6
   285
   286 8D11			@exit
   287 					.ifdef @new
   288 					lda <@VarData
   289 					sta :ztmp
   290 					lda >@VarData
   291 					ldy #@VarDataSize-1
   292 					jmp @FreeMem
   293 					els
   294 8D11 60				rts						; ret
   295 					eif
   296 				.endl
   297
   298 8D12			.local	EOF						; FUNCTION
   299
   300 				; optimize OK (SYSTEM), line = 1163
   301
   302 8D12 AD 4F 9E			lda F
   303 8D15 8D 43 9E			sta FILEPOS.F
   304 8D18 AD 50 9E			lda F+1
   305 8D1B 8D 44 9E			sta FILEPOS.F+1
   306 8D1E 20 58 8C			jsr FILEPOS
   307 8D21 AD 45 9E			lda FILEPOS.RESULT
   308 8D24 8D 52 9E			sta I
   309 8D27 AD 46 9E			lda FILEPOS.RESULT+1
   310 8D2A 8D 53 9E			sta I+1
   311 8D2D AD 47 9E			lda FILEPOS.RESULT+2
   312 8D30 8D 54 9E			sta I+2
   313 8D33 AD 48 9E			lda FILEPOS.RESULT+3
   314 8D36 8D 55 9E			sta I+3
   315 				; BlockRead
   316
   317 				; optimize OK (SYSTEM), line = 1165
   318
   319 8D39 AC 4F 9E 84 82 AC + 	mwy F :bp2
   320 8D43 A0 06			ldy #s@file.buffer
   321 8D45 AD A6 8D			lda BF
   322 8D48 91 82			sta (:bp2),y
   323 8D4A C8				iny
   324 8D4B AD A7 8D			lda BF+1
   325 8D4E 91 82			sta (:bp2),y
   326 8D50 A0 08			ldy #s@file.nrecord
   327 8D52 A9 01			lda #$01
   328 8D54 91 82			sta (:bp2),y
   329 8D56 C8				iny
   330 8D57 A9 00			lda #$00
   331 8D59 91 82			sta (:bp2),y
   332
   333 8D5B 8A 48			txa:pha
   334 8D5D 38				sec
   335 					@readfile F, #7
   335 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
   335 8D5E AC 50 9E		 LDY F+1
   335 8D61 AD 4F 9E		 LDA F
   335 8D64 A2 07		 LDX# 7
   335 8D66 20 6C 81		 JSR @READFILE
   336 8D69 68 AA			pla:tax
   337
   338 				; optimize OK (SYSTEM), line = 1167
   339
   340 8D6B AD 4F 9E			lda F
   341 8D6E 8D 49 9E			sta SEEK.F
   342 8D71 AD 50 9E			lda F+1
   343 8D74 8D 4A 9E			sta SEEK.F+1
   344 8D77 AD 52 9E			lda I
   345 8D7A 8D 4B 9E			sta SEEK.A
   346 8D7D AD 53 9E			lda I+1
   347 8D80 8D 4C 9E			sta SEEK.A+1
   348 8D83 AD 54 9E			lda I+2
   349 8D86 8D 4D 9E			sta SEEK.A+2
   350 8D89 AD 55 9E			lda I+3
   351 8D8C 8D 4E 9E			sta SEEK.A+3
   352 8D8F 20 B6 8C			jsr SEEK
   353
   354 				; -------------------  ASM Block 00000013  -------------------
   355
   356 8D92 AD 4F 9E 85 82 AD + 	mwa f :bp2
   357
   358 8D9C A0 05			ldy #s@file.status
   359 8D9E B1 82			lda (:bp2),y
   360 8DA0 29 01			and #e@file.eof
   361 8DA2 8D 51 9E			sta Result
   362
   363 8DA5			@exit
   364
   365 				; ------------------------------------------------------------
   366
   367 = 9E4F			F	= DATAORIGIN+$0017
   368 = 9E51			RESULT	= DATAORIGIN+$0019
   369 = 9E52			I	= DATAORIGIN+$001A
   370 = 9E56			adr.BF	= [DATAORIGIN+$001E] .array [256]
   371 8DA5			.var BF	= adr.BF .word
   372
   373 = 9E4F			@VarData	= F
   374 = 0106			@VarDataSize	= 262
   375
   376 8DA5 60				rts						; ret
   377 = 8DA6 56 9E		BF
   377 				.endl
   378
   379 8DA8			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   380
   381 				; ------------------------------------------------------------
   382
   383 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   384 				; as Pointer
   385 8DA8 B5 94			lda :STACKORIGIN,x
   386 8DAA 85 88			sta A
   387 8DAC B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   388 8DAE 85 89			sta A+1
   389 8DB0 CA				dex
   390 8DB1 30 05			jmi @main
   391
   392 				; ------------------------------------------------------------
   393
   394 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   395 				; as Pointer
   396 8DB3 B5 94			lda :STACKORIGIN,x
   397 8DB5 85 8C			sta VALUE
   398 8DB7 CA				dex
   399 8DB8			@main
   400
   401 				; -------------------  ASM Block 00000018  -------------------
   402
   403 8DB8 A0 00			ldy #0
   404 8DBA A5 8C 91 88			mva value (:edx),y
   405
   406 				; ------------------------------------------------------------
   407
   408 = 0088			A	= :EDX
   409 = 008C			VALUE	= :ECX
   410 8DBE			@exit
   411 					.ifdef @new
   412 					lda <@VarData
   413 					sta :ztmp
   414 					lda >@VarData
   415 					ldy #@VarDataSize-1
   416 					jmp @FreeMem
   417 					els
   418 8DBE 60				rts						; ret
   419 					eif
   420 				.endl
   421
   422 8DBF			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   423
   424 				; ------------------------------------------------------------
   425
   426 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   427 				; as Pointer
   428 8DBF B5 94			lda :STACKORIGIN,x
   429 8DC1 85 88			sta A
   430 8DC3 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   431 8DC5 85 89			sta A+1
   432 8DC7 CA				dex
   433 8DC8 30 09			jmi @main
   434
   435 				; ------------------------------------------------------------
   436
   437 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   438 				; as Pointer
   439 8DCA B5 94			lda :STACKORIGIN,x
   440 8DCC 85 8C			sta VALUE
   441 8DCE B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   442 8DD0 85 8D			sta VALUE+1
   443 8DD2 CA				dex
   444 8DD3			@main
   445
   446 				; -------------------  ASM Block 00000019  -------------------
   447
   448 8DD3 A0 00			ldy #0
   449 8DD5 A5 8C 91 88			mva value (:edx),y
   450 8DD9 C8				iny
   451 8DDA A5 8D 91 88			mva value+1 (:edx),y
   452
   453 				; ------------------------------------------------------------
   454
   455 = 0088			A	= :EDX
   456 = 008C			VALUE	= :ECX
   457 8DDE			@exit
   458 					.ifdef @new
   459 					lda <@VarData
   460 					sta :ztmp
   461 					lda >@VarData
   462 					ldy #@VarDataSize-1
   463 					jmp @FreeMem
   464 					els
   465 8DDE 60				rts						; ret
   466 					eif
   467 				.endl
   468
   469 8DDF			.local	FILLCHAR_00F1					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   470
   471 					.MACRO m@INLINE
   472 				
   473 				; -------------------  ASM Block 00000021  -------------------
   474 				
   475 					jsr @fill
   476 				
   477 					.ENDM
   478
   479 				; ------------------------------------------------------------
   480
   481 = 0088			A	= :EDX
   482 = 008C			COUNT	= :ECX
   483 = 0084			VALUE	= :EAX
   484 8DDF			@exit
   485 				.endl
   486
   487 8DDF			.local	MOVE_00F2					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   488
   489 					.MACRO m@INLINE
   490 				
   491 				; -------------------  ASM Block 00000028  -------------------
   492 				
   493 					jsr @move
   494 				
   495 					.ENDM
   496
   497 				; ------------------------------------------------------------
   498
   499 = 0088			SOURCE	= :EDX
   500 = 008C			DEST	= :ECX
   501 = 0084			COUNT	= :EAX
   502 8DDF			@exit
   503 				.endl
   504
   505 8DDF			.local	MOVE_00F3					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   506
   507 					.MACRO m@INLINE
   508 				
   509 				; -------------------  ASM Block 00000030  -------------------
   510 				
   511 					jsr @move
   512 				
   513 					.ENDM
   514
   515 				; ------------------------------------------------------------
   516
   517 = 0088			SOURCE	= :EDX
   518 = 008C			DEST	= :ECX
   519 = 0084			COUNT	= :EAX
   520 8DDF			@exit
   521 				.endl
   522
   523 8DDF			.local	PARAMCOUNT					; FUNCTION | ASSEMBLER
   524
   525 				; -------------------  ASM Block 00000044  -------------------
   526
   527 					@cmdline #255
   527 				 LDA# 255\ JSR @CMDLINE
   527 8DDF A9 FF		 LDA# 255
   527 8DE1 20 34 82		 JSR @CMDLINE
   528 8DE4 8D 56 9F			sta Result
   529
   530 8DE7			@exit
   531
   532 				; ------------------------------------------------------------
   533
   534 = 9F56			RESULT	= DATAORIGIN+$011E
   535 8DE7 60				rts						; ret
   536 				.endl
   537
   538 8DE8			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   539 8DE8 8D 57 9F			sta I
   540
   541 				; -------------------  ASM Block 00000045  -------------------
   542
   543 					@cmdline i
   543 				 LDA I\ JSR @CMDLINE
   543 8DEB AD 57 9F		 LDA I
   543 8DEE 20 34 82		 JSR @CMDLINE
   544
   545 				;	@move #@buf Result #33
   546 8DF1 A0 DF			ldy #256-33
   547 8DF3 B9 21 03 99 79 9E + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   548
   549 8DFC			@exit
   550
   551 				; ------------------------------------------------------------
   552
   553 = 9F57			I	= DATAORIGIN+$011F
   554 = 9F58			adr.RESULT	= [DATAORIGIN+$0120] .array [33]
   555 8DFC			.var RESULT	= adr.RESULT .word
   556
   557 = 9F57			@VarData	= I
   558 = 0022			@VarDataSize	= 34
   559
   560 8DFC 60				rts						; ret
   561 = 8DFD 58 9F		RESULT
   561 				.endl
   562
   563 				; ------------------------------------------------------------
   564
   565 = 0101			__PORTB_BANKS	= $0101
   566 = 0648			M_PI_2	= $0648
   567 = 0192			D_PI_2	= $0192
   568 = 0004			D_PI_180	= $04
   569 = 0000			MGTIA	= $00
   570 = 0080			MVBXE	= $80
   571 = 0000			VBXE_XDLADR	= $00
   572 = 00E0			VBXE_BCBTMP	= $E0
   573 = 0100			VBXE_BCBADR	= $0100
   574 = 1000			VBXE_MAPADR	= $1000
   575 = 1000			VBXE_CHBASE	= $1000
   576 = 5000			VBXE_OVRADR	= $5000
   577 = B000			VBXE_WINDOW	= $B000
   578 = 0000			IDLI	= $00
   579 = 0001			IVBL	= $01
   580 = 0002			ITIM1	= $02
   581 = 0003			ITIM2	= $03
   582 = 0004			ITIM4	= $04
   583 = 00FE			CH_DELCHR	= $FE
   584 = 009B			CH_ENTER	= $9B
   585 = 001B			CH_ESC	= $1B
   586 = 001C			CH_CURS_UP	= $1C
   587 = 001D			CH_CURS_DOWN	= $1D
   588 = 001E			CH_CURS_LEFT	= $1E
   589 = 001F			CH_CURS_RIGHT	= $1F
   590 = 007F			CH_TAB	= $7F
   591 = 009B			CH_EOL	= $9B
   592 = 007D			CH_CLR	= $7D
   593 = 00FD			CH_BELL	= $FD
   594 = 007E			CH_DEL	= $7E
   595 = 009C			CH_DELLINE	= $9C
   596 = 009D			CH_INSLINE	= $9D
   597 = 0000			PAL_PMCOLOR0	= $00
   598 = 0001			PAL_PMCOLOR1	= $01
   599 = 0002			PAL_PMCOLOR2	= $02
   600 = 0003			PAL_PMCOLOR3	= $03
   601 = 0004			PAL_COLOR0	= $04
   602 = 0005			PAL_COLOR1	= $05
   603 = 0006			PAL_COLOR2	= $06
   604 = 0007			PAL_COLOR3	= $07
   605 = 0008			PAL_COLBAK	= $08
   606 = 0000			COLOR_BLACK	= $00
   607 = 000E			COLOR_WHITE	= $0E
   608 = 0032			COLOR_RED	= $32
   609 = 0096			COLOR_CYAN	= $96
   610 = 0068			COLOR_VIOLET	= $68
   611 = 00C4			COLOR_GREEN	= $C4
   612 = 0074			COLOR_BLUE	= $74
   613 = 00EE			COLOR_YELLOW	= $EE
   614 = 0028			COLOR_ORANGE	= $28
   615 = 00E4			COLOR_BROWN	= $E4
   616 = 003C			COLOR_LIGHTRED	= $3C
   617 = 0004			COLOR_GRAY1	= $04
   618 = 0006			COLOR_GRAY2	= $06
   619 = 000A			COLOR_GRAY3	= $0A
   620 = 00CC			COLOR_LIGHTGREEN	= $CC
   621 = 007C			COLOR_LIGHTBLUE	= $7C
   622 = 0004			FMOPENREAD	= $04
   623 = 0008			FMOPENWRITE	= $08
   624 = 0009			FMOPENAPPEND	= $09
   625 = 000C			FMOPENREADWRITE	= $0C
   626 = 9E38			SCREENWIDTH	= DATAORIGIN+$0000
   627 = 9E3A			SCREENHEIGHT	= DATAORIGIN+$0002
   628 = 9E3C			DATESEPARATOR	= DATAORIGIN+$0004
   629 = D20A			RND	= $D20A
   630 = 02C0			adr.PALETTE	= $02C0
   631 8DFF			.var PALETTE	= adr.PALETTE .word
   632 = D012			adr.HPALETTE	= $D012
   633 8DFF			.var HPALETTE	= adr.HPALETTE .word
   634 = 9E3D			FILEMODE	= DATAORIGIN+$0005
   635 = 9E3E			GRAPHMODE	= DATAORIGIN+$0006
   636 = 9E3F			IORESULT	= DATAORIGIN+$0007
   637 = 9E40			EOLN	= DATAORIGIN+$0008
   638 = 9E41			RNDSEED	= DATAORIGIN+$0009
   639
   640 = 8DFF C0 02		PALETTE
   640 = 8E01 12 D0		HPALETTE
   640 				.endl							; UNIT SYSTEM
   641
   642 				; ------------------------------------------------------------
   643
   644 8E03			.local	MC6850						; UNIT
   645
   646 8E03			.local	MC6850_RESET					; PROCEDURE
   647
   648 				; optimize OK (MC6850), line = 70
   649
   650 8E03 A9 03			lda #$03
   651 8E05 8D 00 D5			sta MC6850_CNTRREG
   652 8E08			@exit
   653 					.ifdef @new
   654 					lda <@VarData
   655 					sta :ztmp
   656 					lda >@VarData
   657 					ldy #@VarDataSize-1
   658 					jmp @FreeMem
   659 					els
   660 8E08 60				rts						; ret
   661 					eif
   662 				.endl
   663
   664 8E09			.local	MC6850_INIT					; PROCEDURE
   665 8E09 8D 79 9F			sta SETUP
   666
   667 				; optimize OK (MC6850), line = 75
   668
   669 8E0C 8D 00 D5			sta MC6850_CNTRREG
   670
   671 				; ------------------------------------------------------------
   672
   673 = 9F79			SETUP	= DATAORIGIN+$0141
   674
   675 = 9F79			@VarData	= SETUP
   676 = 0001			@VarDataSize	= 1
   677
   678 8E0F			@exit
   679 					.ifdef @new
   680 					lda <@VarData
   681 					sta :ztmp
   682 					lda >@VarData
   683 					ldy #@VarDataSize-1
   684 					jmp @FreeMem
   685 					els
   686 8E0F 60				rts						; ret
   687 					eif
   688 				.endl
   689
   690 				; ------------------------------------------------------------
   691
   692 = D500			MC6850_BASE	= $D500
   693 = D500			ADDR_MC6850_CNTRREG	= $D500
   694 = D501			ADDR_MC6850_BUFFER	= $D501
   695 = D500			ADDR_MC6850_STATREG	= $D500
   696 = 0001			CR0	= $01
   697 = 0002			CR1	= $02
   698 = 0004			CR2	= $04
   699 = 0008			CR3	= $08
   700 = 0010			CR4	= $10
   701 = 0020			CR5	= $20
   702 = 0040			CR6	= $40
   703 = 0080			CR7	= $80
   704 = 0000			CD_1	= $00
   705 = 0001			CD_16	= $01
   706 = 0002			CD_64	= $02
   707 = 0003			MASTERRESET	= $03
   708 = 0000			WS_7BITS	= $00
   709 = 0010			WS_8BITS	= $10
   710 = 0000			WS_2BITSTOP	= $00
   711 = 0008			WS_1BITSTOP	= $08
   712 = 0000			WS_EVENPARITY	= $00
   713 = 0004			WS_ODDPARITY	= $04
   714 = 0000			TC_RTSLOW_NOTIRQ	= $00
   715 = 0020			TC_RTSLOW_TIRQ	= $20
   716 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   717 = 0060			TC_BREAKLEVEL	= $60
   718 = 0000			NOIRQ_RECEIVE	= $00
   719 = 0080			IRQ_RECEIVE	= $80
   720 = 0001			RDRF	= $01
   721 = 0002			TDRE	= $02
   722 = 0004			DCD	= $04
   723 = 0008			CTS	= $08
   724 = 0010			FE	= $10
   725 = 0020			OVRN	= $20
   726 = 0040			PE	= $40
   727 = 0080			IRQ	= $80
   728 = D500			MC6850_CNTRREG	= $D500
   729 = D501			MC6850_BUFFER	= $D501
   730 = D500			MC6850_STATREG	= $D500
   731 = 00FF			MC_BYTE	= $FF
   732
   733 				.endl							; UNIT MC6850
   734
   735 				; ------------------------------------------------------------
   736
   737 8E10			.local	DOS						; UNIT
   738
   739 				; ------------------------------------------------------------
   740
   741 = D014			PALNTSC	= $D014
   742
   743 				.endl							; UNIT DOS
   744
   745 				; ------------------------------------------------------------
   746
   747 8E10			.local	STRUTILS					; UNIT
   748
   749 				; ------------------------------------------------------------
   750
   751 				.endl							; UNIT STRUTILS
   752
   753 				; ------------------------------------------------------------
   754
   755 8E10			.local	SYSUTILS					; UNIT
   756
   757 				; ------------------------------------------------------------
   758
   759 = 0001			FAREADONLY	= $01
   760 = 0002			FAHIDDEN	= $02
   761 = 0004			FASYSFILE	= $04
   762 = 0008			FAVOLUMEID	= $08
   763 = 0010			FADIRECTORY	= $10
   764 = 0020			FAARCHIVE	= $20
   765 = 003F			FAANYFILE	= $3F
   766
   767 				.endl							; UNIT SYSUTILS
   768
   769 				; ------------------------------------------------------------
   770
   771 8E10			.local	MIDI_FIFO					; UNIT
   772
   773 8E10			.local	FIFO_RESET					; PROCEDURE
   774
   775 				; optimize OK (MIDI_FIFO), line = 28
   776
   777 8E10 A9 00			lda #$00
   778 8E12 85 FD			sta FIFO_HEAD
   779
   780 				; optimize OK (MIDI_FIFO), line = 29
   781
   782 8E14 85 FE			sta FIFO_TAIL
   783
   784 				; optimize OK (MIDI_FIFO), line = 30
   785
   786 8E16 85 88			sta SYSTEM.FILLCHAR_00F1.A
   787 8E18 A9 06			lda #$06
   788 8E1A 85 89			sta SYSTEM.FILLCHAR_00F1.A+1
   789 8E1C A9 00			lda #$00
   790 8E1E 85 8C			sta SYSTEM.FILLCHAR_00F1.COUNT
   791 8E20 A9 01			lda #$01
   792 8E22 85 8D			sta SYSTEM.FILLCHAR_00F1.COUNT+1
   793 8E24 A9 00			lda #$00
   794 8E26 85 84			sta SYSTEM.FILLCHAR_00F1.VALUE
   795 8E28				.local +MAIN.SYSTEM.FILLCHAR_00F1
   796 8E28				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_00F1.M@INLINE [Source: MIDICar Player.a65]
     4 8E28 20 7C 84			jsr @fill
Source: MIDICar Player.a65
   797 					.endl
   798 8E2B			@exit
   799 					.ifdef @new
   800 					lda <@VarData
   801 					sta :ztmp
   802 					lda >@VarData
   803 					ldy #@VarDataSize-1
   804 					jmp @FreeMem
   805 					els
   806 8E2B 60				rts						; ret
   807 					eif
   808 				.endl
   809
   810 8E2C			.local	FIFO_PUSHDIRECT2MC6850				; PROCEDURE | INLINE
   811
   812 					.MACRO m@INLINE
   813 				
   814 				; optimize OK (MIDI_FIFO), line = 35
   815 				
   816 					lda MC6850.MC6850_CNTRREG
   817 					and #$02
   818 					jeq l_018F
   819 				
   820 				; optimize OK (MIDI_FIFO), line = 36
   821 				
   822 					ldy FIFO_TAIL
   823 					cpy FIFO_HEAD
   824 					jeq l_01A4
   825 				
   826 				; optimize OK (MIDI_FIFO), line = 38
   827 				
   828 					lda adr.FIFO_BUF,y
   829 					sta MC6850.MC6850_BUFFER
   830 				
   831 				; optimize FAIL (0, MIDI_FIFO), line = 39
   832 				
   833 					inc FIFO_TAIL
   834 				l_01A4
   835 				l_018F
   836 					.ENDM
   837 8E2C			@exit
   838 				.endl
   839
   840 8E2C			.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER | INLINE
   841
   842 					.MACRO m@INLINE
   843 				
   844 				; -------------------  ASM Block 00000070  -------------------
   845 				
   846 				  lda FIFO_Head
   847 				  clc
   848 				  adc #1
   849 				  cmp FIFO_Tail
   850 				  bne storeInFIFO
   851 				  jsr FIFO_Flush
   852 				
   853 				storeInFIFO:
   854 				  ldy FIFO_Head
   855 				  lda FIFO_Byte
   856 				  sta FIFO_ADDR,y
   857 				  inc FIFO_Head
   858 				exitWrite:
   859 				
   860 					.ENDM
   861 8E2C			@exit
   862 				.endl
   863
   864 8E2C			.local	FIFO_SEND					; PROCEDURE
   865
   866 				; optimize OK (MIDI_FIFO), line = 75
   867
   868 8E2C AD 7A 9F			lda DATA
   869 8E2F 8D 7D 9F			sta P
   870 8E32 AD 7B 9F			lda DATA+1
   871 8E35 8D 7E 9F			sta P+1
   872
   873 				; --- WhileProlog
   874 8E38 4C 6B 8E			jmp l_01C3
   875 8E3B			l_01C4
   876
   877 				; optimize OK (MIDI_FIFO), line = 78
   878
   879 8E3B AC 7D 9F 84 82 AC + 	mwy P :bp2
   880 8E45 A0 00			ldy #$00
   881 8E47 B1 82			lda (:bp2),y
   882 8E49 85 FF			sta FIFO_BYTE
   883 8E4B				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
   884 8E4B				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 8E4B A5 FD		  lda FIFO_Head
     5 8E4D 18			  clc
     6 8E4E 69 01		  adc #1
     7 8E50 C5 FE		  cmp FIFO_Tail
     8 8E52 D0 03		  bne storeInFIFO
     9 8E54 20 71 8E		  jsr FIFO_Flush
    11 8E57			storeInFIFO:
    12 8E57 A4 FD		  ldy FIFO_Head
    13 8E59 A5 FF		  lda FIFO_Byte
    14 8E5B 99 00 06		  sta FIFO_ADDR,y
    15 8E5E E6 FD		  inc FIFO_Head
    16 8E60			exitWrite:
Source: MIDICar Player.a65
   885 					.endl
   886
   887 				; optimize FAIL (0, MIDI_FIFO), line = 79
   888
   889 8E60 EE 7D 9F			inc P
   890 8E63 D0 03			sne
   891 8E65 EE 7E 9F			inc P+1
   892 8E68 CE 7C 9F			dec LEN
   893 8E6B			l_01C3
   894
   895 				; optimize OK (MIDI_FIFO), line = 76
   896
   897 8E6B AD 7C 9F			lda LEN
   898 8E6E D0 CB			jne l_01C4
   899
   900 				; ------------------------------------------------------------
   901
   902 = 9F7A			DATA	= DATAORIGIN+$0142
   903 = 9F7C			LEN	= DATAORIGIN+$0144
   904 = 9F7D			P	= DATAORIGIN+$0145
   905
   906 = 9F7A			@VarData	= DATA
   907 = 0005			@VarDataSize	= 5
   908
   909 8E70			@exit
   910 					.ifdef @new
   911 					lda <@VarData
   912 					sta :ztmp
   913 					lda >@VarData
   914 					ldy #@VarDataSize-1
   915 					jmp @FreeMem
   916 					els
   917 8E70 60				rts						; ret
   918 					eif
   919 				.endl
   920
   921 8E71			.local	FIFO_FLUSH					; PROCEDURE
   922
   923 				; --- WhileProlog
   924 8E71 4C 85 8E			jmp l_01E5
   925 8E74			l_01E6
   926
   927 				; optimize OK (MIDI_FIFO), line = 87
   928
   929 8E74 AD 00 D5			lda MC6850.MC6850_CNTRREG
   930 8E77 29 02			and #$02
   931 8E79 F0 0A			jeq l_01FC
   932
   933 				; optimize OK (MIDI_FIFO), line = 89
   934
   935 8E7B A4 FE			ldy FIFO_TAIL
   936 8E7D B9 00 06			lda adr.FIFO_BUF,y
   937 8E80 8D 01 D5			sta MC6850.MC6850_BUFFER
   938
   939 				; optimize FAIL (0, MIDI_FIFO), line = 90
   940
   941 8E83 E6 FE			inc FIFO_TAIL
   942 8E85			l_01FC
   943 8E85			l_01E5
   944
   945 				; optimize OK (MIDI_FIFO), line = 85
   946
   947 8E85 A5 FE			lda FIFO_TAIL
   948 8E87 C5 FD			cmp FIFO_HEAD
   949 8E89 D0 E9			jne l_01E6
   950 8E8B			@exit
   951 					.ifdef @new
   952 					lda <@VarData
   953 					sta :ztmp
   954 					lda >@VarData
   955 					ldy #@VarDataSize-1
   956 					jmp @FreeMem
   957 					els
   958 8E8B 60				rts						; ret
   959 					eif
   960 				.endl
   961
   962 				; ------------------------------------------------------------
   963
   964 = 00FD			FIFO_HEAD	= $FD
   965 = 00FE			FIFO_TAIL	= $FE
   966 = 00FF			FIFO_BYTE	= $FF
   967 = 0600			FIFO_ADDR	= $0600
   968 = 0600			adr.FIFO_BUF	= $0600
   969 8E8C			.var FIFO_BUF	= adr.FIFO_BUF .word
   970
   971 = 8E8C 00 06		FIFO_BUF
   971 				.endl							; UNIT MIDI_FIFO
   972
   973 				; ------------------------------------------------------------
   974
   975 8E8E			.local	MIDFILES					; UNIT
   976
   977 8E8E			.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT
   978
   979 				; -------------------  ASM Block 00000071  -------------------
   980
   981 8E8E A5 F5		    lda _timerStatus
   982 8E90 10 02		    bpl doSubTick
   983 8E92 68			    pla
   984 8E93 40			    rti
   985
   986 8E94			doSubTick:
   987 8E94 29 0F		    and #f_ratio
   988 8E96 C5 F4		    cmp _subCnt
   989 8E98 F0 04		    beq doMainTick
   990
   991 8E9A E6 F4		    inc _subCnt
   992 8E9C 68			    pla
   993 8E9D 40			    rti
   994
   995 8E9E			doMainTick:
   996 8E9E A9 01		    lda #1
   997 8EA0 85 F4		    sta _subCnt
   998
   999 8EA2 E6 F0		    inc _totalTicks
  1000 8EA4 D0 0C		    bne skip
  1001 8EA6 E6 F1		    inc _totalTicks+1
  1002 8EA8 D0 08		    bne skip
  1003 8EAA E6 F2		    inc _totalTicks+2
  1004 8EAC D0 04		    bne skip
  1005 8EAE E6 F3		    inc _totalTicks+3
  1006 8EB0 D0 00		    bne skip
  1007
  1008 8EB2			skip:
  1009
  1010 8EB2 68			  pla
  1011
  1012 8EB3 40				rti						; ret
  1013 				.endl
  1014
  1015 8EB4			.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER
  1016
  1017 				; -------------------  ASM Block 00000072  -------------------
  1018
  1019 8EB4 A5 E1		  lda _adr            // get LSB of address
  1020 8EB6 F0 01		  beq checkMemType    // zero means, we crossing the page. Check block bounds
  1021 8EB8 60			  rts
  1022
  1023 8EB9			checkMemType
  1024 8EB9 A5 E2		  lda _adr+1          // get MSB of address
  1025 8EBB A4 E0		  ldy _bank           // get current bank index
  1026 8EBD D0 17		  bne checkXMSBound   // zero, means we checking bounds in base memory
  1027 				                      // otherwise, we checking bound of extended memory
  1028
  1029 				// base memory bounds check
  1030 8EBF			check1Bound           // 1st boundary $8000..$a3ff - program area
  1031 8EBF C9 80		  cmp #$80
  1032 8EC1 D0 05		  bne check2Bound
  1033
  1034 8EC3 A9 A4		  lda #$a4
  1035 8EC5 85 E2		  sta _adr+1
  1036 8EC7 60			  rts
  1037
  1038 8EC8			check2Bound:          // 2nd boundary $bc00..$bfff - DL $ Screen (BASIC OFF!)
  1039
  1040 				  // cmp #$bc
  1041 				  // bne check3Bound
  1042
  1043 				  // lda #$c0
  1044 				  // sta _adr+1
  1045 				  // rts
  1046
  1047 8EC8			check3Bound:          // 3rd boundary $d000..$d7ff - I/O area
  1048 8EC8 C9 D0		  cmp #$d0
  1049 8ECA D0 05		  bne check4Bound
  1050
  1051 8ECC A9 D8		  lda #$d8
  1052 8ECE 85 E2		  sta _adr+1
  1053 8ED0 60			  rts
  1054
  1055 8ED1			check4bound           // 4th boundary $ff00..$ffff
  1056 8ED1 C9 FF		  cmp #$ff
  1057 8ED3 F0 06		  beq switchXMSBank
  1058 8ED5 60			  rts
  1059
  1060 				// extended memory bound check
  1061
  1062 8ED6			checkXMSBound         // extender memory window $4000..$7fff
  1063 8ED6 C9 80		  cmp #$80            // the bank's memory area ends at $7fff
  1064 8ED8 F0 01		  beq switchXMSBank   // if MSB addres is out of this address, we need switch bank
  1065
  1066 8EDA 60			  rts
  1067
  1068 8EDB			switchXMSBank:
  1069 8EDB C8			  iny             // increase current bank index
  1070 8EDC B9 00 01		  lda $100,y      // get bank set
  1071 8EDF F0 0A		  beq outOfMem    // if zero, means Out Of Memory
  1072
  1073 8EE1 84 E0		  sty _bank       // store current bank index
  1074
  1075 8EE3 8D 01 D3		  sta PORTB       // set PORTB (switch bank)
  1076
  1077 8EE6 A9 40		  lda #$40        // set MSB address to the begining of bank
  1078 8EE8 85 E2		  sta _adr+1
  1079 8EEA 60			  rts
  1080
  1081 8EEB			outOfMem:
  1082 8EEB A9 65		  lda #ERR_NOT_ENOUGHT_MEMORY
  1083 8EED 8D 3F 9E		  sta SYSTEM.IOResult
  1084
  1085 8EF0			@exit
  1086 					.ifdef @new
  1087 					lda <@VarData
  1088 					sta :ztmp
  1089 					lda >@VarData
  1090 					ldy #@VarDataSize-1
  1091 					jmp @FreeMem
  1092 					els
  1093 8EF0 60				rts						; ret
  1094 					eif
  1095 				.endl
  1096
  1097 8EF1			.local	LOADMID						; FUNCTION
  1098
  1099 8EF1 4C 7A 8F			jmp l_0220
  1100
  1101 8EF4			.local	READWORDBI					; FUNCTION
  1102
  1103 				; BlockRead
  1104
  1105 				; optimize OK (bigindian.inc), line = 3
  1106
  1107 8EF4 AC F0 92 84 82 AC + 	mwy F :bp2
  1108 8EFE A0 06			ldy #s@file.buffer
  1109 8F00 A9 B9			lda <RESULT
  1110 8F02 91 82			sta (:bp2),y
  1111 8F04 C8				iny
  1112 8F05 A9 9F			lda >RESULT
  1113 8F07 91 82			sta (:bp2),y
  1114 8F09 A0 08			ldy #s@file.nrecord
  1115 8F0B A9 02			lda #$02
  1116 8F0D 91 82			sta (:bp2),y
  1117 8F0F C8				iny
  1118 8F10 A9 00			lda #$00
  1119 8F12 91 82			sta (:bp2),y
  1120
  1121 8F14 8A 48			txa:pha
  1122 8F16 38				sec
  1123 					@readfile F, #7
  1123 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1123 8F17 AC F1 92		 LDY F+1
  1123 8F1A AD F0 92		 LDA F
  1123 8F1D A2 07		 LDX# 7
  1123 8F1F 20 6C 81		 JSR @READFILE
  1124 8F22 68 AA			pla:tax
  1125
  1126 				; -------------------  ASM Block 00000073  -------------------
  1127
  1128 8F24 AE B9 9F		    ldx result
  1129 8F27 AC BA 9F		    ldy result+1
  1130 8F2A 8E BA 9F		    stx result+1
  1131 8F2D 8C B9 9F		    sty result
  1132 				  
  1133 8F30			@exit
  1134
  1135 				; ------------------------------------------------------------
  1136
  1137 = 9FB9			RESULT	= DATAORIGIN+$0181
  1138 8F30 60				rts						; ret
  1139 				.endl
  1140
  1141 8F31			.local	READLONGBI					; FUNCTION
  1142
  1143 				; BlockRead
  1144
  1145 				; optimize OK (bigindian.inc), line = 15
  1146
  1147 8F31 AC F0 92 84 82 AC + 	mwy F :bp2
  1148 8F3B A0 06			ldy #s@file.buffer
  1149 8F3D A9 BB			lda <RESULT
  1150 8F3F 91 82			sta (:bp2),y
  1151 8F41 C8				iny
  1152 8F42 A9 9F			lda >RESULT
  1153 8F44 91 82			sta (:bp2),y
  1154 8F46 A0 08			ldy #s@file.nrecord
  1155 8F48 A9 04			lda #$04
  1156 8F4A 91 82			sta (:bp2),y
  1157 8F4C C8				iny
  1158 8F4D A9 00			lda #$00
  1159 8F4F 91 82			sta (:bp2),y
  1160
  1161 8F51 8A 48			txa:pha
  1162 8F53 38				sec
  1163 					@readfile F, #7
  1163 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1163 8F54 AC F1 92		 LDY F+1
  1163 8F57 AD F0 92		 LDA F
  1163 8F5A A2 07		 LDX# 7
  1163 8F5C 20 6C 81		 JSR @READFILE
  1164 8F5F 68 AA			pla:tax
  1165
  1166 				; -------------------  ASM Block 00000074  -------------------
  1167
  1168 8F61 AE BB 9F		    ldx result
  1169 8F64 AC BE 9F		    ldy result+3
  1170 8F67 8E BE 9F		    stx result+3
  1171 8F6A 8C BB 9F		    sty result
  1172
  1173 8F6D AE BC 9F		    ldx result+1
  1174 8F70 AC BD 9F		    ldy result+2
  1175 8F73 8E BD 9F		    stx result+2
  1176 8F76 8C BC 9F		    sty result+1
  1177 				  
  1178 8F79			@exit
  1179
  1180 				; ------------------------------------------------------------
  1181
  1182 = 9FBB			RESULT	= DATAORIGIN+$0183
  1183 8F79 60				rts						; ret
  1184 				.endl
  1185 8F7A			l_0220
  1186 				; AssignFile
  1187
  1188 				; optimize OK (loadmid.inc), line = 18
  1189
  1190 8F7A AC F0 92 84 82 AC + 	mwy F :bp2
  1191 8F84 A0 00			ldy #s@file.pfname
  1192 8F86 AD 98 9F			lda FN
  1193 8F89 91 82			sta (:bp2),y
  1194 8F8B C8				iny
  1195 8F8C AD 99 9F			lda FN+1
  1196 8F8F 91 82			sta (:bp2),y
  1197 8F91 A0 05			ldy #s@file.status
  1198 8F93 A9 00			lda #$00
  1199 8F95 91 82			sta (:bp2),y
  1200 				; Reset
  1201
  1202 				; optimize OK (loadmid.inc), line = 19
  1203
  1204 8F97 A0 02			ldy #s@file.record
  1205 8F99 A9 01			lda #$01
  1206 8F9B 91 82			sta (:bp2),y
  1207 8F9D C8				iny
  1208 8F9E A9 00			lda #$00
  1209 8FA0 91 82			sta (:bp2),y
  1210
  1211 8FA2 8A 48			txa:pha
  1212 8FA4 18				clc
  1213 					@openfile F, MAIN.SYSTEM.FileMode
  1213 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  1213 8FA5 AC F1 92		 LDY F+1
  1213 8FA8 AD F0 92		 LDA F
  1213 8FAB AE 3D 9E		 LDX MAIN.SYSTEM.FILEMODE
  1213 8FAE 20 9D 80		 JSR @OPENFILE
  1214 8FB1 68 AA			pla:tax
  1215
  1216 				; optimize OK (loadmid.inc), line = 20
  1217
  1218 8FB3 AD 3F 9E			lda SYSTEM.IORESULT
  1219 8FB6 10 14			jpl l_0257
  1220
  1221 				; optimize OK (loadmid.inc), line = 22
  1222
  1223 8FB8 8D 9A 9F			sta RESULT
  1224 				; CloseFile
  1225
  1226 8FBB 8A 48			txa:pha
  1227 8FBD 18				clc
  1228 					@closefile F
  1228 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1228 8FBE AC F1 92		 LDY F+1
  1228 8FC1 AD F0 92		 LDA F
  1228 8FC4 20 39 81		 JSR @CLOSEFILE
  1229 8FC7 68 AA			pla:tax
  1230
  1231 8FC9 4C EF 92			jmp @exit					; exit
  1232 8FCC			l_0257
  1233
  1234 				; optimize OK (loadmid.inc), line = 27
  1235
  1236 8FCC A9 00			lda #$00
  1237 8FCE 85 E0			sta _BANK
  1238
  1239 				; optimize OK (loadmid.inc), line = 28
  1240
  1241 8FD0 AD 7F 9F			lda MIDDATA
  1242 8FD3 85 E1			sta _PTR
  1243 8FD5 AD 80 9F			lda MIDDATA+1
  1244 8FD8 85 E2			sta _PTR+1
  1245
  1246 				; optimize OK (loadmid.inc), line = 29
  1247
  1248 8FDA AD D9 98			lda MIDTRACKS
  1249 8FDD 8D B7 9F			sta TRKDATA
  1250 8FE0 AD DA 98			lda MIDTRACKS+1
  1251 8FE3 8D B8 9F			sta TRKDATA+1
  1252
  1253 				; optimize OK (loadmid.inc), line = 30
  1254
  1255 8FE6 A9 00			lda #$00
  1256 8FE8 8D A7 9F			sta TRACKCOUNT
  1257
  1258 				; optimize OK (loadmid.inc), line = 31
  1259
  1260 8FEB A9 FF			lda #$FF
  1261 8FED 8D 83 9F			sta TOTALTRACKS
  1262
  1263 				; --- WhileProlog
  1264 8FF0 4C 9D 92			jmp l_0278
  1265 8FF3			l_0279
  1266 				; BlockRead
  1267
  1268 				; optimize OK (loadmid.inc), line = 35
  1269
  1270 8FF3 AC F0 92 84 82 AC + 	mwy F :bp2
  1271 8FFD A0 06			ldy #s@file.buffer
  1272 8FFF A9 A8			lda <CHUNKTAG
  1273 9001 91 82			sta (:bp2),y
  1274 9003 C8				iny
  1275 9004 A9 9F			lda >CHUNKTAG
  1276 9006 91 82			sta (:bp2),y
  1277 9008 A0 08			ldy #s@file.nrecord
  1278 900A A9 04			lda #$04
  1279 900C 91 82			sta (:bp2),y
  1280 900E C8				iny
  1281 900F A9 00			lda #$00
  1282 9011 91 82			sta (:bp2),y
  1283 9013 A0 0A			ldy #s@file.numread
  1284 9015 A9 AC			lda <V
  1285 9017 91 82			sta (:bp2),y
  1286 9019 C8				iny
  1287 901A A9 9F			lda >V
  1288 901C 91 82			sta (:bp2),y
  1289
  1290 901E 8A 48			txa:pha
  1291 9020 18				clc
  1292 					@readfile F, #135
  1292 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1292 9021 AC F1 92		 LDY F+1
  1292 9024 AD F0 92		 LDA F
  1292 9027 A2 87		 LDX# 135
  1292 9029 20 6C 81		 JSR @READFILE
  1293 902C 68 AA			pla:tax
  1294
  1295 				; optimize OK (loadmid.inc), line = 36
  1296
  1297 902E AD AD 9F			lda V+1
  1298 9031 D0 05			bne @+
  1299 9033 AD AC 9F			lda V
  1300 9036 C9 04			cmp #$04
  1301 				@
  1302 9038 F0 03			jeq l_0296
  1303 903A 4C DC 92			jmp b_0279					; break
  1304 903D			l_0296
  1305
  1306 				; optimize FAIL ('READLONGBI', loadmid.inc), line = 37
  1307
  1308 903D 20 31 8F			jsr READLONGBI
  1309 9040 AD BB 9F			lda READLONGBI.RESULT
  1310 9043 8D B2 9F			sta LEN
  1311 9046 AD BC 9F			lda READLONGBI.RESULT+1
  1312 9049 8D B3 9F			sta LEN+1
  1313 904C AD BD 9F			lda READLONGBI.RESULT+2
  1314 904F 8D B4 9F			sta LEN+2
  1315 9052 AD BE 9F			lda READLONGBI.RESULT+3
  1316 9055 8D B5 9F			sta LEN+3
  1317
  1318 				; optimize OK (loadmid.inc), line = 38
  1319
  1320 9058 AD AB 9F			lda CHUNKTAG+3
  1321 905B 49 64			eor #$64
  1322 905D D0 55			jne l_02AD
  1323 905F AD AA 9F			lda CHUNKTAG+2
  1324 9062 49 68			eor #$68
  1325 9064 D0 4E			jne l_02AD
  1326 9066 AD A9 9F			lda CHUNKTAG+1
  1327 9069 49 54			eor #$54
  1328 906B D0 47			jne l_02AD
  1329 906D AD A8 9F			lda CHUNKTAG
  1330 9070 49 4D			eor #$4D
  1331 9072 D0 40			jne l_02AD
  1332
  1333 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 40
  1334
  1335 9074 20 F4 8E			jsr READWORDBI
  1336 9077 AD B9 9F			lda READWORDBI.RESULT
  1337 907A 8D 82 9F			sta FORMAT
  1338
  1339 				; optimize OK (loadmid.inc), line = 41
  1340
  1341 907D F0 0C			jeq l_02D0
  1342 907F C9 01			cmp #$01
  1343 9081 F0 08			jeq l_02D0
  1344 9083 A9 64			lda #$64
  1345 9085 8D 9A 9F			sta RESULT
  1346 9088 4C EF 92			jmp @exit					; exit
  1347 908B			l_02D0
  1348
  1349 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 42
  1350
  1351 908B 20 F4 8E			jsr READWORDBI
  1352 908E AD B9 9F			lda READWORDBI.RESULT
  1353 9091 8D 83 9F			sta TOTALTRACKS
  1354
  1355 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 43
  1356
  1357 9094 20 F4 8E			jsr READWORDBI
  1358 9097 AD B9 9F			lda READWORDBI.RESULT
  1359 909A 8D AC 9F			sta V
  1360 909D AD BA 9F			lda READWORDBI.RESULT+1
  1361 90A0 8D AD 9F			sta V+1
  1362
  1363 				; optimize OK (loadmid.inc), line = 44
  1364
  1365 90A3 30 0C			jmi l_02F4
  1366
  1367 				; optimize OK (loadmid.inc), line = 45
  1368
  1369 90A5 AD AC 9F			lda V
  1370 90A8 8D 84 9F			sta TICKDIV
  1371 90AB AD AD 9F			lda V+1
  1372 90AE 8D 85 9F			sta TICKDIV+1
  1373 90B1			l_02F4
  1374 90B1 4C 9D 92			jmp l_0305
  1375 90B4			l_02AD
  1376
  1377 				; optimize OK (loadmid.inc), line = 60
  1378
  1379 90B4 AD AB 9F			lda CHUNKTAG+3
  1380 90B7 49 6B			eor #$6B
  1381 90B9 F0 03 4C 9D 92		jne l_0315
  1382 90BE AD AA 9F			lda CHUNKTAG+2
  1383 90C1 49 72			eor #$72
  1384 90C3 F0 03 4C 9D 92		jne l_0315
  1385 90C8 AD A9 9F			lda CHUNKTAG+1
  1386 90CB 49 54			eor #$54
  1387 90CD F0 03 4C 9D 92		jne l_0315
  1388 90D2 AD A8 9F			lda CHUNKTAG
  1389 90D5 49 4D			eor #$4D
  1390 90D7 F0 03 4C 9D 92		jne l_0315
  1391
  1392 				; optimize FAIL (0, loadmid.inc), line = 62
  1393
  1394 90DC EE A7 9F			inc TRACKCOUNT
  1395
  1396 				; optimize FAIL (':TMP', loadmid.inc), line = 63
  1397
  1398 90DF AD 96 9F			lda LOADPROCESS
  1399 90E2 85 91			sta :TMP+1
  1400 90E4 AD 97 9F			lda LOADPROCESS+1
  1401 90E7 85 92			sta :TMP+2
  1402 90E9 A9 4C			lda #$4C
  1403 90EB 85 90			sta :TMP
  1404 90ED E8				inx
  1405 90EE AD A7 9F 95 94		mva TRACKCOUNT :STACKORIGIN,x
  1406 90F3 20 90 00			jsr :TMP
  1407
  1408 				; optimize OK (loadmid.inc), line = 65
  1409
  1410 90F6 AC B7 9F 84 82 AC + 	mwy TRKDATA :bp2
  1411 9100 A0 00			ldy #$00
  1412 9102 A5 E0			lda _BANK
  1413 9104 91 82			sta (:bp2),y
  1414
  1415 				; optimize OK (loadmid.inc), line = 66
  1416
  1417 9106 C8				iny
  1418 9107 A5 E1			lda _ADR
  1419 9109 91 82			sta (:bp2),y
  1420 910B C8				iny
  1421 910C A5 E2			lda _ADR+1
  1422 910E 91 82			sta (:bp2),y
  1423
  1424 				; optimize OK (loadmid.inc), line = 67
  1425
  1426 9110 C8				iny
  1427 9111 A9 00			lda #$00
  1428 9113 91 82			sta (:bp2),y
  1429 9115 C8				iny
  1430 9116 91 82			sta (:bp2),y
  1431 9118 C8				iny
  1432 9119 91 82			sta (:bp2),y
  1433 911B C8				iny
  1434 911C 91 82			sta (:bp2),y
  1435
  1436 				; optimize OK (loadmid.inc), line = 68
  1437
  1438 911E C8				iny
  1439 911F 91 82			sta (:bp2),y
  1440
  1441 				; --- WhileProlog
  1442 9121 4C 7C 92			jmp l_0333
  1443 9124			l_0334
  1444
  1445 				; optimize FAIL ('MEMBOUNDCHECK', loadmid.inc), line = 72
  1446
  1447 9124 20 B4 8E			jsr MEMBOUNDCHECK
  1448 9127 AD 3F 9E			lda SYSTEM.IORESULT
  1449 912A C9 01			cmp #$01
  1450 912C F0 08			jeq l_0347
  1451 912E A9 65			lda #$65
  1452 9130 8D 9A 9F			sta RESULT
  1453 9133 4C EF 92			jmp @exit					; exit
  1454 9136			l_0347
  1455
  1456 				; optimize OK (loadmid.inc), line = 74
  1457
  1458 9136				.LOCAL
  1459 9136 AD B5 9F			lda LEN+3
  1460 9139 38 E9 00			sub #$00
  1461 913C D0 1F			bne L4
  1462 913E AD B4 9F			lda LEN+2
  1463 9141 C9 00			cmp #$00
  1464 9143 D0 0C			bne L1
  1465 9145 AD B3 9F			lda LEN+1
  1466 9148 C9 00			cmp #$00
  1467 914A D0 05			bne L1
  1468 914C AD B2 9F			lda LEN
  1469 914F C9 FF			cmp #$FF
  1470 9151 F0 10		L1	beq L5
  1471 9153 B0 04			bcs L3
  1472 9155 A9 FF			lda #$FF
  1473 9157 D0 0A			bne L5
  1474 9159 A9 01		L3	lda #$01
  1475 915B D0 06			bne L5
  1476 915D 50 04		L4	bvc L5
  1477 915F 49 FF			eor #$FF
  1478 9161 09 01			ora #$01
  1479 9163			L5
  1480 					.ENDL
  1481 9163 30 0A			jmi l_035E
  1482 9165 F0 08			jeq l_035E
  1483 9167 A9 FF			lda #$FF
  1484 9169 8D B6 9F			sta LOADSIZE
  1485 916C 4C 75 91			jmp l_036C
  1486 916F			l_035E
  1487 916F AD B2 9F			lda LEN
  1488 9172 8D B6 9F			sta LOADSIZE
  1489 9175			l_036C
  1490
  1491 				; optimize OK (loadmid.inc), line = 75
  1492
  1493 9175 A5 E1			lda _ADR
  1494 9177 18 6D B6 9F			add LOADSIZE
  1495 917B 8D B0 9F			sta ENDADR
  1496 917E A5 E2			lda _ADR+1
  1497 9180 69 00			adc #$00
  1498 9182 8D B1 9F			sta ENDADR+1
  1499
  1500 				; optimize OK (loadmid.inc), line = 76
  1501
  1502 9185 A5 E0			lda _BANK
  1503 9187 D0 3C			jne l_038D
  1504
  1505 				; optimize OK (loadmid.inc), line = 78
  1506
  1507 9189 AD B1 9F			lda ENDADR+1
  1508 918C 10 0F			jpl l_03AA
  1509 918E C9 A4			cmp #$A4
  1510 9190 B0 0B			jcs l_03AA
  1511
  1512 				; optimize OK (loadmid.inc), line = 79
  1513
  1514 9192 A9 00			lda #$00
  1515 9194 38 E5 E1			sub _ADR
  1516 9197 8D B6 9F			sta LOADSIZE
  1517 919A 4C C2 91			jmp l_03BD
  1518 919D			l_03AA
  1519
  1520 				; optimize OK (loadmid.inc), line = 80
  1521
  1522 919D AD B1 9F			lda ENDADR+1
  1523 91A0 C9 D0			cmp #$D0
  1524 91A2 90 0F			jcc l_03D9
  1525 91A4 C9 D8			cmp #$D8
  1526 91A6 B0 0B			jcs l_03D9
  1527
  1528 				; optimize OK (loadmid.inc), line = 81
  1529
  1530 91A8 A9 00			lda #$00
  1531 91AA 38 E5 E1			sub _ADR
  1532 91AD 8D B6 9F			sta LOADSIZE
  1533 91B0 4C C2 91			jmp l_03EC
  1534 91B3			l_03D9
  1535
  1536 				; optimize OK (loadmid.inc), line = 82
  1537
  1538 91B3 AD B1 9F			lda ENDADR+1
  1539 91B6 C9 FF			cmp #$FF
  1540 91B8 90 08			jcc l_03FD
  1541
  1542 				; optimize OK (loadmid.inc), line = 83
  1543
  1544 91BA A9 00			lda #$00
  1545 91BC 38 E5 E1			sub _ADR
  1546 91BF 8D B6 9F			sta LOADSIZE
  1547 91C2			l_03FD
  1548 91C2			l_03EC
  1549 91C2			l_03BD
  1550 91C2 4C D2 91			jmp l_0412
  1551 91C5			l_038D
  1552
  1553 				; optimize OK (loadmid.inc), line = 86
  1554
  1555 91C5 AD B1 9F			lda ENDADR+1
  1556 91C8 10 08			jpl l_0423
  1557
  1558 				; optimize OK (loadmid.inc), line = 87
  1559
  1560 91CA A9 00			lda #$00
  1561 91CC 38 E5 E1			sub _ADR
  1562 91CF 8D B6 9F			sta LOADSIZE
  1563 91D2			l_0423
  1564 91D2			l_0412
  1565
  1566 				; optimize OK (loadmid.inc), line = 89
  1567
  1568 91D2 AD B6 9F			lda LOADSIZE
  1569 91D5 D0 03			jne l_0441
  1570 91D7 4C 7C 92			jmp c_0334					; continue
  1571 91DA			l_0441
  1572 				; BlockRead
  1573
  1574 				; optimize OK (loadmid.inc), line = 91
  1575
  1576 91DA AC F0 92 84 82 AC + 	mwy F :bp2
  1577 91E4 A0 06			ldy #s@file.buffer
  1578 91E6 AD DB 98			lda RBUF
  1579 91E9 91 82			sta (:bp2),y
  1580 91EB C8				iny
  1581 91EC AD DC 98			lda RBUF+1
  1582 91EF 91 82			sta (:bp2),y
  1583 91F1 A0 08			ldy #s@file.nrecord
  1584 91F3 AD B6 9F			lda LOADSIZE
  1585 91F6 91 82			sta (:bp2),y
  1586 91F8 C8				iny
  1587 91F9 A9 00			lda #$00
  1588 91FB 91 82			sta (:bp2),y
  1589 91FD A0 0A			ldy #s@file.numread
  1590 91FF A9 AC			lda <V
  1591 9201 91 82			sta (:bp2),y
  1592 9203 C8				iny
  1593 9204 A9 9F			lda >V
  1594 9206 91 82			sta (:bp2),y
  1595
  1596 9208 8A 48			txa:pha
  1597 920A 18				clc
  1598 					@readfile F, #135
  1598 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1598 920B AC F1 92		 LDY F+1
  1598 920E AD F0 92		 LDA F
  1598 9211 A2 87		 LDX# 135
  1598 9213 20 6C 81		 JSR @READFILE
  1599 9216 68 AA			pla:tax
  1600
  1601 				; optimize OK (loadmid.inc), line = 92
  1602
  1603 9218 AD AD 9F			lda V+1
  1604 921B D0 06			bne @+
  1605 921D AD AC 9F			lda V
  1606 9220 CD B6 9F			cmp LOADSIZE
  1607 				@
  1608 9223 F0 09			jeq l_0466
  1609 9225 AD 3F 9E			lda SYSTEM.IORESULT
  1610 9228 8D 9A 9F			sta RESULT
  1611 922B 4C EF 92			jmp @exit					; exit
  1612 922E			l_0466
  1613
  1614 				; optimize OK (loadmid.inc), line = 94
  1615
  1616 922E A9 00			lda #$00
  1617 9230 85 88			sta SYSTEM.MOVE_00F2.SOURCE
  1618 9232 A9 06			lda #$06
  1619 9234 85 89			sta SYSTEM.MOVE_00F2.SOURCE+1
  1620 9236 A5 E1			lda _PTR
  1621 9238 85 8C			sta SYSTEM.MOVE_00F2.DEST
  1622 923A A5 E2			lda _PTR+1
  1623 923C 85 8D			sta SYSTEM.MOVE_00F2.DEST+1
  1624 923E AD B6 9F			lda LOADSIZE
  1625 9241 85 84			sta SYSTEM.MOVE_00F2.COUNT
  1626 9243 A9 00			lda #$00
  1627 9245 85 85			sta SYSTEM.MOVE_00F2.COUNT+1
  1628 9247				.local +MAIN.SYSTEM.MOVE_00F2
  1629 9247				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00F2.M@INLINE [Source: MIDICar Player.a65]
     4 9247 20 27 84			jsr @move
Source: MIDICar Player.a65
  1630 					.endl
  1631
  1632 				; optimize OK (loadmid.inc), line = 95
  1633
  1634 924A A5 E1			lda _ADR
  1635 924C 18 6D AC 9F			add V
  1636 9250 85 E1			sta _ADR
  1637 9252 A5 E2			lda _ADR+1
  1638 9254 6D AD 9F			adc V+1
  1639 9257 85 E2			sta _ADR+1
  1640
  1641 				; optimize OK (loadmid.inc), line = 96
  1642
  1643 9259 AD B2 9F			lda LEN
  1644 925C 38 ED AC 9F			sub V
  1645 9260 8D B2 9F			sta LEN
  1646 9263 AD B3 9F			lda LEN+1
  1647 9266 ED AD 9F			sbc V+1
  1648 9269 8D B3 9F			sta LEN+1
  1649 926C AD B4 9F			lda LEN+2
  1650 926F E9 00			sbc #$00
  1651 9271 8D B4 9F			sta LEN+2
  1652 9274 AD B5 9F			lda LEN+3
  1653 9277 E9 00			sbc #$00
  1654 9279 8D B5 9F			sta LEN+3
  1655 927C			c_0334
  1656 927C			l_0333
  1657
  1658 				; optimize OK (loadmid.inc), line = 70
  1659
  1660 927C AD B5 9F			lda LEN+3
  1661 927F 30 0E			bmi @+
  1662 9281 0D B4 9F			ora LEN+2
  1663 9284 0D B3 9F			ora LEN+1
  1664 9287 0D B2 9F			ora LEN
  1665 928A F0 03 4C 24 91		jne l_0334
  1666 				@
  1667
  1668 				; optimize OK (loadmid.inc), line = 99
  1669
  1670 928F AD B7 9F			lda TRKDATA
  1671 9292 18 69 09			add #$09
  1672 9295 8D B7 9F			sta TRKDATA
  1673 9298 90 03			scc
  1674 929A EE B8 9F			inc TRKDATA+1
  1675 929D			l_0315
  1676 929D			l_0305
  1677 929D			l_0278
  1678
  1679 				; optimize FAIL (1, loadmid.inc), line = 33
  1680
  1681 929D E8				inx
  1682 929E A0 01			ldy #1
  1683 92A0 AD 3F 9E			lda SYSTEM.IORESULT
  1684 92A3 C9 01			cmp #$01
  1685 92A5 F0 01			beq @+
  1686 92A7 88				dey
  1687 				@
  1688 92A8 94 94			sty :STACKORIGIN,x
  1689 92AA AD F0 92			lda F
  1690 92AD 8D 4F 9E			sta SYSTEM.EOF.F
  1691 92B0 AD F1 92			lda F+1
  1692 92B3 8D 50 9E			sta SYSTEM.EOF.F+1
  1693 92B6 20 12 8D			jsr SYSTEM.EOF
  1694 92B9 E8				inx
  1695 92BA AD 51 9E 95 94		mva SYSTEM.EOF.RESULT :STACKORIGIN,x
  1696 92BF 20 77 83			jsr notBOOLEAN
  1697 92C2 20 B2 83			jsr andAL_CL
  1698 92C5 CA				dex
  1699 92C6 CA				dex
  1700 92C7 A0 01			ldy #1
  1701 92C9 AD A7 9F			lda TRACKCOUNT
  1702 92CC CD 83 9F			cmp TOTALTRACKS
  1703 92CF 90 01			bcc @+
  1704 92D1 88				dey
  1705 				@
  1706 92D2 98				tya
  1707 92D3 35 95			and :STACKORIGIN+1,x
  1708 92D5 95 95			sta :STACKORIGIN+1,x
  1709 92D7 F0 03 4C F3 8F		jne l_0279
  1710 92DC			b_0279
  1711 				; CloseFile
  1712
  1713 92DC 8A 48			txa:pha
  1714 92DE 18				clc
  1715 					@closefile F
  1715 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1715 92DF AC F1 92		 LDY F+1
  1715 92E2 AD F0 92		 LDA F
  1715 92E5 20 39 81		 JSR @CLOSEFILE
  1716 92E8 68 AA			pla:tax
  1717
  1718 				; optimize OK (loadmid.inc), line = 103
  1719
  1720 92EA A9 00			lda #$00
  1721 92EC 8D 9A 9F			sta RESULT
  1722 92EF			@exit
  1723
  1724 				; ------------------------------------------------------------
  1725
  1726 = 9F98			FN	= DATAORIGIN+$0160
  1727 = 9F9A			RESULT	= DATAORIGIN+$0162
  1728 = 00FF			LOADBUF_SIZE	= $FF
  1729 92EF			.var F	= DATAORIGIN+$0163 .word
  1730 = 9FA7			TRACKCOUNT	= DATAORIGIN+$016F
  1731 = 9FA8			CHUNKTAG	= DATAORIGIN+$0170
  1732 = 9FAC			V	= DATAORIGIN+$0174
  1733 = 9FAE			TOP	= DATAORIGIN+$0176
  1734 = 9FB0			ENDADR	= DATAORIGIN+$0178
  1735 = 9FB2			LEN	= DATAORIGIN+$017A
  1736 = 9FB6			LOADSIZE	= DATAORIGIN+$017E
  1737 = 9FB7			TRKDATA	= DATAORIGIN+$017F
  1738 = 9E38			TRKDATA.BANK	= DATAORIGIN+$0000
  1739 = 9E39			TRKDATA.PTR	= DATAORIGIN+$0001
  1740 = 9E3B			TRKDATA.TRACKTIME	= DATAORIGIN+$0003
  1741 = 9E3F			TRKDATA.STATUS	= DATAORIGIN+$0007
  1742 = 9E40			TRKDATA._EVENT	= DATAORIGIN+$0008
  1743
  1744 = 9F98			@VarData	= FN
  1745 = 0020			@VarDataSize	= 32
  1746
  1747 92EF 60				rts						; ret
  1748 = 92F0 9B 9F		F
  1748 				.endl
  1749
  1750 92F2			.local	PROCESSTRACK					; PROCEDURE
  1751
  1752 92F2 4C 49 95			jmp l_04B2
  1753
  1754 92F5			.local	READB						; PROCEDURE | INLINE
  1755
  1756 					.MACRO m@INLINE
  1757 				
  1758 				; optimize OK (processtrack.inc), line = 12
  1759 				
  1760 					ldy #$00
  1761 					lda (_PTR),y
  1762 					sta _TMP
  1763 				
  1764 				; optimize FAIL (0, processtrack.inc), line = 13
  1765 				
  1766 					inc _ADR
  1767 					sne
  1768 					inc _ADR+1
  1769 				
  1770 				; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 14
  1771 				
  1772 					jsr MEMBOUNDCHECK
  1773 					.ENDM
  1774 92F5			@exit
  1775 				.endl
  1776
  1777 92F5			.local	READB2FB					; PROCEDURE | INLINE
  1778
  1779 					.MACRO m@INLINE
  1780 				
  1781 				; optimize OK (processtrack.inc), line = 20
  1782 				
  1783 					ldy #$00
  1784 					lda (_PTR),y
  1785 					sta MIDI_FIFO.FIFO_BYTE
  1786 				
  1787 				; optimize FAIL (0, processtrack.inc), line = 24
  1788 				
  1789 					inc _ADR
  1790 					sne
  1791 					inc _ADR+1
  1792 				
  1793 				; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 25
  1794 				
  1795 					jsr MEMBOUNDCHECK
  1796 					.ENDM
  1797 92F5			@exit
  1798 				.endl
  1799
  1800 92F5			.local	READVARL					; PROCEDURE | ASSEMBLER
  1801
  1802 				; -------------------  ASM Block 00000075  -------------------
  1803
  1804 = 00F6			A equ _delta;
  1805 = 00F7			B equ _delta+1;
  1806 = 00F8			C equ _delta+2;
  1807 = 00F9			D equ _delta+3;
  1808
  1809 				  .MACRO m@read2A
  1810 				    ldy #0
  1811 				    lda (_PTR),y
  1812 				    sta A
  1813 				    inc _ADR
  1814 				    sne
  1815 				    inc _ADR+1
  1816 				    jsr MEMBOUNDCHECK
  1817 				    lda A
  1818 				  .ENDM
  1819
  1820 92F5 A0 00		  ldy #0
  1821 92F7 84 F6		  sty A
  1822 92F9 84 F7		  sty B
  1823 92FB 84 F8		  sty C
  1824 92FD 84 F9		  sty D
  1825
  1826 				// read block
  1827
  1828 				// read 1st byte to A
  1829 92FF			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 92FF A0 00		    ldy #0
     2 9301 B1 E1		    lda (_PTR),y
     3 9303 85 F6		    sta A
     4 9305 E6 E1		    inc _ADR
     5 9307 D0 02		    sne
     6 9309 E6 E2		    inc _ADR+1
     7 930B 20 B4 8E		    jsr MEMBOUNDCHECK
     8 930E A5 F6		    lda A
Source: MIDICar Player.a65
  1830
  1831 9310 10 53		  bpl endRead
  1832
  1833 				// move A to B and read 2nd byte to A
  1834 				// B <- A = 4th readed byte
  1835 9312 29 7F			and #$7F
  1836 9314 85 F7			sta B
  1837
  1838 				// read 2nd byte
  1839 9316			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 9316 A0 00		    ldy #0
     2 9318 B1 E1		    lda (_PTR),y
     3 931A 85 F6		    sta A
     4 931C E6 E1		    inc _ADR
     5 931E D0 02		    sne
     6 9320 E6 E2		    inc _ADR+1
     7 9322 20 B4 8E		    jsr MEMBOUNDCHECK
     8 9325 A5 F6		    lda A
Source: MIDICar Player.a65
  1840
  1841 9327 10 3C		  bpl endRead
  1842
  1843 				// mova B to C, A to B and read 3rd byte to A
  1844 				// C <- B <- A = 4th readed byte
  1845 9329 A5 F7			lda B
  1846 932B 85 F8			sta C
  1847 932D A5 F6			lda A
  1848 932F 29 7F			and #$7F
  1849 9331 85 F7			sta B
  1850
  1851 				// read 3rd
  1852 9333			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 9333 A0 00		    ldy #0
     2 9335 B1 E1		    lda (_PTR),y
     3 9337 85 F6		    sta A
     4 9339 E6 E1		    inc _ADR
     5 933B D0 02		    sne
     6 933D E6 E2		    inc _ADR+1
     7 933F 20 B4 8E		    jsr MEMBOUNDCHECK
     8 9342 A5 F6		    lda A
Source: MIDICar Player.a65
  1853
  1854 9344 10 1F		  bpl endRead
  1855
  1856 				// move C to D, B to C, A to B and read 4th byte to A
  1857 				// D <- C <- B <- A = 4th readed byte
  1858 9346 A5 F8			lda C
  1859 9348 85 F9			sta D
  1860 934A A5 F7			lda B
  1861 934C 85 F8			sta C
  1862 934E A5 F6			lda A
  1863 9350 29 7F			and #$7F
  1864 9352 85 F7			sta B
  1865
  1866 				// read 4th
  1867 9354			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 9354 A0 00		    ldy #0
     2 9356 B1 E1		    lda (_PTR),y
     3 9358 85 F6		    sta A
     4 935A E6 E1		    inc _ADR
     5 935C D0 02		    sne
     6 935E E6 E2		    inc _ADR+1
     7 9360 20 B4 8E		    jsr MEMBOUNDCHECK
     8 9363 A5 F6		    lda A
Source: MIDICar Player.a65
  1868
  1869 				// end read block
  1870 9365			endRead:
  1871
  1872 				// decode block
  1873 				// 'A' stays as it is
  1874
  1875 				// 'B' if geather than zero, lets decode
  1876 9365 A5 F7		  lda B
  1877 9367 F0 0A		  beq decodeC
  1878
  1879 				// 76543210
  1880 				// 0bbbbbbb and %1
  1881 				// 0000000b
  1882 				//        |
  1883 				// +------+ 7:asl
  1884 				// v
  1885 				// b0000000 ora A
  1886 				// baaaaaaa
  1887
  1888 9369 46 F7		  lsr B
  1889 936B 90 06		  bcc decodeC
  1890
  1891 936D A5 F6		  lda A
  1892 936F 09 80		  ora #$80
  1893 9371 85 F6		  sta A
  1894
  1895 9373			decodeC:
  1896 				// 'C' if geather than zero, lets decode
  1897 9373 A5 F8		  lda C
  1898 9375 F0 12		  beq decodeD
  1899
  1900 				// 76543210
  1901 				// 0ccccccc and %11
  1902 				// 000000cc
  1903 				//       ||
  1904 				// +-----+| 6:asl
  1905 				// |+-----+
  1906 				// vv
  1907 				// cc000000 ora B
  1908 				// ccbbbbbb
  1909 9377 29 03		  and #%11    // 2
  1910 9379 F0 08		  beq noOrC   // 2**
  1911 937B A8			  tay         // 2
  1912 937C B9 A1 93		  lda OrC,y   // 4*
  1913 937F 05 F7		  ora B       // 3
  1914 9381 85 F7		  sta B       // 3
  1915
  1916 9383			noOrC:
  1917 9383 A5 F8		  lda C       // 3
  1918 9385 4A			  lsr @       // 2
  1919 9386 4A			  lsr @       // 2
  1920 9387 85 F8		  sta C       // 3
  1921 				              //=26*+**
  1922
  1923 9389			decodeD:
  1924 				// 'D' if geather than zero, lets decode
  1925 9389 A5 F9		  lda D
  1926 938B F0 13		  beq endDecode
  1927
  1928 				// 76543210
  1929 				// 0ddddddd and %111
  1930 				// 00000ddd
  1931 				//      |||
  1932 				// +----+||
  1933 				// |+----+| 5:asl
  1934 				// ||+----+
  1935 				// vvv
  1936 				// ddd00000 ora C
  1937 				// dddccccc
  1938
  1939 938D 29 07		  and #%111   // 2
  1940 938F F0 08		  beq noOrD   // 2**
  1941 9391 A8			  tay         // 2
  1942 9392 B9 A5 93		  lda OrD,y   // 4*
  1943 9395 05 F8		  ora C       // 3
  1944 9397 85 F8		  sta C       // 3
  1945
  1946 9399			noOrD:
  1947 9399 A5 F9		  lda D       // 3
  1948 939B 4A			  lsr @       // 2
  1949 939C 4A			  lsr @       // 2
  1950 939D 4A			  lsr @       // 2
  1951 939E 85 F9		  sta D       // 3
  1952 				              //=28*+**
  1953 93A0			endDecode:
  1954 93A0 60			  rts
  1955
  1956 93A1			OrC:
  1957 93A1 00			  dta %00000000
  1958 93A2 40			  dta %01000000
  1959 93A3 80			  dta %10000000
  1960 93A4 C0			  dta %11000000
  1961
  1962 93A5			OrD:
  1963 93A5 00			  dta %00000000
  1964 93A6 20			  dta %00100000
  1965 93A7 40			  dta %01000000
  1966 93A8 60			  dta %01100000
  1967 93A9 80			  dta %10000000
  1968 93AA A0			  dta %10100000
  1969 93AB C0			  dta %11000000
  1970 93AC E0			  dta %11100000
  1971
  1972 93AD			@exit
  1973 					.ifdef @new
  1974 					lda <@VarData
  1975 					sta :ztmp
  1976 					lda >@VarData
  1977 					ldy #@VarDataSize-1
  1978 					jmp @FreeMem
  1979 					els
  1980 93AD 60				rts						; ret
  1981 					eif
  1982 				.endl
  1983
  1984 93AE			.local	READ24						; PROCEDURE | ASSEMBLER
  1985
  1986 				; -------------------  ASM Block 00000076  -------------------
  1987
  1988 				  .MACRO m@readByte
  1989 				    ldy #0
  1990 				    lda (_PTR),y
  1991 				    sta _TMP
  1992 				    inc _ADR
  1993 				    sne
  1994 				    inc _ADR+1
  1995 				    jsr MEMBOUNDCHECK
  1996 				    lda _TMP
  1997 				  .ENDM
  1998
  1999 93AE			  m@readByte
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: MIDICar Player.a65]
     1 93AE A0 00		    ldy #0
     2 93B0 B1 E1		    lda (_PTR),y
     3 93B2 85 F6		    sta _TMP
     4 93B4 E6 E1		    inc _ADR
     5 93B6 D0 02		    sne
     6 93B8 E6 E2		    inc _ADR+1
     7 93BA 20 B4 8E		    jsr MEMBOUNDCHECK
     8 93BD A5 F6		    lda _TMP
Source: MIDICar Player.a65
  2000 93BF 85 F8		  sta _delta+2
  2001
  2002 93C1			  m@readByte
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: MIDICar Player.a65]
     1 93C1 A0 00		    ldy #0
     2 93C3 B1 E1		    lda (_PTR),y
     3 93C5 85 F6		    sta _TMP
     4 93C7 E6 E1		    inc _ADR
     5 93C9 D0 02		    sne
     6 93CB E6 E2		    inc _ADR+1
     7 93CD 20 B4 8E		    jsr MEMBOUNDCHECK
     8 93D0 A5 F6		    lda _TMP
Source: MIDICar Player.a65
  2003 93D2 85 F7		  sta _delta+1
  2004
  2005 93D4			  m@readByte
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: MIDICar Player.a65]
     1 93D4 A0 00		    ldy #0
     2 93D6 B1 E1		    lda (_PTR),y
     3 93D8 85 F6		    sta _TMP
     4 93DA E6 E1		    inc _ADR
     5 93DC D0 02		    sne
     6 93DE E6 E2		    inc _ADR+1
     7 93E0 20 B4 8E		    jsr MEMBOUNDCHECK
     8 93E3 A5 F6		    lda _TMP
Source: MIDICar Player.a65
  2006 93E5 85 F6		  sta _delta+0
  2007
  2008 93E7 A9 00		  lda #0
  2009 93E9 85 F9		  sta _delta+3
  2010
  2011 93EB			@exit
  2012 					.ifdef @new
  2013 					lda <@VarData
  2014 					sta :ztmp
  2015 					lda >@VarData
  2016 					ldy #@VarDataSize-1
  2017 					jmp @FreeMem
  2018 					els
  2019 93EB 60				rts						; ret
  2020 					eif
  2021 				.endl
  2022
  2023 93EC			.local	EVENTMIDI3					; PROCEDURE
  2024
  2025 				; optimize OK (events.inc), line = 4
  2026
  2027 93EC A5 E8			lda _EVENT
  2028 93EE 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2029 93F0				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2030 93F0				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 93F0 A5 FD		  lda FIFO_Head
     5 93F2 18			  clc
     6 93F3 69 01		  adc #1
     7 93F5 C5 FE		  cmp FIFO_Tail
     8 93F7 D0 03		  bne storeInFIFO
     9 93F9 20 71 8E		  jsr FIFO_Flush
    11 93FC			storeInFIFO:
    12 93FC A4 FD		  ldy FIFO_Head
    13 93FE A5 FF		  lda FIFO_Byte
    14 9400 99 00 06		  sta FIFO_ADDR,y
    15 9403 E6 FD		  inc FIFO_Head
    16 9405			exitWrite:
Source: MIDICar Player.a65
  2031 					.endl
  2032
  2033 				; optimize FAIL ('m@INLINE', events.inc), line = 5
  2034
  2035 9405				.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
  2036 9405				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 9405 A0 00			ldy #$00
     5 9407 B1 E1			lda (_PTR),y
     6 9409 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 940B E6 E1			inc _ADR
    11 940D D0 02			sne
    12 940F E6 E2			inc _ADR+1
    16 9411 20 B4 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2037 					.endl
  2038 9414				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2039 9414				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 9414 A5 FD		  lda FIFO_Head
     5 9416 18			  clc
     6 9417 69 01		  adc #1
     7 9419 C5 FE		  cmp FIFO_Tail
     8 941B D0 03		  bne storeInFIFO
     9 941D 20 71 8E		  jsr FIFO_Flush
    11 9420			storeInFIFO:
    12 9420 A4 FD		  ldy FIFO_Head
    13 9422 A5 FF		  lda FIFO_Byte
    14 9424 99 00 06		  sta FIFO_ADDR,y
    15 9427 E6 FD		  inc FIFO_Head
    16 9429			exitWrite:
Source: MIDICar Player.a65
  2040 					.endl
  2041
  2042 				; optimize FAIL ('m@INLINE', events.inc), line = 6
  2043
  2044 9429				.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
  2045 9429				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 9429 A0 00			ldy #$00
     5 942B B1 E1			lda (_PTR),y
     6 942D 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 942F E6 E1			inc _ADR
    11 9431 D0 02			sne
    12 9433 E6 E2			inc _ADR+1
    16 9435 20 B4 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2046 					.endl
  2047 9438				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2048 9438				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 9438 A5 FD		  lda FIFO_Head
     5 943A 18			  clc
     6 943B 69 01		  adc #1
     7 943D C5 FE		  cmp FIFO_Tail
     8 943F D0 03		  bne storeInFIFO
     9 9441 20 71 8E		  jsr FIFO_Flush
    11 9444			storeInFIFO:
    12 9444 A4 FD		  ldy FIFO_Head
    13 9446 A5 FF		  lda FIFO_Byte
    14 9448 99 00 06		  sta FIFO_ADDR,y
    15 944B E6 FD		  inc FIFO_Head
    16 944D			exitWrite:
Source: MIDICar Player.a65
  2049 					.endl
  2050 944D			@exit
  2051 					.ifdef @new
  2052 					lda <@VarData
  2053 					sta :ztmp
  2054 					lda >@VarData
  2055 					ldy #@VarDataSize-1
  2056 					jmp @FreeMem
  2057 					els
  2058 944D 60				rts						; ret
  2059 					eif
  2060 				.endl
  2061
  2062 944E			.local	EVENTMIDI2					; PROCEDURE
  2063
  2064 				; optimize OK (events.inc), line = 17
  2065
  2066 944E A5 E8			lda _EVENT
  2067 9450 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2068 9452				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2069 9452				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 9452 A5 FD		  lda FIFO_Head
     5 9454 18			  clc
     6 9455 69 01		  adc #1
     7 9457 C5 FE		  cmp FIFO_Tail
     8 9459 D0 03		  bne storeInFIFO
     9 945B 20 71 8E		  jsr FIFO_Flush
    11 945E			storeInFIFO:
    12 945E A4 FD		  ldy FIFO_Head
    13 9460 A5 FF		  lda FIFO_Byte
    14 9462 99 00 06		  sta FIFO_ADDR,y
    15 9465 E6 FD		  inc FIFO_Head
    16 9467			exitWrite:
Source: MIDICar Player.a65
  2070 					.endl
  2071
  2072 				; optimize FAIL ('m@INLINE', events.inc), line = 18
  2073
  2074 9467				.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
  2075 9467				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 9467 A0 00			ldy #$00
     5 9469 B1 E1			lda (_PTR),y
     6 946B 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 946D E6 E1			inc _ADR
    11 946F D0 02			sne
    12 9471 E6 E2			inc _ADR+1
    16 9473 20 B4 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2076 					.endl
  2077 9476				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2078 9476				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 9476 A5 FD		  lda FIFO_Head
     5 9478 18			  clc
     6 9479 69 01		  adc #1
     7 947B C5 FE		  cmp FIFO_Tail
     8 947D D0 03		  bne storeInFIFO
     9 947F 20 71 8E		  jsr FIFO_Flush
    11 9482			storeInFIFO:
    12 9482 A4 FD		  ldy FIFO_Head
    13 9484 A5 FF		  lda FIFO_Byte
    14 9486 99 00 06		  sta FIFO_ADDR,y
    15 9489 E6 FD		  inc FIFO_Head
    16 948B			exitWrite:
Source: MIDICar Player.a65
  2079 					.endl
  2080 948B			@exit
  2081 					.ifdef @new
  2082 					lda <@VarData
  2083 					sta :ztmp
  2084 					lda >@VarData
  2085 					ldy #@VarDataSize-1
  2086 					jmp @FreeMem
  2087 					els
  2088 948B 60				rts						; ret
  2089 					eif
  2090 				.endl
  2091
  2092 948C			.local	EVENTSYSEX					; PROCEDURE
  2093
  2094 				; optimize FAIL ('READVARL', events.inc), line = 27
  2095
  2096 948C 20 F5 92			jsr READVARL
  2097
  2098 				; optimize OK (events.inc), line = 29
  2099
  2100 948F A5 E8			lda _EVENT
  2101 9491 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2102 9493				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2103 9493				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 9493 A5 FD		  lda FIFO_Head
     5 9495 18			  clc
     6 9496 69 01		  adc #1
     7 9498 C5 FE		  cmp FIFO_Tail
     8 949A D0 03		  bne storeInFIFO
     9 949C 20 71 8E		  jsr FIFO_Flush
    11 949F			storeInFIFO:
    12 949F A4 FD		  ldy FIFO_Head
    13 94A1 A5 FF		  lda FIFO_Byte
    14 94A3 99 00 06		  sta FIFO_ADDR,y
    15 94A6 E6 FD		  inc FIFO_Head
    16 94A8			exitWrite:
Source: MIDICar Player.a65
  2104 					.endl
  2105
  2106 				; --- WhileProlog
  2107 94A8 4C D1 94			jmp l_04FB
  2108 94AB			l_04FC
  2109
  2110 				; optimize FAIL ('m@INLINE', events.inc), line = 35
  2111
  2112 94AB				.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
  2113 94AB				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 94AB A0 00			ldy #$00
     5 94AD B1 E1			lda (_PTR),y
     6 94AF 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 94B1 E6 E1			inc _ADR
    11 94B3 D0 02			sne
    12 94B5 E6 E2			inc _ADR+1
    16 94B7 20 B4 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2114 					.endl
  2115
  2116 				; optimize FAIL ('m@INLINE', events.inc), line = 37
  2117
  2118 94BA				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2119 94BA				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 94BA A5 FD		  lda FIFO_Head
     5 94BC 18			  clc
     6 94BD 69 01		  adc #1
     7 94BF C5 FE		  cmp FIFO_Tail
     8 94C1 D0 03		  bne storeInFIFO
     9 94C3 20 71 8E		  jsr FIFO_Flush
    11 94C6			storeInFIFO:
    12 94C6 A4 FD		  ldy FIFO_Head
    13 94C8 A5 FF		  lda FIFO_Byte
    14 94CA 99 00 06		  sta FIFO_ADDR,y
    15 94CD E6 FD		  inc FIFO_Head
    16 94CF			exitWrite:
Source: MIDICar Player.a65
  2120 					.endl
  2121
  2122 				; optimize FAIL (0, events.inc), line = 41
  2123
  2124 94CF C6 F6			dec _TMP
  2125 94D1			l_04FB
  2126
  2127 				; optimize OK (events.inc), line = 33
  2128
  2129 94D1 A5 F6			lda _TMP
  2130 94D3 D0 D6			jne l_04FC
  2131 94D5			@exit
  2132 					.ifdef @new
  2133 					lda <@VarData
  2134 					sta :ztmp
  2135 					lda >@VarData
  2136 					ldy #@VarDataSize-1
  2137 					jmp @FreeMem
  2138 					els
  2139 94D5 60				rts						; ret
  2140 					eif
  2141 				.endl
  2142
  2143 94D6			.local	EVENTMETA					; PROCEDURE
  2144
  2145 				; optimize FAIL ('m@INLINE', events.inc), line = 53
  2146
  2147 94D6				.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
  2148 94D6				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 94D6 A0 00			ldy #$00
     5 94D8 B1 E1			lda (_PTR),y
     6 94DA 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 94DC E6 E1			inc _ADR
    11 94DE D0 02			sne
    12 94E0 E6 E2			inc _ADR+1
    16 94E2 20 B4 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2149 					.endl
  2150
  2151 				; optimize FAIL ('READVARL', events.inc), line = 54
  2152
  2153 94E5 20 F5 92			jsr READVARL
  2154
  2155 				; optimize OK (events.inc), line = 59
  2156
  2157 94E8 A5 FF			lda MIDI_FIFO.FIFO_BYTE
  2158 94EA C9 2F			cmp #$2F
  2159 94EC D0 09			jne l_0526
  2160
  2161 				; optimize OK (events.inc), line = 61
  2162
  2163 94EE A5 E7			lda _STATUS
  2164 94F0 09 40			ora #$40
  2165 94F2 85 E7			sta _STATUS
  2166 94F4 4C 48 95			jmp l_053A
  2167 94F7			l_0526
  2168
  2169 				; optimize OK (events.inc), line = 63
  2170
  2171 94F7 A5 FF			lda MIDI_FIFO.FIFO_BYTE
  2172 94F9 C9 51			cmp #$51
  2173 94FB D0 39			jne l_054C
  2174
  2175 				; optimize FAIL ('READ24', events.inc), line = 65
  2176
  2177 94FD 20 AE 93			jsr READ24
  2178
  2179 				; optimize OK (events.inc), line = 66
  2180
  2181 9500 A5 F9			lda _DELTA+3
  2182 9502 CD 89 9F			cmp MS_PER_QNOTE+3
  2183 9505 D0 15			bne @+
  2184 9507 A5 F8			lda _DELTA+2
  2185 9509 CD 88 9F			cmp MS_PER_QNOTE+2
  2186 950C D0 0E			bne @+
  2187 950E A5 F7			lda _DELTA+1
  2188 9510 CD 87 9F			cmp MS_PER_QNOTE+1
  2189 9513 D0 07			bne @+
  2190 9515 A5 F6			lda _DELTA
  2191 9517 CD 86 9F			cmp MS_PER_QNOTE
  2192 951A F0 17			jeq l_055E
  2193 				@
  2194
  2195 				; optimize OK (events.inc), line = 68
  2196
  2197 951C A5 F6			lda _DELTA
  2198 951E 8D 86 9F			sta MS_PER_QNOTE
  2199 9521 A5 F7			lda _DELTA+1
  2200 9523 8D 87 9F			sta MS_PER_QNOTE+1
  2201 9526 A5 F8			lda _DELTA+2
  2202 9528 8D 88 9F			sta MS_PER_QNOTE+2
  2203 952B A5 F9			lda _DELTA+3
  2204 952D 8D 89 9F			sta MS_PER_QNOTE+3
  2205
  2206 				; optimize FAIL ('SETTEMPO', events.inc), line = 69
  2207
  2208 9530 20 CA 96			jsr SETTEMPO
  2209 9533			l_055E
  2210 9533 4C 48 95			jmp l_056F
  2211 9536			l_054C
  2212
  2213 				; --- WhileProlog
  2214 9536 4C 44 95			jmp l_0571
  2215 9539			l_0572
  2216
  2217 				; optimize FAIL (0, events.inc), line = 85
  2218
  2219 9539 C6 F6			dec _TMP
  2220
  2221 				; optimize FAIL (0, events.inc), line = 86
  2222
  2223 953B E6 E1			inc _ADR
  2224 953D D0 02			sne
  2225 953F E6 E2			inc _ADR+1
  2226
  2227 				; optimize FAIL ('MEMBOUNDCHECK', events.inc), line = 87
  2228
  2229 9541 20 B4 8E			jsr MEMBOUNDCHECK
  2230 9544			l_0571
  2231
  2232 				; optimize OK (events.inc), line = 83
  2233
  2234 9544 A5 F6			lda _TMP
  2235 9546 D0 F1			jne l_0572
  2236 9548			l_056F
  2237 9548			l_053A
  2238 9548			@exit
  2239 					.ifdef @new
  2240 					lda <@VarData
  2241 					sta :ztmp
  2242 					lda >@VarData
  2243 					ldy #@VarDataSize-1
  2244 					jmp @FreeMem
  2245 					els
  2246 9548 60				rts						; ret
  2247 					eif
  2248 				.endl
  2249 9549			l_04B2
  2250
  2251 				; optimize OK (processtrack.inc), line = 33
  2252
  2253 9549 A5 F5			lda _TIMERSTATUS
  2254 954B 49 80			eor #$80
  2255 954D 85 F5			sta _TIMERSTATUS
  2256
  2257 				; optimize OK (processtrack.inc), line = 34
  2258
  2259 954F A5 F0			lda _TOTALTICKS
  2260 9551 38 E5 E3			sub _TRACKTIME
  2261 9554 8D 92 9F			sta DTM
  2262 9557 A5 F1			lda _TOTALTICKS+1
  2263 9559 E5 E4			sbc _TRACKTIME+1
  2264 955B 8D 93 9F			sta DTM+1
  2265
  2266 				; -------------------  ASM Block 00000077  -------------------
  2267
  2268 				 ldy _bank \ lda $100,y \ sta PORTB 
  2268 955E A4 E0		 LDY _BANK 
  2268 9560 B9 00 01		 LDA $100,Y 
  2268 9563 8D 01 D3		 STA PORTB 
  2269 				; optimize OK (processtrack.inc), line = 37
  2270
  2271 9566 A9 00			lda #$00
  2272 9568 85 F6			sta _DELTA
  2273 956A 85 F7			sta _DELTA+1
  2274 956C 85 F8			sta _DELTA+2
  2275 956E 85 F9			sta _DELTA+3
  2276
  2277 				; --- RepeatUntilProlog
  2278 9570			l_059F
  2279
  2280 				; optimize OK (processtrack.inc), line = 39
  2281
  2282 9570 A5 E7			lda _STATUS
  2283 9572 30 49			jmi l_05B5
  2284
  2285 				; optimize FAIL ('READVARL', processtrack.inc), line = 41
  2286
  2287 9574 20 F5 92			jsr READVARL
  2288
  2289 				; optimize OK (processtrack.inc), line = 42
  2290
  2291 9577 A5 F9			lda _DELTA+3
  2292 9579 30 3F			jmi l_05C7
  2293 957B 05 F8			ora _DELTA+2
  2294 957D 05 F7			ora _DELTA+1
  2295 957F 05 F6			ora _DELTA
  2296 9581 F0 37			jeq l_05C7
  2297
  2298 				; optimize OK (processtrack.inc), line = 44
  2299
  2300 9583 A5 F0			lda _TOTALTICKS
  2301 9585 18 65 F6			add _DELTA
  2302 9588 85 9D			sta :STACKORIGIN+9
  2303 958A A5 F1			lda _TOTALTICKS+1
  2304 958C 65 F7			adc _DELTA+1
  2305 958E 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2306 9590 A5 F2			lda _TOTALTICKS+2
  2307 9592 65 F8			adc _DELTA+2
  2308 9594 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
  2309 9596 A5 F3			lda _TOTALTICKS+3
  2310 9598 65 F9			adc _DELTA+3
  2311 959A 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
  2312 959C A5 9D			lda :STACKORIGIN+9
  2313 959E 38 ED 92 9F			sub DTM
  2314 95A2 85 E3			sta _TRACKTIME
  2315 95A4 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2316 95A6 ED 93 9F			sbc DTM+1
  2317 95A9 85 E4			sta _TRACKTIME+1
  2318 95AB A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
  2319 95AD E9 00			sbc #$00
  2320 95AF 85 E5			sta _TRACKTIME+2
  2321 95B1 A5 CD			lda :STACKORIGIN+STACKWIDTH*3+9
  2322 95B3 E9 00			sbc #$00
  2323 95B5 85 E6			sta _TRACKTIME+3
  2324 95B7 4C 1E 96			jmp b_059F					; break
  2325 95BA			l_05C7
  2326 95BA 4C C3 95			jmp l_05E0
  2327 95BD			l_05B5
  2328
  2329 				; optimize OK (processtrack.inc), line = 49
  2330
  2331 95BD A5 E7			lda _STATUS
  2332 95BF 29 7F			and #$7F
  2333 95C1 85 E7			sta _STATUS
  2334 95C3			l_05E0
  2335
  2336 				; optimize OK (processtrack.inc), line = 51
  2337
  2338 95C3 A0 00			ldy #$00
  2339 95C5 B1 E1			lda (_PTR),y
  2340 95C7 10 13			jpl l_0603
  2341
  2342 				; optimize FAIL ('m@INLINE', processtrack.inc), line = 53
  2343
  2344 95C9				.local READB
  2345 95C9				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 95C9 A0 00			ldy #$00
     5 95CB B1 E1			lda (_PTR),y
     6 95CD 85 F6			sta _TMP
    10 95CF E6 E1			inc _ADR
    11 95D1 D0 02			sne
    12 95D3 E6 E2			inc _ADR+1
    16 95D5 20 B4 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2346 					.endl
  2347 95D8 A5 F6			lda _TMP
  2348 95DA 85 E8			sta _EVENT
  2349 95DC			l_0603
  2350
  2351 				; optimize OK (processtrack.inc), line = 56
  2352
  2353 95DC A9 BF			lda #$BF
  2354 95DE C5 E8			cmp _EVENT
  2355 95E0 90 06			jcc l_061F
  2356
  2357 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 58
  2358
  2359 95E2 20 EC 93			jsr EVENTMIDI3
  2360 95E5 4C 15 96			jmp l_062A
  2361 95E8			l_061F
  2362 95E8 A9 DF			lda #$DF
  2363 95EA C5 E8			cmp _EVENT
  2364 95EC 90 06			jcc l_063C
  2365
  2366 				; optimize FAIL ('EVENTMIDI2', processtrack.inc), line = 60
  2367
  2368 95EE 20 4E 94			jsr EVENTMIDI2
  2369 95F1 4C 15 96			jmp l_0647
  2370 95F4			l_063C
  2371 95F4 A9 EF			lda #$EF
  2372 95F6 C5 E8			cmp _EVENT
  2373 95F8 90 06			jcc l_0659
  2374
  2375 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 62
  2376
  2377 95FA 20 EC 93			jsr EVENTMIDI3
  2378 95FD 4C 15 96			jmp l_0664
  2379 9600			l_0659
  2380 9600 A9 F7			lda #$F7
  2381 9602 C5 E8			cmp _EVENT
  2382 9604 90 06			jcc l_0676
  2383
  2384 				; optimize FAIL ('EVENTSYSEX', processtrack.inc), line = 64
  2385
  2386 9606 20 8C 94			jsr EVENTSYSEX
  2387 9609 4C 15 96			jmp l_0681
  2388 960C			l_0676
  2389 960C A5 E8			lda _EVENT
  2390 960E C9 FF			cmp #$FF
  2391 9610 D0 03			jne l_0693
  2392
  2393 				; optimize FAIL ('EVENTMETA', processtrack.inc), line = 65
  2394
  2395 9612 20 D6 94			jsr EVENTMETA
  2396 9615			l_0693
  2397 9615			l_0681
  2398 9615			l_0664
  2399 9615			l_0647
  2400 9615			l_062A
  2401
  2402 				; optimize OK (processtrack.inc), line = 67
  2403
  2404 9615 A5 E7			lda _STATUS
  2405 9617 29 40			and #$40
  2406 9619 D0 03 4C 70 95		jeq l_059F
  2407 961E			b_059F
  2408
  2409 				; optimize OK (processtrack.inc), line = 69
  2410
  2411 961E A5 E7			lda _STATUS
  2412 9620 09 80			ora #$80
  2413 9622 85 E7			sta _STATUS
  2414
  2415 				; optimize OK (processtrack.inc), line = 70
  2416
  2417 9624 A5 F5			lda _TIMERSTATUS
  2418 9626 49 80			eor #$80
  2419 9628 85 F5			sta _TIMERSTATUS
  2420
  2421 				; ------------------------------------------------------------
  2422
  2423 962A			@exit
  2424 					.ifdef @new
  2425 					lda <@VarData
  2426 					sta :ztmp
  2427 					lda >@VarData
  2428 					ldy #@VarDataSize-1
  2429 					jmp @FreeMem
  2430 					els
  2431 962A 60				rts						; ret
  2432 					eif
  2433 				.endl
  2434
  2435 962B			.local	PROCESSMIDI					; PROCEDURE
  2436
  2437 				; optimize OK (processmidi.inc), line = 7
  2438
  2439 962B AD 94 9F			lda CTRK
  2440 962E CD 83 9F			cmp TOTALTRACKS
  2441 9631 D0 1A			jne l_06D4
  2442
  2443 				; optimize OK (processmidi.inc), line = 9
  2444
  2445 9633 A9 01			lda #$01
  2446 9635 8D 94 9F			sta CTRK
  2447
  2448 				; optimize OK (processmidi.inc), line = 10
  2449
  2450 9638 AD D9 98			lda MIDTRACKS
  2451 963B 8D 8C 9F			sta CURTRACKPTR
  2452 963E AD DA 98			lda MIDTRACKS+1
  2453 9641 8D 8D 9F			sta CURTRACKPTR+1
  2454
  2455 				; optimize OK (processmidi.inc), line = 11
  2456
  2457 9644 AD 83 9F			lda TOTALTRACKS
  2458 9647 8D 95 9F			sta PLAYINGTRACKS
  2459 964A 4C 5E 96			jmp l_06ED
  2460 964D			l_06D4
  2461
  2462 				; optimize FAIL (0, processmidi.inc), line = 15
  2463
  2464 964D EE 94 9F			inc CTRK
  2465
  2466 				; optimize OK (processmidi.inc), line = 16
  2467
  2468 9650 AD 8C 9F			lda CURTRACKPTR
  2469 9653 18 69 09			add #$09
  2470 9656 8D 8C 9F			sta CURTRACKPTR
  2471 9659 90 03			scc
  2472 965B EE 8D 9F			inc CURTRACKPTR+1
  2473 965E			l_06ED
  2474
  2475 				; optimize OK (processmidi.inc), line = 19
  2476
  2477 965E AD 8C 9F			lda CURTRACKPTR
  2478 9661 85 82			sta :bp2
  2479 9663 AD 8D 9F			lda CURTRACKPTR+1
  2480 9666 85 83			sta :bp2+1
  2481 9668 A0 08			ldy #$08
  2482 966A B1 82 99 E0 00 88 + 	mva:rpl (:bp2),y $00E0,y-
  2483
  2484 				; optimize OK (processmidi.inc), line = 21
  2485
  2486 9672 A5 E7			lda _STATUS
  2487 9674 29 40			and #$40
  2488 9676 D0 31			jne l_070D
  2489
  2490 				; optimize OK (processmidi.inc), line = 23
  2491
  2492 9678				.LOCAL
  2493 9678 A5 F3			lda _TOTALTICKS+3
  2494 967A 38 E5 E6			sub _TRACKTIME+3
  2495 967D D0 1C			bne L4
  2496 967F A5 F2			lda _TOTALTICKS+2
  2497 9681 C5 E5			cmp _TRACKTIME+2
  2498 9683 D0 0A			bne L1
  2499 9685 A5 F1			lda _TOTALTICKS+1
  2500 9687 C5 E4			cmp _TRACKTIME+1
  2501 9689 D0 04			bne L1
  2502 968B A5 F0			lda _TOTALTICKS
  2503 968D C5 E3			cmp _TRACKTIME
  2504 968F F0 10		L1	beq L5
  2505 9691 B0 04			bcs L3
  2506 9693 A9 FF			lda #$FF
  2507 9695 D0 0A			bne L5
  2508 9697 A9 01		L3	lda #$01
  2509 9699 D0 06			bne L5
  2510 969B 50 04		L4	bvc L5
  2511 969D 49 FF			eor #$FF
  2512 969F 09 01			ora #$01
  2513 96A1			L5
  2514 					.ENDL
  2515 96A1 30 03			jmi l_071E
  2516 96A3 20 F2 92			jsr PROCESSTRACK
  2517 96A6			l_071E
  2518 96A6 4C AC 96			jmp l_072B
  2519 96A9			l_070D
  2520
  2521 				; optimize FAIL (0, processmidi.inc), line = 26
  2522
  2523 96A9 CE 95 9F			dec PLAYINGTRACKS
  2524 96AC			l_072B
  2525
  2526 				; optimize OK (processmidi.inc), line = 28
  2527
  2528 96AC A9 E0			lda #$E0
  2529 96AE 85 88			sta SYSTEM.MOVE_00F2.SOURCE
  2530 96B0 A9 00			lda #$00
  2531 96B2 85 89			sta SYSTEM.MOVE_00F2.SOURCE+1
  2532 96B4 AD 8C 9F			lda CURTRACKPTR
  2533 96B7 85 8C			sta SYSTEM.MOVE_00F2.DEST
  2534 96B9 AD 8D 9F			lda CURTRACKPTR+1
  2535 96BC 85 8D			sta SYSTEM.MOVE_00F2.DEST+1
  2536 96BE A9 09			lda #$09
  2537 96C0 85 84			sta SYSTEM.MOVE_00F2.COUNT
  2538 96C2 A9 00			lda #$00
  2539 96C4 85 85			sta SYSTEM.MOVE_00F2.COUNT+1
  2540 96C6				.local +MAIN.SYSTEM.MOVE_00F2
  2541 96C6				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00F2.M@INLINE [Source: MIDICar Player.a65]
     4 96C6 20 27 84			jsr @move
Source: MIDICar Player.a65
  2542 					.endl
  2543 96C9			@exit
  2544 					.ifdef @new
  2545 					lda <@VarData
  2546 					sta :ztmp
  2547 					lda >@VarData
  2548 					ldy #@VarDataSize-1
  2549 					jmp @FreeMem
  2550 					els
  2551 96C9 60				rts						; ret
  2552 					eif
  2553 				.endl
  2554
  2555 96CA			.local	SETTEMPO					; PROCEDURE
  2556
  2557 				; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 10
  2558
  2559 96CA E8				inx
  2560 96CB AD 86 9F 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  2561 96D0 AD 87 9F 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  2562 96D5 AD 88 9F 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  2563 96DA AD 89 9F 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  2564 96DF E8				inx
  2565 96E0 AD 84 9F 95 94		mva TICKDIV :STACKORIGIN,x
  2566 96E5 AD 85 9F 95 A4		mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
  2567 96EA A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  2568 96EE A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  2569 96F2 20 D6 84			jsr divmulINT.DIV
  2570 96F5 CA				dex
  2571 96F6 B5 94			lda :STACKORIGIN,x
  2572 96F8 8D C3 9F			sta _FREQ
  2573 96FB B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2574 96FD 8D C4 9F			sta _FREQ+1
  2575 9700 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2576 9702 8D C5 9F			sta _FREQ+2
  2577 9705 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2578 9707 8D C6 9F			sta _FREQ+3
  2579
  2580 				; optimize FAIL ('@I2F_m', settempo.inc), line = 11
  2581
  2582 970A AD C3 9F 95 94		mva _FREQ :STACKORIGIN,x
  2583 970F AD C4 9F 95 A4		mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2584 9714 AD C5 9F 95 B4		mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2585 9719 AD C6 9F 95 C4		mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2586 971E E8				inx
  2587 971F A9 00 95 94			mva #$00 :STACKORIGIN,x
  2588 9723 A9 24 95 A4			mva #$24 :STACKORIGIN+STACKWIDTH,x
  2589 9727 A9 74 95 B4			mva #$74 :STACKORIGIN+STACKWIDTH*2,x
  2590 972B A9 49 95 C4			mva #$49 :STACKORIGIN+STACKWIDTH*3,x
  2591 972F 20 A8 8A			jsr @I2F_m
  2592 9732 20 6A 89			jsr @FDIV
  2593 9735 CA				dex
  2594 9736 B5 94			lda :STACKORIGIN,x
  2595 9738 8D BF 9F			sta FREQ
  2596 973B B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2597 973D 8D C0 9F			sta FREQ+1
  2598 9740 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2599 9742 8D C1 9F			sta FREQ+2
  2600 9745 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2601 9747 8D C2 9F			sta FREQ+3
  2602
  2603 				; optimize FAIL ('@FDIV', settempo.inc), line = 12
  2604
  2605 974A A9 00 95 94			mva #$00 :STACKORIGIN,x
  2606 974E A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2607 9752 A9 80 95 B4			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  2608 9756 A9 3F 95 C4			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  2609 975A E8				inx
  2610 975B AD BF 9F 95 94		mva FREQ :STACKORIGIN,x
  2611 9760 AD C0 9F 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2612 9765 AD C1 9F 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2613 976A AD C2 9F 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2614 976F 20 6A 89			jsr @FDIV
  2615 9772 CA				dex
  2616 9773 B5 94			lda :STACKORIGIN,x
  2617 9775 8D BF 9F			sta FREQ
  2618 9778 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2619 977A 8D C0 9F			sta FREQ+1
  2620 977D B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2621 977F 8D C1 9F			sta FREQ+2
  2622 9782 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2623 9784 8D C2 9F			sta FREQ+3
  2624
  2625 				; optimize FAIL ('@FDIV', settempo.inc), line = 15
  2626
  2627 9787 A9 F5 95 94			mva #$F5 :STACKORIGIN,x
  2628 978B A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  2629 978F A9 7A 95 B4			mva #$7A :STACKORIGIN+STACKWIDTH*2,x
  2630 9793 A9 43 95 C4			mva #$43 :STACKORIGIN+STACKWIDTH*3,x
  2631 9797 E8				inx
  2632 9798 AD BF 9F 95 94		mva FREQ :STACKORIGIN,x
  2633 979D AD C0 9F 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2634 97A2 AD C1 9F 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2635 97A7 AD C2 9F 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2636 97AC 20 6A 89			jsr @FDIV
  2637 97AF CA				dex
  2638 97B0 B5 94			lda :STACKORIGIN,x
  2639 97B2 8D C8 9F			sta RATIO
  2640 97B5 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2641 97B7 8D C9 9F			sta RATIO+1
  2642 97BA B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2643 97BC 8D CA 9F			sta RATIO+2
  2644 97BF B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2645 97C1 8D CB 9F			sta RATIO+3
  2646
  2647 				; optimize FAIL ('@F2I', settempo.inc), line = 16
  2648
  2649 97C4 A9 01 95 94			mva #$01 :STACKORIGIN,x
  2650 97C8 E8				inx
  2651 97C9 AD C8 9F 95 94		mva RATIO :STACKORIGIN,x
  2652 97CE AD C9 9F 95 A4		mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
  2653 97D3 AD CA 9F 95 B4		mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
  2654 97D8 AD CB 9F 95 C4		mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
  2655 97DD 20 F9 89			jsr @F2I
  2656 97E0 A9 00 95 A3			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  2657 97E4 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  2658 97E8 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  2659 97EC B5 93			lda :STACKORIGIN-1,x
  2660 97EE 18 75 94			add :STACKORIGIN,x
  2661 97F1 8D CC 9F			sta _RATIO
  2662 97F4 CA				dex
  2663 97F5 CA				dex
  2664
  2665 				; optimize OK (settempo.inc), line = 17
  2666
  2667 97F6 AD CC 9F			lda _RATIO
  2668 97F9 C9 10			cmp #$10
  2669 97FB 90 12			jcc l_077E
  2670 97FD A9 00			lda #$00
  2671 97FF 8D C8 9F			sta RATIO
  2672 9802 8D C9 9F			sta RATIO+1
  2673 9805 A9 70			lda #$70
  2674 9807 8D CA 9F			sta RATIO+2
  2675 980A A9 41			lda #$41
  2676 980C 8D CB 9F			sta RATIO+3
  2677 980F			l_077E
  2678
  2679 				; optimize OK (settempo.inc), line = 20
  2680
  2681 980F A5 F5			lda _TIMERSTATUS
  2682 9811 29 C0			and #$C0
  2683 9813 0D CC 9F			ora _RATIO
  2684 9816 85 F5			sta _TIMERSTATUS
  2685
  2686 				; optimize FAIL ('@I2F', settempo.inc), line = 23
  2687
  2688 9818 E8				inx
  2689 9819 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2690 981D A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  2691 9821 E8				inx
  2692 9822 AD BF 9F 95 94		mva FREQ :STACKORIGIN,x
  2693 9827 AD C0 9F 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2694 982C AD C1 9F 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2695 9831 AD C2 9F 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2696 9836 E8				inx
  2697 9837 AD CC 9F 95 94		mva _RATIO :STACKORIGIN,x
  2698 983C A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2699 9840 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  2700 9844 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  2701 9848 20 83 8A			jsr @I2F
  2702 984B 20 B3 88			jsr @FMUL
  2703 984E CA				dex
  2704 984F A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  2705 9853 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  2706 9857 20 A8 8A			jsr @I2F_m
  2707 985A 20 6A 89			jsr @FDIV
  2708 985D CA				dex
  2709 985E 20 D3 86			jsr @FROUND
  2710 9861 20 F9 89			jsr @F2I
  2711 9864 B5 94			lda :STACKORIGIN,x
  2712 9866 8D C7 9F			sta FDIV
  2713 9869 CA				dex
  2714
  2715 				; optimize OK (settempo.inc), line = 29
  2716
  2717 986A 78				sei
  2718 986B A9 8E 8D 10 02		mva <INT_TIMER VTIMR1
  2719 9870 A9 8E 8D 11 02		mva >INT_TIMER VTIMR1+1
  2720 9875 A9 00			lda #$00
  2721 9877 A0 03			ldy #$03
  2722 9879 8D 08 D2			sta AUDCTL
  2723 987C 8D 01 D2			sta AUDC1
  2724 987F 8C 0F D2			sty SKCTL
  2725 9882 8D 08 D2			sta AUDCTL
  2726 9885 AD C7 9F 8D 00 D2		mva FDIV AUDF1
  2727 988B A5 10			lda irqens
  2728 988D 09 01			ora #$01
  2729 988F 85 10			sta irqens
  2730 9891 8D 0E D2			sta irqen
  2731 9894 8D 09 D2			sta stimer
  2732 9897 58				cli
  2733
  2734 				; ------------------------------------------------------------
  2735
  2736 = 9FBF			FREQ	= DATAORIGIN+$0187
  2737 = 9FC3			_FREQ	= DATAORIGIN+$018B
  2738 = 9FC7			FDIV	= DATAORIGIN+$018F
  2739 = 9FC8			RATIO	= DATAORIGIN+$0190
  2740 = 9FCC			_RATIO	= DATAORIGIN+$0194
  2741
  2742 = 9FBF			@VarData	= FREQ
  2743 = 000E			@VarDataSize	= 14
  2744
  2745 9898			@exit
  2746 					.ifdef @new
  2747 					lda <@VarData
  2748 					sta :ztmp
  2749 					lda >@VarData
  2750 					ldy #@VarDataSize-1
  2751 					jmp @FreeMem
  2752 					els
  2753 9898 60				rts						; ret
  2754 					eif
  2755 				.endl
  2756
  2757 9899			.local	NULLLOADPRCS					; PROCEDURE
  2758
  2759 9899			@exit
  2760 					.ifdef @new
  2761 					lda <@VarData
  2762 					sta :ztmp
  2763 					lda >@VarData
  2764 					ldy #@VarDataSize-1
  2765 					jmp @FreeMem
  2766 					els
  2767 9899 60				rts						; ret
  2768 					eif
  2769 				.endl
  2770
  2771 				; ------------------------------------------------------------
  2772 				; ------------------------------------------------------------
  2773 989A			@UnitInit
  2774
  2775 				; optimize OK (MIDFILES), line = 79
  2776
  2777 989A A9 00			lda #$00
  2778 989C 8D 8A 9F			sta OLDTIMERVEC
  2779 989F 8D 8B 9F			sta OLDTIMERVEC+1
  2780
  2781 				; optimize OK (MIDFILES), line = 80
  2782
  2783 98A2 A9 99			lda <NULLLOADPRCS
  2784 98A4 8D 96 9F			sta LOADPROCESS
  2785 98A7 A9 98			lda >NULLLOADPRCS
  2786 98A9 8D 97 9F			sta LOADPROCESS+1
  2787
  2788 				; optimize OK (MIDFILES), line = 81
  2789
  2790 98AC A9 80			lda #$80
  2791 98AE 8D 84 9F			sta TICKDIV
  2792 98B1 A9 01			lda #$01
  2793 98B3 8D 85 9F			sta TICKDIV+1
  2794
  2795 				; optimize OK (MIDFILES), line = 82
  2796
  2797 98B6 A9 20			lda #$20
  2798 98B8 8D 86 9F			sta MS_PER_QNOTE
  2799 98BB A9 A1			lda #$A1
  2800 98BD 8D 87 9F			sta MS_PER_QNOTE+1
  2801 98C0 A9 07			lda #$07
  2802 98C2 8D 88 9F			sta MS_PER_QNOTE+2
  2803 98C5 A9 00			lda #$00
  2804 98C7 8D 89 9F			sta MS_PER_QNOTE+3
  2805
  2806 				; optimize OK (MIDFILES), line = 89
  2807
  2808 98CA 85 F5			sta _TIMERSTATUS
  2809
  2810 98CC AD 10 02			lda VTIMR1
  2811 98CF 8D 8A 9F			sta OLDTIMERVEC
  2812 98D2 AD 11 02			lda VTIMR1+1
  2813 98D5 8D 8B 9F			sta OLDTIMERVEC+1
  2814
  2815 98D8 60				rts
  2816
  2817 				; ------------------------------------------------------------
  2818
  2819 = 0080			F_COUNTER	= $80
  2820 = 0040			F_TICK	= $40
  2821 = 00C0			F_FLAGS	= $C0
  2822 = 000F			F_RATIO	= $0F
  2823 = 0080			F_SKIPDELTA	= $80
  2824 = 0040			F_STOP	= $40
  2825 = 00E0			_TRKREGS	= $E0
  2826 = 0000			MID_0	= $00
  2827 = 0001			MID_1	= $01
  2828 = 0064			ERR_UNSUPPORTED_FORMAT	= $64
  2829 = 0065			ERR_NOT_ENOUGHT_MEMORY	= $65
  2830 = 6468544D		TAG_MTHD	= $6468544D
  2831 = 6B72544D		TAG_MTRK	= $6B72544D
  2832 = 00F0			_TOTALTICKS	= $F0
  2833 = 00F4			_SUBCNT	= $F4
  2834 = 00F5			_TIMERSTATUS	= $F5
  2835 = 00F6			_DELTA	= $F6
  2836 = 00F6			_TMP	= $F6
  2837 = 00E0			_BANK	= $E0
  2838 = 00E1			_PTR	= $E1
  2839 = 00E1			_ADR	= $E1
  2840 = 00E3			_TRACKTIME	= $E3
  2841 = 00E7			_STATUS	= $E7
  2842 = 00E8			_EVENT	= $E8
  2843 = 9F7F			MIDDATA	= DATAORIGIN+$0147
  2844 = 9F81			adr.MIDTRACKS	= [DATAORIGIN+$0149] .array [1]
  2845 98D9			.var MIDTRACKS	= adr.MIDTRACKS .word
  2846 = 9F82			FORMAT	= DATAORIGIN+$014A
  2847 = 9F83			TOTALTRACKS	= DATAORIGIN+$014B
  2848 = 9F84			TICKDIV	= DATAORIGIN+$014C
  2849 = 9F86			MS_PER_QNOTE	= DATAORIGIN+$014E
  2850 = 9F8A			OLDTIMERVEC	= DATAORIGIN+$0152
  2851 = 9F8C			CURTRACKPTR	= DATAORIGIN+$0154
  2852 = 9F8E			DELTATIME	= DATAORIGIN+$0156
  2853 = 9F92			DTM	= DATAORIGIN+$015A
  2854 = 9F94			CTRK	= DATAORIGIN+$015C
  2855 = 9F95			PLAYINGTRACKS	= DATAORIGIN+$015D
  2856 = 9F96			LOADPROCESS	= DATAORIGIN+$015E
  2857 = 0600			adr.RBUF	= $0600
  2858 98D9			.var RBUF	= adr.RBUF .word
  2859
  2860 = 98D9 81 9F		MIDTRACKS
  2860 = 98DB 00 06		RBUF
  2860 				.endl							; UNIT MIDFILES
  2861
  2862 				; ------------------------------------------------------------
  2863
  2864 98DD			.local	MISC						; UNIT
  2865
  2866 98DD			.local	DETECTMEM					; FUNCTION | ASSEMBLER
  2867
  2868 				; -------------------  ASM Block 00000085  -------------------
  2869
  2870 98DD 8A 48			txa:pha
  2871
  2872 = 0400			bsav	= @buf
  2873
  2874 = 4000			ext_b	= $4000		;cokolwiek z zakresu $4000-$7FFF
  2875
  2876 98DF A0 00			ldy #0
  2877 98E1 B9 F2 98 99 00 06	mov	mva copy,y detect,y
  2878 98E7 C8				iny
  2879 98E8 C0 8C			cpy #.sizeof(detect)
  2880 98EA D0 F5			bne mov
  2881
  2882 98EC 20 00 06			jsr detect
  2883
  2884 98EF 4C 7E 99			jmp stop
  2885
  2886 98F2			copy
  2887
  2888 0600			.local	detect,$0600
  2889
  2890 0600 AD 01 D3			lda portb
  2891 0603 48				pha
  2892
  2893 0604 AD 0B D4 D0 FB		lda:rne vcount
  2894
  2895 				;	lda #$ff
  2896 				;	sta portb
  2897
  2898 0609 AD 00 40			lda ext_b
  2899 060C 48				pha
  2900
  2901 060D A2 0F			ldx #$0f	;zapamiętanie bajtów ext (z 16 bloków po 64k)
  2902 060F 20 7F 06		_p0	jsr setpb
  2903 0612 AD 00 40			lda ext_b
  2904 0615 9D 00 04			sta bsav,x
  2905 0618 CA				dex
  2906 0619 10 F4			bpl _p0
  2907
  2908 061B A2 0F			ldx #$0f	;wyzerowanie ich (w oddzielnej pętli, bo nie wiadomo
  2909 061D 20 7F 06		_p1	jsr setpb	;które kombinacje bitów PORTB wybierają te same banki)
  2910 0620 A9 00			lda #$00
  2911 0622 8D 00 40			sta ext_b
  2912 0625 CA				dex
  2913 0626 10 F5			bpl _p1
  2914
  2915 0628 8E 01 D3			stx portb	;eliminacja pamięci podstawowej
  2916 062B 8E 00 40			stx ext_b
  2917 062E 86 00			stx $00		;niezbędne dla niektórych rozszerzeń do 256k
  2918
  2919 0630 A0 00			ldy #$00	;pętla zliczająca bloki 64k
  2920 0632 A2 0F			ldx #$0f
  2921 0634 20 7F 06		_p2	jsr setpb
  2922 0637 AD 00 40			lda ext_b	;jeśli ext_b jest różne od zera, blok 64k już zliczony
  2923 063A D0 23			bne _n2
  2924
  2925 063C CE 00 40			dec ext_b	;w przeciwnym wypadku zaznacz jako zliczony
  2926
  2927 063F AD 00 40			lda ext_b	;sprawdz, czy sie zaznaczyl; jesli nie -> cos nie tak ze sprzetem
  2928 0642 10 1B			bpl _n2
  2929
  2930 0644 AD 01 D3			lda portb	;wpisz wartość PORTB do tablicy dla banku 0
  2931
  2932 0647 29 FE			and #$fe
  2933
  2934 0649 99 01 01			sta adr.banks,y
  2935 064C 49 04			eor #%00000100	;uzupełnij wartości dla banków 1, 2, 3
  2936 064E 99 02 01			sta adr.banks+1,y
  2937 0651 49 0C			eor #%00001100
  2938 0653 99 03 01			sta adr.banks+2,y
  2939 0656 49 04			eor #%00000100
  2940 0658 99 04 01			sta adr.banks+3,y
  2941 065B C8				iny
  2942 065C C8				iny
  2943 065D C8				iny
  2944 065E C8				iny
  2945
  2946 065F CA			_n2	dex
  2947 0660 10 D2			bpl _p2
  2948
  2949 0662 A2 0F			ldx #$0f	;przywrócenie zawartości ext
  2950 0664 20 7F 06		_p3	jsr setpb
  2951 0667 BD 00 04			lda bsav,x
  2952 066A 8D 00 40			sta ext_b
  2953 066D CA				dex
  2954 066E 10 F4			bpl _p3
  2955
  2956 0670 8E 01 D3			stx portb	;X=$FF
  2957
  2958 0673 68				pla
  2959 0674 8D 00 40			sta ext_b
  2960
  2961 0677 68				pla
  2962 0678 8D 01 D3			sta portb
  2963
  2964 067B 8C CD 9F			sty Result
  2965
  2966 067E 60				rts
  2967
  2968 				; podprogramy
  2969 067F 8A			setpb	txa		;zmiana kolejności bitów: %0000dcba -> %cba000d0
  2970 0680 4A				lsr
  2971 0681 6A				ror
  2972 0682 6A				ror
  2973 0683 6A				ror
  2974 0684 69 01			adc #$01	;ustawienie bitu nr 1 w zaleznosci od stanu C
  2975 0686 09 01			ora #$01	;ustawienie bitu sterującego OS ROM na wartosc domyslna
  2976 0688 8D 01 D3			sta portb
  2977 068B 60				rts
  2978
  2979 				.endl
  2980
  2981 997E 68 AA		stop	pla:tax
  2982
  2983
  2984 9980			@exit
  2985
  2986 				; ------------------------------------------------------------
  2987
  2988 = 9FCD			RESULT	= DATAORIGIN+$0195
  2989 9980 60				rts						; ret
  2990 				.endl
  2991
  2992 				; ------------------------------------------------------------
  2993
  2994 = 0101			adr.BANKS	= $0101
  2995 9981			.var BANKS	= adr.BANKS .word
  2996 = FFF7			DETECTOS	= $FFF7
  2997
  2998 = 9981 01 01		BANKS
  2998 				.endl							; UNIT MISC
  2999
  3000 				; ------------------------------------------------------------
  3001
  3002 9983			.local	CIO						; UNIT
  3003
  3004 9983			.local	OPN						; PROCEDURE | ASSEMBLER
  3005
  3006 				; -------------------  ASM Block 00000088  -------------------
  3007
  3008 9983 8A 48			txa:pha
  3009
  3010 9985 AD CE 9F			lda chn
  3011 9988 0A 0A 0A 0A			:4 asl @
  3012 998C AA				tax
  3013
  3014 998D A9 03			lda #$03		;komenda: OPEN
  3015 998F 9D 42 03			sta iccmd,x
  3016
  3017 9992 EE D1 9F D0 03 EE + 	inw device		;omin bajt z dlugoscia STRING-a
  3018
  3019 999A AD D1 9F			lda device		;adres nazwy pliku
  3020 999D 9D 44 03			sta icbufa,x
  3021 99A0 AD D2 9F			lda device+1
  3022 99A3 9D 45 03			sta icbufa+1,x
  3023
  3024 99A6 AD CF 9F			lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
  3025 99A9 9D 4A 03			sta icax1,x
  3026
  3027 99AC AD D0 9F			lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
  3028 99AF 9D 4B 03			sta icax2,x
  3029
  3030 99B2				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 99B2 EE 01 D3				inc portb
     6 99B5 20 56 E4				jsr CIOV
     8 99B8 CE 01 D3				dec portb
Source: MIDICar Player.a65
  3031
  3032 99BB 8C 3F 9E			sty MAIN.SYSTEM.IOResult
  3033
  3034 99BE 68 AA			pla:tax
  3035
  3036 				; ------------------------------------------------------------
  3037
  3038 = 9FCE			CHN	= DATAORIGIN+$0196
  3039 = 9FCF			AX1	= DATAORIGIN+$0197
  3040 = 9FD0			AX2	= DATAORIGIN+$0198
  3041 = 9FD1			DEVICE	= DATAORIGIN+$0199
  3042
  3043 = 9FCE			@VarData	= CHN
  3044 = 0005			@VarDataSize	= 5
  3045
  3046 99C0			@exit
  3047 					.ifdef @new
  3048 					lda <@VarData
  3049 					sta :ztmp
  3050 					lda >@VarData
  3051 					ldy #@VarDataSize-1
  3052 					jmp @FreeMem
  3053 					els
  3054 99C0 60				rts						; ret
  3055 					eif
  3056 				.endl
  3057
  3058 99C1			.local	CLS						; PROCEDURE | ASSEMBLER
  3059 99C1 8D D3 9F			sta CHN
  3060
  3061 				; -------------------  ASM Block 00000089  -------------------
  3062
  3063 99C4 8A 48			txa:pha
  3064
  3065 99C6 AD D3 9F			lda chn
  3066 99C9 0A 0A 0A 0A			:4 asl @
  3067 99CD AA				tax
  3068
  3069 99CE A9 0C			lda #$0c		;komenda: CLOSE
  3070 99D0 9D 42 03			sta iccmd,x
  3071
  3072 99D3				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 99D3 EE 01 D3				inc portb
     6 99D6 20 56 E4				jsr CIOV
     8 99D9 CE 01 D3				dec portb
Source: MIDICar Player.a65
  3073
  3074 99DC 8C 3F 9E			sty MAIN.SYSTEM.IOResult
  3075
  3076 99DF 68 AA			pla:tax
  3077
  3078 				; ------------------------------------------------------------
  3079
  3080 = 9FD3			CHN	= DATAORIGIN+$019B
  3081
  3082 = 9FD3			@VarData	= CHN
  3083 = 0001			@VarDataSize	= 1
  3084
  3085 99E1			@exit
  3086 					.ifdef @new
  3087 					lda <@VarData
  3088 					sta :ztmp
  3089 					lda >@VarData
  3090 					ldy #@VarDataSize-1
  3091 					jmp @FreeMem
  3092 					els
  3093 99E1 60				rts						; ret
  3094 					eif
  3095 				.endl
  3096
  3097 				; ------------------------------------------------------------
  3098
  3099 				.endl							; UNIT CIO
  3100
  3101 99E2			.local	PUTTEXT						; PROCEDURE
  3102
  3103 				; optimize OK (helpers.inc), line = 21
  3104
  3105 99E2 AC 27 A0 84 82 AC + 	mwy S :bp2
  3106 99EC A0 00			ldy #$00
  3107 99EE B1 82			lda (:bp2),y
  3108 99F0 8D 29 A0			sta L
  3109
  3110 				; optimize OK (helpers.inc), line = 22
  3111
  3112 99F3 AD 27 A0			lda S
  3113 99F6 85 88			sta SYSTEM.MOVE_00F3.SOURCE
  3114 99F8 AD 28 A0			lda S+1
  3115 99FB 85 89			sta SYSTEM.MOVE_00F3.SOURCE+1
  3116 99FD AD 24 A0			lda SCRADR
  3117 9A00 85 8C			sta SYSTEM.MOVE_00F3.DEST
  3118 9A02 AD 25 A0			lda SCRADR+1
  3119 9A05 85 8D			sta SYSTEM.MOVE_00F3.DEST+1
  3120 9A07 AD 29 A0			lda L
  3121 9A0A 85 84			sta SYSTEM.MOVE_00F3.COUNT
  3122 9A0C A9 00			lda #$00
  3123 9A0E 85 85			sta SYSTEM.MOVE_00F3.COUNT+1
  3124 9A10				.local +MAIN.SYSTEM.MOVE_00F3
  3125 9A10				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00F3.M@INLINE [Source: MIDICar Player.a65]
     4 9A10 20 27 84			jsr @move
Source: MIDICar Player.a65
  3126 					.endl
  3127
  3128 				; optimize OK (helpers.inc), line = 23
  3129
  3130 9A13 AD 24 A0			lda SCRADR
  3131 9A16 18 6D 29 A0			add L
  3132 9A1A 8D 24 A0			sta SCRADR
  3133 9A1D 90 03			scc
  3134 9A1F EE 25 A0			inc SCRADR+1
  3135
  3136 				; ------------------------------------------------------------
  3137
  3138 = A027			S	= DATAORIGIN+$01EF
  3139 = A029			L	= DATAORIGIN+$01F1
  3140
  3141 = A027			@VarData	= S
  3142 = 0003			@VarDataSize	= 3
  3143
  3144 9A22			@exit
  3145 					.ifdef @new
  3146 					lda <@VarData
  3147 					sta :ztmp
  3148 					lda >@VarData
  3149 					ldy #@VarDataSize-1
  3150 					jmp @FreeMem
  3151 					els
  3152 9A22 60				rts						; ret
  3153 					eif
  3154 				.endl
  3155
  3156 9A23			.local	PUTINT						; PROCEDURE | ASSEMBLER
  3157
  3158 				; -------------------  ASM Block 00000098  -------------------
  3159
  3160 = 0000			EOL = 0
  3161
  3162 9A23			INT2STR:
  3163 9A23 A0 00		    ldy #0
  3164 9A25 8C 9D 9A		    sty _cnt
  3165 9A28			ITSNEXT:
  3166 9A28 A2 00		    ldx #0
  3167 9A2A			ITSSLP:
  3168 9A2A AD 2A A0		    lda value
  3169 9A2D 38			    sec
  3170 9A2E F9 A4 9A		    sbc Pow10Tab,Y
  3171 9A31 8D 2A A0		    sta value
  3172 9A34 AD 2B A0		    lda value+1
  3173 9A37 C8			    iny
  3174 9A38 F9 A4 9A		    sbc Pow10Tab,Y
  3175 9A3B 90 08		    bcc ITSADD
  3176 9A3D 8D 2B A0		    sta value+1
  3177 9A40 E8			    inx
  3178 9A41 88			    dey
  3179 9A42 18			    clc
  3180 9A43 90 E5		    bcc ITSSLP
  3181 9A45			ITSADD:
  3182 9A45 88			    dey
  3183 9A46 AD 2A A0		    lda value
  3184 9A49 79 A4 9A		    adc Pow10Tab,Y
  3185 9A4C 8D 2A A0		    sta value
  3186 9A4F 8A			    txa
  3187 9A50 09 10		    ora #$10
  3188 9A52 AE 9D 9A		    ldx _cnt
  3189 9A55 D0 04		    bne storeDigit
  3190 9A57 C9 10		    cmp #$10
  3191 9A59 F0 06		    beq skipDigit
  3192 9A5B			storeDigit:
  3193 9A5B 9D 9E 9A		    sta _str,X
  3194 9A5E EE 9D 9A		    inc _cnt
  3195 9A61			skipDigit:
  3196 9A61 C8			    iny
  3197 9A62 C8			    iny
  3198 9A63 C0 08		    cpy #8
  3199 9A65 90 C1		    bcc ITSNEXT
  3200 9A67 AD 2A A0		    lda value
  3201 9A6A 09 10		    ora #$10
  3202 9A6C AE 9D 9A		    ldx _cnt
  3203 9A6F 9D 9E 9A		    sta _str,X
  3204 9A72 E8			    inx
  3205
  3206 9A73			put2screen:
  3207 9A73 AD 24 A0		    lda scradr
  3208 9A76 8D 89 9A		    sta screen+1
  3209 9A79 AD 25 A0		    lda scradr+1
  3210 9A7C 8D 8A 9A		    sta screen+2
  3211
  3212 9A7F 8A			    txa
  3213 9A80 A8			    tay
  3214 9A81			putloop:
  3215 9A81 88			    dey
  3216 9A82 B9 9E 9A		    lda _str,y
  3217 9A85 0D 26 A0		    ora puttextinvert
  3218 9A88			screen:
  3219 9A88 99 FF FF		    sta $ffff,y
  3220 9A8B C0 00		    cpy #0
  3221 9A8D D0 F2		    bne putloop
  3222
  3223 9A8F 8A			    txa
  3224 9A90 18			    clc
  3225 9A91 6D 24 A0		    adc scradr
  3226 9A94 8D 24 A0		    sta scradr
  3227 9A97 90 03		    bcc stop
  3228 9A99 EE 25 A0		    inc scradr+1
  3229
  3230 9A9C			stop:
  3231 9A9C 60			    rts
  3232
  3233 9A9D 00			_cnt .by $00
  3234 9A9E 00 00 00 00 00 00	_str .by 0,0,0,0,0,0
  3235 9AA4			Pow10Tab
  3236 9AA4 10 27		    .wo 10000
  3237 9AA6 E8 03		    .wo 1000
  3238 9AA8 64 00		    .wo 100
  3239 9AAA 0A 00		    .wo 10
  3240
  3241 				; ------------------------------------------------------------
  3242
  3243 = A02A			VALUE	= DATAORIGIN+$01F2
  3244
  3245 = A02A			@VarData	= VALUE
  3246 = 0002			@VarDataSize	= 2
  3247
  3248 9AAC			@exit
  3249 					.ifdef @new
  3250 					lda <@VarData
  3251 					sta :ztmp
  3252 					lda >@VarData
  3253 					ldy #@VarDataSize-1
  3254 					jmp @FreeMem
  3255 					els
  3256 9AAC 60				rts						; ret
  3257 					eif
  3258 				.endl
  3259
  3260 9AAD			.local	RESET_MIDI					; PROCEDURE
  3261
  3262 				; optimize OK (helpers.inc), line = 170
  3263
  3264 9AAD AD 31 9E			lda GM_RESET
  3265 9AB0 8D 7A 9F			sta MIDI_FIFO.FIFO_SEND.DATA
  3266 9AB3 AD 32 9E			lda GM_RESET+1
  3267 9AB6 8D 7B 9F			sta MIDI_FIFO.FIFO_SEND.DATA+1
  3268 9AB9 A9 06			lda #$06
  3269 9ABB 8D 7C 9F			sta MIDI_FIFO.FIFO_SEND.LEN
  3270 9ABE 20 2C 8E			jsr MIDI_FIFO.FIFO_SEND
  3271 9AC1 20 71 8E			jsr MIDI_FIFO.FIFO_FLUSH
  3272 9AC4			@exit
  3273 					.ifdef @new
  3274 					lda <@VarData
  3275 					sta :ztmp
  3276 					lda >@VarData
  3277 					ldy #@VarDataSize-1
  3278 					jmp @FreeMem
  3279 					els
  3280 9AC4 60				rts						; ret
  3281 					eif
  3282 				.endl
  3283
  3284 9AC5			.local	EXIT2DOS					; PROCEDURE
  3285
  3286 				; optimize OK (helpers.inc), line = 175
  3287
  3288 9AC5 A9 00			lda #$00
  3289 9AC7 20 C1 99			jsr CIO.CLS
  3290 9ACA A9 00			lda #$00
  3291 9ACC 8D CE 9F			sta CIO.OPN.CHN
  3292 9ACF A9 0C			lda #$0C
  3293 9AD1 8D CF 9F			sta CIO.OPN.AX1
  3294 9AD4 A9 00			lda #$00
  3295 9AD6 8D D0 9F			sta CIO.OPN.AX2
  3296 9AD9 A9 0F			lda #$0F
  3297 9ADB 8D D1 9F			sta CIO.OPN.DEVICE
  3298 9ADE A9 80			lda #$80
  3299 9AE0 8D D2 9F			sta CIO.OPN.DEVICE+1
  3300 9AE3 20 83 99			jsr CIO.OPN
  3301 9AE6 A9 00			lda #$00
  3302 9AE8 4C 16 9E			jmp @halt
  3303 9AEB			@exit
  3304 					.ifdef @new
  3305 					lda <@VarData
  3306 					sta :ztmp
  3307 					lda >@VarData
  3308 					ldy #@VarDataSize-1
  3309 					jmp @FreeMem
  3310 					els
  3311 9AEB 60				rts						; ret
  3312 					eif
  3313 				.endl
  3314
  3315 9AEC			.local	CLEARSTATUS					; PROCEDURE
  3316
  3317 				; optimize OK (MIDICar Player.pas), line = 31
  3318
  3319 9AEC A9 80			lda #$80
  3320 9AEE A0 27			ldy #$27
  3321 9AF0 99 18 38 88 10 FA		sta:rpl $3818,y-
  3322 9AF6			@exit
  3323 					.ifdef @new
  3324 					lda <@VarData
  3325 					sta :ztmp
  3326 					lda >@VarData
  3327 					ldy #@VarDataSize-1
  3328 					jmp @FreeMem
  3329 					els
  3330 9AF6 60				rts						; ret
  3331 					eif
  3332 				.endl
  3333
  3334 9AF7			.local	INIT						; PROCEDURE
  3335
  3336 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', MIDICar Player.pas), line = 41
  3337
  3338 9AF7 20 10 8E			jsr MIDI_FIFO.FIFO_RESET
  3339
  3340 				; optimize OK (MIDICar Player.pas), line = 44
  3341
  3342 9AFA A9 00			lda #$00
  3343 9AFC 85 88			sta SYSTEM.MOVE_00F2.SOURCE
  3344 9AFE A9 E0			lda #$E0
  3345 9B00 85 89			sta SYSTEM.MOVE_00F2.SOURCE+1
  3346 9B02 A9 00			lda #$00
  3347 9B04 85 8C			sta SYSTEM.MOVE_00F2.DEST
  3348 9B06 A9 30			lda #$30
  3349 9B08 85 8D			sta SYSTEM.MOVE_00F2.DEST+1
  3350 9B0A A9 00			lda #$00
  3351 9B0C 85 84			sta SYSTEM.MOVE_00F2.COUNT
  3352 9B0E A9 04			lda #$04
  3353 9B10 85 85			sta SYSTEM.MOVE_00F2.COUNT+1
  3354 9B12				.local +MAIN.SYSTEM.MOVE_00F2
  3355 9B12				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00F2.M@INLINE [Source: MIDICar Player.a65]
     4 9B12 20 27 84			jsr @move
Source: MIDICar Player.a65
  3356 					.endl
  3357
  3358 				; optimize OK (MIDICar Player.pas), line = 45
  3359
  3360 9B15 A9 0F			lda #$0F
  3361 9B17 8D C5 02			sta $02C5
  3362 9B1A A9 00			lda #$00
  3363 9B1C 8D C6 02			sta $02C6
  3364
  3365 				; optimize OK (MIDICar Player.pas), line = 46
  3366
  3367 9B1F A9 30			lda #$30
  3368 9B21 8D F4 02			sta $02F4
  3369
  3370 				; optimize OK (MIDICar Player.pas), line = 47
  3371
  3372 9B24 85 88			sta SYSTEM.FILLCHAR_00F1.A
  3373 9B26 A9 34			lda #$34
  3374 9B28 85 89			sta SYSTEM.FILLCHAR_00F1.A+1
  3375 9B2A A9 10			lda #$10
  3376 9B2C 85 8C			sta SYSTEM.FILLCHAR_00F1.COUNT
  3377 9B2E A9 04			lda #$04
  3378 9B30 85 8D			sta SYSTEM.FILLCHAR_00F1.COUNT+1
  3379 9B32 A9 00			lda #$00
  3380 9B34 85 84			sta SYSTEM.FILLCHAR_00F1.VALUE
  3381 9B36				.local +MAIN.SYSTEM.FILLCHAR_00F1
  3382 9B36				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_00F1.M@INLINE [Source: MIDICar Player.a65]
     4 9B36 20 7C 84			jsr @fill
Source: MIDICar Player.a65
  3383 					.endl
  3384
  3385 				; optimize OK (MIDICar Player.pas), line = 48
  3386
  3387 9B39 A9 00			lda #$00
  3388 9B3B 8D 30 02			sta $0230
  3389 9B3E A9 34			lda #$34
  3390 9B40 8D 31 02			sta $0230+1
  3391
  3392 				; optimize OK (MIDICar Player.pas), line = 50
  3393
  3394 9B43 A9 80			lda #$80
  3395 9B45 A0 27			ldy #$27
  3396 9B47 99 30 34 88 10 FA		sta:rpl $3430,y-
  3397
  3398 				; optimize OK (MIDICar Player.pas), line = 51
  3399
  3400 9B4D A9 31			lda #$31
  3401 9B4F 8D 24 A0			sta SCRADR
  3402 9B52 A9 34			lda #$34
  3403 9B54 8D 25 A0			sta SCRADR+1
  3404 9B57 A9 13			lda #$13
  3405 9B59 8D 27 A0			sta PUTTEXT.S
  3406 9B5C A9 80			lda #$80
  3407 9B5E 8D 28 A0			sta PUTTEXT.S+1
  3408 9B61 20 E2 99			jsr PUTTEXT
  3409
  3410 				; optimize OK (MIDICar Player.pas), line = 52
  3411
  3412 9B64 A9 4F			lda #$4F
  3413 9B66 8D 24 A0			sta SCRADR
  3414 9B69 A9 34			lda #$34
  3415 9B6B 8D 25 A0			sta SCRADR+1
  3416 9B6E A9 27			lda #$27
  3417 9B70 8D 27 A0			sta PUTTEXT.S
  3418 9B73 A9 80			lda #$80
  3419 9B75 8D 28 A0			sta PUTTEXT.S+1
  3420 9B78 20 E2 99			jsr PUTTEXT
  3421
  3422 				; optimize FAIL ('CLEARSTATUS', MIDICar Player.pas), line = 53
  3423
  3424 9B7B 20 EC 9A			jsr CLEARSTATUS
  3425
  3426 				; optimize FAIL ('MISC.DETECTMEM', MIDICar Player.pas), line = 56
  3427
  3428 9B7E 20 DD 98			jsr MISC.DETECTMEM
  3429 9B81 E8				inx
  3430 9B82 AD CD 9F			lda MISC.DETECTMEM.RESULT
  3431 9B85 0A 0A 0A 0A			:4 asl @
  3432 9B89 8D 2C A0			sta TOTALXMS
  3433 9B8C B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  3434 9B8E 8D 2D A0			sta TOTALXMS+1
  3435 9B91 CA				dex
  3436
  3437 				; -------------------  ASM Block 00000099  -------------------
  3438
  3439 				 lda #$fe \ sta $100 
  3439 9B92 A9 FE		 LDA #$FE 
  3439 9B94 8D 00 01		 STA $100 
  3440 				; optimize OK (MIDICar Player.pas), line = 60
  3441
  3442 9B97 A9 00			lda #$00
  3443 9B99 8D D9 98			sta MIDFILES.MIDTRACKS
  3444 9B9C A9 3E			lda #$3E
  3445 9B9E 8D DA 98			sta MIDFILES.MIDTRACKS+1
  3446
  3447 				; optimize OK (MIDICar Player.pas), line = 61
  3448
  3449 9BA1 A9 00			lda #$00
  3450 9BA3 8D 7F 9F			sta MIDFILES.MIDDATA
  3451 9BA6 A9 40			lda #$40
  3452 9BA8 8D 80 9F			sta MIDFILES.MIDDATA+1
  3453
  3454 				; optimize OK (MIDICar Player.pas), line = 63
  3455
  3456 9BAB A9 00			lda #$00
  3457 9BAD 8D 94 9F			sta MIDFILES.CTRK
  3458
  3459 9BB0			l_0844
  3460 				; --- ForToDoCondition
  3461 9BB0 AD 94 9F			lda MIDFILES.CTRK
  3462 9BB3 C9 28			cmp #$28
  3463 9BB5 90 03 4C 3C 9C		jcs l_0852
  3464
  3465 				; optimize OK (MIDICar Player.pas), line = 65
  3466
  3467 9BBA 4A				lsr @
  3468 9BBB 4A				lsr @
  3469 9BBC 85 84			sta :eax
  3470 9BBE 4A				lsr @
  3471 9BBF 65 84			adc :eax
  3472 9BC1 6A				ror @
  3473 9BC2 4A				lsr @
  3474 9BC3 4A				lsr @
  3475 9BC4 65 84			adc :eax
  3476 9BC6 6A				ror @
  3477 9BC7 65 84			adc :eax
  3478 9BC9 6A				ror @
  3479 9BCA 4A				lsr @
  3480 9BCB 4A				lsr @
  3481 9BCC 8D 2E A0			sta X
  3482 9BCF AD 94 9F			lda MIDFILES.CTRK
  3483 9BD2 85 84			sta :al
  3484 9BD4 A9 14			lda #$14
  3485 9BD6 85 8C			sta :cl
  3486 9BD8 20 23 85			jsr idivAL_CL.MOD
  3487 9BDB A5 90			lda :ztmp8
  3488 9BDD 8D 2F A0			sta Y
  3489
  3490 				; optimize OK (MIDICar Player.pas), line = 66
  3491
  3492 9BE0 AD 94 9F			lda MIDFILES.CTRK
  3493 9BE3 85 9D			sta :STACKORIGIN+9
  3494 9BE5 A9 00			lda #$00
  3495 9BE7 06 9D			asl :STACKORIGIN+9
  3496 9BE9 2A				rol @
  3497 9BEA 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3498 9BEC A9 D0			lda #$D0
  3499 9BEE 85 9E			sta :STACKORIGIN+10
  3500 9BF0 A9 34			lda #$34
  3501 9BF2 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3502 9BF4 A9 14			lda #$14
  3503 9BF6 85 8C			sta :ecx
  3504 9BF8 AD 2E A0			lda X
  3505 9BFB 85 84			sta :eax
  3506 					.ifdef fmulinit
  3507 					fmulu_8
  3508 					els
  3509 9BFD 20 0B 85			imulCL
  3510 					eif
  3511 9C00 A5 9E			lda :STACKORIGIN+10
  3512 9C02 18 65 84			add :eax
  3513 9C05 85 9E			sta :STACKORIGIN+10
  3514 9C07 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  3515 9C09 65 85			adc :eax+1
  3516 9C0B 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3517 9C0D AD 2F A0			lda Y
  3518 9C10 20 CA 8A			jsr @mul40
  3519 9C13 18 65 9E			add :STACKORIGIN+10
  3520 9C16 85 9E			sta :STACKORIGIN+10
  3521 9C18 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  3522 9C1A 65 85			adc :eax+1
  3523 9C1C 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3524 9C1E A5 9D			lda :STACKORIGIN+9
  3525 9C20 18 69 00			add #$00
  3526 9C23 A8				tay
  3527 9C24 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  3528 9C26 69 00			adc #$00
  3529 9C28 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3530 9C2A A5 9E			lda :STACKORIGIN+10
  3531 9C2C 99 D4 9F			sta adr.CHPTR,y
  3532 9C2F A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  3533 9C31 99 D5 9F			sta adr.CHPTR+1,y
  3534
  3535 				; --- ForToDoEpilog
  3536 9C34 EE 94 9F			inc MIDFILES.CTRK
  3537 9C37 F0 03 4C B0 9B		jne l_0844
  3538 9C3C			l_0852
  3539
  3540 				; ------------------------------------------------------------
  3541
  3542 = A02C			TOTALXMS	= DATAORIGIN+$01F4
  3543 = A02E			X	= DATAORIGIN+$01F6
  3544 = A02F			Y	= DATAORIGIN+$01F7
  3545
  3546 = A02C			@VarData	= TOTALXMS
  3547 = 0004			@VarDataSize	= 4
  3548
  3549 9C3C			@exit
  3550 					.ifdef @new
  3551 					lda <@VarData
  3552 					sta :ztmp
  3553 					lda >@VarData
  3554 					ldy #@VarDataSize-1
  3555 					jmp @FreeMem
  3556 					els
  3557 9C3C 60				rts						; ret
  3558 					eif
  3559 				.endl
  3560
  3561 9C3D			.local	LOADPRC						; PROCEDURE
  3562 9C3D 8D 30 A0			sta V
  3563
  3564 				; optimize OK (MIDICar Player.pas), line = 75
  3565
  3566 9C40 A9 22			lda #$22
  3567 9C42 8D 24 A0			sta SCRADR
  3568 9C45 A9 38			lda #$38
  3569 9C47 8D 25 A0			sta SCRADR+1
  3570
  3571 				; optimize OK (MIDICar Player.pas), line = 76
  3572
  3573 9C4A AD 30 A0			lda V
  3574 9C4D 38 E9 01			sub #$01
  3575 9C50 8D 2A A0			sta PUTINT.VALUE
  3576 9C53 A9 00			lda #$00
  3577 9C55 E9 00			sbc #$00
  3578 9C57 8D 2B A0			sta PUTINT.VALUE+1
  3579 9C5A 20 23 9A			jsr PUTINT
  3580 9C5D AC 25 A0			ldy SCRADR+1
  3581 9C60 84 81			sty :bp+1
  3582 9C62 AC 24 A0			ldy SCRADR
  3583 9C65 A9 0F			lda #$0F
  3584 9C67 91 80			sta (:bp),y
  3585 9C69 EE 24 A0			inc SCRADR
  3586 9C6C D0 03			sne
  3587 9C6E EE 25 A0			inc SCRADR+1
  3588
  3589 				; optimize OK (MIDICar Player.pas), line = 77
  3590
  3591 9C71 AD 83 9F			lda MIDFILES.TOTALTRACKS
  3592 9C74 8D 2A A0			sta PUTINT.VALUE
  3593 9C77 A9 00			lda #$00
  3594 9C79 8D 2B A0			sta PUTINT.VALUE+1
  3595 9C7C 20 23 9A			jsr PUTINT
  3596
  3597 				; ------------------------------------------------------------
  3598
  3599 = A030			V	= DATAORIGIN+$01F8
  3600 = A031			I	= DATAORIGIN+$01F9
  3601
  3602 = A030			@VarData	= V
  3603 = 0002			@VarDataSize	= 2
  3604
  3605 9C7F			@exit
  3606 					.ifdef @new
  3607 					lda <@VarData
  3608 					sta :ztmp
  3609 					lda >@VarData
  3610 					ldy #@VarDataSize-1
  3611 					jmp @FreeMem
  3612 					els
  3613 9C7F 60				rts						; ret
  3614 					eif
  3615 				.endl
  3616
  3617 9C80			.local	CHECKPARAMS					; PROCEDURE
  3618
  3619 				; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 95
  3620
  3621 9C80 20 DF 8D			jsr SYSTEM.PARAMCOUNT
  3622 9C83 AD 56 9F			lda SYSTEM.PARAMCOUNT.RESULT
  3623 9C86 C9 01			cmp #$01
  3624 9C88 F0 03 4C 4A 9D		jne l_08C5
  3625 				@
  3626
  3627 				; optimize OK (MIDICar Player.pas), line = 97
  3628
  3629 9C8D A9 01			lda #$01
  3630 9C8F 20 E8 8D			jsr SYSTEM.PARAMSTR
  3631 9C92 AD FD 8D			lda SYSTEM.PARAMSTR.RESULT
  3632 9C95 8D 32 A0			sta FN
  3633 9C98 AD FE 8D			lda SYSTEM.PARAMSTR.RESULT+1
  3634 9C9B 8D 33 A0			sta FN+1
  3635
  3636 				; optimize OK (MIDICar Player.pas), line = 98
  3637
  3638 9C9E A9 19			lda #$19
  3639 9CA0 8D 24 A0			sta SCRADR
  3640 9CA3 A9 38			lda #$38
  3641 9CA5 8D 25 A0			sta SCRADR+1
  3642 9CA8 A9 31			lda #$31
  3643 9CAA 8D 27 A0			sta PUTTEXT.S
  3644 9CAD A9 80			lda #$80
  3645 9CAF 8D 28 A0			sta PUTTEXT.S+1
  3646 9CB2 20 E2 99			jsr PUTTEXT
  3647
  3648 				; optimize OK (MIDICar Player.pas), line = 99
  3649
  3650 9CB5 A9 80			lda #$80
  3651 9CB7 8D 26 A0			sta PUTTEXTINVERT
  3652
  3653 				; optimize OK (MIDICar Player.pas), line = 100
  3654
  3655 9CBA A9 3D			lda <LOADPRC
  3656 9CBC 8D 96 9F			sta MIDFILES.LOADPROCESS
  3657 9CBF A9 9C			lda >LOADPRC
  3658 9CC1 8D 97 9F			sta MIDFILES.LOADPROCESS+1
  3659
  3660 				; optimize OK (MIDICar Player.pas), line = 101
  3661
  3662 9CC4 AD 32 A0			lda FN
  3663 9CC7 8D 98 9F			sta MIDFILES.LOADMID.FN
  3664 9CCA AD 33 A0			lda FN+1
  3665 9CCD 8D 99 9F			sta MIDFILES.LOADMID.FN+1
  3666 9CD0 20 F1 8E			jsr MIDFILES.LOADMID
  3667 9CD3 AD 9A 9F			lda MIDFILES.LOADMID.RESULT
  3668 9CD6 8D 34 A0			sta ERR
  3669
  3670 				; optimize OK (MIDICar Player.pas), line = 102
  3671
  3672 9CD9 F0 6C			jeq l_08F0
  3673
  3674 				; optimize OK (MIDICar Player.pas), line = 104
  3675
  3676 9CDB A9 19			lda #$19
  3677 9CDD 8D 24 A0			sta SCRADR
  3678 9CE0 A9 38			lda #$38
  3679 9CE2 8D 25 A0			sta SCRADR+1
  3680
  3681 				; optimize OK (MIDICar Player.pas), line = 105
  3682
  3683 9CE5 AD 34 A0			lda ERR
  3684 9CE8 30 30			jmi l_0907
  3685 9CEA F0 2E			jeq l_0907
  3686
  3687 				; optimize OK (MIDICar Player.pas), line = 106
  3688
  3689 9CEC AD 34 A0			lda ERR
  3690 9CEF 8D 35 A0			sta @CASETMP_0005
  3691 9CF2 C9 64			cmp #$64
  3692 9CF4 D0 10			jne l_0913
  3693 				@
  3694
  3695 				; optimize OK (MIDICar Player.pas), line = 107
  3696
  3697 9CF6 A9 40			lda #$40
  3698 9CF8 8D 27 A0			sta PUTTEXT.S
  3699 9CFB A9 80			lda #$80
  3700 9CFD 8D 28 A0			sta PUTTEXT.S+1
  3701 9D00 20 E2 99			jsr PUTTEXT
  3702
  3703 9D03 4C 17 9D			jmp a_0005
  3704 9D06			l_0913
  3705 9D06 C9 65			cmp #$65
  3706 9D08 D0 0D			jne l_091E
  3707 				@
  3708
  3709 				; optimize OK (MIDICar Player.pas), line = 108
  3710
  3711 9D0A A9 54			lda #$54
  3712 9D0C 8D 27 A0			sta PUTTEXT.S
  3713 9D0F A9 80			lda #$80
  3714 9D11 8D 28 A0			sta PUTTEXT.S+1
  3715 9D14 20 E2 99			jsr PUTTEXT
  3716
  3717 9D17			l_091E
  3718 9D17			a_0005
  3719 9D17 4C 38 9D			jmp l_092F
  3720 9D1A			l_0907
  3721
  3722 				; optimize OK (MIDICar Player.pas), line = 112
  3723
  3724 9D1A A9 68			lda #$68
  3725 9D1C 8D 27 A0			sta PUTTEXT.S
  3726 9D1F A9 80			lda #$80
  3727 9D21 8D 28 A0			sta PUTTEXT.S+1
  3728 9D24 20 E2 99			jsr PUTTEXT
  3729 9D27 A0 00			ldy #$00
  3730 9D29 AD 34 A0			lda ERR
  3731 9D2C 10 01			spl
  3732 9D2E 88				dey
  3733 9D2F 8C 2B A0			sty PUTINT.VALUE+1
  3734 9D32 8D 2A A0			sta PUTINT.VALUE
  3735 9D35 20 23 9A			jsr PUTINT
  3736 9D38			l_092F
  3737
  3738 				; --- WhileProlog
  3739 9D38			l_0938
  3740
  3741 				; optimize OK (MIDICar Player.pas), line = 114
  3742
  3743 9D38 AD FC 02			lda KEYB
  3744 9D3B C9 FF			cmp #$FF
  3745 9D3D F0 F9			jeq l_0938
  3746
  3747 				; optimize OK (MIDICar Player.pas), line = 115
  3748
  3749 9D3F A9 FF			lda #$FF
  3750 9D41 8D FC 02			sta KEYB
  3751
  3752 				; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 116
  3753
  3754 9D44 20 C5 9A			jsr EXIT2DOS
  3755 9D47			l_08F0
  3756 9D47 4C 4F 9D			jmp l_0954
  3757 9D4A			l_08C5
  3758
  3759 				; optimize OK (MIDICar Player.pas), line = 121
  3760
  3761 9D4A A9 01			lda #$01
  3762 9D4C 8D 83 9F			sta MIDFILES.TOTALTRACKS
  3763 9D4F			l_0954
  3764
  3765 				; ------------------------------------------------------------
  3766
  3767 = A032			FN	= DATAORIGIN+$01FA
  3768 = A034			ERR	= DATAORIGIN+$01FC
  3769 = A035			@CASETMP_0005	= DATAORIGIN+$01FD
  3770
  3771 = A032			@VarData	= FN
  3772 = 0004			@VarDataSize	= 4
  3773
  3774 9D4F			@exit
  3775 					.ifdef @new
  3776 					lda <@VarData
  3777 					sta :ztmp
  3778 					lda >@VarData
  3779 					ldy #@VarDataSize-1
  3780 					jmp @FreeMem
  3781 					els
  3782 9D4F 60				rts						; ret
  3783 					eif
  3784 				.endl
  3785 9D50			l_008E
  3786
  3787 				; optimize FAIL ('INIT', MIDICar Player.pas), line = 126
  3788
  3789 9D50 20 F7 9A			jsr INIT
  3790
  3791 				; optimize FAIL ('CHECKPARAMS', MIDICar Player.pas), line = 127
  3792
  3793 9D53 20 80 9C			jsr CHECKPARAMS
  3794
  3795 				; optimize FAIL ('CLEARSTATUS', MIDICar Player.pas), line = 130
  3796
  3797 9D56 20 EC 9A			jsr CLEARSTATUS
  3798
  3799 				; optimize OK (MIDICar Player.pas), line = 131
  3800
  3801 9D59 A9 19			lda #$19
  3802 9D5B 8D 24 A0			sta SCRADR
  3803 9D5E A9 38			lda #$38
  3804 9D60 8D 25 A0			sta SCRADR+1
  3805 9D63 A9 75			lda #$75
  3806 9D65 8D 27 A0			sta PUTTEXT.S
  3807 9D68 A9 80			lda #$80
  3808 9D6A 8D 28 A0			sta PUTTEXT.S+1
  3809 9D6D 20 E2 99			jsr PUTTEXT
  3810
  3811 				; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 134
  3812
  3813 9D70 20 03 8E			jsr MC6850.MC6850_RESET
  3814
  3815 				; optimize OK (MIDICar Player.pas), line = 135
  3816
  3817 9D73 A9 96			lda #$96
  3818 9D75 20 09 8E			jsr MC6850.MC6850_INIT
  3819
  3820 				; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 140
  3821
  3822 9D78 20 AD 9A			jsr RESET_MIDI
  3823
  3824 				; optimize OK (MIDICar Player.pas), line = 141
  3825
  3826 9D7B A9 00			lda #$00
  3827 9D7D 85 F0			sta MIDFILES._TOTALTICKS
  3828 9D7F 85 F1			sta MIDFILES._TOTALTICKS+1
  3829 9D81 85 F2			sta MIDFILES._TOTALTICKS+2
  3830 9D83 85 F3			sta MIDFILES._TOTALTICKS+3
  3831
  3832 				; optimize FAIL ('MIDFILES.SETTEMPO', MIDICar Player.pas), line = 142
  3833
  3834 9D85 20 CA 96			jsr MIDFILES.SETTEMPO
  3835
  3836 				; optimize OK (MIDICar Player.pas), line = 146
  3837
  3838 9D88 AD 83 9F			lda MIDFILES.TOTALTRACKS
  3839 9D8B 8D 94 9F			sta MIDFILES.CTRK
  3840
  3841 				; --- RepeatUntilProlog
  3842 9D8E			l_0972
  3843
  3844 				; optimize FAIL ('MIDFILES.PROCESSMIDI', MIDICar Player.pas), line = 149
  3845
  3846 9D8E 20 2B 96			jsr MIDFILES.PROCESSMIDI
  3847
  3848 				; optimize FAIL ('m@INLINE', MIDICar Player.pas), line = 157
  3849
  3850 9D91				.local +MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850
  3851 9D91				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.M@INLINE [Source: MIDICar Player.a65]
     4 9D91 AD 00 D5			lda MC6850.MC6850_CNTRREG
     5 9D94 29 02			and #$02
     6 9D96 F0 0E			jeq l_018F
    10 9D98 A4 FE			ldy FIFO_TAIL
    11 9D9A C4 FD			cpy FIFO_HEAD
    12 9D9C F0 08			jeq l_01A4
    16 9D9E B9 00 06			lda adr.FIFO_BUF,y
    17 9DA1 8D 01 D5			sta MC6850.MC6850_BUFFER
    21 9DA4 E6 FE			inc FIFO_TAIL
    22 9DA6			l_01A4
    23 9DA6			l_018F
Source: MIDICar Player.a65
  3852 					.endl
  3853
  3854 				; optimize OK (MIDICar Player.pas), line = 160
  3855
  3856 9DA6 AD FC 02			lda KEYB
  3857 9DA9 C9 FF			cmp #$FF
  3858 9DAB F0 47			jeq l_0986
  3859
  3860 				; optimize OK (MIDICar Player.pas), line = 162
  3861
  3862 9DAD 8D 36 A0			sta @CASETMP_0006
  3863 9DB0 C9 1C			cmp #$1C
  3864 9DB2 D0 06			jne l_0992
  3865 				@
  3866 9DB4 4C F9 9D			jmp b_0972					; break
  3867
  3868 9DB7 4C EF 9D			jmp a_0006
  3869 9DBA			l_0992
  3870 9DBA C9 0A			cmp #$0A
  3871 9DBC D0 31			jne l_099B
  3872 				@
  3873
  3874 				; optimize OK (MIDICar Player.pas), line = 166
  3875
  3876 9DBE A5 F5			lda MIDFILES._TIMERSTATUS
  3877 9DC0 49 80			eor #$80
  3878 9DC2 85 F5			sta MIDFILES._TIMERSTATUS
  3879
  3880 				; optimize OK (MIDICar Player.pas), line = 167
  3881
  3882 9DC4 A9 19			lda #$19
  3883 9DC6 8D 24 A0			sta SCRADR
  3884 9DC9 A9 38			lda #$38
  3885 9DCB 8D 25 A0			sta SCRADR+1
  3886
  3887 				; optimize OK (MIDICar Player.pas), line = 168
  3888
  3889 9DCE A5 F5			lda MIDFILES._TIMERSTATUS
  3890 9DD0 30 10			jmi l_09BF
  3891
  3892 				; optimize OK (MIDICar Player.pas), line = 169
  3893
  3894 9DD2 A9 75			lda #$75
  3895 9DD4 8D 27 A0			sta PUTTEXT.S
  3896 9DD7 A9 80			lda #$80
  3897 9DD9 8D 28 A0			sta PUTTEXT.S+1
  3898 9DDC 20 E2 99			jsr PUTTEXT
  3899 9DDF 4C EF 9D			jmp l_09CB
  3900 9DE2			l_09BF
  3901
  3902 				; optimize OK (MIDICar Player.pas), line = 171
  3903
  3904 9DE2 A9 7E			lda #$7E
  3905 9DE4 8D 27 A0			sta PUTTEXT.S
  3906 9DE7 A9 80			lda #$80
  3907 9DE9 8D 28 A0			sta PUTTEXT.S+1
  3908 9DEC 20 E2 99			jsr PUTTEXT
  3909 9DEF			l_09CB
  3910
  3911 9DEF			l_099B
  3912 9DEF			a_0006
  3913
  3914 				; optimize OK (MIDICar Player.pas), line = 174
  3915
  3916 9DEF A9 FF			lda #$FF
  3917 9DF1 8D FC 02			sta KEYB
  3918 9DF4			l_0986
  3919
  3920 				; optimize OK (MIDICar Player.pas), line = 176
  3921
  3922 9DF4 AD 95 9F			lda MIDFILES.PLAYINGTRACKS
  3923 9DF7 D0 95			jne l_0972
  3924 9DF9			b_0972
  3925
  3926 				; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 185
  3927
  3928 9DF9 20 AD 9A			jsr RESET_MIDI
  3929
  3930 				; optimize OK (MIDICar Player.pas), line = 191
  3931
  3932 9DFC 78				sei
  3933 9DFD AD 8A 9F 8D 10 02		mva MIDFILES.OLDTIMERVEC VTIMR1
  3934 9E03 AD 8B 9F 8D 11 02		mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
  3935 9E09 A5 10			lda irqens
  3936 9E0B 29 FE			and #$fe
  3937 9E0D 85 10			sta irqens
  3938 9E0F 8D 0E D2			sta irqen
  3939 9E12 58				cli
  3940
  3941 				; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 192
  3942
  3943 9E13 20 C5 9A			jsr EXIT2DOS
  3944
  3945 				; ------------------------------------------------------------
  3946
  3947 = 3400			DLIST_ADDR	= $3400
  3948 = 3430			SCREEN_ADDR	= $3430
  3949 = 3818			SCREEN_STATUS	= $3818
  3950 = 3E00			TRACK_DATA_ADDR	= $3E00
  3951 = 4000			MIDI_DATA_ADDR	= $4000
  3952 = 0023			FREE_MEM	= $23
  3953 = 9FD4			adr.CHPTR	= [DATAORIGIN+$019C] .array [40] .word
  3954 9E16			.var CHPTR	= adr.CHPTR .word
  3955 = A024			SCRADR	= DATAORIGIN+$01EC
  3956 = 8087			adr.GM_RESET	= CODEORIGIN+$0087
  3957 9E16			.var GM_RESET	= adr.GM_RESET .word
  3958 = 808D			adr.HEX	= CODEORIGIN+$008D
  3959 9E16			.var HEX	= adr.HEX .word
  3960 = 001C			K_ESC	= $1C
  3961 = 0021			K_SPACE	= $21
  3962 = 000A			K_P	= $0A
  3963 = 02FC			KEYB	= $02FC
  3964 = A026			PUTTEXTINVERT	= DATAORIGIN+$01EE
  3965 = A036			@CASETMP_0006	= DATAORIGIN+$01FE
  3966 9E16			@exit
  3967
  3968 9E16 A2 00		@halt	ldx #$00
  3969 9E18 9A				txs
  3970 					.ifdef MAIN.@DEFINES.ROMOFF
  3971 9E19 EE 01 D3			inc portb
  3972 					.fi
  3973
  3974 9E1C A0 01			ldy #$01
  3975
  3976 9E1E 60				rts
  3977
  3978 				; ------------------------------------------------------------
  3979
  3980 9E1F 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  3981
  3982 				; ------------------------------------------------------------
  3983
  3984 9E2F			.local	@DEFINES
  3985 9E2F			ATARI
  3986 9E2F			USE_FIFO
  3987 9E2F			ROMOFF
  3988 				.endl
  3989
  3990 9E2F			.local	@RESOURCE
  3991 				.endl
  3992
  3993 = 9E2F D4 9F		CHPTR
  3993 = 9E31 87 80		GM_RESET
  3993 = 9E33 8D 80		HEX
  3993 				.endl							; MAIN
  3994
  3995 				; ------------------------------------------------------------
  3996 				; ------------------------------------------------------------
  3997
  3998 				.macro	UNITINITIALIZATION
  3999 				
  4000 					.ifdef MAIN.SYSTEM.@UnitInit
  4001 					jsr MAIN.SYSTEM.@UnitInit
  4002 					.fi
  4003 				
  4004 					.ifdef MAIN.MC6850.@UnitInit
  4005 					jsr MAIN.MC6850.@UnitInit
  4006 					.fi
  4007 				
  4008 					.ifdef MAIN.DOS.@UnitInit
  4009 					jsr MAIN.DOS.@UnitInit
  4010 					.fi
  4011 				
  4012 					.ifdef MAIN.STRUTILS.@UnitInit
  4013 					jsr MAIN.STRUTILS.@UnitInit
  4014 					.fi
  4015 				
  4016 					.ifdef MAIN.SYSUTILS.@UnitInit
  4017 					jsr MAIN.SYSUTILS.@UnitInit
  4018 					.fi
  4019 				
  4020 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  4021 					jsr MAIN.MIDI_FIFO.@UnitInit
  4022 					.fi
  4023 				
  4024 					.ifdef MAIN.MIDFILES.@UnitInit
  4025 					jsr MAIN.MIDFILES.@UnitInit
  4026 					.fi
  4027 				
  4028 					.ifdef MAIN.MISC.@UnitInit
  4029 					jsr MAIN.MISC.@UnitInit
  4030 					.fi
  4031 				
  4032 					.ifdef MAIN.CIO.@UnitInit
  4033 					jsr MAIN.CIO.@UnitInit
  4034 					.fi
  4035 				.endm
  4036
  4037 				; ------------------------------------------------------------
  4038
  4039 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4040 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4040 				SYSTEM: $8C58..$8E02
  4041 					eif
  4042
  4043 					ift .SIZEOF(MAIN.MC6850) > 0
  4044 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  4044 				MC6850: $8E03..$8E0F
  4045 					eif
  4046
  4047 					ift .SIZEOF(MAIN.DOS) > 0
  4048 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  4049 					eif
  4050
  4051 					ift .SIZEOF(MAIN.STRUTILS) > 0
  4052 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  4053 					eif
  4054
  4055 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  4056 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  4057 					eif
  4058
  4059 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  4060 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  4060 				MIDI_FIFO: $8E10..$8E8D
  4061 					eif
  4062
  4063 					ift .SIZEOF(MAIN.MIDFILES) > 0
  4064 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  4064 				MIDFILES: $8E8E..$98DC
  4065 					eif
  4066
  4067 					ift .SIZEOF(MAIN.MISC) > 0
  4068 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  4068 				MISC: $98DD..$9982
  4069 					eif
  4070
  4071 					ift .SIZEOF(MAIN.CIO) > 0
  4072 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  4072 				CIO: $9983..$99E1
  4073 					eif
  4074
  4075 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4075 				CODE: $8000..$9E2E
  4076
  4077 				; ------------------------------------------------------------
  4078
  4079 9E35				.align $0004
  4080
  4081 9E38			DATAORIGIN
  4082 9E38-9E3D> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  4083
  4084 = 0006			VARINITSIZE	= *-DATAORIGIN
  4085 = 01FF			VARDATASIZE	= 511
  4086
  4087 = A037			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4088
  4089 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4089 				DATA: $9E38..$A037
  4090
  4091 02E0-02E1> B1 8B			run START
  4092
  4093 				; ------------------------------------------------------------
  4094
  4095 				.macro	STATICDATA
  4096 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $02  $45 $3A $00 $12 $AD $A9 $A4 $A9
  4097 				.by  $A3 $E1 $F2 $80 $B0 $EC $E1 $F9  $E5 $F2 $80 $B2 $A3 $91 $00 $08  $92 $90 $92 $92 $80 $A7 $B3 $A4
  4098 				.by  $00 $0D $AC $EF $E1 $E4 $E9 $EE  $E7 $80 $8E $8E $8F $8E $8E $00  $12 $B5 $EE $F3 $F5 $F0 $F0 $EF
  4099 				.by  $F2 $F4 $E5 $E4 $80 $E6 $EF $F2  $ED $E1 $F4 $00 $12 $AE $EF $F4  $80 $E5 $EE $EF $F5 $E7 $E8 $F4
  4100 				.by  $80 $ED $E5 $ED $EF $F2 $F9 $00  $0B $A9 $8F $AF $80 $A5 $F2 $F2  $EF $F2 $80 $83 $00 $07 $B0 $EC
  4101 				.by  $E1 $F9 $E9 $EE $E7 $00 $07 $B0  $E1 $F5 $F3 $E5 $80 $80 $00 $F0  $7E $7F $09 $01 $F7 $10 $11 $12
  4102 				.by  $13 $14 $15 $16 $17 $18 $19 $61  $62 $63 $64 $65 $66
  4103 				.endm
  4104
  4105 					end
