mads 2.1.6
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/07/16] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 8000			CODEORIGIN	= $8000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				.local	RESOURCE
   105 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1148 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 8075				RCDATA 'resources/screen_addresses.obj' SCREEN_ADRSES 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0020			len = .filesize('resources/screen_addresses.obj')-0
    28 8075				org main.SCREEN_ADRSES
    30 3B80-3B9F> 18 38 40 38 + 	ins 'resources/screen_addresses.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_ADRSES,'..',*-1," 'resources/screen_addresses.obj'"
    32 				$R RCDATA  $3B80..$3B9F 'resources/screen_addresses.obj'
Source: MIDICar Player.a65
   110 3BA0				RCDATA 'resources/font_blk.fnt' CHARS_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('resources/font_blk.fnt')-0
    28 3BA0				org main.CHARS_ADDR
    30 3000-33FF> 00 00 00 00 + 	ins 'resources/font_blk.fnt',0
    32 					.print '$R RCDATA  ',main.CHARS_ADDR,'..',*-1," 'resources/font_blk.fnt'"
    32 				$R RCDATA  $3000..$33FF 'resources/font_blk.fnt'
Source: MIDICar Player.a65
   111 3400				RCASM 'resources/dlist.asm' DLIST_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 3400				org RESORIGIN
     4 = 0054			len = .sizeof(_DLIST_ADDR)
     6 				mcpy	ift main.DLIST_ADDR+len >= $bc20
    11 8075-80E9> 20 41 80		jsr sys.off
    13 8078 A9 96 85 88 A9 80 +  MWA #DATA EDX
    13 8080 A9 AC 85 8C A9 3F +  MWA #MAIN.DLIST_ADDR ECX
    13 8088 A9 54 85 84 A9 00 +  MWA #LEN EAX
    13 8090 20 00 80		 JSR RESOURCE.MEMCPY
    15 8093 4C 65 80			jmp sys.on
    16 8096			data
Source: dlist.inc
     1 = 0000			DL_BLANK1 = 0; // 1 blank line
     2 = 0010			DL_BLANK2 = %00010000; // 2 blank lines
     3 = 0020			DL_BLANK3 = %00100000; // 3 blank lines
     4 = 0030			DL_BLANK4 = %00110000; // 4 blank lines
     5 = 0040			DL_BLANK5 = %01000000; // 5 blank lines
     6 = 0050			DL_BLANK6 = %01010000; // 6 blank lines
     7 = 0060			DL_BLANK7 = %01100000; // 7 blank lines
     8 = 0070			DL_BLANK8 = %01110000; // 8 blank lines
    10 = 0080			DL_DLI = %10000000; // Order to run DLI
    11 = 0040			DL_LMS = %01000000; // Order to set new memory address
    12 = 0020			DL_VSCROLL = %00100000; // Turn on vertical scroll on this line
    13 = 0010			DL_HSCROLL = %00010000; // Turn on horizontal scroll on this line
    15 = 0002			DL_MODE_40x24T2 = 2; // Antic Modes
    16 = 0004			DL_MODE_40x24T5 = 4;
    17 = 0005			DL_MODE_40x12T5 = 5;
    18 = 0006			DL_MODE_20x24T5 = 6;
    19 = 0007			DL_MODE_20x12T5 = 7;
    20 = 0008			DL_MODE_40x24G4 = 8;
    21 = 0009			DL_MODE_80x48G2 = 9;
    22 = 000A			DL_MODE_80x48G4 = $A;
    23 = 000B			DL_MODE_160x96G2 = $B;
    24 = 000C			DL_MODE_160x192G2 = $C;
    25 = 000D			DL_MODE_160x96G4 = $D;
    26 = 000E			DL_MODE_160x192G4 = $E;
    27 = 000F			DL_MODE_320x192G2 = $F;
    29 = 0001			DL_JMP = %00000001; // Order to jump
    30 = 0041			DL_JVB = %01000001; // Jump to begining
     3 3FAC			dl_start
     4 3FAC 50 50		    :2  dta DL_BLANK6
     6 3FAE 4F 00 34		        dta DL_MODE_320x192G2 + DL_LMS, A(MAIN.SCREEN_HEAD)
     7 3FB1 0F 0F 0F 0F 0F 0F +     :18 dta DL_MODE_320x192G2
     9 3FC3 00			        dta DL_BLANK1
    11 3FC4 42 E8 37 00		        dta DL_MODE_40x24T2 + DL_LMS, A(MAIN.SCREEN_WORK), DL_BLANK1
    12 3FC8 02 00 02 00 02 00 +     :17 dta DL_MODE_40x24T2, DL_BLANK1
    14 3FEA 47 B8 3A		        dta DL_MODE_20x12T5 + DL_LMS, A(MAIN.SCREEN_TIME)
    15 3FED 4D F4 3A		        dta DL_MODE_160x96G4 + DL_LMS, A(MAIN.SCREEN_TIMELINE)
    16 3FF0 00			        dta DL_BLANK1
    17 3FF1 42 CC 3A		        dta DL_MODE_40x24T2 + DL_LMS, A(MAIN.SCREEN_TIME + 20)
    19 3FF4 00			        dta DL_BLANK1
    20 3FF5 4F F8 36		        dta DL_MODE_320x192G2 + DL_LMS, A(MAIN.SCREEN_FOOT)
    21 3FF8 0F 0F 0F 0F 0F	    :5  dta DL_MODE_320x192G2
    23 3FFD 41 AC 3F		        dta DL_JVB, A(dl_start)
    23 					.print '$R RCASM   ',main.DLIST_ADDR,'..',main.DLIST_ADDR+len-1," 'resources/dlist.asm'"
    23 				$R RCASM   $3FAC..$3FFF 'resources/dlist.asm'
    25 02E2-02E3> 75 80			ini mcpy
Source: MIDICar Player.a65
   112 80EA				RCDATA 'resources/graph.obj' SCREEN_HEAD 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 03E8			len = .filesize('resources/graph.obj')-0
    28 80EA				org main.SCREEN_HEAD
    30 3400-37E7> 07 FF FF FF + 	ins 'resources/graph.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_HEAD,'..',*-1," 'resources/graph.obj'"
    32 				$R RCDATA  $3400..$37E7 'resources/graph.obj'
Source: MIDICar Player.a65
   113 37E8				RCDATA 'resources/uvmeter.obj' UVMETER_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0040			len = .filesize('resources/uvmeter.obj')-0
    28 37E8				org main.UVMETER_ADDR
    30 3B40-3B7F> 41 41 41 41 + 	ins 'resources/uvmeter.obj',0
    32 					.print '$R RCDATA  ',main.UVMETER_ADDR,'..',*-1," 'resources/uvmeter.obj'"
    32 				$R RCDATA  $3B40..$3B7F 'resources/uvmeter.obj'
Source: MIDICar Player.a65
   114 3B80				RCDATA 'resources/help.obj' HELPSCR_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 02D0			len = .filesize('resources/help.obj')-0
    28 3B80				org main.HELPSCR_ADDR
    30 3BA0-3E6F> 4A 4E A3 AF + 	ins 'resources/help.obj',0
    32 					.print '$R RCDATA  ',main.HELPSCR_ADDR,'..',*-1," 'resources/help.obj'"
    32 				$R RCDATA  $3BA0..$3E6F 'resources/help.obj'
Source: MIDICar Player.a65
   115 				.endl
   116
   117 				; ------------------------------------------------------------
   118
   119 3E70				org CODEORIGIN
   120
   121 8000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 8000-A9A6> 00 00 02 2B + .by  $00 $00 $02 $2B $22 $00 $05 $FB  $00 $FC $00 $FD $00 $02 $45 $3A  $00 $02 $00 $00 $00 $02 $7E $7F
     2 8018 00 02 5C 5D 00 02 + .by  $00 $02 $5C $5D $00 $02 $5E $5F  $00 $05 $3B $00 $FC $00 $FD $00  $09 $4E $B0 $EC $E1 $F9 $E9 $EE
     3 8030 E7 CE 00 09 4E AE + .by  $E7 $CE $00 $09 $4E $AE $EF $80  $F3 $EF $EE $E7 $CE $00 $05 $FB  $00 $3C $00 $FD $00 $09 $4E $80
     4 8048 B0 E1 F5 F3 E5 80 + .by  $B0 $E1 $F5 $F3 $E5 $80 $CE $00  $05 $FB $00 $FC $00 $3D $00 $09  $4E $B3 $F4 $EF $F0 $F0 $E5 $E4
     5 8060 CE 00 09 4E AC EF + .by  $CE $00 $09 $4E $AC $EF $E1 $E4  $E9 $EE $E7 $80 $00 $14 $4E $A3  $E1 $EC $E3 $F5 $EC $E1 $F4 $E9
     6 8078 EE E7 80 EC E5 EE + .by  $EE $E7 $80 $EC $E5 $EE $E7 $F4  $E8 $CE $00 $13 $4E $B2 $E5 $E1  $E4 $E9 $EE $E7 $80 $E4 $E9 $F2
     7 8090 E5 E3 F4 EF F2 F9 + .by  $E5 $E3 $F4 $EF $F2 $F9 $CE $00  $14 $4E $B5 $EE $F3 $F5 $F0 $F0  $EF $F2 $F4 $E5 $E4 $80 $E6 $EF
     8 80A8 F2 ED E1 F4 CE 00 + .by  $F2 $ED $E1 $F4 $CE $00 $14 $4E  $AE $EF $F4 $80 $E5 $EE $EF $F5  $E7 $E8 $F4 $80 $ED $E5 $ED $EF
     9 80C0 F2 F9 CE 00 11 4E + .by  $F2 $F9 $CE $00 $11 $4E $AE $EF  $F4 $80 $E1 $80 $AD $A9 $A4 $A9  $80 $E6 $E9 $EC $E5 $CE $00 $0C
    10 80D8 4E A9 8F AF 80 A5 + .by  $4E $A9 $8F $AF $80 $A5 $F2 $F2  $EF $F2 $80 $83 $00 $0B $4E $A4  $E9 $F2 $E5 $E3 $F4 $EF $F2 $F9
    11 80F0 CE 00 02 44 3A 00 + .by  $CE $00 $02 $44 $3A $00 $08 $4E  $B3 $F4 $E1 $F4 $F5 $F3 $CE $00  $09 $4E $A3 $EF $F5 $EE $F4 $E5
    12 8108 F2 CE 00 03 2A 2E + .by  $F2 $CE $00 $03 $2A $2E $2A $00  $A8 $00 $0A $08 $0A $A8 $0A $00  $02 $00 $11 $80 $15 $80 $19 $80
    13 8120 1D 80		.by  $1D $80
Source: MIDICar Player.a65
   122
   123 				; ------------------------------------------------------------
   124
   125 8122			RTLIB
   126 8122				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   127
   128 				.print 'ZPAGE: ',zpage,'..',zpend-1
   128 				ZPAGE: $0080..$00D3
   129
   130 				.print 'RTLIB: ',RTLIB,'..',*-1
   130 				RTLIB: $8122..$8808
   131
   132 				; ------------------------------------------------------------
   133
   134 8809			START
   135 8809 BA				tsx
   136 880A 8E 85 A9			stx MAIN.@halt+1
   137
   138 = 0090			VLEN	= VARDATASIZE-VARINITSIZE
   139 = 0406			VADR	= DATAORIGIN+VARINITSIZE
   140
   141 					ift VADR > $BFFF
   142 					ert 'Invalid memory address range ',VADR
   143 					eli (VLEN>0) && (VLEN<=256)
   144 880D A2 70			ldx #256-VLEN
   145 880F A9 00			lda #$00
   146 8811 9D 96 03 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   147 					eli VLEN>256
   148 					@fill #VADR #VLEN #$00
   149 					eif
   150
   151 				.ifdef :psptr
   152 					mwa #PROGRAMSTACK :psptr
   153 				.fi
   154
   155 					.ifdef MAIN.@DEFINES.ROMOFF
   156 8817				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 8817			.local	rominit
     5
     6 8817 78			        sei
     7 8818 A9 00		        lda #%00000000
     8 881A 8D 0E D4		        sta NMIEN       ;$D40E
     9 881D A9 FE		        lda #%11111110
    10 881F 8D 01 D3		        sta PORTB       ;$D301
    11
    12 8822 A2 03			ldx #3
    13 8824 A0 00			ldy #0
    14 8826 EE 01 D3		mv	inc portb
    15 8829 B9 00 E0		afnt0	lda $e000,y
    16 882C CE 01 D3			dec portb
    17 882F 99 00 E0		afnt1	sta $e000,y
    18 8832 C8				iny
    19 8833 D0 F1			bne mv
    20 8835 EE 2B 88			inc afnt0+2
    21 8838 EE 31 88			inc afnt1+2
    22 883B CA				dex
    23 883C 10 E8			bpl mv
    24
    25 883E A2 5B		        ldx #<nmiint
    26 8840 A0 88		        ldy #>nmiint
    27 8842 8E FA FF		        stx NMIVEC      ;$FFFA
    28 8845 8C FB FF		        sty NMIVEC+1
    29
    30 8848 A2 65		        ldx #<irqint
    31 884A A0 88		        ldy #>irqint
    32 884C 8E FE FF		        stx IRQVEC      ;$FFFE
    33 884F 8C FF FF		        sty IRQVEC+1
    34
    35 8852 A9 40		        lda #%01000000
    36 8854 8D 0E D4		        sta NMIEN       ;$D40E
    37 8857 58			        cli
    38
    39 8858 4C 86 88			jmp skp
    40
    41
    42
    43 885B 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 885E 10 03		        spl
    45 8860 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 8863 38			        sec
    48 8864 24			        .byte $24        ;BIT $18
    49
    50 8865 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 8866 EE 01 D3		        inc PORTB       ;$D301
    55
    56 8869 48			        pha
    57 886A 8A			        txa
    58 886B 48			        pha
    59 886C BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 886D A9 88		        lda #>iret      ;adres procedury iret
    64 886F 48			        pha
    65 8870 A9 7F		        lda #<iret
    66 8872 48			        pha
    67 8873 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 8876 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 8877 90 03		        scc
    73 8879 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 887C 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 887F 68			iret	pla
    77 8880 AA				tax
    78 8881 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 8882 CE 01 D3		        dec PORTB       ;$D301
    83 8885 40			        rti
    84
    85 8886			skp
    86
    87 				.endl
    88
   157 					.fi
   158
   159 8886 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   160 8888 BD 40 03 9D 8D A9 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   161
   162 8891 E8				inx						; X = 0
   163 8892 86 80			stx bp						; BP = 0
   164
   165 8894 8E 0F D2			stx skctl					; reset POKEY
   166 8897 A9 03			lda #3
   167 8899 8D 0F D2			sta skctl
   168
   169 889C CA				dex						; X = 255
   170
   171 889D				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
    19 889D 20 4B 94			jsr MAIN.MIDFILES.@UnitInit
   172
   173 88A0			.local	MAIN						; PROCEDURE
   174
   175 88A0 4C 08 A7			jmp l_0117
   176
   177 				; ------------------------------------------------------------
   178
   179 88A3			.local	SYSTEM						; UNIT
   180
   181 88A3			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   182
   183 				; ------------------------------------------------------------
   184
   185 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   186 				; as Pointer
   187 88A3 B5 94			lda :STACKORIGIN,x
   188 88A5 85 88			sta A
   189 88A7 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   190 88A9 85 89			sta A+1
   191 88AB CA				dex
   192 88AC 10 03 4C B6 88		jmi @main
   193
   194 				; ------------------------------------------------------------
   195
   196 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   197 				; as Pointer
   198 88B1 B5 94			lda :STACKORIGIN,x
   199 88B3 85 8C			sta VALUE
   200 88B5 CA				dex
   201 88B6			@main
   202
   203 				; -------------------  ASM Block 00000018  -------------------
   204
   205 88B6 A0 00			ldy #0
   206 88B8 A5 8C 91 88			mva value (:edx),y
   207
   208 				; ------------------------------------------------------------
   209
   210 = 0088			A	= :EDX
   211 = 008C			VALUE	= :ECX
   212 88BC			@exit
   213 					.ifdef @new
   214 					lda <@VarData
   215 					sta :ztmp
   216 					lda >@VarData
   217 					ldy #@VarDataSize-1
   218 					jmp @FreeMem
   219 					els
   220 88BC 60				rts						; ret
   221 					eif
   222 				.endl
   223
   224 88BD			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   225
   226 				; ------------------------------------------------------------
   227
   228 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   229 				; as Pointer
   230 88BD B5 94			lda :STACKORIGIN,x
   231 88BF 85 88			sta A
   232 88C1 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   233 88C3 85 89			sta A+1
   234 88C5 CA				dex
   235 88C6 30 09			jmi @main
   236
   237 				; ------------------------------------------------------------
   238
   239 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   240 				; as Pointer
   241 88C8 B5 94			lda :STACKORIGIN,x
   242 88CA 85 8C			sta VALUE
   243 88CC B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   244 88CE 85 8D			sta VALUE+1
   245 88D0 CA				dex
   246 88D1			@main
   247
   248 				; -------------------  ASM Block 00000019  -------------------
   249
   250 88D1 A0 00			ldy #0
   251 88D3 A5 8C 91 88			mva value (:edx),y
   252 88D7 C8				iny
   253 88D8 A5 8D 91 88			mva value+1 (:edx),y
   254
   255 				; ------------------------------------------------------------
   256
   257 = 0088			A	= :EDX
   258 = 008C			VALUE	= :ECX
   259 88DC			@exit
   260 					.ifdef @new
   261 					lda <@VarData
   262 					sta :ztmp
   263 					lda >@VarData
   264 					ldy #@VarDataSize-1
   265 					jmp @FreeMem
   266 					els
   267 88DC 60				rts						; ret
   268 					eif
   269 				.endl
   270
   271 88DD			.local	FILLCHAR_0161					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   272
   273 					.MACRO m@INLINE
   274 				
   275 				; -------------------  ASM Block 00000021  -------------------
   276 				
   277 					jsr @fill
   278 				
   279 					.ENDM
   280
   281 				; ------------------------------------------------------------
   282
   283 = 0088			A	= :EDX
   284 = 008C			COUNT	= :ECX
   285 = 0084			VALUE	= :EAX
   286 88DD			@exit
   287 				.endl
   288
   289 88DD			.local	FILLCHAR_0162					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   290
   291 					.MACRO m@INLINE
   292 				
   293 				; -------------------  ASM Block 00000024  -------------------
   294 				
   295 					jsr @fill
   296 				
   297 					.ENDM
   298
   299 				; ------------------------------------------------------------
   300
   301 = 0088			A	= :EDX
   302 = 008C			COUNT	= :ECX
   303 = 0084			VALUE	= :EAX
   304 88DD			@exit
   305 				.endl
   306
   307 88DD			.local	MOVE_0163					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   308
   309 					.MACRO m@INLINE
   310 				
   311 				; -------------------  ASM Block 00000026  -------------------
   312 				
   313 					jsr @move
   314 				
   315 					.ENDM
   316
   317 				; ------------------------------------------------------------
   318
   319 = 0088			SOURCE	= :EDX
   320 = 008C			DEST	= :ECX
   321 = 0084			COUNT	= :EAX
   322 88DD			@exit
   323 				.endl
   324
   325 88DD			.local	MOVE_0164					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   326
   327 					.MACRO m@INLINE
   328 				
   329 				; -------------------  ASM Block 00000028  -------------------
   330 				
   331 					jsr @move
   332 				
   333 					.ENDM
   334
   335 				; ------------------------------------------------------------
   336
   337 = 0088			SOURCE	= :EDX
   338 = 008C			DEST	= :ECX
   339 = 0084			COUNT	= :EAX
   340 88DD			@exit
   341 				.endl
   342
   343 88DD			.local	RANDOM_0183					; FUNCTION | ASSEMBLER | OVERLOAD
   344 88DD 8D 0B 04			sta RANGE
   345
   346 				; -------------------  ASM Block 00000041  -------------------
   347
   348
   349 				;BYTE FUNC Rand(BYTE range)
   350 				; returns random number between 0 and
   351 				; range-1.  If range=0, then a random
   352 				; number between 0 and 255 is returned
   353
   354 88E0 AC 0A D2		  ldy $d20a   ; RANDOM
   355
   356 88E3 AD 0B 04		  lda range
   357 88E6 F0 08		  beq stop
   358
   359 88E8 85 8C		  sta :ecx
   360 88EA 84 84		  sty :eax
   361
   362 88EC 20 D2 82		  jsr imulCL
   363 88EF A8			  tay
   364
   365 88F0 8C 0C 04		stop  sty Result
   366
   367
   368 88F3			@exit
   369
   370 				; ------------------------------------------------------------
   371
   372 = 040B			RANGE	= DATAORIGIN+$000B
   373 = 040C			RESULT	= DATAORIGIN+$000C
   374
   375 = 040B			@VarData	= RANGE
   376 = 0001			@VarDataSize	= 1
   377
   378 88F3 60				rts						; ret
   379 				.endl
   380
   381 				; ------------------------------------------------------------
   382
   383 = 0101			__PORTB_BANKS	= $0101
   384 = 0648			M_PI_2	= $0648
   385 = 0192			D_PI_2	= $0192
   386 = 0004			D_PI_180	= $04
   387 = 0000			MGTIA	= $00
   388 = 0080			MVBXE	= $80
   389 = 0000			VBXE_XDLADR	= $00
   390 = 00E0			VBXE_BCBTMP	= $E0
   391 = 0100			VBXE_BCBADR	= $0100
   392 = 1000			VBXE_MAPADR	= $1000
   393 = 1000			VBXE_CHBASE	= $1000
   394 = 5000			VBXE_OVRADR	= $5000
   395 = B000			VBXE_WINDOW	= $B000
   396 = 0000			IDLI	= $00
   397 = 0001			IVBL	= $01
   398 = 0002			ITIM1	= $02
   399 = 0003			ITIM2	= $03
   400 = 0004			ITIM4	= $04
   401 = 00FE			CH_DELCHR	= $FE
   402 = 009B			CH_ENTER	= $9B
   403 = 001B			CH_ESC	= $1B
   404 = 001C			CH_CURS_UP	= $1C
   405 = 001D			CH_CURS_DOWN	= $1D
   406 = 001E			CH_CURS_LEFT	= $1E
   407 = 001F			CH_CURS_RIGHT	= $1F
   408 = 007F			CH_TAB	= $7F
   409 = 009B			CH_EOL	= $9B
   410 = 007D			CH_CLR	= $7D
   411 = 00FD			CH_BELL	= $FD
   412 = 007E			CH_DEL	= $7E
   413 = 009C			CH_DELLINE	= $9C
   414 = 009D			CH_INSLINE	= $9D
   415 = 0000			PAL_PMCOLOR0	= $00
   416 = 0001			PAL_PMCOLOR1	= $01
   417 = 0002			PAL_PMCOLOR2	= $02
   418 = 0003			PAL_PMCOLOR3	= $03
   419 = 0004			PAL_COLOR0	= $04
   420 = 0005			PAL_COLOR1	= $05
   421 = 0006			PAL_COLOR2	= $06
   422 = 0007			PAL_COLOR3	= $07
   423 = 0008			PAL_COLBAK	= $08
   424 = 0000			COLOR_BLACK	= $00
   425 = 000E			COLOR_WHITE	= $0E
   426 = 0032			COLOR_RED	= $32
   427 = 0096			COLOR_CYAN	= $96
   428 = 0068			COLOR_VIOLET	= $68
   429 = 00C4			COLOR_GREEN	= $C4
   430 = 0074			COLOR_BLUE	= $74
   431 = 00EE			COLOR_YELLOW	= $EE
   432 = 0028			COLOR_ORANGE	= $28
   433 = 00E4			COLOR_BROWN	= $E4
   434 = 003C			COLOR_LIGHTRED	= $3C
   435 = 0004			COLOR_GRAY1	= $04
   436 = 0006			COLOR_GRAY2	= $06
   437 = 000A			COLOR_GRAY3	= $0A
   438 = 00CC			COLOR_LIGHTGREEN	= $CC
   439 = 007C			COLOR_LIGHTBLUE	= $7C
   440 = 0004			FMOPENREAD	= $04
   441 = 0008			FMOPENWRITE	= $08
   442 = 0009			FMOPENAPPEND	= $09
   443 = 000C			FMOPENREADWRITE	= $0C
   444 = 0400			SCREENWIDTH	= DATAORIGIN+$0000
   445 = 0402			SCREENHEIGHT	= DATAORIGIN+$0002
   446 = 0404			DATESEPARATOR	= DATAORIGIN+$0004
   447 = D20A			RND	= $D20A
   448 = 02C0			adr.PALETTE	= $02C0
   449 88F4			.var PALETTE	= adr.PALETTE .word
   450 = D012			adr.HPALETTE	= $D012
   451 88F4			.var HPALETTE	= adr.HPALETTE .word
   452 = 0405			FILEMODE	= DATAORIGIN+$0005
   453 = 0406			GRAPHMODE	= DATAORIGIN+$0006
   454 = 0407			IORESULT	= DATAORIGIN+$0007
   455 = 0408			EOLN	= DATAORIGIN+$0008
   456 = 0409			RNDSEED	= DATAORIGIN+$0009
   457
   458 = 88F4 C0 02		PALETTE
   458 = 88F6 12 D0		HPALETTE
   458 				.endl							; UNIT SYSTEM
   459
   460 				; ------------------------------------------------------------
   461
   462 88F8			.local	MC6850						; UNIT
   463
   464 88F8			.local	MC6850_INIT					; PROCEDURE | ASSEMBLER | KEEP
   465 88F8 8D 0D 04			sta SETUP
   466
   467 				; -------------------  ASM Block 00000051  -------------------
   468
   469 88FB AD 0D 04		    lda setup
   470 88FE 8D 00 D5		    sta MCBaseState:$d500
   471
   472 				; ------------------------------------------------------------
   473
   474 = 040D			SETUP	= DATAORIGIN+$000D
   475
   476 = 040D			@VarData	= SETUP
   477 = 0001			@VarDataSize	= 1
   478
   479 8901			@exit
   480 					.ifdef @new
   481 					lda <@VarData
   482 					sta :ztmp
   483 					lda >@VarData
   484 					ldy #@VarDataSize-1
   485 					jmp @FreeMem
   486 					els
   487 8901 60				rts						; ret
   488 					eif
   489 				.endl
   490
   491 8902			.local	MC6850_SEND2					; PROCEDURE | ASSEMBLER | KEEP
   492
   493 				; -------------------  ASM Block 00000052  -------------------
   494
   495 8902			wait:
   496 8902 AD 00 D5		    lda MCBaseState:$d500
   497 8905 29 02		    and #TDRE
   498 8907 D0 F9		    bne wait
   499
   500 8909 A5 FF		    lda MC_Byte
   501 890B 8D 00 D5		    sta MCBaseBuf:$d500
   502
   503 890E			@exit
   504 					.ifdef @new
   505 					lda <@VarData
   506 					sta :ztmp
   507 					lda >@VarData
   508 					ldy #@VarDataSize-1
   509 					jmp @FreeMem
   510 					els
   511 890E 60				rts						; ret
   512 					eif
   513 				.endl
   514
   515 				; ------------------------------------------------------------
   516
   517 = 0001			CR0	= $01
   518 = 0002			CR1	= $02
   519 = 0004			CR2	= $04
   520 = 0008			CR3	= $08
   521 = 0010			CR4	= $10
   522 = 0020			CR5	= $20
   523 = 0040			CR6	= $40
   524 = 0080			CR7	= $80
   525 = 0000			CD_1	= $00
   526 = 0001			CD_16	= $01
   527 = 0002			CD_64	= $02
   528 = 0003			MASTERRESET	= $03
   529 = 0000			WS_7BITS	= $00
   530 = 0010			WS_8BITS	= $10
   531 = 0000			WS_2BITSTOP	= $00
   532 = 0008			WS_1BITSTOP	= $08
   533 = 0000			WS_EVENPARITY	= $00
   534 = 0004			WS_ODDPARITY	= $04
   535 = 0000			TC_RTSLOW_NOTIRQ	= $00
   536 = 0020			TC_RTSLOW_TIRQ	= $20
   537 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   538 = 0060			TC_BREAKLEVEL	= $60
   539 = 0000			NOIRQ_RECEIVE	= $00
   540 = 0080			IRQ_RECEIVE	= $80
   541 = 0001			RDRF	= $01
   542 = 0002			TDRE	= $02
   543 = 0004			DCD	= $04
   544 = 0008			CTS	= $08
   545 = 0010			FE	= $10
   546 = 0020			OVRN	= $20
   547 = 0040			PE	= $40
   548 = 0080			IRQ	= $80
   549 = 00FF			MC_BYTE	= $FF
   550
   551 				.endl							; UNIT MC6850
   552
   553 				; ------------------------------------------------------------
   554
   555 890F			.local	MIDI_FIFO					; UNIT
   556
   557 890F			.local	FIFO_RESET					; PROCEDURE
   558
   559 				; optimize OK (MIDI_FIFO), line = 30
   560
   561 890F A9 00			lda #$00
   562 8911 85 FD			sta FIFO_HEAD
   563
   564 				; optimize OK (MIDI_FIFO), line = 31
   565
   566 8913 85 FE			sta FIFO_TAIL
   567 8915			@exit
   568 					.ifdef @new
   569 					lda <@VarData
   570 					sta :ztmp
   571 					lda >@VarData
   572 					ldy #@VarDataSize-1
   573 					jmp @FreeMem
   574 					els
   575 8915 60				rts						; ret
   576 					eif
   577 				.endl
   578
   579 8916			.local	FIFO_PUSHDIRECT2MC6850				; PROCEDURE | ASSEMBLER
   580
   581 				; -------------------  ASM Block 00000053  -------------------
   582
   583 8916 A4 FE		  ldy FIFO_Tail
   584 8918 C4 FD		  cpy FIFO_Head
   585 891A F0 0F		  beq exitPush
   586
   587 891C AD 00 D5		  lda MCBaseState:$d500 // MC6850.MC6850_CNTRREG
   588 891F 29 02		  and #MC6850.TDRE
   589 8921 F0 08		  beq exitPush
   590
   591 8923 B9 00 06		  lda FIFO_ADDR,y
   592 8926 8D 00 D5		  sta MCBaseBuf:$d500  //MC6850.MC6850_BUFFER
   593 8929 E6 FE		  inc FIFO_Tail
   594
   595 892B			exitPush:
   596
   597 892B			@exit
   598 					.ifdef @new
   599 					lda <@VarData
   600 					sta :ztmp
   601 					lda >@VarData
   602 					ldy #@VarDataSize-1
   603 					jmp @FreeMem
   604 					els
   605 892B 60				rts						; ret
   606 					eif
   607 				.endl
   608
   609 892C			.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER
   610
   611 				; -------------------  ASM Block 00000054  -------------------
   612
   613 892C A5 FD		  lda FIFO_Head
   614 892E 18			  clc
   615 892F 69 01		  adc #1
   616 8931 C5 FE		  cmp FIFO_Tail
   617 8933 D0 03		  bne storeInFIFO
   618
   619 8935 20 45 89		  jsr FIFO_Flush
   620
   621 8938			storeInFIFO:
   622 8938 A4 FD		  ldy FIFO_Head
   623 893A A5 FF		  lda FIFO_Byte
   624 893C 99 00 06		  sta FIFO_ADDR,y
   625 893F E6 FD		  inc FIFO_Head
   626
   627 8941 20 16 89		  jsr FIFO_PushDirect2MC6850
   628 8944			exitWrite:
   629
   630 8944			@exit
   631 					.ifdef @new
   632 					lda <@VarData
   633 					sta :ztmp
   634 					lda >@VarData
   635 					ldy #@VarDataSize-1
   636 					jmp @FreeMem
   637 					els
   638 8944 60				rts						; ret
   639 					eif
   640 				.endl
   641
   642 8945			.local	FIFO_FLUSH					; PROCEDURE | ASSEMBLER | KEEP
   643
   644 				; -------------------  ASM Block 00000055  -------------------
   645
   646 8945 78			  sei
   647 				  // lda _timerStatus
   648 				  // eor #$80
   649 				  // sta _timerStatus
   650
   651 8946 A4 FE		  ldy FIFO_Tail
   652 8948			flushLoop:
   653 8948 C4 FD		  cpy FIFO_Head
   654 894A F0 11		  beq endFlush
   655
   656 894C			waitOnMC:
   657 894C AD 00 D5		  lda MCBaseState:$d500 // MC6850.MC6850_CNTRReg
   658 894F 29 02		  and #MC6850.TDRE
   659 8951 F0 F9		  beq waitOnMc
   660
   661 8953 B9 00 06		  lda FIFO_ADDR,y
   662 8956 8D 00 D5		  sta MCBaseBuf:$d500   // MC6850.MC6850_BUFFER
   663
   664 8959 C8			  iny
   665 895A 4C 48 89		  jmp flushLoop
   666
   667 895D			endFlush:
   668 895D 84 FE		  sty FIFO_Tail
   669
   670 895F 58			  cli
   671 				  // lda _timerStatus
   672 				  // eor #$80
   673 				  // sta _timerStatus
   674
   675 8960			@exit
   676 					.ifdef @new
   677 					lda <@VarData
   678 					sta :ztmp
   679 					lda >@VarData
   680 					ldy #@VarDataSize-1
   681 					jmp @FreeMem
   682 					els
   683 8960 60				rts						; ret
   684 					eif
   685 				.endl
   686
   687 				; ------------------------------------------------------------
   688
   689 = 00FD			FIFO_HEAD	= $FD
   690 = 00FE			FIFO_TAIL	= $FE
   691 = 00FF			FIFO_BYTE	= $FF
   692 = 040E			FIFO2NULL	= DATAORIGIN+$000E
   693 = 0600			FIFO_ADDR	= $0600
   694 = 0600			adr.FIFO_BUF	= $0600
   695 8961			.var FIFO_BUF	= adr.FIFO_BUF .word
   696 = 00F5			_TIMERSTATUS	= $F5
   697
   698 = 8961 00 06		FIFO_BUF
   698 				.endl							; UNIT MIDI_FIFO
   699
   700 				; ------------------------------------------------------------
   701
   702 8963			.local	CIO						; UNIT
   703
   704 8963			.local	OPN						; PROCEDURE | ASSEMBLER
   705
   706 				; -------------------  ASM Block 00000056  -------------------
   707
   708 8963 8A 48			txa:pha
   709
   710 8965 AD 0F 04			lda chn
   711 8968 0A 0A 0A 0A			:4 asl @
   712 896C AA				tax
   713
   714 896D A9 03			lda #$03		;komenda: OPEN
   715 896F 9D 42 03			sta iccmd,x
   716
   717 8972 EE 12 04 D0 03 EE + 	inw device		;omin bajt z dlugoscia STRING-a
   718
   719 897A AD 12 04			lda device		;adres nazwy pliku
   720 897D 9D 44 03			sta icbufa,x
   721 8980 AD 13 04			lda device+1
   722 8983 9D 45 03			sta icbufa+1,x
   723
   724 8986 AD 10 04			lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
   725 8989 9D 4A 03			sta icax1,x
   726
   727 898C AD 11 04			lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
   728 898F 9D 4B 03			sta icax2,x
   729
   730 8992				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8992 EE 01 D3				inc portb
     6 8995 20 56 E4				jsr CIOV
     8 8998 CE 01 D3				dec portb
   731
   732 899B 8C 07 04			sty MAIN.SYSTEM.IOResult
   733
   734 899E 68 AA			pla:tax
   735
   736 				; ------------------------------------------------------------
   737
   738 = 040F			CHN	= DATAORIGIN+$000F
   739 = 0410			AX1	= DATAORIGIN+$0010
   740 = 0411			AX2	= DATAORIGIN+$0011
   741 = 0412			DEVICE	= DATAORIGIN+$0012
   742
   743 = 040F			@VarData	= CHN
   744 = 0005			@VarDataSize	= 5
   745
   746 89A0			@exit
   747 					.ifdef @new
   748 					lda <@VarData
   749 					sta :ztmp
   750 					lda >@VarData
   751 					ldy #@VarDataSize-1
   752 					jmp @FreeMem
   753 					els
   754 89A0 60				rts						; ret
   755 					eif
   756 				.endl
   757
   758 89A1			.local	CLS						; PROCEDURE | ASSEMBLER
   759 89A1 8D 14 04			sta CHN
   760
   761 				; -------------------  ASM Block 00000057  -------------------
   762
   763 89A4 8A 48			txa:pha
   764
   765 89A6 AD 14 04			lda chn
   766 89A9 0A 0A 0A 0A			:4 asl @
   767 89AD AA				tax
   768
   769 89AE A9 0C			lda #$0c		;komenda: CLOSE
   770 89B0 9D 42 03			sta iccmd,x
   771
   772 89B3				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 89B3 EE 01 D3				inc portb
     6 89B6 20 56 E4				jsr CIOV
     8 89B9 CE 01 D3				dec portb
   773
   774 89BC 8C 07 04			sty MAIN.SYSTEM.IOResult
   775
   776 89BF 68 AA			pla:tax
   777
   778 				; ------------------------------------------------------------
   779
   780 = 0414			CHN	= DATAORIGIN+$0014
   781
   782 = 0414			@VarData	= CHN
   783 = 0001			@VarDataSize	= 1
   784
   785 89C1			@exit
   786 					.ifdef @new
   787 					lda <@VarData
   788 					sta :ztmp
   789 					lda >@VarData
   790 					ldy #@VarDataSize-1
   791 					jmp @FreeMem
   792 					els
   793 89C1 60				rts						; ret
   794 					eif
   795 				.endl
   796
   797 89C2			.local	BGET						; PROCEDURE | ASSEMBLER | REGISTER
   798
   799 				; -------------------  ASM Block 00000059  -------------------
   800
   801 89C2 8A 48			txa:pha
   802
   803 89C4 A5 88			lda chn
   804 89C6 0A 0A 0A 0A			:4 asl @
   805 89CA AA				tax
   806
   807 89CB A9 07			lda #7		;get char/s command
   808 89CD 9D 42 03			sta iccmd,x
   809
   810 89D0 A5 8C			lda buf
   811 89D2 9D 44 03			sta icbufa,x
   812 89D5 A5 8D			lda buf+1
   813 89D7 9D 45 03			sta icbufa+1,x
   814
   815 89DA A5 84			lda cnt
   816 89DC 9D 48 03			sta icbufl,x
   817 89DF A5 85			lda cnt+1
   818 89E1 9D 49 03			sta icbufh,x
   819
   820 89E4				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 89E4 EE 01 D3				inc portb
     6 89E7 20 56 E4				jsr CIOV
     8 89EA CE 01 D3				dec portb
   821
   822 89ED 8C 07 04			sty MAIN.SYSTEM.IOResult
   823
   824 89F0 68 AA			pla:tax
   825
   826 				; ------------------------------------------------------------
   827
   828 = 0088			CHN	= :EDX
   829 = 008C			BUF	= :ECX
   830 = 0084			CNT	= :EAX
   831 89F2			@exit
   832 					.ifdef @new
   833 					lda <@VarData
   834 					sta :ztmp
   835 					lda >@VarData
   836 					ldy #@VarDataSize-1
   837 					jmp @FreeMem
   838 					els
   839 89F2 60				rts						; ret
   840 					eif
   841 				.endl
   842
   843 				; ------------------------------------------------------------
   844
   845 				.endl							; UNIT CIO
   846
   847 				; ------------------------------------------------------------
   848
   849 89F3			.local	MIDFILES					; UNIT
   850
   851 89F3			.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT
   852
   853 				; -------------------  ASM Block 00000066  -------------------
   854
   855 89F3			  icl 'midfile/asms/int_timer.a65'
Source: int_timer.a65
     1 89F3 A5 F5		    lda _timerStatus
     2 89F5 30 1E		    bmi skip
     3
     4 89F7			doSubTick:
     5 89F7 29 0F		    and #f_ratio
     6 89F9 C5 F4		    cmp _subCnt
     7 89FB F0 04		    beq doMainTick
     8
     9 89FD E6 F4		    inc _subCnt
    10 89FF 70 14		    bvs skip
    11
    12 8A01			doMainTick:
    13 8A01 A9 01		    lda #1
    14 8A03 85 F4		    sta _subCnt
    15
    16 8A05 A5 F5		    lda _timerStatus
    17 8A07 09 40		    ora #f_tick
    18 8A09 85 F5		    sta _timerStatus
    19
    20 8A0B E6 F0		    inc _totalTicks
    21 8A0D D0 06		    bne skip
    22 8A0F E6 F1		    inc _totalTicks+1
    23 8A11 D0 02		    bne skip
    24 8A13 E6 F2		    inc _totalTicks+2
    25 				    // bne skip
    26 				    // inc _totalTicks+3
    27
    28 8A15			skip:
    29
    30 				//   sty regy
    31
    32 				//   ldy MIDI_FIFO.FIFO_Tail
    33 				//   cpy MIDI_FIFO.FIFO_Head
    34 				//   beq fifo_end
    35
    36 				//   lda MC6850.MC6850_CNTRREG
    37 				//   and #MC6850.TDRE
    38 				//   beq fifo_end
    39
    40 				//   lda MIDI_FIFO.FIFO_ADDR,y
    41 				//   sta MC6850.MC6850_BUFFER
    42
    43 				//   inc MIDI_FIFO.FIFO_Tail
    44
    45 				// fifo_end:
    46 				//   ldy regy:#$00
    47
    48 8A15 68			  pla
   856
   857 8A16 40				rti						; ret
   858 				.endl
   859
   860 8A17			.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER
   861
   862 				; -------------------  ASM Block 00000067  -------------------
   863
   864 8A17			  icl 'midfile/asms/memory_bound_check.a65'
Source: memory_bound_check.a65
     1 8A17 A5 E2		  lda _adr            // get LSB of address
     2 8A19 F0 01		  beq checkMemType    // zero means, we crossing the page. Check block bounds
     3 8A1B 60			  rts
     4
     5 8A1C			checkMemType
     6 8A1C A5 E3		  lda _adr+1          // get MSB of address
     7 8A1E A4 E1		  ldy _bank           // get current bank index
     8 8A20 D0 17		  bne checkXMSBound   // zero, means we checking bounds in base memory
     9 				                      // otherwise, we checking bound of extended memory
    10
    11 				// base memory bounds check
    12 				// 1nd, $d800..$ff00
    13 8A22			check1Bound:
    14 8A22 C9 FF		  cmp #$ff
    15 8A24 D0 05		  bne check2Bound
    16
    17 8A26 A9 AA		  lda #$aa
    18 8A28 85 E3		  sta _adr+1
    19 8A2A 60			  rts
    20
    21 				// 2st, $aa00..$d000
    22 8A2B			check2bound:
    23 8A2B C9 D0		  cmp #$d0
    24 8A2D D0 05		  bne check3Bound
    25
    26 8A2F A9 40		  lda #$40
    27 8A31 85 E3		  sta _adr+1
    28 8A33 60			  rts
    29
    30 				// 3nd, $4000..$8000
    31 8A34			check3Bound
    32 8A34 C9 80		  cmp #$80
    33 8A36 F0 22		  beq outOfMem
    34 8A38 60			  rts
    35
    36 				// extended memory bound check
    37
    38 8A39			checkXMSBound         // extender memory window $4000..$7fff
    39 8A39 C9 80		  cmp #$80            // the bank's memory area ends at $7fff
    40 8A3B F0 01		  beq switchXMSBank   // if MSB addres is out of this address, we need switch bank
    41
    42 8A3D 60			  rts
    43
    44 8A3E			switchXMSBank:
    45 8A3E 88			  dey             // decrement current bank index
    46 8A3F F0 0D		  beq switch2Conv // if zero, meand we back to conventional memory
    47
    48 8A41 B9 00 01		  lda $100,y      // get bank set
    49 8A44 84 E1		  sty _bank       // store current bank index
    50 8A46 8D 01 D3		  sta PORTB       // set PORTB (switch bank)
    51 8A49 A9 40		  lda #$40        // set MSB address to the begining of bank
    52 8A4B 85 E3		  sta _adr+1
    53 8A4D 60			  rts
    54
    55 8A4E			switch2Conv:
    56 8A4E 84 E1		  sty _bank
    57 8A50 A9 FE		  lda #$fe        // switch to conventional memory and turn off ROM
    58 8A52 8D 01 D3		  sta PORTB
    59 8A55 A9 D8		  lda #$d8        // set MSB address
    60 8A57 85 E3		  sta _adr+1
    61 8A59 60			  rts
    62
    63 8A5A			outOfMem:
    64 8A5A A9 65		  lda #ERR_NOT_ENOUGHT_MEMORY
    65 8A5C 8D 07 04		  sta SYSTEM.IOResult
   865
   866 8A5F			@exit
   867 					.ifdef @new
   868 					lda <@VarData
   869 					sta :ztmp
   870 					lda >@VarData
   871 					ldy #@VarDataSize-1
   872 					jmp @FreeMem
   873 					els
   874 8A5F 60				rts						; ret
   875 					eif
   876 				.endl
   877
   878 8A60			.local	LOADMID						; FUNCTION
   879
   880 8A60 4C 71 8B			jmp l_01B7
   881
   882 8A63			.local	READWORDBI					; FUNCTION
   883
   884 				; optimize OK (bigendian.inc), line = 3
   885
   886 8A63 A9 01			lda #$01
   887 8A65 85 88			sta CIO.BGET.CHN
   888 8A67 A9 41			lda <RESULT
   889 8A69 85 8C			sta CIO.BGET.BUF
   890 8A6B A9 04			lda >RESULT
   891 8A6D 85 8D			sta CIO.BGET.BUF+1
   892 8A6F A9 02			lda #$02
   893 8A71 85 84			sta CIO.BGET.CNT
   894 8A73 A9 00			lda #$00
   895 8A75 85 85			sta CIO.BGET.CNT+1
   896 8A77 20 C2 89			jsr CIO.BGET
   897
   898 				; -------------------  ASM Block 00000068  -------------------
   899
   900 8A7A AE 41 04		    ldx result
   901 8A7D AC 42 04		    ldy result+1
   902 8A80 8E 42 04		    stx result+1
   903 8A83 8C 41 04		    sty result
   904 				  
   905 8A86			@exit
   906
   907 				; ------------------------------------------------------------
   908
   909 = 0441			RESULT	= DATAORIGIN+$0041
   910 8A86 60				rts						; ret
   911 				.endl
   912
   913 8A87			.local	READLONGBI					; FUNCTION
   914
   915 				; optimize OK (bigendian.inc), line = 15
   916
   917 8A87 A9 01			lda #$01
   918 8A89 85 88			sta CIO.BGET.CHN
   919 8A8B A9 43			lda <RESULT
   920 8A8D 85 8C			sta CIO.BGET.BUF
   921 8A8F A9 04			lda >RESULT
   922 8A91 85 8D			sta CIO.BGET.BUF+1
   923 8A93 A9 04			lda #$04
   924 8A95 85 84			sta CIO.BGET.CNT
   925 8A97 A9 00			lda #$00
   926 8A99 85 85			sta CIO.BGET.CNT+1
   927 8A9B 20 C2 89			jsr CIO.BGET
   928
   929 				; -------------------  ASM Block 00000069  -------------------
   930
   931 8A9E AE 43 04		    ldx result
   932 8AA1 AC 46 04		    ldy result+3
   933 8AA4 8E 46 04		    stx result+3
   934 8AA7 8C 43 04		    sty result
   935
   936 8AAA AE 44 04		    ldx result+1
   937 8AAD AC 45 04		    ldy result+2
   938 8AB0 8E 45 04		    stx result+2
   939 8AB3 8C 44 04		    sty result+1
   940 				  
   941 8AB6			@exit
   942
   943 				; ------------------------------------------------------------
   944
   945 = 0443			RESULT	= DATAORIGIN+$0043
   946 8AB6 60				rts						; ret
   947 				.endl
   948
   949 8AB7			.local	_BGET						; PROCEDURE
   950
   951 				; optimize OK (loadmid.inc), line = 18
   952
   953 8AB7 A9 01			lda #$01
   954 8AB9 85 88			sta CIO.BGET.CHN
   955 8ABB AD 47 04			lda DEST
   956 8ABE 85 8C			sta CIO.BGET.BUF
   957 8AC0 AD 48 04			lda DEST+1
   958 8AC3 85 8D			sta CIO.BGET.BUF+1
   959 8AC5 A5 D6			lda LOADSIZE
   960 8AC7 85 84			sta CIO.BGET.CNT
   961 8AC9 A5 D7			lda LOADSIZE+1
   962 8ACB 85 85			sta CIO.BGET.CNT+1
   963 8ACD 20 C2 89			jsr CIO.BGET
   964
   965 				; ------------------------------------------------------------
   966
   967 = 0447			DEST	= DATAORIGIN+$0047
   968
   969 = 0447			@VarData	= DEST
   970 = 0002			@VarDataSize	= 2
   971
   972 8AD0			@exit
   973 					.ifdef @new
   974 					lda <@VarData
   975 					sta :ztmp
   976 					lda >@VarData
   977 					ldy #@VarDataSize-1
   978 					jmp @FreeMem
   979 					els
   980 8AD0 60				rts						; ret
   981 					eif
   982 				.endl
   983
   984 8AD1			.local	CHECKLOADSIZE					; PROCEDURE
   985
   986 				; optimize OK (loadmid.inc), line = 23
   987
   988 8AD1 A9 00			lda #$00
   989 8AD3 85 D6			sta LOADSIZE
   990 8AD5 85 D7			sta LOADSIZE+1
   991
   992 				; --- RepeatUntilProlog
   993 8AD7			l_01D9
   994
   995 				; optimize FAIL ('MEMBOUNDCHECK', loadmid.inc), line = 25
   996
   997 8AD7 20 17 8A			jsr MEMBOUNDCHECK
   998
   999 				; optimize OK (loadmid.inc), line = 26
  1000
  1001 8ADA AD 07 04			lda SYSTEM.IORESULT
  1002 8ADD C9 01			cmp #$01
  1003 8ADF F0 03			jeq l_01EC
  1004 8AE1 4C 70 8B			jmp @exit					; exit
  1005 8AE4			l_01EC
  1006
  1007 				; optimize OK (loadmid.inc), line = 28
  1008
  1009 8AE4 A5 E3			lda _ADR+1
  1010 8AE6 C9 D8			cmp #$D8
  1011 8AE8 90 0B			jcc l_0200
  1012 8AEA A9 00			lda #$00
  1013 8AEC 85 D6			sta LOADSIZE
  1014 8AEE A9 FF			lda #$FF
  1015 8AF0 85 D7			sta LOADSIZE+1
  1016 8AF2 4C 25 8B			jmp l_020E
  1017 8AF5			l_0200
  1018
  1019 				; optimize OK (loadmid.inc), line = 29
  1020
  1021 8AF5 A5 E3			lda _ADR+1
  1022 8AF7 C9 C0			cmp #$C0
  1023 8AF9 90 0B			jcc l_021F
  1024 8AFB A9 00			lda #$00
  1025 8AFD 85 D6			sta LOADSIZE
  1026 8AFF A9 D0			lda #$D0
  1027 8B01 85 D7			sta LOADSIZE+1
  1028 8B03 4C 25 8B			jmp l_022D
  1029 8B06			l_021F
  1030
  1031 				; optimize OK (loadmid.inc), line = 30
  1032
  1033 8B06 A5 E3			lda _ADR+1
  1034 8B08 C9 A8			cmp #$A8
  1035 8B0A 90 0B			jcc l_023E
  1036 8B0C A9 00			lda #$00
  1037 8B0E 85 D6			sta LOADSIZE
  1038 8B10 A9 C0			lda #$C0
  1039 8B12 85 D7			sta LOADSIZE+1
  1040 8B14 4C 25 8B			jmp l_024C
  1041 8B17			l_023E
  1042
  1043 				; optimize OK (loadmid.inc), line = 31
  1044
  1045 8B17 A5 E3			lda _ADR+1
  1046 8B19 C9 40			cmp #$40
  1047 8B1B 90 08			jcc l_025D
  1048 8B1D A9 00			lda #$00
  1049 8B1F 85 D6			sta LOADSIZE
  1050 8B21 A9 80			lda #$80
  1051 8B23 85 D7			sta LOADSIZE+1
  1052 8B25			l_025D
  1053 8B25			l_024C
  1054 8B25			l_022D
  1055 8B25			l_020E
  1056
  1057 				; optimize OK (loadmid.inc), line = 32
  1058
  1059 8B25 A5 D6			lda LOADSIZE
  1060 8B27 38 E5 E2			sub _ADR
  1061 8B2A 85 D6			sta LOADSIZE
  1062 8B2C A5 D7			lda LOADSIZE+1
  1063 8B2E E5 E3			sbc _ADR+1
  1064 8B30 85 D7			sta LOADSIZE+1
  1065
  1066 				; optimize OK (loadmid.inc), line = 33
  1067
  1068 8B32				.LOCAL
  1069 8B32 A9 00			lda #$00
  1070 8B34 38 E5 EC			sub LEN+3
  1071 8B37 D0 1C			bne L4
  1072 8B39 A9 00			lda #$00
  1073 8B3B C5 EB			cmp LEN+2
  1074 8B3D D0 0A			bne L1
  1075 8B3F A5 D7			lda LOADSIZE+1
  1076 8B41 C5 EA			cmp LEN+1
  1077 8B43 D0 04			bne L1
  1078 8B45 A5 D6			lda LOADSIZE
  1079 8B47 C5 E9			cmp LEN
  1080 8B49 F0 10		L1	beq L5
  1081 8B4B B0 04			bcs L3
  1082 8B4D A9 FF			lda #$FF
  1083 8B4F D0 0A			bne L5
  1084 8B51 A9 01		L3	lda #$01
  1085 8B53 D0 06			bne L5
  1086 8B55 50 04		L4	bvc L5
  1087 8B57 49 FF			eor #$FF
  1088 8B59 09 01			ora #$01
  1089 8B5B			L5
  1090 					.ENDL
  1091 8B5B 30 0A			jmi l_0277
  1092 8B5D F0 08			jeq l_0277
  1093 8B5F A5 E9			lda LEN
  1094 8B61 85 D6			sta LOADSIZE
  1095 8B63 A5 EA			lda LEN+1
  1096 8B65 85 D7			sta LOADSIZE+1
  1097 8B67			l_0277
  1098
  1099 				; optimize OK (loadmid.inc), line = 34
  1100
  1101 8B67 A5 D7			lda LOADSIZE+1
  1102 8B69 05 D6			ora LOADSIZE
  1103 8B6B D0 03 4C D7 8A		jeq l_01D9
  1104 8B70			@exit
  1105 					.ifdef @new
  1106 					lda <@VarData
  1107 					sta :ztmp
  1108 					lda >@VarData
  1109 					ldy #@VarDataSize-1
  1110 					jmp @FreeMem
  1111 					els
  1112 8B70 60				rts						; ret
  1113 					eif
  1114 				.endl
  1115 8B71			l_01B7
  1116
  1117 				; optimize OK (loadmid.inc), line = 38
  1118
  1119 8B71 A9 01			lda #$01
  1120 8B73 8D 0F 04			sta CIO.OPN.CHN
  1121 8B76 A9 04			lda #$04
  1122 8B78 8D 10 04			sta CIO.OPN.AX1
  1123 8B7B A9 00			lda #$00
  1124 8B7D 8D 11 04			sta CIO.OPN.AX2
  1125 8B80 AD 38 04			lda FN
  1126 8B83 8D 12 04			sta CIO.OPN.DEVICE
  1127 8B86 AD 39 04			lda FN+1
  1128 8B89 8D 13 04			sta CIO.OPN.DEVICE+1
  1129 8B8C 20 63 89			jsr CIO.OPN
  1130
  1131 				; optimize OK (loadmid.inc), line = 39
  1132
  1133 8B8F AD 07 04			lda SYSTEM.IORESULT
  1134 8B92 10 0B			jpl l_02A3
  1135
  1136 				; optimize OK (loadmid.inc), line = 41
  1137
  1138 8B94 8D 3A 04			sta RESULT
  1139
  1140 				; optimize OK (loadmid.inc), line = 42
  1141
  1142 8B97 A9 01			lda #$01
  1143 8B99 20 A1 89			jsr CIO.CLS
  1144 8B9C 4C 68 8D			jmp @exit					; exit
  1145 8B9F			l_02A3
  1146
  1147 				; optimize OK (loadmid.inc), line = 46
  1148
  1149 8B9F AD 91 94			lda MIDTRACKS
  1150 8BA2 8D 3F 04			sta TRKDATA
  1151 8BA5 AD 92 94			lda MIDTRACKS+1
  1152 8BA8 8D 40 04			sta TRKDATA+1
  1153
  1154 				; optimize OK (loadmid.inc), line = 47
  1155
  1156 8BAB A9 00			lda #$00
  1157 8BAD 85 DE			sta TRACKCOUNT
  1158
  1159 				; optimize OK (loadmid.inc), line = 48
  1160
  1161 8BAF A9 FF			lda #$FF
  1162 8BB1 8D 19 04			sta TOTALTRACKS
  1163
  1164 				; --- WhileProlog
  1165 8BB4 4C 4C 8D			jmp l_02BD
  1166 8BB7			l_02BE
  1167
  1168 				; optimize OK (loadmid.inc), line = 52
  1169
  1170 8BB7 A9 01			lda #$01
  1171 8BB9 85 88			sta CIO.BGET.CHN
  1172 8BBB A9 3B			lda <CHUNKTAG
  1173 8BBD 85 8C			sta CIO.BGET.BUF
  1174 8BBF A9 04			lda >CHUNKTAG
  1175 8BC1 85 8D			sta CIO.BGET.BUF+1
  1176 8BC3 A9 04			lda #$04
  1177 8BC5 85 84			sta CIO.BGET.CNT
  1178 8BC7 A9 00			lda #$00
  1179 8BC9 85 85			sta CIO.BGET.CNT+1
  1180 8BCB 20 C2 89			jsr CIO.BGET
  1181
  1182 				; optimize FAIL ('READLONGBI', loadmid.inc), line = 53
  1183
  1184 8BCE 20 87 8A			jsr READLONGBI
  1185 8BD1 AD 43 04			lda READLONGBI.RESULT
  1186 8BD4 85 E9			sta LEN
  1187 8BD6 AD 44 04			lda READLONGBI.RESULT+1
  1188 8BD9 85 EA			sta LEN+1
  1189 8BDB AD 45 04			lda READLONGBI.RESULT+2
  1190 8BDE 85 EB			sta LEN+2
  1191 8BE0 AD 46 04			lda READLONGBI.RESULT+3
  1192 8BE3 85 EC			sta LEN+3
  1193
  1194 				; optimize OK (loadmid.inc), line = 54
  1195
  1196 8BE5 AD 3E 04			lda CHUNKTAG+3
  1197 8BE8 49 64			eor #$64
  1198 8BEA D0 47			jne l_02D6
  1199 8BEC AD 3D 04			lda CHUNKTAG+2
  1200 8BEF 49 68			eor #$68
  1201 8BF1 D0 40			jne l_02D6
  1202 8BF3 AD 3C 04			lda CHUNKTAG+1
  1203 8BF6 49 54			eor #$54
  1204 8BF8 D0 39			jne l_02D6
  1205 8BFA AD 3B 04			lda CHUNKTAG
  1206 8BFD 49 4D			eor #$4D
  1207 8BFF D0 32			jne l_02D6
  1208
  1209 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 56
  1210
  1211 8C01 20 63 8A			jsr READWORDBI
  1212 8C04 AD 41 04			lda READWORDBI.RESULT
  1213 8C07 8D 18 04			sta FORMAT
  1214
  1215 				; optimize OK (loadmid.inc), line = 57
  1216
  1217 8C0A F0 0C			jeq l_02F9
  1218 8C0C C9 01			cmp #$01
  1219 8C0E F0 08			jeq l_02F9
  1220
  1221 				; optimize OK (loadmid.inc), line = 59
  1222
  1223 8C10 A9 64			lda #$64
  1224 8C12 8D 07 04			sta SYSTEM.IORESULT
  1225 8C15 4C 5D 8D			jmp b_02BE					; break
  1226 8C18			l_02F9
  1227
  1228 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 62
  1229
  1230 8C18 20 63 8A			jsr READWORDBI
  1231 8C1B AD 41 04			lda READWORDBI.RESULT
  1232 8C1E 8D 19 04			sta TOTALTRACKS
  1233
  1234 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 63
  1235
  1236 8C21 20 63 8A			jsr READWORDBI
  1237 8C24 AD 41 04			lda READWORDBI.RESULT
  1238 8C27 8D 1A 04			sta TICKDIV
  1239 8C2A AD 42 04			lda READWORDBI.RESULT+1
  1240 8C2D 8D 1B 04			sta TICKDIV+1
  1241 8C30 4C 4C 8D			jmp l_0311
  1242 8C33			l_02D6
  1243
  1244 				; optimize OK (loadmid.inc), line = 78
  1245
  1246 8C33 AD 3E 04			lda CHUNKTAG+3
  1247 8C36 49 6B			eor #$6B
  1248 8C38 F0 03 4C 47 8D		jne l_0321
  1249 8C3D AD 3D 04			lda CHUNKTAG+2
  1250 8C40 49 72			eor #$72
  1251 8C42 F0 03 4C 47 8D		jne l_0321
  1252 8C47 AD 3C 04			lda CHUNKTAG+1
  1253 8C4A 49 54			eor #$54
  1254 8C4C F0 03 4C 47 8D		jne l_0321
  1255 8C51 AD 3B 04			lda CHUNKTAG
  1256 8C54 49 4D			eor #$4D
  1257 8C56 F0 03 4C 47 8D		jne l_0321
  1258
  1259 				; optimize FAIL (0, loadmid.inc), line = 80
  1260
  1261 8C5B E6 DE			inc TRACKCOUNT
  1262
  1263 				; optimize OK (loadmid.inc), line = 82
  1264
  1265 8C5D AC 3F 04 84 82 AC + 	mwy TRKDATA :bp2
  1266 8C67 A0 00			ldy #$00
  1267 8C69 98				tya
  1268 8C6A 91 82			sta (:bp2),y
  1269
  1270 				; optimize OK (loadmid.inc), line = 83
  1271
  1272 8C6C A0 04			ldy #$04
  1273 8C6E 91 82			sta (:bp2),y
  1274 8C70 C8				iny
  1275 8C71 91 82			sta (:bp2),y
  1276 8C73 C8				iny
  1277 8C74 91 82			sta (:bp2),y
  1278 8C76 C8				iny
  1279 8C77 91 82			sta (:bp2),y
  1280
  1281 				; optimize OK (loadmid.inc), line = 84
  1282
  1283 8C79 A0 01			ldy #$01
  1284 8C7B A5 E1			lda _BANK
  1285 8C7D 91 82			sta (:bp2),y
  1286
  1287 				; optimize OK (loadmid.inc), line = 85
  1288
  1289 8C7F C8				iny
  1290 8C80 A5 E2			lda _ADR
  1291 8C82 91 82			sta (:bp2),y
  1292 8C84 C8				iny
  1293 8C85 A5 E3			lda _ADR+1
  1294 8C87 91 82			sta (:bp2),y
  1295
  1296 				; -------------------  ASM Block 00000070  -------------------
  1297
  1298 				 ldy _bank \ lda $100,y \ sta PORTB 
  1298 8C89 A4 E1		 LDY _BANK 
  1298 8C8B B9 00 01		 LDA $100,Y 
  1298 8C8E 8D 01 D3		 STA PORTB 
  1299 				; --- WhileProlog
  1300 8C91 4C 27 8D			jmp l_033B
  1301 8C94			l_033C
  1302
  1303 				; optimize FAIL ('CHECKLOADSIZE', loadmid.inc), line = 91
  1304
  1305 8C94 20 D1 8A			jsr CHECKLOADSIZE
  1306
  1307 				; optimize OK (loadmid.inc), line = 92
  1308
  1309 8C97 AD 07 04			lda SYSTEM.IORESULT
  1310 8C9A C9 01			cmp #$01
  1311 8C9C F0 03			jeq l_034F
  1312 8C9E 4C 36 8D			jmp b_033C					; break
  1313 8CA1			l_034F
  1314
  1315 				; optimize FAIL (':TMP', loadmid.inc), line = 93
  1316
  1317 8CA1 AD 32 04			lda LOADPROCESS
  1318 8CA4 85 91			sta :TMP+1
  1319 8CA6 AD 33 04			lda LOADPROCESS+1
  1320 8CA9 85 92			sta :TMP+2
  1321 8CAB A9 4C			lda #$4C
  1322 8CAD 85 90			sta :TMP
  1323 8CAF E8				inx
  1324 8CB0 A5 DE 95 94			mva TRACKCOUNT :STACKORIGIN,x
  1325 8CB4 20 90 00			jsr :TMP
  1326
  1327 				; optimize OK (loadmid.inc), line = 95
  1328
  1329 8CB7 A5 E3			lda _ADR+1
  1330 8CB9 C9 C0			cmp #$C0
  1331 8CBB 90 2D			jcc l_0367
  1332
  1333 				; optimize OK (loadmid.inc), line = 97
  1334
  1335 8CBD A9 00			lda #$00
  1336 8CBF 8D 47 04			sta _BGET.DEST
  1337 8CC2 A9 40			lda #$40
  1338 8CC4 8D 48 04			sta _BGET.DEST+1
  1339 8CC7 20 B7 8A			jsr _BGET
  1340
  1341 				; optimize OK (loadmid.inc), line = 98
  1342
  1343 8CCA AD 69 8D			lda RBUF
  1344 8CCD 85 88			sta SYSTEM.MOVE_0164.SOURCE
  1345 8CCF AD 6A 8D			lda RBUF+1
  1346 8CD2 85 89			sta SYSTEM.MOVE_0164.SOURCE+1
  1347 8CD4 A5 E2			lda _PTR
  1348 8CD6 85 8C			sta SYSTEM.MOVE_0164.DEST
  1349 8CD8 A5 E3			lda _PTR+1
  1350 8CDA 85 8D			sta SYSTEM.MOVE_0164.DEST+1
  1351 8CDC A5 D6			lda LOADSIZE
  1352 8CDE 85 84			sta SYSTEM.MOVE_0164.COUNT
  1353 8CE0 A5 D7			lda LOADSIZE+1
  1354 8CE2 85 85			sta SYSTEM.MOVE_0164.COUNT+1
  1355 8CE4				.local +MAIN.SYSTEM.MOVE_0164
  1356 8CE4				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0164.M@INLINE [Source: MIDICar Player.a65]
     4 8CE4 20 DE 81			jsr @move
Source: MIDICar Player.a65
  1357 					.endl
  1358 8CE7 4C F7 8C			jmp l_037A
  1359 8CEA			l_0367
  1360
  1361 				; optimize OK (loadmid.inc), line = 101
  1362
  1363 8CEA A5 E2			lda _PTR
  1364 8CEC 8D 47 04			sta _BGET.DEST
  1365 8CEF A5 E3			lda _PTR+1
  1366 8CF1 8D 48 04			sta _BGET.DEST+1
  1367 8CF4 20 B7 8A			jsr _BGET
  1368 8CF7			l_037A
  1369
  1370 				; optimize OK (loadmid.inc), line = 103
  1371
  1372 8CF7 AD 07 04			lda SYSTEM.IORESULT
  1373 8CFA C9 01			cmp #$01
  1374 8CFC F0 03			jeq l_038F
  1375 8CFE 4C 36 8D			jmp b_033C					; break
  1376 8D01			l_038F
  1377
  1378 				; optimize OK (loadmid.inc), line = 105
  1379
  1380 8D01 A5 E2			lda _ADR
  1381 8D03 18 65 D6			add LOADSIZE
  1382 8D06 85 E2			sta _ADR
  1383 8D08 A5 E3			lda _ADR+1
  1384 8D0A 65 D7			adc LOADSIZE+1
  1385 8D0C 85 E3			sta _ADR+1
  1386
  1387 				; optimize OK (loadmid.inc), line = 106
  1388
  1389 8D0E A5 E9			lda LEN
  1390 8D10 38 E5 D6			sub LOADSIZE
  1391 8D13 85 E9			sta LEN
  1392 8D15 A5 EA			lda LEN+1
  1393 8D17 E5 D7			sbc LOADSIZE+1
  1394 8D19 85 EA			sta LEN+1
  1395 8D1B A5 EB			lda LEN+2
  1396 8D1D E9 00			sbc #$00
  1397 8D1F 85 EB			sta LEN+2
  1398 8D21 A5 EC			lda LEN+3
  1399 8D23 E9 00			sbc #$00
  1400 8D25 85 EC			sta LEN+3
  1401 8D27			l_033B
  1402
  1403 				; optimize OK (loadmid.inc), line = 89
  1404
  1405 8D27 A5 EC			lda LEN+3
  1406 8D29 30 0B			bmi @+
  1407 8D2B 05 EB			ora LEN+2
  1408 8D2D 05 EA			ora LEN+1
  1409 8D2F 05 E9			ora LEN
  1410 8D31 F0 03 4C 94 8C		jne l_033C
  1411 				@
  1412 8D36			b_033C
  1413
  1414 				; optimize OK (loadmid.inc), line = 108
  1415
  1416 8D36 AD 3F 04			lda TRKDATA
  1417 8D39 18 69 09			add #$09
  1418 8D3C 8D 3F 04			sta TRKDATA
  1419 8D3F 90 03			scc
  1420 8D41 EE 40 04			inc TRKDATA+1
  1421 8D44 4C 4C 8D			jmp l_03AA
  1422 8D47			l_0321
  1423
  1424 				; optimize OK (loadmid.inc), line = 110
  1425
  1426 8D47 A9 66			lda #$66
  1427 8D49 8D 07 04			sta SYSTEM.IORESULT
  1428 8D4C			l_03AA
  1429 8D4C			l_0311
  1430 8D4C			l_02BD
  1431
  1432 				; optimize OK (loadmid.inc), line = 50
  1433
  1434 8D4C AD 07 04			lda SYSTEM.IORESULT
  1435 8D4F C9 01			cmp #$01
  1436 8D51 D0 0A			jne l_02BEw
  1437 8D53 A5 DE			lda TRACKCOUNT
  1438 8D55 CD 19 04			cmp TOTALTRACKS
  1439 8D58 B0 03 4C B7 8B		jcc l_02BE
  1440 8D5D			l_02BEw
  1441 8D5D			b_02BE
  1442
  1443 				; optimize OK (loadmid.inc), line = 112
  1444
  1445 8D5D AD 07 04			lda SYSTEM.IORESULT
  1446 8D60 8D 3A 04			sta RESULT
  1447
  1448 				; optimize OK (loadmid.inc), line = 113
  1449
  1450 8D63 A9 01			lda #$01
  1451 8D65 20 A1 89			jsr CIO.CLS
  1452 8D68			@exit
  1453
  1454 				; ------------------------------------------------------------
  1455
  1456 = 0438			FN	= DATAORIGIN+$0038
  1457 = 043A			RESULT	= DATAORIGIN+$003A
  1458 = 4000			LOADBUF_SIZE	= $4000
  1459 = 0001			CIO_CHN	= $01
  1460 = 00DE			TRACKCOUNT	= $DE
  1461 = 043B			CHUNKTAG	= DATAORIGIN+$003B
  1462 = 00D6			LOADSIZE	= $D6
  1463 = 00E9			LEN	= $E9
  1464 = 043F			TRKDATA	= DATAORIGIN+$003F
  1465 = 0400			TRKDATA.STATUS	= DATAORIGIN+$0000
  1466 = 0401			TRKDATA.BANK	= DATAORIGIN+$0001
  1467 = 0402			TRKDATA.PTR	= DATAORIGIN+$0002
  1468 = 0404			TRKDATA.TRACKTIME	= DATAORIGIN+$0004
  1469 = 0408			TRKDATA._EVENT	= DATAORIGIN+$0008
  1470 = 4000			adr.RBUF	= $4000
  1471 8D68			.var RBUF	= adr.RBUF .word
  1472
  1473 = 0438			@VarData	= FN
  1474 = 0013			@VarDataSize	= 19
  1475
  1476 8D68 60				rts						; ret
  1477 = 8D69 00 40		RBUF
  1477 				.endl
  1478
  1479 8D6B			.local	SETTEMPO					; PROCEDURE
  1480
  1481 				; optimize OK (settempo.inc), line = 10
  1482
  1483 8D6B A5 F5			lda _TIMERSTATUS
  1484 8D6D 49 80			eor #$80
  1485 8D6F 85 F5			sta _TIMERSTATUS
  1486
  1487 				; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 13
  1488
  1489 8D71 E8				inx
  1490 8D72 AD 1C 04 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  1491 8D77 AD 1D 04 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  1492 8D7C AD 1E 04 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  1493 8D81 AD 1F 04 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  1494 8D86 E8				inx
  1495 8D87 AD 34 04 95 94		mva TEMPOSHIFT :STACKORIGIN,x
  1496 8D8C AD 35 04 95 A4		mva TEMPOSHIFT+1 :STACKORIGIN+STACKWIDTH,x
  1497 8D91 AD 36 04 95 B4		mva TEMPOSHIFT+2 :STACKORIGIN+STACKWIDTH*2,x
  1498 8D96 AD 37 04 95 C4		mva TEMPOSHIFT+3 :STACKORIGIN+STACKWIDTH*3,x
  1499 8D9B 20 22 81			jsr addEAX_ECX
  1500 8D9E AD 1A 04 95 94		mva TICKDIV :STACKORIGIN,x
  1501 8DA3 AD 1B 04 95 A4		mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
  1502 8DA8 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1503 8DAC A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1504 8DB0 20 9D 82			jsr divmulINT.DIV
  1505 8DB3 CA				dex
  1506 8DB4 B5 94			lda :STACKORIGIN,x
  1507 8DB6 8D 4D 04			sta _FREQ
  1508 8DB9 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1509 8DBB 8D 4E 04			sta _FREQ+1
  1510 8DBE B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1511 8DC0 8D 4F 04			sta _FREQ+2
  1512 8DC3 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1513 8DC5 8D 50 04			sta _FREQ+3
  1514
  1515 				; optimize FAIL ('@I2F_m', settempo.inc), line = 14
  1516
  1517 8DC8 AD 4D 04 95 94		mva _FREQ :STACKORIGIN,x
  1518 8DCD AD 4E 04 95 A4		mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1519 8DD2 AD 4F 04 95 B4		mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1520 8DD7 AD 50 04 95 C4		mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1521 8DDC E8				inx
  1522 8DDD A9 00 95 94			mva #$00 :STACKORIGIN,x
  1523 8DE1 A9 24 95 A4			mva #$24 :STACKORIGIN+STACKWIDTH,x
  1524 8DE5 A9 74 95 B4			mva #$74 :STACKORIGIN+STACKWIDTH*2,x
  1525 8DE9 A9 49 95 C4			mva #$49 :STACKORIGIN+STACKWIDTH*3,x
  1526 8DED 20 E7 87			jsr @I2F_m
  1527 8DF0 20 A9 86			jsr @FDIV
  1528 8DF3 CA				dex
  1529 8DF4 B5 94			lda :STACKORIGIN,x
  1530 8DF6 8D 49 04			sta FREQ
  1531 8DF9 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1532 8DFB 8D 4A 04			sta FREQ+1
  1533 8DFE B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1534 8E00 8D 4B 04			sta FREQ+2
  1535 8E03 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1536 8E05 8D 4C 04			sta FREQ+3
  1537
  1538 				; optimize FAIL ('@FDIV', settempo.inc), line = 15
  1539
  1540 8E08 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1541 8E0C A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1542 8E10 A9 80 95 B4			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  1543 8E14 A9 3F 95 C4			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  1544 8E18 E8				inx
  1545 8E19 AD 49 04 95 94		mva FREQ :STACKORIGIN,x
  1546 8E1E AD 4A 04 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1547 8E23 AD 4B 04 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1548 8E28 AD 4C 04 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1549 8E2D 20 A9 86			jsr @FDIV
  1550 8E30 CA				dex
  1551 8E31 B5 94			lda :STACKORIGIN,x
  1552 8E33 8D 49 04			sta FREQ
  1553 8E36 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1554 8E38 8D 4A 04			sta FREQ+1
  1555 8E3B B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1556 8E3D 8D 4B 04			sta FREQ+2
  1557 8E40 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1558 8E42 8D 4C 04			sta FREQ+3
  1559
  1560 				; optimize FAIL ('@FDIV', settempo.inc), line = 24
  1561
  1562 8E45 A9 F5 95 94			mva #$F5 :STACKORIGIN,x
  1563 8E49 A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1564 8E4D A9 7A 95 B4			mva #$7A :STACKORIGIN+STACKWIDTH*2,x
  1565 8E51 A9 43 95 C4			mva #$43 :STACKORIGIN+STACKWIDTH*3,x
  1566 8E55 E8				inx
  1567 8E56 AD 49 04 95 94		mva FREQ :STACKORIGIN,x
  1568 8E5B AD 4A 04 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1569 8E60 AD 4B 04 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1570 8E65 AD 4C 04 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1571 8E6A 20 A9 86			jsr @FDIV
  1572 8E6D CA				dex
  1573 8E6E B5 94			lda :STACKORIGIN,x
  1574 8E70 8D 52 04			sta RATIO
  1575 8E73 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1576 8E75 8D 53 04			sta RATIO+1
  1577 8E78 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1578 8E7A 8D 54 04			sta RATIO+2
  1579 8E7D B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1580 8E7F 8D 55 04			sta RATIO+3
  1581
  1582 				; optimize FAIL ('@F2I', settempo.inc), line = 25
  1583
  1584 8E82 A9 01 95 94			mva #$01 :STACKORIGIN,x
  1585 8E86 E8				inx
  1586 8E87 AD 52 04 95 94		mva RATIO :STACKORIGIN,x
  1587 8E8C AD 53 04 95 A4		mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
  1588 8E91 AD 54 04 95 B4		mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
  1589 8E96 AD 55 04 95 C4		mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
  1590 8E9B 20 38 87			jsr @F2I
  1591 8E9E A9 00 95 A3			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  1592 8EA2 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1593 8EA6 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1594 8EAA B5 93			lda :STACKORIGIN-1,x
  1595 8EAC 18 75 94			add :STACKORIGIN,x
  1596 8EAF 8D 56 04			sta _RATIO
  1597 8EB2 CA				dex
  1598 8EB3 CA				dex
  1599
  1600 				; optimize OK (settempo.inc), line = 26
  1601
  1602 8EB4 AD 56 04			lda _RATIO
  1603 8EB7 C9 10			cmp #$10
  1604 8EB9 90 12			jcc l_0428
  1605 8EBB A9 00			lda #$00
  1606 8EBD 8D 52 04			sta RATIO
  1607 8EC0 8D 53 04			sta RATIO+1
  1608 8EC3 A9 70			lda #$70
  1609 8EC5 8D 54 04			sta RATIO+2
  1610 8EC8 A9 41			lda #$41
  1611 8ECA 8D 55 04			sta RATIO+3
  1612 8ECD			l_0428
  1613
  1614 				; optimize OK (settempo.inc), line = 29
  1615
  1616 8ECD A5 F5			lda _TIMERSTATUS
  1617 8ECF 29 C0			and #$C0
  1618 8ED1 0D 56 04			ora _RATIO
  1619 8ED4 85 F5			sta _TIMERSTATUS
  1620
  1621 				; optimize OK (settempo.inc), line = 30
  1622
  1623 8ED6 A9 01			lda #$01
  1624 8ED8 85 F4			sta _SUBCNT
  1625
  1626 				; optimize FAIL ('@I2F', settempo.inc), line = 32
  1627
  1628 8EDA E8				inx
  1629 8EDB A9 00 95 94			mva #$00 :STACKORIGIN,x
  1630 8EDF A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1631 8EE3 E8				inx
  1632 8EE4 AD 49 04 95 94		mva FREQ :STACKORIGIN,x
  1633 8EE9 AD 4A 04 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1634 8EEE AD 4B 04 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1635 8EF3 AD 4C 04 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1636 8EF8 E8				inx
  1637 8EF9 AD 56 04 95 94		mva _RATIO :STACKORIGIN,x
  1638 8EFE A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1639 8F02 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1640 8F06 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1641 8F0A 20 C2 87			jsr @I2F
  1642 8F0D 20 F2 85			jsr @FMUL
  1643 8F10 CA				dex
  1644 8F11 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1645 8F15 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1646 8F19 20 E7 87			jsr @I2F_m
  1647 8F1C 20 A9 86			jsr @FDIV
  1648 8F1F CA				dex
  1649 8F20 20 12 84			jsr @FROUND
  1650 8F23 20 38 87			jsr @F2I
  1651 8F26 B5 94			lda :STACKORIGIN,x
  1652 8F28 8D 51 04			sta FDIV
  1653 8F2B CA				dex
  1654
  1655 				; optimize OK (settempo.inc), line = 39
  1656
  1657 8F2C A5 F5			lda _TIMERSTATUS
  1658 8F2E 49 80			eor #$80
  1659 8F30 85 F5			sta _TIMERSTATUS
  1660
  1661 				; -------------------  ASM Block 00000071  -------------------
  1662
  1663 8F32 78			    sei  // disable IRQ
  1664 				  // reset POKEY
  1665 8F33 A9 00		    lda #$00
  1666 8F35 A0 03		    ldy #$03
  1667 8F37 8D 08 D2		    sta AUDCTL
  1668 8F3A 8D 01 D2		    sta AUDC1
  1669 8F3D 8C 0F D2		    sty SKCTL
  1670 				  // setup TIMER1
  1671 8F40 8D 08 D2		    sta AUDCTL
  1672 8F43 AD 51 04 8D 00 D2	    mva FDIV AUDF1
  1673 				  // initialize IRQ for TIMER1
  1674 				    // lda irqens
  1675 				    // ora #$01
  1676 				    // sta irqens
  1677 				    // sta irqen
  1678 				  // start timer strobe
  1679 8F49 8D 09 D2		    sta stimer
  1680
  1681 8F4C 58			    cli  // enable IRQ
  1682 				  
  1683 				; ------------------------------------------------------------
  1684
  1685 = 0449			FREQ	= DATAORIGIN+$0049
  1686 = 044D			_FREQ	= DATAORIGIN+$004D
  1687 = 0451			FDIV	= DATAORIGIN+$0051
  1688 = 0452			RATIO	= DATAORIGIN+$0052
  1689 = 0456			_RATIO	= DATAORIGIN+$0056
  1690
  1691 = 0449			@VarData	= FREQ
  1692 = 000E			@VarDataSize	= 14
  1693
  1694 8F4D			@exit
  1695 					.ifdef @new
  1696 					lda <@VarData
  1697 					sta :ztmp
  1698 					lda >@VarData
  1699 					ldy #@VarDataSize-1
  1700 					jmp @FreeMem
  1701 					els
  1702 8F4D 60				rts						; ret
  1703 					eif
  1704 				.endl
  1705
  1706 8F4E			.local	READB						; PROCEDURE | INLINE
  1707
  1708 					.MACRO m@INLINE
  1709 				
  1710 				; optimize OK (processtrack.inc), line = 10
  1711 				
  1712 					ldy #$00
  1713 					lda (_PTR),y
  1714 					sta EVENT
  1715 				
  1716 				; optimize FAIL (0, processtrack.inc), line = 11
  1717 				
  1718 					inc _ADR
  1719 					sne
  1720 					inc _ADR+1
  1721 				
  1722 				; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 12
  1723 				
  1724 					jsr MEMBOUNDCHECK
  1725 					.ENDM
  1726
  1727 				; ------------------------------------------------------------
  1728
  1729 = 00FF			EVENT	= $FF
  1730 8F4E			@exit
  1731 				.endl
  1732
  1733 8F4E			.local	READVARL					; PROCEDURE | ASSEMBLER
  1734
  1735 				; -------------------  ASM Block 00000072  -------------------
  1736
  1737 8F4E			  icl 'midfile/asms/readvar.asm'
Source: readvar.asm
     1 = 00F6			A equ _delta;
     2 = 00F7			B equ _delta+1;
     3 = 00F8			C equ _delta+2;
     4 = 00F9			D equ _delta+3;
     5
     6 				  .MACRO m@read2A
     7 				    ldy #0
     8 				    lda (_PTR),y
     9 				    sta A
    10 				    inc _ADR
    11 				    sne
    12 				    inc _ADR+1
    13 				    jsr MEMBOUNDCHECK
    14 				    lda A
    15 				  .ENDM
    16
    17 8F4E A0 00		  ldy #0
    18 8F50 84 F6		  sty A
    19 8F52 84 F7		  sty B
    20 8F54 84 F8		  sty C
    21 8F56 84 F9		  sty D
    22
    23 				// read block
    24
    25 				// read 1st byte to A
    26 8F58			  m@read2A
Macro: MAIN.MIDFILES.READVARL.M@READ2A [Source: readvar.asm]
     1 8F58 A0 00		    ldy #0
     2 8F5A B1 E2		    lda (_PTR),y
     3 8F5C 85 F6		    sta A
     4 8F5E E6 E2		    inc _ADR
     5 8F60 D0 02		    sne
     6 8F62 E6 E3		    inc _ADR+1
     7 8F64 20 17 8A		    jsr MEMBOUNDCHECK
     8 8F67 A5 F6		    lda A
Source: readvar.asm
    27
    28 8F69 10 53		  bpl endRead
    29
    30 				// move A to B and read 2nd byte to A
    31 				// B <- A = 4th readed byte
    32 8F6B 29 7F			and #$7F
    33 8F6D 85 F7			sta B
    34
    35 				// read 2nd byte
    36 8F6F			  m@read2A
Macro: MAIN.MIDFILES.READVARL.M@READ2A [Source: readvar.asm]
     1 8F6F A0 00		    ldy #0
     2 8F71 B1 E2		    lda (_PTR),y
     3 8F73 85 F6		    sta A
     4 8F75 E6 E2		    inc _ADR
     5 8F77 D0 02		    sne
     6 8F79 E6 E3		    inc _ADR+1
     7 8F7B 20 17 8A		    jsr MEMBOUNDCHECK
     8 8F7E A5 F6		    lda A
Source: readvar.asm
    37
    38 8F80 10 3C		  bpl endRead
    39
    40 				// mova B to C, A to B and read 3rd byte to A
    41 				// C <- B <- A = 4th readed byte
    42 8F82 A5 F7			lda B
    43 8F84 85 F8			sta C
    44 8F86 A5 F6			lda A
    45 8F88 29 7F			and #$7F
    46 8F8A 85 F7			sta B
    47
    48 				// read 3rd
    49 8F8C			  m@read2A
Macro: MAIN.MIDFILES.READVARL.M@READ2A [Source: readvar.asm]
     1 8F8C A0 00		    ldy #0
     2 8F8E B1 E2		    lda (_PTR),y
     3 8F90 85 F6		    sta A
     4 8F92 E6 E2		    inc _ADR
     5 8F94 D0 02		    sne
     6 8F96 E6 E3		    inc _ADR+1
     7 8F98 20 17 8A		    jsr MEMBOUNDCHECK
     8 8F9B A5 F6		    lda A
Source: readvar.asm
    50
    51 8F9D 10 1F		  bpl endRead
    52
    53 				// move C to D, B to C, A to B and read 4th byte to A
    54 				// D <- C <- B <- A = 4th readed byte
    55 8F9F A5 F8			lda C
    56 8FA1 85 F9			sta D
    57 8FA3 A5 F7			lda B
    58 8FA5 85 F8			sta C
    59 8FA7 A5 F6			lda A
    60 8FA9 29 7F			and #$7F
    61 8FAB 85 F7			sta B
    62
    63 				// read 4th
    64 8FAD			  m@read2A
Macro: MAIN.MIDFILES.READVARL.M@READ2A [Source: readvar.asm]
     1 8FAD A0 00		    ldy #0
     2 8FAF B1 E2		    lda (_PTR),y
     3 8FB1 85 F6		    sta A
     4 8FB3 E6 E2		    inc _ADR
     5 8FB5 D0 02		    sne
     6 8FB7 E6 E3		    inc _ADR+1
     7 8FB9 20 17 8A		    jsr MEMBOUNDCHECK
     8 8FBC A5 F6		    lda A
Source: readvar.asm
    65
    66 				// end read block
    67 8FBE			endRead:
    68
    69 				// decode block
    70 				// 'A' stays as it is
    71
    72 				// 'B' if geather than zero, lets decode
    73 8FBE A5 F7		  lda B
    74 8FC0 F0 0A		  beq decodeC
    75
    76 				// 76543210
    77 				// 0bbbbbbb and %1
    78 				// 0000000b
    79 				//        |
    80 				// +------+ 7:asl
    81 				// v
    82 				// b0000000 ora A
    83 				// baaaaaaa
    84
    85 8FC2 46 F7		  lsr B
    86 8FC4 90 06		  bcc decodeC
    87
    88 8FC6 A5 F6		  lda A
    89 8FC8 09 80		  ora #$80
    90 8FCA 85 F6		  sta A
    91
    92 8FCC			decodeC:
    93 				// 'C' if geather than zero, lets decode
    94 8FCC A5 F8		  lda C
    95 8FCE F0 12		  beq decodeD
    96
    97 				// 76543210
    98 				// 0ccccccc and %11
    99 				// 000000cc
   100 				//       ||
   101 				// +-----+| 6:asl
   102 				// |+-----+
   103 				// vv
   104 				// cc000000 ora B
   105 				// ccbbbbbb
   106 8FD0 29 03		  and #%11    // 2
   107 8FD2 F0 08		  beq noOrC   // 2**
   108 8FD4 A8			  tay         // 2
   109 8FD5 B9 FA 8F		  lda OrC,y   // 4*
   110 8FD8 05 F7		  ora B       // 3
   111 8FDA 85 F7		  sta B       // 3
   112
   113 8FDC			noOrC:
   114 8FDC A5 F8		  lda C       // 3
   115 8FDE 4A			  lsr @       // 2
   116 8FDF 4A			  lsr @       // 2
   117 8FE0 85 F8		  sta C       // 3
   118 				              //=26*+**
   119
   120 8FE2			decodeD:
   121 				// 'D' if geather than zero, lets decode
   122 8FE2 A5 F9		  lda D
   123 8FE4 F0 13		  beq endDecode
   124
   125 				// 76543210
   126 				// 0ddddddd and %111
   127 				// 00000ddd
   128 				//      |||
   129 				// +----+||
   130 				// |+----+| 5:asl
   131 				// ||+----+
   132 				// vvv
   133 				// ddd00000 ora C
   134 				// dddccccc
   135
   136 8FE6 29 07		  and #%111   // 2
   137 8FE8 F0 08		  beq noOrD   // 2**
   138 8FEA A8			  tay         // 2
   139 8FEB B9 FE 8F		  lda OrD,y   // 4*
   140 8FEE 05 F8		  ora C       // 3
   141 8FF0 85 F8		  sta C       // 3
   142
   143 8FF2			noOrD:
   144 8FF2 A5 F9		  lda D       // 3
   145 8FF4 4A			  lsr @       // 2
   146 8FF5 4A			  lsr @       // 2
   147 8FF6 4A			  lsr @       // 2
   148 8FF7 85 F9		  sta D       // 3
   149 				              //=28*+**
   150 8FF9			endDecode:
   151 8FF9 60			  rts
   152
   153 8FFA			OrC:
   154 8FFA 00			  dta %00000000
   155 8FFB 40			  dta %01000000
   156 8FFC 80			  dta %10000000
   157 8FFD C0			  dta %11000000
   158
   159 8FFE			OrD:
   160 8FFE 00			  dta %00000000
   161 8FFF 20			  dta %00100000
   162 9000 40			  dta %01000000
   163 9001 60			  dta %01100000
   164 9002 80			  dta %10000000
   165 9003 A0			  dta %10100000
   166 9004 C0			  dta %11000000
   167 9005 E0			  dta %11100000
  1738
  1739 9006			@exit
  1740 					.ifdef @new
  1741 					lda <@VarData
  1742 					sta :ztmp
  1743 					lda >@VarData
  1744 					ldy #@VarDataSize-1
  1745 					jmp @FreeMem
  1746 					els
  1747 9006 60				rts						; ret
  1748 					eif
  1749 				.endl
  1750
  1751 9007			.local	READ24						; PROCEDURE | ASSEMBLER
  1752
  1753 				; -------------------  ASM Block 00000073  -------------------
  1754
  1755 9007			  icl 'midfile/asms/read24bigendian.pas'
Source: read24bigendian.pas
     1 				  .MACRO m@readByte storeTo
     2 				    ldy #0
     3 				    lda (_PTR),y
     4 				    sta :storeTo
     5 				    inc _ADR
     6 				    sne
     7 				    inc _ADR+1
     8 				    jsr MEMBOUNDCHECK
     9 				  .ENDM
    10
    11 9007			  m@readByte _delta+2
Macro: MAIN.MIDFILES.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 9007 A0 00		    ldy #0
     2 9009 B1 E2		    lda (_PTR),y
     3 900B 85 F8		    sta _DELTA+2
     4 900D E6 E2		    inc _ADR
     5 900F D0 02		    sne
     6 9011 E6 E3		    inc _ADR+1
     7 9013 20 17 8A		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    12 9016			  m@readByte _delta+1
Macro: MAIN.MIDFILES.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 9016 A0 00		    ldy #0
     2 9018 B1 E2		    lda (_PTR),y
     3 901A 85 F7		    sta _DELTA+1
     4 901C E6 E2		    inc _ADR
     5 901E D0 02		    sne
     6 9020 E6 E3		    inc _ADR+1
     7 9022 20 17 8A		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    13 9025			  m@readByte _delta+0
Macro: MAIN.MIDFILES.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 9025 A0 00		    ldy #0
     2 9027 B1 E2		    lda (_PTR),y
     3 9029 85 F6		    sta _DELTA+0
     4 902B E6 E2		    inc _ADR
     5 902D D0 02		    sne
     6 902F E6 E3		    inc _ADR+1
     7 9031 20 17 8A		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    14 9034 A9 00		  lda #0
    15 9036 85 F9		  sta _delta+3
  1756
  1757 9038			@exit
  1758 					.ifdef @new
  1759 					lda <@VarData
  1760 					sta :ztmp
  1761 					lda >@VarData
  1762 					ldy #@VarDataSize-1
  1763 					jmp @FreeMem
  1764 					els
  1765 9038 60				rts						; ret
  1766 					eif
  1767 				.endl
  1768
  1769 9039			.local	PROCESSTRACK					; PROCEDURE
  1770
  1771 9039 4C 0B 91			jmp l_0473
  1772
  1773 903C			.local	EVENTMIDI3					; PROCEDURE
  1774
  1775 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 4
  1776
  1777 903C 20 2C 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1778
  1779 				; optimize FAIL ('m@INLINE', events.inc), line = 5
  1780
  1781 903F				.local +MAIN.MIDFILES.READB
  1782 903F				m@INLINE
Macro: MAIN.MIDFILES.READB.M@INLINE [Source: MIDICar Player.a65]
     4 903F A0 00			ldy #$00
     5 9041 B1 E2			lda (_PTR),y
     6 9043 85 FF			sta EVENT
    10 9045 E6 E2			inc _ADR
    11 9047 D0 02			sne
    12 9049 E6 E3			inc _ADR+1
    16 904B 20 17 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1783 					.endl
  1784 904E 20 2C 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1785
  1786 				; optimize FAIL ('m@INLINE', events.inc), line = 6
  1787
  1788 9051				.local +MAIN.MIDFILES.READB
  1789 9051				m@INLINE
Macro: MAIN.MIDFILES.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9051 A0 00			ldy #$00
     5 9053 B1 E2			lda (_PTR),y
     6 9055 85 FF			sta EVENT
    10 9057 E6 E2			inc _ADR
    11 9059 D0 02			sne
    12 905B E6 E3			inc _ADR+1
    16 905D 20 17 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1790 					.endl
  1791 9060 20 2C 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1792
  1793 				; optimize OK (events.inc), line = 15
  1794
  1795 9063 A5 FF			lda EVENT
  1796 9065 F0 12			jeq l_049D
  1797 9067 A5 E8			lda _EVENT
  1798 9069 29 F0			and #$F0
  1799 906B C9 90			cmp #$90
  1800 906D D0 0A			jne l_049D
  1801
  1802 				; optimize OK (events.inc), line = 16
  1803
  1804 906F A5 E8			lda _EVENT
  1805 9071 29 0F			and #$0F
  1806 9073 A8				tay
  1807 9074 A5 FF			lda MC6850.MC_BYTE
  1808 9076 99 20 04			sta adr.CHNVOLUME,y
  1809 9079			l_049D
  1810 9079			@exit
  1811 					.ifdef @new
  1812 					lda <@VarData
  1813 					sta :ztmp
  1814 					lda >@VarData
  1815 					ldy #@VarDataSize-1
  1816 					jmp @FreeMem
  1817 					els
  1818 9079 60				rts						; ret
  1819 					eif
  1820 				.endl
  1821
  1822 907A			.local	EVENTMIDI2					; PROCEDURE
  1823
  1824 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 22
  1825
  1826 907A 20 2C 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1827
  1828 				; optimize FAIL ('m@INLINE', events.inc), line = 23
  1829
  1830 907D				.local +MAIN.MIDFILES.READB
  1831 907D				m@INLINE
Macro: MAIN.MIDFILES.READB.M@INLINE [Source: MIDICar Player.a65]
     4 907D A0 00			ldy #$00
     5 907F B1 E2			lda (_PTR),y
     6 9081 85 FF			sta EVENT
    10 9083 E6 E2			inc _ADR
    11 9085 D0 02			sne
    12 9087 E6 E3			inc _ADR+1
    16 9089 20 17 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1832 					.endl
  1833 908C 20 2C 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1834 908F			@exit
  1835 					.ifdef @new
  1836 					lda <@VarData
  1837 					sta :ztmp
  1838 					lda >@VarData
  1839 					ldy #@VarDataSize-1
  1840 					jmp @FreeMem
  1841 					els
  1842 908F 60				rts						; ret
  1843 					eif
  1844 				.endl
  1845
  1846 9090			.local	EVENTSYSEX					; PROCEDURE
  1847
  1848 				; optimize FAIL ('READVARL', events.inc), line = 32
  1849
  1850 9090 20 4E 8F			jsr READVARL
  1851
  1852 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 34
  1853
  1854 9093 20 2C 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1855
  1856 				; --- WhileProlog
  1857 9096 4C AD 90			jmp l_04BC
  1858 9099			l_04BD
  1859
  1860 				; optimize FAIL ('m@INLINE', events.inc), line = 40
  1861
  1862 9099				.local +MAIN.MIDFILES.READB
  1863 9099				m@INLINE
Macro: MAIN.MIDFILES.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9099 A0 00			ldy #$00
     5 909B B1 E2			lda (_PTR),y
     6 909D 85 FF			sta EVENT
    10 909F E6 E2			inc _ADR
    11 90A1 D0 02			sne
    12 90A3 E6 E3			inc _ADR+1
    16 90A5 20 17 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1864 					.endl
  1865
  1866 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 42
  1867
  1868 90A8 20 2C 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1869
  1870 				; optimize FAIL (0, events.inc), line = 46
  1871
  1872 90AB C6 F6			dec _TMP
  1873 90AD			l_04BC
  1874
  1875 				; optimize OK (events.inc), line = 38
  1876
  1877 90AD A5 F6			lda _TMP
  1878 90AF D0 E8			jne l_04BD
  1879 90B1			@exit
  1880 					.ifdef @new
  1881 					lda <@VarData
  1882 					sta :ztmp
  1883 					lda >@VarData
  1884 					ldy #@VarDataSize-1
  1885 					jmp @FreeMem
  1886 					els
  1887 90B1 60				rts						; ret
  1888 					eif
  1889 				.endl
  1890
  1891 90B2			.local	EVENTMETA					; PROCEDURE
  1892
  1893 				; optimize FAIL ('m@INLINE', events.inc), line = 58
  1894
  1895 90B2				.local +MAIN.MIDFILES.READB
  1896 90B2				m@INLINE
Macro: MAIN.MIDFILES.READB.M@INLINE [Source: MIDICar Player.a65]
     4 90B2 A0 00			ldy #$00
     5 90B4 B1 E2			lda (_PTR),y
     6 90B6 85 FF			sta EVENT
    10 90B8 E6 E2			inc _ADR
    11 90BA D0 02			sne
    12 90BC E6 E3			inc _ADR+1
    16 90BE 20 17 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1897 					.endl
  1898
  1899 				; optimize FAIL ('READVARL', events.inc), line = 59
  1900
  1901 90C1 20 4E 8F			jsr READVARL
  1902
  1903 				; optimize OK (events.inc), line = 61
  1904
  1905 90C4 A5 FF			lda EVENT
  1906 90C6 C9 2F			cmp #$2F
  1907 90C8 D0 0B			jne l_04E7
  1908
  1909 				; optimize FAIL (0, events.inc), line = 63
  1910
  1911 90CA C6 DF			dec PLAYINGTRACKS
  1912
  1913 				; optimize OK (events.inc), line = 64
  1914
  1915 90CC A5 E0			lda _STATUS
  1916 90CE 09 40			ora #$40
  1917 90D0 85 E0			sta _STATUS
  1918 90D2 4C 0A 91			jmp l_04FF
  1919 90D5			l_04E7
  1920
  1921 				; optimize OK (events.inc), line = 66
  1922
  1923 90D5 A5 FF			lda EVENT
  1924 90D7 C9 51			cmp #$51
  1925 90D9 D0 1D			jne l_0511
  1926
  1927 				; optimize FAIL ('READ24', events.inc), line = 68
  1928
  1929 90DB 20 07 90			jsr READ24
  1930
  1931 				; optimize OK (events.inc), line = 69
  1932
  1933 90DE A5 F6			lda _DELTA
  1934 90E0 8D 1C 04			sta MS_PER_QNOTE
  1935 90E3 A5 F7			lda _DELTA+1
  1936 90E5 8D 1D 04			sta MS_PER_QNOTE+1
  1937 90E8 A5 F8			lda _DELTA+2
  1938 90EA 8D 1E 04			sta MS_PER_QNOTE+2
  1939 90ED A5 F9			lda _DELTA+3
  1940 90EF 8D 1F 04			sta MS_PER_QNOTE+3
  1941
  1942 				; optimize FAIL ('SETTEMPO', events.inc), line = 70
  1943
  1944 90F2 20 6B 8D			jsr SETTEMPO
  1945 90F5 4C 0A 91			jmp l_0521
  1946 90F8			l_0511
  1947
  1948 				; --- WhileProlog
  1949 90F8 4C 06 91			jmp l_0523
  1950 90FB			l_0524
  1951
  1952 				; optimize FAIL (0, events.inc), line = 85
  1953
  1954 90FB C6 F6			dec _TMP
  1955
  1956 				; optimize FAIL (0, events.inc), line = 86
  1957
  1958 90FD E6 E2			inc _ADR
  1959 90FF D0 02			sne
  1960 9101 E6 E3			inc _ADR+1
  1961
  1962 				; optimize FAIL ('MEMBOUNDCHECK', events.inc), line = 87
  1963
  1964 9103 20 17 8A			jsr MEMBOUNDCHECK
  1965 9106			l_0523
  1966
  1967 				; optimize OK (events.inc), line = 83
  1968
  1969 9106 A5 F6			lda _TMP
  1970 9108 D0 F1			jne l_0524
  1971 910A			l_0521
  1972 910A			l_04FF
  1973 910A			@exit
  1974 					.ifdef @new
  1975 					lda <@VarData
  1976 					sta :ztmp
  1977 					lda >@VarData
  1978 					ldy #@VarDataSize-1
  1979 					jmp @FreeMem
  1980 					els
  1981 910A 60				rts						; ret
  1982 					eif
  1983 				.endl
  1984 910B			l_0473
  1985
  1986 				; -------------------  ASM Block 00000074  -------------------
  1987
  1988 				 ldy _bank \ lda $100,y \ sta PORTB 
  1988 910B A4 E1		 LDY _BANK 
  1988 910D B9 00 01		 LDA $100,Y 
  1988 9110 8D 01 D3		 STA PORTB 
  1989 				; --- RepeatUntilProlog
  1990 9113			l_053B
  1991
  1992 				; optimize OK (processtrack.inc), line = 36
  1993
  1994 9113 A5 E0			lda _STATUS
  1995 9115 30 2E			jmi l_0551
  1996
  1997 				; optimize FAIL ('READVARL', processtrack.inc), line = 38
  1998
  1999 9117 20 4E 8F			jsr READVARL
  2000
  2001 				; optimize OK (processtrack.inc), line = 39
  2002
  2003 911A A5 F9			lda _DELTA+3
  2004 911C 30 24			jmi l_0563
  2005 911E 05 F8			ora _DELTA+2
  2006 9120 05 F7			ora _DELTA+1
  2007 9122 05 F6			ora _DELTA
  2008 9124 F0 1C			jeq l_0563
  2009
  2010 				; optimize OK (processtrack.inc), line = 41
  2011
  2012 9126 A5 E4			lda _TRACKTIME
  2013 9128 18 65 F6			add _DELTA
  2014 912B 85 E4			sta _TRACKTIME
  2015 912D A5 E5			lda _TRACKTIME+1
  2016 912F 65 F7			adc _DELTA+1
  2017 9131 85 E5			sta _TRACKTIME+1
  2018 9133 A5 E6			lda _TRACKTIME+2
  2019 9135 65 F8			adc _DELTA+2
  2020 9137 85 E6			sta _TRACKTIME+2
  2021 9139 A5 E7			lda _TRACKTIME+3
  2022 913B 65 F9			adc _DELTA+3
  2023 913D 85 E7			sta _TRACKTIME+3
  2024 913F 4C AD 91			jmp b_053B					; break
  2025 9142			l_0563
  2026 9142 4C 4B 91			jmp l_0577
  2027 9145			l_0551
  2028
  2029 				; optimize OK (processtrack.inc), line = 46
  2030
  2031 9145 A5 E0			lda _STATUS
  2032 9147 29 7F			and #$7F
  2033 9149 85 E0			sta _STATUS
  2034 914B			l_0577
  2035
  2036 				; optimize OK (processtrack.inc), line = 48
  2037
  2038 914B A0 00			ldy #$00
  2039 914D B1 E2			lda (_PTR),y
  2040 914F 10 16			jpl l_059A
  2041
  2042 				; optimize FAIL ('m@INLINE', processtrack.inc), line = 50
  2043
  2044 9151				.local +MAIN.MIDFILES.READB
  2045 9151				m@INLINE
Macro: MAIN.MIDFILES.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9151 A0 00			ldy #$00
     5 9153 B1 E2			lda (_PTR),y
     6 9155 85 FF			sta EVENT
    10 9157 E6 E2			inc _ADR
    11 9159 D0 02			sne
    12 915B E6 E3			inc _ADR+1
    16 915D 20 17 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2046 					.endl
  2047 9160 A5 FF			lda EVENT
  2048 9162 85 E8			sta _EVENT
  2049 9164 4C 6B 91			jmp l_05AB
  2050 9167			l_059A
  2051
  2052 				; optimize OK (processtrack.inc), line = 53
  2053
  2054 9167 A5 E8			lda _EVENT
  2055 9169 85 FF			sta EVENT
  2056 916B			l_05AB
  2057
  2058 				; optimize OK (processtrack.inc), line = 55
  2059
  2060 916B A9 BF			lda #$BF
  2061 916D C5 E8			cmp _EVENT
  2062 916F 90 06			jcc l_05C3
  2063
  2064 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 57
  2065
  2066 9171 20 3C 90			jsr EVENTMIDI3
  2067 9174 4C A4 91			jmp l_05CE
  2068 9177			l_05C3
  2069 9177 A9 DF			lda #$DF
  2070 9179 C5 E8			cmp _EVENT
  2071 917B 90 06			jcc l_05E0
  2072
  2073 				; optimize FAIL ('EVENTMIDI2', processtrack.inc), line = 59
  2074
  2075 917D 20 7A 90			jsr EVENTMIDI2
  2076 9180 4C A4 91			jmp l_05EB
  2077 9183			l_05E0
  2078 9183 A9 EF			lda #$EF
  2079 9185 C5 E8			cmp _EVENT
  2080 9187 90 06			jcc l_05FD
  2081
  2082 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 61
  2083
  2084 9189 20 3C 90			jsr EVENTMIDI3
  2085 918C 4C A4 91			jmp l_0608
  2086 918F			l_05FD
  2087 918F A9 F7			lda #$F7
  2088 9191 C5 E8			cmp _EVENT
  2089 9193 90 06			jcc l_061A
  2090
  2091 				; optimize FAIL ('EVENTSYSEX', processtrack.inc), line = 63
  2092
  2093 9195 20 90 90			jsr EVENTSYSEX
  2094 9198 4C A4 91			jmp l_0625
  2095 919B			l_061A
  2096 919B A5 E8			lda _EVENT
  2097 919D C9 FF			cmp #$FF
  2098 919F D0 03			jne l_0637
  2099
  2100 				; optimize FAIL ('EVENTMETA', processtrack.inc), line = 64
  2101
  2102 91A1 20 B2 90			jsr EVENTMETA
  2103 91A4			l_0637
  2104 91A4			l_0625
  2105 91A4			l_0608
  2106 91A4			l_05EB
  2107 91A4			l_05CE
  2108
  2109 				; optimize OK (processtrack.inc), line = 66
  2110
  2111 91A4 A5 E0			lda _STATUS
  2112 91A6 29 40			and #$40
  2113 91A8 D0 03 4C 13 91		jeq l_053B
  2114 91AD			b_053B
  2115
  2116 				; optimize OK (processtrack.inc), line = 68
  2117
  2118 91AD A5 E0			lda _STATUS
  2119 91AF 09 80			ora #$80
  2120 91B1 85 E0			sta _STATUS
  2121
  2122 				; ------------------------------------------------------------
  2123
  2124 = 00FF			EVENT	= $FF
  2125 91B3			@exit
  2126 					.ifdef @new
  2127 					lda <@VarData
  2128 					sta :ztmp
  2129 					lda >@VarData
  2130 					ldy #@VarDataSize-1
  2131 					jmp @FreeMem
  2132 					els
  2133 91B3 60				rts						; ret
  2134 					eif
  2135 				.endl
  2136
  2137 91B4			.local	PROCESSMIDI					; PROCEDURE
  2138
  2139 				; optimize FAIL ('MIDI_FIFO.FIFO_PUSHDIRECT2MC6850', processmidi.inc), line = 29
  2140
  2141 91B4 20 16 89			jsr MIDI_FIFO.FIFO_PUSHDIRECT2MC6850
  2142
  2143 				; optimize OK (processmidi.inc), line = 31
  2144
  2145 91B7 A5 F5			lda _TIMERSTATUS
  2146 91B9 10 03			jpl l_0671
  2147 91BB 4C 35 92			jmp @exit					; exit
  2148 91BE			l_0671
  2149
  2150 				; optimize OK (processmidi.inc), line = 32
  2151
  2152 91BE A5 DE			lda CTRK
  2153 91C0 CD 19 04			cmp TOTALTRACKS
  2154 91C3 D0 11			jne l_0688
  2155
  2156 				; optimize OK (processmidi.inc), line = 34
  2157
  2158 91C5 A9 01			lda #$01
  2159 91C7 85 DE			sta CTRK
  2160
  2161 				; optimize OK (processmidi.inc), line = 35
  2162
  2163 91C9 AD 91 94			lda MIDTRACKS
  2164 91CC 85 DC			sta CURTRACKPTR
  2165 91CE AD 92 94			lda MIDTRACKS+1
  2166 91D1 85 DD			sta CURTRACKPTR+1
  2167 91D3 4C E3 91			jmp l_069B
  2168 91D6			l_0688
  2169
  2170 				; optimize FAIL (0, processmidi.inc), line = 39
  2171
  2172 91D6 E6 DE			inc CTRK
  2173
  2174 				; optimize OK (processmidi.inc), line = 40
  2175
  2176 91D8 A5 DC			lda CURTRACKPTR
  2177 91DA 18 69 09			add #$09
  2178 91DD 85 DC			sta CURTRACKPTR
  2179 91DF 90 02			scc
  2180 91E1 E6 DD			inc CURTRACKPTR+1
  2181 91E3			l_069B
  2182
  2183 				; -------------------  ASM Block 00000075  -------------------
  2184
  2185 				// if _status and f_stop=0 then
  2186 91E3 A0 00		    ldy #0
  2187 91E5 B1 DC		    lda (curTrackPtr),y
  2188 91E7 29 40		    and #f_stop
  2189 91E9 D0 4A		    bne skipProcessTrack
  2190
  2191 				// if _totalTicks>=_trackTime then ProcessTrack;
  2192 91EB A0 07		    ldy #7
  2193 91ED A5 F3		    lda _totalTicks+3
  2194 91EF 38 F1 DC		    sub (curTrackPtr),y
  2195 91F2 D0 22		    bne L4
  2196 91F4 A5 F2		    lda _totalTicks+2
  2197 91F6 88			    dey
  2198 91F7 38 F1 DC		    sub (curTrackPtr),y
  2199 91FA D0 0E		    bne L1
  2200 91FC A5 F1		    lda _totalTicks+1
  2201 91FE 88			    dey
  2202 91FF 38 F1 DC		    sub (curTrackPtr),y
  2203 9202 D0 06		    bne L1
  2204 9204 A5 F0		    lda _totalTicks
  2205 9206 88			    dey
  2206 9207 38 F1 DC		    sub (curTrackPtr),y
  2207 920A			  L1:
  2208 920A F0 10		    beq L5
  2209 920C B0 04		    bcs L3
  2210 920E A9 FF		    lda #$ff
  2211 9210 D0 0A		    bne L5
  2212 9212			  L3:
  2213 9212 A9 01		    lda #$01
  2214 9214 D0 06		    bne L5
  2215 9216			  L4:
  2216 9216 50 04		    bvc L5
  2217 9218 49 FF		    eor #$ff
  2218 921A 09 01		    ora #$01
  2219 921C			  L5:
  2220 921C 30 17		    jmi skipProcessTrack
  2221
  2222 				  // copy current track data to work registers
  2223 921E A0 08		    ldy #sizeOf_TMIDTrack-1
  2224 9220			  loop:
  2225 9220 B1 DC		    lda (curTrackPtr),y
  2226 9222 99 E0 00		    sta _trkRegs,y
  2227 9225 88			    dey
  2228 9226 10 F8		    bpl loop
  2229
  2230 				  
  2231 				; optimize FAIL ('PROCESSTRACK', processmidi.inc), line = 92
  2232
  2233 9228 20 39 90			jsr PROCESSTRACK
  2234
  2235 				; -------------------  ASM Block 00000076  -------------------
  2236
  2237 				// store work registers in track data
  2238 922B A0 08		    ldy #sizeOf_TMIDTrack-1
  2239 922D			  loop2:
  2240 922D B9 E0 00		    lda _trkRegs,y
  2241 9230 91 DC		    sta (curTrackPtr),y
  2242 9232 88			    dey
  2243 9233 10 F8		    bpl loop2
  2244
  2245 9235			  skipProcessTrack:
  2246 				  
  2247 9235			@exit
  2248 					.ifdef @new
  2249 					lda <@VarData
  2250 					sta :ztmp
  2251 					lda >@VarData
  2252 					ldy #@VarDataSize-1
  2253 					jmp @FreeMem
  2254 					els
  2255 9235 60				rts						; ret
  2256 					eif
  2257 				.endl
  2258
  2259 9236			.local	DETERMINESONGLENGTH				; PROCEDURE
  2260
  2261 				; optimize OK (determine_song_length.inc), line = 6
  2262
  2263 9236 A9 00			lda #$00
  2264 9238 85 E9			sta _SONGTICKS
  2265 923A 85 EA			sta _SONGTICKS+1
  2266 923C 85 EB			sta _SONGTICKS+2
  2267 923E 85 EC			sta _SONGTICKS+3
  2268 9240 AD 91 94			lda MIDTRACKS
  2269 9243 85 DC			sta CURTRACKPTR
  2270 9245 AD 92 94			lda MIDTRACKS+1
  2271 9248 85 DD			sta CURTRACKPTR+1
  2272
  2273 				; optimize OK (determine_song_length.inc), line = 7
  2274
  2275 924A A9 01			lda #$01
  2276 924C 85 DE			sta CTRK
  2277
  2278 924E			l_06B9
  2279 				; --- ForToDoCondition
  2280 924E A5 DE			lda CTRK
  2281 9250 CD 19 04			cmp TOTALTRACKS
  2282 9253 90 05			scc
  2283 9255 F0 03 4C C3 93		jne l_06C7
  2284
  2285 				; -------------------  ASM Block 00000077  -------------------
  2286
  2287 925A A0 08		      ldy #sizeOf_TMIDTrack-1
  2288 925C			    loop:
  2289 925C B1 DC		      lda (curTrackPtr),y
  2290 925E 99 E0 00		      sta _trkRegs,y
  2291 9261 88			      dey
  2292 9262 10 F8		      bpl loop
  2293 				    
  2294 				; -------------------  ASM Block 00000078  -------------------
  2295
  2296 				 ldy _bank \ lda $100,y \ sta PORTB 
  2296 9264 A4 E1		 LDY _BANK 
  2296 9266 B9 00 01		 LDA $100,Y 
  2296 9269 8D 01 D3		 STA PORTB 
  2297 				; --- RepeatUntilProlog
  2298 926C			l_06C8
  2299
  2300 				; optimize FAIL ('READVARL', determine_song_length.inc), line = 21
  2301
  2302 926C 20 4E 8F			jsr READVARL
  2303
  2304 				; optimize OK (determine_song_length.inc), line = 22
  2305
  2306 926F A5 F9			lda _DELTA+3
  2307 9271 30 21			jmi l_06D9
  2308 9273 05 F8			ora _DELTA+2
  2309 9275 05 F7			ora _DELTA+1
  2310 9277 05 F6			ora _DELTA
  2311 9279 F0 19			jeq l_06D9
  2312
  2313 				; optimize OK (determine_song_length.inc), line = 23
  2314
  2315 927B A5 E4			lda _TRACKTIME
  2316 927D 18 65 F6			add _DELTA
  2317 9280 85 E4			sta _TRACKTIME
  2318 9282 A5 E5			lda _TRACKTIME+1
  2319 9284 65 F7			adc _DELTA+1
  2320 9286 85 E5			sta _TRACKTIME+1
  2321 9288 A5 E6			lda _TRACKTIME+2
  2322 928A 65 F8			adc _DELTA+2
  2323 928C 85 E6			sta _TRACKTIME+2
  2324 928E A5 E7			lda _TRACKTIME+3
  2325 9290 65 F9			adc _DELTA+3
  2326 9292 85 E7			sta _TRACKTIME+3
  2327 9294			l_06D9
  2328
  2329 				; optimize OK (determine_song_length.inc), line = 25
  2330
  2331 9294 A0 00			ldy #$00
  2332 9296 B1 E2			lda (_PTR),y
  2333 9298 10 16			jpl l_06FA
  2334
  2335 				; optimize FAIL ('m@INLINE', determine_song_length.inc), line = 27
  2336
  2337 929A				.local +MAIN.MIDFILES.READB
  2338 929A				m@INLINE
Macro: MAIN.MIDFILES.READB.M@INLINE [Source: MIDICar Player.a65]
     4 929A A0 00			ldy #$00
     5 929C B1 E2			lda (_PTR),y
     6 929E 85 FF			sta EVENT
    10 92A0 E6 E2			inc _ADR
    11 92A2 D0 02			sne
    12 92A4 E6 E3			inc _ADR+1
    16 92A6 20 17 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2339 					.endl
  2340 92A9 A5 FF			lda EVENT
  2341 92AB 85 E8			sta _EVENT
  2342 92AD 4C B4 92			jmp l_070B
  2343 92B0			l_06FA
  2344
  2345 				; optimize OK (determine_song_length.inc), line = 30
  2346
  2347 92B0 A5 E8			lda _EVENT
  2348 92B2 85 FF			sta EVENT
  2349 92B4			l_070B
  2350
  2351 				; optimize OK (determine_song_length.inc), line = 32
  2352
  2353 92B4 A9 BF			lda #$BF
  2354 92B6 C5 E8			cmp _EVENT
  2355 92B8 90 21			jcc l_0723
  2356
  2357 				; optimize FAIL ('m@INLINE', determine_song_length.inc), line = 34
  2358
  2359 92BA				.local +MAIN.MIDFILES.READB
  2360 92BA				m@INLINE
Macro: MAIN.MIDFILES.READB.M@INLINE [Source: MIDICar Player.a65]
     4 92BA A0 00			ldy #$00
     5 92BC B1 E2			lda (_PTR),y
     6 92BE 85 FF			sta EVENT
    10 92C0 E6 E2			inc _ADR
    11 92C2 D0 02			sne
    12 92C4 E6 E3			inc _ADR+1
    16 92C6 20 17 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2361 					.endl
  2362
  2363 				; optimize FAIL ('m@INLINE', determine_song_length.inc), line = 35
  2364
  2365 92C9				.local +MAIN.MIDFILES.READB
  2366 92C9				m@INLINE
Macro: MAIN.MIDFILES.READB.M@INLINE [Source: MIDICar Player.a65]
     4 92C9 A0 00			ldy #$00
     5 92CB B1 E2			lda (_PTR),y
     6 92CD 85 FF			sta EVENT
    10 92CF E6 E2			inc _ADR
    11 92D1 D0 02			sne
    12 92D3 E6 E3			inc _ADR+1
    16 92D5 20 17 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2367 					.endl
  2368 92D8 4C 71 93			jmp l_072F
  2369 92DB			l_0723
  2370
  2371 				; optimize OK (determine_song_length.inc), line = 37
  2372
  2373 92DB A9 DF			lda #$DF
  2374 92DD C5 E8			cmp _EVENT
  2375 92DF 90 12			jcc l_0741
  2376
  2377 				; optimize FAIL ('m@INLINE', determine_song_length.inc), line = 39
  2378
  2379 92E1				.local +MAIN.MIDFILES.READB
  2380 92E1				m@INLINE
Macro: MAIN.MIDFILES.READB.M@INLINE [Source: MIDICar Player.a65]
     4 92E1 A0 00			ldy #$00
     5 92E3 B1 E2			lda (_PTR),y
     6 92E5 85 FF			sta EVENT
    10 92E7 E6 E2			inc _ADR
    11 92E9 D0 02			sne
    12 92EB E6 E3			inc _ADR+1
    16 92ED 20 17 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2381 					.endl
  2382 92F0 4C 71 93			jmp l_074C
  2383 92F3			l_0741
  2384 92F3 A9 EF			lda #$EF
  2385 92F5 C5 FF			cmp EVENT
  2386 92F7 90 21			jcc l_075E
  2387
  2388 				; optimize FAIL ('m@INLINE', determine_song_length.inc), line = 41
  2389
  2390 92F9				.local +MAIN.MIDFILES.READB
  2391 92F9				m@INLINE
Macro: MAIN.MIDFILES.READB.M@INLINE [Source: MIDICar Player.a65]
     4 92F9 A0 00			ldy #$00
     5 92FB B1 E2			lda (_PTR),y
     6 92FD 85 FF			sta EVENT
    10 92FF E6 E2			inc _ADR
    11 9301 D0 02			sne
    12 9303 E6 E3			inc _ADR+1
    16 9305 20 17 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2392 					.endl
  2393
  2394 				; optimize FAIL ('m@INLINE', determine_song_length.inc), line = 42
  2395
  2396 9308				.local +MAIN.MIDFILES.READB
  2397 9308				m@INLINE
Macro: MAIN.MIDFILES.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9308 A0 00			ldy #$00
     5 930A B1 E2			lda (_PTR),y
     6 930C 85 FF			sta EVENT
    10 930E E6 E2			inc _ADR
    11 9310 D0 02			sne
    12 9312 E6 E3			inc _ADR+1
    16 9314 20 17 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2398 					.endl
  2399 9317 4C 71 93			jmp l_076A
  2400 931A			l_075E
  2401
  2402 				; optimize OK (determine_song_length.inc), line = 44
  2403
  2404 931A A9 F7			lda #$F7
  2405 931C C5 E8			cmp _EVENT
  2406 931E 90 1E			jcc l_077C
  2407
  2408 				; optimize FAIL ('READVARL', determine_song_length.inc), line = 46
  2409
  2410 9320 20 4E 8F			jsr READVARL
  2411
  2412 				; --- WhileProlog
  2413 9323 4C 37 93			jmp l_0780
  2414 9326			l_0781
  2415
  2416 				; optimize FAIL ('m@INLINE', determine_song_length.inc), line = 49
  2417
  2418 9326				.local +MAIN.MIDFILES.READB
  2419 9326				m@INLINE
Macro: MAIN.MIDFILES.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9326 A0 00			ldy #$00
     5 9328 B1 E2			lda (_PTR),y
     6 932A 85 FF			sta EVENT
    10 932C E6 E2			inc _ADR
    11 932E D0 02			sne
    12 9330 E6 E3			inc _ADR+1
    16 9332 20 17 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2420 					.endl
  2421
  2422 				; optimize FAIL (0, determine_song_length.inc), line = 50
  2423
  2424 9335 C6 F6			dec _TMP
  2425 9337			l_0780
  2426
  2427 				; optimize OK (determine_song_length.inc), line = 47
  2428
  2429 9337 A5 F6			lda _TMP
  2430 9339 D0 EB			jne l_0781
  2431 933B 4C 71 93			jmp l_079B
  2432 933E			l_077C
  2433
  2434 				; optimize OK (determine_song_length.inc), line = 53
  2435
  2436 933E A5 E8			lda _EVENT
  2437 9340 C9 FF			cmp #$FF
  2438 9342 D0 2D			jne l_07AD
  2439
  2440 				; optimize FAIL ('m@INLINE', determine_song_length.inc), line = 55
  2441
  2442 9344				.local +MAIN.MIDFILES.READB
  2443 9344				m@INLINE
Macro: MAIN.MIDFILES.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9344 A0 00			ldy #$00
     5 9346 B1 E2			lda (_PTR),y
     6 9348 85 FF			sta EVENT
    10 934A E6 E2			inc _ADR
    11 934C D0 02			sne
    12 934E E6 E3			inc _ADR+1
    16 9350 20 17 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2444 					.endl
  2445
  2446 				; optimize FAIL ('READVARL', determine_song_length.inc), line = 56
  2447
  2448 9353 20 4E 8F			jsr READVARL
  2449
  2450 				; optimize OK (determine_song_length.inc), line = 58
  2451
  2452 9356 A5 FF			lda EVENT
  2453 9358 C9 2F			cmp #$2F
  2454 935A D0 03			jne l_07C2
  2455 935C 4C 74 93			jmp b_06C8					; break
  2456 935F			l_07C2
  2457
  2458 				; --- WhileProlog
  2459 935F 4C 6D 93			jmp l_07CE
  2460 9362			l_07CF
  2461
  2462 				; optimize FAIL (0, determine_song_length.inc), line = 64
  2463
  2464 9362 C6 F6			dec _TMP
  2465
  2466 				; optimize FAIL (0, determine_song_length.inc), line = 65
  2467
  2468 9364 E6 E2			inc _ADR
  2469 9366 D0 02			sne
  2470 9368 E6 E3			inc _ADR+1
  2471
  2472 				; optimize FAIL ('MEMBOUNDCHECK', determine_song_length.inc), line = 66
  2473
  2474 936A 20 17 8A			jsr MEMBOUNDCHECK
  2475 936D			l_07CE
  2476
  2477 				; optimize OK (determine_song_length.inc), line = 62
  2478
  2479 936D A5 F6			lda _TMP
  2480 936F D0 F1			jne l_07CF
  2481 9371			l_07CC
  2482 9371			l_07AD
  2483 9371			l_079B
  2484 9371			l_076A
  2485 9371			l_074C
  2486 9371			l_072F
  2487
  2488 				; optimize OK (determine_song_length.inc), line = 69
  2489
  2490 9371 4C 6C 92			jmp l_06C8
  2491 9374			b_06C8
  2492
  2493 				; optimize OK (determine_song_length.inc), line = 70
  2494
  2495 9374				.LOCAL
  2496 9374 A5 E7			lda _TRACKTIME+3
  2497 9376 38 E5 EC			sub _SONGTICKS+3
  2498 9379 D0 1C			bne L4
  2499 937B A5 E6			lda _TRACKTIME+2
  2500 937D C5 EB			cmp _SONGTICKS+2
  2501 937F D0 0A			bne L1
  2502 9381 A5 E5			lda _TRACKTIME+1
  2503 9383 C5 EA			cmp _SONGTICKS+1
  2504 9385 D0 04			bne L1
  2505 9387 A5 E4			lda _TRACKTIME
  2506 9389 C5 E9			cmp _SONGTICKS
  2507 938B F0 10		L1	beq L5
  2508 938D B0 04			bcs L3
  2509 938F A9 FF			lda #$FF
  2510 9391 D0 0A			bne L5
  2511 9393 A9 01		L3	lda #$01
  2512 9395 D0 06			bne L5
  2513 9397 50 04		L4	bvc L5
  2514 9399 49 FF			eor #$FF
  2515 939B 09 01			ora #$01
  2516 939D			L5
  2517 					.ENDL
  2518 939D 30 12			jmi l_07FB
  2519 939F F0 10			jeq l_07FB
  2520 93A1 A5 E4			lda _TRACKTIME
  2521 93A3 85 E9			sta _SONGTICKS
  2522 93A5 A5 E5			lda _TRACKTIME+1
  2523 93A7 85 EA			sta _SONGTICKS+1
  2524 93A9 A5 E6			lda _TRACKTIME+2
  2525 93AB 85 EB			sta _SONGTICKS+2
  2526 93AD A5 E7			lda _TRACKTIME+3
  2527 93AF 85 EC			sta _SONGTICKS+3
  2528 93B1			l_07FB
  2529
  2530 				; optimize OK (determine_song_length.inc), line = 71
  2531
  2532 93B1 A5 DC			lda CURTRACKPTR
  2533 93B3 18 69 09			add #$09
  2534 93B6 85 DC			sta CURTRACKPTR
  2535 93B8 90 02			scc
  2536 93BA E6 DD			inc CURTRACKPTR+1
  2537
  2538 				; --- ForToDoEpilog
  2539 93BC E6 DE			inc CTRK
  2540 93BE F0 03 4C 4E 92		jne l_06B9
  2541 93C3			l_06C7
  2542
  2543 				; optimize FAIL ('divmulINT.DIV', determine_song_length.inc), line = 73
  2544
  2545 93C3 E8				inx
  2546 93C4 A5 E9 95 94			mva _SONGTICKS :STACKORIGIN,x
  2547 93C8 A5 EA 95 A4			mva _SONGTICKS+1 :STACKORIGIN+STACKWIDTH,x
  2548 93CC A5 EB 95 B4			mva _SONGTICKS+2 :STACKORIGIN+STACKWIDTH*2,x
  2549 93D0 A5 EC 95 C4			mva _SONGTICKS+3 :STACKORIGIN+STACKWIDTH*3,x
  2550 93D4 E8				inx
  2551 93D5 A9 A0 95 94			mva #$A0 :STACKORIGIN,x
  2552 93D9 A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2553 93DD A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  2554 93E1 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  2555 93E5 20 9D 82			jsr divmulINT.DIV
  2556 93E8 CA				dex
  2557 93E9 B5 94			lda :STACKORIGIN,x
  2558 93EB 85 E9			sta _SONGTICKS
  2559 93ED B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2560 93EF 85 EA			sta _SONGTICKS+1
  2561 93F1 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2562 93F3 85 EB			sta _SONGTICKS+2
  2563 93F5 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2564 93F7 85 EC			sta _SONGTICKS+3
  2565 93F9 CA				dex
  2566
  2567 				; ------------------------------------------------------------
  2568
  2569 = 00FF			EVENT	= $FF
  2570 93FA			@exit
  2571 					.ifdef @new
  2572 					lda <@VarData
  2573 					sta :ztmp
  2574 					lda >@VarData
  2575 					ldy #@VarDataSize-1
  2576 					jmp @FreeMem
  2577 					els
  2578 93FA 60				rts						; ret
  2579 					eif
  2580 				.endl
  2581
  2582 93FB			.local	INITTIMER					; PROCEDURE
  2583
  2584 				; optimize OK (MIDFILES), line = 88
  2585
  2586 93FB A9 00			lda #$00
  2587 93FD 85 F0			sta _TOTALTICKS
  2588 93FF 85 F1			sta _TOTALTICKS+1
  2589 9401 85 F2			sta _TOTALTICKS+2
  2590 9403 85 F3			sta _TOTALTICKS+3
  2591
  2592 				; optimize OK (MIDFILES), line = 89
  2593
  2594 9405 8D 34 04			sta TEMPOSHIFT
  2595 9408 8D 35 04			sta TEMPOSHIFT+1
  2596 940B 8D 36 04			sta TEMPOSHIFT+2
  2597 940E 8D 37 04			sta TEMPOSHIFT+3
  2598
  2599 				; optimize OK (MIDFILES), line = 90
  2600
  2601 9411 A9 01			lda #$01
  2602 9413 85 F5			sta _TIMERSTATUS
  2603
  2604 				; optimize OK (MIDFILES), line = 91
  2605
  2606 9415 AD 19 04			lda TOTALTRACKS
  2607 9418 85 DE			sta CTRK
  2608
  2609 				; optimize OK (MIDFILES), line = 92
  2610
  2611 941A 85 DF			sta PLAYINGTRACKS
  2612
  2613 				; -------------------  ASM Block 00000079  -------------------
  2614
  2615 941C 78			    sei
  2616 941D A9 F3 8D 10 02	    mva <INT_TIMER VTIMR1
  2617 9422 A9 89 8D 11 02	    mva >INT_TIMER VTIMR1+1
  2618 				  // reset POKEY
  2619 9427 A9 00		    lda #$00
  2620 9429 A0 03		    ldy #$03
  2621 942B 8D 08 D2		    sta AUDCTL
  2622 942E 8D 01 D2		    sta AUDC1
  2623 9431 8C 0F D2		    sty SKCTL
  2624 				  // setup TIMER1
  2625 9434 8D 08 D2		    sta AUDCTL
  2626 9437 A5 53 8D 00 D2	    mva 83 AUDF1
  2627 				  // initialize IRQ for TIMER1
  2628 943C A5 10		    lda irqens
  2629 943E 09 01		    ora #$01
  2630 9440 85 10		    sta irqens
  2631 9442 8D 0E D2		    sta irqen
  2632 				  // start timer strobe
  2633 9445 8D 09 D2		    sta stimer
  2634
  2635 9448 58			    cli  // enable IRQ
  2636 				  
  2637 9449			@exit
  2638 					.ifdef @new
  2639 					lda <@VarData
  2640 					sta :ztmp
  2641 					lda >@VarData
  2642 					ldy #@VarDataSize-1
  2643 					jmp @FreeMem
  2644 					els
  2645 9449 60				rts						; ret
  2646 					eif
  2647 				.endl
  2648
  2649 944A			.local	NULLLOADPRCS					; PROCEDURE
  2650
  2651 944A			@exit
  2652 					.ifdef @new
  2653 					lda <@VarData
  2654 					sta :ztmp
  2655 					lda >@VarData
  2656 					ldy #@VarDataSize-1
  2657 					jmp @FreeMem
  2658 					els
  2659 944A 60				rts						; ret
  2660 					eif
  2661 				.endl
  2662
  2663 				; ------------------------------------------------------------
  2664 				; ------------------------------------------------------------
  2665 944B			@UnitInit
  2666
  2667 				; optimize OK (MIDFILES), line = 125
  2668
  2669 944B A9 00			lda #$00
  2670 944D 8D 30 04			sta OLDTIMERVEC
  2671 9450 8D 31 04			sta OLDTIMERVEC+1
  2672
  2673 				; optimize OK (MIDFILES), line = 126
  2674
  2675 9453 A9 4A			lda <NULLLOADPRCS
  2676 9455 8D 32 04			sta LOADPROCESS
  2677 9458 A9 94			lda >NULLLOADPRCS
  2678 945A 8D 33 04			sta LOADPROCESS+1
  2679
  2680 				; optimize OK (MIDFILES), line = 127
  2681
  2682 945D A9 80			lda #$80
  2683 945F 8D 1A 04			sta TICKDIV
  2684 9462 A9 01			lda #$01
  2685 9464 8D 1B 04			sta TICKDIV+1
  2686
  2687 				; optimize OK (MIDFILES), line = 128
  2688
  2689 9467 A9 20			lda #$20
  2690 9469 8D 1C 04			sta MS_PER_QNOTE
  2691 946C A9 A1			lda #$A1
  2692 946E 8D 1D 04			sta MS_PER_QNOTE+1
  2693 9471 A9 07			lda #$07
  2694 9473 8D 1E 04			sta MS_PER_QNOTE+2
  2695 9476 A9 00			lda #$00
  2696 9478 8D 1F 04			sta MS_PER_QNOTE+3
  2697
  2698 				; optimize OK (MIDFILES), line = 129
  2699
  2700 947B 8D 19 04			sta TOTALTRACKS
  2701
  2702 				; optimize OK (MIDFILES), line = 130
  2703
  2704 947E 85 DE			sta CTRK
  2705
  2706 				; optimize OK (MIDFILES), line = 131
  2707
  2708 9480 A9 80			lda #$80
  2709 9482 85 F5			sta _TIMERSTATUS
  2710
  2711 9484 AD 10 02			lda VTIMR1
  2712 9487 8D 30 04			sta OLDTIMERVEC
  2713 948A AD 11 02			lda VTIMR1+1
  2714 948D 8D 31 04			sta OLDTIMERVEC+1
  2715
  2716 9490 60				rts
  2717
  2718 				; ------------------------------------------------------------
  2719
  2720 = 0080			F_COUNTER	= $80
  2721 = 0040			F_TICK	= $40
  2722 = 00C0			F_FLAGS	= $C0
  2723 = 000F			F_RATIO	= $0F
  2724 = 0080			F_SKIPDELTA	= $80
  2725 = 0040			F_STOP	= $40
  2726 = 00E0			_TRKREGS	= $E0
  2727 = 0000			MID_0	= $00
  2728 = 0001			MID_1	= $01
  2729 = 0064			ERR_UNSUPPORTED_FORMAT	= $64
  2730 = 0065			ERR_NOT_ENOUGHT_MEMORY	= $65
  2731 = 0066			ERR_NOT_A_MIDI_FILE	= $66
  2732 = 6468544D		TAG_MTHD	= $6468544D
  2733 = 6B72544D		TAG_MTRK	= $6B72544D
  2734 = 0009			SIZEOF_TMIDTRACK	= $09
  2735 = 00DC			CURTRACKPTR	= $DC
  2736 = 00DE			CTRK	= $DE
  2737 = 00DF			PLAYINGTRACKS	= $DF
  2738 = 00F0			_TOTALTICKS	= $F0
  2739 = 00F4			_SUBCNT	= $F4
  2740 = 00F5			_TIMERSTATUS	= $F5
  2741 = 00F6			_DELTA	= $F6
  2742 = 00F6			_TMP	= $F6
  2743 = 00E9			_SONGTICKS	= $E9
  2744 = 00E0			_STATUS	= $E0
  2745 = 00E1			_BANK	= $E1
  2746 = 00E2			_PTR	= $E2
  2747 = 00E2			_ADR	= $E2
  2748 = 00E4			_TRACKTIME	= $E4
  2749 = 00E8			_EVENT	= $E8
  2750 = 0415			MIDDATA	= DATAORIGIN+$0015
  2751 = 0417			adr.MIDTRACKS	= [DATAORIGIN+$0017] .array [1]
  2752 9491			.var MIDTRACKS	= adr.MIDTRACKS .word
  2753 = 0418			FORMAT	= DATAORIGIN+$0018
  2754 = 0419			TOTALTRACKS	= DATAORIGIN+$0019
  2755 = 041A			TICKDIV	= DATAORIGIN+$001A
  2756 = 041C			MS_PER_QNOTE	= DATAORIGIN+$001C
  2757 = 0420			adr.CHNVOLUME	= [DATAORIGIN+$0020] .array [16]
  2758 9491			.var CHNVOLUME	= adr.CHNVOLUME .word
  2759 = 0430			OLDTIMERVEC	= DATAORIGIN+$0030
  2760 = 0432			LOADPROCESS	= DATAORIGIN+$0032
  2761 = 0434			TEMPOSHIFT	= DATAORIGIN+$0034
  2762
  2763 = 9491 17 04		MIDTRACKS
  2763 = 9493 20 04		CHNVOLUME
  2763 				.endl							; UNIT MIDFILES
  2764
  2765 				; ------------------------------------------------------------
  2766
  2767 9495			.local	MISC						; UNIT
  2768
  2769 				; ------------------------------------------------------------
  2770
  2771 = 0101			adr.BANKS	= $0101
  2772 9495			.var BANKS	= adr.BANKS .word
  2773 = FFF7			DETECTOS	= $FFF7
  2774
  2775 = 9495 01 01		BANKS
  2775 				.endl							; UNIT MISC
  2776
  2777 9497			.local	SETCOLORS					; PROCEDURE | ASSEMBLER
  2778
  2779 				; -------------------  ASM Block 00000090  -------------------
  2780
  2781 9497			  icl 'asms/setColors.a65'
Source: setColors.a65
     1 = 0088			colptr = $88
     2
     3 9497 AD A5 A9		  lda colors
     4 949A 85 88		  sta colptr
     5 949C AD A6 A9		  lda colors+1
     6 949F 85 89		  sta colptr+1
     7
     8 94A1 A5 4A		  lda playerStatus
     9 94A3 29 01		  and #ps_colorSet
    10 94A5 F0 0B		  beq skip
    11 94A7 A5 88		  lda colptr
    12 94A9 18 69 05		  add #5
    13 94AC 85 88		  sta colptr
    14 94AE 90 02 E6 89		  scc:inc colptr+1
    15
    16 94B2			skip:
    17 94B2 A0 04		  ldy #4
    18 94B4			copyColors:
    19 94B4 B1 88		  lda (colptr),y
    20 94B6 99 16 D0		  sta $D016,y
    21 94B9 99 C4 02		  sta 708,y
    22 94BC 88			  dey
    23 94BD 10 F5		  bpl copyColors
  2782
  2783 94BF			@exit
  2784 					.ifdef @new
  2785 					lda <@VarData
  2786 					sta :ztmp
  2787 					lda >@VarData
  2788 					ldy #@VarDataSize-1
  2789 					jmp @FreeMem
  2790 					els
  2791 94BF 60				rts						; ret
  2792 					eif
  2793 				.endl
  2794
  2795 94C0			.local	INVERS						; PROCEDURE | ASSEMBLER | REGISTER
  2796 94C0 85 88			sta CHARS
  2797
  2798 				; -------------------  ASM Block 00000091  -------------------
  2799
  2800 94C2			  icl 'asms/invers.a65'
Source: invers.a65
     1 94C2 A8			  tay // ldy spaces
     2 94C3 D0 01 60		  sne:rts
     3 94C6 88			  dey
     4 94C7			loop:
     5 94C7 B1 D4		  lda (scradr),y
     6 94C9 49 80		  eor #$80
     7 94CB 91 D4		  sta (scradr),y
     8 94CD 88			  dey
     9 94CE 10 F7		  bpl loop
  2801
  2802 				; ------------------------------------------------------------
  2803
  2804 = 0088			CHARS	= :EDX
  2805 94D0			@exit
  2806 					.ifdef @new
  2807 					lda <@VarData
  2808 					sta :ztmp
  2809 					lda >@VarData
  2810 					ldy #@VarDataSize-1
  2811 					jmp @FreeMem
  2812 					els
  2813 94D0 60				rts						; ret
  2814 					eif
  2815 				.endl
  2816
  2817 94D1			.local	PUTSPACES					; PROCEDURE | ASSEMBLER | REGISTER
  2818 94D1 85 88			sta SPACES
  2819
  2820 				; -------------------  ASM Block 00000092  -------------------
  2821
  2822 94D3			  icl 'asms/put_spaces.a65'
Source: put_spaces.a65
     1 94D3 A8			  tay // ldy spaces
     2 94D4 D0 01 60		  sne:rts
     3 94D7 A9 00		  lda #0
     4 94D9			loop:
     5 94D9 88			  dey
     6 94DA 91 D4		  sta (scradr),y
     7 94DC D0 FB		  bne loop
  2823
  2824 				; ------------------------------------------------------------
  2825
  2826 = 0088			SPACES	= :EDX
  2827 94DE			@exit
  2828 					.ifdef @new
  2829 					lda <@VarData
  2830 					sta :ztmp
  2831 					lda >@VarData
  2832 					ldy #@VarDataSize-1
  2833 					jmp @FreeMem
  2834 					els
  2835 94DE 60				rts						; ret
  2836 					eif
  2837 				.endl
  2838
  2839 94DF			.local	PUTINTTEXT					; PROCEDURE | ASSEMBLER | REGISTER
  2840
  2841 				; -------------------  ASM Block 00000093  -------------------
  2842
  2843 94DF			  icl 'asms/putinttext.a65'
Source: putinttext.a65
     1 = 0088			  regptr = $88
     2
     3 94DF A5 89		  lda s+1
     4 94E1 85 89		  sta regptr+1
     5 94E3 A5 88		  lda s
     6 94E5 85 88		  sta regptr
     7
     8 94E7 A0 00		  ldy #0
     9 94E9 B1 88		  lda (regptr),y
    10 94EB F0 1A		  beq exitPutText
    11
    12 94ED 48 A8		  pha:tay
    13 94EF 88			  dey
    14 94F0 E6 88		  inc regptr
    15 94F2 D0 02 E6 89		  sne:inc regptr+1
    16
    17 94F6			putText:
    18 94F6 B1 88		  lda (regptr),y   // get string character
    19 94F8 91 D4		  sta (scradr),y   // put on screen
    20 94FA 88			  dey
    21 94FB 10 F9		  bpl putText
    22
    23 94FD 68			  pla
    24 94FE 18			  clc
    25 94FF 65 D4		  adc scradr
    26 9501 85 D4		  sta scradr
    27 9503 90 02 E6 D5		  scc:inc scradr+1
    28
    29 9507			exitPutText:
  2844
  2845 				; ------------------------------------------------------------
  2846
  2847 = 0088			S	= :EDX
  2848 9507			@exit
  2849 					.ifdef @new
  2850 					lda <@VarData
  2851 					sta :ztmp
  2852 					lda >@VarData
  2853 					ldy #@VarDataSize-1
  2854 					jmp @FreeMem
  2855 					els
  2856 9507 60				rts						; ret
  2857 					eif
  2858 				.endl
  2859
  2860 9508			.local	PUTASCTEXT					; PROCEDURE | ASSEMBLER | REGISTER
  2861
  2862 				; -------------------  ASM Block 00000094  -------------------
  2863
  2864 9508			  icl 'asms/putasctext.a65'
Source: putasctext.a65
     1 = 0088			  regptr = $88
     2
     3 9508 8A 48		  txa:pha
     4
     5 950A A0 00		  ldy #0
     6 950C B1 88		  lda (regptr),y
     7 950E F0 26		  beq exitPutText
     8
     9 9510 48 A8		  pha:tay
    10 9512 88			  dey
    11 9513 E6 88		  inc regptr
    12 9515 D0 02 E6 89		  sne:inc regptr+1
    13
    14 9519			putText:
    15 9519 B1 88		  lda (regptr),y   // get string character
    16
    17 951B			atasci2antic:
    18 951B 0A			  asl
    19 951C 69 C0		  adc #$c0
    20 951E 10 02 49 40		  spl:eor #$40
    21 9522 4A			  lsr
    22 9523 90 02 49 80		  scc:eor #$80
    23
    24 9527 91 D4		  sta (scradr),y   // put on screen
    25 9529 88			  dey
    26 952A 10 ED		  bpl putText
    27
    28 952C 68			  pla
    29 952D 18			  clc
    30 952E 65 D4		  adc scradr
    31 9530 85 D4		  sta scradr
    32 9532 90 02 E6 D5		  scc:inc scradr+1
    33
    34 9536			exitPutText:
    35 9536 68 AA		  pla:tax
  2865
  2866 				; ------------------------------------------------------------
  2867
  2868 = 0088			S	= :EDX
  2869 9538			@exit
  2870 					.ifdef @new
  2871 					lda <@VarData
  2872 					sta :ztmp
  2873 					lda >@VarData
  2874 					ldy #@VarDataSize-1
  2875 					jmp @FreeMem
  2876 					els
  2877 9538 60				rts						; ret
  2878 					eif
  2879 				.endl
  2880
  2881 9539			.local	PUTHEX						; PROCEDURE | ASSEMBLER
  2882
  2883 				; -------------------  ASM Block 00000095  -------------------
  2884
  2885 9539			  icl 'asms/puthex.a65'
Source: puthex.a65
     1 				// store `scradr` value as a operand of opcode
     2 9539 8A 48		  txa:pha
     3
     4 953B A5 D4		  lda scradr
     5 953D 8D 81 95		  sta screen
     6 9540 A5 D5		  lda scradr+1
     7 9542 8D 82 95		  sta screen+1
     8 9545 AD 70 04		  lda v
     9 9548 8D 6A 95		  sta vadr1
    10 954B 8D 72 95		  sta vadr2
    11 954E AD 71 04		  lda v+1
    12 9551 8D 6B 95		  sta vadr1+1
    13 9554 8D 73 95		  sta vadr2+1
    14
    15 9557 A9 00		  lda #0
    16 9559 8D 96 95		  sta _vofs
    17
    18 				// get nibbles to show, if =0 exit
    19 955C AC 72 04		  ldy n
    20 955F F0 32		  beq stop
    21
    22 9561			hexLoop:
    23 9561 AE 96 95		  ldx _vofs
    24 9564 98			  tya
    25 9565 29 01		  and #1
    26 9567 D0 08		  bne HiNibble
    27 9569 BD 00 F0		  lda vadr1:$f000,x
    28 956C 29 0F		  and #$0f
    29 956E 4C 7B 95		  jmp put2screen
    30 9571			HiNibble:
    31 9571 BD 00 F0		  lda vadr2:$f000,x
    32 9574 4A 4A 4A 4A		  :4 lsr @
    33 9578 EE 96 95		  inc _vofs
    34
    35 957B			put2screen:
    36 957B AA			  tax
    37 957C BD 97 95		  lda hexTab,x
    38 				//  ora puttextinvert
    39 957F 88			  dey
    40 9580 99 00 F0		  sta screen:$f000,y
    41
    42 9583 C0 00		  cpy #0
    43 9585 D0 DA		  bne hexLoop
    44
    45 9587			calcEndAddr:
    46 9587 A5 D4		  lda scradr
    47 9589 18			  clc
    48 958A 6D 72 04		  adc n
    49 958D 85 D4		  sta scradr
    50 958F 90 02		  bcc stop
    51 9591 E6 D5		  inc scradr+1
    52
    53 9593			stop:
    54 9593 68 AA		  pla:tax
    55 9595 60			  rts
    56
    57 9596			_vofs
    58 9596 00			  .by 0
    59 9597			hexTab:
    60 9597 10 11 12 13 14 15 +   dta d'0123456789ABCDEF'
  2886
  2887 				; ------------------------------------------------------------
  2888
  2889 = 0470			V	= DATAORIGIN+$0070
  2890 = 0472			N	= DATAORIGIN+$0072
  2891
  2892 = 0470			@VarData	= V
  2893 = 0003			@VarDataSize	= 3
  2894
  2895 95A7			@exit
  2896 					.ifdef @new
  2897 					lda <@VarData
  2898 					sta :ztmp
  2899 					lda >@VarData
  2900 					ldy #@VarDataSize-1
  2901 					jmp @FreeMem
  2902 					els
  2903 95A7 60				rts						; ret
  2904 					eif
  2905 				.endl
  2906
  2907 95A8			.local	PUTINT						; PROCEDURE | ASSEMBLER
  2908
  2909 				; -------------------  ASM Block 00000096  -------------------
  2910
  2911 95A8			  icl 'asms/int2str.a65'
Source: int2str.a65
     1 = 0000			EOL = 0
     2
     3 95A8 A5 D4		    lda scradr
     4 95AA 8D F4 95		    sta screen1
     5 95AD 8D 0B 96		    sta screen2
     6 95B0 A5 D5		    lda scradr+1
     7 95B2 8D F5 95		    sta screen1+1
     8 95B5 8D 0C 96		    sta screen2+1
     9
    10 95B8			INT2STR:
    11 95B8 A0 00		    ldy #0
    12 95BA 8C 19 96		    sty _cnt
    13 95BD			ITSNEXT:
    14 95BD A2 00		    ldx #0
    15 95BF			ITSSLP:
    16 95BF AD 73 04		    lda value
    17 95C2 38			    sec
    18 95C3 F9 1A 96		    sbc Pow10Tab,Y
    19 95C6 8D 73 04		    sta value
    20 95C9 AD 74 04		    lda value+1
    21 95CC C8			    iny
    22 95CD F9 1A 96		    sbc Pow10Tab,Y
    23 95D0 90 08		    bcc ITSADD
    24 95D2 8D 74 04		    sta value+1
    25 95D5 E8			    inx
    26 95D6 88			    dey
    27 95D7 18			    clc
    28 95D8 90 E5		    bcc ITSSLP
    29 95DA			ITSADD:
    30 95DA 88			    dey
    31 95DB AD 73 04		    lda value
    32 95DE 79 1A 96		    adc Pow10Tab,Y
    33 95E1 8D 73 04		    sta value
    34 95E4 8A			    txa
    35 95E5 09 10		    ora #$10
    36
    37 				; skip lead zeros
    38 95E7 AE 19 96		    ldx _cnt
    39 95EA D0 04		    bne storeDigit
    40 95EC C9 10		    cmp #$10
    41 95EE F0 09		    beq skipDigit
    42
    43 95F0			storeDigit:
    44 95F0 0D 6E 04		    ora puttextinvert
    45 95F3 9D 00 F0		    sta screen1:$f000,X
    46 95F6 EE 19 96		    inc _cnt
    47 95F9			skipDigit:
    48 95F9 C8			    iny
    49 95FA C8			    iny
    50 95FB C0 08		    cpy #8
    51 95FD 90 BE		    bcc ITSNEXT
    52
    53 				; last digit
    54 95FF AD 73 04		    lda value
    55 9602 09 10		    ora #$10
    56 9604 AE 19 96		    ldx _cnt
    57 9607 0D 6E 04		    ora puttextinvert
    58 960A 9D 00 F0		    sta screen2:$f000,X
    59 960D E8			    inx
    60
    61 				; set screen addres to the end of value
    62 960E 8A			    txa
    63 960F 18			    clc
    64 9610 65 D4		    adc scradr
    65 9612 85 D4		    sta scradr
    66 9614 90 02		    bcc stop
    67 9616 E6 D5		    inc scradr+1
    68
    69 9618			stop:
    70 9618 60			    rts
    71
    72 9619			_cnt
    73 9619 00			    .by 0
    74 961A			Pow10Tab
    75 961A 10 27		    .wo 10000
    76 961C E8 03		    .wo 1000
    77 961E 64 00		    .wo 100
    78 9620 0A 00		    .wo 10
  2912
  2913 				; ------------------------------------------------------------
  2914
  2915 = 0473			VALUE	= DATAORIGIN+$0073
  2916
  2917 = 0473			@VarData	= VALUE
  2918 = 0002			@VarDataSize	= 2
  2919
  2920 9622			@exit
  2921 					.ifdef @new
  2922 					lda <@VarData
  2923 					sta :ztmp
  2924 					lda >@VarData
  2925 					ldy #@VarDataSize-1
  2926 					jmp @FreeMem
  2927 					els
  2928 9622 60				rts						; ret
  2929 					eif
  2930 				.endl
  2931
  2932 9623			.local	HLINE						; PROCEDURE | ASSEMBLER
  2933
  2934 				; -------------------  ASM Block 00000097  -------------------
  2935
  2936 9623			  icl 'asms/hline.a65'
Source: hline.a65
     1 9623 A0 27		  ldy #39
     2 9625 A9 4A		  lda #$4a
     3 9627			loop:
     4 9627 91 D4		  sta (scradr),y
     5 9629 88			  dey
     6 962A 10 FB		  bpl loop
  2937
  2938 962C			@exit
  2939 					.ifdef @new
  2940 					lda <@VarData
  2941 					sta :ztmp
  2942 					lda >@VarData
  2943 					ldy #@VarDataSize-1
  2944 					jmp @FreeMem
  2945 					els
  2946 962C 60				rts						; ret
  2947 					eif
  2948 				.endl
  2949
  2950 962D			.local	CLEARWORKAREA					; PROCEDURE | ASSEMBLER
  2951
  2952 				; -------------------  ASM Block 00000098  -------------------
  2953
  2954 962D			  icl 'asms/clear_workarea.a65'
Source: clear_workarea.a65
     1 962D A0 00		  ldy #0
     2 962F A9 00		  lda #0
     3 9631			loop1:
     4 9631 99 E8 37		  sta SCREEN_WORK,y
     5 9634 99 E8 38		  sta SCREEN_WORK+$100,y
     6 9637 C8			  iny
     7 9638 D0 F7		  bne loop1
     8 963A A0 A8		  ldy #$A8
     9 963C			loop2:
    10 963C 99 E7 39		  sta SCREEN_WORK+$1FF,y
    11 963F 88			  dey
    12 9640 D0 FA		  bne loop2
  2955
  2956 9642			@exit
  2957 					.ifdef @new
  2958 					lda <@VarData
  2959 					sta :ztmp
  2960 					lda >@VarData
  2961 					ldy #@VarDataSize-1
  2962 					jmp @FreeMem
  2963 					els
  2964 9642 60				rts						; ret
  2965 					eif
  2966 				.endl
  2967
  2968 9643			.local	GETFILEEXT					; PROCEDURE | ASSEMBLER | REGISTER
  2969
  2970 				; -------------------  ASM Block 00000099  -------------------
  2971
  2972 9643			  icl 'asms/get_file_ext.a65'
Source: get_file_ext.a65
     1 = 0088			hlpptr = $88
     2 = 04F8			result = $4f8
     3
     4 9643 A9 00		  lda #0
     5 9645 8D F8 04		  sta result
     6 9648 8D F9 04		  sta result+1
     7 964B 8D FA 04		  sta result+2
     8 964E 8D FB 04		  sta result+3
     9
    10 9651 A0 00		  ldy #0
    11 9653 B1 88		  lda (hlpptr),y
    12 9655 8D 82 96		  sta fnlen
    13 9658 F0 27		  beq endGetFileExt
    14 965A A8			  tay
    15
    16 965B			dotSearch:
    17 965B B1 88		  lda (hlpptr),y
    18 965D C9 2E		  cmp #'.'
    19 965F F0 05		  beq endDotSearch
    20 9661 88			  dey
    21 9662 D0 F7		  bne dotSearch
    22 9664 F0 1B		  beq endGetFileExt
    23
    24 9666			endDotSearch:
    25 9666 8C 83 96		  sty extst
    26 9669 AD 82 96		  lda fnlen
    27 966C 38			  sec
    28 966D ED 83 96		  sbc extst
    29 9670 C9 04		  cmp #4
    30 9672 B0 0D		  bcs endGetFileExt
    31
    32 9674 C8			  iny
    33 9675 AA			  tax
    34 9676 F0 09		  beq endGetFileExt
    35
    36 9678			copyExt2Result:
    37 9678 B1 88		  lda (hlpptr),y
    38 967A 9D F8 04		  sta result,x
    39 967D C8			  iny
    40 967E CA			  dex
    41 967F D0 F7		  bne copyExt2Result
    42
    43 9681			endGetFileExt:
    44 9681 60			  rts
    45
    46 9682 00			fnlen .byte 0
    47 9683 00			extst .byte 0
  2973
  2974 				; ------------------------------------------------------------
  2975
  2976 = 0088			FN	= :EDX
  2977 9684			@exit
  2978 					.ifdef @new
  2979 					lda <@VarData
  2980 					sta :ztmp
  2981 					lda >@VarData
  2982 					ldy #@VarDataSize-1
  2983 					jmp @FreeMem
  2984 					els
  2985 9684 60				rts						; ret
  2986 					eif
  2987 				.endl
  2988
  2989 9685			.local	REDUCEFILENAME					; PROCEDURE | ASSEMBLER | REGISTER
  2990
  2991 				; -------------------  ASM Block 00000100  -------------------
  2992
  2993 9685			  icl 'asms/reduce_filename.a65'
Source: reduce_filename.a65
     1 = 0088			inreg  = $88
     2 = 008C			outReg = $8c
     3
     4 9685 8A 48		  txa:pha
     5
     6 9687 A5 88		  lda inreg
     7 9689 8D 9B 96		  sta inptr
     8 968C A5 89		  lda inreg+1
     9 968E 8D 9C 96		  sta inptr+1
    10
    11 				; 0123456789abcdef01
    12 				;  *:FILENAMEEXT 000
    13
    14 9691 A9 0B		  lda #$0b
    15 9693 8D A6 96		  sta fpos
    16
    17 9696 A2 03		  ldx #3
    18 9698 A0 01		  ldy #1
    19
    20 969A			fnLoop:
    21 969A BD 00 20		  lda inptr:$2000,x
    22 969D C9 20		  cmp #' '
    23 969F F0 03		  beq skip
    24 96A1 91 8C		  sta (outreg),y
    25 96A3 C8			  iny
    26 96A4			skip:
    27 96A4 E8			  inx
    28 96A5 E0 0B		  cpx fpos:#11
    29 96A7 D0 F1		  bne fnLoop
    30
    31 96A9			dot:
    32 96A9 E0 0E		  cpx #$0e
    33 96AB F0 0B		  beq storeDot
    34
    35 96AD 98 48		  tya:pha
    36 96AF C8			  iny
    37 96B0 A9 0E		  lda #$0e
    38 96B2 8D A6 96		  sta fpos
    39 96B5 4C 9A 96		  jmp fnLoop
    40
    41 96B8			storeDot:
    42 96B8 88			  dey
    43 96B9 98 AA		  tya:tax   // move Y to X - string length
    44 96BB 68 A8		  pla:tay   // pop stored dot position
    45 96BD A9 2E		  lda #'.'
    46 96BF 91 8C		  sta (outreg),y
    47
    48 96C1 8A			  txa       // move string length to Accu
    49 96C2 A0 00		  ldy #0
    50 96C4 91 8C		  sta (outreg),y
    51
    52 96C6 68 AA		  pla:tax
  2994
  2995 				; ------------------------------------------------------------
  2996
  2997 = 0088			INFN	= :EDX
  2998 = 008C			OUTFN	= :ECX
  2999 96C8			@exit
  3000 					.ifdef @new
  3001 					lda <@VarData
  3002 					sta :ztmp
  3003 					lda >@VarData
  3004 					ldy #@VarDataSize-1
  3005 					jmp @FreeMem
  3006 					els
  3007 96C8 60				rts						; ret
  3008 					eif
  3009 				.endl
  3010
  3011 96C9			.local	GETDEVICESPEC					; FUNCTION | ASSEMBLER | REGISTER
  3012
  3013 				; -------------------  ASM Block 00000102  -------------------
  3014
  3015 96C9			  icl 'asms/getDeviceSpec.a65'
Source: getDeviceSpec.a65
     1 = 0088			fnreg   = $88
     2 = 008C			specreg = $8c
     3
     4 96C9			getDeviceSpec:
     5 96C9 A0 01		  ldy #1
     6 96CB			colonLoop:
     7 96CB B1 88		  lda (fnreg),y
     8 96CD C9 3A		  cmp #':'
     9 96CF F0 0A		  beq foundSpec
    10 96D1 C8			  iny
    11 96D2 C0 04		  cpy #4
    12 96D4 D0 F5		  bne colonLoop
    13
    14 96D6			specNotFound:
    15 96D6 A9 00		  lda #0
    16 				  ; tay
    17 				  ; sta (specreg),y
    18 96D8 85 90		  sta result
    19 96DA 60			  rts
    20
    21 96DB			foundSpec:
    22 96DB 98			  tya
    23 96DC A0 00		  ldy #0
    24 96DE 91 8C		  sta (specreg),y
    25 96E0 A8			  tay
    26
    27 96E1			copySpec:
    28 96E1 B1 88		  lda (fnreg),y
    29 96E3 91 8C		  sta (specreg),y
    30 96E5 88			  dey
    31 96E6 D0 F9		  bne copySpec
    32
    33 96E8 A9 01		  lda #1
    34 96EA 85 90		  sta result
  3016
  3017 96EC			@exit
  3018
  3019 				; ------------------------------------------------------------
  3020
  3021 = 0088			FN	= :EDX
  3022 = 008C			SPEC	= :ECX
  3023 = 0090			RESULT	= :STACKORIGIN-4
  3024 96EC 60				rts						; ret
  3025 				.endl
  3026
  3027 96ED			.local	JOINSTRINGS					; PROCEDURE | ASSEMBLER | REGISTER
  3028
  3029 				; -------------------  ASM Block 00000103  -------------------
  3030
  3031 96ED			  icl 'asms/joinStrings.a65'
Source: joinStrings.a65
     1 96ED			JoinStrings:
     2
     3 96ED 8A 48		    txa:pha
     4
     5 96EF A0 00		    ldy #0
     6 96F1 B1 88		    lda (s1),y
     7 96F3 8D 00 97		    sta devlen
     8 96F6 A2 01		    ldx #1
     9
    10 96F8			copyS1:
    11 96F8 C8			    iny
    12 96F9 B1 88		    lda (s1),y
    13 96FB 9D 80 05		    sta adr.outstr,x
    14 96FE E8			    inx
    15 96FF C0 00		    cpy devlen:#00
    16 9701 D0 F5		    bne copyS1
    17
    18 9703			nextCopy:
    19 9703 A0 00		    ldy #0
    20 9705 B1 8C		    lda (s2),y
    21 9707 8D 12 97		    sta fnlen
    22
    23 970A			copyS2:
    24 970A C8			    iny
    25 970B B1 8C		    lda (s2),y
    26 970D 9D 80 05		    sta adr.outstr,x
    27 9710 E8			    inx
    28 9711 C0 00		    cpy fnlen:#00
    29 9713 D0 F5		    bne copyS2
    30
    31 9715 CA			    dex
    32 9716 8E 80 05		    stx adr.outstr
    33
    34 9719 68 AA		    pla:tax
    35 971B 60			    rts
  3032
  3033 				; ------------------------------------------------------------
  3034
  3035 = 0088			S1	= :EDX
  3036 = 008C			S2	= :ECX
  3037 971C			@exit
  3038 					.ifdef @new
  3039 					lda <@VarData
  3040 					sta :ztmp
  3041 					lda >@VarData
  3042 					ldy #@VarDataSize-1
  3043 					jmp @FreeMem
  3044 					els
  3045 971C 60				rts						; ret
  3046 					eif
  3047 				.endl
  3048
  3049 971D			.local	GETLN						; PROCEDURE | ASSEMBLER | REGISTER
  3050
  3051 				; -------------------  ASM Block 00000104  -------------------
  3052
  3053 971D			  icl 'asms/get_line.a65'
Source: get_line.a65
     1 971D 8A 48		  txa:pha
     2
     3 971F A5 88		  lda chn
     4 9721 0A 0A 0A 0A		  :4 asl @
     5 9725 AA			  tax
     6
     7 9726 A9 05		  lda #5
     8 9728 9D 42 03		  sta iccmd,x
     9
    10 972B A5 8D		  lda buf+1
    11 972D 9D 45 03		  sta icbufa+1,x
    12 9730 A5 8C		  lda buf
    13 9732 18 69 01		  add #1
    14 9735 9D 44 03		  sta icbufa,x
    15 9738 90 03 FE 45 03	  scc:inc icbufa+1,X
    16
    17 973D A9 80		  lda #$80
    18 973F 9D 48 03		  sta icbufl,x
    19 9742 A9 00		  lda #0
    20 9744 9D 49 03		  sta icbufl+1,x
    21
    22 9747			  m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 9747 EE 01 D3				inc portb
     6 974A 20 56 E4				jsr CIOV
     8 974D CE 01 D3				dec portb
Source: get_line.a65
    23 9750 8C 07 04		  sty MAIN.SYSTEM.IOResult
    24
    25 9753 BD 48 03		  lda icbufl,x
    26 9756 A0 00		  ldy #0
    27 9758 91 8C		  sta (buf),y
    28
    29 975A 68 AA		  pla:tax
  3054
  3055 				; ------------------------------------------------------------
  3056
  3057 = 0088			CHN	= :EDX
  3058 = 008C			BUF	= :ECX
  3059 975C			@exit
  3060 					.ifdef @new
  3061 					lda <@VarData
  3062 					sta :ztmp
  3063 					lda >@VarData
  3064 					ldy #@VarDataSize-1
  3065 					jmp @FreeMem
  3066 					els
  3067 975C 60				rts						; ret
  3068 					eif
  3069 				.endl
  3070
  3071 975D			.local	MYNMI						; PROCEDURE | ASSEMBLER | INTERRUPT
  3072
  3073 				; -------------------  ASM Block 00000105  -------------------
  3074
  3075 975D			  icl 'asms/nmi.a65'
Source: nmi.a65
     1 = 0012			RTCLOK = $12
     2 = D209			KBCODE = $d209
     3 = D20F			SKSTAT = $d20f
     4 = D40F			NMIRES = $d40f
     5
     6 = 022B			SRTIMR = $022b
     7 = 026D			KEYDIS = $026d
     8 = 02DA			KEYREP = $02da
     9 = 02F1			KEYDEL = $02f1
    10 = 02FC			CH     = $02fc
    11 = 02C0			PCOLR0 = $02c0
    12 = D012			COLPM0 = $d012
    13
    14 				// systemowa procedure obsługi RTClock ($C0E2)
    15 975D D8			    cld
    16 975E 8D A1 97		    sta rega
    17 9761 8E A3 97		    stx regx
    18 9764 8C A5 97		    sty regy
    19 9767 8D 0F D4		    STA NMIRES
    20
    21 976A E6 14		    inc RTCLOK+2
    22 976C			end_rtclk:
    23
    24 976C			skipTHI:
    25 				// fragment systemowej procedury kopiowania rejestrów kolorów
    26 				//    ldx #$08
    27 				//colloop:
    28 				//    lda PCOLR0,x
    29 				//    sta COLPM0,x
    30 				//    dex
    31 				//    bpl colloop
    32
    33 				// systemowa procedura obsługi klawiatry ($C1A1)
    34 976C AD 0F D2		    lda SKSTAT
    35 976F 29 04		    and #$04
    36 9771 F0 08		    beq skip_keyDelay
    37 9773 AD F1 02		    lda KEYDEL
    38 9776 F0 03		    beq skip_keyDelay
    39 9778 CE F1 02		    dec KEYDEL
    40
    41 977B			skip_keyDelay:
    42 977B AD 2B 02		    lda SRTIMR
    43 977E F0 20		    beq end_key
    44
    45 9780 AD 0F D2		    lda SKSTAT
    46 9783 29 04		    and #$04
    47 9785 D0 14		    bne skip_key
    48
    49 9787 CE 2B 02		    dec SRTIMR
    50 978A D0 14		    bne end_key
    51 978C AD DA 02		    lda KEYREP
    52 978F 8D 2B 02		    sta SRTIMR
    53
    54 9792 AD 09 D2		    lda KBCODE
    55 9795 8D FC 02		    sta CH
    56 9798 4C A0 97		    jmp end_key
    57
    58 979B			skip_key:
    59 979B A9 00		    lda #$00
    60 979D 8D 2B 02		    sta SRTIMR
    61
    62 97A0			end_key:
    63
    64 97A0 A9 00		    lda rega:#0
    65 97A2 A2 00		    ldx regx:#0
    66 97A4 A0 00		    ldy regy:#0
  3076
  3077 97A6 40				rti						; ret
  3078 				.endl
  3079
  3080 97A7			.local	IMMEDIATEVBLK					; PROCEDURE | ASSEMBLER | INTERRUPT
  3081
  3082 				; -------------------  ASM Block 00000106  -------------------
  3083
  3084 = 0012			RTCLOK = $12
  3085 = E45F			JSYSVB = $E45F
  3086
  3087 				  // pha
  3088 				  // txa:pha
  3089
  3090 97A7 A5 14		  lda RTCLOK+2
  3091 97A9 29 03		  and #%11
  3092 97AB D0 11		  bne skipTHI
  3093
  3094 97AD A6 1F		  ldx thi
  3095 97AF 30 0D		  bmi skipTHI
  3096 97B1 BD C1 97		  lda thumblr,x
  3097 97B4 8D CC 3A		  sta SCREEN_STATUS
  3098 97B7 CA			  dex
  3099 97B8 10 02 A2 03		  spl:ldx #3
  3100 97BC 86 1F		  stx thi
  3101
  3102 97BE			skipTHI:
  3103 				  // pla:tax
  3104 				  // pla
  3105
  3106 97BE 4C 00 00		  JMP OLD_VBLKI:0000
  3107 				  // jmp JSYSVB
  3108
  3109 97C1			thumblr:
  3110 97C1 29 1C 1D 1E		    .byte $29,$1c,$1d,$1e
  3111
  3112 97C5 40				rti						; ret
  3113 				.endl
  3114
  3115 97C6			.local	SETNMI						; PROCEDURE
  3116
  3117 				; optimize OK (mynmi.inc), line = 48
  3118
  3119 97C6 AD FA FF			lda NMIVEC
  3120 97C9 8D 77 04			sta OLDNMIVEC
  3121 97CC AD FB FF			lda NMIVEC+1
  3122 97CF 8D 78 04			sta OLDNMIVEC+1
  3123
  3124 				; optimize OK (mynmi.inc), line = 49
  3125
  3126 97D2 AD 22 02			lda VVBLKI
  3127 97D5 8D 75 04			sta OLDVVBLKI
  3128 97D8 AD 23 02			lda VVBLKI+1
  3129 97DB 8D 76 04			sta OLDVVBLKI+1
  3130
  3131 				; optimize OK (mynmi.inc), line = 50
  3132
  3133 97DE A9 00			lda #$00
  3134 97E0 8D 0E D4			sta NMIEN
  3135
  3136 				; -------------------  ASM Block 00000107  -------------------
  3137
  3138 97E3 8A 48		    txa:pha
  3139 97E5 AD 22 02		    lda VVBLKI
  3140 97E8 8D BF 97		    sta ImmediateVBLK.OLD_VBLKI
  3141 97EB AD 23 02		    lda VVBLKI+1
  3142 97EE 8D C0 97		    sta ImmediateVBLK.OLD_VBLKI+1
  3143 97F1 EE 01 D3		    inc PORTB
  3144 97F4 A9 06		    lda #6
  3145 97F6 A0 A7		    ldy #<ImmediateVBLK
  3146 97F8 A2 97		    ldx #>ImmediateVBLK
  3147 97FA 20 5C E4		    jsr $e45c
  3148 97FD CE 01 D3		    dec PORTB
  3149 9800 68 AA		    pla:tax
  3150 				  
  3151 				; optimize OK (mynmi.inc), line = 66
  3152
  3153 9802 A9 5D			lda <MYNMI
  3154 9804 8D FA FF			sta NMIVEC
  3155 9807 A9 97			lda >MYNMI
  3156 9809 8D FB FF			sta NMIVEC+1
  3157
  3158 				; optimize OK (mynmi.inc), line = 67
  3159
  3160 980C A9 40			lda #$40
  3161 980E 8D 0E D4			sta NMIEN
  3162 9811			@exit
  3163 					.ifdef @new
  3164 					lda <@VarData
  3165 					sta :ztmp
  3166 					lda >@VarData
  3167 					ldy #@VarDataSize-1
  3168 					jmp @FreeMem
  3169 					els
  3170 9811 60				rts						; ret
  3171 					eif
  3172 				.endl
  3173
  3174 9812			.local	UNSETNMI					; PROCEDURE
  3175
  3176 				; optimize OK (mynmi.inc), line = 72
  3177
  3178 9812 A9 00			lda #$00
  3179 9814 8D 0E D4			sta NMIEN
  3180
  3181 				; optimize OK (mynmi.inc), line = 73
  3182
  3183 9817 AD 75 04			lda OLDVVBLKI
  3184 981A 8D 22 02			sta VVBLKI
  3185 981D AD 76 04			lda OLDVVBLKI+1
  3186 9820 8D 23 02			sta VVBLKI+1
  3187
  3188 				; optimize OK (mynmi.inc), line = 74
  3189
  3190 9823 AD 77 04			lda OLDNMIVEC
  3191 9826 8D FA FF			sta NMIVEC
  3192 9829 AD 78 04			lda OLDNMIVEC+1
  3193 982C 8D FB FF			sta NMIVEC+1
  3194
  3195 				; optimize OK (mynmi.inc), line = 75
  3196
  3197 982F A9 40			lda #$40
  3198 9831 8D 0E D4			sta NMIEN
  3199 9834			@exit
  3200 					.ifdef @new
  3201 					lda <@VarData
  3202 					sta :ztmp
  3203 					lda >@VarData
  3204 					ldy #@VarDataSize-1
  3205 					jmp @FreeMem
  3206 					els
  3207 9834 60				rts						; ret
  3208 					eif
  3209 				.endl
  3210
  3211 9835			.local	KEYSCAN2ASC					; FUNCTION | ASSEMBLER
  3212 9835 8D 79 04			sta KEYSCAN
  3213
  3214 				; -------------------  ASM Block 00000108  -------------------
  3215
  3216 9838			  icl 'asms/keyscan2asc.a65'
Source: keyscan2asc.a65
     1 9838 A0 00		    ldy #0
     2 983A			loop:
     3 983A B9 57 98		    lda scan2asc,y
     4 983D F0 05		    beq skip
     5 983F CD 79 04		    cmp keyscan
     6 9842 F0 0B		    beq found
     7 9844			skip:
     8 9844 C8			    iny
     9 9845 C0 40		    cpy #64
    10 9847 D0 F1		    bne loop
    11
    12 9849			notFound:
    13 9849 A9 00		    lda #0
    14 984B 8D 7A 04		    sta Result
    15 984E 60			    rts
    16
    17 984F			found:
    18 984F 98			    tya
    19 9850 18 69 20		    add #32
    20 9853 8D 7A 04		    sta Result
    21
    22 9856 60			    rts
    23
    24 9857			scan2asc:        // from 32 to 95
    25 9857 21			    .byte 33   //   space
    26 9858 5F			    .byte 95   // ! exclamation mark
    27 9859 00			    .byte 0  // " quote mark
    28 985A 5A			    .byte 90   // # hash
    29 985B 00			    .byte 0  // $ dolar
    30 985C 5D			    .byte 93   // % percent
    31 985D 00			    .byte 0  // & and
    32 985E 00			    .byte 0  // '
    33 985F 00			    .byte 0  // (
    34 9860 00			    .byte 0  // )
    35 9861 07			    .byte 7    // * star
    36 9862 00			    .byte 0  // + plus
    37 9863 00			    .byte 0  //  comma
    38 9864 0E			    .byte 14   // - hypen
    39 9865 22			    .byte 34   // . dot
    40 9866 26			    .byte 38   // / slash
    41 9867 32 1F 1E 1A 18 1D +     .byte 50,31,30,26,24,29,27,51,53,48 // 0-9 digits
    42 9871 42			    .byte 66   // :colon
    43 9872 00			    .byte 0  // ; semicolon
    44 9873 36			    .byte 54   // < less sign
    45 9874 00			    .byte 0  // = equal
    46 9875 37			    .byte 55   // > more sign
    47 9876 66			    .byte 102  // ? question mark
    48 9877 00			    .byte 0  // @ at
    49 9878 3F 15 12 3A 2A 38 +     .byte 63,21,18,58,42,56,61,57,13,1,5,0,37,35,8,10,47,40,62,45,11,16,46,22,43,23 // A-Z letters
    50 9892 00			    .byte 0  // [
    51 9893 46			    .byte 70   // \ backslash
    52 9894 00			    .byte 0  // ]
    53 9895 00			    .byte 0  // ^
    54 9896 4E			    .byte 78    // _ underscore mark
  3217
  3218 9897			@exit
  3219
  3220 				; ------------------------------------------------------------
  3221
  3222 = 0479			KEYSCAN	= DATAORIGIN+$0079
  3223 = 047A			RESULT	= DATAORIGIN+$007A
  3224
  3225 = 0479			@VarData	= KEYSCAN
  3226 = 0001			@VarDataSize	= 1
  3227
  3228 9897 60				rts						; ret
  3229 				.endl
  3230
  3231 9898			.local	RESET_MIDI					; PROCEDURE | ASSEMBLER
  3232
  3233 				; -------------------  ASM Block 00000109  -------------------
  3234
  3235 9898 8A 48		  txa:pha
  3236 989A A2 00		  ldx #0
  3237 989C			sendData:
  3238 989C BD AF 98		  lda GM_RESET,x
  3239 989F 85 FF		  sta MAIN.MIDI_FIFO.FIFO_Byte
  3240 98A1 20 2C 89		  jsr MAIN.MIDI_FIFO.FIFO_WriteByte
  3241 98A4 E8			  inx
  3242 98A5 E0 06		  cpx #6
  3243 98A7 D0 F3		  bne sendData
  3244 98A9 20 45 89		  jsr MAIN.MIDI_FIFO.FIFO_Flush
  3245 98AC 68 AA		  pla:tax
  3246 98AE 60			  rts
  3247 98AF			GM_RESET:
  3248 98AF F0 7E 7F 09 01 F7	  .byte $f0, $7e, $7f, $09, $01, $f7
  3249
  3250 98B5			@exit
  3251 					.ifdef @new
  3252 					lda <@VarData
  3253 					sta :ztmp
  3254 					lda >@VarData
  3255 					ldy #@VarDataSize-1
  3256 					jmp @FreeMem
  3257 					els
  3258 98B5 60				rts						; ret
  3259 					eif
  3260 				.endl
  3261
  3262 98B6			.local	STOPMIDI					; PROCEDURE
  3263
  3264 				; optimize OK (helpers.inc), line = 34
  3265
  3266 98B6 A5 F5			lda MIDFILES._TIMERSTATUS
  3267 98B8 09 80			ora #$80
  3268 98BA 85 F5			sta MIDFILES._TIMERSTATUS
  3269
  3270 				; optimize OK (helpers.inc), line = 35
  3271
  3272 98BC A9 00			lda #$00
  3273 98BE 85 F0			sta MIDFILES._TOTALTICKS
  3274 98C0 85 F1			sta MIDFILES._TOTALTICKS+1
  3275 98C2 85 F2			sta MIDFILES._TOTALTICKS+2
  3276 98C4 85 F3			sta MIDFILES._TOTALTICKS+3
  3277 98C6 A9 01			lda #$01
  3278 98C8 85 F4			sta MIDFILES._SUBCNT
  3279
  3280 				; optimize OK (helpers.inc), line = 36
  3281
  3282 98CA 78				sei
  3283 98CB AD 30 04 8D 10 02		mva MIDFILES.OLDTIMERVEC VTIMR1
  3284 98D1 AD 31 04 8D 11 02		mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
  3285 98D7 A5 10			lda irqens
  3286 98D9 29 FE			and #$fe
  3287 98DB 85 10			sta irqens
  3288 98DD 8D 0E D2			sta irqen
  3289 98E0 58				cli
  3290
  3291 				; optimize FAIL ('RESET_MIDI', helpers.inc), line = 37
  3292
  3293 98E1 20 98 98			jsr RESET_MIDI
  3294 98E4			@exit
  3295 					.ifdef @new
  3296 					lda <@VarData
  3297 					sta :ztmp
  3298 					lda >@VarData
  3299 					ldy #@VarDataSize-1
  3300 					jmp @FreeMem
  3301 					els
  3302 98E4 60				rts						; ret
  3303 					eif
  3304 				.endl
  3305
  3306 98E5			.local	RESETMEMORYPTR					; PROCEDURE
  3307
  3308 				; optimize OK (helpers.inc), line = 42
  3309
  3310 98E5 A9 00			lda #$00
  3311 98E7 85 8C			sta :ecx
  3312 98E9 A9 40			lda #$40
  3313 98EB 85 8D			sta :ecx+1
  3314 98ED A5 4B			lda TOTALXMS
  3315 98EF 85 84			sta :eax
  3316 98F1 A9 00			lda #$00
  3317 98F3 85 85			sta :eax+1
  3318 					.ifdef fmulinit
  3319 					fmulu_16
  3320 					els
  3321 98F5 20 EA 82			imulCX
  3322 					eif
  3323 98F8 A5 84			lda :eax
  3324 98FA 8D 57 04			sta MEMAVAILABLE
  3325 98FD A5 85			lda :eax+1
  3326 98FF 18 69 8D			add #$8D
  3327 9902 8D 58 04			sta MEMAVAILABLE+1
  3328 9905 A5 86			lda :eax+2
  3329 9907 69 00			adc #$00
  3330 9909 8D 59 04			sta MEMAVAILABLE+2
  3331 990C A5 87			lda :eax+3
  3332 990E 69 00			adc #$00
  3333 9910 8D 5A 04			sta MEMAVAILABLE+3
  3334
  3335 				; optimize OK (helpers.inc), line = 43
  3336
  3337 9913 A5 4B			lda TOTALXMS
  3338 9915 8D 61 04			sta LAST_BANK
  3339
  3340 				; optimize OK (helpers.inc), line = 44
  3341
  3342 9918 A5 4B			lda TOTALXMS
  3343 991A F0 0D			jeq l_08D2
  3344
  3345 				; optimize OK (helpers.inc), line = 45
  3346
  3347 991C A9 00			lda #$00
  3348 991E 8D 62 04			sta LAST_ADR
  3349 9921 A9 40			lda #$40
  3350 9923 8D 63 04			sta LAST_ADR+1
  3351 9926 4C 33 99			jmp l_08E0
  3352 9929			l_08D2
  3353
  3354 				; optimize OK (helpers.inc), line = 47
  3355
  3356 9929 A9 00			lda #$00
  3357 992B 8D 62 04			sta LAST_ADR
  3358 992E A9 D8			lda #$D8
  3359 9930 8D 63 04			sta LAST_ADR+1
  3360 9933			l_08E0
  3361 9933			@exit
  3362 					.ifdef @new
  3363 					lda <@VarData
  3364 					sta :ztmp
  3365 					lda >@VarData
  3366 					ldy #@VarDataSize-1
  3367 					jmp @FreeMem
  3368 					els
  3369 9933 60				rts						; ret
  3370 					eif
  3371 				.endl
  3372
  3373 9934			.local	UPDATEMEM					; PROCEDURE
  3374
  3375 				; optimize FAIL ('divmulINT.DIV', helpers.inc), line = 56
  3376
  3377 9934 E8				inx
  3378 9935 AD 57 04 95 94		mva MEMAVAILABLE :STACKORIGIN,x
  3379 993A AD 58 04 95 A4		mva MEMAVAILABLE+1 :STACKORIGIN+STACKWIDTH,x
  3380 993F AD 59 04 95 B4		mva MEMAVAILABLE+2 :STACKORIGIN+STACKWIDTH*2,x
  3381 9944 AD 5A 04 95 C4		mva MEMAVAILABLE+3 :STACKORIGIN+STACKWIDTH*3,x
  3382 9949 E8				inx
  3383 994A A9 00 95 94			mva #$00 :STACKORIGIN,x
  3384 994E A9 04 95 A4			mva #$04 :STACKORIGIN+STACKWIDTH,x
  3385 9952 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  3386 9956 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  3387 995A 20 9D 82			jsr divmulINT.DIV
  3388 995D CA				dex
  3389 995E B5 94			lda :STACKORIGIN,x
  3390 9960 8D 7D 04			sta MEMAKB
  3391 9963 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  3392 9965 8D 7E 04			sta MEMAKB+1
  3393 9968 CA				dex
  3394
  3395 				; optimize OK (helpers.inc), line = 57
  3396
  3397 9969 A9 EC			lda #$EC
  3398 996B 85 D4			sta SCRADR
  3399 996D A9 3A			lda #$3A
  3400 996F 85 D5			sta SCRADR+1
  3401
  3402 				; optimize OK (helpers.inc), line = 58
  3403
  3404 9971 AD 7E 04			lda MEMAKB+1
  3405 9974 C9 27			cmp #$27
  3406 9976 D0 05			bne @+
  3407 9978 AD 7D 04			lda MEMAKB
  3408 997B C9 10			cmp #$10
  3409 				@
  3410 997D B0 08			jcs l_0907
  3411 997F A9 ED			lda #$ED
  3412 9981 85 D4			sta SCRADR
  3413 9983 A9 3A			lda #$3A
  3414 9985 85 D5			sta SCRADR+1
  3415 9987			l_0907
  3416
  3417 				; optimize OK (helpers.inc), line = 59
  3418
  3419 9987 AD 7E 04			lda MEMAKB+1
  3420 998A C9 03			cmp #$03
  3421 998C D0 05			bne @+
  3422 998E AD 7D 04			lda MEMAKB
  3423 9991 C9 E8			cmp #$E8
  3424 				@
  3425 9993 B0 08			jcs l_091F
  3426 9995 A9 EE			lda #$EE
  3427 9997 85 D4			sta SCRADR
  3428 9999 A9 3A			lda #$3A
  3429 999B 85 D5			sta SCRADR+1
  3430 999D			l_091F
  3431
  3432 				; optimize OK (helpers.inc), line = 60
  3433
  3434 999D AD 7E 04			lda MEMAKB+1
  3435 99A0 D0 0F			jne l_0937
  3436 99A2 AD 7D 04			lda MEMAKB
  3437 99A5 C9 64			cmp #$64
  3438 99A7 B0 08			jcs l_0937
  3439 99A9 A9 EF			lda #$EF
  3440 99AB 85 D4			sta SCRADR
  3441 99AD A9 3A			lda #$3A
  3442 99AF 85 D5			sta SCRADR+1
  3443 99B1			l_0937
  3444
  3445 				; optimize OK (helpers.inc), line = 61
  3446
  3447 99B1 AD 7E 04			lda MEMAKB+1
  3448 99B4 D0 0F			jne l_094F
  3449 99B6 AD 7D 04			lda MEMAKB
  3450 99B9 C9 0A			cmp #$0A
  3451 99BB B0 08			jcs l_094F
  3452 99BD A9 F0			lda #$F0
  3453 99BF 85 D4			sta SCRADR
  3454 99C1 A9 3A			lda #$3A
  3455 99C3 85 D5			sta SCRADR+1
  3456 99C5			l_094F
  3457
  3458 				; optimize OK (helpers.inc), line = 62
  3459
  3460 99C5 A5 D4			lda SCRADR
  3461 99C7 8D 7B 04			sta OSCRADR
  3462 99CA A5 D5			lda SCRADR+1
  3463 99CC 8D 7C 04			sta OSCRADR+1
  3464
  3465 				; optimize OK (helpers.inc), line = 63
  3466
  3467 99CF AD 7D 04			lda MEMAKB
  3468 99D2 8D 73 04			sta PUTINT.VALUE
  3469 99D5 AD 7E 04			lda MEMAKB+1
  3470 99D8 8D 74 04			sta PUTINT.VALUE+1
  3471 99DB 20 A8 95			jsr PUTINT
  3472 99DE A9 02			lda #$02
  3473 99E0 85 88			sta PUTINTTEXT.S
  3474 99E2 A9 80			lda #$80
  3475 99E4 85 89			sta PUTINTTEXT.S+1
  3476 99E6 20 DF 94			jsr PUTINTTEXT
  3477
  3478 				; optimize OK (helpers.inc), line = 64
  3479
  3480 99E9 AD 7B 04			lda OSCRADR
  3481 99EC 85 D4			sta SCRADR
  3482 99EE AD 7C 04			lda OSCRADR+1
  3483 99F1 85 D5			sta SCRADR+1
  3484
  3485 				; ------------------------------------------------------------
  3486
  3487 = 047B			OSCRADR	= DATAORIGIN+$007B
  3488 = 047D			MEMAKB	= DATAORIGIN+$007D
  3489
  3490 = 047B			@VarData	= OSCRADR
  3491 = 0004			@VarDataSize	= 4
  3492
  3493 99F3			@exit
  3494 					.ifdef @new
  3495 					lda <@VarData
  3496 					sta :ztmp
  3497 					lda >@VarData
  3498 					ldy #@VarDataSize-1
  3499 					jmp @FreeMem
  3500 					els
  3501 99F3 60				rts						; ret
  3502 					eif
  3503 				.endl
  3504
  3505 99F4			.local	CLEARSTATUS					; PROCEDURE
  3506
  3507 				; optimize OK (helpers.inc), line = 72
  3508
  3509 99F4 A9 00			lda #$00
  3510 99F6 A0 3B			ldy #$3B
  3511 99F8 99 B8 3A 88 10 FA		sta:rpl $3AB8,y-
  3512
  3513 				; optimize OK (helpers.inc), line = 73
  3514
  3515 99FE A9 B8			lda #$B8
  3516 9A00 85 D4			sta SCRADR
  3517 9A02 A9 3A			lda #$3A
  3518 9A04 85 D5			sta SCRADR+1
  3519 9A06 A9 06			lda #$06
  3520 9A08 85 88			sta PUTINTTEXT.S
  3521 9A0A A9 80			lda #$80
  3522 9A0C 85 89			sta PUTINTTEXT.S+1
  3523 9A0E 20 DF 94			jsr PUTINTTEXT
  3524
  3525 				; optimize FAIL ('STATUSLOOP', helpers.inc), line = 74
  3526
  3527 9A11 20 DB 9A			jsr STATUSLOOP
  3528
  3529 				; optimize OK (helpers.inc), line = 75
  3530
  3531 9A14 A9 CC			lda #$CC
  3532 9A16 85 D4			sta SCRADR
  3533 9A18 A9 3A			lda #$3A
  3534 9A1A 85 D5			sta SCRADR+1
  3535 9A1C 20 23 96			jsr HLINE
  3536
  3537 				; optimize FAIL ('UPDATEMEM', helpers.inc), line = 76
  3538
  3539 9A1F 20 34 99			jsr UPDATEMEM
  3540
  3541 				; optimize OK (helpers.inc), line = 77
  3542
  3543 9A22 AD 00 05			lda adr.FN
  3544 9A25 8D 7F 04			sta L
  3545
  3546 				; optimize OK (helpers.inc), line = 78
  3547
  3548 9A28 D0 03			jne l_098F
  3549 9A2A 4C 5B 9A			jmp @exit					; exit
  3550 9A2D			l_098F
  3551
  3552 				; optimize OK (helpers.inc), line = 79
  3553
  3554 9A2D AD 7F 04			lda L
  3555 9A30 C9 11			cmp #$11
  3556 9A32 90 05			jcc l_09A4
  3557 9A34 A9 10			lda #$10
  3558 9A36 8D 00 05			sta adr.FN+$00
  3559 9A39			l_09A4
  3560
  3561 				; optimize OK (helpers.inc), line = 80
  3562
  3563 9A39 A5 D4			lda SCRADR
  3564 9A3B A4 D5			ldy SCRADR+1
  3565 9A3D 38 ED 7F 04			sub L
  3566 9A41 B0 01			scs
  3567 9A43 88				dey
  3568 9A44 38 E9 01			sub #$01
  3569 9A47 85 D4			sta SCRADR
  3570 9A49 B0 01			scs
  3571 9A4B 88				dey
  3572 9A4C 84 D5			sty SCRADR+1
  3573 9A4E AD A1 A9			lda FN
  3574 9A51 85 88			sta PUTASCTEXT.S
  3575 9A53 AD A2 A9			lda FN+1
  3576 9A56 85 89			sta PUTASCTEXT.S+1
  3577 9A58 20 08 95			jsr PUTASCTEXT
  3578
  3579 				; ------------------------------------------------------------
  3580
  3581 = 047F			L	= DATAORIGIN+$007F
  3582
  3583 = 047F			@VarData	= L
  3584 = 0001			@VarDataSize	= 1
  3585
  3586 9A5B			@exit
  3587 					.ifdef @new
  3588 					lda <@VarData
  3589 					sta :ztmp
  3590 					lda >@VarData
  3591 					ldy #@VarDataSize-1
  3592 					jmp @FreeMem
  3593 					els
  3594 9A5B 60				rts						; ret
  3595 					eif
  3596 				.endl
  3597
  3598 9A5C			.local	CLEARUVMETERS					; PROCEDURE | ASSEMBLER
  3599
  3600 				; -------------------  ASM Block 00000110  -------------------
  3601
  3602 9A5C			  icl 'asms/uvmeters_clear.a65'
Source: uvmeters_clear.a65
     1 9A5C			clearUVMeter:
     2 9A5C 8A 48		  txa:pha
     3
     4 9A5E A9 12		  lda #<SCREEN_CHANNELS
     5 9A60 85 D4		  sta scradr
     6 9A62 A9 38		  lda #>SCREEN_CHANNELS
     7 9A64 85 D5		  sta scradr+1
     8
     9 9A66 A2 00		  ldx #0
    10 9A68			clearLoop:
    11 9A68 A0 03		  ldy #3
    12 9A6A A9 41		  lda #$41
    13 9A6C			VClr:
    14 9A6C 91 D4		  sta (scradr),y
    15 9A6E 88			  dey
    16 9A6F 91 D4		  sta (scradr),y
    17 9A71 88			  dey
    18 9A72 91 D4		  sta (scradr),y
    19 9A74 88			  dey
    20 9A75 91 D4		  sta (scradr),y
    21 9A77 88			  dey
    22
    23 9A78			dontClear:
    24 9A78 A5 D4		  lda scradr
    25 9A7A 18 69 28		  add #40
    26 9A7D 85 D4		  sta scradr
    27 9A7F 90 02 E6 D5		  scc:inc scradr+1
    28
    29 9A83 E8			  inx
    30 9A84 E0 10		  cpx #16
    31 9A86 D0 E0		  bne clearLoop
    32
    33 9A88 68 AA		  pla:tax
  3603
  3604 9A8A			@exit
  3605 					.ifdef @new
  3606 					lda <@VarData
  3607 					sta :ztmp
  3608 					lda >@VarData
  3609 					ldy #@VarDataSize-1
  3610 					jmp @FreeMem
  3611 					els
  3612 9A8A 60				rts						; ret
  3613 					eif
  3614 				.endl
  3615
  3616 9A8B			.local	TOGGLEHELPSCREEN				; PROCEDURE
  3617
  3618 				; optimize OK (helpers.inc), line = 91
  3619
  3620 9A8B A5 4A			lda PLAYERSTATUS
  3621 9A8D 49 20			eor #$20
  3622 9A8F 85 4A			sta PLAYERSTATUS
  3623
  3624 				; optimize OK (helpers.inc), line = 92
  3625
  3626 9A91 29 20			and #$20
  3627 9A93 D0 0D			jne l_09E3
  3628
  3629 				; optimize OK (helpers.inc), line = 93
  3630
  3631 9A95 A9 E8			lda #$E8
  3632 9A97 8D C5 3F			sta $3FC5
  3633 9A9A A9 37			lda #$37
  3634 9A9C 8D C6 3F			sta $3FC5+1
  3635 9A9F 4C AC 9A			jmp l_09F0
  3636 9AA2			l_09E3
  3637
  3638 				; optimize OK (helpers.inc), line = 95
  3639
  3640 9AA2 A9 A0			lda #$A0
  3641 9AA4 8D C5 3F			sta $3FC5
  3642 9AA7 A9 3B			lda #$3B
  3643 9AA9 8D C6 3F			sta $3FC5+1
  3644 9AAC			l_09F0
  3645
  3646 				; optimize OK (helpers.inc), line = 96
  3647
  3648 9AAC A9 FF			lda #$FF
  3649 9AAE 8D FC 02			sta KEYB
  3650 9AB1			@exit
  3651 					.ifdef @new
  3652 					lda <@VarData
  3653 					sta :ztmp
  3654 					lda >@VarData
  3655 					ldy #@VarDataSize-1
  3656 					jmp @FreeMem
  3657 					els
  3658 9AB1 60				rts						; ret
  3659 					eif
  3660 				.endl
  3661
  3662 9AB2			.local	EXIT2DOS					; PROCEDURE
  3663
  3664 				; optimize FAIL ('STOPMIDI', helpers.inc), line = 101
  3665
  3666 9AB2 20 B6 98			jsr STOPMIDI
  3667
  3668 				; optimize OK (helpers.inc), line = 102
  3669
  3670 9AB5 A9 00			lda #$00
  3671 9AB7 20 A1 89			jsr CIO.CLS
  3672 9ABA A9 00			lda #$00
  3673 9ABC 8D 0F 04			sta CIO.OPN.CHN
  3674 9ABF A9 0C			lda #$0C
  3675 9AC1 8D 10 04			sta CIO.OPN.AX1
  3676 9AC4 A9 00			lda #$00
  3677 9AC6 8D 11 04			sta CIO.OPN.AX2
  3678 9AC9 A9 0D			lda #$0D
  3679 9ACB 8D 12 04			sta CIO.OPN.DEVICE
  3680 9ACE A9 80			lda #$80
  3681 9AD0 8D 13 04			sta CIO.OPN.DEVICE+1
  3682 9AD3 20 63 89			jsr CIO.OPN
  3683 9AD6 A9 01			lda #$01
  3684 9AD8 85 41			sta SOUNDR
  3685 9ADA			@exit
  3686 					.ifdef @new
  3687 					lda <@VarData
  3688 					sta :ztmp
  3689 					lda >@VarData
  3690 					ldy #@VarDataSize-1
  3691 					jmp @FreeMem
  3692 					els
  3693 9ADA 60				rts						; ret
  3694 					eif
  3695 				.endl
  3696
  3697 9ADB			.local	STATUSLOOP					; PROCEDURE
  3698
  3699 				; optimize OK (status.inc), line = 11
  3700
  3701 9ADB A9 BE			lda #$BE
  3702 9ADD 85 D4			sta SCRADR
  3703 9ADF A9 3A			lda #$3A
  3704 9AE1 85 D5			sta SCRADR+1
  3705
  3706 				; optimize OK (status.inc), line = 12
  3707
  3708 9AE3 A5 4A			lda PLAYERSTATUS
  3709 9AE5 29 0C			and #$0C
  3710 9AE7 4A				lsr @
  3711 9AE8 4A				lsr @
  3712 9AE9 85 D7			sta V
  3713
  3714 				; optimize OK (status.inc), line = 13
  3715
  3716 9AEB 0A				asl @
  3717 9AEC A8				tay
  3718 9AED B9 1A 81			lda adr.SLOOP,y
  3719 9AF0 85 88			sta PUTINTTEXT.S
  3720 9AF2 B9 1B 81			lda adr.SLOOP+1,y
  3721 9AF5 85 89			sta PUTINTTEXT.S+1
  3722 9AF7 20 DF 94			jsr PUTINTTEXT
  3723
  3724 				; ------------------------------------------------------------
  3725
  3726 = 811A			adr.SLOOP	= CODEORIGIN+$011A
  3727 9AFA			.var SLOOP	= adr.SLOOP .word
  3728 9AFA			@exit
  3729 					.ifdef @new
  3730 					lda <@VarData
  3731 					sta :ztmp
  3732 					lda >@VarData
  3733 					ldy #@VarDataSize-1
  3734 					jmp @FreeMem
  3735 					els
  3736 9AFA 60				rts						; ret
  3737 					eif
  3738 = 9AFB 1A 81		SLOOP
  3738 				.endl
  3739
  3740 9AFD			.local	STATUSPLAYING					; PROCEDURE
  3741
  3742 				; optimize OK (status.inc), line = 18
  3743
  3744 9AFD A9 B8			lda #$B8
  3745 9AFF 85 D4			sta SCRADR
  3746 9B01 A9 3A			lda #$3A
  3747 9B03 85 D5			sta SCRADR+1
  3748
  3749 				; optimize OK (status.inc), line = 19
  3750
  3751 9B05 AD 19 04			lda MIDFILES.TOTALTRACKS
  3752 9B08 F0 39			jeq l_0A3D
  3753
  3754 				; optimize OK (status.inc), line = 21
  3755
  3756 9B0A A9 21			lda #$21
  3757 9B0C 85 88			sta PUTINTTEXT.S
  3758 9B0E A9 80			lda #$80
  3759 9B10 85 89			sta PUTINTTEXT.S+1
  3760 9B12 20 DF 94			jsr PUTINTTEXT
  3761
  3762 				; optimize OK (status.inc), line = 22
  3763
  3764 9B15 A9 CD			lda #$CD
  3765 9B17 85 D4			sta SCRADR
  3766 9B19 A9 3A			lda #$3A
  3767 9B1B 85 D5			sta SCRADR+1
  3768 9B1D A9 28			lda #$28
  3769 9B1F 85 88			sta PUTINTTEXT.S
  3770 9B21 A9 80			lda #$80
  3771 9B23 85 89			sta PUTINTTEXT.S+1
  3772 9B25 20 DF 94			jsr PUTINTTEXT
  3773
  3774 				; optimize OK (status.inc), line = 23
  3775
  3776 9B28 A5 4A			lda PLAYERSTATUS
  3777 9B2A 29 40			and #$40
  3778 9B2C F0 0C			jeq l_0A5C
  3779
  3780 				; optimize FAIL ('MIDFILES.INITTIMER', status.inc), line = 25
  3781
  3782 9B2E 20 FB 93			jsr MIDFILES.INITTIMER
  3783
  3784 				; optimize OK (status.inc), line = 26
  3785
  3786 9B31 A5 4A			lda PLAYERSTATUS
  3787 9B33 49 40			eor #$40
  3788 9B35 85 4A			sta PLAYERSTATUS
  3789 9B37 4C 40 9B			jmp l_0A71
  3790 9B3A			l_0A5C
  3791
  3792 				; optimize OK (status.inc), line = 29
  3793
  3794 9B3A A5 F5			lda MIDFILES._TIMERSTATUS
  3795 9B3C 29 7F			and #$7F
  3796 9B3E 85 F5			sta MIDFILES._TIMERSTATUS
  3797 9B40			l_0A71
  3798 9B40 4C 61 9B			jmp l_0A87
  3799 9B43			l_0A3D
  3800
  3801 				; optimize OK (status.inc), line = 33
  3802
  3803 9B43 A9 06			lda #$06
  3804 9B45 85 88			sta PUTINTTEXT.S
  3805 9B47 A9 80			lda #$80
  3806 9B49 85 89			sta PUTINTTEXT.S+1
  3807 9B4B 20 DF 94			jsr PUTINTTEXT
  3808
  3809 				; optimize OK (status.inc), line = 34
  3810
  3811 9B4E A9 CD			lda #$CD
  3812 9B50 85 D4			sta SCRADR
  3813 9B52 A9 3A			lda #$3A
  3814 9B54 85 D5			sta SCRADR+1
  3815 9B56 A9 33			lda #$33
  3816 9B58 85 88			sta PUTINTTEXT.S
  3817 9B5A A9 80			lda #$80
  3818 9B5C 85 89			sta PUTINTTEXT.S+1
  3819 9B5E 20 DF 94			jsr PUTINTTEXT
  3820 9B61			l_0A87
  3821 9B61			@exit
  3822 					.ifdef @new
  3823 					lda <@VarData
  3824 					sta :ztmp
  3825 					lda >@VarData
  3826 					ldy #@VarDataSize-1
  3827 					jmp @FreeMem
  3828 					els
  3829 9B61 60				rts						; ret
  3830 					eif
  3831 				.endl
  3832
  3833 9B62			.local	STATUSPAUSE					; PROCEDURE
  3834
  3835 				; optimize OK (status.inc), line = 40
  3836
  3837 9B62 A5 4A			lda PLAYERSTATUS
  3838 9B64 29 40			and #$40
  3839 9B66 F0 03			jeq l_0AA9
  3840 9B68 4C 97 9B			jmp @exit					; exit
  3841 9B6B			l_0AA9
  3842
  3843 				; optimize OK (status.inc), line = 41
  3844
  3845 9B6B A9 B8			lda #$B8
  3846 9B6D 85 D4			sta SCRADR
  3847 9B6F A9 3A			lda #$3A
  3848 9B71 85 D5			sta SCRADR+1
  3849 9B73 A9 3E			lda #$3E
  3850 9B75 85 88			sta PUTINTTEXT.S
  3851 9B77 A9 80			lda #$80
  3852 9B79 85 89			sta PUTINTTEXT.S+1
  3853 9B7B 20 DF 94			jsr PUTINTTEXT
  3854
  3855 				; optimize OK (status.inc), line = 42
  3856
  3857 9B7E A9 CD			lda #$CD
  3858 9B80 85 D4			sta SCRADR
  3859 9B82 A9 3A			lda #$3A
  3860 9B84 85 D5			sta SCRADR+1
  3861 9B86 A9 45			lda #$45
  3862 9B88 85 88			sta PUTINTTEXT.S
  3863 9B8A A9 80			lda #$80
  3864 9B8C 85 89			sta PUTINTTEXT.S+1
  3865 9B8E 20 DF 94			jsr PUTINTTEXT
  3866
  3867 				; optimize OK (status.inc), line = 43
  3868
  3869 9B91 A5 F5			lda MIDFILES._TIMERSTATUS
  3870 9B93 09 80			ora #$80
  3871 9B95 85 F5			sta MIDFILES._TIMERSTATUS
  3872 9B97			@exit
  3873 					.ifdef @new
  3874 					lda <@VarData
  3875 					sta :ztmp
  3876 					lda >@VarData
  3877 					ldy #@VarDataSize-1
  3878 					jmp @FreeMem
  3879 					els
  3880 9B97 60				rts						; ret
  3881 					eif
  3882 				.endl
  3883
  3884 9B98			.local	STATUSSTOPPED					; PROCEDURE
  3885
  3886 				; optimize OK (status.inc), line = 48
  3887
  3888 9B98 A9 00			lda #$00
  3889 9B9A A0 27			ldy #$27
  3890 9B9C 99 F4 3A 88 10 FA		sta:rpl $3AF4,y-
  3891
  3892 				; optimize OK (status.inc), line = 49
  3893
  3894 9BA2 AD 19 04			lda MIDFILES.TOTALTRACKS
  3895 9BA5 D0 03			jne l_0ADC
  3896 9BA7 4C 04 9C			jmp @exit					; exit
  3897 9BAA			l_0ADC
  3898
  3899 				; optimize OK (status.inc), line = 50
  3900
  3901 9BAA A5 4A			lda PLAYERSTATUS
  3902 9BAC 29 40			and #$40
  3903 9BAE F0 03			jeq l_0AF5
  3904 9BB0 4C 04 9C			jmp @exit					; exit
  3905 9BB3			l_0AF5
  3906
  3907 				; optimize OK (status.inc), line = 51
  3908
  3909 9BB3 A5 4A			lda PLAYERSTATUS
  3910 9BB5 09 40			ora #$40
  3911 9BB7 85 4A			sta PLAYERSTATUS
  3912
  3913 				; optimize OK (status.inc), line = 52
  3914
  3915 9BB9 A9 B8			lda #$B8
  3916 9BBB 85 D4			sta SCRADR
  3917 9BBD A9 3A			lda #$3A
  3918 9BBF 85 D5			sta SCRADR+1
  3919 9BC1 A9 50			lda #$50
  3920 9BC3 85 88			sta PUTINTTEXT.S
  3921 9BC5 A9 80			lda #$80
  3922 9BC7 85 89			sta PUTINTTEXT.S+1
  3923 9BC9 20 DF 94			jsr PUTINTTEXT
  3924
  3925 				; optimize OK (status.inc), line = 53
  3926
  3927 9BCC A9 CD			lda #$CD
  3928 9BCE 85 D4			sta SCRADR
  3929 9BD0 A9 3A			lda #$3A
  3930 9BD2 85 D5			sta SCRADR+1
  3931 9BD4 A9 57			lda #$57
  3932 9BD6 85 88			sta PUTINTTEXT.S
  3933 9BD8 A9 80			lda #$80
  3934 9BDA 85 89			sta PUTINTTEXT.S+1
  3935 9BDC 20 DF 94			jsr PUTINTTEXT
  3936
  3937 				; optimize FAIL ('STOPMIDI', status.inc), line = 54
  3938
  3939 9BDF 20 B6 98			jsr STOPMIDI
  3940
  3941 				; optimize OK (status.inc), line = 55
  3942
  3943 9BE2 A9 00			lda #$00
  3944 9BE4 85 88			sta SYSTEM.MOVE_0163.SOURCE
  3945 9BE6 A9 2C			lda #$2C
  3946 9BE8 85 89			sta SYSTEM.MOVE_0163.SOURCE+1
  3947 9BEA A9 00			lda #$00
  3948 9BEC 85 8C			sta SYSTEM.MOVE_0163.DEST
  3949 9BEE A9 2E			lda #$2E
  3950 9BF0 85 8D			sta SYSTEM.MOVE_0163.DEST+1
  3951 9BF2 A9 00			lda #$00
  3952 9BF4 85 84			sta SYSTEM.MOVE_0163.COUNT
  3953 9BF6 A9 02			lda #$02
  3954 9BF8 85 85			sta SYSTEM.MOVE_0163.COUNT+1
  3955 9BFA				.local +MAIN.SYSTEM.MOVE_0163
  3956 9BFA				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0163.M@INLINE [Source: MIDICar Player.a65]
     4 9BFA 20 DE 81			jsr @move
Source: MIDICar Player.a65
  3957 					.endl
  3958
  3959 				; optimize OK (status.inc), line = 56
  3960
  3961 9BFD A9 00			lda #$00
  3962 9BFF 85 D6			sta CHN
  3963
  3964 				; optimize FAIL ('CLEARUVMETERS', status.inc), line = 57
  3965
  3966 9C01 20 5C 9A			jsr CLEARUVMETERS
  3967 9C04			@exit
  3968 					.ifdef @new
  3969 					lda <@VarData
  3970 					sta :ztmp
  3971 					lda >@VarData
  3972 					ldy #@VarDataSize-1
  3973 					jmp @FreeMem
  3974 					els
  3975 9C04 60				rts						; ret
  3976 					eif
  3977 				.endl
  3978
  3979 9C05			.local	STATUSLOADING					; PROCEDURE
  3980
  3981 				; optimize OK (status.inc), line = 62
  3982
  3983 9C05 A9 CD			lda #$CD
  3984 9C07 85 D4			sta SCRADR
  3985 9C09 A9 3A			lda #$3A
  3986 9C0B 85 D5			sta SCRADR+1
  3987 9C0D A9 62			lda #$62
  3988 9C0F 85 88			sta PUTINTTEXT.S
  3989 9C11 A9 80			lda #$80
  3990 9C13 85 89			sta PUTINTTEXT.S+1
  3991 9C15 20 DF 94			jsr PUTINTTEXT
  3992 9C18			@exit
  3993 					.ifdef @new
  3994 					lda <@VarData
  3995 					sta :ztmp
  3996 					lda >@VarData
  3997 					ldy #@VarDataSize-1
  3998 					jmp @FreeMem
  3999 					els
  4000 9C18 60				rts						; ret
  4001 					eif
  4002 				.endl
  4003
  4004 9C19			.local	STATUSCALCLENGTH				; PROCEDURE
  4005
  4006 				; optimize OK (status.inc), line = 67
  4007
  4008 9C19 A9 CD			lda #$CD
  4009 9C1B 85 D4			sta SCRADR
  4010 9C1D A9 3A			lda #$3A
  4011 9C1F 85 D5			sta SCRADR+1
  4012 9C21 A9 6D			lda #$6D
  4013 9C23 85 88			sta PUTINTTEXT.S
  4014 9C25 A9 80			lda #$80
  4015 9C27 85 89			sta PUTINTTEXT.S+1
  4016 9C29 20 DF 94			jsr PUTINTTEXT
  4017 9C2C			@exit
  4018 					.ifdef @new
  4019 					lda <@VarData
  4020 					sta :ztmp
  4021 					lda >@VarData
  4022 					ldy #@VarDataSize-1
  4023 					jmp @FreeMem
  4024 					els
  4025 9C2C 60				rts						; ret
  4026 					eif
  4027 				.endl
  4028
  4029 9C2D			.local	STATUSREADDIRECTORY				; PROCEDURE
  4030
  4031 				; optimize OK (status.inc), line = 72
  4032
  4033 9C2D A9 CD			lda #$CD
  4034 9C2F 85 D4			sta SCRADR
  4035 9C31 A9 3A			lda #$3A
  4036 9C33 85 D5			sta SCRADR+1
  4037 9C35 A9 83			lda #$83
  4038 9C37 85 88			sta PUTINTTEXT.S
  4039 9C39 A9 80			lda #$80
  4040 9C3B 85 89			sta PUTINTTEXT.S+1
  4041 9C3D 20 DF 94			jsr PUTINTTEXT
  4042 9C40			@exit
  4043 					.ifdef @new
  4044 					lda <@VarData
  4045 					sta :ztmp
  4046 					lda >@VarData
  4047 					ldy #@VarDataSize-1
  4048 					jmp @FreeMem
  4049 					els
  4050 9C40 60				rts						; ret
  4051 					eif
  4052 				.endl
  4053
  4054 9C41			.local	STATUSERROR					; PROCEDURE
  4055 9C41 8D 80 04			sta ERR
  4056
  4057 				; optimize OK (status.inc), line = 82
  4058
  4059 9C44 A9 FF			lda #$FF
  4060 9C46 8D FC 02			sta KEYB
  4061
  4062 				; optimize OK (status.inc), line = 83
  4063
  4064 9C49 A9 CD			lda #$CD
  4065 9C4B 85 D4			sta SCRADR
  4066 9C4D A9 3A			lda #$3A
  4067 9C4F 85 D5			sta SCRADR+1
  4068
  4069 				; optimize OK (status.inc), line = 84
  4070
  4071 9C51 AD 80 04			lda ERR
  4072 9C54 8D 81 04			sta @CASETMP_0003
  4073 9C57 C9 64			cmp #$64
  4074 9C59 D0 0E			jne l_0B4D
  4075 				@
  4076
  4077 				; optimize OK (status.inc), line = 85
  4078
  4079 9C5B A9 98			lda #$98
  4080 9C5D 85 88			sta PUTINTTEXT.S
  4081 9C5F A9 80			lda #$80
  4082 9C61 85 89			sta PUTINTTEXT.S+1
  4083 9C63 20 DF 94			jsr PUTINTTEXT
  4084
  4085 9C66 4C BA 9C			jmp a_0003
  4086 9C69			l_0B4D
  4087 9C69 C9 65			cmp #$65
  4088 9C6B D0 0E			jne l_0B58
  4089 				@
  4090
  4091 				; optimize OK (status.inc), line = 86
  4092
  4093 9C6D A9 AE			lda #$AE
  4094 9C6F 85 88			sta PUTINTTEXT.S
  4095 9C71 A9 80			lda #$80
  4096 9C73 85 89			sta PUTINTTEXT.S+1
  4097 9C75 20 DF 94			jsr PUTINTTEXT
  4098
  4099 9C78 4C BA 9C			jmp a_0003
  4100 9C7B			l_0B58
  4101 9C7B C9 66			cmp #$66
  4102 9C7D D0 0E			jne l_0B63
  4103 				@
  4104
  4105 				; optimize OK (status.inc), line = 87
  4106
  4107 9C7F A9 C4			lda #$C4
  4108 9C81 85 88			sta PUTINTTEXT.S
  4109 9C83 A9 80			lda #$80
  4110 9C85 85 89			sta PUTINTTEXT.S+1
  4111 9C87 20 DF 94			jsr PUTINTTEXT
  4112
  4113 9C8A 4C BA 9C			jmp a_0003
  4114 9C8D			l_0B63
  4115
  4116 				; optimize OK (status.inc), line = 89
  4117
  4118 9C8D A9 80			lda #$80
  4119 9C8F 8D 6E 04			sta PUTTEXTINVERT
  4120
  4121 				; optimize OK (status.inc), line = 90
  4122
  4123 9C92 A9 D7			lda #$D7
  4124 9C94 85 88			sta PUTINTTEXT.S
  4125 9C96 A9 80			lda #$80
  4126 9C98 85 89			sta PUTINTTEXT.S+1
  4127 9C9A 20 DF 94			jsr PUTINTTEXT
  4128 9C9D AD 80 04			lda ERR
  4129 9CA0 8D 73 04			sta PUTINT.VALUE
  4130 9CA3 A9 00			lda #$00
  4131 9CA5 8D 74 04			sta PUTINT.VALUE+1
  4132 9CA8 20 A8 95			jsr PUTINT
  4133 9CAB A4 D5			ldy SCRADR+1
  4134 9CAD 84 81			sty :bp+1
  4135 9CAF A4 D4			ldy SCRADR
  4136 9CB1 A9 CE			lda #$CE
  4137 9CB3 91 80			sta (:bp),y
  4138
  4139 				; optimize OK (status.inc), line = 91
  4140
  4141 9CB5 A9 00			lda #$00
  4142 9CB7 8D 6E 04			sta PUTTEXTINVERT
  4143 9CBA			a_0003
  4144
  4145 				; --- WhileProlog
  4146 9CBA			l_0B81
  4147
  4148 				; optimize OK (status.inc), line = 93
  4149
  4150 9CBA AD FC 02			lda KEYB
  4151 9CBD C9 FF			cmp #$FF
  4152 9CBF F0 F9			jeq l_0B81
  4153
  4154 				; optimize FAIL ('CLEARSTATUS', status.inc), line = 94
  4155
  4156 9CC1 20 F4 99			jsr CLEARSTATUS
  4157
  4158 				; ------------------------------------------------------------
  4159
  4160 = 0480			ERR	= DATAORIGIN+$0080
  4161 = 0481			@CASETMP_0003	= DATAORIGIN+$0081
  4162
  4163 = 0480			@VarData	= ERR
  4164 = 0002			@VarDataSize	= 2
  4165
  4166 9CC4			@exit
  4167 					.ifdef @new
  4168 					lda <@VarData
  4169 					sta :ztmp
  4170 					lda >@VarData
  4171 					ldy #@VarDataSize-1
  4172 					jmp @FreeMem
  4173 					els
  4174 9CC4 60				rts						; ret
  4175 					eif
  4176 				.endl
  4177
  4178 9CC5			.local	LOADSONG					; FUNCTION
  4179
  4180 9CC5 4C 3F 9D			jmp l_0B92
  4181
  4182 9CC8			.local	LOADPRC						; PROCEDURE
  4183 9CC8 8D 85 04			sta V
  4184
  4185 				; optimize OK (load.inc), line = 7
  4186
  4187 9CCB F0 71			jeq l_0BA7
  4188
  4189 				; optimize OK (load.inc), line = 9
  4190
  4191 9CCD A9 80			lda #$80
  4192 9CCF 8D 6E 04			sta PUTTEXTINVERT
  4193
  4194 				; optimize OK (load.inc), line = 10
  4195
  4196 9CD2 A9 D6			lda #$D6
  4197 9CD4 85 D4			sta SCRADR
  4198 9CD6 A9 3A			lda #$3A
  4199 9CD8 85 D5			sta SCRADR+1
  4200
  4201 				; optimize OK (load.inc), line = 11
  4202
  4203 9CDA AD 85 04			lda V
  4204 9CDD 38 E9 01			sub #$01
  4205 9CE0 8D 73 04			sta PUTINT.VALUE
  4206 9CE3 A9 00			lda #$00
  4207 9CE5 E9 00			sbc #$00
  4208 9CE7 8D 74 04			sta PUTINT.VALUE+1
  4209 9CEA 20 A8 95			jsr PUTINT
  4210 9CED A4 D5			ldy SCRADR+1
  4211 9CEF 84 81			sty :bp+1
  4212 9CF1 A4 D4			ldy SCRADR
  4213 9CF3 A9 8F			lda #$8F
  4214 9CF5 91 80			sta (:bp),y
  4215 9CF7 E6 D4			inc SCRADR
  4216 9CF9 D0 02			sne
  4217 9CFB E6 D5			inc SCRADR+1
  4218
  4219 				; optimize OK (load.inc), line = 12
  4220
  4221 9CFD AD 19 04			lda MIDFILES.TOTALTRACKS
  4222 9D00 8D 73 04			sta PUTINT.VALUE
  4223 9D03 A9 00			lda #$00
  4224 9D05 8D 74 04			sta PUTINT.VALUE+1
  4225 9D08 20 A8 95			jsr PUTINT
  4226
  4227 				; optimize OK (load.inc), line = 13
  4228
  4229 9D0B A4 D5			ldy SCRADR+1
  4230 9D0D 84 81			sty :bp+1
  4231 9D0F A4 D4			ldy SCRADR
  4232 9D11 A9 CE			lda #$CE
  4233 9D13 91 80			sta (:bp),y
  4234
  4235 				; optimize OK (load.inc), line = 14
  4236
  4237 9D15 A9 00			lda #$00
  4238 9D17 8D 6E 04			sta PUTTEXTINVERT
  4239
  4240 				; optimize OK (load.inc), line = 15
  4241
  4242 9D1A AD 57 04			lda MEMAVAILABLE
  4243 9D1D 38 E5 D6			sub CURLOAD
  4244 9D20 8D 57 04			sta MEMAVAILABLE
  4245 9D23 AD 58 04			lda MEMAVAILABLE+1
  4246 9D26 E5 D7			sbc CURLOAD+1
  4247 9D28 8D 58 04			sta MEMAVAILABLE+1
  4248 9D2B AD 59 04			lda MEMAVAILABLE+2
  4249 9D2E E9 00			sbc #$00
  4250 9D30 8D 59 04			sta MEMAVAILABLE+2
  4251 9D33 AD 5A 04			lda MEMAVAILABLE+3
  4252 9D36 E9 00			sbc #$00
  4253 9D38 8D 5A 04			sta MEMAVAILABLE+3
  4254
  4255 				; optimize FAIL ('UPDATEMEM', load.inc), line = 16
  4256
  4257 9D3B 20 34 99			jsr UPDATEMEM
  4258 9D3E			l_0BA7
  4259
  4260 				; ------------------------------------------------------------
  4261
  4262 = 0485			V	= DATAORIGIN+$0085
  4263
  4264 = 0485			@VarData	= V
  4265 = 0001			@VarDataSize	= 1
  4266
  4267 9D3E			@exit
  4268 					.ifdef @new
  4269 					lda <@VarData
  4270 					sta :ztmp
  4271 					lda >@VarData
  4272 					ldy #@VarDataSize-1
  4273 					jmp @FreeMem
  4274 					els
  4275 9D3E 60				rts						; ret
  4276 					eif
  4277 				.endl
  4278 9D3F			l_0B92
  4279
  4280 				; optimize FAIL ('RESETMEMORYPTR', load.inc), line = 21
  4281
  4282 9D3F 20 E5 98			jsr RESETMEMORYPTR
  4283
  4284 				; optimize OK (load.inc), line = 22
  4285
  4286 9D42 AD 61 04			lda LAST_BANK
  4287 9D45 85 E1			sta MIDFILES._BANK
  4288 9D47 AD 62 04			lda LAST_ADR
  4289 9D4A 85 E2			sta MIDFILES._ADR
  4290 9D4C AD 63 04			lda LAST_ADR+1
  4291 9D4F 85 E3			sta MIDFILES._ADR+1
  4292
  4293 				; optimize FAIL ('CLEARSTATUS', load.inc), line = 23
  4294
  4295 9D51 20 F4 99			jsr CLEARSTATUS
  4296
  4297 				; optimize FAIL ('STATUSLOADING', load.inc), line = 24
  4298
  4299 9D54 20 05 9C			jsr STATUSLOADING
  4300
  4301 				; optimize OK (load.inc), line = 25
  4302
  4303 9D57 A9 C8			lda <LOADPRC
  4304 9D59 8D 32 04			sta MIDFILES.LOADPROCESS
  4305 9D5C A9 9C			lda >LOADPRC
  4306 9D5E 8D 33 04			sta MIDFILES.LOADPROCESS+1
  4307 9D61 A9 00			lda #$00
  4308 9D63 85 1F			sta THI
  4309
  4310 				; optimize OK (load.inc), line = 26
  4311
  4312 9D65 AD 82 04			lda FILENAME
  4313 9D68 8D 38 04			sta MIDFILES.LOADMID.FN
  4314 9D6B AD 83 04			lda FILENAME+1
  4315 9D6E 8D 39 04			sta MIDFILES.LOADMID.FN+1
  4316 9D71 20 60 8A			jsr MIDFILES.LOADMID
  4317 9D74 AD 3A 04			lda MIDFILES.LOADMID.RESULT
  4318 9D77 8D 84 04			sta RESULT
  4319
  4320 				; optimize OK (load.inc), line = 27
  4321
  4322 9D7A A9 FF			lda #$FF
  4323 9D7C 85 1F			sta THI
  4324
  4325 				; optimize FAIL ('CLEARSTATUS', load.inc), line = 28
  4326
  4327 9D7E 20 F4 99			jsr CLEARSTATUS
  4328
  4329 				; optimize OK (load.inc), line = 29
  4330
  4331 9D81 AD 84 04			lda RESULT
  4332 9D84 29 FC			and #$FC
  4333 9D86 F0 08			jeq l_0C08
  4334
  4335 				; optimize OK (load.inc), line = 30
  4336
  4337 9D88 A9 00			lda #$00
  4338 9D8A 8D 19 04			sta MIDFILES.TOTALTRACKS
  4339 9D8D 4C BA 9D			jmp l_0C16
  4340 9D90			l_0C08
  4341
  4342 				; optimize OK (load.inc), line = 33
  4343
  4344 9D90 AD 5D 04			lda CURFILE
  4345 9D93 8D 5F 04			sta CURPLAY
  4346
  4347 				; optimize OK (load.inc), line = 34
  4348
  4349 9D96 A9 00			lda #$00
  4350 9D98 85 88			sta SYSTEM.MOVE_0163.SOURCE
  4351 9D9A A9 2E			lda #$2E
  4352 9D9C 85 89			sta SYSTEM.MOVE_0163.SOURCE+1
  4353 9D9E A9 00			lda #$00
  4354 9DA0 85 8C			sta SYSTEM.MOVE_0163.DEST
  4355 9DA2 A9 2C			lda #$2C
  4356 9DA4 85 8D			sta SYSTEM.MOVE_0163.DEST+1
  4357 9DA6 A9 00			lda #$00
  4358 9DA8 85 84			sta SYSTEM.MOVE_0163.COUNT
  4359 9DAA A9 02			lda #$02
  4360 9DAC 85 85			sta SYSTEM.MOVE_0163.COUNT+1
  4361 9DAE				.local +MAIN.SYSTEM.MOVE_0163
  4362 9DAE				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0163.M@INLINE [Source: MIDICar Player.a65]
     4 9DAE 20 DE 81			jsr @move
Source: MIDICar Player.a65
  4363 					.endl
  4364
  4365 				; optimize FAIL ('STATUSCALCLENGTH', load.inc), line = 35
  4366
  4367 9DB1 20 19 9C			jsr STATUSCALCLENGTH
  4368
  4369 				; optimize FAIL ('MIDFILES.DETERMINESONGLENGTH', load.inc), line = 36
  4370
  4371 9DB4 20 36 92			jsr MIDFILES.DETERMINESONGLENGTH
  4372
  4373 				; optimize FAIL ('CLEARSTATUS', load.inc), line = 37
  4374
  4375 9DB7 20 F4 99			jsr CLEARSTATUS
  4376 9DBA			l_0C16
  4377 9DBA			@exit
  4378
  4379 				; ------------------------------------------------------------
  4380
  4381 = 0482			FILENAME	= DATAORIGIN+$0082
  4382 = 0484			RESULT	= DATAORIGIN+$0084
  4383 = 00D6			CURLOAD	= $D6
  4384
  4385 = 0482			@VarData	= FILENAME
  4386 = 0002			@VarDataSize	= 2
  4387
  4388 9DBA 60				rts						; ret
  4389 				.endl
  4390
  4391 9DBB			.local	GETENTRY					; FUNCTION | ASSEMBLER | REGISTER
  4392
  4393 				; -------------------  ASM Block 00000111  -------------------
  4394
  4395 9DBB			  icl 'asms/list_getEntry.a65'
Source: list_getEntry.a65
     1 = 0088			hlpptr = $88;
     2
     3 9DBB			getEntry:
     4 9DBB 8A 48		  txa:pha
     5
     6 9DBD A5 DA		  lda fileList
     7 9DBF 8D D0 9D		  sta entryptr
     8 9DC2 A5 DB		  lda fileList+1
     9 9DC4 8D D1 9D		  sta entryptr+1
    10
    11 9DC7 A9 00		  lda #0
    12 9DC9 85 90		  sta result
    13
    14 9DCB A2 03		  ldx #3
    15 9DCD A0 01		  ldy #1
    16 9DCF			loop:
    17 9DCF BD D0 07		  lda entryptr:2000,x
    18 9DD2 C9 9B		  cmp #$9B
    19 9DD4 F0 06		  beq endEntry
    20 9DD6 91 88		  sta (hlpptr),y
    21 9DD8 E8			  inx
    22 9DD9 C8			  iny
    23 9DDA D0 F3		  bne loop
    24
    25 9DDC			endEntry:
    26 9DDC A9 9B		  lda #$9B
    27 9DDE 91 88		  sta (hlpptr),y
    28
    29 9DE0 C0 01		  cpy #1
    30 9DE2 D0 03		  bne store
    31 9DE4 68 AA		  pla:tax
    32 9DE6 60			  rts
    33
    34 9DE7			store:
    35 9DE7 8A 48		  txa:pha
    36
    37 9DE9 A9 01		  lda #1
    38 9DEB 85 90		  sta result
    39
    40 9DED 68 AA		  pla:tax
    41 9DEF 38			  sec
    42 9DF0 E9 03		  sbc #3            // decease position by 3
    43 9DF2 A0 00		  ldy #0
    44 9DF4 91 88		  sta (hlpptr),y    // store as string length
    45
    46 9DF6 68 AA		  pla:tax
  4396
  4397 9DF8			@exit
  4398
  4399 				; ------------------------------------------------------------
  4400
  4401 = 0088			FN	= :EDX
  4402 = 0090			RESULT	= :STACKORIGIN-4
  4403 9DF8 60				rts						; ret
  4404 				.endl
  4405
  4406 9DF9			.local	GETENTRYSETS					; PROCEDURE | ASSEMBLER | REGISTER
  4407
  4408 				; -------------------  ASM Block 00000112  -------------------
  4409
  4410 9DF9			  icl 'asms/list_getEntrySets.a65'
Source: list_getEntrySets.a65
     1 9DF9			getEntrySets:
     2 = 0088			PTRREG = $88
     3
     4 9DF9 A0 02		    ldy #2
     5 9DFB			loop:
     6 9DFB B1 DA		    lda (fileList),y
     7 9DFD 91 88		    sta (PTRREG),y
     8 9DFF 88			    dey
     9 9E00 10 F9		    bpl loop
  4411
  4412 				; ------------------------------------------------------------
  4413
  4414 = 0088			PTR	= :EDX
  4415 9E02			@exit
  4416 					.ifdef @new
  4417 					lda <@VarData
  4418 					sta :ztmp
  4419 					lda >@VarData
  4420 					ldy #@VarDataSize-1
  4421 					jmp @FreeMem
  4422 					els
  4423 9E02 60				rts						; ret
  4424 					eif
  4425 				.endl
  4426
  4427 9E03			.local	SETENTRYSETS					; PROCEDURE | ASSEMBLER | REGISTER
  4428
  4429 				; -------------------  ASM Block 00000113  -------------------
  4430
  4431 9E03			  icl 'asms/list_setEntrySets.a65'
Source: list_setEntrySets.a65
     1 9E03			setEntrySets:
     2 = 0088			PTRREG = $88
     3
     4 9E03 A0 02		    ldy #2
     5 9E05			loop:
     6 9E05 B1 88		    lda (PTRREG),y
     7 9E07 91 DA		    sta (fileList),y
     8 9E09 88			    dey
     9 9E0A 10 F9		    bpl loop
  4432
  4433 				; ------------------------------------------------------------
  4434
  4435 = 0088			PTR	= :EDX
  4436 9E0C			@exit
  4437 					.ifdef @new
  4438 					lda <@VarData
  4439 					sta :ztmp
  4440 					lda >@VarData
  4441 					ldy #@VarDataSize-1
  4442 					jmp @FreeMem
  4443 					els
  4444 9E0C 60				rts						; ret
  4445 					eif
  4446 				.endl
  4447
  4448 9E0D			.local	NEXTENTRY					; FUNCTION | ASSEMBLER
  4449
  4450 				; -------------------  ASM Block 00000114  -------------------
  4451
  4452 9E0D			  icl 'asms/list_nextEntry.a65'
Source: list_nextEntry.a65
     1 9E0D			nextEntry:
     2 9E0D A0 03		  ldy #3
     3 9E0F			loop:
     4 9E0F B1 DA		  lda (fileList),y
     5 9E11 C9 9B		  cmp #$9B
     6 9E13 F0 03		  beq endEntry
     7 9E15 C8			  iny
     8 9E16 D0 F7		  bne loop
     9
    10 9E18			endEntry:
    11 9E18 C0 03		  cpy #3
    12 9E1A D0 06		  bne moveEntryPtr
    13
    14 9E1C A9 00		  lda #0
    15 9E1E 8D 86 04		  sta result
    16 9E21 60			  rts
    17
    18 9E22			moveEntryPtr:
    19 9E22 C8			  iny
    20 9E23 98			  tya
    21 9E24 18 65 DA		  add fileList
    22 9E27 85 DA		  sta fileList
    23 9E29 90 02 E6 DB		  scc:inc fileList+1
    24
    25 9E2D A9 01		  lda #1
    26 9E2F 8D 86 04		  sta result
  4453
  4454 9E32			@exit
  4455
  4456 				; ------------------------------------------------------------
  4457
  4458 = 0486			RESULT	= DATAORIGIN+$0086
  4459 9E32 60				rts						; ret
  4460 				.endl
  4461
  4462 9E33			.local	GOTONENTRY					; PROCEDURE | ASSEMBLER
  4463 9E33 8D 87 04			sta NENTRY
  4464
  4465 				; -------------------  ASM Block 00000115  -------------------
  4466
  4467 9E36			  icl 'asms/list_gotoNEntry.a65'
Source: list_gotoNEntry.a65
     1 9E36			gotoNEntry:
     2 9E36 8A 48		    txa:pha
     3
     4 9E38 A9 00		    lda #<PLAYLIST_ADDR
     5 9E3A 85 DA		    sta fileList
     6 9E3C A9 20		    lda #>PLAYLIST_ADDR
     7 9E3E 85 DB		    sta fileList+1
     8
     9 9E40 AE 87 04		    ldx nEntry
    10 9E43 F0 08		    beq exitGotoNEntry
    11
    12 9E45			loop:
    13 9E45 20 0D 9E		    jsr nextEntry
    14 9E48 F0 03		    beq exitGotoNEntry
    15 9E4A CA			    dex
    16 9E4B D0 F8		    bne loop
    17
    18 9E4D			exitGotoNEntry:
    19
    20 9E4D 68 AA		    pla:tax
  4468
  4469 				; ------------------------------------------------------------
  4470
  4471 = 0487			NENTRY	= DATAORIGIN+$0087
  4472
  4473 = 0487			@VarData	= NENTRY
  4474 = 0001			@VarDataSize	= 1
  4475
  4476 9E4F			@exit
  4477 					.ifdef @new
  4478 					lda <@VarData
  4479 					sta :ztmp
  4480 					lda >@VarData
  4481 					ldy #@VarDataSize-1
  4482 					jmp @FreeMem
  4483 					els
  4484 9E4F 60				rts						; ret
  4485 					eif
  4486 				.endl
  4487
  4488 9E50			.local	ADDTOLIST					; PROCEDURE | ASSEMBLER | REGISTER
  4489
  4490 				; -------------------  ASM Block 00000116  -------------------
  4491
  4492 9E50			  icl 'asms/list_addToList.a65'
Source: list_addToList.a65
     1 = 0088			ptrreg = $88;
     2
     3 9E50 8A 48		  txa:pha
     4
     5 9E52 A0 00		  ldy #0
     6 9E54 B1 88		  lda (ptrreg),y
     7 9E56 18 69 01		  add #1
     8 9E59 8D 81 9E		  sta fnlen
     9
    10 9E5C A0 00		  ldy #0
    11 9E5E A5 E1		  lda MAIN.MIDFILES._bank
    12 9E60 91 DA		  sta (fileList),y
    13 9E62 C8			  iny
    14 9E63 A5 E2		  lda MAIN.MIDFILES._adr
    15 9E65 91 DA		  sta (fileList),y
    16 9E67 C8			  iny
    17 9E68 A5 E3		  lda MAIN.MIDFILES._adr+1
    18 9E6A 91 DA		  sta (fileList),y
    19 9E6C C8			  iny
    20
    21 9E6D A5 88		  lda ptrreg
    22 9E6F 8D 7A 9E		  sta eptr
    23 9E72 A5 89		  lda ptrreg+1
    24 9E74 8D 7B 9E		  sta eptr+1
    25
    26 9E77 A2 01		  ldx #1
    27 9E79			loop:
    28 9E79 BD 00 20		  lda eptr:$2000,x
    29 9E7C 91 DA		  sta (fileList),y
    30 9E7E C8			  iny
    31 9E7F E8			  inx
    32 9E80 E0 00		  cpx fnlen:#00
    33 9E82 30 F5		  bmi loop
    34
    35 9E84			storeEOFN:
    36 9E84 A9 9B		  lda #$9B
    37 9E86 91 DA		  sta (fileList),y
    38 9E88 C8			  iny
    39
    40 9E89 98			  tya
    41 9E8A 18 65 DA		  add fileList
    42 9E8D 85 DA		  sta fileList
    43 9E8F 90 02 E6 DB		  scc:inc fileList+1
    44
    45 9E93 EE 5E 04		  inc totalFiles
    46
    47 9E96 68 AA		  pla:tax
  4493
  4494 				; ------------------------------------------------------------
  4495
  4496 = 0088			ENTRY	= :EDX
  4497 9E98			@exit
  4498 					.ifdef @new
  4499 					lda <@VarData
  4500 					sta :ztmp
  4501 					lda >@VarData
  4502 					ldy #@VarDataSize-1
  4503 					jmp @FreeMem
  4504 					els
  4505 9E98 60				rts						; ret
  4506 					eif
  4507 				.endl
  4508
  4509 9E99			.local	CLEARLIST					; PROCEDURE
  4510
  4511 				; optimize FAIL ('RESETMEMORYPTR', list_asm.inc), line = 39
  4512
  4513 9E99 20 E5 98			jsr RESETMEMORYPTR
  4514
  4515 				; optimize OK (list_asm.inc), line = 40
  4516
  4517 9E9C A9 00			lda #$00
  4518 9E9E 85 DA			sta FILELIST
  4519 9EA0 A9 20			lda #$20
  4520 9EA2 85 DB			sta FILELIST+1
  4521
  4522 				; optimize OK (list_asm.inc), line = 41
  4523
  4524 9EA4 A9 00			lda #$00
  4525 9EA6 8D 5E 04			sta TOTALFILES
  4526 9EA9 8D 5D 04			sta CURFILE
  4527 9EAC 8D 5B 04			sta YFILE
  4528 9EAF 8D 5C 04			sta SHFILE
  4529
  4530 				; optimize OK (list_asm.inc), line = 42
  4531
  4532 9EB2 85 D6			sta CHN
  4533
  4534 				; --- WhileProlog
  4535 9EB4 4C CC 9E			jmp l_0C48
  4536 9EB7			l_0C49
  4537
  4538 				; optimize OK (list_asm.inc), line = 45
  4539
  4540 9EB7 A5 D6			lda CHN
  4541 9EB9 0A				asl @
  4542 9EBA A8				tay
  4543 9EBB B9 80 3B			lda adr.LISTSCRADR,y
  4544 9EBE 85 D4			sta SCRADR
  4545 9EC0 B9 81 3B			lda adr.LISTSCRADR+1,y
  4546 9EC3 85 D5			sta SCRADR+1
  4547
  4548 				; optimize OK (list_asm.inc), line = 46
  4549
  4550 9EC5 A9 20			lda #$20
  4551 9EC7 20 D1 94			jsr PUTSPACES
  4552
  4553 				; optimize FAIL (0, list_asm.inc), line = 47
  4554
  4555 9ECA E6 D6			inc CHN
  4556 9ECC			l_0C48
  4557
  4558 				; optimize OK (list_asm.inc), line = 43
  4559
  4560 9ECC A5 D6			lda CHN
  4561 9ECE C9 10			cmp #$10
  4562 9ED0 90 E5			jcc l_0C49
  4563
  4564 				; optimize OK (list_asm.inc), line = 49
  4565
  4566 9ED2 A5 DA			lda FILELIST
  4567 9ED4 85 88			sta SYSTEM.FILLCHAR_0161.A
  4568 9ED6 A5 DB			lda FILELIST+1
  4569 9ED8 85 89			sta SYSTEM.FILLCHAR_0161.A+1
  4570 9EDA A9 00			lda #$00
  4571 9EDC 85 8C			sta SYSTEM.FILLCHAR_0161.COUNT
  4572 9EDE A9 0C			lda #$0C
  4573 9EE0 85 8D			sta SYSTEM.FILLCHAR_0161.COUNT+1
  4574 9EE2 A9 9B			lda #$9B
  4575 9EE4 85 84			sta SYSTEM.FILLCHAR_0161.VALUE
  4576 9EE6				.local +MAIN.SYSTEM.FILLCHAR_0161
  4577 9EE6				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0161.M@INLINE [Source: MIDICar Player.a65]
     4 9EE6 20 33 82			jsr @fill
Source: MIDICar Player.a65
  4578 					.endl
  4579 9EE9			@exit
  4580 					.ifdef @new
  4581 					lda <@VarData
  4582 					sta :ztmp
  4583 					lda >@VarData
  4584 					ldy #@VarDataSize-1
  4585 					jmp @FreeMem
  4586 					els
  4587 9EE9 60				rts						; ret
  4588 					eif
  4589 				.endl
  4590
  4591 9EEA			.local	FILESELECT					; FUNCTION
  4592
  4593 				; optimize OK (fileselect.inc), line = 10
  4594
  4595 9EEA A9 E8			lda #$E8
  4596 9EEC 85 D4			sta SCRADR
  4597 9EEE A9 37			lda #$37
  4598 9EF0 85 D5			sta SCRADR+1
  4599 9EF2 20 23 96			jsr HLINE
  4600
  4601 				; optimize OK (fileselect.inc), line = 11
  4602
  4603 9EF5 A9 04			lda #$04
  4604 9EF7 85 D4			sta SCRADR
  4605 9EF9 A9 38			lda #$38
  4606 9EFB 85 D5			sta SCRADR+1
  4607 9EFD A9 E5			lda #$E5
  4608 9EFF 85 88			sta PUTINTTEXT.S
  4609 9F01 A9 80			lda #$80
  4610 9F03 85 89			sta PUTINTTEXT.S+1
  4611 9F05 20 DF 94			jsr PUTINTTEXT
  4612
  4613 				; optimize FAIL ('CLEARLIST', fileselect.inc), line = 13
  4614
  4615 9F08 20 99 9E			jsr CLEARLIST
  4616
  4617 				; optimize OK (fileselect.inc), line = 14
  4618
  4619 9F0B A9 FF			lda #$FF
  4620 9F0D 85 E2			sta MIDFILES._ADR
  4621 9F0F 85 E3			sta MIDFILES._ADR+1
  4622 9F11 A9 FE			lda #$FE
  4623 9F13 85 E1			sta MIDFILES._BANK
  4624 9F15 AD 88 04			lda PATH
  4625 9F18 85 88			sta ADDTOLIST.ENTRY
  4626 9F1A AD 89 04			lda PATH+1
  4627 9F1D 85 89			sta ADDTOLIST.ENTRY+1
  4628 9F1F 20 50 9E			jsr ADDTOLIST
  4629
  4630 				; optimize FAIL ('STATUSSTOPPED', fileselect.inc), line = 15
  4631
  4632 9F22 20 98 9B			jsr STATUSSTOPPED
  4633
  4634 				; optimize FAIL ('STATUSREADDIRECTORY', fileselect.inc), line = 16
  4635
  4636 9F25 20 2D 9C			jsr STATUSREADDIRECTORY
  4637
  4638 				; optimize OK (fileselect.inc), line = 18
  4639
  4640 9F28 A9 02			lda #$02
  4641 9F2A 8D 0F 04			sta CIO.OPN.CHN
  4642 9F2D A9 06			lda #$06
  4643 9F2F 8D 10 04			sta CIO.OPN.AX1
  4644 9F32 A9 00			lda #$00
  4645 9F34 8D 11 04			sta CIO.OPN.AX2
  4646 9F37 AD 88 04			lda PATH
  4647 9F3A 8D 12 04			sta CIO.OPN.DEVICE
  4648 9F3D AD 89 04			lda PATH+1
  4649 9F40 8D 13 04			sta CIO.OPN.DEVICE+1
  4650 9F43 20 63 89			jsr CIO.OPN
  4651
  4652 				; --- WhileProlog
  4653 9F46 4C E8 9F			jmp l_0C8D
  4654 9F49			l_0C8E
  4655
  4656 				; optimize OK (fileselect.inc), line = 21
  4657
  4658 9F49 A9 FC			lda #$FC
  4659 9F4B 85 E1			sta MIDFILES._BANK
  4660
  4661 				; optimize OK (fileselect.inc), line = 22
  4662
  4663 9F4D A9 02			lda #$02
  4664 9F4F 85 88			sta GETLN.CHN
  4665 9F51 AD A1 A9			lda FN
  4666 9F54 85 8C			sta GETLN.BUF
  4667 9F56 AD A2 A9			lda FN+1
  4668 9F59 85 8D			sta GETLN.BUF+1
  4669 9F5B 20 1D 97			jsr GETLN
  4670
  4671 				; optimize OK (fileselect.inc), line = 23
  4672
  4673 9F5E AD 01 05			lda adr.FN+$01
  4674 9F61 C9 30			cmp #$30
  4675 9F63 90 03			jcc l_0CA9
  4676 9F65 4C F2 9F			jmp b_0C8E					; break
  4677 9F68			l_0CA9
  4678
  4679 				; optimize OK (fileselect.inc), line = 24
  4680
  4681 9F68 AD A1 A9			lda FN
  4682 9F6B 85 88			sta REDUCEFILENAME.INFN
  4683 9F6D AD A2 A9			lda FN+1
  4684 9F70 85 89			sta REDUCEFILENAME.INFN+1
  4685 9F72 AD A3 A9			lda OUTSTR
  4686 9F75 85 8C			sta REDUCEFILENAME.OUTFN
  4687 9F77 AD A4 A9			lda OUTSTR+1
  4688 9F7A 85 8D			sta REDUCEFILENAME.OUTFN+1
  4689 9F7C 20 85 96			jsr REDUCEFILENAME
  4690
  4691 				; optimize OK (fileselect.inc), line = 25
  4692
  4693 9F7F AD A3 A9			lda OUTSTR
  4694 9F82 85 88			sta GETFILEEXT.FN
  4695 9F84 AD A4 A9			lda OUTSTR+1
  4696 9F87 85 89			sta GETFILEEXT.FN+1
  4697 9F89 20 43 96			jsr GETFILEEXT
  4698
  4699 				; optimize OK (fileselect.inc), line = 26
  4700
  4701 9F8C AD 02 05			lda adr.FN+$02
  4702 9F8F C9 3A			cmp #$3A
  4703 9F91 D0 03			jne l_0CC7
  4704 9F93 4C E8 9F			jmp c_0C8E					; continue
  4705 9F96			l_0CC7
  4706
  4707 				; optimize OK (fileselect.inc), line = 27
  4708
  4709 9F96 AD 12 05			lda adr.FN+$12
  4710 9F99 C9 3E			cmp #$3E
  4711 9F9B D0 03			jne l_0CDD
  4712 9F9D 4C E8 9F			jmp c_0C8E					; continue
  4713 9FA0			l_0CDD
  4714
  4715 				; optimize OK (fileselect.inc), line = 28
  4716
  4717 9FA0 AD FB 04			lda EXT+3
  4718 9FA3 C9 A4			cmp #$A4
  4719 9FA5 D0 11			bne @+
  4720 9FA7 AD FA 04			lda EXT+2
  4721 9FAA C9 A9			cmp #$A9
  4722 9FAC D0 0A			bne @+
  4723 9FAE AD F9 04			lda EXT+1
  4724 9FB1 C9 B2			cmp #$B2
  4725 9FB3 D0 03			bne @+
  4726 9FB5 AD F8 04			lda EXT
  4727 				@
  4728 9FB8 D0 03			jne l_0CF0
  4729 9FBA 4C E8 9F			jmp c_0C8E					; continue
  4730 9FBD			l_0CF0
  4731
  4732 				; optimize OK (fileselect.inc), line = 29
  4733
  4734 9FBD AD FB 04			lda EXT+3
  4735 9FC0 C9 4D			cmp #$4D
  4736 9FC2 D0 11			bne @+
  4737 9FC4 AD FA 04			lda EXT+2
  4738 9FC7 C9 49			cmp #$49
  4739 9FC9 D0 0A			bne @+
  4740 9FCB AD F9 04			lda EXT+1
  4741 9FCE C9 44			cmp #$44
  4742 9FD0 D0 03			bne @+
  4743 9FD2 AD F8 04			lda EXT
  4744 				@
  4745 9FD5 D0 04			jne l_0D03
  4746 9FD7 A9 FF			lda #$FF
  4747 9FD9 85 E1			sta MIDFILES._BANK
  4748 9FDB			l_0D03
  4749
  4750 				; optimize OK (fileselect.inc), line = 32
  4751
  4752 9FDB AD A3 A9			lda OUTSTR
  4753 9FDE 85 88			sta ADDTOLIST.ENTRY
  4754 9FE0 AD A4 A9			lda OUTSTR+1
  4755 9FE3 85 89			sta ADDTOLIST.ENTRY+1
  4756 9FE5 20 50 9E			jsr ADDTOLIST
  4757 9FE8			c_0C8E
  4758 9FE8			l_0C8D
  4759
  4760 				; optimize OK (fileselect.inc), line = 19
  4761
  4762 9FE8 AD 07 04			lda SYSTEM.IORESULT
  4763 9FEB C9 01			cmp #$01
  4764 9FED D0 03 4C 49 9F		jeq l_0C8E
  4765 9FF2			b_0C8E
  4766
  4767 				; optimize FAIL ('CLEARSTATUS', fileselect.inc), line = 34
  4768
  4769 9FF2 20 F4 99			jsr CLEARSTATUS
  4770
  4771 				; optimize OK (fileselect.inc), line = 35
  4772
  4773 9FF5 AD 07 04			lda SYSTEM.IORESULT
  4774 9FF8 8D 8A 04			sta RESULT
  4775
  4776 				; optimize OK (fileselect.inc), line = 36
  4777
  4778 9FFB A9 02			lda #$02
  4779 9FFD 20 A1 89			jsr CIO.CLS
  4780 A000			@exit
  4781
  4782 				; ------------------------------------------------------------
  4783
  4784 = 0488			PATH	= DATAORIGIN+$0088
  4785 = 048A			RESULT	= DATAORIGIN+$008A
  4786 = 0002			CIO_CHN	= $02
  4787 = 04F8			EXT	= $04F8
  4788
  4789 = 0488			@VarData	= PATH
  4790 = 0002			@VarDataSize	= 2
  4791
  4792 A000 60				rts						; ret
  4793 				.endl
  4794
  4795 A001			.local	SHOW_INPUTLINE					; PROCEDURE
  4796
  4797 				; optimize OK (inputline.inc), line = 4
  4798
  4799 A001 AD 68 04			lda ILPOS
  4800 A004 8D 80 05			sta adr.OUTSTR+$00
  4801
  4802 				; optimize OK (inputline.inc), line = 5
  4803
  4804 A007 AD 69 04			lda ILSCRADR
  4805 A00A 85 D4			sta SCRADR
  4806 A00C AD 6A 04			lda ILSCRADR+1
  4807 A00F 85 D5			sta SCRADR+1
  4808
  4809 				; optimize OK (inputline.inc), line = 6
  4810
  4811 A011 AD A3 A9			lda OUTSTR
  4812 A014 85 88			sta PUTASCTEXT.S
  4813 A016 AD A4 A9			lda OUTSTR+1
  4814 A019 85 89			sta PUTASCTEXT.S+1
  4815 A01B 20 08 95			jsr PUTASCTEXT
  4816
  4817 				; optimize OK (inputline.inc), line = 7
  4818
  4819 A01E AD 6B 04			lda ILVCRS
  4820 A021 F0 07			jeq l_0D41
  4821 A023 A9 80			lda #$80
  4822 A025 85 D6			sta ILCH
  4823 A027 4C 2E A0			jmp l_0D4F
  4824 A02A			l_0D41
  4825 A02A A9 00			lda #$00
  4826 A02C 85 D6			sta ILCH
  4827 A02E			l_0D4F
  4828
  4829 				; optimize OK (inputline.inc), line = 8
  4830
  4831 A02E A4 D5			ldy SCRADR+1
  4832 A030 84 81			sty :bp+1
  4833 A032 A4 D4			ldy SCRADR
  4834 A034 A5 D6			lda ILCH
  4835 A036 91 80			sta (:bp),y
  4836
  4837 				; optimize FAIL (0, inputline.inc), line = 9
  4838
  4839 A038 E6 D4			inc SCRADR
  4840 A03A D0 02			sne
  4841 A03C E6 D5			inc SCRADR+1
  4842 A03E A9 1F			lda #$1F
  4843 A040 38 ED 68 04			sub ILPOS
  4844 A044 20 D1 94			jsr PUTSPACES
  4845 A047			@exit
  4846 					.ifdef @new
  4847 					lda <@VarData
  4848 					sta :ztmp
  4849 					lda >@VarData
  4850 					ldy #@VarDataSize-1
  4851 					jmp @FreeMem
  4852 					els
  4853 A047 60				rts						; ret
  4854 					eif
  4855 				.endl
  4856
  4857 A048			.local	INIT_INPUTLINE					; PROCEDURE
  4858
  4859 				; optimize OK (inputline.inc), line = 14
  4860
  4861 A048 AD 80 05			lda adr.OUTSTR
  4862 A04B 8D 68 04			sta ILPOS
  4863
  4864 				; optimize OK (inputline.inc), line = 15
  4865
  4866 A04E A9 7F			lda #$7F
  4867 A050 38 ED 68 04			sub ILPOS
  4868 A054 85 8C			sta SYSTEM.FILLCHAR_0162.COUNT
  4869 A056 A9 00			lda #$00
  4870 A058 E9 00			sbc #$00
  4871 A05A 85 8D			sta SYSTEM.FILLCHAR_0162.COUNT+1
  4872 A05C AD 68 04			lda ILPOS
  4873 A05F 18 69 01			add #$01
  4874 A062 85 9F			sta :STACKORIGIN+11
  4875 A064 A9 00			lda #$00
  4876 A066 69 00			adc #$00
  4877 A068 85 AF			sta :STACKORIGIN+STACKWIDTH+11
  4878 A06A A9 80			lda <adr.OUTSTR
  4879 A06C 18 65 9F			add :STACKORIGIN+11
  4880 A06F 85 88			sta SYSTEM.FILLCHAR_0162.A
  4881 A071 A9 05			lda >adr.OUTSTR
  4882 A073 65 AF			adc :STACKORIGIN+STACKWIDTH+11
  4883 A075 85 89			sta SYSTEM.FILLCHAR_0162.A+1
  4884 A077 A9 9B			lda #$9B
  4885 A079 85 84			sta SYSTEM.FILLCHAR_0162.VALUE
  4886 A07B				.local +MAIN.SYSTEM.FILLCHAR_0162
  4887 A07B				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0162.M@INLINE [Source: MIDICar Player.a65]
     4 A07B 20 33 82			jsr @fill
Source: MIDICar Player.a65
  4888 					.endl
  4889
  4890 				; optimize OK (inputline.inc), line = 16
  4891
  4892 A07E A9 FF			lda #$FF
  4893 A080 8D FC 02			sta KEYB
  4894 A083 A9 01			lda #$01
  4895 A085 8D 6B 04			sta ILVCRS
  4896
  4897 				; optimize OK (inputline.inc), line = 17
  4898
  4899 A088 AD 5B 04			lda YFILE
  4900 A08B 0A				asl @
  4901 A08C A8				tay
  4902 A08D B9 80 3B			lda adr.LISTSCRADR,y
  4903 A090 18 69 02			add #$02
  4904 A093 8D 69 04			sta ILSCRADR
  4905 A096 B9 81 3B			lda adr.LISTSCRADR+1,y
  4906 A099 69 00			adc #$00
  4907 A09B 8D 6A 04			sta ILSCRADR+1
  4908
  4909 				; optimize FAIL ('SHOW_INPUTLINE', inputline.inc), line = 18
  4910
  4911 A09E 20 01 A0			jsr SHOW_INPUTLINE
  4912 A0A1 A5 14			lda _TM
  4913 A0A3 85 12			sta CTM
  4914
  4915 				; optimize OK (inputline.inc), line = 19
  4916
  4917 A0A5 A9 01			lda #$01
  4918 A0A7 8D 6D 04			sta STATEINPUTLINE
  4919
  4920 				; optimize OK (inputline.inc), line = 20
  4921
  4922 A0AA A9 00			lda #$00
  4923 A0AC 8D 6C 04			sta RESULTINPUTLINE
  4924 A0AF			@exit
  4925 					.ifdef @new
  4926 					lda <@VarData
  4927 					sta :ztmp
  4928 					lda >@VarData
  4929 					ldy #@VarDataSize-1
  4930 					jmp @FreeMem
  4931 					els
  4932 A0AF 60				rts						; ret
  4933 					eif
  4934 				.endl
  4935
  4936 A0B0			.local	DO_INPUTLINE					; PROCEDURE
  4937
  4938 				; optimize OK (inputline.inc), line = 25
  4939
  4940 A0B0 AD 68 04			lda ILPOS
  4941 A0B3 F0 6C			jeq l_0DB5
  4942
  4943 				; optimize OK (inputline.inc), line = 27
  4944
  4945 A0B5 AD FC 02			lda KEYB
  4946 A0B8 C9 1C			cmp #$1C
  4947 A0BA F0 04			jeq l_0DD4x
  4948 A0BC C9 0C			cmp #$0C
  4949 A0BE D0 4F			jne l_0DD4
  4950 A0C0			l_0DD4x
  4951
  4952 				; optimize OK (inputline.inc), line = 29
  4953
  4954 A0C0 AD FC 02			lda KEYB
  4955 A0C3 C9 1C			cmp #$1C
  4956 A0C5 D0 25			jne l_0DE7
  4957
  4958 				; optimize OK (inputline.inc), line = 31
  4959
  4960 A0C7 AD 00 05			lda adr.FN+$00
  4961 A0CA 8D 68 04			sta ILPOS
  4962 A0CD AD A1 A9			lda FN
  4963 A0D0 85 88			sta @move.src
  4964 A0D2 AD A2 A9			lda FN+1
  4965 A0D5 85 89			sta @move.src+1
  4966 					@moveSTRING OUTSTR #128
  4966 				 MWA OUTSTR @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  4966 A0D7 AD A3 A9 85 8C AD +  MWA OUTSTR @MOVE.DST
  4966 A0E1 A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  4966 A0E9 20 7B 82		 JSR @MOVESTRING
  4967 A0EC			l_0DE7
  4968
  4969 				; optimize OK (inputline.inc), line = 33
  4970
  4971 A0EC A9 00			lda #$00
  4972 A0EE 8D 6B 04			sta ILVCRS
  4973 A0F1 20 01 A0			jsr SHOW_INPUTLINE
  4974
  4975 				; optimize OK (inputline.inc), line = 34
  4976
  4977 A0F4 A9 02			lda #$02
  4978 A0F6 8D 6D 04			sta STATEINPUTLINE
  4979
  4980 				; optimize OK (inputline.inc), line = 35
  4981
  4982 A0F9 A0 01			ldy #1
  4983 A0FB AD FC 02			lda KEYB
  4984 A0FE C9 0C			cmp #$0C
  4985 A100 F0 01			beq @+
  4986 A102 88				dey
  4987 				@
  4988 A103 98				tya
  4989 A104 8D 6C 04			sta RESULTINPUTLINE
  4990
  4991 				; optimize OK (inputline.inc), line = 36
  4992
  4993 A107 A9 0C			lda #$0C
  4994 A109 8D FC 02			sta KEYB
  4995 A10C 4C 46 A1			jmp @exit					; exit
  4996 A10F			l_0DD4
  4997
  4998 				; optimize OK (inputline.inc), line = 38
  4999
  5000 A10F AD FC 02			lda KEYB
  5001 A112 C9 34			cmp #$34
  5002 A114 D0 0B			jne l_0E20
  5003
  5004 				; optimize OK (inputline.inc), line = 40
  5005
  5006 A116 AC 68 04			ldy ILPOS
  5007 A119 A9 9B			lda #$9B
  5008 A11B 99 80 05			sta adr.OUTSTR,y
  5009
  5010 				; optimize FAIL (0, inputline.inc), line = 41
  5011
  5012 A11E CE 68 04			dec ILPOS
  5013 A121			l_0E20
  5014 A121			l_0DB5
  5015
  5016 				; optimize OK (inputline.inc), line = 44
  5017
  5018 A121 AD 68 04			lda ILPOS
  5019 A124 C9 1E			cmp #$1E
  5020 A126 B0 16			jcs l_0E42
  5021
  5022 				; optimize OK (inputline.inc), line = 46
  5023
  5024 A128 AD FC 02			lda KEYB
  5025 A12B 20 35 98			jsr KEYSCAN2ASC
  5026 A12E AD 7A 04			lda KEYSCAN2ASC.RESULT
  5027 A131 85 D6			sta ILCH
  5028
  5029 				; optimize OK (inputline.inc), line = 47
  5030
  5031 A133 F0 09			jeq l_0E5C
  5032
  5033 				; optimize FAIL (0, inputline.inc), line = 49
  5034
  5035 A135 EE 68 04			inc ILPOS
  5036
  5037 				; optimize OK (inputline.inc), line = 50
  5038
  5039 A138 AC 68 04			ldy ILPOS
  5040 A13B 99 80 05			sta adr.OUTSTR,y
  5041 A13E			l_0E5C
  5042 A13E			l_0E42
  5043
  5044 				; optimize FAIL ('SHOW_INPUTLINE', inputline.inc), line = 53
  5045
  5046 A13E 20 01 A0			jsr SHOW_INPUTLINE
  5047
  5048 				; optimize OK (inputline.inc), line = 54
  5049
  5050 A141 A9 FF			lda #$FF
  5051 A143 8D FC 02			sta KEYB
  5052 A146			@exit
  5053 					.ifdef @new
  5054 					lda <@VarData
  5055 					sta :ztmp
  5056 					lda >@VarData
  5057 					ldy #@VarDataSize-1
  5058 					jmp @FreeMem
  5059 					els
  5060 A146 60				rts						; ret
  5061 					eif
  5062 				.endl
  5063
  5064 A147			.local	DRAWLISTSELECTION				; PROCEDURE
  5065
  5066 				; optimize OK (list.inc), line = 7
  5067
  5068 A147 AD 5B 04			lda YFILE
  5069 A14A 0A				asl @
  5070 A14B A8				tay
  5071 A14C B9 80 3B			lda adr.LISTSCRADR,y
  5072 A14F 85 D4			sta SCRADR
  5073 A151 B9 81 3B			lda adr.LISTSCRADR+1,y
  5074 A154 85 D5			sta SCRADR+1
  5075 A156 A9 20			lda #$20
  5076 A158 20 C0 94			jsr INVERS
  5077 A15B			@exit
  5078 					.ifdef @new
  5079 					lda <@VarData
  5080 					sta :ztmp
  5081 					lda >@VarData
  5082 					ldy #@VarDataSize-1
  5083 					jmp @FreeMem
  5084 					els
  5085 A15B 60				rts						; ret
  5086 					eif
  5087 				.endl
  5088
  5089 A15C			.local	SHOWENTRY					; PROCEDURE
  5090
  5091 				; optimize OK (list.inc), line = 16
  5092
  5093 A15C A9 8E			lda <P_BANK
  5094 A15E 85 88			sta GETENTRYSETS.PTR
  5095 A160 A9 04			lda >P_BANK
  5096 A162 85 89			sta GETENTRYSETS.PTR+1
  5097 A164 20 F9 9D			jsr GETENTRYSETS
  5098
  5099 				; optimize OK (list.inc), line = 17
  5100
  5101 A167 A9 00			lda #$00
  5102 A169 85 D7			sta V
  5103
  5104 				; optimize OK (list.inc), line = 19
  5105
  5106 A16B AD 8E 04			lda P_BANK
  5107 A16E C9 FE			cmp #$FE
  5108 A170 D0 04			jne l_0E9D
  5109 A172 A9 1E			lda #$1E
  5110 A174 85 D7			sta V
  5111 A176			l_0E9D
  5112
  5113 				; optimize OK (list.inc), line = 20
  5114
  5115 A176 AD 8E 04			lda P_BANK
  5116 A179 C9 FF			cmp #$FF
  5117 A17B D0 04			jne l_0EB6
  5118 A17D A9 5A			lda #$5A
  5119 A17F 85 D7			sta V
  5120 A181			l_0EB6
  5121
  5122 				; optimize OK (list.inc), line = 21
  5123
  5124 A181 AD 8E 04			lda P_BANK
  5125 A184 C9 40			cmp #$40
  5126 A186 B0 13			jcs l_0ECF
  5127
  5128 				; optimize OK (list.inc), line = 22
  5129
  5130 A188 AD 90 04			lda P_ADR+1
  5131 A18B 0D 8F 04			ora P_ADR
  5132 A18E D0 07			jne l_0EE1
  5133
  5134 				; optimize OK (list.inc), line = 23
  5135
  5136 A190 A9 4D			lda #$4D
  5137 A192 85 D7			sta V
  5138 A194 4C 9B A1			jmp l_0EEF
  5139 A197			l_0EE1
  5140
  5141 				; optimize OK (list.inc), line = 25
  5142
  5143 A197 A9 5A			lda #$5A
  5144 A199 85 D7			sta V
  5145 A19B			l_0EEF
  5146 A19B			l_0ECF
  5147
  5148 				; optimize OK (list.inc), line = 27
  5149
  5150 A19B A4 D5			ldy SCRADR+1
  5151 A19D 84 81			sty :bp+1
  5152 A19F A4 D4			ldy SCRADR
  5153 A1A1 A5 D7			lda V
  5154 A1A3 91 80			sta (:bp),y
  5155 A1A5 98				tya
  5156 A1A6 18 69 02			add #$02
  5157 A1A9 85 D4			sta SCRADR
  5158 A1AB 90 02			scc
  5159 A1AD E6 D5			inc SCRADR+1
  5160
  5161 				; optimize OK (list.inc), line = 29
  5162
  5163 A1AF AD 80 05			lda adr.OUTSTR+$00
  5164 A1B2 C9 1F			cmp #$1F
  5165 A1B4 90 05			jcc l_0F0F
  5166 A1B6 A9 1E			lda #$1E
  5167 A1B8 8D 80 05			sta adr.OUTSTR+$00
  5168 A1BB			l_0F0F
  5169
  5170 				; optimize OK (list.inc), line = 30
  5171
  5172 A1BB AD A3 A9			lda OUTSTR
  5173 A1BE 85 88			sta PUTASCTEXT.S
  5174 A1C0 AD A4 A9			lda OUTSTR+1
  5175 A1C3 85 89			sta PUTASCTEXT.S+1
  5176 A1C5 20 08 95			jsr PUTASCTEXT
  5177
  5178 				; optimize OK (list.inc), line = 31
  5179
  5180 A1C8 A9 1E			lda #$1E
  5181 A1CA 38 ED 80 05			sub adr.OUTSTR+$00
  5182 A1CE 20 D1 94			jsr PUTSPACES
  5183
  5184 				; ------------------------------------------------------------
  5185
  5186 = 048E			P_BANK	= DATAORIGIN+$008E
  5187 = 048F			P_ADR	= DATAORIGIN+$008F
  5188
  5189 = 048E			@VarData	= P_BANK
  5190 = 0003			@VarDataSize	= 3
  5191
  5192 A1D1			@exit
  5193 					.ifdef @new
  5194 					lda <@VarData
  5195 					sta :ztmp
  5196 					lda >@VarData
  5197 					ldy #@VarDataSize-1
  5198 					jmp @FreeMem
  5199 					els
  5200 A1D1 60				rts						; ret
  5201 					eif
  5202 				.endl
  5203
  5204 A1D2			.local	SHOWLIST					; PROCEDURE
  5205
  5206 				; optimize OK (list.inc), line = 36
  5207
  5208 A1D2 AD 5C 04			lda SHFILE
  5209 A1D5 20 33 9E			jsr GOTONENTRY
  5210 A1D8 A9 00			lda #$00
  5211 A1DA 85 D6			sta CHN
  5212
  5213 				; --- WhileProlog
  5214 A1DC 4C 11 A2			jmp l_0F31
  5215 A1DF			l_0F32
  5216
  5217 				; optimize OK (list.inc), line = 39
  5218
  5219 A1DF A5 D6			lda CHN
  5220 A1E1 0A				asl @
  5221 A1E2 A8				tay
  5222 A1E3 B9 80 3B			lda adr.LISTSCRADR,y
  5223 A1E6 85 D4			sta SCRADR
  5224 A1E8 B9 81 3B			lda adr.LISTSCRADR+1,y
  5225 A1EB 85 D5			sta SCRADR+1
  5226
  5227 				; optimize OK (list.inc), line = 40
  5228
  5229 A1ED AD A3 A9			lda OUTSTR
  5230 A1F0 85 88			sta GETENTRY.FN
  5231 A1F2 AD A4 A9			lda OUTSTR+1
  5232 A1F5 85 89			sta GETENTRY.FN+1
  5233 A1F7 20 BB 9D			jsr GETENTRY
  5234 A1FA A5 90			lda GETENTRY.RESULT
  5235 A1FC F0 06			jeq l_0F46
  5236
  5237 				; optimize FAIL ('SHOWENTRY', list.inc), line = 42
  5238
  5239 A1FE 20 5C A1			jsr SHOWENTRY
  5240 A201 4C 07 A2			jmp l_0F51
  5241 A204			l_0F46
  5242 A204 4C 17 A2			jmp b_0F32					; break
  5243 A207			l_0F51
  5244
  5245 				; optimize FAIL (0, list.inc), line = 44
  5246
  5247 A207 E6 D6			inc CHN
  5248
  5249 				; optimize FAIL ('NEXTENTRY', list.inc), line = 45
  5250
  5251 A209 20 0D 9E			jsr NEXTENTRY
  5252 A20C AD 86 04 95 95		mva NEXTENTRY.RESULT :STACKORIGIN+1,x
  5253 A211			l_0F31
  5254
  5255 				; optimize OK (list.inc), line = 37
  5256
  5257 A211 A5 D6			lda CHN
  5258 A213 C9 10			cmp #$10
  5259 A215 90 C8			jcc l_0F32
  5260 A217			b_0F32
  5261 A217			@exit
  5262 					.ifdef @new
  5263 					lda <@VarData
  5264 					sta :ztmp
  5265 					lda >@VarData
  5266 					ldy #@VarDataSize-1
  5267 					jmp @FreeMem
  5268 					els
  5269 A217 60				rts						; ret
  5270 					eif
  5271 				.endl
  5272
  5273 A218			.local	CHOICELISTFILE					; FUNCTION
  5274
  5275 				; optimize OK (list.inc), line = 54
  5276
  5277 A218 AD 6D 04			lda STATEINPUTLINE
  5278 A21B F0 08			jeq l_0F78
  5279 A21D A9 00			lda #$00
  5280 A21F 8D 91 04			sta RESULT
  5281 A222 4C 9E A2			jmp @exit					; exit
  5282 A225			l_0F78
  5283
  5284 				; optimize OK (list.inc), line = 56
  5285
  5286 A225 AD 5D 04			lda CURFILE
  5287 A228 20 33 9E			jsr GOTONENTRY
  5288
  5289 				; optimize OK (list.inc), line = 57
  5290
  5291 A22B AD A1 A9			lda FN
  5292 A22E 85 88			sta GETENTRY.FN
  5293 A230 AD A2 A9			lda FN+1
  5294 A233 85 89			sta GETENTRY.FN+1
  5295 A235 20 BB 9D			jsr GETENTRY
  5296 A238 A5 90			lda GETENTRY.RESULT
  5297 A23A 8D 91 04			sta RESULT
  5298
  5299 				; optimize OK (list.inc), line = 58
  5300
  5301 A23D F0 5F			jeq l_0F95
  5302
  5303 				; optimize OK (list.inc), line = 60
  5304
  5305 A23F A9 8B			lda <P_BANK
  5306 A241 85 88			sta GETENTRYSETS.PTR
  5307 A243 A9 04			lda >P_BANK
  5308 A245 85 89			sta GETENTRYSETS.PTR+1
  5309 A247 20 F9 9D			jsr GETENTRYSETS
  5310
  5311 				; optimize OK (list.inc), line = 62
  5312
  5313 A24A AD A1 A9			lda FN
  5314 A24D 85 88			sta GETDEVICESPEC.FN
  5315 A24F AD A2 A9			lda FN+1
  5316 A252 85 89			sta GETDEVICESPEC.FN+1
  5317 A254 AD 9F A2			lda DEV
  5318 A257 85 8C			sta GETDEVICESPEC.SPEC
  5319 A259 AD A0 A2			lda DEV+1
  5320 A25C 85 8D			sta GETDEVICESPEC.SPEC+1
  5321 A25E 20 C9 96			jsr GETDEVICESPEC
  5322 A261 A5 90			lda GETDEVICESPEC.RESULT
  5323 A263 D0 1A			jne l_0FA9
  5324
  5325 				; optimize OK (list.inc), line = 63
  5326
  5327 A265 AD 9F A9			lda CURDEV
  5328 A268 85 88			sta JOINSTRINGS.S1
  5329 A26A AD A0 A9			lda CURDEV+1
  5330 A26D 85 89			sta JOINSTRINGS.S1+1
  5331 A26F AD A1 A9			lda FN
  5332 A272 85 8C			sta JOINSTRINGS.S2
  5333 A274 AD A2 A9			lda FN+1
  5334 A277 85 8D			sta JOINSTRINGS.S2+1
  5335 A279 20 ED 96			jsr JOINSTRINGS
  5336 A27C 4C 9E A2			jmp l_0FB8
  5337 A27F			l_0FA9
  5338
  5339 				; optimize OK (list.inc), line = 65
  5340
  5341 A27F AD A1 A9			lda FN
  5342 A282 85 88			sta @move.src
  5343 A284 AD A2 A9			lda FN+1
  5344 A287 85 89			sta @move.src+1
  5345 					@moveSTRING OUTSTR #128
  5345 				 MWA OUTSTR @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  5345 A289 AD A3 A9 85 8C AD +  MWA OUTSTR @MOVE.DST
  5345 A293 A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  5345 A29B 20 7B 82		 JSR @MOVESTRING
  5346 A29E			l_0FB8
  5347 A29E			l_0F95
  5348 A29E			@exit
  5349
  5350 				; ------------------------------------------------------------
  5351
  5352 = 0491			RESULT	= DATAORIGIN+$0091
  5353 = 0492			adr.DEV	= [DATAORIGIN+$0092] .array [4]
  5354 A29E			.var DEV	= adr.DEV .word
  5355
  5356 = A29F			@VarData	= DEV
  5357 = 0004			@VarDataSize	= 4
  5358
  5359 A29E 60				rts						; ret
  5360 = A29F 92 04		DEV
  5360 				.endl
  5361
  5362 A2A1			.local	TOGGLEFILE					; PROCEDURE
  5363
  5364 				; optimize OK (keyboard.inc), line = 3
  5365
  5366 A2A1 AD 5D 04			lda CURFILE
  5367 A2A4 20 33 9E			jsr GOTONENTRY
  5368
  5369 				; optimize OK (keyboard.inc), line = 4
  5370
  5371 A2A7 AD A3 A9			lda OUTSTR
  5372 A2AA 85 88			sta GETENTRY.FN
  5373 A2AC AD A4 A9			lda OUTSTR+1
  5374 A2AF 85 89			sta GETENTRY.FN+1
  5375 A2B1 20 BB 9D			jsr GETENTRY
  5376 A2B4 A5 90 95 95			mva GETENTRY.RESULT :STACKORIGIN+1,x
  5377
  5378 				; optimize OK (keyboard.inc), line = 5
  5379
  5380 A2B8 A9 8B			lda <P_BANK
  5381 A2BA 85 88			sta GETENTRYSETS.PTR
  5382 A2BC A9 04			lda >P_BANK
  5383 A2BE 85 89			sta GETENTRYSETS.PTR+1
  5384 A2C0 20 F9 9D			jsr GETENTRYSETS
  5385
  5386 				; optimize OK (keyboard.inc), line = 6
  5387
  5388 A2C3 AD 8B 04			lda P_BANK
  5389 A2C6 C9 FE			cmp #$FE
  5390 A2C8 F0 20			jeq l_0FEB
  5391 A2CA 29 7F			and #$7F
  5392 A2CC F0 1C			jeq l_0FEB
  5393
  5394 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 8
  5395
  5396 A2CE 20 47 A1			jsr DRAWLISTSELECTION
  5397
  5398 				; optimize OK (keyboard.inc), line = 9
  5399
  5400 A2D1 AD 8B 04			lda P_BANK
  5401 A2D4 49 80			eor #$80
  5402 A2D6 8D 8B 04			sta P_BANK
  5403
  5404 				; optimize OK (keyboard.inc), line = 10
  5405
  5406 A2D9 A9 8B			lda <P_BANK
  5407 A2DB 85 88			sta SETENTRYSETS.PTR
  5408 A2DD A9 04			lda >P_BANK
  5409 A2DF 85 89			sta SETENTRYSETS.PTR+1
  5410 A2E1 20 03 9E			jsr SETENTRYSETS
  5411
  5412 				; optimize FAIL ('SHOWENTRY', keyboard.inc), line = 11
  5413
  5414 A2E4 20 5C A1			jsr SHOWENTRY
  5415
  5416 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 12
  5417
  5418 A2E7 20 47 A1			jsr DRAWLISTSELECTION
  5419 A2EA			l_0FEB
  5420 A2EA			@exit
  5421 					.ifdef @new
  5422 					lda <@VarData
  5423 					sta :ztmp
  5424 					lda >@VarData
  5425 					ldy #@VarDataSize-1
  5426 					jmp @FreeMem
  5427 					els
  5428 A2EA 60				rts						; ret
  5429 					eif
  5430 				.endl
  5431
  5432 A2EB			.local	MOVEFILESELECTION				; PROCEDURE
  5433
  5434 				; optimize OK (keyboard.inc), line = 18
  5435
  5436 A2EB A5 4A			lda PLAYERSTATUS
  5437 A2ED 30 03			jmi l_1017
  5438 A2EF 20 47 A1			jsr DRAWLISTSELECTION
  5439 A2F2			l_1017
  5440
  5441 				; optimize OK (keyboard.inc), line = 19
  5442
  5443 A2F2 A9 00			lda #$00
  5444 A2F4 85 D7			sta V
  5445
  5446 				; optimize OK (keyboard.inc), line = 20
  5447
  5448 A2F6 AD FC 02			lda KEYB
  5449 A2F9 C9 0E			cmp #$0E
  5450 A2FB D0 14			jne l_1031
  5451
  5452 				; optimize OK (keyboard.inc), line = 22
  5453
  5454 A2FD AD 5B 04			lda YFILE
  5455 A300 F0 06			jeq l_1044
  5456
  5457 				; optimize FAIL (0, keyboard.inc), line = 23
  5458
  5459 A302 CE 5B 04			dec YFILE
  5460 A305 4C 11 A3			jmp l_1052
  5461 A308			l_1044
  5462
  5463 				; optimize OK (keyboard.inc), line = 25
  5464
  5465 A308 AD 5C 04			lda SHFILE
  5466 A30B F0 04			jeq l_1064
  5467 A30D A9 FF			lda #$FF
  5468 A30F 85 D7			sta V
  5469 A311			l_1064
  5470 A311			l_1052
  5471 A311			l_1031
  5472
  5473 				; optimize OK (keyboard.inc), line = 27
  5474
  5475 A311 AD FC 02			lda KEYB
  5476 A314 C9 0F			cmp #$0F
  5477 A316 D0 54			jne l_107F
  5478
  5479 				; optimize OK (keyboard.inc), line = 29
  5480
  5481 A318 AD 5B 04			lda YFILE
  5482 A31B C9 0F			cmp #$0F
  5483 A31D B0 06			jcs l_1092
  5484
  5485 				; optimize FAIL (0, keyboard.inc), line = 30
  5486
  5487 A31F EE 5B 04			inc YFILE
  5488 A322 4C 6C A3			jmp l_10A0
  5489 A325			l_1092
  5490
  5491 				; optimize OK (keyboard.inc), line = 32
  5492
  5493 A325 AD 5E 04			lda TOTALFILES
  5494 A328 38 ED 5B 04			sub YFILE
  5495 A32C 85 9E			sta :STACKORIGIN+10
  5496 A32E A9 00			lda #$00
  5497 A330 E9 00			sbc #$00
  5498 A332 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  5499 A334 A9 00			lda #$00
  5500 A336 E9 00			sbc #$00
  5501 A338 85 BE			sta :STACKORIGIN+STACKWIDTH*2+10
  5502 A33A A9 00			lda #$00
  5503 A33C E9 00			sbc #$00
  5504 A33E 85 CE			sta :STACKORIGIN+STACKWIDTH*3+10
  5505 A340 A5 9E			lda :STACKORIGIN+10
  5506 A342 38 E9 01			sub #$01
  5507 A345 85 9E			sta :STACKORIGIN+10
  5508 A347 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  5509 A349 E9 00			sbc #$00
  5510 A34B 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  5511 A34D A5 BE			lda :STACKORIGIN+STACKWIDTH*2+10
  5512 A34F E9 00			sbc #$00
  5513 A351 85 BE			sta :STACKORIGIN+STACKWIDTH*2+10
  5514 A353 A5 CE			lda :STACKORIGIN+STACKWIDTH*3+10
  5515 A355 E9 00			sbc #$00
  5516 A357 D0 0D			bne @+
  5517 A359 A5 BE			lda :STACKORIGIN+STACKWIDTH*2+10
  5518 A35B D0 09			bne @+
  5519 A35D A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  5520 A35F D0 05			bne @+
  5521 A361 AD 5C 04			lda SHFILE
  5522 A364 C5 9E			cmp :STACKORIGIN+10
  5523 				@
  5524 A366 B0 04			jcs l_10BE
  5525 A368 A9 01			lda #$01
  5526 A36A 85 D7			sta V
  5527 A36C			l_10BE
  5528 A36C			l_10A0
  5529 A36C			l_107F
  5530
  5531 				; optimize OK (keyboard.inc), line = 34
  5532
  5533 A36C A5 D7			lda V
  5534 A36E F0 0F			jeq l_10D9
  5535
  5536 				; optimize OK (keyboard.inc), line = 36
  5537
  5538 A370 AD 5C 04			lda SHFILE
  5539 A373 18 65 D7			add V
  5540 A376 8D 5C 04			sta SHFILE
  5541
  5542 				; optimize OK (keyboard.inc), line = 37
  5543
  5544 A379 A5 4A			lda PLAYERSTATUS
  5545 A37B 09 80			ora #$80
  5546 A37D 85 4A			sta PLAYERSTATUS
  5547 A37F			l_10D9
  5548
  5549 				; optimize OK (keyboard.inc), line = 40
  5550
  5551 A37F AD 5C 04			lda SHFILE
  5552 A382 18 6D 5B 04			add YFILE
  5553 A386 8D 5D 04			sta CURFILE
  5554
  5555 				; optimize OK (keyboard.inc), line = 41
  5556
  5557 A389 CD 5E 04			cmp TOTALFILES
  5558 A38C 90 07			jcc l_1109
  5559 A38E AC 5E 04			ldy TOTALFILES
  5560 A391 88				dey
  5561 A392 8C 5D 04			sty CURFILE
  5562 A395			l_1109
  5563
  5564 				; optimize OK (keyboard.inc), line = 42
  5565
  5566 A395 A5 4A			lda PLAYERSTATUS
  5567 A397 30 03			jmi l_112C
  5568 A399 20 47 A1			jsr DRAWLISTSELECTION
  5569 A39C			l_112C
  5570 A39C			@exit
  5571 					.ifdef @new
  5572 					lda <@VarData
  5573 					sta :ztmp
  5574 					lda >@VarData
  5575 					ldy #@VarDataSize-1
  5576 					jmp @FreeMem
  5577 					els
  5578 A39C 60				rts						; ret
  5579 					eif
  5580 				.endl
  5581
  5582 A39D			.local	TOGGLELOOPMODE					; PROCEDURE
  5583
  5584 				; optimize OK (keyboard.inc), line = 47
  5585
  5586 A39D A5 4A			lda PLAYERSTATUS
  5587 A39F 18 69 04			add #$04
  5588 A3A2 29 0C			and #$0C
  5589 A3A4 85 D7			sta V
  5590
  5591 				; optimize OK (keyboard.inc), line = 48
  5592
  5593 A3A6 A5 4A			lda PLAYERSTATUS
  5594 A3A8 29 F3			and #$F3
  5595 A3AA 05 D7			ora V
  5596 A3AC 85 4A			sta PLAYERSTATUS
  5597
  5598 				; optimize FAIL ('STATUSLOOP', keyboard.inc), line = 49
  5599
  5600 A3AE 20 DB 9A			jsr STATUSLOOP
  5601 A3B1			@exit
  5602 					.ifdef @new
  5603 					lda <@VarData
  5604 					sta :ztmp
  5605 					lda >@VarData
  5606 					ldy #@VarDataSize-1
  5607 					jmp @FreeMem
  5608 					els
  5609 A3B1 60				rts						; ret
  5610 					eif
  5611 				.endl
  5612
  5613 A3B2			.local	TOGGLEMETERS					; PROCEDURE
  5614
  5615 				; optimize FAIL ('CLEARUVMETERS', keyboard.inc), line = 54
  5616
  5617 A3B2 20 5C 9A			jsr CLEARUVMETERS
  5618
  5619 				; optimize OK (keyboard.inc), line = 55
  5620
  5621 A3B5 A5 4A			lda PLAYERSTATUS
  5622 A3B7 49 02			eor #$02
  5623 A3B9 85 4A			sta PLAYERSTATUS
  5624 A3BB			@exit
  5625 					.ifdef @new
  5626 					lda <@VarData
  5627 					sta :ztmp
  5628 					lda >@VarData
  5629 					ldy #@VarDataSize-1
  5630 					jmp @FreeMem
  5631 					els
  5632 A3BB 60				rts						; ret
  5633 					eif
  5634 				.endl
  5635
  5636 A3BC			.local	TOGGLESCREENCOLORS				; PROCEDURE
  5637
  5638 				; optimize OK (keyboard.inc), line = 60
  5639
  5640 A3BC A5 4A			lda PLAYERSTATUS
  5641 A3BE 49 01			eor #$01
  5642 A3C0 85 4A			sta PLAYERSTATUS
  5643
  5644 				; optimize FAIL ('SETCOLORS', keyboard.inc), line = 61
  5645
  5646 A3C2 20 97 94			jsr SETCOLORS
  5647 A3C5			@exit
  5648 					.ifdef @new
  5649 					lda <@VarData
  5650 					sta :ztmp
  5651 					lda >@VarData
  5652 					ldy #@VarDataSize-1
  5653 					jmp @FreeMem
  5654 					els
  5655 A3C5 60				rts						; ret
  5656 					eif
  5657 				.endl
  5658
  5659 A3C6			.local	PLAYERCONTROL					; PROCEDURE
  5660
  5661 				; optimize OK (keyboard.inc), line = 66
  5662
  5663 A3C6 AD FC 02			lda KEYB
  5664 A3C9 C9 17			cmp #$17
  5665 A3CB F0 04			jeq l_1193x
  5666 A3CD C9 15			cmp #$15
  5667 A3CF D0 1F			jne l_1193
  5668 A3D1			l_1193x
  5669
  5670 				; optimize OK (keyboard.inc), line = 68
  5671
  5672 A3D1 AD FC 02			lda KEYB
  5673 A3D4 C9 17			cmp #$17
  5674 A3D6 D0 05			jne l_11A6
  5675 A3D8 A9 FF			lda #$FF
  5676 A3DA 8D 60 04			sta PLAYDIR
  5677 A3DD			l_11A6
  5678
  5679 				; optimize OK (keyboard.inc), line = 69
  5680
  5681 A3DD AD FC 02			lda KEYB
  5682 A3E0 C9 15			cmp #$15
  5683 A3E2 D0 05			jne l_11BF
  5684 A3E4 A9 01			lda #$01
  5685 A3E6 8D 60 04			sta PLAYDIR
  5686 A3E9			l_11BF
  5687
  5688 				; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 70
  5689
  5690 A3E9 20 62 9B			jsr STATUSPAUSE
  5691
  5692 				; optimize OK (keyboard.inc), line = 71
  5693
  5694 A3EC A9 00			lda #$00
  5695 A3EE 85 DF			sta MIDFILES.PLAYINGTRACKS
  5696 A3F0			l_1193
  5697
  5698 				; optimize OK (keyboard.inc), line = 73
  5699
  5700 A3F0 AD FC 02			lda KEYB
  5701 A3F3 C9 16			cmp #$16
  5702 A3F5 D0 06			jne l_11DF
  5703
  5704 				; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 75
  5705
  5706 A3F7 20 98 9B			jsr STATUSSTOPPED
  5707
  5708 				; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 76
  5709
  5710 A3FA 20 FD 9A			jsr STATUSPLAYING
  5711 A3FD			l_11DF
  5712
  5713 				; optimize OK (keyboard.inc), line = 78
  5714
  5715 A3FD AD FC 02			lda KEYB
  5716 A400 C9 12			cmp #$12
  5717 A402 D0 13			jne l_1206
  5718 A404 A5 4A			lda PLAYERSTATUS
  5719 A406 29 40			and #$40
  5720 A408 D0 0D			jne l_1206
  5721
  5722 				; optimize OK (keyboard.inc), line = 80
  5723
  5724 A40A A5 F5			lda MIDFILES._TIMERSTATUS
  5725 A40C 10 06			jpl l_121D
  5726
  5727 				; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 82
  5728
  5729 A40E 20 FD 9A			jsr STATUSPLAYING
  5730 A411 4C 17 A4			jmp l_1228
  5731 A414			l_121D
  5732
  5733 				; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 83
  5734
  5735 A414 20 62 9B			jsr STATUSPAUSE
  5736 A417			l_1228
  5737 A417			l_1206
  5738
  5739 				; optimize OK (keyboard.inc), line = 85
  5740
  5741 A417 AD FC 02			lda KEYB
  5742 A41A C9 10			cmp #$10
  5743 A41C D0 03			jne l_123D
  5744 A41E 20 98 9B			jsr STATUSSTOPPED
  5745 A421			l_123D
  5746 A421			@exit
  5747 					.ifdef @new
  5748 					lda <@VarData
  5749 					sta :ztmp
  5750 					lda >@VarData
  5751 					ldy #@VarDataSize-1
  5752 					jmp @FreeMem
  5753 					els
  5754 A421 60				rts						; ret
  5755 					eif
  5756 				.endl
  5757
  5758 A422			.local	TEMPOCONTROL					; PROCEDURE
  5759
  5760 				; optimize OK (keyboard.inc), line = 90
  5761
  5762 A422 AD FC 02			lda KEYB
  5763 A425 C9 36			cmp #$36
  5764 A427 D0 21			jne l_1257
  5765 A429 AD 34 04			lda MIDFILES.TEMPOSHIFT
  5766 A42C 18 69 20			add #$20
  5767 A42F 8D 34 04			sta MIDFILES.TEMPOSHIFT
  5768 A432 AD 35 04			lda MIDFILES.TEMPOSHIFT+1
  5769 A435 69 4E			adc #$4E
  5770 A437 8D 35 04			sta MIDFILES.TEMPOSHIFT+1
  5771 A43A AD 36 04			lda MIDFILES.TEMPOSHIFT+2
  5772 A43D 69 00			adc #$00
  5773 A43F 8D 36 04			sta MIDFILES.TEMPOSHIFT+2
  5774 A442 AD 37 04			lda MIDFILES.TEMPOSHIFT+3
  5775 A445 69 00			adc #$00
  5776 A447 8D 37 04			sta MIDFILES.TEMPOSHIFT+3
  5777 A44A			l_1257
  5778
  5779 				; optimize OK (keyboard.inc), line = 91
  5780
  5781 A44A AD FC 02			lda KEYB
  5782 A44D C9 37			cmp #$37
  5783 A44F D0 21			jne l_126D
  5784 A451 AD 34 04			lda MIDFILES.TEMPOSHIFT
  5785 A454 38 E9 20			sub #$20
  5786 A457 8D 34 04			sta MIDFILES.TEMPOSHIFT
  5787 A45A AD 35 04			lda MIDFILES.TEMPOSHIFT+1
  5788 A45D E9 4E			sbc #$4E
  5789 A45F 8D 35 04			sta MIDFILES.TEMPOSHIFT+1
  5790 A462 AD 36 04			lda MIDFILES.TEMPOSHIFT+2
  5791 A465 E9 00			sbc #$00
  5792 A467 8D 36 04			sta MIDFILES.TEMPOSHIFT+2
  5793 A46A AD 37 04			lda MIDFILES.TEMPOSHIFT+3
  5794 A46D E9 00			sbc #$00
  5795 A46F 8D 37 04			sta MIDFILES.TEMPOSHIFT+3
  5796 A472			l_126D
  5797
  5798 				; optimize OK (keyboard.inc), line = 92
  5799
  5800 A472 AD FC 02			lda KEYB
  5801 A475 C9 34			cmp #$34
  5802 A477 D0 0E			jne l_1283
  5803 A479 A9 00			lda #$00
  5804 A47B 8D 34 04			sta MIDFILES.TEMPOSHIFT
  5805 A47E 8D 35 04			sta MIDFILES.TEMPOSHIFT+1
  5806 A481 8D 36 04			sta MIDFILES.TEMPOSHIFT+2
  5807 A484 8D 37 04			sta MIDFILES.TEMPOSHIFT+3
  5808 A487			l_1283
  5809
  5810 				; optimize FAIL ('MIDFILES.SETTEMPO', keyboard.inc), line = 93
  5811
  5812 A487 20 6B 8D			jsr MIDFILES.SETTEMPO
  5813 A48A			@exit
  5814 					.ifdef @new
  5815 					lda <@VarData
  5816 					sta :ztmp
  5817 					lda >@VarData
  5818 					ldy #@VarDataSize-1
  5819 					jmp @FreeMem
  5820 					els
  5821 A48A 60				rts						; ret
  5822 					eif
  5823 				.endl
  5824
  5825 A48B			.local	FILEACTION					; PROCEDURE
  5826
  5827 				; optimize FAIL ('CHOICELISTFILE', keyboard.inc), line = 98
  5828
  5829 A48B 20 18 A2			jsr CHOICELISTFILE
  5830 A48E AD 91 04			lda CHOICELISTFILE.RESULT
  5831 A491 F0 31			jeq l_1299
  5832
  5833 				; optimize OK (keyboard.inc), line = 101
  5834
  5835 A493 AD 8B 04			lda P_BANK
  5836 A496 C9 FE			cmp #$FE
  5837 A498 D0 06			jne l_12AC
  5838
  5839 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 103
  5840
  5841 A49A 20 47 A1			jsr DRAWLISTSELECTION
  5842
  5843 				; optimize FAIL ('INIT_INPUTLINE', keyboard.inc), line = 104
  5844
  5845 A49D 20 48 A0			jsr INIT_INPUTLINE
  5846 A4A0			l_12AC
  5847
  5848 				; optimize OK (keyboard.inc), line = 106
  5849
  5850 A4A0 AD 8B 04			lda P_BANK
  5851 A4A3 C9 FF			cmp #$FF
  5852 A4A5 D0 1D			jne l_12C3
  5853
  5854 				; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 108
  5855
  5856 A4A7 20 98 9B			jsr STATUSSTOPPED
  5857
  5858 				; optimize OK (keyboard.inc), line = 109
  5859
  5860 A4AA AD A3 A9			lda OUTSTR
  5861 A4AD 8D 82 04			sta LOADSONG.FILENAME
  5862 A4B0 AD A4 A9			lda OUTSTR+1
  5863 A4B3 8D 83 04			sta LOADSONG.FILENAME+1
  5864 A4B6 20 C5 9C			jsr LOADSONG
  5865 A4B9 AD 84 04			lda LOADSONG.RESULT
  5866 A4BC 8D 07 04			sta SYSTEM.IORESULT
  5867
  5868 				; optimize OK (keyboard.inc), line = 110
  5869
  5870 A4BF A9 02			lda #$02
  5871 A4C1 8D 6D 04			sta STATEINPUTLINE
  5872 A4C4			l_12C3
  5873 A4C4			l_1299
  5874
  5875 				; optimize OK (keyboard.inc), line = 113
  5876
  5877 A4C4 AD 6D 04			lda STATEINPUTLINE
  5878 A4C7 C9 02			cmp #$02
  5879 A4C9 F0 03 4C 65 A5		jne l_12E5
  5880
  5881 				; optimize OK (keyboard.inc), line = 115
  5882
  5883 A4CE AD 8B 04			lda P_BANK
  5884 A4D1 C9 FE			cmp #$FE
  5885 A4D3 D0 74			jne l_12F8
  5886
  5887 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 117
  5888
  5889 A4D5 20 47 A1			jsr DRAWLISTSELECTION
  5890
  5891 				; optimize OK (keyboard.inc), line = 118
  5892
  5893 A4D8 AD 6C 04			lda RESULTINPUTLINE
  5894 A4DB F0 6C			jeq l_1306
  5895
  5896 				; optimize OK (keyboard.inc), line = 120
  5897
  5898 A4DD AD A3 A9			lda OUTSTR
  5899 A4E0 85 88			sta @move.src
  5900 A4E2 AD A4 A9			lda OUTSTR+1
  5901 A4E5 85 89			sta @move.src+1
  5902 					@moveSTRING FN #128
  5902 				 MWA FN @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  5902 A4E7 AD A1 A9 85 8C AD +  MWA FN @MOVE.DST
  5902 A4F1 A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  5902 A4F9 20 7B 82		 JSR @MOVESTRING
  5903
  5904 				; optimize OK (keyboard.inc), line = 121
  5905
  5906 A4FC AD A3 A9			lda OUTSTR
  5907 A4FF 85 88			sta GETDEVICESPEC.FN
  5908 A501 AD A4 A9			lda OUTSTR+1
  5909 A504 85 89			sta GETDEVICESPEC.FN+1
  5910 A506 AD 9F A9			lda CURDEV
  5911 A509 85 8C			sta GETDEVICESPEC.SPEC
  5912 A50B AD A0 A9			lda CURDEV+1
  5913 A50E 85 8D			sta GETDEVICESPEC.SPEC+1
  5914 A510 20 C9 96			jsr GETDEVICESPEC
  5915 A513 A5 90			lda GETDEVICESPEC.RESULT
  5916 A515 D0 17			jne l_131A
  5917 A517 AD 9F A9			lda CURDEV
  5918 A51A 85 88			sta JOINSTRINGS.S1
  5919 A51C AD A0 A9			lda CURDEV+1
  5920 A51F 85 89			sta JOINSTRINGS.S1+1
  5921 A521 AD A1 A9			lda FN
  5922 A524 85 8C			sta JOINSTRINGS.S2
  5923 A526 AD A2 A9			lda FN+1
  5924 A529 85 8D			sta JOINSTRINGS.S2+1
  5925 A52B 20 ED 96			jsr JOINSTRINGS
  5926 A52E			l_131A
  5927
  5928 				; optimize OK (keyboard.inc), line = 122
  5929
  5930 A52E AD A3 A9			lda OUTSTR
  5931 A531 8D 88 04			sta FILESELECT.PATH
  5932 A534 AD A4 A9			lda OUTSTR+1
  5933 A537 8D 89 04			sta FILESELECT.PATH+1
  5934 A53A 20 EA 9E			jsr FILESELECT
  5935 A53D AD 8A 04			lda FILESELECT.RESULT
  5936 A540 8D 07 04			sta SYSTEM.IORESULT
  5937
  5938 				; optimize OK (keyboard.inc), line = 123
  5939
  5940 A543 A5 4A			lda PLAYERSTATUS
  5941 A545 09 80			ora #$80
  5942 A547 85 4A			sta PLAYERSTATUS
  5943 A549			l_1306
  5944 A549			l_12F8
  5945
  5946 				; optimize OK (keyboard.inc), line = 126
  5947
  5948 A549 AD 07 04			lda SYSTEM.IORESULT
  5949 A54C 29 FC			and #$FC
  5950 A54E F0 06			jeq l_134C
  5951 A550 AD 07 04			lda SYSTEM.IORESULT
  5952 A553 20 41 9C			jsr STATUSERROR
  5953 A556			l_134C
  5954
  5955 				; optimize OK (keyboard.inc), line = 127
  5956
  5957 A556 AD 8B 04			lda P_BANK
  5958 A559 C9 FF			cmp #$FF
  5959 A55B D0 03			jne l_1365
  5960 A55D 20 FD 9A			jsr STATUSPLAYING
  5961 A560			l_1365
  5962
  5963 				; optimize OK (keyboard.inc), line = 128
  5964
  5965 A560 A9 00			lda #$00
  5966 A562 8D 6D 04			sta STATEINPUTLINE
  5967 A565			l_12E5
  5968 A565			@exit
  5969 					.ifdef @new
  5970 					lda <@VarData
  5971 					sta :ztmp
  5972 					lda >@VarData
  5973 					ldy #@VarDataSize-1
  5974 					jmp @FreeMem
  5975 					els
  5976 A565 60				rts						; ret
  5977 					eif
  5978 				.endl
  5979
  5980 A566			.local	AUTOSTOPANDSONGCHANGE				; PROCEDURE
  5981
  5982 				; optimize OK (autostop_songchange.inc), line = 3
  5983
  5984 A566 A5 4A			lda PLAYERSTATUS
  5985 A568 29 40			and #$40
  5986 A56A F0 03 4C 25 A6		jne l_1395
  5987 A56F A5 DF			lda MIDFILES.PLAYINGTRACKS
  5988 A571 F0 03 4C 25 A6		jne l_1395
  5989
  5990 				; optimize OK (autostop_songchange.inc), line = 5
  5991
  5992 A576 A5 4A			lda PLAYERSTATUS
  5993 A578 29 0C			and #$0C
  5994 A57A 85 D7			sta V
  5995
  5996 				; optimize FAIL ('STATUSSTOPPED', autostop_songchange.inc), line = 6
  5997
  5998 A57C 20 98 9B			jsr STATUSSTOPPED
  5999
  6000 				; optimize OK (autostop_songchange.inc), line = 7
  6001
  6002 A57F A5 D7			lda V
  6003 A581 D0 03 4C 25 A6		jeq l_13B3
  6004
  6005 				; optimize OK (autostop_songchange.inc), line = 9
  6006
  6007 A586 38 E9 05			sub #$05
  6008 A589 50 02			svc
  6009 A58B 49 80			eor #$80
  6010 A58D 10 03 4C 1D A6		jmi l_13C6
  6011
  6012 				; --- RepeatUntilProlog
  6013 A592			l_13C8
  6014
  6015 				; optimize OK (autostop_songchange.inc), line = 13
  6016
  6017 A592 A5 D7			lda V
  6018 A594 C9 0C			cmp #$0C
  6019 A596 D0 0F			jne l_13DA
  6020
  6021 				; optimize OK (autostop_songchange.inc), line = 14
  6022
  6023 A598 AD 5E 04			lda TOTALFILES
  6024 A59B 20 DD 88			jsr SYSTEM.RANDOM_0183
  6025 A59E AD 0C 04			lda SYSTEM.RANDOM_0183.RESULT
  6026 A5A1 8D 5F 04			sta CURPLAY
  6027 A5A4 4C C8 A5			jmp l_13EB
  6028 A5A7			l_13DA
  6029
  6030 				; optimize OK (autostop_songchange.inc), line = 17
  6031
  6032 A5A7 AD 5F 04			lda CURPLAY
  6033 A5AA 18 6D 60 04			add PLAYDIR
  6034 A5AE 8D 5F 04			sta CURPLAY
  6035
  6036 				; optimize OK (autostop_songchange.inc), line = 18
  6037
  6038 A5B1 C9 01			cmp #$01
  6039 A5B3 D0 06			jne l_1400
  6040 A5B5 AD 5E 04			lda TOTALFILES
  6041 A5B8 8D 5F 04			sta CURPLAY
  6042 A5BB			l_1400
  6043
  6044 				; optimize OK (autostop_songchange.inc), line = 19
  6045
  6046 A5BB AD 5F 04			lda CURPLAY
  6047 A5BE CD 5E 04			cmp TOTALFILES
  6048 A5C1 D0 05			jne l_141D
  6049 A5C3 A9 01			lda #$01
  6050 A5C5 8D 5F 04			sta CURPLAY
  6051 A5C8			l_141D
  6052 A5C8			l_13EB
  6053
  6054 				; optimize OK (autostop_songchange.inc), line = 21
  6055
  6056 A5C8 AD 5F 04			lda CURPLAY
  6057 A5CB 8D 5D 04			sta CURFILE
  6058
  6059 				; optimize FAIL ('CHOICELISTFILE', autostop_songchange.inc), line = 22
  6060
  6061 A5CE 20 18 A2			jsr CHOICELISTFILE
  6062 A5D1 AD 91 04 95 95		mva CHOICELISTFILE.RESULT :STACKORIGIN+1,x
  6063
  6064 				; optimize OK (autostop_songchange.inc), line = 23
  6065
  6066 A5D6 AD 8B 04			lda P_BANK
  6067 A5D9 C9 FF			cmp #$FF
  6068 A5DB D0 18			jne l_143D
  6069
  6070 				; optimize OK (autostop_songchange.inc), line = 24
  6071
  6072 A5DD AD A3 A9			lda OUTSTR
  6073 A5E0 8D 82 04			sta LOADSONG.FILENAME
  6074 A5E3 AD A4 A9			lda OUTSTR+1
  6075 A5E6 8D 83 04			sta LOADSONG.FILENAME+1
  6076 A5E9 20 C5 9C			jsr LOADSONG
  6077 A5EC AD 84 04			lda LOADSONG.RESULT
  6078 A5EF 8D 07 04			sta SYSTEM.IORESULT
  6079 A5F2 4C F8 A5			jmp l_144D
  6080 A5F5			l_143D
  6081 A5F5 4C 05 A6			jmp c_13C8					; continue
  6082 A5F8			l_144D
  6083
  6084 				; optimize OK (autostop_songchange.inc), line = 27
  6085
  6086 A5F8 A0 01			ldy #1
  6087 A5FA AD 07 04			lda SYSTEM.IORESULT
  6088 A5FD C9 01			cmp #$01
  6089 A5FF D0 01			bne @+
  6090 A601 88				dey
  6091 				@
  6092 A602 98				tya
  6093 A603 D0 03			bne *+5
  6094 A605			c_13C8
  6095 A605 4C 92 A5			jmp l_13C8
  6096
  6097 				; optimize FAIL ('CLEARSTATUS', autostop_songchange.inc), line = 28
  6098
  6099 A608 20 F4 99			jsr CLEARSTATUS
  6100
  6101 				; optimize OK (autostop_songchange.inc), line = 29
  6102
  6103 A60B AD 07 04			lda SYSTEM.IORESULT
  6104 A60E 29 FC			and #$FC
  6105 A610 F0 06			jeq l_1471
  6106 A612 AD 07 04			lda SYSTEM.IORESULT
  6107 A615 20 41 9C			jsr STATUSERROR
  6108 A618			l_1471
  6109
  6110 				; optimize OK (autostop_songchange.inc), line = 30
  6111
  6112 A618 A9 01			lda #$01
  6113 A61A 8D 60 04			sta PLAYDIR
  6114 A61D			l_13C6
  6115
  6116 				; optimize OK (autostop_songchange.inc), line = 32
  6117
  6118 A61D AD 19 04			lda MIDFILES.TOTALTRACKS
  6119 A620 F0 03			jeq l_1490
  6120 A622 20 FD 9A			jsr STATUSPLAYING
  6121 A625			l_1490
  6122 A625			l_13B3
  6123 A625			l_1395
  6124 A625			@exit
  6125 					.ifdef @new
  6126 					lda <@VarData
  6127 					sta :ztmp
  6128 					lda >@VarData
  6129 					ldy #@VarDataSize-1
  6130 					jmp @FreeMem
  6131 					els
  6132 A625 60				rts						; ret
  6133 					eif
  6134 				.endl
  6135
  6136 A626			.local	INIT						; PROCEDURE
  6137
  6138 A626 4C 5D A6			jmp l_149C
  6139
  6140 A629			.local	SETMCBASEADDRESS				; PROCEDURE | ASSEMBLER
  6141
  6142 				; -------------------  ASM Block 00000117  -------------------
  6143
  6144 A629			    icl 'asms/setMCBaseAddr.a65'
Source: setMCBaseAddr.a65
     1 				    .macro m@setMCBase name
     2 				      sty :name
     3 				      stx :name+1
     4 				    .endm
     5
     6 A629 8A 48		    txa:pha
     7
     8 A62B A4 D8		    ldy MCBaseAddr
     9 A62D A6 D9		    ldx MCBaseAddr+1
    10
    11 A62F			    m@setMCBase MAIN.MC6850.MC6850_INIT.MCBASESTATE
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A62F 8C FF 88		      sty MAIN.MC6850.MC6850_INIT.MCBASESTATE
     2 A632 8E 00 89		      stx MAIN.MC6850.MC6850_INIT.MCBASESTATE+1
Source: setMCBaseAddr.a65
    12 A635			    m@setMCBase MAIN.MC6850.MC6850_Send2.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A635 8C 03 89		      sty MAIN.MC6850.MC6850_SEND2.MCBASESTATE
     2 A638 8E 04 89		      stx MAIN.MC6850.MC6850_SEND2.MCBASESTATE+1
Source: setMCBaseAddr.a65
    13 A63B			    m@setMCBase MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A63B 8C 1D 89		      sty MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASESTATE
     2 A63E 8E 1E 89		      stx MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASESTATE+1
Source: setMCBaseAddr.a65
    14 A641			    m@setMCBase MAIN.MIDI_FIFO.FIFO_FLUSH.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A641 8C 4D 89		      sty MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASESTATE
     2 A644 8E 4E 89		      stx MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASESTATE+1
Source: setMCBaseAddr.a65
    15
    16 A647 C8			    iny
    17 A648			    m@setMCBase MAIN.MC6850.MC6850_Send2.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A648 8C 0C 89		      sty MAIN.MC6850.MC6850_SEND2.MCBASEBUF
     2 A64B 8E 0D 89		      stx MAIN.MC6850.MC6850_SEND2.MCBASEBUF+1
Source: setMCBaseAddr.a65
    18 A64E			    m@setMCBase MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A64E 8C 27 89		      sty MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASEBUF
     2 A651 8E 28 89		      stx MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASEBUF+1
Source: setMCBaseAddr.a65
    19 A654			    m@setMCBase MAIN.MIDI_FIFO.FIFO_FLUSH.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A654 8C 57 89		      sty MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASEBUF
     2 A657 8E 58 89		      stx MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASEBUF+1
Source: setMCBaseAddr.a65
    20
    21 A65A 68 AA		    pla:tax
  6145 				  
  6146 A65C			@exit
  6147 					.ifdef @new
  6148 					lda <@VarData
  6149 					sta :ztmp
  6150 					lda >@VarData
  6151 					ldy #@VarDataSize-1
  6152 					jmp @FreeMem
  6153 					els
  6154 A65C 60				rts						; ret
  6155 					eif
  6156 				.endl
  6157 A65D			l_149C
  6158
  6159 				; optimize OK (init.inc), line = 10
  6160
  6161 A65D A9 00			lda #$00
  6162 A65F 8D 00 D4			sta DMACTL
  6163
  6164 				; -------------------  ASM Block 00000118  -------------------
  6165
  6166 A662 A5 14		    lda $14
  6167 A664 C5 14		    cmp $14
  6168 A666 F0 FC		    beq *-2
  6169 				  
  6170 				; optimize FAIL ('SETMCBASEADDRESS', init.inc), line = 17
  6171
  6172 A668 20 29 A6			jsr SETMCBASEADDRESS
  6173
  6174 				; optimize OK (init.inc), line = 20
  6175
  6176 A66B A9 03			lda #$03
  6177 A66D 20 F8 88			jsr MC6850.MC6850_INIT
  6178
  6179 				; optimize OK (init.inc), line = 21
  6180
  6181 A670 A9 16			lda #$16
  6182 A672 20 F8 88			jsr MC6850.MC6850_INIT
  6183
  6184 				; optimize OK (init.inc), line = 23
  6185
  6186 A675 A9 32			lda #$32
  6187 A677 8D F4 02			sta CHBASE
  6188
  6189 				; optimize OK (init.inc), line = 24
  6190
  6191 A67A A9 AC			lda #$AC
  6192 A67C 8D 30 02			sta SDLST
  6193 A67F A9 3F			lda #$3F
  6194 A681 8D 31 02			sta SDLST+1
  6195
  6196 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', init.inc), line = 26
  6197
  6198 A684 20 0F 89			jsr MIDI_FIFO.FIFO_RESET
  6199 A687 A0 FD			ldy #256-3
  6200 A689 B9 F5 7F 99 67 03 + 	mva:rne CODEORIGIN+$00F2+3-256,y adr.CURDEV+3-256,y+
  6201 A692 A9 00 8D 00 05		mva #$00 adr.FN
  6202
  6203 				; optimize FAIL ('CLEARWORKAREA', init.inc), line = 31
  6204
  6205 A697 20 2D 96			jsr CLEARWORKAREA
  6206
  6207 				; optimize FAIL ('CLEARSTATUS', init.inc), line = 32
  6208
  6209 A69A 20 F4 99			jsr CLEARSTATUS
  6210
  6211 				; optimize OK (init.inc), line = 33
  6212
  6213 A69D A9 90			lda #$90
  6214 A69F 85 D4			sta SCRADR
  6215 A6A1 A9 3A			lda #$3A
  6216 A6A3 85 D5			sta SCRADR+1
  6217 A6A5 20 23 96			jsr HLINE
  6218
  6219 				; optimize OK (init.inc), line = 34
  6220
  6221 A6A8 A9 91			lda #$91
  6222 A6AA 85 D4			sta SCRADR
  6223 A6AC A9 3A			lda #$3A
  6224 A6AE 85 D5			sta SCRADR+1
  6225 A6B0 A9 F6			lda #$F6
  6226 A6B2 85 88			sta PUTINTTEXT.S
  6227 A6B4 A9 80			lda #$80
  6228 A6B6 85 89			sta PUTINTTEXT.S+1
  6229 A6B8 20 DF 94			jsr PUTINTTEXT
  6230
  6231 				; optimize OK (init.inc), line = 35
  6232
  6233 A6BB A9 AE			lda #$AE
  6234 A6BD 85 D4			sta SCRADR
  6235 A6BF A9 3A			lda #$3A
  6236 A6C1 85 D5			sta SCRADR+1
  6237 A6C3 A9 00			lda #$00
  6238 A6C5 85 88			sta PUTINTTEXT.S
  6239 A6C7 A9 81			lda #$81
  6240 A6C9 85 89			sta PUTINTTEXT.S+1
  6241 A6CB 20 DF 94			jsr PUTINTTEXT
  6242
  6243 				; optimize OK (init.inc), line = 37
  6244
  6245 A6CE A9 00			lda #$00
  6246 A6D0 8D 91 94			sta MIDFILES.MIDTRACKS
  6247 A6D3 A9 2E			lda #$2E
  6248 A6D5 8D 92 94			sta MIDFILES.MIDTRACKS+1
  6249
  6250 				; optimize FAIL ('RESETMEMORYPTR', init.inc), line = 45
  6251
  6252 A6D8 20 E5 98			jsr RESETMEMORYPTR
  6253
  6254 				; optimize OK (init.inc), line = 46
  6255
  6256 A6DB A5 14			lda _TM
  6257 A6DD 85 13			sta OTM
  6258
  6259 				; optimize FAIL ('SETCOLORS', init.inc), line = 47
  6260
  6261 A6DF 20 97 94			jsr SETCOLORS
  6262 A6E2 A9 22			lda #$22
  6263 A6E4 8D 00 D4			sta DMACTL
  6264 A6E7 A9 00			lda #$00
  6265 A6E9 85 41			sta SOUNDR
  6266 A6EB A9 01			lda #$01
  6267 A6ED 8D 60 04			sta PLAYDIR
  6268
  6269 				; optimize OK (init.inc), line = 48
  6270
  6271 A6F0 A5 4A			lda PLAYERSTATUS
  6272 A6F2 29 0F			and #$0F
  6273 A6F4 09 40			ora #$40
  6274 A6F6 85 4A			sta PLAYERSTATUS
  6275
  6276 				; optimize OK (init.inc), line = 49
  6277
  6278 A6F8 A9 FF			lda #$FF
  6279 A6FA 85 1F			sta THI
  6280 A6FC A9 00			lda #$00
  6281 A6FE 8D DC 02			sta HLPFLG
  6282
  6283 				; optimize OK (init.inc), line = 50
  6284
  6285 A701 8D 6D 04			sta STATEINPUTLINE
  6286
  6287 				; optimize OK (init.inc), line = 51
  6288
  6289 A704 8D 6C 04			sta RESULTINPUTLINE
  6290
  6291 				; ------------------------------------------------------------
  6292
  6293 A707			@exit
  6294 					.ifdef @new
  6295 					lda <@VarData
  6296 					sta :ztmp
  6297 					lda >@VarData
  6298 					ldy #@VarDataSize-1
  6299 					jmp @FreeMem
  6300 					els
  6301 A707 60				rts						; ret
  6302 					eif
  6303 				.endl
  6304 A708			l_0117
  6305
  6306 				; optimize FAIL ('INIT', MIDICar Player.pas), line = 73
  6307
  6308 A708 20 26 A6			jsr INIT
  6309
  6310 				; optimize FAIL ('CLEARUVMETERS', MIDICar Player.pas), line = 74
  6311
  6312 A70B 20 5C 9A			jsr CLEARUVMETERS
  6313
  6314 				; optimize OK (MIDICar Player.pas), line = 83
  6315
  6316 A70E AD 9F A9			lda CURDEV
  6317 A711 85 88			sta JOINSTRINGS.S1
  6318 A713 AD A0 A9			lda CURDEV+1
  6319 A716 85 89			sta JOINSTRINGS.S1+1
  6320 A718 A9 0B			lda #$0B
  6321 A71A 85 8C			sta JOINSTRINGS.S2
  6322 A71C A9 81			lda #$81
  6323 A71E 85 8D			sta JOINSTRINGS.S2+1
  6324 A720 20 ED 96			jsr JOINSTRINGS
  6325
  6326 				; optimize OK (MIDICar Player.pas), line = 84
  6327
  6328 A723 A9 00			lda #$00
  6329 A725 20 33 9E			jsr GOTONENTRY
  6330
  6331 				; optimize OK (MIDICar Player.pas), line = 85
  6332
  6333 A728 A9 FF			lda #$FF
  6334 A72A 85 E2			sta MIDFILES._ADR
  6335 A72C 85 E3			sta MIDFILES._ADR+1
  6336 A72E A9 FE			lda #$FE
  6337 A730 85 E1			sta MIDFILES._BANK
  6338 A732 AD A3 A9			lda OUTSTR
  6339 A735 85 88			sta ADDTOLIST.ENTRY
  6340 A737 AD A4 A9			lda OUTSTR+1
  6341 A73A 85 89			sta ADDTOLIST.ENTRY+1
  6342 A73C 20 50 9E			jsr ADDTOLIST
  6343
  6344 				; optimize OK (MIDICar Player.pas), line = 86
  6345
  6346 A73F A9 00			lda #$00
  6347 A741 8D 5C 04			sta SHFILE
  6348 A744 8D 5B 04			sta YFILE
  6349 A747 8D 5D 04			sta CURFILE
  6350
  6351 				; optimize FAIL ('CHOICELISTFILE', MIDICar Player.pas), line = 87
  6352
  6353 A74A 20 18 A2			jsr CHOICELISTFILE
  6354 A74D AD 91 04 95 95		mva CHOICELISTFILE.RESULT :STACKORIGIN+1,x
  6355 A752 A9 02			lda #$02
  6356 A754 8D 6D 04			sta STATEINPUTLINE
  6357 A757 A9 01			lda #$01
  6358 A759 8D 6C 04			sta RESULTINPUTLINE
  6359 A75C A9 0C			lda #$0C
  6360 A75E 8D FC 02			sta KEYB
  6361
  6362 				; optimize FAIL ('SETNMI', MIDICar Player.pas), line = 90
  6363
  6364 A761 20 C6 97			jsr SETNMI
  6365
  6366 				; --- RepeatUntilProlog
  6367 A764			l_1527
  6368
  6369 				; optimize FAIL ('MIDFILES.PROCESSMIDI', MIDICar Player.pas), line = 94
  6370
  6371 A764 20 B4 91			jsr MIDFILES.PROCESSMIDI
  6372
  6373 				; optimize FAIL ('AUTOSTOPANDSONGCHANGE', MIDICar Player.pas), line = 95
  6374
  6375 A767 20 66 A5			jsr AUTOSTOPANDSONGCHANGE
  6376
  6377 				; optimize OK (MIDICar Player.pas), line = 97
  6378
  6379 A76A A5 14			lda _TM
  6380 A76C C5 13			cmp OTM
  6381 A76E D0 03 4C CF A8		jeq l_153D
  6382
  6383 				; optimize OK (MIDICar Player.pas), line = 99
  6384
  6385 A773 85 13			sta OTM
  6386
  6387 				; optimize OK (MIDICar Player.pas), line = 100
  6388
  6389 A775 A5 4A			lda PLAYERSTATUS
  6390 A777 10 0A			jpl l_155A
  6391
  6392 				; optimize OK (MIDICar Player.pas), line = 102
  6393
  6394 A779 49 80			eor #$80
  6395 A77B 85 4A			sta PLAYERSTATUS
  6396
  6397 				; optimize FAIL ('SHOWLIST', MIDICar Player.pas), line = 103
  6398
  6399 A77D 20 D2 A1			jsr SHOWLIST
  6400
  6401 				; optimize FAIL ('DRAWLISTSELECTION', MIDICar Player.pas), line = 104
  6402
  6403 A780 20 47 A1			jsr DRAWLISTSELECTION
  6404 A783			l_155A
  6405
  6406 				; optimize OK (MIDICar Player.pas), line = 106
  6407
  6408 A783 A5 F0			lda MIDFILES._TOTALTICKS
  6409 A785 85 88			sta COUNTER
  6410 A787 A5 F1			lda MIDFILES._TOTALTICKS+1
  6411 A789 85 89			sta COUNTER+1
  6412 A78B A5 F2			lda MIDFILES._TOTALTICKS+2
  6413 A78D 85 8A			sta COUNTER+2
  6414 A78F A5 F3			lda MIDFILES._TOTALTICKS+3
  6415 A791 85 8B			sta COUNTER+3
  6416
  6417 				; optimize FAIL ('divmulINT.DIV', MIDICar Player.pas), line = 107
  6418
  6419 A793 E8				inx
  6420 A794 A5 88 95 94			mva COUNTER :STACKORIGIN,x
  6421 A798 A5 89 95 A4			mva COUNTER+1 :STACKORIGIN+STACKWIDTH,x
  6422 A79C A5 8A 95 B4			mva COUNTER+2 :STACKORIGIN+STACKWIDTH*2,x
  6423 A7A0 A5 8B 95 C4			mva COUNTER+3 :STACKORIGIN+STACKWIDTH*3,x
  6424 A7A4 E8				inx
  6425 A7A5 A5 E9 95 94			mva MIDFILES._SONGTICKS :STACKORIGIN,x
  6426 A7A9 A5 EA 95 A4			mva MIDFILES._SONGTICKS+1 :STACKORIGIN+STACKWIDTH,x
  6427 A7AD A5 EB 95 B4			mva MIDFILES._SONGTICKS+2 :STACKORIGIN+STACKWIDTH*2,x
  6428 A7B1 A5 EC 95 C4			mva MIDFILES._SONGTICKS+3 :STACKORIGIN+STACKWIDTH*3,x
  6429 A7B5 20 9D 82			jsr divmulINT.DIV
  6430 A7B8 A9 01 95 94			mva #$01 :STACKORIGIN,x
  6431 A7BC A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6432 A7C0 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  6433 A7C4 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  6434 A7C8 B5 93			lda :STACKORIGIN-1,x
  6435 A7CA 38 F5 94			sub :STACKORIGIN,x
  6436 A7CD 85 D7			sta _V
  6437 A7CF CA				dex
  6438 A7D0 CA				dex
  6439
  6440 				; optimize OK (MIDICar Player.pas), line = 108
  6441
  6442 A7D1 A0 00			ldy #$00
  6443 A7D3 A5 D7			lda V
  6444 A7D5 10 01			spl
  6445 A7D7 88				dey
  6446 A7D8 84 AD			sty :STACKORIGIN+STACKWIDTH+9
  6447 A7DA 85 9D			sta :STACKORIGIN+9
  6448 A7DC A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  6449 A7DE C9 00			cmp #$00
  6450 A7E0 D0 06			bne @+
  6451 A7E2 A5 9D			lda :STACKORIGIN+9
  6452 A7E4 C9 FF			cmp #$FF
  6453 A7E6 F0 1C			jeq l_158D
  6454 				@
  6455
  6456 				; -------------------  ASM Block 00000119  -------------------
  6457
  6458 A7E8 8A			        txa
  6459 A7E9 8D FD A7		        sta oldx
  6460
  6461 A7EC A5 D7		        lda v
  6462 A7EE 29 03		        and #%11
  6463 A7F0 AA			        tax
  6464 A7F1 A5 D7		        lda v
  6465 A7F3 4A			        lsr @
  6466 A7F4 4A			        lsr @
  6467 A7F5 A8			        tay
  6468
  6469 A7F6 BD 00 A8		        lda progressData,x
  6470 A7F9 99 F4 3A		        sta screen_timeline,y
  6471
  6472 A7FC A9 00		        lda oldx:#00
  6473 A7FE 10 04		        bpl skipData ; always jump
  6474 A800			      progressData:
  6475 A800 40			        .byte %01000000
  6476 A801 50			        .byte %01010000
  6477 A802 54			        .byte %01010100
  6478 A803 55			        .byte %01010101
  6479 A804			      skipData:
  6480 				      
  6481 A804			l_158D
  6482
  6483 				; -------------------  ASM Block 00000120  -------------------
  6484
  6485 A804			        icl 'asms/24bin_6bcd.a65'
Source: 24bin_6bcd.a65
     1 A804			BINBCD24:
     2 A804 F8			        sed
     3 A805 A9 00		        lda #0
     4 A807 85 8C		        sta cntBCD+0
     5 A809 85 8D		        sta cntBCD+1
     6 A80B 85 8E		        sta cntBCD+2
     7
     8 A80D A2 04		        ldx #4
     9 A80F			loop:
    10 A80F 06 88		        asl counter+0
    11 A811 26 89		        rol counter+1
    12 A813 26 8A		        rol counter+2
    13 A815 CA			        dex
    14 A816 D0 F7		        bne loop
    15
    16 A818 A2 14		        ldx #20
    17 A81A			CNVBIT:
    18 A81A 06 88		        asl counter+0
    19 A81C 26 89		        rol counter+1
    20 A81E 26 8A		        rol counter+2
    21
    22 A820 A5 8C 65 8C 85 8C	        lda:adc:sta cntBCD+0
    23 A826 A5 8D 65 8D 85 8D	        lda:adc:sta cntBCD+1
    24 A82C A5 8E 65 8E 85 8E	        lda:adc:sta cntBCD+2
    25 A832			SKIP:
    26 A832 CA			        dex
    27 A833 D0 E5		        bne CNVBIT
    28 A835 D8			        cld
  6486 				      
  6487 				; optimize OK (MIDICar Player.pas), line = 141
  6488
  6489 A836 A9 C6			lda #$C6
  6490 A838 85 D4			sta SCRADR
  6491 A83A A9 3A			lda #$3A
  6492 A83C 85 D5			sta SCRADR+1
  6493 A83E A9 8C			lda <CNTBCD
  6494 A840 8D 70 04			sta PUTHEX.V
  6495 A843 A9 00			lda >CNTBCD
  6496 A845 8D 71 04			sta PUTHEX.V+1
  6497 A848 A9 06			lda #$06
  6498 A84A 8D 72 04			sta PUTHEX.N
  6499 A84D 20 39 95			jsr PUTHEX
  6500
  6501 				; -------------------  ASM Block 00000121  -------------------
  6502
  6503 A850			  icl 'asms/uvmeters.a65' 
Source: uvmeters.a65
     1 = 00D6			hlpptr = $D6
     2 A850 A5 4A		  lda playerStatus
     3 A852 29 02		  and #ps_view
     4 A854 D0 54		  bne dontUpdateUVMeter
     5
     6 A856			updateUVMeter:
     7 A856 8E A9 A8		  stx regx // txa:pha
     8
     9 A859 A9 12		  lda #<SCREEN_CHANNELS
    10 A85B 85 D4		  sta scradr
    11 A85D A9 38		  lda #>SCREEN_CHANNELS
    12 A85F 85 D5		  sta scradr+1
    13
    14 A861 A2 00		  ldx #0
    15 A863			uvmeterLoop:
    16 A863 BD 20 04		  lda MIDFILES.adr.CHNVOLUME,x
    17 A866 F0 30		  beq dontUpdate
    18
    19 A868 C9 04		  cmp #4
    20 A86A 10 04		  bpl decVol
    21 A86C A9 00		  lda #0
    22 A86E F0 03		  beq storeVol
    23 A870			decVol:
    24 A870 38 E9 04		  sub #4
    25 A873			storeVol:
    26 A873 9D 20 04		  sta MIDFILES.adr.CHNVOLUME,x
    27
    28 A876 4A			  lsr @
    29 A877 29 3C		  and #%00111100
    30
    31 A879 18 69 40		  add #<UVMETER_ADDR
    32 A87C 85 D6		  sta hlpptr
    33 A87E A9 3B		  lda #>UVMETER_ADDR
    34 A880 85 D7		  sta hlpptr+1
    35
    36 A882 A0 03		  ldy #3            //2
    37 A884 B1 D6		  lda (hlpptr),y    //5*
    38 A886 91 D4		  sta (scradr),y    //6
    39 A888 88			  dey               //2
    40 A889 B1 D6		  lda (hlpptr),y
    41 A88B 91 D4		  sta (scradr),y
    42 A88D 88			  dey
    43 A88E B1 D6		  lda (hlpptr),y
    44 A890 91 D4		  sta (scradr),y
    45 A892 88			  dey
    46 A893 B1 D6		  lda (hlpptr),y
    47 A895 91 D4		  sta (scradr),y
    48 A897 88			  dey
    49 				                    //15*+39*
    50
    51 A898			dontUpdate:
    52 A898 A5 D4		  lda scradr        //3
    53 A89A 18 69 28		  add #40           //4
    54 A89D 85 D4		  sta scradr        //3
    55 A89F 90 02 E6 D5		  scc:inc scradr+1  //2**+5
    56
    57 A8A3 E8			  inx
    58 A8A4 E0 10		  cpx #16
    59 A8A6 D0 BB		  bne uvmeterLoop
    60
    61 A8A8 A2 00		  ldx regx:#00 // pla:tax
    62 A8AA			dontUpdateUVMeter
  6504 				; optimize OK (MIDICar Player.pas), line = 144
  6505
  6506 A8AA AD 6D 04			lda STATEINPUTLINE
  6507 A8AD C9 01			cmp #$01
  6508 A8AF D0 1E			jne l_15A9
  6509
  6510 				; optimize OK (MIDICar Player.pas), line = 145
  6511
  6512 A8B1 A5 14			lda _TM
  6513 A8B3 38 E5 12			sub CTM
  6514 A8B6 C9 0A			cmp #$0A
  6515 A8B8 90 15			jcc l_15C2
  6516 A8BA F0 13			jeq l_15C2
  6517
  6518 				; optimize OK (MIDICar Player.pas), line = 147
  6519
  6520 A8BC A5 14			lda _TM
  6521 A8BE 85 12			sta CTM
  6522
  6523 				; optimize OK (MIDICar Player.pas), line = 148
  6524
  6525 A8C0 A0 01			ldy #1
  6526 A8C2 AD 6B 04			lda ILVCRS
  6527 A8C5 F0 01			beq @+
  6528 A8C7 88				dey
  6529 				@
  6530 A8C8 98				tya
  6531 A8C9 8D 6B 04			sta ILVCRS
  6532
  6533 				; optimize FAIL ('SHOW_INPUTLINE', MIDICar Player.pas), line = 149
  6534
  6535 A8CC 20 01 A0			jsr SHOW_INPUTLINE
  6536 A8CF			l_15C2
  6537 A8CF			l_15A9
  6538 A8CF			l_153D
  6539
  6540 				; optimize OK (MIDICar Player.pas), line = 154
  6541
  6542 A8CF AD FC 02			lda KEYB
  6543 A8D2 C9 FF			cmp #$FF
  6544 A8D4 D0 08			jne l_15F7x
  6545 A8D6 AD DC 02			lda HLPFLG
  6546 A8D9 D0 03 4C 7B A9		jeq l_15F7
  6547 A8DE			l_15F7x
  6548
  6549 				; optimize OK (MIDICar Player.pas), line = 156
  6550
  6551 A8DE A5 4A			lda PLAYERSTATUS
  6552 A8E0 29 20			and #$20
  6553 A8E2 F0 03			jeq l_160E
  6554 A8E4 20 8B 9A			jsr TOGGLEHELPSCREEN
  6555 A8E7			l_160E
  6556
  6557 				; optimize OK (MIDICar Player.pas), line = 157
  6558
  6559 A8E7 AD 6D 04			lda STATEINPUTLINE
  6560 A8EA C9 01			cmp #$01
  6561 A8EC D0 06			jne l_1624
  6562
  6563 				; optimize FAIL ('DO_INPUTLINE', MIDICar Player.pas), line = 159
  6564
  6565 A8EE 20 B0 A0			jsr DO_INPUTLINE
  6566 A8F1 4C 67 A9			jmp l_162F
  6567 A8F4			l_1624
  6568
  6569 				; optimize OK (MIDICar Player.pas), line = 161
  6570
  6571 A8F4 AD FC 02			lda KEYB
  6572 A8F7 C9 39			cmp #$39
  6573 A8F9 F0 07			jeq l_164Dx
  6574 A8FB AD DC 02			lda HLPFLG
  6575 A8FE C9 11			cmp #$11
  6576 A900 D0 06			jne l_164D
  6577 A902			l_164Dx
  6578
  6579 				; optimize FAIL ('TOGGLEHELPSCREEN', MIDICar Player.pas), line = 162
  6580
  6581 A902 20 8B 9A			jsr TOGGLEHELPSCREEN
  6582 A905 4C 52 A9			jmp l_1658
  6583 A908			l_164D
  6584 A908 AD FC 02			lda KEYB
  6585 A90B C9 1C			cmp #$1C
  6586 A90D D0 03			jne l_166A
  6587 A90F 4C 7E A9			jmp b_1527					; break
  6588 A912			l_166A
  6589
  6590 				; optimize OK (MIDICar Player.pas), line = 163
  6591
  6592 A912 AD FC 02			lda KEYB
  6593 A915 C9 21			cmp #$21
  6594 A917 D0 06			jne l_1686
  6595
  6596 				; optimize FAIL ('TOGGLEFILE', MIDICar Player.pas), line = 164
  6597
  6598 A919 20 A1 A2			jsr TOGGLEFILE
  6599 A91C 4C 52 A9			jmp l_1691
  6600 A91F			l_1686
  6601 A91F AD FC 02			lda KEYB
  6602 A922 C9 0E			cmp #$0E
  6603 A924 F0 04			jeq l_16AFx
  6604 A926 C9 0F			cmp #$0F
  6605 A928 D0 06			jne l_16AF
  6606 A92A			l_16AFx
  6607
  6608 				; optimize FAIL ('MOVEFILESELECTION', MIDICar Player.pas), line = 165
  6609
  6610 A92A 20 EB A2			jsr MOVEFILESELECTION
  6611 A92D 4C 52 A9			jmp l_16BA
  6612 A930			l_16AF
  6613 A930 AD FC 02			lda KEYB
  6614 A933 D0 06			jne l_16CC
  6615
  6616 				; optimize FAIL ('TOGGLELOOPMODE', MIDICar Player.pas), line = 166
  6617
  6618 A935 20 9D A3			jsr TOGGLELOOPMODE
  6619 A938 4C 52 A9			jmp l_16D7
  6620 A93B			l_16CC
  6621 A93B AD FC 02			lda KEYB
  6622 A93E C9 25			cmp #$25
  6623 A940 D0 06			jne l_16E9
  6624
  6625 				; optimize FAIL ('TOGGLEMETERS', MIDICar Player.pas), line = 167
  6626
  6627 A942 20 B2 A3			jsr TOGGLEMETERS
  6628 A945 4C 52 A9			jmp l_16F4
  6629 A948			l_16E9
  6630 A948 AD FC 02			lda KEYB
  6631 A94B C9 27			cmp #$27
  6632 A94D D0 03			jne l_1706
  6633 A94F 20 BC A3			jsr TOGGLESCREENCOLORS
  6634 A952			l_1706
  6635 A952			l_16F4
  6636 A952			l_16D7
  6637 A952			l_16BA
  6638 A952			l_1691
  6639 A952			l_1674
  6640 A952			l_1658
  6641
  6642 				; optimize FAIL ('PLAYERCONTROL', MIDICar Player.pas), line = 168
  6643
  6644 A952 20 C6 A3			jsr PLAYERCONTROL
  6645
  6646 				; optimize OK (MIDICar Player.pas), line = 169
  6647
  6648 A955 AD FC 02			lda KEYB
  6649 A958 C9 36			cmp #$36
  6650 A95A F0 08			jeq l_1735x
  6651 A95C C9 37			cmp #$37
  6652 A95E F0 04			jeq l_1735x
  6653 A960 C9 34			cmp #$34
  6654 A962 D0 03			jne l_1735
  6655 A964			l_1735x
  6656 A964 20 22 A4			jsr TEMPOCONTROL
  6657 A967			l_1735
  6658 A967			l_162F
  6659
  6660 				; optimize OK (MIDICar Player.pas), line = 172
  6661
  6662 A967 AD FC 02			lda KEYB
  6663 A96A C9 0C			cmp #$0C
  6664 A96C D0 03			jne l_174B
  6665 A96E 20 8B A4			jsr FILEACTION
  6666 A971			l_174B
  6667
  6668 				; optimize OK (MIDICar Player.pas), line = 174
  6669
  6670 A971 A9 FF			lda #$FF
  6671 A973 8D FC 02			sta KEYB
  6672
  6673 				; optimize OK (MIDICar Player.pas), line = 175
  6674
  6675 A976 A9 00			lda #$00
  6676 A978 8D DC 02			sta HLPFLG
  6677 A97B			l_15F7
  6678
  6679 				; optimize OK (MIDICar Player.pas), line = 178
  6680
  6681 A97B 4C 64 A7			jmp l_1527
  6682 A97E			b_1527
  6683
  6684 				; optimize FAIL ('UNSETNMI', MIDICar Player.pas), line = 181
  6685
  6686 A97E 20 12 98			jsr UNSETNMI
  6687
  6688 				; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 183
  6689
  6690 A981 20 B2 9A			jsr EXIT2DOS
  6691
  6692 				; ------------------------------------------------------------
  6693
  6694 = 3000			CHARS_ADDR	= $3000
  6695 = 3400			SCREEN_ADDR	= $3400
  6696 = 3400			SCREEN_HEAD	= $3400
  6697 = 36F8			SCREEN_FOOT	= $36F8
  6698 = 37E8			SCREEN_WORK	= $37E8
  6699 = 3AB8			SCREEN_TIME	= $3AB8
  6700 = 3ACC			SCREEN_STATUS	= $3ACC
  6701 = 3AF4			SCREEN_TIMELINE	= $3AF4
  6702 = 3B40			UVMETER_ADDR	= $3B40
  6703 = 3B80			SCREEN_ADRSES	= $3B80
  6704 = 3BA0			HELPSCR_ADDR	= $3BA0
  6705 = 3FAC			DLIST_ADDR	= $3FAC
  6706 = 3812			SCREEN_CHANNELS	= $3812
  6707 = 2000			PLAYLIST_ADDR	= $2000
  6708 = 2C00			START_INFO_ADDR	= $2C00
  6709 = 2E00			TRACK_DATA_ADDR	= $2E00
  6710 = 4000			MIDI_DATA_ADDR	= $4000
  6711 = 8D00			FREE_MEM	= $8D00
  6712 = 0020			F_CLEAR	= $20
  6713 = 0001			PS_COLORSET	= $01
  6714 = 0002			PS_VIEW	= $02
  6715 = 000C			PS_LOOP	= $0C
  6716 = 0000			PS_PLAYONCE	= $00
  6717 = 0004			PS_REPEATONE	= $04
  6718 = 0008			PS_REPEATALL	= $08
  6719 = 000C			PS_SHUFFLE	= $0C
  6720 = 0080			PS_ISREFRESH	= $80
  6721 = 0040			PS_ISSTOPPED	= $40
  6722 = 0020			PS_ISHELP	= $20
  6723 = 001E			LIST_VISIBLE_CHARS	= $1E
  6724 = 0010			LIST_VISIBLE_ITEMS	= $10
  6725 = A4A9B200		FE_DIR	= $A4A9B200
  6726 = 4D494400		FE_MID	= $4D494400
  6727 = 004A			PLAYERSTATUS	= $4A
  6728 = 004B			TOTALXMS	= $4B
  6729 = 00D4			SCRADR	= $D4
  6730 = 00D8			MCBASEADDR	= $D8
  6731 = 0014			_TM	= $14
  6732 = 0013			OTM	= $13
  6733 = 0012			CTM	= $12
  6734 = 00D6			CHN	= $D6
  6735 = 00D7			V	= $D7
  6736 = 00D7			_V	= $D7
  6737 = 0457			MEMAVAILABLE	= DATAORIGIN+$0057
  6738 = 00DA			FILELIST	= $DA
  6739 = 045B			YFILE	= DATAORIGIN+$005B
  6740 = 045C			SHFILE	= DATAORIGIN+$005C
  6741 = 045D			CURFILE	= DATAORIGIN+$005D
  6742 = 045E			TOTALFILES	= DATAORIGIN+$005E
  6743 = 045F			CURPLAY	= DATAORIGIN+$005F
  6744 = 0460			PLAYDIR	= DATAORIGIN+$0060
  6745 = 0461			LAST_BANK	= DATAORIGIN+$0061
  6746 = 0462			LAST_ADR	= DATAORIGIN+$0062
  6747 = 3B80			adr.LISTSCRADR	= $3B80
  6748 A984			.var LISTSCRADR	= adr.LISTSCRADR .word
  6749 = 0464			adr.CURDEV	= [DATAORIGIN+$0064] .array [4]
  6750 A984			.var CURDEV	= adr.CURDEV .word
  6751 = 0500			adr.FN	= $0500
  6752 A984			.var FN	= adr.FN .word
  6753 = 0580			adr.OUTSTR	= $0580
  6754 A984			.var OUTSTR	= adr.OUTSTR .word
  6755 = 00D6			ILCH	= $D6
  6756 = 0468			ILPOS	= DATAORIGIN+$0068
  6757 = 0469			ILSCRADR	= DATAORIGIN+$0069
  6758 = 046B			ILVCRS	= DATAORIGIN+$006B
  6759 = 046C			RESULTINPUTLINE	= DATAORIGIN+$006C
  6760 = 046D			STATEINPUTLINE	= DATAORIGIN+$006D
  6761 = 0088			COUNTER	= $88
  6762 = 008C			CNTBCD	= $8C
  6763 = 8110			adr.COLORS	= CODEORIGIN+$0110
  6764 A984			.var COLORS	= adr.COLORS .word
  6765 = 046E			PUTTEXTINVERT	= DATAORIGIN+$006E
  6766 = 046F			SDMACTL	= DATAORIGIN+$006F
  6767 = D400			DMACTL	= $D400
  6768 = 0230			SDLST	= $0230
  6769 = 02F4			CHBASE	= $02F4
  6770 = 0222			VVBLKI	= $0222
  6771 = D40E			NMIEN	= $D40E
  6772 = FFFA			NMIVEC	= $FFFA
  6773 = 0475			OLDVVBLKI	= DATAORIGIN+$0075
  6774 = 0477			OLDNMIVEC	= DATAORIGIN+$0077
  6775 = 001F			THI	= $1F
  6776 = 0000			K_L	= $00
  6777 = 0006			K_LEFT	= $06
  6778 = 0007			K_RIGHT	= $07
  6779 = 000A			K_P	= $0A
  6780 = 000C			K_RETURN	= $0C
  6781 = 000E			K_UP	= $0E
  6782 = 000F			K_DOWN	= $0F
  6783 = 0010			K_V	= $10
  6784 = 0011			K_HELP	= $11
  6785 = 0012			K_C	= $12
  6786 = 0015			K_B	= $15
  6787 = 0016			K_X	= $16
  6788 = 0017			K_Z	= $17
  6789 = 001C			K_ESC	= $1C
  6790 = 0021			K_SPACE	= $21
  6791 = 0025			K_M	= $25
  6792 = 0027			K_INVERS	= $27
  6793 = 002C			K_TAB	= $2C
  6794 = 0034			K_DELETE	= $34
  6795 = 0036			K_CLEAR	= $36
  6796 = 0037			K_INSERT	= $37
  6797 = 0039			K_H	= $39
  6798 = 003C			K_CAPS	= $3C
  6799 = 003E			K_S	= $3E
  6800 = 02FC			KEYB	= $02FC
  6801 = 02DC			HLPFLG	= $02DC
  6802 = 0041			SOUNDR	= $41
  6803 = 048B			P_BANK	= DATAORIGIN+$008B
  6804 = 048C			P_ADR	= DATAORIGIN+$008C
  6805 A984			@exit
  6806
  6807 A984 A2 00		@halt	ldx #$00
  6808 A986 9A				txs
  6809 					.ifdef MAIN.@DEFINES.ROMOFF
  6810 A987 EE 01 D3			inc portb
  6811 					.fi
  6812
  6813 A98A A0 01			ldy #$01
  6814
  6815 A98C 60				rts
  6816
  6817 				; ------------------------------------------------------------
  6818
  6819 A98D 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  6820
  6821 				; ------------------------------------------------------------
  6822
  6823 A99D			.local	@DEFINES
  6824 A99D			ATARI
  6825 A99D			USE_FIFO
  6826 A99D			ROMOFF
  6827 				.endl
  6828
  6829 A99D			.local	@RESOURCE
  6830 				.endl
  6831
  6832 = A99D 80 3B		LISTSCRADR
  6832 = A99F 64 04		CURDEV
  6832 = A9A1 00 05		FN
  6832 = A9A3 80 05		OUTSTR
  6832 = A9A5 10 81		COLORS
  6832 				.endl							; MAIN
  6833
  6834 				; ------------------------------------------------------------
  6835 				; ------------------------------------------------------------
  6836
  6837 				.macro	UNITINITIALIZATION
  6838 				
  6839 					.ifdef MAIN.SYSTEM.@UnitInit
  6840 					jsr MAIN.SYSTEM.@UnitInit
  6841 					.fi
  6842 				
  6843 					.ifdef MAIN.MC6850.@UnitInit
  6844 					jsr MAIN.MC6850.@UnitInit
  6845 					.fi
  6846 				
  6847 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  6848 					jsr MAIN.MIDI_FIFO.@UnitInit
  6849 					.fi
  6850 				
  6851 					.ifdef MAIN.CIO.@UnitInit
  6852 					jsr MAIN.CIO.@UnitInit
  6853 					.fi
  6854 				
  6855 					.ifdef MAIN.MIDFILES.@UnitInit
  6856 					jsr MAIN.MIDFILES.@UnitInit
  6857 					.fi
  6858 				
  6859 					.ifdef MAIN.MISC.@UnitInit
  6860 					jsr MAIN.MISC.@UnitInit
  6861 					.fi
  6862 				.endm
  6863
  6864 				; ------------------------------------------------------------
  6865
  6866 					ift .SIZEOF(MAIN.SYSTEM) > 0
  6867 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  6867 				SYSTEM: $88A3..$88F7
  6868 					eif
  6869
  6870 					ift .SIZEOF(MAIN.MC6850) > 0
  6871 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  6871 				MC6850: $88F8..$890E
  6872 					eif
  6873
  6874 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  6875 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  6875 				MIDI_FIFO: $890F..$8962
  6876 					eif
  6877
  6878 					ift .SIZEOF(MAIN.CIO) > 0
  6879 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  6879 				CIO: $8963..$89F2
  6880 					eif
  6881
  6882 					ift .SIZEOF(MAIN.MIDFILES) > 0
  6883 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  6883 				MIDFILES: $89F3..$9494
  6884 					eif
  6885
  6886 					ift .SIZEOF(MAIN.MISC) > 0
  6887 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  6887 				MISC: $9495..$9496
  6888 					eif
  6889
  6890 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  6890 				CODE: $8000..$A99C
  6891
  6892 				; ------------------------------------------------------------
  6893
  6894 					org $0400
  6895
  6896 0400			DATAORIGIN
  6897 0400-0405> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  6898
  6899 = 0006			VARINITSIZE	= *-DATAORIGIN
  6900 = 0096			VARDATASIZE	= 150
  6901
  6902 = 0496			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  6903
  6904 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  6904 				DATA: $0400..$0496
  6905
  6906 02E0-02E1> 09 88			run START
  6907
  6908 				; ------------------------------------------------------------
  6909
  6910 				.macro	STATICDATA
  6911 				.by  $00 $00 $02 $2B $22 $00 $05 $FB  $00 $FC $00 $FD $00 $02 $45 $3A  $00 $02 $00 $00 $00 $02 $7E $7F
  6912 				.by  $00 $02 $5C $5D $00 $02 $5E $5F  $00 $05 $3B $00 $FC $00 $FD $00  $09 $4E $B0 $EC $E1 $F9 $E9 $EE
  6913 				.by  $E7 $CE $00 $09 $4E $AE $EF $80  $F3 $EF $EE $E7 $CE $00 $05 $FB  $00 $3C $00 $FD $00 $09 $4E $80
  6914 				.by  $B0 $E1 $F5 $F3 $E5 $80 $CE $00  $05 $FB $00 $FC $00 $3D $00 $09  $4E $B3 $F4 $EF $F0 $F0 $E5 $E4
  6915 				.by  $CE $00 $09 $4E $AC $EF $E1 $E4  $E9 $EE $E7 $80 $00 $14 $4E $A3  $E1 $EC $E3 $F5 $EC $E1 $F4 $E9
  6916 				.by  $EE $E7 $80 $EC $E5 $EE $E7 $F4  $E8 $CE $00 $13 $4E $B2 $E5 $E1  $E4 $E9 $EE $E7 $80 $E4 $E9 $F2
  6917 				.by  $E5 $E3 $F4 $EF $F2 $F9 $CE $00  $14 $4E $B5 $EE $F3 $F5 $F0 $F0  $EF $F2 $F4 $E5 $E4 $80 $E6 $EF
  6918 				.by  $F2 $ED $E1 $F4 $CE $00 $14 $4E  $AE $EF $F4 $80 $E5 $EE $EF $F5  $E7 $E8 $F4 $80 $ED $E5 $ED $EF
  6919 				.by  $F2 $F9 $CE $00 $11 $4E $AE $EF  $F4 $80 $E1 $80 $AD $A9 $A4 $A9  $80 $E6 $E9 $EC $E5 $CE $00 $0C
  6920 				.by  $4E $A9 $8F $AF $80 $A5 $F2 $F2  $EF $F2 $80 $83 $00 $0B $4E $A4  $E9 $F2 $E5 $E3 $F4 $EF $F2 $F9
  6921 				.by  $CE $00 $02 $44 $3A $00 $08 $4E  $B3 $F4 $E1 $F4 $F5 $F3 $CE $00  $09 $4E $A3 $EF $F5 $EE $F4 $E5
  6922 				.by  $F2 $CE $00 $03 $2A $2E $2A $00  $A8 $00 $0A $08 $0A $A8 $0A $00  $02 $00 $11 $80 $15 $80 $19 $80
  6923 				.by  $1D $80
  6924 				.endm
  6925
  6926 					end
