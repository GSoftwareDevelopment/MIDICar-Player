mads 2.1.6
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 8000			CODEORIGIN	= $8000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				.local	RESOURCE
   105 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1142 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 8075				RCDATA 'resources/font_blk.fnt' CHARS_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('resources/font_blk.fnt')-0
    28 8075				org main.CHARS_ADDR
    30 3000-33FF> 00 00 00 00 + 	ins 'resources/font_blk.fnt',0
    32 					.print '$R RCDATA  ',main.CHARS_ADDR,'..',*-1," 'resources/font_blk.fnt'"
    32 				$R RCDATA  $3000..$33FF 'resources/font_blk.fnt'
Source: MIDICar Player.a65
   110 3400				RCASM 'resources/dlist.asm' DLIST_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 3400				org RESORIGIN
     4 = 004C			len = .sizeof(_DLIST_ADDR)
     6 				mcpy	ift main.DLIST_ADDR+len >= $bc20
    11 8075-80E1> 20 41 80		jsr sys.off
    13 8078 A9 96 85 88 A9 80 +  MWA #DATA EDX
    13 8080 A9 B4 85 8C A9 3F +  MWA #MAIN.DLIST_ADDR ECX
    13 8088 A9 4C 85 84 A9 00 +  MWA #LEN EAX
    13 8090 20 00 80		 JSR RESOURCE.MEMCPY
    15 8093 4C 65 80			jmp sys.on
    16 8096			data
Source: dlist.inc
     1 = 0000			DL_BLANK1 = 0; // 1 blank line
     2 = 0010			DL_BLANK2 = %00010000; // 2 blank lines
     3 = 0020			DL_BLANK3 = %00100000; // 3 blank lines
     4 = 0030			DL_BLANK4 = %00110000; // 4 blank lines
     5 = 0040			DL_BLANK5 = %01000000; // 5 blank lines
     6 = 0050			DL_BLANK6 = %01010000; // 6 blank lines
     7 = 0060			DL_BLANK7 = %01100000; // 7 blank lines
     8 = 0070			DL_BLANK8 = %01110000; // 8 blank lines
    10 = 0080			DL_DLI = %10000000; // Order to run DLI
    11 = 0040			DL_LMS = %01000000; // Order to set new memory address
    12 = 0020			DL_VSCROLL = %00100000; // Turn on vertical scroll on this line
    13 = 0010			DL_HSCROLL = %00010000; // Turn on horizontal scroll on this line
    15 = 0002			DL_MODE_40x24T2 = 2; // Antic Modes
    16 = 0004			DL_MODE_40x24T5 = 4;
    17 = 0005			DL_MODE_40x12T5 = 5;
    18 = 0006			DL_MODE_20x24T5 = 6;
    19 = 0007			DL_MODE_20x12T5 = 7;
    20 = 0008			DL_MODE_40x24G4 = 8;
    21 = 0009			DL_MODE_80x48G2 = 9;
    22 = 000A			DL_MODE_80x48G4 = $A;
    23 = 000B			DL_MODE_160x96G2 = $B;
    24 = 000C			DL_MODE_160x192G2 = $C;
    25 = 000D			DL_MODE_160x96G4 = $D;
    26 = 000E			DL_MODE_160x192G4 = $E;
    27 = 000F			DL_MODE_320x192G2 = $F;
    29 = 0001			DL_JMP = %00000001; // Order to jump
    30 = 0041			DL_JVB = %01000001; // Jump to begining
     3 3FB4			dl_start
     4 3FB4 70 70		    :2  dta DL_BLANK8
     6 3FB6 4F 00 34		        dta DL_MODE_320x192G2 + DL_LMS, A(MAIN.SCREEN_ADDR)
     7 3FB9 0F 0F 0F 0F 0F 0F +     :18 dta DL_MODE_320x192G2
     9 3FCB 00			        dta DL_BLANK1
    11 3FCC 42 F8 36		        dta DL_MODE_40x24T2 + DL_LMS, A(MAIN.SCREEN_WORK)
    12 3FCF 02 00 02 00 02 00 +     :17 dta DL_MODE_40x24T2, DL_BLANK1
    14 3FF1 47 C8 39		        dta DL_MODE_20x12T5 + DL_LMS, A(MAIN.SCREEN_TIME)
    15 3FF4 00			        dta DL_BLANK1
    16 3FF5 02			        dta DL_MODE_40x24T2
    18 3FF6 00			        dta DL_BLANK1
    19 3FF7 0F 0F 0F 0F 0F 0F	    :6 dta DL_MODE_320x192G2
    21 3FFD 41 B4 3F		        dta DL_JVB, A(dl_start)
    23 					.print '$R RCASM   ',main.DLIST_ADDR,'..',main.DLIST_ADDR+len-1," 'resources/dlist.asm'"
    23 				$R RCASM   $3FB4..$3FFF 'resources/dlist.asm'
    25 02E2-02E3> 75 80			ini mcpy
Source: MIDICar Player.a65
   111 80E2				RCDATA 'resources/header-gr8.obj' SCREEN_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 02F8			len = .filesize('resources/header-gr8.obj')-0
    28 80E2				org main.SCREEN_ADDR
    30 3400-36F7> 07 FF FF FF + 	ins 'resources/header-gr8.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_ADDR,'..',*-1," 'resources/header-gr8.obj'"
    32 				$R RCDATA  $3400..$36F7 'resources/header-gr8.obj'
Source: MIDICar Player.a65
   112 36F8				RCDATA 'resources/footer-gr8-3.obj' SCREEN_FOOT 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 00F0			len = .filesize('resources/footer-gr8-3.obj')-0
    28 36F8				org main.SCREEN_FOOT
    30 3A04-3AF3> FF FF 00 00 + 	ins 'resources/footer-gr8-3.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_FOOT,'..',*-1," 'resources/footer-gr8-3.obj'"
    32 				$R RCDATA  $3A04..$3AF3 'resources/footer-gr8-3.obj'
Source: MIDICar Player.a65
   113 3AF4				RCDATA 'resources/uvmeter.obj' UVMETER_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0040			len = .filesize('resources/uvmeter.obj')-0
    28 3AF4				org main.UVMETER_ADDR
    30 3B00-3E0F> 41 41 41 41 + 	ins 'resources/uvmeter.obj',0
    32 					.print '$R RCDATA  ',main.UVMETER_ADDR,'..',*-1," 'resources/uvmeter.obj'"
    32 				$R RCDATA  $3B00..$3B3F 'resources/uvmeter.obj'
Source: MIDICar Player.a65
   114 3B40				RCDATA 'resources/help.obj' HELPSCR_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 02D0			len = .filesize('resources/help.obj')-0
    28 3B40				org main.HELPSCR_ADDR
    30 3B40 4A 4E A3 AF AE B4 + 	ins 'resources/help.obj',0
    32 					.print '$R RCDATA  ',main.HELPSCR_ADDR,'..',*-1," 'resources/help.obj'"
    32 				$R RCDATA  $3B40..$3E0F 'resources/help.obj'
Source: MIDICar Player.a65
   115 				.endl
   116
   117 				; ------------------------------------------------------------
   118
   119 3E10				org CODEORIGIN
   120
   121 8000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 8000-A86D> 00 00 05 FB + .by  $00 $00 $05 $FB $00 $FC $00 $FD  $00 $04 $2D $65 $6D $1A $00 $02  $2B $22 $00 $02 $45 $3A $00 $02
     2 8018 00 00 00 02 7E 7F + .by  $00 $00 $00 $02 $7E $7F $00 $02  $5C $5D $00 $02 $5E $5F $00 $05  $3B $00 $FC $00 $FD $00 $09 $4E
     3 8030 B0 EC E1 F9 E9 EE + .by  $B0 $EC $E1 $F9 $E9 $EE $E7 $CE  $00 $09 $4E $AE $EF $80 $F3 $EF  $EE $E7 $CE $00 $05 $FB $00 $3C
     4 8048 00 FD 00 09 4E 80 + .by  $00 $FD $00 $09 $4E $80 $B0 $E1  $F5 $F3 $E5 $80 $CE $00 $05 $FB  $00 $FC $00 $3D $00 $09 $4E $B3
     5 8060 F4 EF F0 F0 E5 E4 + .by  $F4 $EF $F0 $F0 $E5 $E4 $CE $00  $09 $4E $AC $EF $E1 $E4 $E9 $EE  $E7 $80 $00 $13 $4E $B2 $E5 $E1
     6 8078 E4 E9 EE E7 80 E4 + .by  $E4 $E9 $EE $E7 $80 $E4 $E9 $F2  $E5 $E3 $F4 $EF $F2 $F9 $80 $00  $14 $4E $B5 $EE $F3 $F5 $F0 $F0
     7 8090 EF F2 F4 E5 E4 80 + .by  $EF $F2 $F4 $E5 $E4 $80 $E6 $EF  $F2 $ED $E1 $F4 $CE $00 $14 $4E  $AE $EF $F4 $80 $E5 $EE $EF $F5
     8 80A8 E7 E8 F4 80 ED E5 + .by  $E7 $E8 $F4 $80 $ED $E5 $ED $EF  $F2 $F9 $CE $00 $11 $4E $AE $EF  $F4 $80 $E1 $80 $AD $A9 $A4 $A9
     9 80C0 80 E6 E9 EC E5 CE + .by  $80 $E6 $E9 $EC $E5 $CE $00 $0C  $4E $A9 $8F $AF $80 $A5 $F2 $F2  $EF $F2 $80 $83 $00 $0B $4E $A4
    10 80D8 E9 F2 E5 E3 F4 EF + .by  $E9 $F2 $E5 $E3 $F4 $EF $F2 $F9  $CE $00 $02 $44 $3A $00 $08 $4E  $B3 $F4 $E1 $F4 $F5 $F3 $CE $00
    11 80F0 09 4E A3 EF F5 EE + .by  $09 $4E $A3 $EF $F5 $EE $F4 $E5  $F2 $CE $00 $03 $2A $2E $2A $00  $A8 $00 $0A $08 $0A $A8 $0A $00
    12 8108 02 00 F0 7E 7F 09 + .by  $02 $00 $F0 $7E $7F $09 $01 $F7  $17 $80 $1B $80 $1F $80 $23 $80  $29 $1C $1D $1E
Source: MIDICar Player.a65
   122
   123 				; ------------------------------------------------------------
   124
   125 811C			RTLIB
   126 811C				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   127
   128 				.print 'ZPAGE: ',zpage,'..',zpend-1
   128 				ZPAGE: $0080..$00D3
   129
   130 				.print 'RTLIB: ',RTLIB,'..',*-1
   130 				RTLIB: $811C..$88FE
   131
   132 				; ------------------------------------------------------------
   133
   134 88FF			START
   135 88FF BA				tsx
   136 8900 8E 48 A8			stx MAIN.@halt+1
   137
   138 					.ifdef fmulinit
   139 					fmulinit
   140 					.fi
   141
   142 = 0056			VLEN	= VARDATASIZE-VARINITSIZE
   143 = 3F59			VADR	= DATAORIGIN+VARINITSIZE
   144
   145 					ift VADR > $BFFF
   146 					ert 'Invalid memory address range ',VADR
   147 					eli (VLEN>0) && (VLEN<=256)
   148 8903 A2 AA			ldx #256-VLEN
   149 8905 A9 00			lda #$00
   150 8907 9D AF 3E E8 D0 FA		sta:rne VADR+VLEN-256,x+
   151 					eli VLEN>256
   152 					@fill #VADR #VLEN #$00
   153 					eif
   154
   155 				.ifdef :psptr
   156 					mwa #PROGRAMSTACK :psptr
   157 				.fi
   158
   159 					.ifdef MAIN.@DEFINES.ROMOFF
   160 890D				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 890D			.local	rominit
     5
     6 890D 78			        sei
     7 890E A9 00		        lda #%00000000
     8 8910 8D 0E D4		        sta NMIEN       ;$D40E
     9 8913 A9 FE		        lda #%11111110
    10 8915 8D 01 D3		        sta PORTB       ;$D301
    11
    12 8918 A2 03			ldx #3
    13 891A A0 00			ldy #0
    14 891C EE 01 D3		mv	inc portb
    15 891F B9 00 E0		afnt0	lda $e000,y
    16 8922 CE 01 D3			dec portb
    17 8925 99 00 E0		afnt1	sta $e000,y
    18 8928 C8				iny
    19 8929 D0 F1			bne mv
    20 892B EE 21 89			inc afnt0+2
    21 892E EE 27 89			inc afnt1+2
    22 8931 CA				dex
    23 8932 10 E8			bpl mv
    24
    25 8934 A2 51		        ldx #<nmiint
    26 8936 A0 89		        ldy #>nmiint
    27 8938 8E FA FF		        stx NMIVEC      ;$FFFA
    28 893B 8C FB FF		        sty NMIVEC+1
    29
    30 893E A2 5B		        ldx #<irqint
    31 8940 A0 89		        ldy #>irqint
    32 8942 8E FE FF		        stx IRQVEC      ;$FFFE
    33 8945 8C FF FF		        sty IRQVEC+1
    34
    35 8948 A9 40		        lda #%01000000
    36 894A 8D 0E D4		        sta NMIEN       ;$D40E
    37 894D 58			        cli
    38
    39 894E 4C 7C 89			jmp skp
    40
    41
    42
    43 8951 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 8954 10 03		        spl
    45 8956 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 8959 38			        sec
    48 895A 24			        .byte $24        ;BIT $18
    49
    50 895B 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 895C EE 01 D3		        inc PORTB       ;$D301
    55
    56 895F 48			        pha
    57 8960 8A			        txa
    58 8961 48			        pha
    59 8962 BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 8963 A9 89		        lda #>iret      ;adres procedury iret
    64 8965 48			        pha
    65 8966 A9 75		        lda #<iret
    66 8968 48			        pha
    67 8969 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 896C 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 896D 90 03		        scc
    73 896F 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 8972 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 8975 68			iret	pla
    77 8976 AA				tax
    78 8977 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 8978 CE 01 D3		        dec PORTB       ;$D301
    83 897B 40			        rti
    84
    85 897C			skp
    86
    87 				.endl
    88
   161 					.fi
   162
   163 897C A2 0F			ldx #$0F					; DOS II+/D ParamStr
   164 897E BD 40 03 9D 50 A8 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   165
   166 8987 E8				inx						; X = 0
   167 8988 86 80			stx bp						; BP = 0
   168
   169 898A 8E 0F D2			stx skctl					; reset POKEY
   170 898D A9 03			lda #3
   171 898F 8D 0F D2			sta skctl
   172
   173 8992 CA				dex						; X = 255
   174
   175 8993				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
    19 8993 20 B0 94			jsr MAIN.MIDFILES.@UnitInit
   176
   177 8996			.local	MAIN						; PROCEDURE
   178
   179 8996 4C C6 A4			jmp l_0107
   180
   181 				; ------------------------------------------------------------
   182
   183 8999			.local	SYSTEM						; UNIT
   184
   185 8999			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   186
   187 				; ------------------------------------------------------------
   188
   189 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   190 				; as Pointer
   191 8999 B5 94			lda :STACKORIGIN,x
   192 899B 85 88			sta A
   193 899D B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   194 899F 85 89			sta A+1
   195 89A1 CA				dex
   196 89A2 10 03 4C AC 89		jmi @main
   197
   198 				; ------------------------------------------------------------
   199
   200 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   201 				; as Pointer
   202 89A7 B5 94			lda :STACKORIGIN,x
   203 89A9 85 8C			sta VALUE
   204 89AB CA				dex
   205 89AC			@main
   206
   207 				; -------------------  ASM Block 00000018  -------------------
   208
   209 89AC A0 00			ldy #0
   210 89AE A5 8C 91 88			mva value (:edx),y
   211
   212 				; ------------------------------------------------------------
   213
   214 = 0088			A	= :EDX
   215 = 008C			VALUE	= :ECX
   216 89B2			@exit
   217 					.ifdef @new
   218 					lda <@VarData
   219 					sta :ztmp
   220 					lda >@VarData
   221 					ldy #@VarDataSize-1
   222 					jmp @FreeMem
   223 					els
   224 89B2 60				rts						; ret
   225 					eif
   226 				.endl
   227
   228 89B3			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   229
   230 				; ------------------------------------------------------------
   231
   232 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   233 				; as Pointer
   234 89B3 B5 94			lda :STACKORIGIN,x
   235 89B5 85 88			sta A
   236 89B7 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   237 89B9 85 89			sta A+1
   238 89BB CA				dex
   239 89BC 30 09			jmi @main
   240
   241 				; ------------------------------------------------------------
   242
   243 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   244 				; as Pointer
   245 89BE B5 94			lda :STACKORIGIN,x
   246 89C0 85 8C			sta VALUE
   247 89C2 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   248 89C4 85 8D			sta VALUE+1
   249 89C6 CA				dex
   250 89C7			@main
   251
   252 				; -------------------  ASM Block 00000019  -------------------
   253
   254 89C7 A0 00			ldy #0
   255 89C9 A5 8C 91 88			mva value (:edx),y
   256 89CD C8				iny
   257 89CE A5 8D 91 88			mva value+1 (:edx),y
   258
   259 				; ------------------------------------------------------------
   260
   261 = 0088			A	= :EDX
   262 = 008C			VALUE	= :ECX
   263 89D2			@exit
   264 					.ifdef @new
   265 					lda <@VarData
   266 					sta :ztmp
   267 					lda >@VarData
   268 					ldy #@VarDataSize-1
   269 					jmp @FreeMem
   270 					els
   271 89D2 60				rts						; ret
   272 					eif
   273 				.endl
   274
   275 89D3			.local	FILLCHAR_0151					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   276
   277 					.MACRO m@INLINE
   278 				
   279 				; -------------------  ASM Block 00000021  -------------------
   280 				
   281 					jsr @fill
   282 				
   283 					.ENDM
   284
   285 				; ------------------------------------------------------------
   286
   287 = 0088			A	= :EDX
   288 = 008C			COUNT	= :ECX
   289 = 0084			VALUE	= :EAX
   290 89D3			@exit
   291 				.endl
   292
   293 89D3			.local	FILLCHAR_0152					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   294
   295 					.MACRO m@INLINE
   296 				
   297 				; -------------------  ASM Block 00000024  -------------------
   298 				
   299 					jsr @fill
   300 				
   301 					.ENDM
   302
   303 				; ------------------------------------------------------------
   304
   305 = 0088			X	= :EDX
   306 = 008C			COUNT	= :ECX
   307 = 0084			VALUE	= :EAX
   308 89D3			@exit
   309 				.endl
   310
   311 89D3			.local	MOVE_0153					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   312
   313 					.MACRO m@INLINE
   314 				
   315 				; -------------------  ASM Block 00000028  -------------------
   316 				
   317 					jsr @move
   318 				
   319 					.ENDM
   320
   321 				; ------------------------------------------------------------
   322
   323 = 0088			SOURCE	= :EDX
   324 = 008C			DEST	= :ECX
   325 = 0084			COUNT	= :EAX
   326 89D3			@exit
   327 				.endl
   328
   329 89D3			.local	RANDOM_0172					; FUNCTION | ASSEMBLER | OVERLOAD
   330 89D3 8D 8B 3E			sta RANGE
   331
   332 				; -------------------  ASM Block 00000042  -------------------
   333
   334
   335 				;BYTE FUNC Rand(BYTE range)
   336 				; returns random number between 0 and
   337 				; range-1.  If range=0, then a random
   338 				; number between 0 and 255 is returned
   339
   340 89D6 AC 0A D2		  ldy $d20a   ; RANDOM
   341
   342 89D9 AD 8B 3E		  lda range
   343 89DC F0 08		  beq stop
   344
   345 89DE 85 8C		  sta :ecx
   346 89E0 84 84		  sty :eax
   347
   348 89E2 20 CD 83		  jsr imulCL
   349 89E5 A8			  tay
   350
   351 89E6 8C 8C 3E		stop  sty Result
   352
   353
   354 89E9			@exit
   355
   356 				; ------------------------------------------------------------
   357
   358 = 3E8B			RANGE	= DATAORIGIN+$000B
   359 = 3E8C			RESULT	= DATAORIGIN+$000C
   360
   361 = 3E8B			@VarData	= RANGE
   362 = 0001			@VarDataSize	= 1
   363
   364 89E9 60				rts						; ret
   365 				.endl
   366
   367 89EA			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   368 89EA 8D 8D 3E			sta I
   369
   370 				; -------------------  ASM Block 00000045  -------------------
   371
   372 					@cmdline i
   372 				 LDA I\ JSR @CMDLINE
   372 89ED AD 8D 3E		 LDA I
   372 89F0 20 1C 81		 JSR @CMDLINE
   373
   374 				;	@move #@buf Result #33
   375 89F3 A0 DF			ldy #256-33
   376 89F5 B9 21 03 99 AF 3D + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   377
   378 89FE			@exit
   379
   380 				; ------------------------------------------------------------
   381
   382 = 3E8D			I	= DATAORIGIN+$000D
   383 = 3E8E			adr.RESULT	= [DATAORIGIN+$000E] .array [33]
   384 89FE			.var RESULT	= adr.RESULT .word
   385
   386 = 3E8D			@VarData	= I
   387 = 0022			@VarDataSize	= 34
   388
   389 89FE 60				rts						; ret
   390 = 89FF 8E 3E		RESULT
   390 				.endl
   391
   392 				; ------------------------------------------------------------
   393
   394 = 0101			__PORTB_BANKS	= $0101
   395 = 0648			M_PI_2	= $0648
   396 = 0192			D_PI_2	= $0192
   397 = 0004			D_PI_180	= $04
   398 = 0000			MGTIA	= $00
   399 = 0080			MVBXE	= $80
   400 = 0000			VBXE_XDLADR	= $00
   401 = 00E0			VBXE_BCBTMP	= $E0
   402 = 0100			VBXE_BCBADR	= $0100
   403 = 1000			VBXE_MAPADR	= $1000
   404 = 1000			VBXE_CHBASE	= $1000
   405 = 5000			VBXE_OVRADR	= $5000
   406 = B000			VBXE_WINDOW	= $B000
   407 = 0000			IDLI	= $00
   408 = 0001			IVBL	= $01
   409 = 0002			ITIM1	= $02
   410 = 0003			ITIM2	= $03
   411 = 0004			ITIM4	= $04
   412 = 00FE			CH_DELCHR	= $FE
   413 = 009B			CH_ENTER	= $9B
   414 = 001B			CH_ESC	= $1B
   415 = 001C			CH_CURS_UP	= $1C
   416 = 001D			CH_CURS_DOWN	= $1D
   417 = 001E			CH_CURS_LEFT	= $1E
   418 = 001F			CH_CURS_RIGHT	= $1F
   419 = 007F			CH_TAB	= $7F
   420 = 009B			CH_EOL	= $9B
   421 = 007D			CH_CLR	= $7D
   422 = 00FD			CH_BELL	= $FD
   423 = 007E			CH_DEL	= $7E
   424 = 009C			CH_DELLINE	= $9C
   425 = 009D			CH_INSLINE	= $9D
   426 = 0000			PAL_PMCOLOR0	= $00
   427 = 0001			PAL_PMCOLOR1	= $01
   428 = 0002			PAL_PMCOLOR2	= $02
   429 = 0003			PAL_PMCOLOR3	= $03
   430 = 0004			PAL_COLOR0	= $04
   431 = 0005			PAL_COLOR1	= $05
   432 = 0006			PAL_COLOR2	= $06
   433 = 0007			PAL_COLOR3	= $07
   434 = 0008			PAL_COLBAK	= $08
   435 = 0000			COLOR_BLACK	= $00
   436 = 000E			COLOR_WHITE	= $0E
   437 = 0032			COLOR_RED	= $32
   438 = 0096			COLOR_CYAN	= $96
   439 = 0068			COLOR_VIOLET	= $68
   440 = 00C4			COLOR_GREEN	= $C4
   441 = 0074			COLOR_BLUE	= $74
   442 = 00EE			COLOR_YELLOW	= $EE
   443 = 0028			COLOR_ORANGE	= $28
   444 = 00E4			COLOR_BROWN	= $E4
   445 = 003C			COLOR_LIGHTRED	= $3C
   446 = 0004			COLOR_GRAY1	= $04
   447 = 0006			COLOR_GRAY2	= $06
   448 = 000A			COLOR_GRAY3	= $0A
   449 = 00CC			COLOR_LIGHTGREEN	= $CC
   450 = 007C			COLOR_LIGHTBLUE	= $7C
   451 = 0004			FMOPENREAD	= $04
   452 = 0008			FMOPENWRITE	= $08
   453 = 0009			FMOPENAPPEND	= $09
   454 = 000C			FMOPENREADWRITE	= $0C
   455 = 3E80			SCREENWIDTH	= DATAORIGIN+$0000
   456 = 3E82			SCREENHEIGHT	= DATAORIGIN+$0002
   457 = 3E84			DATESEPARATOR	= DATAORIGIN+$0004
   458 = D20A			RND	= $D20A
   459 = 02C0			adr.PALETTE	= $02C0
   460 8A01			.var PALETTE	= adr.PALETTE .word
   461 = D012			adr.HPALETTE	= $D012
   462 8A01			.var HPALETTE	= adr.HPALETTE .word
   463 = 3E85			FILEMODE	= DATAORIGIN+$0005
   464 = 3E86			GRAPHMODE	= DATAORIGIN+$0006
   465 = 3E87			IORESULT	= DATAORIGIN+$0007
   466 = 3E88			EOLN	= DATAORIGIN+$0008
   467 = 3E89			RNDSEED	= DATAORIGIN+$0009
   468
   469 = 8A01 C0 02		PALETTE
   469 = 8A03 12 D0		HPALETTE
   469 				.endl							; UNIT SYSTEM
   470
   471 				; ------------------------------------------------------------
   472
   473 8A05			.local	MC6850						; UNIT
   474
   475 8A05			.local	MC6850_INIT					; PROCEDURE | ASSEMBLER | KEEP
   476 8A05 8D AF 3E			sta SETUP
   477
   478 				; -------------------  ASM Block 00000052  -------------------
   479
   480 8A08 AD AF 3E		    lda setup
   481 8A0B 8D 00 D5		    sta MCBaseState:$d500
   482
   483 				; ------------------------------------------------------------
   484
   485 = 3EAF			SETUP	= DATAORIGIN+$002F
   486
   487 = 3EAF			@VarData	= SETUP
   488 = 0001			@VarDataSize	= 1
   489
   490 8A0E			@exit
   491 					.ifdef @new
   492 					lda <@VarData
   493 					sta :ztmp
   494 					lda >@VarData
   495 					ldy #@VarDataSize-1
   496 					jmp @FreeMem
   497 					els
   498 8A0E 60				rts						; ret
   499 					eif
   500 				.endl
   501
   502 8A0F			.local	MC6850_SEND2					; PROCEDURE | ASSEMBLER | KEEP
   503
   504 				; -------------------  ASM Block 00000053  -------------------
   505
   506 8A0F			wait:
   507 8A0F AD 00 D5		    lda MCBaseState:$d500
   508 8A12 29 02		    and #TDRE
   509 8A14 D0 F9		    bne wait
   510
   511 8A16 A5 FF		    lda MC_Byte
   512 8A18 8D 00 D5		    sta MCBaseBuf:$d500
   513
   514 8A1B			@exit
   515 					.ifdef @new
   516 					lda <@VarData
   517 					sta :ztmp
   518 					lda >@VarData
   519 					ldy #@VarDataSize-1
   520 					jmp @FreeMem
   521 					els
   522 8A1B 60				rts						; ret
   523 					eif
   524 				.endl
   525
   526 				; ------------------------------------------------------------
   527
   528 = 0001			CR0	= $01
   529 = 0002			CR1	= $02
   530 = 0004			CR2	= $04
   531 = 0008			CR3	= $08
   532 = 0010			CR4	= $10
   533 = 0020			CR5	= $20
   534 = 0040			CR6	= $40
   535 = 0080			CR7	= $80
   536 = 0000			CD_1	= $00
   537 = 0001			CD_16	= $01
   538 = 0002			CD_64	= $02
   539 = 0003			MASTERRESET	= $03
   540 = 0000			WS_7BITS	= $00
   541 = 0010			WS_8BITS	= $10
   542 = 0000			WS_2BITSTOP	= $00
   543 = 0008			WS_1BITSTOP	= $08
   544 = 0000			WS_EVENPARITY	= $00
   545 = 0004			WS_ODDPARITY	= $04
   546 = 0000			TC_RTSLOW_NOTIRQ	= $00
   547 = 0020			TC_RTSLOW_TIRQ	= $20
   548 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   549 = 0060			TC_BREAKLEVEL	= $60
   550 = 0000			NOIRQ_RECEIVE	= $00
   551 = 0080			IRQ_RECEIVE	= $80
   552 = 0001			RDRF	= $01
   553 = 0002			TDRE	= $02
   554 = 0004			DCD	= $04
   555 = 0008			CTS	= $08
   556 = 0010			FE	= $10
   557 = 0020			OVRN	= $20
   558 = 0040			PE	= $40
   559 = 0080			IRQ	= $80
   560 = 00FF			MC_BYTE	= $FF
   561
   562 				.endl							; UNIT MC6850
   563
   564 				; ------------------------------------------------------------
   565
   566 8A1C			.local	MIDI_FIFO					; UNIT
   567
   568 8A1C			.local	FIFO_RESET					; PROCEDURE
   569
   570 				; optimize OK (MIDI_FIFO), line = 30
   571
   572 8A1C A9 00			lda #$00
   573 8A1E 85 FD			sta FIFO_HEAD
   574
   575 				; optimize OK (MIDI_FIFO), line = 31
   576
   577 8A20 85 FE			sta FIFO_TAIL
   578 8A22			@exit
   579 					.ifdef @new
   580 					lda <@VarData
   581 					sta :ztmp
   582 					lda >@VarData
   583 					ldy #@VarDataSize-1
   584 					jmp @FreeMem
   585 					els
   586 8A22 60				rts						; ret
   587 					eif
   588 				.endl
   589
   590 8A23			.local	FIFO_PUSHDIRECT2MC6850				; PROCEDURE | ASSEMBLER
   591
   592 				; -------------------  ASM Block 00000054  -------------------
   593
   594 8A23 AD 00 D5		  lda MCBaseState:$d500 // MC6850.MC6850_CNTRREG
   595 8A26 29 02		  and #MC6850.TDRE
   596 8A28 F0 0E		  beq exitPush
   597
   598 8A2A A4 FE		  ldy FIFO_Tail
   599 8A2C C4 FD		  cpy FIFO_Head
   600 8A2E F0 08		  beq exitPush
   601
   602 8A30 B9 00 06		  lda FIFO_ADDR,y
   603 8A33 8D 00 D5		  sta MCBaseBuf:$d500  //MC6850.MC6850_BUFFER
   604 8A36 E6 FE		  inc FIFO_Tail
   605
   606 8A38			exitPush:
   607
   608 8A38			@exit
   609 					.ifdef @new
   610 					lda <@VarData
   611 					sta :ztmp
   612 					lda >@VarData
   613 					ldy #@VarDataSize-1
   614 					jmp @FreeMem
   615 					els
   616 8A38 60				rts						; ret
   617 					eif
   618 				.endl
   619
   620 8A39			.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER
   621
   622 				; -------------------  ASM Block 00000055  -------------------
   623
   624 8A39 A5 FD		  lda FIFO_Head
   625 8A3B 18			  clc
   626 8A3C 69 01		  adc #1
   627 8A3E C5 FE		  cmp FIFO_Tail
   628 8A40 D0 03		  bne storeInFIFO
   629
   630 8A42 20 52 8A		  jsr FIFO_Flush
   631
   632 8A45			storeInFIFO:
   633 8A45 A4 FD		  ldy FIFO_Head
   634 8A47 A5 FF		  lda FIFO_Byte
   635 8A49 99 00 06		  sta FIFO_ADDR,y
   636 8A4C E6 FD		  inc FIFO_Head
   637
   638 8A4E 20 23 8A		  jsr FIFO_PushDirect2MC6850
   639 8A51			exitWrite:
   640
   641 8A51			@exit
   642 					.ifdef @new
   643 					lda <@VarData
   644 					sta :ztmp
   645 					lda >@VarData
   646 					ldy #@VarDataSize-1
   647 					jmp @FreeMem
   648 					els
   649 8A51 60				rts						; ret
   650 					eif
   651 				.endl
   652
   653 8A52			.local	FIFO_FLUSH					; PROCEDURE | ASSEMBLER | KEEP
   654
   655 				; -------------------  ASM Block 00000056  -------------------
   656
   657 8A52 78			  sei
   658 				  // lda _timerStatus
   659 				  // eor #$80
   660 				  // sta _timerStatus
   661
   662 8A53 A4 FE		  ldy FIFO_Tail
   663 8A55			flushLoop:
   664 8A55 C4 FD		  cpy FIFO_Head
   665 8A57 F0 11		  beq endFlush
   666
   667 8A59			waitOnMC:
   668 8A59 AD 00 D5		  lda MCBaseState:$d500 // MC6850.MC6850_CNTRReg
   669 8A5C 29 02		  and #MC6850.TDRE
   670 8A5E F0 F9		  beq waitOnMc
   671
   672 8A60 B9 00 06		  lda FIFO_ADDR,y
   673 8A63 8D 00 D5		  sta MCBaseBuf:$d500   // MC6850.MC6850_BUFFER
   674
   675 8A66 C8			  iny
   676 8A67 4C 55 8A		  jmp flushLoop
   677
   678 8A6A			endFlush:
   679 8A6A 84 FE		  sty FIFO_Tail
   680
   681 8A6C 58			  cli
   682 				  // lda _timerStatus
   683 				  // eor #$80
   684 				  // sta _timerStatus
   685
   686 8A6D			@exit
   687 					.ifdef @new
   688 					lda <@VarData
   689 					sta :ztmp
   690 					lda >@VarData
   691 					ldy #@VarDataSize-1
   692 					jmp @FreeMem
   693 					els
   694 8A6D 60				rts						; ret
   695 					eif
   696 				.endl
   697
   698 				; ------------------------------------------------------------
   699
   700 = 00FD			FIFO_HEAD	= $FD
   701 = 00FE			FIFO_TAIL	= $FE
   702 = 00FF			FIFO_BYTE	= $FF
   703 = 3EB0			FIFO2NULL	= DATAORIGIN+$0030
   704 = 0600			FIFO_ADDR	= $0600
   705 = 0600			adr.FIFO_BUF	= $0600
   706 8A6E			.var FIFO_BUF	= adr.FIFO_BUF .word
   707 = 00F5			_TIMERSTATUS	= $F5
   708
   709 = 8A6E 00 06		FIFO_BUF
   709 				.endl							; UNIT MIDI_FIFO
   710
   711 				; ------------------------------------------------------------
   712
   713 8A70			.local	CIO						; UNIT
   714
   715 8A70			.local	OPN						; PROCEDURE | ASSEMBLER
   716
   717 				; -------------------  ASM Block 00000057  -------------------
   718
   719 8A70 8A 48			txa:pha
   720
   721 8A72 AD B1 3E			lda chn
   722 8A75 0A 0A 0A 0A			:4 asl @
   723 8A79 AA				tax
   724
   725 8A7A A9 03			lda #$03		;komenda: OPEN
   726 8A7C 9D 42 03			sta iccmd,x
   727
   728 8A7F EE B4 3E D0 03 EE + 	inw device		;omin bajt z dlugoscia STRING-a
   729
   730 8A87 AD B4 3E			lda device		;adres nazwy pliku
   731 8A8A 9D 44 03			sta icbufa,x
   732 8A8D AD B5 3E			lda device+1
   733 8A90 9D 45 03			sta icbufa+1,x
   734
   735 8A93 AD B2 3E			lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
   736 8A96 9D 4A 03			sta icax1,x
   737
   738 8A99 AD B3 3E			lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
   739 8A9C 9D 4B 03			sta icax2,x
   740
   741 8A9F				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8A9F EE 01 D3				inc portb
     6 8AA2 20 56 E4				jsr CIOV
     8 8AA5 CE 01 D3				dec portb
Source: MIDICar Player.a65
   742
   743 8AA8 8C 87 3E			sty MAIN.SYSTEM.IOResult
   744
   745 8AAB 68 AA			pla:tax
   746
   747 				; ------------------------------------------------------------
   748
   749 = 3EB1			CHN	= DATAORIGIN+$0031
   750 = 3EB2			AX1	= DATAORIGIN+$0032
   751 = 3EB3			AX2	= DATAORIGIN+$0033
   752 = 3EB4			DEVICE	= DATAORIGIN+$0034
   753
   754 = 3EB1			@VarData	= CHN
   755 = 0005			@VarDataSize	= 5
   756
   757 8AAD			@exit
   758 					.ifdef @new
   759 					lda <@VarData
   760 					sta :ztmp
   761 					lda >@VarData
   762 					ldy #@VarDataSize-1
   763 					jmp @FreeMem
   764 					els
   765 8AAD 60				rts						; ret
   766 					eif
   767 				.endl
   768
   769 8AAE			.local	CLS						; PROCEDURE | ASSEMBLER
   770 8AAE 8D B6 3E			sta CHN
   771
   772 				; -------------------  ASM Block 00000058  -------------------
   773
   774 8AB1 8A 48			txa:pha
   775
   776 8AB3 AD B6 3E			lda chn
   777 8AB6 0A 0A 0A 0A			:4 asl @
   778 8ABA AA				tax
   779
   780 8ABB A9 0C			lda #$0c		;komenda: CLOSE
   781 8ABD 9D 42 03			sta iccmd,x
   782
   783 8AC0				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8AC0 EE 01 D3				inc portb
     6 8AC3 20 56 E4				jsr CIOV
     8 8AC6 CE 01 D3				dec portb
Source: MIDICar Player.a65
   784
   785 8AC9 8C 87 3E			sty MAIN.SYSTEM.IOResult
   786
   787 8ACC 68 AA			pla:tax
   788
   789 				; ------------------------------------------------------------
   790
   791 = 3EB6			CHN	= DATAORIGIN+$0036
   792
   793 = 3EB6			@VarData	= CHN
   794 = 0001			@VarDataSize	= 1
   795
   796 8ACE			@exit
   797 					.ifdef @new
   798 					lda <@VarData
   799 					sta :ztmp
   800 					lda >@VarData
   801 					ldy #@VarDataSize-1
   802 					jmp @FreeMem
   803 					els
   804 8ACE 60				rts						; ret
   805 					eif
   806 				.endl
   807
   808 8ACF			.local	BGET						; PROCEDURE | ASSEMBLER | REGISTER
   809
   810 				; -------------------  ASM Block 00000060  -------------------
   811
   812 8ACF 8A 48			txa:pha
   813
   814 8AD1 A5 88			lda chn
   815 8AD3 0A 0A 0A 0A			:4 asl @
   816 8AD7 AA				tax
   817
   818 8AD8 A9 07			lda #7		;get char/s command
   819 8ADA 9D 42 03			sta iccmd,x
   820
   821 8ADD A5 8C			lda buf
   822 8ADF 9D 44 03			sta icbufa,x
   823 8AE2 A5 8D			lda buf+1
   824 8AE4 9D 45 03			sta icbufa+1,x
   825
   826 8AE7 A5 84			lda cnt
   827 8AE9 9D 48 03			sta icbufl,x
   828 8AEC A5 85			lda cnt+1
   829 8AEE 9D 49 03			sta icbufh,x
   830
   831 8AF1				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8AF1 EE 01 D3				inc portb
     6 8AF4 20 56 E4				jsr CIOV
     8 8AF7 CE 01 D3				dec portb
Source: MIDICar Player.a65
   832
   833 8AFA 8C 87 3E			sty MAIN.SYSTEM.IOResult
   834
   835 8AFD 68 AA			pla:tax
   836
   837 				; ------------------------------------------------------------
   838
   839 = 0088			CHN	= :EDX
   840 = 008C			BUF	= :ECX
   841 = 0084			CNT	= :EAX
   842 8AFF			@exit
   843 					.ifdef @new
   844 					lda <@VarData
   845 					sta :ztmp
   846 					lda >@VarData
   847 					ldy #@VarDataSize-1
   848 					jmp @FreeMem
   849 					els
   850 8AFF 60				rts						; ret
   851 					eif
   852 				.endl
   853
   854 				; ------------------------------------------------------------
   855
   856 				.endl							; UNIT CIO
   857
   858 				; ------------------------------------------------------------
   859
   860 8B00			.local	MIDFILES					; UNIT
   861
   862 8B00			.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT
   863
   864 				; -------------------  ASM Block 00000067  -------------------
   865
   866 8B00			  icl 'midfile/asms/int_timer.a65'
Source: int_timer.a65
     1 8B00 A5 F5		    lda _timerStatus
     2 8B02 30 1E		    bmi skip
     3
     4 8B04			doSubTick:
     5 8B04 29 0F		    and #f_ratio
     6 8B06 C5 F4		    cmp _subCnt
     7 8B08 F0 04		    beq doMainTick
     8
     9 8B0A E6 F4		    inc _subCnt
    10 8B0C 70 14		    bvs skip
    11
    12 8B0E			doMainTick:
    13 8B0E A9 01		    lda #1
    14 8B10 85 F4		    sta _subCnt
    15
    16 8B12 A5 F5		    lda _timerStatus
    17 8B14 09 40		    ora #f_tick
    18 8B16 85 F5		    sta _timerStatus
    19
    20 8B18 E6 F0		    inc _totalTicks
    21 8B1A D0 06		    bne skip
    22 8B1C E6 F1		    inc _totalTicks+1
    23 8B1E D0 02		    bne skip
    24 8B20 E6 F2		    inc _totalTicks+2
    25 				    // bne skip
    26 				    // inc _totalTicks+3
    27
    28 8B22			skip:
    29
    30 				//   sty regy
    31
    32 				//   ldy MIDI_FIFO.FIFO_Tail
    33 				//   cpy MIDI_FIFO.FIFO_Head
    34 				//   beq fifo_end
    35
    36 				//   lda MC6850.MC6850_CNTRREG
    37 				//   and #MC6850.TDRE
    38 				//   beq fifo_end
    39
    40 				//   lda MIDI_FIFO.FIFO_ADDR,y
    41 				//   sta MC6850.MC6850_BUFFER
    42
    43 				//   inc MIDI_FIFO.FIFO_Tail
    44
    45 				// fifo_end:
    46 				//   ldy regy:#$00
    47
    48 8B22 68			  pla
   867
   868 8B23 40				rti						; ret
   869 				.endl
   870
   871 8B24			.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER
   872
   873 				; -------------------  ASM Block 00000068  -------------------
   874
   875 8B24			  icl 'midfile/asms/memory_bound_check.a65'
Source: memory_bound_check.a65
     1 8B24 A5 E2		  lda _adr            // get LSB of address
     2 8B26 F0 01		  beq checkMemType    // zero means, we crossing the page. Check block bounds
     3 8B28 60			  rts
     4
     5 8B29			checkMemType
     6 8B29 A5 E3		  lda _adr+1          // get MSB of address
     7 8B2B A4 E1		  ldy _bank           // get current bank index
     8 8B2D D0 17		  bne checkXMSBound   // zero, means we checking bounds in base memory
     9 				                      // otherwise, we checking bound of extended memory
    10
    11 				// base memory bounds check
    12 				// 1nd, $d800..$ff00
    13 8B2F			check1Bound:
    14 8B2F C9 FF		  cmp #$ff
    15 8B31 D0 05		  bne check2Bound
    16
    17 8B33 A9 A8		  lda #$a8
    18 8B35 85 E3		  sta _adr+1
    19 8B37 60			  rts
    20
    21 				// 2st, $a800..$cfff
    22 8B38			check2bound:
    23 8B38 C9 D0		  cmp #$d0
    24 8B3A D0 05		  bne check3Bound
    25
    26 8B3C A9 40		  lda #$40
    27 8B3E 85 E3		  sta _adr+1
    28 8B40 60			  rts
    29
    30 				// 3nd, $4000..$8000
    31 8B41			check3Bound
    32 8B41 C9 80		  cmp #$80
    33 8B43 F0 22		  beq outOfMem
    34 8B45 60			  rts
    35
    36 				// extended memory bound check
    37
    38 8B46			checkXMSBound         // extender memory window $4000..$7fff
    39 8B46 C9 80		  cmp #$80            // the bank's memory area ends at $7fff
    40 8B48 F0 01		  beq switchXMSBank   // if MSB addres is out of this address, we need switch bank
    41
    42 8B4A 60			  rts
    43
    44 8B4B			switchXMSBank:
    45 8B4B 88			  dey             // decrement current bank index
    46 8B4C F0 0D		  beq switch2Conv // if zero, meand we back to conventional memory
    47
    48 8B4E B9 00 01		  lda $100,y      // get bank set
    49 8B51 84 E1		  sty _bank       // store current bank index
    50 8B53 8D 01 D3		  sta PORTB       // set PORTB (switch bank)
    51 8B56 A9 40		  lda #$40        // set MSB address to the begining of bank
    52 8B58 85 E3		  sta _adr+1
    53 8B5A 60			  rts
    54
    55 8B5B			switch2Conv:
    56 8B5B 84 E1		  sty _bank
    57 8B5D A9 FE		  lda #$fe        // switch to conventional memory and turn off ROM
    58 8B5F 8D 01 D3		  sta PORTB
    59 8B62 A9 A8		  lda #$a8        // set MSB address
    60 8B64 85 E3		  sta _adr+1
    61 8B66 60			  rts
    62
    63 8B67			outOfMem:
    64 8B67 A9 65		  lda #ERR_NOT_ENOUGHT_MEMORY
    65 8B69 8D 87 3E		  sta SYSTEM.IOResult
   876
   877 8B6C			@exit
   878 					.ifdef @new
   879 					lda <@VarData
   880 					sta :ztmp
   881 					lda >@VarData
   882 					ldy #@VarDataSize-1
   883 					jmp @FreeMem
   884 					els
   885 8B6C 60				rts						; ret
   886 					eif
   887 				.endl
   888
   889 8B6D			.local	LOADMID						; FUNCTION
   890
   891 8B6D 4C 9A 8C			jmp l_019B
   892
   893 8B70			.local	READWORDBI					; FUNCTION
   894
   895 				; optimize OK (bigendian.inc), line = 3
   896
   897 8B70 A9 01			lda #$01
   898 8B72 85 88			sta CIO.BGET.CHN
   899 8B74 A9 F8			lda <RESULT
   900 8B76 85 8C			sta CIO.BGET.BUF
   901 8B78 A9 3E			lda >RESULT
   902 8B7A 85 8D			sta CIO.BGET.BUF+1
   903 8B7C A9 02			lda #$02
   904 8B7E 85 84			sta CIO.BGET.CNT
   905 8B80 A9 00			lda #$00
   906 8B82 85 85			sta CIO.BGET.CNT+1
   907 8B84 20 CF 8A			jsr CIO.BGET
   908
   909 				; -------------------  ASM Block 00000069  -------------------
   910
   911 8B87 AE F8 3E		    ldx result
   912 8B8A AC F9 3E		    ldy result+1
   913 8B8D 8E F9 3E		    stx result+1
   914 8B90 8C F8 3E		    sty result
   915 				  
   916 8B93			@exit
   917
   918 				; ------------------------------------------------------------
   919
   920 = 3EF8			RESULT	= DATAORIGIN+$0078
   921 8B93 60				rts						; ret
   922 				.endl
   923
   924 8B94			.local	READLONGBI					; FUNCTION
   925
   926 				; optimize OK (bigendian.inc), line = 15
   927
   928 8B94 A9 01			lda #$01
   929 8B96 85 88			sta CIO.BGET.CHN
   930 8B98 A9 FA			lda <RESULT
   931 8B9A 85 8C			sta CIO.BGET.BUF
   932 8B9C A9 3E			lda >RESULT
   933 8B9E 85 8D			sta CIO.BGET.BUF+1
   934 8BA0 A9 04			lda #$04
   935 8BA2 85 84			sta CIO.BGET.CNT
   936 8BA4 A9 00			lda #$00
   937 8BA6 85 85			sta CIO.BGET.CNT+1
   938 8BA8 20 CF 8A			jsr CIO.BGET
   939
   940 				; -------------------  ASM Block 00000070  -------------------
   941
   942 8BAB AE FA 3E		    ldx result
   943 8BAE AC FD 3E		    ldy result+3
   944 8BB1 8E FD 3E		    stx result+3
   945 8BB4 8C FA 3E		    sty result
   946
   947 8BB7 AE FB 3E		    ldx result+1
   948 8BBA AC FC 3E		    ldy result+2
   949 8BBD 8E FC 3E		    stx result+2
   950 8BC0 8C FB 3E		    sty result+1
   951 				  
   952 8BC3			@exit
   953
   954 				; ------------------------------------------------------------
   955
   956 = 3EFA			RESULT	= DATAORIGIN+$007A
   957 8BC3 60				rts						; ret
   958 				.endl
   959
   960 8BC4			.local	_BGET						; PROCEDURE
   961
   962 				; optimize OK (loadmid.inc), line = 21
   963
   964 8BC4 A9 01			lda #$01
   965 8BC6 85 88			sta CIO.BGET.CHN
   966 8BC8 AD FE 3E			lda DEST
   967 8BCB 85 8C			sta CIO.BGET.BUF
   968 8BCD AD FF 3E			lda DEST+1
   969 8BD0 85 8D			sta CIO.BGET.BUF+1
   970 8BD2 AD F0 3E			lda LOADSIZE
   971 8BD5 85 84			sta CIO.BGET.CNT
   972 8BD7 AD F1 3E			lda LOADSIZE+1
   973 8BDA 85 85			sta CIO.BGET.CNT+1
   974 8BDC 20 CF 8A			jsr CIO.BGET
   975
   976 				; ------------------------------------------------------------
   977
   978 = 3EFE			DEST	= DATAORIGIN+$007E
   979
   980 = 3EFE			@VarData	= DEST
   981 = 0002			@VarDataSize	= 2
   982
   983 8BDF			@exit
   984 					.ifdef @new
   985 					lda <@VarData
   986 					sta :ztmp
   987 					lda >@VarData
   988 					ldy #@VarDataSize-1
   989 					jmp @FreeMem
   990 					els
   991 8BDF 60				rts						; ret
   992 					eif
   993 				.endl
   994
   995 8BE0			.local	CHECKLOADSIZE					; PROCEDURE
   996
   997 				; optimize OK (loadmid.inc), line = 26
   998
   999 8BE0 A9 00			lda #$00
  1000 8BE2 8D F0 3E			sta LOADSIZE
  1001 8BE5 8D F1 3E			sta LOADSIZE+1
  1002
  1003 				; --- RepeatUntilProlog
  1004 8BE8			l_01BD
  1005
  1006 				; optimize FAIL ('MEMBOUNDCHECK', loadmid.inc), line = 28
  1007
  1008 8BE8 20 24 8B			jsr MEMBOUNDCHECK
  1009
  1010 				; optimize OK (loadmid.inc), line = 29
  1011
  1012 8BEB AD 87 3E			lda SYSTEM.IORESULT
  1013 8BEE C9 01			cmp #$01
  1014 8BF0 F0 03			jeq l_01D0
  1015 8BF2 4C 99 8C			jmp @exit					; exit
  1016 8BF5			l_01D0
  1017
  1018 				; optimize OK (loadmid.inc), line = 31
  1019
  1020 8BF5 A5 E3			lda _ADR+1
  1021 8BF7 C9 D8			cmp #$D8
  1022 8BF9 90 0D			jcc l_01E4
  1023 8BFB A9 00			lda #$00
  1024 8BFD 8D F0 3E			sta LOADSIZE
  1025 8C00 A9 FF			lda #$FF
  1026 8C02 8D F1 3E			sta LOADSIZE+1
  1027 8C05 4C 3E 8C			jmp l_01F2
  1028 8C08			l_01E4
  1029
  1030 				; optimize OK (loadmid.inc), line = 32
  1031
  1032 8C08 A5 E3			lda _ADR+1
  1033 8C0A C9 C0			cmp #$C0
  1034 8C0C 90 0D			jcc l_0203
  1035 8C0E A9 00			lda #$00
  1036 8C10 8D F0 3E			sta LOADSIZE
  1037 8C13 A9 D0			lda #$D0
  1038 8C15 8D F1 3E			sta LOADSIZE+1
  1039 8C18 4C 3E 8C			jmp l_0211
  1040 8C1B			l_0203
  1041
  1042 				; optimize OK (loadmid.inc), line = 33
  1043
  1044 8C1B A5 E3			lda _ADR+1
  1045 8C1D C9 A8			cmp #$A8
  1046 8C1F 90 0D			jcc l_0222
  1047 8C21 A9 00			lda #$00
  1048 8C23 8D F0 3E			sta LOADSIZE
  1049 8C26 A9 C0			lda #$C0
  1050 8C28 8D F1 3E			sta LOADSIZE+1
  1051 8C2B 4C 3E 8C			jmp l_0230
  1052 8C2E			l_0222
  1053
  1054 				; optimize OK (loadmid.inc), line = 34
  1055
  1056 8C2E A5 E3			lda _ADR+1
  1057 8C30 C9 40			cmp #$40
  1058 8C32 90 0A			jcc l_0241
  1059 8C34 A9 00			lda #$00
  1060 8C36 8D F0 3E			sta LOADSIZE
  1061 8C39 A9 80			lda #$80
  1062 8C3B 8D F1 3E			sta LOADSIZE+1
  1063 8C3E			l_0241
  1064 8C3E			l_0230
  1065 8C3E			l_0211
  1066 8C3E			l_01F2
  1067
  1068 				; optimize OK (loadmid.inc), line = 35
  1069
  1070 8C3E AD F0 3E			lda LOADSIZE
  1071 8C41 38 E5 E2			sub _ADR
  1072 8C44 8D F0 3E			sta LOADSIZE
  1073 8C47 AD F1 3E			lda LOADSIZE+1
  1074 8C4A E5 E3			sbc _ADR+1
  1075 8C4C 8D F1 3E			sta LOADSIZE+1
  1076
  1077 				; optimize OK (loadmid.inc), line = 36
  1078
  1079 8C4F				.LOCAL
  1080 8C4F A9 00			lda #$00
  1081 8C51 38 ED F5 3E			sub LEN+3
  1082 8C55 D0 21			bne L4
  1083 8C57 A9 00			lda #$00
  1084 8C59 CD F4 3E			cmp LEN+2
  1085 8C5C D0 0E			bne L1
  1086 8C5E AD F1 3E			lda LOADSIZE+1
  1087 8C61 CD F3 3E			cmp LEN+1
  1088 8C64 D0 06			bne L1
  1089 8C66 AD F0 3E			lda LOADSIZE
  1090 8C69 CD F2 3E			cmp LEN
  1091 8C6C F0 10		L1	beq L5
  1092 8C6E B0 04			bcs L3
  1093 8C70 A9 FF			lda #$FF
  1094 8C72 D0 0A			bne L5
  1095 8C74 A9 01		L3	lda #$01
  1096 8C76 D0 06			bne L5
  1097 8C78 50 04		L4	bvc L5
  1098 8C7A 49 FF			eor #$FF
  1099 8C7C 09 01			ora #$01
  1100 8C7E			L5
  1101 					.ENDL
  1102 8C7E 30 0E			jmi l_025B
  1103 8C80 F0 0C			jeq l_025B
  1104 8C82 AD F2 3E			lda LEN
  1105 8C85 8D F0 3E			sta LOADSIZE
  1106 8C88 AD F3 3E			lda LEN+1
  1107 8C8B 8D F1 3E			sta LOADSIZE+1
  1108 8C8E			l_025B
  1109
  1110 				; optimize OK (loadmid.inc), line = 37
  1111
  1112 8C8E AD F1 3E			lda LOADSIZE+1
  1113 8C91 0D F0 3E			ora LOADSIZE
  1114 8C94 D0 03 4C E8 8B		jeq l_01BD
  1115 8C99			@exit
  1116 					.ifdef @new
  1117 					lda <@VarData
  1118 					sta :ztmp
  1119 					lda >@VarData
  1120 					ldy #@VarDataSize-1
  1121 					jmp @FreeMem
  1122 					els
  1123 8C99 60				rts						; ret
  1124 					eif
  1125 				.endl
  1126 8C9A			l_019B
  1127
  1128 				; optimize OK (loadmid.inc), line = 41
  1129
  1130 8C9A A9 01			lda #$01
  1131 8C9C 8D B1 3E			sta CIO.OPN.CHN
  1132 8C9F A9 04			lda #$04
  1133 8CA1 8D B2 3E			sta CIO.OPN.AX1
  1134 8CA4 A9 00			lda #$00
  1135 8CA6 8D B3 3E			sta CIO.OPN.AX2
  1136 8CA9 AD E2 3E			lda FN
  1137 8CAC 8D B4 3E			sta CIO.OPN.DEVICE
  1138 8CAF AD E3 3E			lda FN+1
  1139 8CB2 8D B5 3E			sta CIO.OPN.DEVICE+1
  1140 8CB5 20 70 8A			jsr CIO.OPN
  1141
  1142 				; optimize OK (loadmid.inc), line = 42
  1143
  1144 8CB8 AD 87 3E			lda SYSTEM.IORESULT
  1145 8CBB 10 0B			jpl l_0287
  1146
  1147 				; optimize OK (loadmid.inc), line = 44
  1148
  1149 8CBD 8D E4 3E			sta RESULT
  1150
  1151 				; optimize OK (loadmid.inc), line = 45
  1152
  1153 8CC0 A9 01			lda #$01
  1154 8CC2 20 AE 8A			jsr CIO.CLS
  1155 8CC5 4C 06 8F			jmp @exit					; exit
  1156 8CC8			l_0287
  1157
  1158 				; optimize OK (loadmid.inc), line = 49
  1159
  1160 8CC8 AD 08 95			lda MIDTRACKS
  1161 8CCB 8D F6 3E			sta TRKDATA
  1162 8CCE AD 09 95			lda MIDTRACKS+1
  1163 8CD1 8D F7 3E			sta TRKDATA+1
  1164
  1165 				; optimize OK (loadmid.inc), line = 50
  1166
  1167 8CD4 A9 00			lda #$00
  1168 8CD6 8D E5 3E			sta TRACKCOUNT
  1169
  1170 				; optimize OK (loadmid.inc), line = 51
  1171
  1172 8CD9 A9 FF			lda #$FF
  1173 8CDB 8D BB 3E			sta TOTALTRACKS
  1174
  1175 				; --- WhileProlog
  1176 8CDE 4C E9 8E			jmp l_02A1
  1177 8CE1			l_02A2
  1178
  1179 				; optimize OK (loadmid.inc), line = 55
  1180
  1181 8CE1 A9 01			lda #$01
  1182 8CE3 85 88			sta CIO.BGET.CHN
  1183 8CE5 A9 E6			lda <CHUNKTAG
  1184 8CE7 85 8C			sta CIO.BGET.BUF
  1185 8CE9 A9 3E			lda >CHUNKTAG
  1186 8CEB 85 8D			sta CIO.BGET.BUF+1
  1187 8CED A9 04			lda #$04
  1188 8CEF 85 84			sta CIO.BGET.CNT
  1189 8CF1 A9 00			lda #$00
  1190 8CF3 85 85			sta CIO.BGET.CNT+1
  1191 8CF5 20 CF 8A			jsr CIO.BGET
  1192
  1193 				; optimize FAIL ('READLONGBI', loadmid.inc), line = 56
  1194
  1195 8CF8 20 94 8B			jsr READLONGBI
  1196 8CFB AD FA 3E			lda READLONGBI.RESULT
  1197 8CFE 8D F2 3E			sta LEN
  1198 8D01 AD FB 3E			lda READLONGBI.RESULT+1
  1199 8D04 8D F3 3E			sta LEN+1
  1200 8D07 AD FC 3E			lda READLONGBI.RESULT+2
  1201 8D0A 8D F4 3E			sta LEN+2
  1202 8D0D AD FD 3E			lda READLONGBI.RESULT+3
  1203 8D10 8D F5 3E			sta LEN+3
  1204
  1205 				; optimize OK (loadmid.inc), line = 57
  1206
  1207 8D13 AD E9 3E			lda CHUNKTAG+3
  1208 8D16 49 64			eor #$64
  1209 8D18 F0 03 4C BC 8D		jne l_02BA
  1210 8D1D AD E8 3E			lda CHUNKTAG+2
  1211 8D20 49 68			eor #$68
  1212 8D22 F0 03 4C BC 8D		jne l_02BA
  1213 8D27 AD E7 3E			lda CHUNKTAG+1
  1214 8D2A 49 54			eor #$54
  1215 8D2C F0 03 4C BC 8D		jne l_02BA
  1216 8D31 AD E6 3E			lda CHUNKTAG
  1217 8D34 49 4D			eor #$4D
  1218 8D36 F0 03 4C BC 8D		jne l_02BA
  1219
  1220 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 59
  1221
  1222 8D3B 20 70 8B			jsr READWORDBI
  1223 8D3E AD F8 3E			lda READWORDBI.RESULT
  1224 8D41 8D BA 3E			sta FORMAT
  1225
  1226 				; optimize OK (loadmid.inc), line = 60
  1227
  1228 8D44 F0 0C			jeq l_02DD
  1229 8D46 C9 01			cmp #$01
  1230 8D48 F0 08			jeq l_02DD
  1231
  1232 				; optimize OK (loadmid.inc), line = 62
  1233
  1234 8D4A A9 64			lda #$64
  1235 8D4C 8D 87 3E			sta SYSTEM.IORESULT
  1236 8D4F 4C FB 8E			jmp b_02A2					; break
  1237 8D52			l_02DD
  1238
  1239 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 65
  1240
  1241 8D52 20 70 8B			jsr READWORDBI
  1242 8D55 AD F8 3E			lda READWORDBI.RESULT
  1243 8D58 8D BB 3E			sta TOTALTRACKS
  1244
  1245 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 66
  1246
  1247 8D5B 20 70 8B			jsr READWORDBI
  1248 8D5E AD F8 3E			lda READWORDBI.RESULT
  1249 8D61 8D EA 3E			sta V
  1250 8D64 AD F9 3E			lda READWORDBI.RESULT+1
  1251 8D67 8D EB 3E			sta V+1
  1252
  1253 				; optimize OK (loadmid.inc), line = 67
  1254
  1255 8D6A 30 0F			jmi l_0301
  1256
  1257 				; optimize OK (loadmid.inc), line = 68
  1258
  1259 8D6C AD EA 3E			lda V
  1260 8D6F 8D BC 3E			sta TICKDIV
  1261 8D72 AD EB 3E			lda V+1
  1262 8D75 8D BD 3E			sta TICKDIV+1
  1263 8D78 4C B9 8D			jmp l_0310
  1264 8D7B			l_0301
  1265
  1266 				; optimize OK (loadmid.inc), line = 72
  1267
  1268 8D7B AD EB 3E			lda V+1
  1269 8D7E 29 7F			and #$7F
  1270 8D80 8D C2 3E			sta FPS
  1271
  1272 				; optimize OK (loadmid.inc), line = 73
  1273
  1274 8D83 8D 00 3F			sta @CASETMP_0003
  1275 8D86 C9 E8			cmp #$E8
  1276 8D88 D0 08			jne l_0328
  1277 				@
  1278
  1279 				; optimize OK (loadmid.inc), line = 74
  1280
  1281 8D8A A9 18			lda #$18
  1282 8D8C 8D C2 3E			sta FPS
  1283
  1284 8D8F 4C B3 8D			jmp a_0003
  1285 8D92			l_0328
  1286 8D92 C9 E7			cmp #$E7
  1287 8D94 D0 08			jne l_0335
  1288 				@
  1289
  1290 				; optimize OK (loadmid.inc), line = 75
  1291
  1292 8D96 A9 19			lda #$19
  1293 8D98 8D C2 3E			sta FPS
  1294
  1295 8D9B 4C B3 8D			jmp a_0003
  1296 8D9E			l_0335
  1297 8D9E C9 E3			cmp #$E3
  1298 8DA0 D0 08			jne l_0342
  1299 				@
  1300
  1301 				; optimize OK (loadmid.inc), line = 76
  1302
  1303 8DA2 A9 1D			lda #$1D
  1304 8DA4 8D C2 3E			sta FPS
  1305
  1306 8DA7 4C B3 8D			jmp a_0003
  1307 8DAA			l_0342
  1308 8DAA C9 E2			cmp #$E2
  1309 8DAC D0 05			jne l_034F
  1310 				@
  1311
  1312 				; optimize OK (loadmid.inc), line = 77
  1313
  1314 8DAE A9 1E			lda #$1E
  1315 8DB0 8D C2 3E			sta FPS
  1316
  1317 8DB3			l_034F
  1318 8DB3			a_0003
  1319
  1320 				; optimize OK (loadmid.inc), line = 79
  1321
  1322 8DB3 AD EA 3E			lda V
  1323 8DB6 8D C3 3E			sta FSD
  1324 8DB9			l_0310
  1325 8DB9 4C E9 8E			jmp l_036D
  1326 8DBC			l_02BA
  1327
  1328 				; optimize OK (loadmid.inc), line = 83
  1329
  1330 8DBC AD E9 3E			lda CHUNKTAG+3
  1331 8DBF 49 6B			eor #$6B
  1332 8DC1 F0 03 4C E4 8E		jne l_037D
  1333 8DC6 AD E8 3E			lda CHUNKTAG+2
  1334 8DC9 49 72			eor #$72
  1335 8DCB F0 03 4C E4 8E		jne l_037D
  1336 8DD0 AD E7 3E			lda CHUNKTAG+1
  1337 8DD3 49 54			eor #$54
  1338 8DD5 F0 03 4C E4 8E		jne l_037D
  1339 8DDA AD E6 3E			lda CHUNKTAG
  1340 8DDD 49 4D			eor #$4D
  1341 8DDF F0 03 4C E4 8E		jne l_037D
  1342
  1343 				; optimize FAIL (0, loadmid.inc), line = 85
  1344
  1345 8DE4 EE E5 3E			inc TRACKCOUNT
  1346
  1347 				; optimize OK (loadmid.inc), line = 87
  1348
  1349 8DE7 AC F6 3E 84 82 AC + 	mwy TRKDATA :bp2
  1350 8DF1 A0 00			ldy #$00
  1351 8DF3 98				tya
  1352 8DF4 91 82			sta (:bp2),y
  1353
  1354 				; optimize OK (loadmid.inc), line = 88
  1355
  1356 8DF6 A0 04			ldy #$04
  1357 8DF8 91 82			sta (:bp2),y
  1358 8DFA C8				iny
  1359 8DFB 91 82			sta (:bp2),y
  1360 8DFD C8				iny
  1361 8DFE 91 82			sta (:bp2),y
  1362 8E00 C8				iny
  1363 8E01 91 82			sta (:bp2),y
  1364
  1365 				; optimize OK (loadmid.inc), line = 89
  1366
  1367 8E03 A0 01			ldy #$01
  1368 8E05 A5 E1			lda _BANK
  1369 8E07 91 82			sta (:bp2),y
  1370
  1371 				; optimize OK (loadmid.inc), line = 90
  1372
  1373 8E09 C8				iny
  1374 8E0A A5 E2			lda _ADR
  1375 8E0C 91 82			sta (:bp2),y
  1376 8E0E C8				iny
  1377 8E0F A5 E3			lda _ADR+1
  1378 8E11 91 82			sta (:bp2),y
  1379
  1380 				; -------------------  ASM Block 00000071  -------------------
  1381
  1382 				 ldy _bank \ lda $100,y \ sta PORTB 
  1382 8E13 A4 E1		 LDY _BANK 
  1382 8E15 B9 00 01		 LDA $100,Y 
  1382 8E18 8D 01 D3		 STA PORTB 
  1383 				; --- WhileProlog
  1384 8E1B 4C C0 8E			jmp l_0397
  1385 8E1E			l_0398
  1386
  1387 				; optimize FAIL (':TMP', loadmid.inc), line = 96
  1388
  1389 8E1E AD DC 3E			lda LOADPROCESS
  1390 8E21 85 91			sta :TMP+1
  1391 8E23 AD DD 3E			lda LOADPROCESS+1
  1392 8E26 85 92			sta :TMP+2
  1393 8E28 A9 4C			lda #$4C
  1394 8E2A 85 90			sta :TMP
  1395 8E2C E8				inx
  1396 8E2D AD E5 3E 95 94		mva TRACKCOUNT :STACKORIGIN,x
  1397 8E32 20 90 00			jsr :TMP
  1398
  1399 				; optimize FAIL ('CHECKLOADSIZE', loadmid.inc), line = 97
  1400
  1401 8E35 20 E0 8B			jsr CHECKLOADSIZE
  1402
  1403 				; optimize OK (loadmid.inc), line = 98
  1404
  1405 8E38 AD 87 3E			lda SYSTEM.IORESULT
  1406 8E3B C9 01			cmp #$01
  1407 8E3D F0 03			jeq l_03AF
  1408 8E3F 4C D3 8E			jmp b_0398					; break
  1409 8E42			l_03AF
  1410
  1411 				; optimize OK (loadmid.inc), line = 100
  1412
  1413 8E42 A5 E3			lda _ADR+1
  1414 8E44 C9 C0			cmp #$C0
  1415 8E46 90 2F			jcc l_03C3
  1416
  1417 				; optimize OK (loadmid.inc), line = 102
  1418
  1419 8E48 A9 00			lda #$00
  1420 8E4A 8D FE 3E			sta _BGET.DEST
  1421 8E4D A9 40			lda #$40
  1422 8E4F 8D FF 3E			sta _BGET.DEST+1
  1423 8E52 20 C4 8B			jsr _BGET
  1424
  1425 				; optimize OK (loadmid.inc), line = 103
  1426
  1427 8E55 AD 07 8F			lda RBUF
  1428 8E58 85 88			sta SYSTEM.MOVE_0153.SOURCE
  1429 8E5A AD 08 8F			lda RBUF+1
  1430 8E5D 85 89			sta SYSTEM.MOVE_0153.SOURCE+1
  1431 8E5F A5 E2			lda _PTR
  1432 8E61 85 8C			sta SYSTEM.MOVE_0153.DEST
  1433 8E63 A5 E3			lda _PTR+1
  1434 8E65 85 8D			sta SYSTEM.MOVE_0153.DEST+1
  1435 8E67 AD F0 3E			lda LOADSIZE
  1436 8E6A 85 84			sta SYSTEM.MOVE_0153.COUNT
  1437 8E6C AD F1 3E			lda LOADSIZE+1
  1438 8E6F 85 85			sta SYSTEM.MOVE_0153.COUNT+1
  1439 8E71				.local +MAIN.SYSTEM.MOVE_0153
  1440 8E71				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0153.M@INLINE [Source: MIDICar Player.a65]
     4 8E71 20 D9 82			jsr @move
Source: MIDICar Player.a65
  1441 					.endl
  1442 8E74 4C 84 8E			jmp l_03D6
  1443 8E77			l_03C3
  1444
  1445 				; optimize OK (loadmid.inc), line = 106
  1446
  1447 8E77 A5 E2			lda _PTR
  1448 8E79 8D FE 3E			sta _BGET.DEST
  1449 8E7C A5 E3			lda _PTR+1
  1450 8E7E 8D FF 3E			sta _BGET.DEST+1
  1451 8E81 20 C4 8B			jsr _BGET
  1452 8E84			l_03D6
  1453
  1454 				; optimize OK (loadmid.inc), line = 108
  1455
  1456 8E84 AD 87 3E			lda SYSTEM.IORESULT
  1457 8E87 C9 01			cmp #$01
  1458 8E89 F0 03			jeq l_03EB
  1459 8E8B 4C D3 8E			jmp b_0398					; break
  1460 8E8E			l_03EB
  1461
  1462 				; optimize OK (loadmid.inc), line = 110
  1463
  1464 8E8E A5 E2			lda _ADR
  1465 8E90 18 6D F0 3E			add LOADSIZE
  1466 8E94 85 E2			sta _ADR
  1467 8E96 A5 E3			lda _ADR+1
  1468 8E98 6D F1 3E			adc LOADSIZE+1
  1469 8E9B 85 E3			sta _ADR+1
  1470
  1471 				; optimize OK (loadmid.inc), line = 111
  1472
  1473 8E9D AD F2 3E			lda LEN
  1474 8EA0 38 ED F0 3E			sub LOADSIZE
  1475 8EA4 8D F2 3E			sta LEN
  1476 8EA7 AD F3 3E			lda LEN+1
  1477 8EAA ED F1 3E			sbc LOADSIZE+1
  1478 8EAD 8D F3 3E			sta LEN+1
  1479 8EB0 AD F4 3E			lda LEN+2
  1480 8EB3 E9 00			sbc #$00
  1481 8EB5 8D F4 3E			sta LEN+2
  1482 8EB8 AD F5 3E			lda LEN+3
  1483 8EBB E9 00			sbc #$00
  1484 8EBD 8D F5 3E			sta LEN+3
  1485 8EC0			l_0397
  1486
  1487 				; optimize OK (loadmid.inc), line = 94
  1488
  1489 8EC0 AD F5 3E			lda LEN+3
  1490 8EC3 30 0E			bmi @+
  1491 8EC5 0D F4 3E			ora LEN+2
  1492 8EC8 0D F3 3E			ora LEN+1
  1493 8ECB 0D F2 3E			ora LEN
  1494 8ECE F0 03 4C 1E 8E		jne l_0398
  1495 				@
  1496 8ED3			b_0398
  1497
  1498 				; optimize OK (loadmid.inc), line = 113
  1499
  1500 8ED3 AD F6 3E			lda TRKDATA
  1501 8ED6 18 69 09			add #$09
  1502 8ED9 8D F6 3E			sta TRKDATA
  1503 8EDC 90 03			scc
  1504 8EDE EE F7 3E			inc TRKDATA+1
  1505 8EE1 4C E9 8E			jmp l_0406
  1506 8EE4			l_037D
  1507
  1508 				; optimize OK (loadmid.inc), line = 115
  1509
  1510 8EE4 A9 66			lda #$66
  1511 8EE6 8D 87 3E			sta SYSTEM.IORESULT
  1512 8EE9			l_0406
  1513 8EE9			l_036D
  1514 8EE9			l_02A1
  1515
  1516 				; optimize OK (loadmid.inc), line = 53
  1517
  1518 8EE9 AD 87 3E			lda SYSTEM.IORESULT
  1519 8EEC C9 01			cmp #$01
  1520 8EEE D0 0B			jne l_02A2w
  1521 8EF0 AD E5 3E			lda TRACKCOUNT
  1522 8EF3 CD BB 3E			cmp TOTALTRACKS
  1523 8EF6 B0 03 4C E1 8C		jcc l_02A2
  1524 8EFB			l_02A2w
  1525 8EFB			b_02A2
  1526
  1527 				; optimize OK (loadmid.inc), line = 117
  1528
  1529 8EFB AD 87 3E			lda SYSTEM.IORESULT
  1530 8EFE 8D E4 3E			sta RESULT
  1531
  1532 				; optimize OK (loadmid.inc), line = 118
  1533
  1534 8F01 A9 01			lda #$01
  1535 8F03 20 AE 8A			jsr CIO.CLS
  1536 8F06			@exit
  1537
  1538 				; ------------------------------------------------------------
  1539
  1540 = 3EE2			FN	= DATAORIGIN+$0062
  1541 = 3EE4			RESULT	= DATAORIGIN+$0064
  1542 = 4000			LOADBUF_SIZE	= $4000
  1543 = 0001			CIO_CHN	= $01
  1544 = 3EE5			TRACKCOUNT	= DATAORIGIN+$0065
  1545 = 3EE6			CHUNKTAG	= DATAORIGIN+$0066
  1546 = 3EEA			V	= DATAORIGIN+$006A
  1547 = 3EEC			TOP	= DATAORIGIN+$006C
  1548 = 3EEE			ENDADR	= DATAORIGIN+$006E
  1549 = 3EF0			LOADSIZE	= DATAORIGIN+$0070
  1550 = 3EF2			LEN	= DATAORIGIN+$0072
  1551 = 3EF6			TRKDATA	= DATAORIGIN+$0076
  1552 = 3E80			TRKDATA.STATUS	= DATAORIGIN+$0000
  1553 = 3E81			TRKDATA.BANK	= DATAORIGIN+$0001
  1554 = 3E82			TRKDATA.PTR	= DATAORIGIN+$0002
  1555 = 3E84			TRKDATA.TRACKTIME	= DATAORIGIN+$0004
  1556 = 3E88			TRKDATA._EVENT	= DATAORIGIN+$0008
  1557 = 4000			adr.RBUF	= $4000
  1558 8F06			.var RBUF	= adr.RBUF .word
  1559 = 3F00			@CASETMP_0003	= DATAORIGIN+$0080
  1560
  1561 = 3EE2			@VarData	= FN
  1562 = 0021			@VarDataSize	= 33
  1563
  1564 8F06 60				rts						; ret
  1565 = 8F07 00 40		RBUF
  1565 				.endl
  1566
  1567 8F09			.local	SETTEMPO					; PROCEDURE
  1568
  1569 				; optimize OK (settempo.inc), line = 10
  1570
  1571 8F09 A5 F5			lda _TIMERSTATUS
  1572 8F0B 49 80			eor #$80
  1573 8F0D 85 F5			sta _TIMERSTATUS
  1574
  1575 				; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 13
  1576
  1577 8F0F E8				inx
  1578 8F10 AD BE 3E 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  1579 8F15 AD BF 3E 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  1580 8F1A AD C0 3E 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  1581 8F1F AD C1 3E 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  1582 8F24 E8				inx
  1583 8F25 AD DE 3E 95 94		mva TEMPOSHIFT :STACKORIGIN,x
  1584 8F2A AD DF 3E 95 A4		mva TEMPOSHIFT+1 :STACKORIGIN+STACKWIDTH,x
  1585 8F2F AD E0 3E 95 B4		mva TEMPOSHIFT+2 :STACKORIGIN+STACKWIDTH*2,x
  1586 8F34 AD E1 3E 95 C4		mva TEMPOSHIFT+3 :STACKORIGIN+STACKWIDTH*3,x
  1587 8F39 20 1D 82			jsr addEAX_ECX
  1588 8F3C AD BC 3E 95 94		mva TICKDIV :STACKORIGIN,x
  1589 8F41 AD BD 3E 95 A4		mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
  1590 8F46 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1591 8F4A A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1592 8F4E 20 98 83			jsr divmulINT.DIV
  1593 8F51 CA				dex
  1594 8F52 B5 94			lda :STACKORIGIN,x
  1595 8F54 8D 05 3F			sta _FREQ
  1596 8F57 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1597 8F59 8D 06 3F			sta _FREQ+1
  1598 8F5C B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1599 8F5E 8D 07 3F			sta _FREQ+2
  1600 8F61 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1601 8F63 8D 08 3F			sta _FREQ+3
  1602
  1603 				; optimize FAIL ('@I2F_m', settempo.inc), line = 14
  1604
  1605 8F66 AD 05 3F 95 94		mva _FREQ :STACKORIGIN,x
  1606 8F6B AD 06 3F 95 A4		mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1607 8F70 AD 07 3F 95 B4		mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1608 8F75 AD 08 3F 95 C4		mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1609 8F7A E8				inx
  1610 8F7B A9 00 95 94			mva #$00 :STACKORIGIN,x
  1611 8F7F A9 24 95 A4			mva #$24 :STACKORIGIN+STACKWIDTH,x
  1612 8F83 A9 74 95 B4			mva #$74 :STACKORIGIN+STACKWIDTH*2,x
  1613 8F87 A9 49 95 C4			mva #$49 :STACKORIGIN+STACKWIDTH*3,x
  1614 8F8B 20 B8 88			jsr @I2F_m
  1615 8F8E 20 7A 87			jsr @FDIV
  1616 8F91 CA				dex
  1617 8F92 B5 94			lda :STACKORIGIN,x
  1618 8F94 8D 01 3F			sta FREQ
  1619 8F97 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1620 8F99 8D 02 3F			sta FREQ+1
  1621 8F9C B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1622 8F9E 8D 03 3F			sta FREQ+2
  1623 8FA1 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1624 8FA3 8D 04 3F			sta FREQ+3
  1625
  1626 				; optimize FAIL ('@FDIV', settempo.inc), line = 15
  1627
  1628 8FA6 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1629 8FAA A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1630 8FAE A9 80 95 B4			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  1631 8FB2 A9 3F 95 C4			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  1632 8FB6 E8				inx
  1633 8FB7 AD 01 3F 95 94		mva FREQ :STACKORIGIN,x
  1634 8FBC AD 02 3F 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1635 8FC1 AD 03 3F 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1636 8FC6 AD 04 3F 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1637 8FCB 20 7A 87			jsr @FDIV
  1638 8FCE CA				dex
  1639 8FCF B5 94			lda :STACKORIGIN,x
  1640 8FD1 8D 01 3F			sta FREQ
  1641 8FD4 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1642 8FD6 8D 02 3F			sta FREQ+1
  1643 8FD9 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1644 8FDB 8D 03 3F			sta FREQ+2
  1645 8FDE B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1646 8FE0 8D 04 3F			sta FREQ+3
  1647
  1648 				; optimize FAIL ('@FDIV', settempo.inc), line = 24
  1649
  1650 8FE3 A9 F5 95 94			mva #$F5 :STACKORIGIN,x
  1651 8FE7 A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1652 8FEB A9 7A 95 B4			mva #$7A :STACKORIGIN+STACKWIDTH*2,x
  1653 8FEF A9 43 95 C4			mva #$43 :STACKORIGIN+STACKWIDTH*3,x
  1654 8FF3 E8				inx
  1655 8FF4 AD 01 3F 95 94		mva FREQ :STACKORIGIN,x
  1656 8FF9 AD 02 3F 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1657 8FFE AD 03 3F 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1658 9003 AD 04 3F 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1659 9008 20 7A 87			jsr @FDIV
  1660 900B CA				dex
  1661 900C B5 94			lda :STACKORIGIN,x
  1662 900E 8D 0A 3F			sta RATIO
  1663 9011 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1664 9013 8D 0B 3F			sta RATIO+1
  1665 9016 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1666 9018 8D 0C 3F			sta RATIO+2
  1667 901B B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1668 901D 8D 0D 3F			sta RATIO+3
  1669
  1670 				; optimize FAIL ('@F2I', settempo.inc), line = 25
  1671
  1672 9020 A9 01 95 94			mva #$01 :STACKORIGIN,x
  1673 9024 E8				inx
  1674 9025 AD 0A 3F 95 94		mva RATIO :STACKORIGIN,x
  1675 902A AD 0B 3F 95 A4		mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
  1676 902F AD 0C 3F 95 B4		mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
  1677 9034 AD 0D 3F 95 C4		mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
  1678 9039 20 09 88			jsr @F2I
  1679 903C A9 00 95 A3			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  1680 9040 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1681 9044 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1682 9048 B5 93			lda :STACKORIGIN-1,x
  1683 904A 18 75 94			add :STACKORIGIN,x
  1684 904D 8D 0E 3F			sta _RATIO
  1685 9050 CA				dex
  1686 9051 CA				dex
  1687
  1688 				; optimize OK (settempo.inc), line = 26
  1689
  1690 9052 AD 0E 3F			lda _RATIO
  1691 9055 C9 10			cmp #$10
  1692 9057 90 12			jcc l_0484
  1693 9059 A9 00			lda #$00
  1694 905B 8D 0A 3F			sta RATIO
  1695 905E 8D 0B 3F			sta RATIO+1
  1696 9061 A9 70			lda #$70
  1697 9063 8D 0C 3F			sta RATIO+2
  1698 9066 A9 41			lda #$41
  1699 9068 8D 0D 3F			sta RATIO+3
  1700 906B			l_0484
  1701
  1702 				; optimize OK (settempo.inc), line = 29
  1703
  1704 906B A5 F5			lda _TIMERSTATUS
  1705 906D 29 C0			and #$C0
  1706 906F 0D 0E 3F			ora _RATIO
  1707 9072 85 F5			sta _TIMERSTATUS
  1708
  1709 				; optimize OK (settempo.inc), line = 30
  1710
  1711 9074 A9 01			lda #$01
  1712 9076 85 F4			sta _SUBCNT
  1713
  1714 				; optimize FAIL ('@I2F', settempo.inc), line = 32
  1715
  1716 9078 E8				inx
  1717 9079 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1718 907D A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1719 9081 E8				inx
  1720 9082 AD 01 3F 95 94		mva FREQ :STACKORIGIN,x
  1721 9087 AD 02 3F 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1722 908C AD 03 3F 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1723 9091 AD 04 3F 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1724 9096 E8				inx
  1725 9097 AD 0E 3F 95 94		mva _RATIO :STACKORIGIN,x
  1726 909C A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1727 90A0 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1728 90A4 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1729 90A8 20 93 88			jsr @I2F
  1730 90AB 20 C3 86			jsr @FMUL
  1731 90AE CA				dex
  1732 90AF A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1733 90B3 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1734 90B7 20 B8 88			jsr @I2F_m
  1735 90BA 20 7A 87			jsr @FDIV
  1736 90BD CA				dex
  1737 90BE 20 E3 84			jsr @FROUND
  1738 90C1 20 09 88			jsr @F2I
  1739 90C4 B5 94			lda :STACKORIGIN,x
  1740 90C6 8D 09 3F			sta FDIV
  1741
  1742 				; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 36
  1743
  1744 90C9 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1745 90CD A9 87 95 A4			mva #$87 :STACKORIGIN+STACKWIDTH,x
  1746 90D1 A9 93 95 B4			mva #$93 :STACKORIGIN+STACKWIDTH*2,x
  1747 90D5 A9 03 95 C4			mva #$03 :STACKORIGIN+STACKWIDTH*3,x
  1748 90D9 E8				inx
  1749 90DA AD BE 3E 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  1750 90DF AD BF 3E 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  1751 90E4 AD C0 3E 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  1752 90E9 AD C1 3E 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  1753 90EE 20 98 83			jsr divmulINT.DIV
  1754 90F1 CA				dex
  1755 90F2 B5 94			lda :STACKORIGIN,x
  1756 90F4 8D C8 3E			sta BPM
  1757 90F7 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1758 90F9 8D C9 3E			sta BPM+1
  1759 90FC CA				dex
  1760
  1761 				; optimize OK (settempo.inc), line = 39
  1762
  1763 90FD A5 F5			lda _TIMERSTATUS
  1764 90FF 49 80			eor #$80
  1765 9101 85 F5			sta _TIMERSTATUS
  1766
  1767 				; -------------------  ASM Block 00000072  -------------------
  1768
  1769 9103 78			    sei  // disable IRQ
  1770 				  // reset POKEY
  1771 9104 A9 00		    lda #$00
  1772 9106 A0 03		    ldy #$03
  1773 9108 8D 08 D2		    sta AUDCTL
  1774 910B 8D 01 D2		    sta AUDC1
  1775 910E 8C 0F D2		    sty SKCTL
  1776 				  // setup TIMER1
  1777 9111 8D 08 D2		    sta AUDCTL
  1778 9114 AD 09 3F 8D 00 D2	    mva FDIV AUDF1
  1779 				  // initialize IRQ for TIMER1
  1780 				    // lda irqens
  1781 				    // ora #$01
  1782 				    // sta irqens
  1783 				    // sta irqen
  1784 				  // start timer strobe
  1785 911A 8D 09 D2		    sta stimer
  1786
  1787 911D 58			    cli  // enable IRQ
  1788 				  
  1789 				; ------------------------------------------------------------
  1790
  1791 = 3F01			FREQ	= DATAORIGIN+$0081
  1792 = 3F05			_FREQ	= DATAORIGIN+$0085
  1793 = 3F09			FDIV	= DATAORIGIN+$0089
  1794 = 3F0A			RATIO	= DATAORIGIN+$008A
  1795 = 3F0E			_RATIO	= DATAORIGIN+$008E
  1796
  1797 = 3F01			@VarData	= FREQ
  1798 = 000E			@VarDataSize	= 14
  1799
  1800 911E			@exit
  1801 					.ifdef @new
  1802 					lda <@VarData
  1803 					sta :ztmp
  1804 					lda >@VarData
  1805 					ldy #@VarDataSize-1
  1806 					jmp @FreeMem
  1807 					els
  1808 911E 60				rts						; ret
  1809 					eif
  1810 				.endl
  1811
  1812 911F			.local	PROCESSTRACK					; PROCEDURE | KEEP
  1813
  1814 911F 4C 35 93			jmp l_04C8
  1815
  1816 9122			.local	READB						; PROCEDURE | INLINE
  1817
  1818 					.MACRO m@INLINE
  1819 				
  1820 				; optimize OK (processtrack.inc), line = 11
  1821 				
  1822 					ldy #$00
  1823 					lda (_PTR),y
  1824 					sta EVENT
  1825 				
  1826 				; optimize FAIL (0, processtrack.inc), line = 12
  1827 				
  1828 					inc _ADR
  1829 					sne
  1830 					inc _ADR+1
  1831 				
  1832 				; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 13
  1833 				
  1834 					jsr MEMBOUNDCHECK
  1835 					.ENDM
  1836 9122			@exit
  1837 				.endl
  1838
  1839 9122			.local	READVARL					; PROCEDURE | ASSEMBLER
  1840
  1841 				; -------------------  ASM Block 00000073  -------------------
  1842
  1843 9122			    icl 'midfile/asms/readvar.asm'
Source: readvar.asm
     1 = 00F6			A equ _delta;
     2 = 00F7			B equ _delta+1;
     3 = 00F8			C equ _delta+2;
     4 = 00F9			D equ _delta+3;
     5
     6 				  .MACRO m@read2A
     7 				    ldy #0
     8 				    lda (_PTR),y
     9 				    sta A
    10 				    inc _ADR
    11 				    sne
    12 				    inc _ADR+1
    13 				    jsr MEMBOUNDCHECK
    14 				    lda A
    15 				  .ENDM
    16
    17 9122 A0 00		  ldy #0
    18 9124 84 F6		  sty A
    19 9126 84 F7		  sty B
    20 9128 84 F8		  sty C
    21 912A 84 F9		  sty D
    22
    23 				// read block
    24
    25 				// read 1st byte to A
    26 912C			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 912C A0 00		    ldy #0
     2 912E B1 E2		    lda (_PTR),y
     3 9130 85 F6		    sta A
     4 9132 E6 E2		    inc _ADR
     5 9134 D0 02		    sne
     6 9136 E6 E3		    inc _ADR+1
     7 9138 20 24 8B		    jsr MEMBOUNDCHECK
     8 913B A5 F6		    lda A
Source: readvar.asm
    27
    28 913D 10 53		  bpl endRead
    29
    30 				// move A to B and read 2nd byte to A
    31 				// B <- A = 4th readed byte
    32 913F 29 7F			and #$7F
    33 9141 85 F7			sta B
    34
    35 				// read 2nd byte
    36 9143			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 9143 A0 00		    ldy #0
     2 9145 B1 E2		    lda (_PTR),y
     3 9147 85 F6		    sta A
     4 9149 E6 E2		    inc _ADR
     5 914B D0 02		    sne
     6 914D E6 E3		    inc _ADR+1
     7 914F 20 24 8B		    jsr MEMBOUNDCHECK
     8 9152 A5 F6		    lda A
Source: readvar.asm
    37
    38 9154 10 3C		  bpl endRead
    39
    40 				// mova B to C, A to B and read 3rd byte to A
    41 				// C <- B <- A = 4th readed byte
    42 9156 A5 F7			lda B
    43 9158 85 F8			sta C
    44 915A A5 F6			lda A
    45 915C 29 7F			and #$7F
    46 915E 85 F7			sta B
    47
    48 				// read 3rd
    49 9160			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 9160 A0 00		    ldy #0
     2 9162 B1 E2		    lda (_PTR),y
     3 9164 85 F6		    sta A
     4 9166 E6 E2		    inc _ADR
     5 9168 D0 02		    sne
     6 916A E6 E3		    inc _ADR+1
     7 916C 20 24 8B		    jsr MEMBOUNDCHECK
     8 916F A5 F6		    lda A
Source: readvar.asm
    50
    51 9171 10 1F		  bpl endRead
    52
    53 				// move C to D, B to C, A to B and read 4th byte to A
    54 				// D <- C <- B <- A = 4th readed byte
    55 9173 A5 F8			lda C
    56 9175 85 F9			sta D
    57 9177 A5 F7			lda B
    58 9179 85 F8			sta C
    59 917B A5 F6			lda A
    60 917D 29 7F			and #$7F
    61 917F 85 F7			sta B
    62
    63 				// read 4th
    64 9181			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 9181 A0 00		    ldy #0
     2 9183 B1 E2		    lda (_PTR),y
     3 9185 85 F6		    sta A
     4 9187 E6 E2		    inc _ADR
     5 9189 D0 02		    sne
     6 918B E6 E3		    inc _ADR+1
     7 918D 20 24 8B		    jsr MEMBOUNDCHECK
     8 9190 A5 F6		    lda A
Source: readvar.asm
    65
    66 				// end read block
    67 9192			endRead:
    68
    69 				// decode block
    70 				// 'A' stays as it is
    71
    72 				// 'B' if geather than zero, lets decode
    73 9192 A5 F7		  lda B
    74 9194 F0 0A		  beq decodeC
    75
    76 				// 76543210
    77 				// 0bbbbbbb and %1
    78 				// 0000000b
    79 				//        |
    80 				// +------+ 7:asl
    81 				// v
    82 				// b0000000 ora A
    83 				// baaaaaaa
    84
    85 9196 46 F7		  lsr B
    86 9198 90 06		  bcc decodeC
    87
    88 919A A5 F6		  lda A
    89 919C 09 80		  ora #$80
    90 919E 85 F6		  sta A
    91
    92 91A0			decodeC:
    93 				// 'C' if geather than zero, lets decode
    94 91A0 A5 F8		  lda C
    95 91A2 F0 12		  beq decodeD
    96
    97 				// 76543210
    98 				// 0ccccccc and %11
    99 				// 000000cc
   100 				//       ||
   101 				// +-----+| 6:asl
   102 				// |+-----+
   103 				// vv
   104 				// cc000000 ora B
   105 				// ccbbbbbb
   106 91A4 29 03		  and #%11    // 2
   107 91A6 F0 08		  beq noOrC   // 2**
   108 91A8 A8			  tay         // 2
   109 91A9 B9 CE 91		  lda OrC,y   // 4*
   110 91AC 05 F7		  ora B       // 3
   111 91AE 85 F7		  sta B       // 3
   112
   113 91B0			noOrC:
   114 91B0 A5 F8		  lda C       // 3
   115 91B2 4A			  lsr @       // 2
   116 91B3 4A			  lsr @       // 2
   117 91B4 85 F8		  sta C       // 3
   118 				              //=26*+**
   119
   120 91B6			decodeD:
   121 				// 'D' if geather than zero, lets decode
   122 91B6 A5 F9		  lda D
   123 91B8 F0 13		  beq endDecode
   124
   125 				// 76543210
   126 				// 0ddddddd and %111
   127 				// 00000ddd
   128 				//      |||
   129 				// +----+||
   130 				// |+----+| 5:asl
   131 				// ||+----+
   132 				// vvv
   133 				// ddd00000 ora C
   134 				// dddccccc
   135
   136 91BA 29 07		  and #%111   // 2
   137 91BC F0 08		  beq noOrD   // 2**
   138 91BE A8			  tay         // 2
   139 91BF B9 D2 91		  lda OrD,y   // 4*
   140 91C2 05 F8		  ora C       // 3
   141 91C4 85 F8		  sta C       // 3
   142
   143 91C6			noOrD:
   144 91C6 A5 F9		  lda D       // 3
   145 91C8 4A			  lsr @       // 2
   146 91C9 4A			  lsr @       // 2
   147 91CA 4A			  lsr @       // 2
   148 91CB 85 F9		  sta D       // 3
   149 				              //=28*+**
   150 91CD			endDecode:
   151 91CD 60			  rts
   152
   153 91CE			OrC:
   154 91CE 00			  dta %00000000
   155 91CF 40			  dta %01000000
   156 91D0 80			  dta %10000000
   157 91D1 C0			  dta %11000000
   158
   159 91D2			OrD:
   160 91D2 00			  dta %00000000
   161 91D3 20			  dta %00100000
   162 91D4 40			  dta %01000000
   163 91D5 60			  dta %01100000
   164 91D6 80			  dta %10000000
   165 91D7 A0			  dta %10100000
   166 91D8 C0			  dta %11000000
   167 91D9 E0			  dta %11100000
  1844 				  
  1845 91DA			@exit
  1846 					.ifdef @new
  1847 					lda <@VarData
  1848 					sta :ztmp
  1849 					lda >@VarData
  1850 					ldy #@VarDataSize-1
  1851 					jmp @FreeMem
  1852 					els
  1853 91DA 60				rts						; ret
  1854 					eif
  1855 				.endl
  1856
  1857 91DB			.local	READ24						; PROCEDURE | ASSEMBLER
  1858
  1859 				; -------------------  ASM Block 00000074  -------------------
  1860
  1861 91DB			    icl 'midfile/asms/read24bigendian.pas'
Source: read24bigendian.pas
     1 				  .MACRO m@readByte storeTo
     2 				    ldy #0
     3 				    lda (_PTR),y
     4 				    sta :storeTo
     5 				    inc _ADR
     6 				    sne
     7 				    inc _ADR+1
     8 				    jsr MEMBOUNDCHECK
     9 				  .ENDM
    10
    11 91DB			  m@readByte _delta+2
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 91DB A0 00		    ldy #0
     2 91DD B1 E2		    lda (_PTR),y
     3 91DF 85 F8		    sta _DELTA+2
     4 91E1 E6 E2		    inc _ADR
     5 91E3 D0 02		    sne
     6 91E5 E6 E3		    inc _ADR+1
     7 91E7 20 24 8B		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    12 91EA			  m@readByte _delta+1
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 91EA A0 00		    ldy #0
     2 91EC B1 E2		    lda (_PTR),y
     3 91EE 85 F7		    sta _DELTA+1
     4 91F0 E6 E2		    inc _ADR
     5 91F2 D0 02		    sne
     6 91F4 E6 E3		    inc _ADR+1
     7 91F6 20 24 8B		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    13 91F9			  m@readByte _delta+0
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 91F9 A0 00		    ldy #0
     2 91FB B1 E2		    lda (_PTR),y
     3 91FD 85 F6		    sta _DELTA+0
     4 91FF E6 E2		    inc _ADR
     5 9201 D0 02		    sne
     6 9203 E6 E3		    inc _ADR+1
     7 9205 20 24 8B		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    14 9208 A9 00		  lda #0
    15 920A 85 F9		  sta _delta+3
  1862 				  
  1863 920C			@exit
  1864 					.ifdef @new
  1865 					lda <@VarData
  1866 					sta :ztmp
  1867 					lda >@VarData
  1868 					ldy #@VarDataSize-1
  1869 					jmp @FreeMem
  1870 					els
  1871 920C 60				rts						; ret
  1872 					eif
  1873 				.endl
  1874
  1875 920D			.local	EVENTMIDI3					; PROCEDURE
  1876
  1877 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 4
  1878
  1879 920D 20 39 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1880
  1881 				; optimize FAIL ('m@INLINE', events.inc), line = 5
  1882
  1883 9210				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1884 9210				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9210 A0 00			ldy #$00
     5 9212 B1 E2			lda (_PTR),y
     6 9214 85 FF			sta EVENT
    10 9216 E6 E2			inc _ADR
    11 9218 D0 02			sne
    12 921A E6 E3			inc _ADR+1
    16 921C 20 24 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1885 					.endl
  1886 921F 20 39 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1887
  1888 				; optimize FAIL ('m@INLINE', events.inc), line = 6
  1889
  1890 9222				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1891 9222				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9222 A0 00			ldy #$00
     5 9224 B1 E2			lda (_PTR),y
     6 9226 85 FF			sta EVENT
    10 9228 E6 E2			inc _ADR
    11 922A D0 02			sne
    12 922C E6 E3			inc _ADR+1
    16 922E 20 24 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1892 					.endl
  1893 9231 20 39 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1894
  1895 				; optimize OK (events.inc), line = 15
  1896
  1897 9234 A5 FF			lda EVENT
  1898 9236 F0 12			jeq l_0503
  1899 9238 A5 E8			lda _EVENT
  1900 923A 29 F0			and #$F0
  1901 923C C9 90			cmp #$90
  1902 923E D0 0A			jne l_0503
  1903
  1904 				; optimize OK (events.inc), line = 16
  1905
  1906 9240 A5 E8			lda _EVENT
  1907 9242 29 0F			and #$0F
  1908 9244 A8				tay
  1909 9245 A5 FF			lda MC6850.MC_BYTE
  1910 9247 99 CA 3E			sta adr.CHNVOLUME,y
  1911 924A			l_0503
  1912 924A			@exit
  1913 					.ifdef @new
  1914 					lda <@VarData
  1915 					sta :ztmp
  1916 					lda >@VarData
  1917 					ldy #@VarDataSize-1
  1918 					jmp @FreeMem
  1919 					els
  1920 924A 60				rts						; ret
  1921 					eif
  1922 				.endl
  1923
  1924 924B			.local	EVENTMIDI2					; PROCEDURE
  1925
  1926 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 22
  1927
  1928 924B 20 39 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1929
  1930 				; optimize FAIL ('m@INLINE', events.inc), line = 23
  1931
  1932 924E				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1933 924E				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 924E A0 00			ldy #$00
     5 9250 B1 E2			lda (_PTR),y
     6 9252 85 FF			sta EVENT
    10 9254 E6 E2			inc _ADR
    11 9256 D0 02			sne
    12 9258 E6 E3			inc _ADR+1
    16 925A 20 24 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1934 					.endl
  1935 925D 20 39 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1936 9260			@exit
  1937 					.ifdef @new
  1938 					lda <@VarData
  1939 					sta :ztmp
  1940 					lda >@VarData
  1941 					ldy #@VarDataSize-1
  1942 					jmp @FreeMem
  1943 					els
  1944 9260 60				rts						; ret
  1945 					eif
  1946 				.endl
  1947
  1948 9261			.local	EVENTSYSEX					; PROCEDURE
  1949
  1950 				; optimize FAIL ('READVARL', events.inc), line = 32
  1951
  1952 9261 20 22 91			jsr READVARL
  1953
  1954 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 34
  1955
  1956 9264 20 39 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1957
  1958 				; --- WhileProlog
  1959 9267 4C 7E 92			jmp l_0522
  1960 926A			l_0523
  1961
  1962 				; optimize FAIL ('m@INLINE', events.inc), line = 40
  1963
  1964 926A				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1965 926A				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 926A A0 00			ldy #$00
     5 926C B1 E2			lda (_PTR),y
     6 926E 85 FF			sta EVENT
    10 9270 E6 E2			inc _ADR
    11 9272 D0 02			sne
    12 9274 E6 E3			inc _ADR+1
    16 9276 20 24 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1966 					.endl
  1967
  1968 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 42
  1969
  1970 9279 20 39 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1971
  1972 				; optimize FAIL (0, events.inc), line = 46
  1973
  1974 927C C6 F6			dec _TMP
  1975 927E			l_0522
  1976
  1977 				; optimize OK (events.inc), line = 38
  1978
  1979 927E A5 F6			lda _TMP
  1980 9280 D0 E8			jne l_0523
  1981 9282			@exit
  1982 					.ifdef @new
  1983 					lda <@VarData
  1984 					sta :ztmp
  1985 					lda >@VarData
  1986 					ldy #@VarDataSize-1
  1987 					jmp @FreeMem
  1988 					els
  1989 9282 60				rts						; ret
  1990 					eif
  1991 				.endl
  1992
  1993 9283			.local	EVENTMETA					; PROCEDURE
  1994
  1995 				; optimize FAIL ('m@INLINE', events.inc), line = 58
  1996
  1997 9283				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1998 9283				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9283 A0 00			ldy #$00
     5 9285 B1 E2			lda (_PTR),y
     6 9287 85 FF			sta EVENT
    10 9289 E6 E2			inc _ADR
    11 928B D0 02			sne
    12 928D E6 E3			inc _ADR+1
    16 928F 20 24 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1999 					.endl
  2000
  2001 				; optimize FAIL ('READVARL', events.inc), line = 59
  2002
  2003 9292 20 22 91			jsr READVARL
  2004
  2005 				; optimize OK (events.inc), line = 61
  2006
  2007 9295 A5 FF			lda EVENT
  2008 9297 C9 2F			cmp #$2F
  2009 9299 D0 0B			jne l_054D
  2010
  2011 				; optimize FAIL (0, events.inc), line = 63
  2012
  2013 929B C6 DF			dec PLAYINGTRACKS
  2014
  2015 				; optimize OK (events.inc), line = 64
  2016
  2017 929D A5 E0			lda _STATUS
  2018 929F 09 40			ora #$40
  2019 92A1 85 E0			sta _STATUS
  2020 92A3 4C 34 93			jmp l_0565
  2021 92A6			l_054D
  2022
  2023 				; optimize OK (events.inc), line = 66
  2024
  2025 92A6 A5 FF			lda EVENT
  2026 92A8 C9 51			cmp #$51
  2027 92AA D0 1D			jne l_0577
  2028
  2029 				; optimize FAIL ('READ24', events.inc), line = 68
  2030
  2031 92AC 20 DB 91			jsr READ24
  2032
  2033 				; optimize OK (events.inc), line = 69
  2034
  2035 92AF A5 F6			lda _DELTA
  2036 92B1 8D BE 3E			sta MS_PER_QNOTE
  2037 92B4 A5 F7			lda _DELTA+1
  2038 92B6 8D BF 3E			sta MS_PER_QNOTE+1
  2039 92B9 A5 F8			lda _DELTA+2
  2040 92BB 8D C0 3E			sta MS_PER_QNOTE+2
  2041 92BE A5 F9			lda _DELTA+3
  2042 92C0 8D C1 3E			sta MS_PER_QNOTE+3
  2043
  2044 				; optimize FAIL ('SETTEMPO', events.inc), line = 70
  2045
  2046 92C3 20 09 8F			jsr SETTEMPO
  2047 92C6 4C 34 93			jmp l_0587
  2048 92C9			l_0577
  2049
  2050 				; optimize OK (events.inc), line = 73
  2051
  2052 92C9 A5 FF			lda EVENT
  2053 92CB C9 58			cmp #$58
  2054 92CD D0 53			jne l_0599
  2055
  2056 				; optimize FAIL ('m@INLINE', events.inc), line = 75
  2057
  2058 92CF				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2059 92CF				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 92CF A0 00			ldy #$00
     5 92D1 B1 E2			lda (_PTR),y
     6 92D3 85 FF			sta EVENT
    10 92D5 E6 E2			inc _ADR
    11 92D7 D0 02			sne
    12 92D9 E6 E3			inc _ADR+1
    16 92DB 20 24 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2060 					.endl
  2061 92DE A5 FF			lda EVENT
  2062 92E0 8D C4 3E			sta TACTNUM
  2063
  2064 				; optimize FAIL ('m@INLINE', events.inc), line = 76
  2065
  2066 92E3				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2067 92E3				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 92E3 A0 00			ldy #$00
     5 92E5 B1 E2			lda (_PTR),y
     6 92E7 85 FF			sta EVENT
    10 92E9 E6 E2			inc _ADR
    11 92EB D0 02			sne
    12 92ED E6 E3			inc _ADR+1
    16 92EF 20 24 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2068 					.endl
  2069 92F2 A5 FF			lda EVENT
  2070 92F4 8D C5 3E			sta TACTDENUM
  2071
  2072 				; optimize FAIL ('m@INLINE', events.inc), line = 77
  2073
  2074 92F7				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2075 92F7				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 92F7 A0 00			ldy #$00
     5 92F9 B1 E2			lda (_PTR),y
     6 92FB 85 FF			sta EVENT
    10 92FD E6 E2			inc _ADR
    11 92FF D0 02			sne
    12 9301 E6 E3			inc _ADR+1
    16 9303 20 24 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2076 					.endl
  2077 9306 A5 FF			lda EVENT
  2078 9308 8D C6 3E			sta TICKS_PER_QNOTE
  2079
  2080 				; optimize FAIL ('m@INLINE', events.inc), line = 78
  2081
  2082 930B				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2083 930B				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 930B A0 00			ldy #$00
     5 930D B1 E2			lda (_PTR),y
     6 930F 85 FF			sta EVENT
    10 9311 E6 E2			inc _ADR
    11 9313 D0 02			sne
    12 9315 E6 E3			inc _ADR+1
    16 9317 20 24 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2084 					.endl
  2085 931A A5 FF			lda EVENT
  2086 931C 8D C7 3E			sta TICKS_PER_32ND
  2087 931F 4C 34 93			jmp l_05BF
  2088 9322			l_0599
  2089
  2090 				; --- WhileProlog
  2091 9322 4C 30 93			jmp l_05C1
  2092 9325			l_05C2
  2093
  2094 				; optimize FAIL (0, events.inc), line = 85
  2095
  2096 9325 C6 F6			dec _TMP
  2097
  2098 				; optimize FAIL (0, events.inc), line = 86
  2099
  2100 9327 E6 E2			inc _ADR
  2101 9329 D0 02			sne
  2102 932B E6 E3			inc _ADR+1
  2103
  2104 				; optimize FAIL ('MEMBOUNDCHECK', events.inc), line = 87
  2105
  2106 932D 20 24 8B			jsr MEMBOUNDCHECK
  2107 9330			l_05C1
  2108
  2109 				; optimize OK (events.inc), line = 83
  2110
  2111 9330 A5 F6			lda _TMP
  2112 9332 D0 F1			jne l_05C2
  2113 9334			l_05BF
  2114 9334			l_0587
  2115 9334			l_0565
  2116 9334			@exit
  2117 					.ifdef @new
  2118 					lda <@VarData
  2119 					sta :ztmp
  2120 					lda >@VarData
  2121 					ldy #@VarDataSize-1
  2122 					jmp @FreeMem
  2123 					els
  2124 9334 60				rts						; ret
  2125 					eif
  2126 				.endl
  2127 9335			l_04C8
  2128
  2129 				; -------------------  ASM Block 00000075  -------------------
  2130
  2131 				 ldy _bank \ lda $100,y \ sta PORTB 
  2131 9335 A4 E1		 LDY _BANK 
  2131 9337 B9 00 01		 LDA $100,Y 
  2131 933A 8D 01 D3		 STA PORTB 
  2132 				; --- RepeatUntilProlog
  2133 933D			l_05D9
  2134
  2135 				; optimize OK (processtrack.inc), line = 33
  2136
  2137 933D A5 E0			lda _STATUS
  2138 933F 30 2E			jmi l_05EF
  2139
  2140 				; optimize FAIL ('READVARL', processtrack.inc), line = 35
  2141
  2142 9341 20 22 91			jsr READVARL
  2143
  2144 				; optimize OK (processtrack.inc), line = 36
  2145
  2146 9344 A5 F9			lda _DELTA+3
  2147 9346 30 24			jmi l_0601
  2148 9348 05 F8			ora _DELTA+2
  2149 934A 05 F7			ora _DELTA+1
  2150 934C 05 F6			ora _DELTA
  2151 934E F0 1C			jeq l_0601
  2152
  2153 				; optimize OK (processtrack.inc), line = 38
  2154
  2155 9350 A5 E4			lda _TRACKTIME
  2156 9352 18 65 F6			add _DELTA
  2157 9355 85 E4			sta _TRACKTIME
  2158 9357 A5 E5			lda _TRACKTIME+1
  2159 9359 65 F7			adc _DELTA+1
  2160 935B 85 E5			sta _TRACKTIME+1
  2161 935D A5 E6			lda _TRACKTIME+2
  2162 935F 65 F8			adc _DELTA+2
  2163 9361 85 E6			sta _TRACKTIME+2
  2164 9363 A5 E7			lda _TRACKTIME+3
  2165 9365 65 F9			adc _DELTA+3
  2166 9367 85 E7			sta _TRACKTIME+3
  2167 9369 4C D7 93			jmp b_05D9					; break
  2168 936C			l_0601
  2169 936C 4C 75 93			jmp l_0615
  2170 936F			l_05EF
  2171
  2172 				; optimize OK (processtrack.inc), line = 43
  2173
  2174 936F A5 E0			lda _STATUS
  2175 9371 29 7F			and #$7F
  2176 9373 85 E0			sta _STATUS
  2177 9375			l_0615
  2178
  2179 				; optimize OK (processtrack.inc), line = 45
  2180
  2181 9375 A0 00			ldy #$00
  2182 9377 B1 E2			lda (_PTR),y
  2183 9379 10 16			jpl l_0638
  2184
  2185 				; optimize FAIL ('m@INLINE', processtrack.inc), line = 47
  2186
  2187 937B				.local READB
  2188 937B				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 937B A0 00			ldy #$00
     5 937D B1 E2			lda (_PTR),y
     6 937F 85 FF			sta EVENT
    10 9381 E6 E2			inc _ADR
    11 9383 D0 02			sne
    12 9385 E6 E3			inc _ADR+1
    16 9387 20 24 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2189 					.endl
  2190 938A A5 FF			lda EVENT
  2191 938C 85 E8			sta _EVENT
  2192 938E 4C 95 93			jmp l_0649
  2193 9391			l_0638
  2194
  2195 				; optimize OK (processtrack.inc), line = 50
  2196
  2197 9391 A5 E8			lda _EVENT
  2198 9393 85 FF			sta EVENT
  2199 9395			l_0649
  2200
  2201 				; optimize OK (processtrack.inc), line = 52
  2202
  2203 9395 A9 BF			lda #$BF
  2204 9397 C5 E8			cmp _EVENT
  2205 9399 90 06			jcc l_0661
  2206
  2207 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 54
  2208
  2209 939B 20 0D 92			jsr EVENTMIDI3
  2210 939E 4C CE 93			jmp l_066C
  2211 93A1			l_0661
  2212 93A1 A9 DF			lda #$DF
  2213 93A3 C5 E8			cmp _EVENT
  2214 93A5 90 06			jcc l_067E
  2215
  2216 				; optimize FAIL ('EVENTMIDI2', processtrack.inc), line = 56
  2217
  2218 93A7 20 4B 92			jsr EVENTMIDI2
  2219 93AA 4C CE 93			jmp l_0689
  2220 93AD			l_067E
  2221 93AD A9 EF			lda #$EF
  2222 93AF C5 E8			cmp _EVENT
  2223 93B1 90 06			jcc l_069B
  2224
  2225 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 58
  2226
  2227 93B3 20 0D 92			jsr EVENTMIDI3
  2228 93B6 4C CE 93			jmp l_06A6
  2229 93B9			l_069B
  2230 93B9 A9 F7			lda #$F7
  2231 93BB C5 E8			cmp _EVENT
  2232 93BD 90 06			jcc l_06B8
  2233
  2234 				; optimize FAIL ('EVENTSYSEX', processtrack.inc), line = 60
  2235
  2236 93BF 20 61 92			jsr EVENTSYSEX
  2237 93C2 4C CE 93			jmp l_06C3
  2238 93C5			l_06B8
  2239 93C5 A5 E8			lda _EVENT
  2240 93C7 C9 FF			cmp #$FF
  2241 93C9 D0 03			jne l_06D5
  2242
  2243 				; optimize FAIL ('EVENTMETA', processtrack.inc), line = 61
  2244
  2245 93CB 20 83 92			jsr EVENTMETA
  2246 93CE			l_06D5
  2247 93CE			l_06C3
  2248 93CE			l_06A6
  2249 93CE			l_0689
  2250 93CE			l_066C
  2251
  2252 				; optimize OK (processtrack.inc), line = 63
  2253
  2254 93CE A5 E0			lda _STATUS
  2255 93D0 29 40			and #$40
  2256 93D2 D0 03 4C 3D 93		jeq l_05D9
  2257 93D7			b_05D9
  2258
  2259 				; optimize OK (processtrack.inc), line = 65
  2260
  2261 93D7 A5 E0			lda _STATUS
  2262 93D9 09 80			ora #$80
  2263 93DB 85 E0			sta _STATUS
  2264
  2265 				; ------------------------------------------------------------
  2266
  2267 = 00FF			EVENT	= $FF
  2268 93DD			@exit
  2269 					.ifdef @new
  2270 					lda <@VarData
  2271 					sta :ztmp
  2272 					lda >@VarData
  2273 					ldy #@VarDataSize-1
  2274 					jmp @FreeMem
  2275 					els
  2276 93DD 60				rts						; ret
  2277 					eif
  2278 				.endl
  2279
  2280 93DE			.local	PROCESSMIDI					; PROCEDURE
  2281
  2282 				; optimize FAIL ('MIDI_FIFO.FIFO_PUSHDIRECT2MC6850', processmidi.inc), line = 29
  2283
  2284 93DE 20 23 8A			jsr MIDI_FIFO.FIFO_PUSHDIRECT2MC6850
  2285
  2286 				; optimize OK (processmidi.inc), line = 31
  2287
  2288 93E1 A5 F5			lda _TIMERSTATUS
  2289 93E3 10 03			jpl l_070F
  2290 93E5 4C 5F 94			jmp @exit					; exit
  2291 93E8			l_070F
  2292
  2293 				; optimize OK (processmidi.inc), line = 32
  2294
  2295 93E8 A5 DE			lda CTRK
  2296 93EA CD BB 3E			cmp TOTALTRACKS
  2297 93ED D0 11			jne l_0726
  2298
  2299 				; optimize OK (processmidi.inc), line = 34
  2300
  2301 93EF A9 01			lda #$01
  2302 93F1 85 DE			sta CTRK
  2303
  2304 				; optimize OK (processmidi.inc), line = 35
  2305
  2306 93F3 AD 08 95			lda MIDTRACKS
  2307 93F6 85 DC			sta CURTRACKPTR
  2308 93F8 AD 09 95			lda MIDTRACKS+1
  2309 93FB 85 DD			sta CURTRACKPTR+1
  2310 93FD 4C 0D 94			jmp l_0739
  2311 9400			l_0726
  2312
  2313 				; optimize FAIL (0, processmidi.inc), line = 39
  2314
  2315 9400 E6 DE			inc CTRK
  2316
  2317 				; optimize OK (processmidi.inc), line = 40
  2318
  2319 9402 A5 DC			lda CURTRACKPTR
  2320 9404 18 69 09			add #$09
  2321 9407 85 DC			sta CURTRACKPTR
  2322 9409 90 02			scc
  2323 940B E6 DD			inc CURTRACKPTR+1
  2324 940D			l_0739
  2325
  2326 				; -------------------  ASM Block 00000076  -------------------
  2327
  2328 				// if _status and f_stop=0 then
  2329 940D A0 00		    ldy #0
  2330 940F B1 DC		    lda (curTrackPtr),y
  2331 9411 29 40		    and #f_stop
  2332 9413 D0 4A		    bne skipProcessTrack
  2333
  2334 				// if _totalTicks>=_trackTime then ProcessTrack;
  2335 9415 A0 07		    ldy #7
  2336 9417 A5 F3		    lda _totalTicks+3
  2337 9419 38 F1 DC		    sub (curTrackPtr),y
  2338 941C D0 22		    bne L4
  2339 941E A5 F2		    lda _totalTicks+2
  2340 9420 88			    dey
  2341 9421 38 F1 DC		    sub (curTrackPtr),y
  2342 9424 D0 0E		    bne L1
  2343 9426 A5 F1		    lda _totalTicks+1
  2344 9428 88			    dey
  2345 9429 38 F1 DC		    sub (curTrackPtr),y
  2346 942C D0 06		    bne L1
  2347 942E A5 F0		    lda _totalTicks
  2348 9430 88			    dey
  2349 9431 38 F1 DC		    sub (curTrackPtr),y
  2350 9434			  L1:
  2351 9434 F0 10		    beq L5
  2352 9436 B0 04		    bcs L3
  2353 9438 A9 FF		    lda #$ff
  2354 943A D0 0A		    bne L5
  2355 943C			  L3:
  2356 943C A9 01		    lda #$01
  2357 943E D0 06		    bne L5
  2358 9440			  L4:
  2359 9440 50 04		    bvc L5
  2360 9442 49 FF		    eor #$ff
  2361 9444 09 01		    ora #$01
  2362 9446			  L5:
  2363 9446 30 17		    jmi skipProcessTrack
  2364
  2365 				  // copy current track data to work registers
  2366 9448 A0 08		    ldy #sizeOf_TMIDTrack-1
  2367 944A			  loop:
  2368 944A B1 DC		    lda (curTrackPtr),y
  2369 944C 99 E0 00		    sta _trkRegs,y
  2370 944F 88			    dey
  2371 9450 10 F8		    bpl loop
  2372
  2373 				  
  2374 				; optimize FAIL ('PROCESSTRACK', processmidi.inc), line = 92
  2375
  2376 9452 20 1F 91			jsr PROCESSTRACK
  2377
  2378 				; -------------------  ASM Block 00000077  -------------------
  2379
  2380 				// store work registers in track data
  2381 9455 A0 08		    ldy #sizeOf_TMIDTrack-1
  2382 9457			  loop2:
  2383 9457 B9 E0 00		    lda _trkRegs,y
  2384 945A 91 DC		    sta (curTrackPtr),y
  2385 945C 88			    dey
  2386 945D 10 F8		    bpl loop2
  2387
  2388 945F			  skipProcessTrack:
  2389 				  
  2390 945F			@exit
  2391 					.ifdef @new
  2392 					lda <@VarData
  2393 					sta :ztmp
  2394 					lda >@VarData
  2395 					ldy #@VarDataSize-1
  2396 					jmp @FreeMem
  2397 					els
  2398 945F 60				rts						; ret
  2399 					eif
  2400 				.endl
  2401
  2402 9460			.local	INITTIMER					; PROCEDURE
  2403
  2404 				; optimize OK (MIDFILES), line = 84
  2405
  2406 9460 A9 00			lda #$00
  2407 9462 85 F0			sta _TOTALTICKS
  2408 9464 85 F1			sta _TOTALTICKS+1
  2409 9466 85 F2			sta _TOTALTICKS+2
  2410 9468 85 F3			sta _TOTALTICKS+3
  2411
  2412 				; optimize OK (MIDFILES), line = 85
  2413
  2414 946A 8D DE 3E			sta TEMPOSHIFT
  2415 946D 8D DF 3E			sta TEMPOSHIFT+1
  2416 9470 8D E0 3E			sta TEMPOSHIFT+2
  2417 9473 8D E1 3E			sta TEMPOSHIFT+3
  2418
  2419 				; optimize OK (MIDFILES), line = 86
  2420
  2421 9476 A9 01			lda #$01
  2422 9478 85 F5			sta _TIMERSTATUS
  2423
  2424 				; optimize OK (MIDFILES), line = 87
  2425
  2426 947A AD BB 3E			lda TOTALTRACKS
  2427 947D 85 DE			sta CTRK
  2428
  2429 				; optimize OK (MIDFILES), line = 88
  2430
  2431 947F 85 DF			sta PLAYINGTRACKS
  2432
  2433 				; -------------------  ASM Block 00000078  -------------------
  2434
  2435 9481 78			    sei
  2436 9482 A9 00 8D 10 02	    mva <INT_TIMER VTIMR1
  2437 9487 A9 8B 8D 11 02	    mva >INT_TIMER VTIMR1+1
  2438 				  // reset POKEY
  2439 948C A9 00		    lda #$00
  2440 948E A0 03		    ldy #$03
  2441 9490 8D 08 D2		    sta AUDCTL
  2442 9493 8D 01 D2		    sta AUDC1
  2443 9496 8C 0F D2		    sty SKCTL
  2444 				  // setup TIMER1
  2445 9499 8D 08 D2		    sta AUDCTL
  2446 949C A5 53 8D 00 D2	    mva 83 AUDF1
  2447 				  // initialize IRQ for TIMER1
  2448 94A1 A5 10		    lda irqens
  2449 94A3 09 01		    ora #$01
  2450 94A5 85 10		    sta irqens
  2451 94A7 8D 0E D2		    sta irqen
  2452 				  // start timer strobe
  2453 94AA 8D 09 D2		    sta stimer
  2454
  2455 94AD 58			    cli  // enable IRQ
  2456 				  
  2457 94AE			@exit
  2458 					.ifdef @new
  2459 					lda <@VarData
  2460 					sta :ztmp
  2461 					lda >@VarData
  2462 					ldy #@VarDataSize-1
  2463 					jmp @FreeMem
  2464 					els
  2465 94AE 60				rts						; ret
  2466 					eif
  2467 				.endl
  2468
  2469 94AF			.local	NULLLOADPRCS					; PROCEDURE
  2470
  2471 94AF			@exit
  2472 					.ifdef @new
  2473 					lda <@VarData
  2474 					sta :ztmp
  2475 					lda >@VarData
  2476 					ldy #@VarDataSize-1
  2477 					jmp @FreeMem
  2478 					els
  2479 94AF 60				rts						; ret
  2480 					eif
  2481 				.endl
  2482
  2483 				; ------------------------------------------------------------
  2484 				; ------------------------------------------------------------
  2485 94B0			@UnitInit
  2486
  2487 				; optimize OK (MIDFILES), line = 121
  2488
  2489 94B0 A9 00			lda #$00
  2490 94B2 8D DA 3E			sta OLDTIMERVEC
  2491 94B5 8D DB 3E			sta OLDTIMERVEC+1
  2492
  2493 				; optimize OK (MIDFILES), line = 122
  2494
  2495 94B8 A9 AF			lda <NULLLOADPRCS
  2496 94BA 8D DC 3E			sta LOADPROCESS
  2497 94BD A9 94			lda >NULLLOADPRCS
  2498 94BF 8D DD 3E			sta LOADPROCESS+1
  2499
  2500 				; optimize OK (MIDFILES), line = 123
  2501
  2502 94C2 A9 80			lda #$80
  2503 94C4 8D BC 3E			sta TICKDIV
  2504 94C7 A9 01			lda #$01
  2505 94C9 8D BD 3E			sta TICKDIV+1
  2506
  2507 				; optimize OK (MIDFILES), line = 124
  2508
  2509 94CC A9 20			lda #$20
  2510 94CE 8D BE 3E			sta MS_PER_QNOTE
  2511 94D1 A9 A1			lda #$A1
  2512 94D3 8D BF 3E			sta MS_PER_QNOTE+1
  2513 94D6 A9 07			lda #$07
  2514 94D8 8D C0 3E			sta MS_PER_QNOTE+2
  2515 94DB A9 00			lda #$00
  2516 94DD 8D C1 3E			sta MS_PER_QNOTE+3
  2517
  2518 				; optimize OK (MIDFILES), line = 125
  2519
  2520 94E0 8D BB 3E			sta TOTALTRACKS
  2521
  2522 				; optimize OK (MIDFILES), line = 126
  2523
  2524 94E3 85 DE			sta CTRK
  2525
  2526 				; optimize OK (MIDFILES), line = 127
  2527
  2528 94E5 A9 80			lda #$80
  2529 94E7 85 F5			sta _TIMERSTATUS
  2530
  2531 				; optimize OK (MIDFILES), line = 129
  2532
  2533 94E9 A9 04			lda #$04
  2534 94EB 8D C4 3E			sta TACTNUM
  2535
  2536 				; optimize OK (MIDFILES), line = 130
  2537
  2538 94EE 8D C5 3E			sta TACTDENUM
  2539
  2540 				; optimize OK (MIDFILES), line = 131
  2541
  2542 94F1 A9 18			lda #$18
  2543 94F3 8D C6 3E			sta TICKS_PER_QNOTE
  2544
  2545 				; optimize OK (MIDFILES), line = 132
  2546
  2547 94F6 A9 08			lda #$08
  2548 94F8 8D C7 3E			sta TICKS_PER_32ND
  2549
  2550 94FB AD 10 02			lda VTIMR1
  2551 94FE 8D DA 3E			sta OLDTIMERVEC
  2552 9501 AD 11 02			lda VTIMR1+1
  2553 9504 8D DB 3E			sta OLDTIMERVEC+1
  2554
  2555 9507 60				rts
  2556
  2557 				; ------------------------------------------------------------
  2558
  2559 = 0080			F_COUNTER	= $80
  2560 = 0040			F_TICK	= $40
  2561 = 00C0			F_FLAGS	= $C0
  2562 = 000F			F_RATIO	= $0F
  2563 = 0080			F_SKIPDELTA	= $80
  2564 = 0040			F_STOP	= $40
  2565 = 00E0			_TRKREGS	= $E0
  2566 = 0000			MID_0	= $00
  2567 = 0001			MID_1	= $01
  2568 = 0064			ERR_UNSUPPORTED_FORMAT	= $64
  2569 = 0065			ERR_NOT_ENOUGHT_MEMORY	= $65
  2570 = 0066			ERR_NOT_A_MIDI_FILE	= $66
  2571 = 6468544D		TAG_MTHD	= $6468544D
  2572 = 6B72544D		TAG_MTRK	= $6B72544D
  2573 = 0009			SIZEOF_TMIDTRACK	= $09
  2574 = 00DC			CURTRACKPTR	= $DC
  2575 = 00DE			CTRK	= $DE
  2576 = 00DF			PLAYINGTRACKS	= $DF
  2577 = 00F0			_TOTALTICKS	= $F0
  2578 = 00F4			_SUBCNT	= $F4
  2579 = 00F5			_TIMERSTATUS	= $F5
  2580 = 00F6			_DELTA	= $F6
  2581 = 00F6			_TMP	= $F6
  2582 = 00E0			_STATUS	= $E0
  2583 = 00E1			_BANK	= $E1
  2584 = 00E2			_PTR	= $E2
  2585 = 00E2			_ADR	= $E2
  2586 = 00E4			_TRACKTIME	= $E4
  2587 = 00E8			_EVENT	= $E8
  2588 = 3EB7			MIDDATA	= DATAORIGIN+$0037
  2589 = 3EB9			adr.MIDTRACKS	= [DATAORIGIN+$0039] .array [1]
  2590 9508			.var MIDTRACKS	= adr.MIDTRACKS .word
  2591 = 3EBA			FORMAT	= DATAORIGIN+$003A
  2592 = 3EBB			TOTALTRACKS	= DATAORIGIN+$003B
  2593 = 3EBC			TICKDIV	= DATAORIGIN+$003C
  2594 = 3EBE			MS_PER_QNOTE	= DATAORIGIN+$003E
  2595 = 3EC2			FPS	= DATAORIGIN+$0042
  2596 = 3EC3			FSD	= DATAORIGIN+$0043
  2597 = 3EC4			TACTNUM	= DATAORIGIN+$0044
  2598 = 3EC5			TACTDENUM	= DATAORIGIN+$0045
  2599 = 3EC6			TICKS_PER_QNOTE	= DATAORIGIN+$0046
  2600 = 3EC7			TICKS_PER_32ND	= DATAORIGIN+$0047
  2601 = 3EC8			BPM	= DATAORIGIN+$0048
  2602 = 3ECA			adr.CHNVOLUME	= [DATAORIGIN+$004A] .array [16]
  2603 9508			.var CHNVOLUME	= adr.CHNVOLUME .word
  2604 = 3EDA			OLDTIMERVEC	= DATAORIGIN+$005A
  2605 = 3EDC			LOADPROCESS	= DATAORIGIN+$005C
  2606 = 3EDE			TEMPOSHIFT	= DATAORIGIN+$005E
  2607
  2608 = 9508 B9 3E		MIDTRACKS
  2608 = 950A CA 3E		CHNVOLUME
  2608 				.endl							; UNIT MIDFILES
  2609
  2610 				; ------------------------------------------------------------
  2611
  2612 950C			.local	MISC						; UNIT
  2613
  2614 				; ------------------------------------------------------------
  2615
  2616 = 0101			adr.BANKS	= $0101
  2617 950C			.var BANKS	= adr.BANKS .word
  2618 = FFF7			DETECTOS	= $FFF7
  2619
  2620 = 950C 01 01		BANKS
  2620 				.endl							; UNIT MISC
  2621
  2622 950E			.local	GETFILEEXT					; FUNCTION | ASSEMBLER | REGISTER
  2623
  2624 				; -------------------  ASM Block 00000089  -------------------
  2625
  2626 950E			  icl 'asms/get_file_ext.a65'
Source: get_file_ext.a65
     1 = 0088			hlpptr = $88
     2
     3 950E A9 00		  lda #0
     4 9510 85 90		  sta result
     5 9512 85 91		  sta result+1
     6 9514 85 92		  sta result+2
     7 9516 85 93		  sta result+3
     8
     9 9518 A0 00		  ldy #0
    10 951A B1 88		  lda (hlpptr),y
    11 951C 8D 46 95		  sta fnlen
    12 951F F0 24		  beq endGetFileExt
    13 9521 A8			  tay
    14
    15 9522			dotSearch:
    16 9522 B1 88		  lda (hlpptr),y
    17 9524 C9 2E		  cmp #'.'
    18 9526 F0 05		  beq endDotSearch
    19 9528 88			  dey
    20 9529 D0 F7		  bne dotSearch
    21 952B F0 18		  beq endGetFileExt
    22
    23 952D			endDotSearch:
    24 952D 8C 47 95		  sty extst
    25 9530 AD 46 95		  lda fnlen
    26 9533 38			  sec
    27 9534 ED 47 95		  sbc extst
    28 9537 C9 04		  cmp #4
    29 9539 B0 0A		  bcs endGetFileExt
    30
    31 953B C8			  iny
    32 953C AA			  tax
    33
    34 953D			copyExt2Result:
    35 953D B1 88		  lda (hlpptr),y
    36 953F 95 90		  sta result,x
    37 9541 C8			  iny
    38 9542 CA			  dex
    39 9543 D0 F8		  bne copyExt2Result
    40
    41 9545			endGetFileExt:
    42 9545 60			  rts
    43
    44 9546 00			fnlen .byte 0
    45 9547 00			extst .byte 0
  2627
  2628 9548			@exit
  2629
  2630 				; ------------------------------------------------------------
  2631
  2632 = 0088			FN	= :EDX
  2633 = 0090			RESULT	= :STACKORIGIN-4
  2634 9548 60				rts						; ret
  2635 				.endl
  2636
  2637 9549			.local	REDUCEFILENAME					; PROCEDURE | ASSEMBLER | REGISTER
  2638
  2639 				; -------------------  ASM Block 00000090  -------------------
  2640
  2641 9549			  icl 'asms/reduce_filename.a65'
Source: reduce_filename.a65
     1 = 0088			inreg  = $88
     2 = 008C			outReg = $8c
     3
     4 9549 8A 48		  txa:pha
     5
     6 954B A5 88		  lda inreg
     7 954D 8D 5F 95		  sta inptr
     8 9550 A5 89		  lda inreg+1
     9 9552 8D 60 95		  sta inptr+1
    10
    11 				; 0123456789abcdef01
    12 				;  *:FILENAMEEXT 000
    13
    14 9555 A9 0B		  lda #$0b
    15 9557 8D 6A 95		  sta fpos
    16
    17 955A A2 03		  ldx #3
    18 955C A0 01		  ldy #1
    19
    20 955E			fnLoop:
    21 955E BD 00 20		  lda inptr:$2000,x
    22 9561 C9 20		  cmp #' '
    23 9563 F0 03		  beq skip
    24 9565 91 8C		  sta (outreg),y
    25 9567 C8			  iny
    26 9568			skip:
    27 9568 E8			  inx
    28 9569 E0 0B		  cpx fpos:#11
    29 956B D0 F1		  bne fnLoop
    30
    31 956D			dot:
    32 956D E0 0E		  cpx #$0e
    33 956F F0 0B		  beq storeDot
    34
    35 9571 98 48		  tya:pha
    36 9573 C8			  iny
    37 9574 A9 0E		  lda #$0e
    38 9576 8D 6A 95		  sta fpos
    39 9579 4C 5E 95		  jmp fnLoop
    40
    41 957C			storeDot:
    42 957C 88			  dey
    43 957D 98 AA		  tya:tax   // move Y to X - string length
    44 957F 68 A8		  pla:tay   // pop stored dot position
    45 9581 A9 2E		  lda #'.'
    46 9583 91 8C		  sta (outreg),y
    47
    48 9585 8A			  txa       // move string length to Accu
    49 9586 A0 00		  ldy #0
    50 9588 91 8C		  sta (outreg),y
    51
    52 958A 68 AA		  pla:tax
  2642
  2643 				; ------------------------------------------------------------
  2644
  2645 = 0088			INFN	= :EDX
  2646 = 008C			OUTFN	= :ECX
  2647 958C			@exit
  2648 					.ifdef @new
  2649 					lda <@VarData
  2650 					sta :ztmp
  2651 					lda >@VarData
  2652 					ldy #@VarDataSize-1
  2653 					jmp @FreeMem
  2654 					els
  2655 958C 60				rts						; ret
  2656 					eif
  2657 				.endl
  2658
  2659 958D			.local	GETDEVICESPEC					; FUNCTION | ASSEMBLER | REGISTER
  2660
  2661 				; -------------------  ASM Block 00000092  -------------------
  2662
  2663 958D			  icl 'asms/getDeviceSpec.a65'
Source: getDeviceSpec.a65
     1 = 0088			fnreg   = $88
     2 = 008C			specreg = $8c
     3
     4 958D			getDeviceSpec:
     5 958D A0 01		  ldy #1
     6 958F			colonLoop:
     7 958F B1 88		  lda (fnreg),y
     8 9591 C9 3A		  cmp #':'
     9 9593 F0 0A		  beq foundSpec
    10 9595 C8			  iny
    11 9596 C0 04		  cpy #4
    12 9598 D0 F5		  bne colonLoop
    13
    14 959A			specNotFound:
    15 959A A9 00		  lda #0
    16 				  ; tay
    17 				  ; sta (specreg),y
    18 959C 85 90		  sta result
    19 959E 60			  rts
    20
    21 959F			foundSpec:
    22 959F 98			  tya
    23 95A0 A0 00		  ldy #0
    24 95A2 91 8C		  sta (specreg),y
    25 95A4 A8			  tay
    26
    27 95A5			copySpec:
    28 95A5 B1 88		  lda (fnreg),y
    29 95A7 91 8C		  sta (specreg),y
    30 95A9 88			  dey
    31 95AA D0 F9		  bne copySpec
    32
    33 95AC A9 01		  lda #1
    34 95AE 85 90		  sta result
  2664
  2665 95B0			@exit
  2666
  2667 				; ------------------------------------------------------------
  2668
  2669 = 0088			FN	= :EDX
  2670 = 008C			SPEC	= :ECX
  2671 = 0090			RESULT	= :STACKORIGIN-4
  2672 95B0 60				rts						; ret
  2673 				.endl
  2674
  2675 95B1			.local	JOINSTRINGS					; PROCEDURE | ASSEMBLER | REGISTER
  2676
  2677 				; -------------------  ASM Block 00000093  -------------------
  2678
  2679 95B1			  icl 'asms/joinStrings.a65'
Source: joinStrings.a65
     1 95B1			JoinStrings:
     2
     3 95B1 8A 48		    txa:pha
     4
     5 95B3 A0 00		    ldy #0
     6 95B5 B1 88		    lda (s1),y
     7 95B7 8D C4 95		    sta devlen
     8 95BA A2 01		    ldx #1
     9
    10 95BC			copyS1:
    11 95BC C8			    iny
    12 95BD B1 88		    lda (s1),y
    13 95BF 9D 80 05		    sta adr.outstr,x
    14 95C2 E8			    inx
    15 95C3 C0 00		    cpy devlen:#00
    16 95C5 D0 F5		    bne copyS1
    17
    18 95C7			nextCopy:
    19 95C7 A0 00		    ldy #0
    20 95C9 B1 8C		    lda (s2),y
    21 95CB 8D D6 95		    sta fnlen
    22
    23 95CE			copyS2:
    24 95CE C8			    iny
    25 95CF B1 8C		    lda (s2),y
    26 95D1 9D 80 05		    sta adr.outstr,x
    27 95D4 E8			    inx
    28 95D5 C0 00		    cpy fnlen:#00
    29 95D7 D0 F5		    bne copyS2
    30
    31 95D9 CA			    dex
    32 95DA 8E 80 05		    stx adr.outstr
    33
    34 95DD 68 AA		    pla:tax
    35 95DF 60			    rts
  2680
  2681 				; ------------------------------------------------------------
  2682
  2683 = 0088			S1	= :EDX
  2684 = 008C			S2	= :ECX
  2685 95E0			@exit
  2686 					.ifdef @new
  2687 					lda <@VarData
  2688 					sta :ztmp
  2689 					lda >@VarData
  2690 					ldy #@VarDataSize-1
  2691 					jmp @FreeMem
  2692 					els
  2693 95E0 60				rts						; ret
  2694 					eif
  2695 				.endl
  2696
  2697 95E1			.local	GETLN						; PROCEDURE | ASSEMBLER | REGISTER
  2698
  2699 				; -------------------  ASM Block 00000094  -------------------
  2700
  2701 95E1			  icl 'asms/get_line.a65'
Source: get_line.a65
     1 95E1 8A 48		  txa:pha
     2
     3 95E3 A5 88		  lda chn
     4 95E5 0A 0A 0A 0A		  :4 asl @
     5 95E9 AA			  tax
     6
     7 95EA A9 05		  lda #5
     8 95EC 9D 42 03		  sta iccmd,x
     9
    10 95EF A5 8D		  lda buf+1
    11 95F1 9D 45 03		  sta icbufa+1,x
    12 95F4 A5 8C		  lda buf
    13 95F6 18 69 01		  add #1
    14 95F9 9D 44 03		  sta icbufa,x
    15 95FC 90 03 FE 45 03	  scc:inc icbufa+1,X
    16
    17 9601 A9 80		  lda #$80
    18 9603 9D 48 03		  sta icbufl,x
    19 9606 A9 00		  lda #0
    20 9608 9D 49 03		  sta icbufl+1,x
    21
    22 960B			  m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 960B EE 01 D3				inc portb
     6 960E 20 56 E4				jsr CIOV
     8 9611 CE 01 D3				dec portb
Source: get_line.a65
    23 9614 8C 87 3E		  sty MAIN.SYSTEM.IOResult
    24
    25 9617 BD 48 03		  lda icbufl,x
    26 961A A0 00		  ldy #0
    27 961C 91 8C		  sta (buf),y
    28
    29 961E 68 AA		  pla:tax
  2702
  2703 				; ------------------------------------------------------------
  2704
  2705 = 0088			CHN	= :EDX
  2706 = 008C			BUF	= :ECX
  2707 9620			@exit
  2708 					.ifdef @new
  2709 					lda <@VarData
  2710 					sta :ztmp
  2711 					lda >@VarData
  2712 					ldy #@VarDataSize-1
  2713 					jmp @FreeMem
  2714 					els
  2715 9620 60				rts						; ret
  2716 					eif
  2717 				.endl
  2718
  2719 9621			.local	MYNMI						; PROCEDURE | ASSEMBLER | INTERRUPT
  2720
  2721 				; -------------------  ASM Block 00000095  -------------------
  2722
  2723 9621			  icl 'asms/nmi.a65'
Source: nmi.a65
     1 = 0012			RTCLOK = $12
     2 = D209			KBCODE = $d209
     3 = D20F			SKSTAT = $d20f
     4 = D40F			NMIRES = $d40f
     5
     6 = 022B			SRTIMR = $022b
     7 = 026D			KEYDIS = $026d
     8 = 02DA			KEYREP = $02da
     9 = 02F1			KEYDEL = $02f1
    10 = 02FC			CH     = $02fc
    11 = 02C0			PCOLR0 = $02c0
    12 = D012			COLPM0 = $d012
    13
    14 				// systemowa procedure obsługi RTClock ($C0E2)
    15 9621 D8			    cld
    16 9622 8D 6D 96		    sta rega
    17 9625 8E 6F 96		    stx regx
    18 9628 8C 71 96		    sty regy
    19 962B 8D 0F D4		    STA NMIRES
    20
    21 962E E6 14		    inc RTCLOK+2
    22 9630 D0 06		    bne end_rtclk
    23 9632 E6 13		    inc RTCLOK+1
    24 9634 D0 02		    bne end_rtclk
    25 9636 E6 12		    inc RTCLOK
    26
    27 9638			end_rtclk:
    28
    29 				// fragment systemowej procedury kopiowania rejestrów kolorów
    30 				//    ldx #$08
    31 				//colloop:
    32 				//    lda PCOLR0,x
    33 				//    sta COLPM0,x
    34 				//    dex
    35 				//    bpl colloop
    36
    37 				// systemowa procedura obsługi klawiatry ($C1A1)
    38 9638 AD 0F D2		    lda SKSTAT
    39 963B 29 04		    and #$04
    40 963D F0 08		    beq skip_keyDelay
    41 963F AD F1 02		    lda KEYDEL
    42 9642 F0 03		    beq skip_keyDelay
    43 9644 CE F1 02		    dec KEYDEL
    44 9647			skip_keyDelay:
    45 9647 AD 2B 02		    lda SRTIMR
    46 964A F0 20		    beq end_key
    47
    48 964C AD 0F D2		    lda SKSTAT
    49 964F 29 04		    and #$04
    50 9651 D0 14		    bne skip_key
    51
    52 9653 CE 2B 02		    dec SRTIMR
    53 9656 D0 14		    bne end_key
    54 9658 AD DA 02		    lda KEYREP
    55 965B 8D 2B 02		    sta SRTIMR
    56
    57 965E AD 09 D2		    lda KBCODE
    58 9661 8D FC 02		    sta CH
    59 9664 4C 6C 96		    jmp end_key
    60
    61 9667			skip_key:
    62 9667 A9 00		    lda #$00
    63 9669 8D 2B 02		    sta SRTIMR
    64
    65 966C			end_key:
    66
    67 966C A9 00		    lda rega:#0
    68 966E A2 00		    ldx regx:#0
    69 9670 A0 00		    ldy regy:#0
  2724
  2725 9672 40				rti						; ret
  2726 				.endl
  2727
  2728 9673			.local	SETNMI						; PROCEDURE
  2729
  2730 				; optimize OK (mynmi.inc), line = 14
  2731
  2732 9673 AD FA FF			lda NMIVEC
  2733 9676 8D 62 3F			sta OLDNMIVEC
  2734 9679 AD FB FF			lda NMIVEC+1
  2735 967C 8D 63 3F			sta OLDNMIVEC+1
  2736
  2737 				; optimize OK (mynmi.inc), line = 15
  2738
  2739 967F A9 00			lda #$00
  2740 9681 8D 0E D4			sta NMIEN
  2741 9684 A9 21			lda <MYNMI
  2742 9686 8D FA FF			sta NMIVEC
  2743 9689 A9 96			lda >MYNMI
  2744 968B 8D FB FF			sta NMIVEC+1
  2745 968E A9 40			lda #$40
  2746 9690 8D 0E D4			sta NMIEN
  2747 9693			@exit
  2748 					.ifdef @new
  2749 					lda <@VarData
  2750 					sta :ztmp
  2751 					lda >@VarData
  2752 					ldy #@VarDataSize-1
  2753 					jmp @FreeMem
  2754 					els
  2755 9693 60				rts						; ret
  2756 					eif
  2757 				.endl
  2758
  2759 9694			.local	UNSETNMI					; PROCEDURE
  2760
  2761 				; optimize OK (mynmi.inc), line = 20
  2762
  2763 9694 A9 00			lda #$00
  2764 9696 8D 0E D4			sta NMIEN
  2765 9699 AD 62 3F			lda OLDNMIVEC
  2766 969C 8D FA FF			sta NMIVEC
  2767 969F AD 63 3F			lda OLDNMIVEC+1
  2768 96A2 8D FB FF			sta NMIVEC+1
  2769 96A5 A9 40			lda #$40
  2770 96A7 8D 0E D4			sta NMIEN
  2771 96AA			@exit
  2772 					.ifdef @new
  2773 					lda <@VarData
  2774 					sta :ztmp
  2775 					lda >@VarData
  2776 					ldy #@VarDataSize-1
  2777 					jmp @FreeMem
  2778 					els
  2779 96AA 60				rts						; ret
  2780 					eif
  2781 				.endl
  2782
  2783 96AB			.local	KEYSCAN2ASC					; FUNCTION | ASSEMBLER
  2784 96AB 8D 64 3F			sta KEYSCAN
  2785
  2786 				; -------------------  ASM Block 00000096  -------------------
  2787
  2788 96AE			  icl 'asms/keyscan2asc.a65'
Source: keyscan2asc.a65
     1 96AE A0 00		    ldy #0
     2 96B0			loop:
     3 96B0 B9 CD 96		    lda scan2asc,y
     4 96B3 F0 05		    beq skip
     5 96B5 CD 64 3F		    cmp keyscan
     6 96B8 F0 0B		    beq found
     7 96BA			skip:
     8 96BA C8			    iny
     9 96BB C0 40		    cpy #64
    10 96BD D0 F1		    bne loop
    11
    12 96BF			notFound:
    13 96BF A9 00		    lda #0
    14 96C1 8D 65 3F		    sta Result
    15 96C4 60			    rts
    16
    17 96C5			found:
    18 96C5 98			    tya
    19 96C6 18 69 20		    add #32
    20 96C9 8D 65 3F		    sta Result
    21
    22 96CC 60			    rts
    23
    24 96CD			scan2asc:        // from 32 to 95
    25 96CD 21			    .byte 33   //   space
    26 96CE 5F			    .byte 95   // ! exclamation mark
    27 96CF 00			    .byte 0  // " quote mark
    28 96D0 5A			    .byte 90   // # hash
    29 96D1 00			    .byte 0  // $ dolar
    30 96D2 5D			    .byte 93   // % percent
    31 96D3 00			    .byte 0  // & and
    32 96D4 00			    .byte 0  // '
    33 96D5 00			    .byte 0  // (
    34 96D6 00			    .byte 0  // )
    35 96D7 07			    .byte 7    // * star
    36 96D8 00			    .byte 0  // + plus
    37 96D9 00			    .byte 0  //  comma
    38 96DA 0E			    .byte 14   // - hypen
    39 96DB 22			    .byte 34   // . dot
    40 96DC 26			    .byte 38   // / slash
    41 96DD 32 1F 1E 1A 18 1D +     .byte 50,31,30,26,24,29,27,51,53,48 // 0-9 digits
    42 96E7 42			    .byte 66   // :colon
    43 96E8 00			    .byte 0  // ; semicolon
    44 96E9 36			    .byte 54   // < less sign
    45 96EA 00			    .byte 0  // = equal
    46 96EB 37			    .byte 55   // > more sign
    47 96EC 66			    .byte 102  // ? question mark
    48 96ED 00			    .byte 0  // @ at
    49 96EE 3F 15 12 3A 2A 38 +     .byte 63,21,18,58,42,56,61,57,13,1,5,0,37,35,8,10,47,40,62,45,11,16,46,22,43,23 // A-Z letters
    50 9708 00			    .byte 0  // [
    51 9709 46			    .byte 70   // \ backslash
    52 970A 00			    .byte 0  // ]
    53 970B 00			    .byte 0  // ^
    54 970C 4E			    .byte 78    // _ underscore mark
  2789
  2790 970D			@exit
  2791
  2792 				; ------------------------------------------------------------
  2793
  2794 = 3F64			KEYSCAN	= DATAORIGIN+$00E4
  2795 = 3F65			RESULT	= DATAORIGIN+$00E5
  2796
  2797 = 3F64			@VarData	= KEYSCAN
  2798 = 0001			@VarDataSize	= 1
  2799
  2800 970D 60				rts						; ret
  2801 				.endl
  2802
  2803 970E			.local	SETCOLORS					; PROCEDURE
  2804
  2805 				; optimize OK (helpers.inc), line = 25
  2806
  2807 970E A5 4A			lda PLAYERSTATUS
  2808 9710 29 01			and #$01
  2809 9712 85 9D			sta :STACKORIGIN+9
  2810 9714 A0 01			ldy #1
  2811 9716 A5 9D			lda :STACKORIGIN+9
  2812 9718 C9 01			cmp #$01
  2813 971A F0 01			beq @+
  2814 971C 88				dey
  2815 				@
  2816 971D 84 9D			sty :STACKORIGIN+9
  2817 971F A9 05			lda #$05
  2818 9721 85 8C			sta :ecx
  2819 9723 A5 9D			lda :STACKORIGIN+9
  2820 9725 85 84			sta :eax
  2821 					.ifdef fmulinit
  2822 					fmulu_8
  2823 					els
  2824 9727 20 CD 83			imulCL
  2825 					eif
  2826 972A A9 00			lda <adr.COLORS
  2827 972C 18 65 84			add :eax
  2828 972F 8D 68 3F			sta P
  2829 9732 A9 81			lda >adr.COLORS
  2830 9734 65 85			adc :eax+1
  2831 9736 8D 69 3F			sta P+1
  2832
  2833 				; optimize OK (helpers.inc), line = 26
  2834
  2835 9739 AD 68 3F			lda P
  2836 973C 85 82			sta :bp2
  2837 973E AD 69 3F			lda P+1
  2838 9741 85 83			sta :bp2+1
  2839 9743 A0 04			ldy #$04
  2840 9745 B1 82 99 16 D0 88 + 	mva:rpl (:bp2),y $D016,y-
  2841
  2842 				; optimize OK (helpers.inc), line = 27
  2843
  2844 974D AD 68 3F			lda P
  2845 9750 85 82			sta :bp2
  2846 9752 AD 69 3F			lda P+1
  2847 9755 85 83			sta :bp2+1
  2848 9757 A0 04			ldy #$04
  2849 9759 B1 82 99 C4 02 88 + 	mva:rpl (:bp2),y $02C4,y-
  2850
  2851 				; ------------------------------------------------------------
  2852
  2853 = 3F68			P	= DATAORIGIN+$00E8
  2854
  2855 = 3F68			@VarData	= P
  2856 = 0002			@VarDataSize	= 2
  2857
  2858 9761			@exit
  2859 					.ifdef @new
  2860 					lda <@VarData
  2861 					sta :ztmp
  2862 					lda >@VarData
  2863 					ldy #@VarDataSize-1
  2864 					jmp @FreeMem
  2865 					els
  2866 9761 60				rts						; ret
  2867 					eif
  2868 				.endl
  2869
  2870 9762			.local	INVERS						; PROCEDURE | ASSEMBLER | REGISTER
  2871 9762 85 88			sta CHARS
  2872
  2873 				; -------------------  ASM Block 00000097  -------------------
  2874
  2875 9764			  icl 'asms/invers.a65'
Source: invers.a65
     1 9764 A8			  tay // ldy spaces
     2 9765 D0 01 60		  sne:rts
     3 9768 88			  dey
     4 9769			loop:
     5 9769 B1 D4		  lda (scradr),y
     6 976B 49 80		  eor #$80
     7 976D 91 D4		  sta (scradr),y
     8 976F 88			  dey
     9 9770 10 F7		  bpl loop
  2876
  2877 				; ------------------------------------------------------------
  2878
  2879 = 0088			CHARS	= :EDX
  2880 9772			@exit
  2881 					.ifdef @new
  2882 					lda <@VarData
  2883 					sta :ztmp
  2884 					lda >@VarData
  2885 					ldy #@VarDataSize-1
  2886 					jmp @FreeMem
  2887 					els
  2888 9772 60				rts						; ret
  2889 					eif
  2890 				.endl
  2891
  2892 9773			.local	PUTSPACES					; PROCEDURE | ASSEMBLER | REGISTER
  2893 9773 85 88			sta SPACES
  2894
  2895 				; -------------------  ASM Block 00000098  -------------------
  2896
  2897 9775			  icl 'asms/put_spaces.a65'
Source: put_spaces.a65
     1 9775 A8			  tay // ldy spaces
     2 9776 D0 01 60		  sne:rts
     3 9779 A9 00		  lda #0
     4 977B			loop:
     5 977B 88			  dey
     6 977C 91 D4		  sta (scradr),y
     7 977E D0 FB		  bne loop
  2898
  2899 				; ------------------------------------------------------------
  2900
  2901 = 0088			SPACES	= :EDX
  2902 9780			@exit
  2903 					.ifdef @new
  2904 					lda <@VarData
  2905 					sta :ztmp
  2906 					lda >@VarData
  2907 					ldy #@VarDataSize-1
  2908 					jmp @FreeMem
  2909 					els
  2910 9780 60				rts						; ret
  2911 					eif
  2912 				.endl
  2913
  2914 9781			.local	PUTINTTEXT					; PROCEDURE | ASSEMBLER | REGISTER
  2915
  2916 				; -------------------  ASM Block 00000099  -------------------
  2917
  2918 9781			  icl 'asms/putinttext.a65'
Source: putinttext.a65
     1 = 0088			  regptr = $88
     2
     3 9781 A5 89		  lda s+1
     4 9783 85 89		  sta regptr+1
     5 9785 A5 88		  lda s
     6 9787 85 88		  sta regptr
     7
     8 9789 A0 00		  ldy #0
     9 978B B1 88		  lda (regptr),y
    10 978D F0 1A		  beq exitPutText
    11
    12 978F 48 A8		  pha:tay
    13 9791 88			  dey
    14 9792 E6 88		  inc regptr
    15 9794 D0 02 E6 89		  sne:inc regptr+1
    16
    17 9798			putText:
    18 9798 B1 88		  lda (regptr),y   // get string character
    19 979A 91 D4		  sta (scradr),y   // put on screen
    20 979C 88			  dey
    21 979D 10 F9		  bpl putText
    22
    23 979F 68			  pla
    24 97A0 18			  clc
    25 97A1 65 D4		  adc scradr
    26 97A3 85 D4		  sta scradr
    27 97A5 90 02 E6 D5		  scc:inc scradr+1
    28
    29 97A9			exitPutText:
  2919
  2920 				; ------------------------------------------------------------
  2921
  2922 = 0088			S	= :EDX
  2923 97A9			@exit
  2924 					.ifdef @new
  2925 					lda <@VarData
  2926 					sta :ztmp
  2927 					lda >@VarData
  2928 					ldy #@VarDataSize-1
  2929 					jmp @FreeMem
  2930 					els
  2931 97A9 60				rts						; ret
  2932 					eif
  2933 				.endl
  2934
  2935 97AA			.local	PUTASCTEXT					; PROCEDURE | ASSEMBLER | REGISTER
  2936
  2937 				; -------------------  ASM Block 00000100  -------------------
  2938
  2939 97AA			  icl 'asms/putasctext.a65'
Source: putasctext.a65
     1 = 0088			  regptr = $88
     2
     3 97AA 8A 48		  txa:pha
     4
     5 97AC A0 00		  ldy #0
     6 97AE B1 88		  lda (regptr),y
     7 97B0 F0 26		  beq exitPutText
     8
     9 97B2 48 A8		  pha:tay
    10 97B4 88			  dey
    11 97B5 E6 88		  inc regptr
    12 97B7 D0 02 E6 89		  sne:inc regptr+1
    13
    14 97BB			putText:
    15 97BB B1 88		  lda (regptr),y   // get string character
    16
    17 97BD			atasci2antic:
    18 97BD 0A			  asl
    19 97BE 69 C0		  adc #$c0
    20 97C0 10 02 49 40		  spl:eor #$40
    21 97C4 4A			  lsr
    22 97C5 90 02 49 80		  scc:eor #$80
    23
    24 97C9 91 D4		  sta (scradr),y   // put on screen
    25 97CB 88			  dey
    26 97CC 10 ED		  bpl putText
    27
    28 97CE 68			  pla
    29 97CF 18			  clc
    30 97D0 65 D4		  adc scradr
    31 97D2 85 D4		  sta scradr
    32 97D4 90 02 E6 D5		  scc:inc scradr+1
    33
    34 97D8			exitPutText:
    35 97D8 68 AA		  pla:tax
  2940
  2941 				; ------------------------------------------------------------
  2942
  2943 = 0088			S	= :EDX
  2944 97DA			@exit
  2945 					.ifdef @new
  2946 					lda <@VarData
  2947 					sta :ztmp
  2948 					lda >@VarData
  2949 					ldy #@VarDataSize-1
  2950 					jmp @FreeMem
  2951 					els
  2952 97DA 60				rts						; ret
  2953 					eif
  2954 				.endl
  2955
  2956 97DB			.local	PUTHEX						; PROCEDURE | ASSEMBLER
  2957
  2958 				; -------------------  ASM Block 00000101  -------------------
  2959
  2960 97DB			  icl 'asms/puthex.a65'
Source: puthex.a65
     1 				// store `scradr` value as a operand of opcode
     2 97DB 8A 48		  txa:pha
     3
     4 97DD A5 D4		  lda scradr
     5 97DF 8D 23 98		  sta screen
     6 97E2 A5 D5		  lda scradr+1
     7 97E4 8D 24 98		  sta screen+1
     8 97E7 AD 6A 3F		  lda v
     9 97EA 8D 0C 98		  sta vadr1
    10 97ED 8D 14 98		  sta vadr2
    11 97F0 AD 6B 3F		  lda v+1
    12 97F3 8D 0D 98		  sta vadr1+1
    13 97F6 8D 15 98		  sta vadr2+1
    14
    15 97F9 A9 00		  lda #0
    16 97FB 8D 38 98		  sta _vofs
    17
    18 				// get nibbles to show, if =0 exit
    19 97FE AC 6C 3F		  ldy n
    20 9801 F0 32		  beq stop
    21
    22 9803			hexLoop:
    23 9803 AE 38 98		  ldx _vofs
    24 9806 98			  tya
    25 9807 29 01		  and #1
    26 9809 D0 08		  bne HiNibble
    27 980B BD 00 F0		  lda vadr1:$f000,x
    28 980E 29 0F		  and #$0f
    29 9810 4C 1D 98		  jmp put2screen
    30 9813			HiNibble:
    31 9813 BD 00 F0		  lda vadr2:$f000,x
    32 9816 4A 4A 4A 4A		  :4 lsr @
    33 981A EE 38 98		  inc _vofs
    34
    35 981D			put2screen:
    36 981D AA			  tax
    37 981E BD 39 98		  lda hexTab,x
    38 				//  ora puttextinvert
    39 9821 88			  dey
    40 9822 99 00 F0		  sta screen:$f000,y
    41
    42 9825 C0 00		  cpy #0
    43 9827 D0 DA		  bne hexLoop
    44
    45 9829			calcEndAddr:
    46 9829 A5 D4		  lda scradr
    47 982B 18			  clc
    48 982C 6D 6C 3F		  adc n
    49 982F 85 D4		  sta scradr
    50 9831 90 02		  bcc stop
    51 9833 E6 D5		  inc scradr+1
    52
    53 9835			stop:
    54 9835 68 AA		  pla:tax
    55 9837 60			  rts
    56
    57 9838			_vofs
    58 9838 00			  .by 0
    59 9839			hexTab:
    60 9839 10 11 12 13 14 15 +   dta d'0123456789ABCDEF'
  2961
  2962 				; ------------------------------------------------------------
  2963
  2964 = 3F6A			V	= DATAORIGIN+$00EA
  2965 = 3F6C			N	= DATAORIGIN+$00EC
  2966
  2967 = 3F6A			@VarData	= V
  2968 = 0003			@VarDataSize	= 3
  2969
  2970 9849			@exit
  2971 					.ifdef @new
  2972 					lda <@VarData
  2973 					sta :ztmp
  2974 					lda >@VarData
  2975 					ldy #@VarDataSize-1
  2976 					jmp @FreeMem
  2977 					els
  2978 9849 60				rts						; ret
  2979 					eif
  2980 				.endl
  2981
  2982 984A			.local	PUTINT						; PROCEDURE | ASSEMBLER
  2983
  2984 				; -------------------  ASM Block 00000102  -------------------
  2985
  2986 984A			  icl 'asms/int2str.a65'
Source: int2str.a65
     1 = 0000			EOL = 0
     2
     3 984A A5 D4		    lda scradr
     4 984C 8D 96 98		    sta screen1
     5 984F 8D AD 98		    sta screen2
     6 9852 A5 D5		    lda scradr+1
     7 9854 8D 97 98		    sta screen1+1
     8 9857 8D AE 98		    sta screen2+1
     9
    10 985A			INT2STR:
    11 985A A0 00		    ldy #0
    12 985C 8C BB 98		    sty _cnt
    13 985F			ITSNEXT:
    14 985F A2 00		    ldx #0
    15 9861			ITSSLP:
    16 9861 AD 6D 3F		    lda value
    17 9864 38			    sec
    18 9865 F9 BC 98		    sbc Pow10Tab,Y
    19 9868 8D 6D 3F		    sta value
    20 986B AD 6E 3F		    lda value+1
    21 986E C8			    iny
    22 986F F9 BC 98		    sbc Pow10Tab,Y
    23 9872 90 08		    bcc ITSADD
    24 9874 8D 6E 3F		    sta value+1
    25 9877 E8			    inx
    26 9878 88			    dey
    27 9879 18			    clc
    28 987A 90 E5		    bcc ITSSLP
    29 987C			ITSADD:
    30 987C 88			    dey
    31 987D AD 6D 3F		    lda value
    32 9880 79 BC 98		    adc Pow10Tab,Y
    33 9883 8D 6D 3F		    sta value
    34 9886 8A			    txa
    35 9887 09 10		    ora #$10
    36
    37 				; skip lead zeros
    38 9889 AE BB 98		    ldx _cnt
    39 988C D0 04		    bne storeDigit
    40 988E C9 10		    cmp #$10
    41 9890 F0 09		    beq skipDigit
    42
    43 9892			storeDigit:
    44 9892 0D 66 3F		    ora puttextinvert
    45 9895 9D 00 F0		    sta screen1:$f000,X
    46 9898 EE BB 98		    inc _cnt
    47 989B			skipDigit:
    48 989B C8			    iny
    49 989C C8			    iny
    50 989D C0 08		    cpy #8
    51 989F 90 BE		    bcc ITSNEXT
    52
    53 				; last digit
    54 98A1 AD 6D 3F		    lda value
    55 98A4 09 10		    ora #$10
    56 98A6 AE BB 98		    ldx _cnt
    57 98A9 0D 66 3F		    ora puttextinvert
    58 98AC 9D 00 F0		    sta screen2:$f000,X
    59 98AF E8			    inx
    60
    61 				; set screen addres to the end of value
    62 98B0 8A			    txa
    63 98B1 18			    clc
    64 98B2 65 D4		    adc scradr
    65 98B4 85 D4		    sta scradr
    66 98B6 90 02		    bcc stop
    67 98B8 E6 D5		    inc scradr+1
    68
    69 98BA			stop:
    70 98BA 60			    rts
    71
    72 98BB			_cnt
    73 98BB 00			    .by 0
    74 98BC			Pow10Tab
    75 98BC 10 27		    .wo 10000
    76 98BE E8 03		    .wo 1000
    77 98C0 64 00		    .wo 100
    78 98C2 0A 00		    .wo 10
  2987
  2988 				; ------------------------------------------------------------
  2989
  2990 = 3F6D			VALUE	= DATAORIGIN+$00ED
  2991
  2992 = 3F6D			@VarData	= VALUE
  2993 = 0002			@VarDataSize	= 2
  2994
  2995 98C4			@exit
  2996 					.ifdef @new
  2997 					lda <@VarData
  2998 					sta :ztmp
  2999 					lda >@VarData
  3000 					ldy #@VarDataSize-1
  3001 					jmp @FreeMem
  3002 					els
  3003 98C4 60				rts						; ret
  3004 					eif
  3005 				.endl
  3006
  3007 98C5			.local	RESET_MIDI					; PROCEDURE
  3008
  3009 				; optimize OK (helpers.inc), line = 71
  3010
  3011 98C5 A9 00			lda #$00
  3012 98C7 8D 6F 3F			sta I
  3013
  3014 				; --- WhileProlog
  3015 98CA 4C DB 98			jmp l_07ED
  3016 98CD			l_07EE
  3017
  3018 				; optimize OK (helpers.inc), line = 74
  3019
  3020 98CD AC 6F 3F			ldy I
  3021 98D0 B9 0A 81			lda adr.GM_RESET,y
  3022 98D3 85 FF			sta MIDI_FIFO.FIFO_BYTE
  3023 98D5 20 39 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  3024
  3025 				; optimize FAIL (0, helpers.inc), line = 75
  3026
  3027 98D8 EE 6F 3F			inc I
  3028 98DB			l_07ED
  3029
  3030 				; optimize OK (helpers.inc), line = 72
  3031
  3032 98DB AD 6F 3F			lda I
  3033 98DE C9 06			cmp #$06
  3034 98E0 90 EB			jcc l_07EE
  3035
  3036 				; optimize FAIL ('MIDI_FIFO.FIFO_FLUSH', helpers.inc), line = 77
  3037
  3038 98E2 20 52 8A			jsr MIDI_FIFO.FIFO_FLUSH
  3039
  3040 				; ------------------------------------------------------------
  3041
  3042 = 3F6F			I	= DATAORIGIN+$00EF
  3043
  3044 = 3F6F			@VarData	= I
  3045 = 0001			@VarDataSize	= 1
  3046
  3047 98E5			@exit
  3048 					.ifdef @new
  3049 					lda <@VarData
  3050 					sta :ztmp
  3051 					lda >@VarData
  3052 					ldy #@VarDataSize-1
  3053 					jmp @FreeMem
  3054 					els
  3055 98E5 60				rts						; ret
  3056 					eif
  3057 				.endl
  3058
  3059 98E6			.local	STOPMIDI					; PROCEDURE
  3060
  3061 				; optimize OK (helpers.inc), line = 82
  3062
  3063 98E6 A5 F5			lda MIDFILES._TIMERSTATUS
  3064 98E8 09 80			ora #$80
  3065 98EA 85 F5			sta MIDFILES._TIMERSTATUS
  3066
  3067 				; optimize OK (helpers.inc), line = 83
  3068
  3069 98EC A9 00			lda #$00
  3070 98EE 85 F0			sta MIDFILES._TOTALTICKS
  3071 98F0 85 F1			sta MIDFILES._TOTALTICKS+1
  3072 98F2 85 F2			sta MIDFILES._TOTALTICKS+2
  3073 98F4 85 F3			sta MIDFILES._TOTALTICKS+3
  3074 98F6 A9 01			lda #$01
  3075 98F8 85 F4			sta MIDFILES._SUBCNT
  3076
  3077 				; optimize OK (helpers.inc), line = 84
  3078
  3079 98FA 78				sei
  3080 98FB AD DA 3E 8D 10 02		mva MIDFILES.OLDTIMERVEC VTIMR1
  3081 9901 AD DB 3E 8D 11 02		mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
  3082 9907 A5 10			lda irqens
  3083 9909 29 FE			and #$fe
  3084 990B 85 10			sta irqens
  3085 990D 8D 0E D2			sta irqen
  3086 9910 58				cli
  3087
  3088 				; optimize FAIL ('RESET_MIDI', helpers.inc), line = 85
  3089
  3090 9911 20 C5 98			jsr RESET_MIDI
  3091 9914			@exit
  3092 					.ifdef @new
  3093 					lda <@VarData
  3094 					sta :ztmp
  3095 					lda >@VarData
  3096 					ldy #@VarDataSize-1
  3097 					jmp @FreeMem
  3098 					els
  3099 9914 60				rts						; ret
  3100 					eif
  3101 				.endl
  3102
  3103 9915			.local	HLINE						; PROCEDURE | ASSEMBLER
  3104
  3105 				; -------------------  ASM Block 00000103  -------------------
  3106
  3107 9915			  icl 'asms/hline.a65'
Source: hline.a65
     1 9915 A0 27		  ldy #39
     2 9917 A9 4A		  lda #$4a
     3 9919			loop:
     4 9919 91 D4		  sta (scradr),y
     5 991B 88			  dey
     6 991C 10 FB		  bpl loop
  3108
  3109 991E			@exit
  3110 					.ifdef @new
  3111 					lda <@VarData
  3112 					sta :ztmp
  3113 					lda >@VarData
  3114 					ldy #@VarDataSize-1
  3115 					jmp @FreeMem
  3116 					els
  3117 991E 60				rts						; ret
  3118 					eif
  3119 				.endl
  3120
  3121 991F			.local	CLEARWORKAREA					; PROCEDURE | ASSEMBLER
  3122
  3123 				; -------------------  ASM Block 00000104  -------------------
  3124
  3125 991F			  icl 'asms/clear_workarea.a65'
Source: clear_workarea.a65
     1 991F A0 00		  ldy #0
     2 9921 A9 00		  lda #0
     3 9923			loop1:
     4 9923 99 F8 36		  sta SCREEN_WORK,y
     5 9926 99 F8 37		  sta SCREEN_WORK+$100,y
     6 9929 C8			  iny
     7 992A D0 F7		  bne loop1
     8 992C A0 A8		  ldy #$A8
     9 992E			loop2:
    10 992E 99 F7 38		  sta SCREEN_WORK+$1FF,y
    11 9931 88			  dey
    12 9932 D0 FA		  bne loop2
  3126
  3127 9934			@exit
  3128 					.ifdef @new
  3129 					lda <@VarData
  3130 					sta :ztmp
  3131 					lda >@VarData
  3132 					ldy #@VarDataSize-1
  3133 					jmp @FreeMem
  3134 					els
  3135 9934 60				rts						; ret
  3136 					eif
  3137 				.endl
  3138
  3139 9935			.local	RESETMEMORYPTR					; PROCEDURE
  3140
  3141 				; optimize OK (helpers.inc), line = 102
  3142
  3143 9935 A5 4B			lda TOTALXMS
  3144 9937 8D 5F 3F			sta LAST_BANK
  3145
  3146 				; optimize OK (helpers.inc), line = 103
  3147
  3148 993A A5 4B			lda TOTALXMS
  3149 993C F0 0D			jeq l_0840
  3150
  3151 				; optimize OK (helpers.inc), line = 104
  3152
  3153 993E A9 00			lda #$00
  3154 9940 8D 60 3F			sta LAST_ADR
  3155 9943 A9 40			lda #$40
  3156 9945 8D 61 3F			sta LAST_ADR+1
  3157 9948 4C 55 99			jmp l_084E
  3158 994B			l_0840
  3159
  3160 				; optimize OK (helpers.inc), line = 106
  3161
  3162 994B A9 00			lda #$00
  3163 994D 8D 60 3F			sta LAST_ADR
  3164 9950 A9 D8			lda #$D8
  3165 9952 8D 61 3F			sta LAST_ADR+1
  3166 9955			l_084E
  3167 9955			@exit
  3168 					.ifdef @new
  3169 					lda <@VarData
  3170 					sta :ztmp
  3171 					lda >@VarData
  3172 					ldy #@VarDataSize-1
  3173 					jmp @FreeMem
  3174 					els
  3175 9955 60				rts						; ret
  3176 					eif
  3177 				.endl
  3178
  3179 9956			.local	CLEARSTATUS					; PROCEDURE
  3180
  3181 				; optimize OK (helpers.inc), line = 115
  3182
  3183 9956 A9 00			lda #$00
  3184 9958 A0 3B			ldy #$3B
  3185 995A 99 C8 39 88 10 FA		sta:rpl $39C8,y-
  3186
  3187 				; optimize OK (helpers.inc), line = 116
  3188
  3189 9960 A9 C8			lda #$C8
  3190 9962 85 D4			sta SCRADR
  3191 9964 A9 39			lda #$39
  3192 9966 85 D5			sta SCRADR+1
  3193 9968 A9 02			lda #$02
  3194 996A 85 88			sta PUTINTTEXT.S
  3195 996C A9 80			lda #$80
  3196 996E 85 89			sta PUTINTTEXT.S+1
  3197 9970 20 81 97			jsr PUTINTTEXT
  3198
  3199 				; optimize FAIL ('STATUSLOOP', helpers.inc), line = 117
  3200
  3201 9973 20 B7 9A			jsr STATUSLOOP
  3202
  3203 				; optimize OK (helpers.inc), line = 118
  3204
  3205 9976 A9 DC			lda #$DC
  3206 9978 85 D4			sta SCRADR
  3207 997A A9 39			lda #$39
  3208 997C 85 D5			sta SCRADR+1
  3209 997E 20 15 99			jsr HLINE
  3210
  3211 				; optimize OK (helpers.inc), line = 119
  3212
  3213 9981 A9 10			lda #$10
  3214 9983 85 8C			sta :ecx
  3215 9985 A5 4B			lda TOTALXMS
  3216 9987 85 84			sta :eax
  3217 					.ifdef fmulinit
  3218 					fmulu_8
  3219 					els
  3220 9989 20 CD 83			imulCL
  3221 					eif
  3222 998C A5 84			lda :eax
  3223 998E 18 69 23			add #$23
  3224 9991 8D 73 3F			sta MEMAVAILABLE
  3225 9994 A5 85			lda :eax+1
  3226 9996 69 00			adc #$00
  3227 9998 8D 74 3F			sta MEMAVAILABLE+1
  3228
  3229 				; optimize OK (helpers.inc), line = 120
  3230
  3231 999B C9 27			cmp #$27
  3232 999D D0 05			bne @+
  3233 999F AD 73 3F			lda MEMAVAILABLE
  3234 99A2 C9 10			cmp #$10
  3235 				@
  3236 99A4 B0 08			jcs l_0885
  3237 99A6 A9 F9			lda #$F9
  3238 99A8 85 D4			sta SCRADR
  3239 99AA A9 39			lda #$39
  3240 99AC 85 D5			sta SCRADR+1
  3241 99AE			l_0885
  3242
  3243 				; optimize OK (helpers.inc), line = 121
  3244
  3245 99AE AD 74 3F			lda MEMAVAILABLE+1
  3246 99B1 C9 03			cmp #$03
  3247 99B3 D0 05			bne @+
  3248 99B5 AD 73 3F			lda MEMAVAILABLE
  3249 99B8 C9 E8			cmp #$E8
  3250 				@
  3251 99BA B0 08			jcs l_089D
  3252 99BC A9 FA			lda #$FA
  3253 99BE 85 D4			sta SCRADR
  3254 99C0 A9 39			lda #$39
  3255 99C2 85 D5			sta SCRADR+1
  3256 99C4			l_089D
  3257
  3258 				; optimize OK (helpers.inc), line = 122
  3259
  3260 99C4 AD 74 3F			lda MEMAVAILABLE+1
  3261 99C7 D0 0F			jne l_08B5
  3262 99C9 AD 73 3F			lda MEMAVAILABLE
  3263 99CC C9 64			cmp #$64
  3264 99CE B0 08			jcs l_08B5
  3265 99D0 A9 FB			lda #$FB
  3266 99D2 85 D4			sta SCRADR
  3267 99D4 A9 39			lda #$39
  3268 99D6 85 D5			sta SCRADR+1
  3269 99D8			l_08B5
  3270
  3271 				; optimize OK (helpers.inc), line = 123
  3272
  3273 99D8 AD 74 3F			lda MEMAVAILABLE+1
  3274 99DB D0 0F			jne l_08CD
  3275 99DD AD 73 3F			lda MEMAVAILABLE
  3276 99E0 C9 0A			cmp #$0A
  3277 99E2 B0 08			jcs l_08CD
  3278 99E4 A9 FC			lda #$FC
  3279 99E6 85 D4			sta SCRADR
  3280 99E8 A9 39			lda #$39
  3281 99EA 85 D5			sta SCRADR+1
  3282 99EC			l_08CD
  3283
  3284 				; optimize OK (helpers.inc), line = 124
  3285
  3286 99EC A5 D4			lda SCRADR
  3287 99EE 8D 71 3F			sta OSCRADR
  3288 99F1 A5 D5			lda SCRADR+1
  3289 99F3 8D 72 3F			sta OSCRADR+1
  3290
  3291 				; optimize OK (helpers.inc), line = 125
  3292
  3293 99F6 A9 09			lda #$09
  3294 99F8 85 88			sta PUTINTTEXT.S
  3295 99FA A9 80			lda #$80
  3296 99FC 85 89			sta PUTINTTEXT.S+1
  3297 99FE 20 81 97			jsr PUTINTTEXT
  3298 9A01 AD 73 3F			lda MEMAVAILABLE
  3299 9A04 8D 6D 3F			sta PUTINT.VALUE
  3300 9A07 AD 74 3F			lda MEMAVAILABLE+1
  3301 9A0A 8D 6E 3F			sta PUTINT.VALUE+1
  3302 9A0D 20 4A 98			jsr PUTINT
  3303 9A10 A9 0F			lda #$0F
  3304 9A12 85 88			sta PUTINTTEXT.S
  3305 9A14 A9 80			lda #$80
  3306 9A16 85 89			sta PUTINTTEXT.S+1
  3307 9A18 20 81 97			jsr PUTINTTEXT
  3308
  3309 				; optimize OK (helpers.inc), line = 126
  3310
  3311 9A1B AD 00 05			lda adr.FN
  3312 9A1E 8D 70 3F			sta L
  3313
  3314 				; optimize OK (helpers.inc), line = 127
  3315
  3316 9A21 D0 03			jne l_08F5
  3317 9A23 4C 56 9A			jmp @exit					; exit
  3318 9A26			l_08F5
  3319
  3320 				; optimize OK (helpers.inc), line = 128
  3321
  3322 9A26 AD 70 3F			lda L
  3323 9A29 C9 11			cmp #$11
  3324 9A2B 90 05			jcc l_090A
  3325 9A2D A9 10			lda #$10
  3326 9A2F 8D 00 05			sta adr.FN+$00
  3327 9A32			l_090A
  3328
  3329 				; optimize OK (helpers.inc), line = 129
  3330
  3331 9A32 AD 71 3F			lda OSCRADR
  3332 9A35 AC 72 3F			ldy OSCRADR+1
  3333 9A38 38 ED 70 3F			sub L
  3334 9A3C B0 01			scs
  3335 9A3E 88				dey
  3336 9A3F 38 E9 01			sub #$01
  3337 9A42 85 D4			sta SCRADR
  3338 9A44 B0 01			scs
  3339 9A46 88				dey
  3340 9A47 84 D5			sty SCRADR+1
  3341 9A49 AD 66 A8			lda FN
  3342 9A4C 85 88			sta PUTASCTEXT.S
  3343 9A4E AD 67 A8			lda FN+1
  3344 9A51 85 89			sta PUTASCTEXT.S+1
  3345 9A53 20 AA 97			jsr PUTASCTEXT
  3346
  3347 				; ------------------------------------------------------------
  3348
  3349 = 3F70			L	= DATAORIGIN+$00F0
  3350 = 3F71			OSCRADR	= DATAORIGIN+$00F1
  3351 = 3F73			MEMAVAILABLE	= DATAORIGIN+$00F3
  3352
  3353 = 3F70			@VarData	= L
  3354 = 0005			@VarDataSize	= 5
  3355
  3356 9A56			@exit
  3357 					.ifdef @new
  3358 					lda <@VarData
  3359 					sta :ztmp
  3360 					lda >@VarData
  3361 					ldy #@VarDataSize-1
  3362 					jmp @FreeMem
  3363 					els
  3364 9A56 60				rts						; ret
  3365 					eif
  3366 				.endl
  3367
  3368 9A57			.local	CLEARUVMETERS					; PROCEDURE
  3369
  3370 				; optimize OK (helpers.inc), line = 134
  3371
  3372 9A57 A5 4A			lda PLAYERSTATUS
  3373 9A59 A0 01			ldy #1
  3374 9A5B 29 02			and #$02
  3375 9A5D F0 01			beq @+
  3376 9A5F 88				dey
  3377 				@
  3378 9A60 98				tya
  3379 9A61 0D 58 3F			ora FIRSTTIME
  3380 9A64 F0 27			jeq l_0944
  3381
  3382 				; optimize OK (helpers.inc), line = 136
  3383
  3384 9A66 A9 00			lda #$00
  3385 9A68 8D 50 3F			sta CHN
  3386
  3387 				; --- RepeatUntilProlog
  3388 9A6B			l_094A
  3389
  3390 				; optimize OK (helpers.inc), line = 138
  3391
  3392 9A6B AD 50 3F			lda CHN
  3393 9A6E 0A				asl @
  3394 9A6F A8				tay
  3395 9A70 B9 0F 3F			lda adr.CHANNELSCRADR,y
  3396 9A73 85 D4			sta SCRADR
  3397 9A75 B9 10 3F			lda adr.CHANNELSCRADR+1,y
  3398 9A78 85 D5			sta SCRADR+1
  3399
  3400 				; -------------------  ASM Block 00000105  -------------------
  3401
  3402 9A7A A0 03		        ldy #3
  3403 9A7C A9 41		        lda #$41
  3404 9A7E			      VClr:
  3405 9A7E 91 D4		        sta (scradr),y
  3406 9A80 88			        dey
  3407 9A81 10 FB		        bpl VClr
  3408 				      
  3409 				; optimize FAIL (0, helpers.inc), line = 148
  3410
  3411 9A83 EE 50 3F			inc CHN
  3412
  3413 				; optimize OK (helpers.inc), line = 149
  3414
  3415 9A86 AD 50 3F			lda CHN
  3416 9A89 C9 10			cmp #$10
  3417 9A8B D0 DE			jne l_094A
  3418 9A8D			l_0944
  3419 9A8D			@exit
  3420 					.ifdef @new
  3421 					lda <@VarData
  3422 					sta :ztmp
  3423 					lda >@VarData
  3424 					ldy #@VarDataSize-1
  3425 					jmp @FreeMem
  3426 					els
  3427 9A8D 60				rts						; ret
  3428 					eif
  3429 				.endl
  3430
  3431 9A8E			.local	EXIT2DOS					; PROCEDURE
  3432
  3433 				; optimize FAIL ('STOPMIDI', helpers.inc), line = 155
  3434
  3435 9A8E 20 E6 98			jsr STOPMIDI
  3436
  3437 				; optimize OK (helpers.inc), line = 156
  3438
  3439 9A91 A9 00			lda #$00
  3440 9A93 20 AE 8A			jsr CIO.CLS
  3441 9A96 A9 00			lda #$00
  3442 9A98 8D B1 3E			sta CIO.OPN.CHN
  3443 9A9B A9 0C			lda #$0C
  3444 9A9D 8D B2 3E			sta CIO.OPN.AX1
  3445 9AA0 A9 00			lda #$00
  3446 9AA2 8D B3 3E			sta CIO.OPN.AX2
  3447 9AA5 A9 13			lda #$13
  3448 9AA7 8D B4 3E			sta CIO.OPN.DEVICE
  3449 9AAA A9 80			lda #$80
  3450 9AAC 8D B5 3E			sta CIO.OPN.DEVICE+1
  3451 9AAF 20 70 8A			jsr CIO.OPN
  3452 9AB2 A9 01			lda #$01
  3453 9AB4 85 41			sta SOUNDR
  3454 9AB6			@exit
  3455 					.ifdef @new
  3456 					lda <@VarData
  3457 					sta :ztmp
  3458 					lda >@VarData
  3459 					ldy #@VarDataSize-1
  3460 					jmp @FreeMem
  3461 					els
  3462 9AB6 60				rts						; ret
  3463 					eif
  3464 				.endl
  3465
  3466 9AB7			.local	STATUSLOOP					; PROCEDURE
  3467
  3468 				; optimize OK (status.inc), line = 11
  3469
  3470 9AB7 A9 CE			lda #$CE
  3471 9AB9 85 D4			sta SCRADR
  3472 9ABB A9 39			lda #$39
  3473 9ABD 85 D5			sta SCRADR+1
  3474
  3475 				; optimize OK (status.inc), line = 12
  3476
  3477 9ABF A5 4A			lda PLAYERSTATUS
  3478 9AC1 29 0C			and #$0C
  3479 9AC3 4A				lsr @
  3480 9AC4 4A				lsr @
  3481 9AC5 8D 57 3F			sta V
  3482
  3483 				; optimize OK (status.inc), line = 13
  3484
  3485 9AC8 0A				asl @
  3486 9AC9 A8				tay
  3487 9ACA B9 10 81			lda adr.SLOOP,y
  3488 9ACD 85 88			sta PUTINTTEXT.S
  3489 9ACF B9 11 81			lda adr.SLOOP+1,y
  3490 9AD2 85 89			sta PUTINTTEXT.S+1
  3491 9AD4 20 81 97			jsr PUTINTTEXT
  3492
  3493 				; ------------------------------------------------------------
  3494
  3495 = 8110			adr.SLOOP	= CODEORIGIN+$0110
  3496 9AD7			.var SLOOP	= adr.SLOOP .word
  3497 9AD7			@exit
  3498 					.ifdef @new
  3499 					lda <@VarData
  3500 					sta :ztmp
  3501 					lda >@VarData
  3502 					ldy #@VarDataSize-1
  3503 					jmp @FreeMem
  3504 					els
  3505 9AD7 60				rts						; ret
  3506 					eif
  3507 = 9AD8 10 81		SLOOP
  3507 				.endl
  3508
  3509 9ADA			.local	STATUSPLAYING					; PROCEDURE
  3510
  3511 				; optimize OK (status.inc), line = 18
  3512
  3513 9ADA AD BB 3E			lda MIDFILES.TOTALTRACKS
  3514 9ADD F0 3F			jeq l_09A7
  3515
  3516 				; optimize OK (status.inc), line = 20
  3517
  3518 9ADF A9 C8			lda #$C8
  3519 9AE1 85 D4			sta SCRADR
  3520 9AE3 A9 39			lda #$39
  3521 9AE5 85 D5			sta SCRADR+1
  3522 9AE7 A9 27			lda #$27
  3523 9AE9 85 88			sta PUTINTTEXT.S
  3524 9AEB A9 80			lda #$80
  3525 9AED 85 89			sta PUTINTTEXT.S+1
  3526 9AEF 20 81 97			jsr PUTINTTEXT
  3527
  3528 				; optimize OK (status.inc), line = 21
  3529
  3530 9AF2 A9 DD			lda #$DD
  3531 9AF4 85 D4			sta SCRADR
  3532 9AF6 A9 39			lda #$39
  3533 9AF8 85 D5			sta SCRADR+1
  3534 9AFA A9 2E			lda #$2E
  3535 9AFC 85 88			sta PUTINTTEXT.S
  3536 9AFE A9 80			lda #$80
  3537 9B00 85 89			sta PUTINTTEXT.S+1
  3538 9B02 20 81 97			jsr PUTINTTEXT
  3539
  3540 				; optimize OK (status.inc), line = 22
  3541
  3542 9B05 AD 59 3F			lda ISSTOPPED
  3543 9B08 F0 0B			jeq l_09C0
  3544
  3545 				; optimize FAIL ('MIDFILES.INITTIMER', status.inc), line = 24
  3546
  3547 9B0A 20 60 94			jsr MIDFILES.INITTIMER
  3548
  3549 				; optimize OK (status.inc), line = 25
  3550
  3551 9B0D A9 00			lda #$00
  3552 9B0F 8D 59 3F			sta ISSTOPPED
  3553 9B12 4C 1B 9B			jmp l_09CF
  3554 9B15			l_09C0
  3555
  3556 				; optimize OK (status.inc), line = 28
  3557
  3558 9B15 A5 F5			lda MIDFILES._TIMERSTATUS
  3559 9B17 29 7F			and #$7F
  3560 9B19 85 F5			sta MIDFILES._TIMERSTATUS
  3561 9B1B			l_09CF
  3562 9B1B 4C 42 9B			jmp l_09E5
  3563 9B1E			l_09A7
  3564
  3565 				; optimize OK (status.inc), line = 32
  3566
  3567 9B1E A9 C8			lda #$C8
  3568 9B20 85 D4			sta SCRADR
  3569 9B22 A9 39			lda #$39
  3570 9B24 85 D5			sta SCRADR+1
  3571 9B26 A9 02			lda #$02
  3572 9B28 85 88			sta PUTINTTEXT.S
  3573 9B2A A9 80			lda #$80
  3574 9B2C 85 89			sta PUTINTTEXT.S+1
  3575 9B2E 20 81 97			jsr PUTINTTEXT
  3576
  3577 				; optimize OK (status.inc), line = 33
  3578
  3579 9B31 A9 DD			lda #$DD
  3580 9B33 85 D4			sta SCRADR
  3581 9B35 A9 39			lda #$39
  3582 9B37 85 D5			sta SCRADR+1
  3583 9B39 85 88			sta PUTINTTEXT.S
  3584 9B3B A9 80			lda #$80
  3585 9B3D 85 89			sta PUTINTTEXT.S+1
  3586 9B3F 20 81 97			jsr PUTINTTEXT
  3587 9B42			l_09E5
  3588 9B42			@exit
  3589 					.ifdef @new
  3590 					lda <@VarData
  3591 					sta :ztmp
  3592 					lda >@VarData
  3593 					ldy #@VarDataSize-1
  3594 					jmp @FreeMem
  3595 					els
  3596 9B42 60				rts						; ret
  3597 					eif
  3598 				.endl
  3599
  3600 9B43			.local	STATUSPAUSE					; PROCEDURE
  3601
  3602 				; optimize OK (status.inc), line = 39
  3603
  3604 9B43 AD 59 3F			lda ISSTOPPED
  3605 9B46 F0 03			jeq l_0A01
  3606 9B48 4C 77 9B			jmp @exit					; exit
  3607 9B4B			l_0A01
  3608
  3609 				; optimize OK (status.inc), line = 40
  3610
  3611 9B4B A9 C8			lda #$C8
  3612 9B4D 85 D4			sta SCRADR
  3613 9B4F A9 39			lda #$39
  3614 9B51 85 D5			sta SCRADR+1
  3615 9B53 A9 44			lda #$44
  3616 9B55 85 88			sta PUTINTTEXT.S
  3617 9B57 A9 80			lda #$80
  3618 9B59 85 89			sta PUTINTTEXT.S+1
  3619 9B5B 20 81 97			jsr PUTINTTEXT
  3620
  3621 				; optimize OK (status.inc), line = 41
  3622
  3623 9B5E A9 DD			lda #$DD
  3624 9B60 85 D4			sta SCRADR
  3625 9B62 A9 39			lda #$39
  3626 9B64 85 D5			sta SCRADR+1
  3627 9B66 A9 4B			lda #$4B
  3628 9B68 85 88			sta PUTINTTEXT.S
  3629 9B6A A9 80			lda #$80
  3630 9B6C 85 89			sta PUTINTTEXT.S+1
  3631 9B6E 20 81 97			jsr PUTINTTEXT
  3632
  3633 				; optimize OK (status.inc), line = 42
  3634
  3635 9B71 A5 F5			lda MIDFILES._TIMERSTATUS
  3636 9B73 09 80			ora #$80
  3637 9B75 85 F5			sta MIDFILES._TIMERSTATUS
  3638 9B77			@exit
  3639 					.ifdef @new
  3640 					lda <@VarData
  3641 					sta :ztmp
  3642 					lda >@VarData
  3643 					ldy #@VarDataSize-1
  3644 					jmp @FreeMem
  3645 					els
  3646 9B77 60				rts						; ret
  3647 					eif
  3648 				.endl
  3649
  3650 9B78			.local	STATUSSTOPPED					; PROCEDURE
  3651
  3652 				; optimize OK (status.inc), line = 47
  3653
  3654 9B78 AD BB 3E			lda MIDFILES.TOTALTRACKS
  3655 9B7B D0 03			jne l_0A30
  3656 9B7D 4C D9 9B			jmp @exit					; exit
  3657 9B80			l_0A30
  3658
  3659 				; optimize OK (status.inc), line = 48
  3660
  3661 9B80 AD 59 3F			lda ISSTOPPED
  3662 9B83 F0 03			jeq l_0A3F
  3663 9B85 4C D9 9B			jmp @exit					; exit
  3664 9B88			l_0A3F
  3665
  3666 				; optimize OK (status.inc), line = 49
  3667
  3668 9B88 A9 01			lda #$01
  3669 9B8A 8D 59 3F			sta ISSTOPPED
  3670
  3671 				; optimize OK (status.inc), line = 50
  3672
  3673 9B8D A9 C8			lda #$C8
  3674 9B8F 85 D4			sta SCRADR
  3675 9B91 A9 39			lda #$39
  3676 9B93 85 D5			sta SCRADR+1
  3677 9B95 A9 56			lda #$56
  3678 9B97 85 88			sta PUTINTTEXT.S
  3679 9B99 A9 80			lda #$80
  3680 9B9B 85 89			sta PUTINTTEXT.S+1
  3681 9B9D 20 81 97			jsr PUTINTTEXT
  3682
  3683 				; optimize OK (status.inc), line = 51
  3684
  3685 9BA0 A9 DD			lda #$DD
  3686 9BA2 85 D4			sta SCRADR
  3687 9BA4 A9 39			lda #$39
  3688 9BA6 85 D5			sta SCRADR+1
  3689 9BA8 A9 5D			lda #$5D
  3690 9BAA 85 88			sta PUTINTTEXT.S
  3691 9BAC A9 80			lda #$80
  3692 9BAE 85 89			sta PUTINTTEXT.S+1
  3693 9BB0 20 81 97			jsr PUTINTTEXT
  3694
  3695 				; optimize FAIL ('STOPMIDI', status.inc), line = 52
  3696
  3697 9BB3 20 E6 98			jsr STOPMIDI
  3698
  3699 				; optimize OK (status.inc), line = 53
  3700
  3701 9BB6 A9 00			lda #$00
  3702 9BB8 85 88			sta SYSTEM.MOVE_0153.SOURCE
  3703 9BBA A9 2C			lda #$2C
  3704 9BBC 85 89			sta SYSTEM.MOVE_0153.SOURCE+1
  3705 9BBE A9 00			lda #$00
  3706 9BC0 85 8C			sta SYSTEM.MOVE_0153.DEST
  3707 9BC2 A9 2E			lda #$2E
  3708 9BC4 85 8D			sta SYSTEM.MOVE_0153.DEST+1
  3709 9BC6 A9 00			lda #$00
  3710 9BC8 85 84			sta SYSTEM.MOVE_0153.COUNT
  3711 9BCA A9 02			lda #$02
  3712 9BCC 85 85			sta SYSTEM.MOVE_0153.COUNT+1
  3713 9BCE				.local +MAIN.SYSTEM.MOVE_0153
  3714 9BCE				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0153.M@INLINE [Source: MIDICar Player.a65]
     4 9BCE 20 D9 82			jsr @move
Source: MIDICar Player.a65
  3715 					.endl
  3716
  3717 				; optimize OK (status.inc), line = 54
  3718
  3719 9BD1 A9 00			lda #$00
  3720 9BD3 8D 50 3F			sta CHN
  3721
  3722 				; optimize FAIL ('CLEARUVMETERS', status.inc), line = 55
  3723
  3724 9BD6 20 57 9A			jsr CLEARUVMETERS
  3725 9BD9			@exit
  3726 					.ifdef @new
  3727 					lda <@VarData
  3728 					sta :ztmp
  3729 					lda >@VarData
  3730 					ldy #@VarDataSize-1
  3731 					jmp @FreeMem
  3732 					els
  3733 9BD9 60				rts						; ret
  3734 					eif
  3735 				.endl
  3736
  3737 9BDA			.local	STATUSLOADING					; PROCEDURE
  3738
  3739 				; optimize OK (status.inc), line = 60
  3740
  3741 9BDA A9 DD			lda #$DD
  3742 9BDC 85 D4			sta SCRADR
  3743 9BDE A9 39			lda #$39
  3744 9BE0 85 D5			sta SCRADR+1
  3745 9BE2 A9 68			lda #$68
  3746 9BE4 85 88			sta PUTINTTEXT.S
  3747 9BE6 A9 80			lda #$80
  3748 9BE8 85 89			sta PUTINTTEXT.S+1
  3749 9BEA 20 81 97			jsr PUTINTTEXT
  3750 9BED			@exit
  3751 					.ifdef @new
  3752 					lda <@VarData
  3753 					sta :ztmp
  3754 					lda >@VarData
  3755 					ldy #@VarDataSize-1
  3756 					jmp @FreeMem
  3757 					els
  3758 9BED 60				rts						; ret
  3759 					eif
  3760 				.endl
  3761
  3762 9BEE			.local	STATUSREADDIRECTORY				; PROCEDURE
  3763
  3764 				; optimize OK (status.inc), line = 65
  3765
  3766 9BEE A9 DD			lda #$DD
  3767 9BF0 85 D4			sta SCRADR
  3768 9BF2 A9 39			lda #$39
  3769 9BF4 85 D5			sta SCRADR+1
  3770 9BF6 A9 73			lda #$73
  3771 9BF8 85 88			sta PUTINTTEXT.S
  3772 9BFA A9 80			lda #$80
  3773 9BFC 85 89			sta PUTINTTEXT.S+1
  3774 9BFE 20 81 97			jsr PUTINTTEXT
  3775 9C01			@exit
  3776 					.ifdef @new
  3777 					lda <@VarData
  3778 					sta :ztmp
  3779 					lda >@VarData
  3780 					ldy #@VarDataSize-1
  3781 					jmp @FreeMem
  3782 					els
  3783 9C01 60				rts						; ret
  3784 					eif
  3785 				.endl
  3786
  3787 9C02			.local	STATUSERROR					; PROCEDURE
  3788 9C02 8D 75 3F			sta ERR
  3789
  3790 				; optimize OK (status.inc), line = 75
  3791
  3792 9C05 A9 FF			lda #$FF
  3793 9C07 8D FC 02			sta KEYB
  3794
  3795 				; optimize OK (status.inc), line = 76
  3796
  3797 9C0A A9 DC			lda #$DC
  3798 9C0C 85 D4			sta SCRADR
  3799 9C0E A9 39			lda #$39
  3800 9C10 85 D5			sta SCRADR+1
  3801
  3802 				; optimize OK (status.inc), line = 77
  3803
  3804 9C12 AD 75 3F			lda ERR
  3805 9C15 8D 76 3F			sta @CASETMP_0004
  3806 9C18 C9 64			cmp #$64
  3807 9C1A D0 0E			jne l_0A87
  3808 				@
  3809
  3810 				; optimize OK (status.inc), line = 78
  3811
  3812 9C1C A9 88			lda #$88
  3813 9C1E 85 88			sta PUTINTTEXT.S
  3814 9C20 A9 80			lda #$80
  3815 9C22 85 89			sta PUTINTTEXT.S+1
  3816 9C24 20 81 97			jsr PUTINTTEXT
  3817
  3818 9C27 4C 7B 9C			jmp a_0004
  3819 9C2A			l_0A87
  3820 9C2A C9 65			cmp #$65
  3821 9C2C D0 0E			jne l_0A92
  3822 				@
  3823
  3824 				; optimize OK (status.inc), line = 79
  3825
  3826 9C2E A9 9E			lda #$9E
  3827 9C30 85 88			sta PUTINTTEXT.S
  3828 9C32 A9 80			lda #$80
  3829 9C34 85 89			sta PUTINTTEXT.S+1
  3830 9C36 20 81 97			jsr PUTINTTEXT
  3831
  3832 9C39 4C 7B 9C			jmp a_0004
  3833 9C3C			l_0A92
  3834 9C3C C9 66			cmp #$66
  3835 9C3E D0 0E			jne l_0A9D
  3836 				@
  3837
  3838 				; optimize OK (status.inc), line = 80
  3839
  3840 9C40 A9 B4			lda #$B4
  3841 9C42 85 88			sta PUTINTTEXT.S
  3842 9C44 A9 80			lda #$80
  3843 9C46 85 89			sta PUTINTTEXT.S+1
  3844 9C48 20 81 97			jsr PUTINTTEXT
  3845
  3846 9C4B 4C 7B 9C			jmp a_0004
  3847 9C4E			l_0A9D
  3848
  3849 				; optimize OK (status.inc), line = 82
  3850
  3851 9C4E A9 80			lda #$80
  3852 9C50 8D 66 3F			sta PUTTEXTINVERT
  3853
  3854 				; optimize OK (status.inc), line = 83
  3855
  3856 9C53 A9 C7			lda #$C7
  3857 9C55 85 88			sta PUTINTTEXT.S
  3858 9C57 A9 80			lda #$80
  3859 9C59 85 89			sta PUTINTTEXT.S+1
  3860 9C5B 20 81 97			jsr PUTINTTEXT
  3861 9C5E AD 75 3F			lda ERR
  3862 9C61 8D 6D 3F			sta PUTINT.VALUE
  3863 9C64 A9 00			lda #$00
  3864 9C66 8D 6E 3F			sta PUTINT.VALUE+1
  3865 9C69 20 4A 98			jsr PUTINT
  3866 9C6C A4 D5			ldy SCRADR+1
  3867 9C6E 84 81			sty :bp+1
  3868 9C70 A4 D4			ldy SCRADR
  3869 9C72 A9 CE			lda #$CE
  3870 9C74 91 80			sta (:bp),y
  3871
  3872 				; optimize OK (status.inc), line = 84
  3873
  3874 9C76 A9 00			lda #$00
  3875 9C78 8D 66 3F			sta PUTTEXTINVERT
  3876 9C7B			a_0004
  3877
  3878 				; --- WhileProlog
  3879 9C7B			l_0ABB
  3880
  3881 				; optimize OK (status.inc), line = 86
  3882
  3883 9C7B AD FC 02			lda KEYB
  3884 9C7E C9 FF			cmp #$FF
  3885 9C80 F0 F9			jeq l_0ABB
  3886
  3887 				; optimize FAIL ('CLEARSTATUS', status.inc), line = 87
  3888
  3889 9C82 20 56 99			jsr CLEARSTATUS
  3890
  3891 				; ------------------------------------------------------------
  3892
  3893 = 3F75			ERR	= DATAORIGIN+$00F5
  3894 = 3F76			@CASETMP_0004	= DATAORIGIN+$00F6
  3895
  3896 = 3F75			@VarData	= ERR
  3897 = 0002			@VarDataSize	= 2
  3898
  3899 9C85			@exit
  3900 					.ifdef @new
  3901 					lda <@VarData
  3902 					sta :ztmp
  3903 					lda >@VarData
  3904 					ldy #@VarDataSize-1
  3905 					jmp @FreeMem
  3906 					els
  3907 9C85 60				rts						; ret
  3908 					eif
  3909 				.endl
  3910
  3911 9C86			.local	LOADSONG					; FUNCTION
  3912
  3913 9C86 4C F7 9C			jmp l_0ACC
  3914
  3915 9C89			.local	LOADPRC						; PROCEDURE
  3916 9C89 8D 7B 3F			sta V
  3917
  3918 				; optimize OK (load.inc), line = 10
  3919
  3920 9C8C AC 7A 3F			ldy THI
  3921 9C8F B9 18 81			lda adr.TH,y
  3922 9C92 8D DC 39			sta $39DC
  3923
  3924 				; optimize FAIL (0, load.inc), line = 11
  3925
  3926 9C95 EE 7A 3F			inc THI
  3927 9C98 AD 7A 3F			lda THI
  3928 9C9B C9 04			cmp #$04
  3929 9C9D D0 05			jne l_0AED
  3930 9C9F A9 00			lda #$00
  3931 9CA1 8D 7A 3F			sta THI
  3932 9CA4			l_0AED
  3933
  3934 				; optimize OK (load.inc), line = 12
  3935
  3936 9CA4 AD 7B 3F			lda V
  3937 9CA7 F0 4D			jeq l_0B06
  3938
  3939 				; optimize OK (load.inc), line = 14
  3940
  3941 9CA9 A9 80			lda #$80
  3942 9CAB 8D 66 3F			sta PUTTEXTINVERT
  3943
  3944 				; optimize OK (load.inc), line = 15
  3945
  3946 9CAE A9 E6			lda #$E6
  3947 9CB0 85 D4			sta SCRADR
  3948 9CB2 A9 39			lda #$39
  3949 9CB4 85 D5			sta SCRADR+1
  3950
  3951 				; optimize OK (load.inc), line = 16
  3952
  3953 9CB6 AD 7B 3F			lda V
  3954 9CB9 38 E9 01			sub #$01
  3955 9CBC 8D 6D 3F			sta PUTINT.VALUE
  3956 9CBF A9 00			lda #$00
  3957 9CC1 E9 00			sbc #$00
  3958 9CC3 8D 6E 3F			sta PUTINT.VALUE+1
  3959 9CC6 20 4A 98			jsr PUTINT
  3960 9CC9 A4 D5			ldy SCRADR+1
  3961 9CCB 84 81			sty :bp+1
  3962 9CCD A4 D4			ldy SCRADR
  3963 9CCF A9 8F			lda #$8F
  3964 9CD1 91 80			sta (:bp),y
  3965 9CD3 E6 D4			inc SCRADR
  3966 9CD5 D0 02			sne
  3967 9CD7 E6 D5			inc SCRADR+1
  3968
  3969 				; optimize OK (load.inc), line = 17
  3970
  3971 9CD9 AD BB 3E			lda MIDFILES.TOTALTRACKS
  3972 9CDC 8D 6D 3F			sta PUTINT.VALUE
  3973 9CDF A9 00			lda #$00
  3974 9CE1 8D 6E 3F			sta PUTINT.VALUE+1
  3975 9CE4 20 4A 98			jsr PUTINT
  3976
  3977 				; optimize OK (load.inc), line = 18
  3978
  3979 9CE7 A4 D5			ldy SCRADR+1
  3980 9CE9 84 81			sty :bp+1
  3981 9CEB A4 D4			ldy SCRADR
  3982 9CED A9 CE			lda #$CE
  3983 9CEF 91 80			sta (:bp),y
  3984
  3985 				; optimize OK (load.inc), line = 19
  3986
  3987 9CF1 A9 00			lda #$00
  3988 9CF3 8D 66 3F			sta PUTTEXTINVERT
  3989 9CF6			l_0B06
  3990
  3991 				; ------------------------------------------------------------
  3992
  3993 = 3F7B			V	= DATAORIGIN+$00FB
  3994
  3995 = 3F7B			@VarData	= V
  3996 = 0001			@VarDataSize	= 1
  3997
  3998 9CF6			@exit
  3999 					.ifdef @new
  4000 					lda <@VarData
  4001 					sta :ztmp
  4002 					lda >@VarData
  4003 					ldy #@VarDataSize-1
  4004 					jmp @FreeMem
  4005 					els
  4006 9CF6 60				rts						; ret
  4007 					eif
  4008 				.endl
  4009 9CF7			l_0ACC
  4010
  4011 				; optimize FAIL ('CLEARSTATUS', load.inc), line = 24
  4012
  4013 9CF7 20 56 99			jsr CLEARSTATUS
  4014
  4015 				; optimize FAIL ('STATUSLOADING', load.inc), line = 25
  4016
  4017 9CFA 20 DA 9B			jsr STATUSLOADING
  4018
  4019 				; optimize OK (load.inc), line = 26
  4020
  4021 9CFD A9 89			lda <LOADPRC
  4022 9CFF 8D DC 3E			sta MIDFILES.LOADPROCESS
  4023 9D02 A9 9C			lda >LOADPRC
  4024 9D04 8D DD 3E			sta MIDFILES.LOADPROCESS+1
  4025 9D07 A9 00			lda #$00
  4026 9D09 8D 7A 3F			sta THI
  4027
  4028 				; optimize OK (load.inc), line = 27
  4029
  4030 9D0C AD 77 3F			lda FILENAME
  4031 9D0F 8D E2 3E			sta MIDFILES.LOADMID.FN
  4032 9D12 AD 78 3F			lda FILENAME+1
  4033 9D15 8D E3 3E			sta MIDFILES.LOADMID.FN+1
  4034 9D18 20 6D 8B			jsr MIDFILES.LOADMID
  4035 9D1B AD E4 3E			lda MIDFILES.LOADMID.RESULT
  4036 9D1E 8D 79 3F			sta RESULT
  4037
  4038 				; optimize FAIL ('CLEARSTATUS', load.inc), line = 28
  4039
  4040 9D21 20 56 99			jsr CLEARSTATUS
  4041
  4042 				; optimize OK (load.inc), line = 29
  4043
  4044 9D24 AD 79 3F			lda RESULT
  4045 9D27 29 FC			and #$FC
  4046 9D29 F0 08			jeq l_0B54
  4047
  4048 				; optimize OK (load.inc), line = 30
  4049
  4050 9D2B A9 00			lda #$00
  4051 9D2D 8D BB 3E			sta MIDFILES.TOTALTRACKS
  4052 9D30 4C 4E 9D			jmp l_0B62
  4053 9D33			l_0B54
  4054
  4055 				; optimize OK (load.inc), line = 32
  4056
  4057 9D33 A9 00			lda #$00
  4058 9D35 85 88			sta SYSTEM.MOVE_0153.SOURCE
  4059 9D37 A9 2E			lda #$2E
  4060 9D39 85 89			sta SYSTEM.MOVE_0153.SOURCE+1
  4061 9D3B A9 00			lda #$00
  4062 9D3D 85 8C			sta SYSTEM.MOVE_0153.DEST
  4063 9D3F A9 2C			lda #$2C
  4064 9D41 85 8D			sta SYSTEM.MOVE_0153.DEST+1
  4065 9D43 A9 00			lda #$00
  4066 9D45 85 84			sta SYSTEM.MOVE_0153.COUNT
  4067 9D47 A9 02			lda #$02
  4068 9D49 85 85			sta SYSTEM.MOVE_0153.COUNT+1
  4069 9D4B				.local +MAIN.SYSTEM.MOVE_0153
  4070 9D4B				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0153.M@INLINE [Source: MIDICar Player.a65]
     4 9D4B 20 D9 82			jsr @move
Source: MIDICar Player.a65
  4071 					.endl
  4072 9D4E			l_0B62
  4073 9D4E			@exit
  4074
  4075 				; ------------------------------------------------------------
  4076
  4077 = 3F77			FILENAME	= DATAORIGIN+$00F7
  4078 = 3F79			RESULT	= DATAORIGIN+$00F9
  4079 = 8118			adr.TH	= CODEORIGIN+$0118
  4080 9D4E			.var TH	= adr.TH .word
  4081 = 3F7A			THI	= DATAORIGIN+$00FA
  4082
  4083 = 3F77			@VarData	= FILENAME
  4084 = 0003			@VarDataSize	= 3
  4085
  4086 9D4E 60				rts						; ret
  4087 = 9D4F 18 81		TH
  4087 				.endl
  4088
  4089 9D51			.local	GETENTRY					; FUNCTION | ASSEMBLER | REGISTER
  4090
  4091 				; -------------------  ASM Block 00000106  -------------------
  4092
  4093 9D51			  icl 'asms/list_getEntry.a65'
Source: list_getEntry.a65
     1 = 0088			hlpptr = $88;
     2
     3 9D51			getEntry:
     4 9D51 8A 48		  txa:pha
     5
     6 9D53 A5 DA		  lda pls
     7 9D55 8D 66 9D		  sta entryptr
     8 9D58 A5 DB		  lda pls+1
     9 9D5A 8D 67 9D		  sta entryptr+1
    10
    11 9D5D A9 00		  lda #0
    12 9D5F 85 90		  sta result
    13
    14 9D61 A2 03		  ldx #3
    15 9D63 A0 01		  ldy #1
    16 9D65			loop:
    17 9D65 BD D0 07		  lda entryptr:2000,x
    18 9D68 C9 9B		  cmp #$9B
    19 9D6A F0 06		  beq endEntry
    20 9D6C 91 88		  sta (hlpptr),y
    21 9D6E E8			  inx
    22 9D6F C8			  iny
    23 9D70 D0 F3		  bne loop
    24
    25 9D72			endEntry:
    26 9D72 A9 9B		  lda #$9B
    27 9D74 91 88		  sta (hlpptr),y
    28
    29 9D76 C0 01		  cpy #1
    30 9D78 D0 03		  bne store
    31 9D7A 68 AA		  pla:tax
    32 9D7C 60			  rts
    33
    34 9D7D			store:
    35 9D7D 8A 48		  txa:pha
    36
    37 9D7F A9 01		  lda #1
    38 9D81 85 90		  sta result
    39
    40 9D83 68 AA		  pla:tax
    41 9D85 38			  sec
    42 9D86 E9 03		  sbc #3            // decease position by 3
    43 9D88 A0 00		  ldy #0
    44 9D8A 91 88		  sta (hlpptr),y    // store as string length
    45
    46 9D8C 68 AA		  pla:tax
  4094
  4095 9D8E			@exit
  4096
  4097 				; ------------------------------------------------------------
  4098
  4099 = 0088			FN	= :EDX
  4100 = 0090			RESULT	= :STACKORIGIN-4
  4101 9D8E 60				rts						; ret
  4102 				.endl
  4103
  4104 9D8F			.local	GETENTRYSETS					; PROCEDURE | ASSEMBLER | REGISTER
  4105
  4106 				; -------------------  ASM Block 00000107  -------------------
  4107
  4108 9D8F			  icl 'asms/list_getEntrySets.a65'
Source: list_getEntrySets.a65
     1 9D8F			getEntrySets:
     2 = 0088			PTRREG = $88
     3
     4 9D8F A0 02		    ldy #2
     5 9D91			loop:
     6 9D91 B1 DA		    lda (pls),y
     7 9D93 91 88		    sta (PTRREG),y
     8 9D95 88			    dey
     9 9D96 10 F9		    bpl loop
  4109
  4110 				; ------------------------------------------------------------
  4111
  4112 = 0088			PTR	= :EDX
  4113 9D98			@exit
  4114 					.ifdef @new
  4115 					lda <@VarData
  4116 					sta :ztmp
  4117 					lda >@VarData
  4118 					ldy #@VarDataSize-1
  4119 					jmp @FreeMem
  4120 					els
  4121 9D98 60				rts						; ret
  4122 					eif
  4123 				.endl
  4124
  4125 9D99			.local	SETENTRYSETS					; PROCEDURE | ASSEMBLER | REGISTER
  4126
  4127 				; -------------------  ASM Block 00000108  -------------------
  4128
  4129 9D99			  icl 'asms/list_setEntrySets.a65'
Source: list_setEntrySets.a65
     1 9D99			setEntrySets:
     2 = 0088			PTRREG = $88
     3
     4 9D99 A0 02		    ldy #2
     5 9D9B			loop:
     6 9D9B B1 88		    lda (PTRREG),y
     7 9D9D 91 DA		    sta (pls),y
     8 9D9F 88			    dey
     9 9DA0 10 F9		    bpl loop
  4130
  4131 				; ------------------------------------------------------------
  4132
  4133 = 0088			PTR	= :EDX
  4134 9DA2			@exit
  4135 					.ifdef @new
  4136 					lda <@VarData
  4137 					sta :ztmp
  4138 					lda >@VarData
  4139 					ldy #@VarDataSize-1
  4140 					jmp @FreeMem
  4141 					els
  4142 9DA2 60				rts						; ret
  4143 					eif
  4144 				.endl
  4145
  4146 9DA3			.local	NEXTENTRY					; FUNCTION | ASSEMBLER
  4147
  4148 				; -------------------  ASM Block 00000109  -------------------
  4149
  4150 9DA3			  icl 'asms/list_nextEntry.a65'
Source: list_nextEntry.a65
     1 9DA3			nextEntry:
     2 9DA3 A0 03		  ldy #3
     3 9DA5			loop:
     4 9DA5 B1 DA		  lda (pls),y
     5 9DA7 C9 9B		  cmp #$9B
     6 9DA9 F0 03		  beq endEntry
     7 9DAB C8			  iny
     8 9DAC D0 F7		  bne loop
     9
    10 9DAE			endEntry:
    11 9DAE C0 03		  cpy #3
    12 9DB0 D0 06		  bne moveEntryPtr
    13
    14 9DB2 A9 00		  lda #0
    15 9DB4 8D 7C 3F		  sta result
    16 9DB7 60			  rts
    17
    18 9DB8			moveEntryPtr:
    19 9DB8 C8			  iny
    20 9DB9 98			  tya
    21 9DBA 18 65 DA		  add pls
    22 9DBD 85 DA		  sta pls
    23 9DBF 90 02 E6 DB		  scc:inc pls+1
    24
    25 9DC3 A9 01		  lda #1
    26 9DC5 8D 7C 3F		  sta result
  4151
  4152 9DC8			@exit
  4153
  4154 				; ------------------------------------------------------------
  4155
  4156 = 3F7C			RESULT	= DATAORIGIN+$00FC
  4157 9DC8 60				rts						; ret
  4158 				.endl
  4159
  4160 9DC9			.local	GOTONENTRY					; PROCEDURE | ASSEMBLER
  4161 9DC9 8D 7D 3F			sta NENTRY
  4162
  4163 				; -------------------  ASM Block 00000110  -------------------
  4164
  4165 9DCC			  icl 'asms/list_gotoNEntry.a65'
Source: list_gotoNEntry.a65
     1 9DCC			gotoNEntry:
     2 9DCC 8A 48		    txa:pha
     3
     4 9DCE A9 00		    lda #<PLAYLIST_ADDR
     5 9DD0 85 DA		    sta pls
     6 9DD2 A9 20		    lda #>PLAYLIST_ADDR
     7 9DD4 85 DB		    sta pls+1
     8
     9 9DD6 AE 7D 3F		    ldx nEntry
    10 9DD9 F0 08		    beq exitGotoNEntry
    11
    12 9DDB			loop:
    13 9DDB 20 A3 9D		    jsr nextEntry
    14 9DDE F0 03		    beq exitGotoNEntry
    15 9DE0 CA			    dex
    16 9DE1 D0 F8		    bne loop
    17
    18 9DE3			exitGotoNEntry:
    19
    20 9DE3 68 AA		    pla:tax
  4166
  4167 				; ------------------------------------------------------------
  4168
  4169 = 3F7D			NENTRY	= DATAORIGIN+$00FD
  4170
  4171 = 3F7D			@VarData	= NENTRY
  4172 = 0001			@VarDataSize	= 1
  4173
  4174 9DE5			@exit
  4175 					.ifdef @new
  4176 					lda <@VarData
  4177 					sta :ztmp
  4178 					lda >@VarData
  4179 					ldy #@VarDataSize-1
  4180 					jmp @FreeMem
  4181 					els
  4182 9DE5 60				rts						; ret
  4183 					eif
  4184 				.endl
  4185
  4186 9DE6			.local	ADDTOLIST					; PROCEDURE | ASSEMBLER | REGISTER
  4187
  4188 				; -------------------  ASM Block 00000111  -------------------
  4189
  4190 9DE6			  icl 'asms/list_addToList.a65'
Source: list_addToList.a65
     1 = 0088			ptrreg = $88;
     2
     3 9DE6 8A 48		  txa:pha
     4
     5 9DE8 A0 00		  ldy #0
     6 9DEA B1 88		  lda (ptrreg),y
     7 9DEC 18 69 01		  add #1
     8 9DEF 8D 17 9E		  sta fnlen
     9
    10 9DF2 A0 00		  ldy #0
    11 9DF4 A5 E1		  lda MAIN.MIDFILES._bank
    12 9DF6 91 DA		  sta (pls),y
    13 9DF8 C8			  iny
    14 9DF9 A5 E2		  lda MAIN.MIDFILES._adr
    15 9DFB 91 DA		  sta (pls),y
    16 9DFD C8			  iny
    17 9DFE A5 E3		  lda MAIN.MIDFILES._adr+1
    18 9E00 91 DA		  sta (pls),y
    19 9E02 C8			  iny
    20
    21 9E03 A5 88		  lda ptrreg
    22 9E05 8D 10 9E		  sta eptr
    23 9E08 A5 89		  lda ptrreg+1
    24 9E0A 8D 11 9E		  sta eptr+1
    25
    26 9E0D A2 01		  ldx #1
    27 9E0F			loop:
    28 9E0F BD 00 20		  lda eptr:$2000,x
    29 9E12 91 DA		  sta (pls),y
    30 9E14 C8			  iny
    31 9E15 E8			  inx
    32 9E16 E0 00		  cpx fnlen:#00
    33 9E18 30 F5		  bmi loop
    34
    35 9E1A			storeEOFN:
    36 9E1A A9 9B		  lda #$9B
    37 9E1C 91 DA		  sta (pls),y
    38 9E1E C8			  iny
    39
    40 9E1F 98			  tya
    41 9E20 18 65 DA		  add pls
    42 9E23 85 DA		  sta pls
    43 9E25 90 02 E6 DB		  scc:inc pls+1
    44
    45 9E29 EE 54 3F		  inc totalFiles
    46
    47 9E2C 68 AA		  pla:tax
  4191
  4192 				; ------------------------------------------------------------
  4193
  4194 = 0088			ENTRY	= :EDX
  4195 9E2E			@exit
  4196 					.ifdef @new
  4197 					lda <@VarData
  4198 					sta :ztmp
  4199 					lda >@VarData
  4200 					ldy #@VarDataSize-1
  4201 					jmp @FreeMem
  4202 					els
  4203 9E2E 60				rts						; ret
  4204 					eif
  4205 				.endl
  4206
  4207 9E2F			.local	CLEARLIST					; PROCEDURE
  4208
  4209 				; optimize FAIL ('RESETMEMORYPTR', list_asm.inc), line = 39
  4210
  4211 9E2F 20 35 99			jsr RESETMEMORYPTR
  4212
  4213 				; optimize OK (list_asm.inc), line = 40
  4214
  4215 9E32 A9 00			lda #$00
  4216 9E34 85 DA			sta PLS
  4217 9E36 A9 20			lda #$20
  4218 9E38 85 DB			sta PLS+1
  4219
  4220 				; optimize OK (list_asm.inc), line = 41
  4221
  4222 9E3A A9 00			lda #$00
  4223 9E3C 8D 54 3F			sta TOTALFILES
  4224 9E3F 8D 53 3F			sta CURFILE
  4225 9E42 8D 51 3F			sta YFILE
  4226 9E45 8D 52 3F			sta SHFILE
  4227
  4228 				; optimize OK (list_asm.inc), line = 42
  4229
  4230 9E48 8D 50 3F			sta CHN
  4231
  4232 				; --- WhileProlog
  4233 9E4B 4C 65 9E			jmp l_0B8B
  4234 9E4E			l_0B8C
  4235
  4236 				; optimize OK (list_asm.inc), line = 45
  4237
  4238 9E4E AD 50 3F			lda CHN
  4239 9E51 0A				asl @
  4240 9E52 A8				tay
  4241 9E53 B9 2F 3F			lda adr.PLAYLISTSCRADR,y
  4242 9E56 85 D4			sta SCRADR
  4243 9E58 B9 30 3F			lda adr.PLAYLISTSCRADR+1,y
  4244 9E5B 85 D5			sta SCRADR+1
  4245
  4246 				; optimize OK (list_asm.inc), line = 46
  4247
  4248 9E5D A9 20			lda #$20
  4249 9E5F 20 73 97			jsr PUTSPACES
  4250
  4251 				; optimize FAIL (0, list_asm.inc), line = 47
  4252
  4253 9E62 EE 50 3F			inc CHN
  4254 9E65			l_0B8B
  4255
  4256 				; optimize OK (list_asm.inc), line = 43
  4257
  4258 9E65 AD 50 3F			lda CHN
  4259 9E68 C9 10			cmp #$10
  4260 9E6A 90 E2			jcc l_0B8C
  4261
  4262 				; optimize OK (list_asm.inc), line = 49
  4263
  4264 9E6C A5 DA			lda PLS
  4265 9E6E 85 88			sta SYSTEM.FILLCHAR_0151.A
  4266 9E70 A5 DB			lda PLS+1
  4267 9E72 85 89			sta SYSTEM.FILLCHAR_0151.A+1
  4268 9E74 A9 00			lda #$00
  4269 9E76 85 8C			sta SYSTEM.FILLCHAR_0151.COUNT
  4270 9E78 A9 0C			lda #$0C
  4271 9E7A 85 8D			sta SYSTEM.FILLCHAR_0151.COUNT+1
  4272 9E7C A9 9B			lda #$9B
  4273 9E7E 85 84			sta SYSTEM.FILLCHAR_0151.VALUE
  4274 9E80				.local +MAIN.SYSTEM.FILLCHAR_0151
  4275 9E80				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0151.M@INLINE [Source: MIDICar Player.a65]
     4 9E80 20 2E 83			jsr @fill
Source: MIDICar Player.a65
  4276 					.endl
  4277 9E83			@exit
  4278 					.ifdef @new
  4279 					lda <@VarData
  4280 					sta :ztmp
  4281 					lda >@VarData
  4282 					ldy #@VarDataSize-1
  4283 					jmp @FreeMem
  4284 					els
  4285 9E83 60				rts						; ret
  4286 					eif
  4287 				.endl
  4288
  4289 9E84			.local	FILESELECT					; FUNCTION
  4290
  4291 				; optimize OK (fileselect.inc), line = 10
  4292
  4293 9E84 A9 F8			lda #$F8
  4294 9E86 85 D4			sta SCRADR
  4295 9E88 A9 36			lda #$36
  4296 9E8A 85 D5			sta SCRADR+1
  4297 9E8C 20 15 99			jsr HLINE
  4298
  4299 				; optimize OK (fileselect.inc), line = 11
  4300
  4301 9E8F A9 14			lda #$14
  4302 9E91 85 D4			sta SCRADR
  4303 9E93 A9 37			lda #$37
  4304 9E95 85 D5			sta SCRADR+1
  4305 9E97 A9 D5			lda #$D5
  4306 9E99 85 88			sta PUTINTTEXT.S
  4307 9E9B A9 80			lda #$80
  4308 9E9D 85 89			sta PUTINTTEXT.S+1
  4309 9E9F 20 81 97			jsr PUTINTTEXT
  4310
  4311 				; optimize FAIL ('CLEARLIST', fileselect.inc), line = 13
  4312
  4313 9EA2 20 2F 9E			jsr CLEARLIST
  4314
  4315 				; optimize OK (fileselect.inc), line = 14
  4316
  4317 9EA5 A9 FF			lda #$FF
  4318 9EA7 85 E2			sta MIDFILES._ADR
  4319 9EA9 85 E3			sta MIDFILES._ADR+1
  4320 9EAB A9 FE			lda #$FE
  4321 9EAD 85 E1			sta MIDFILES._BANK
  4322 9EAF AD 7E 3F			lda PATH
  4323 9EB2 85 88			sta ADDTOLIST.ENTRY
  4324 9EB4 AD 7F 3F			lda PATH+1
  4325 9EB7 85 89			sta ADDTOLIST.ENTRY+1
  4326 9EB9 20 E6 9D			jsr ADDTOLIST
  4327
  4328 				; optimize FAIL ('STATUSREADDIRECTORY', fileselect.inc), line = 15
  4329
  4330 9EBC 20 EE 9B			jsr STATUSREADDIRECTORY
  4331
  4332 				; optimize OK (fileselect.inc), line = 17
  4333
  4334 9EBF A9 02			lda #$02
  4335 9EC1 8D B1 3E			sta CIO.OPN.CHN
  4336 9EC4 A9 06			lda #$06
  4337 9EC6 8D B2 3E			sta CIO.OPN.AX1
  4338 9EC9 A9 00			lda #$00
  4339 9ECB 8D B3 3E			sta CIO.OPN.AX2
  4340 9ECE AD 7E 3F			lda PATH
  4341 9ED1 8D B4 3E			sta CIO.OPN.DEVICE
  4342 9ED4 AD 7F 3F			lda PATH+1
  4343 9ED7 8D B5 3E			sta CIO.OPN.DEVICE+1
  4344 9EDA 20 70 8A			jsr CIO.OPN
  4345
  4346 				; --- WhileProlog
  4347 9EDD 4C 93 9F			jmp l_0BCF
  4348 9EE0			l_0BD0
  4349
  4350 				; optimize OK (fileselect.inc), line = 20
  4351
  4352 9EE0 A9 FC			lda #$FC
  4353 9EE2 85 E1			sta MIDFILES._BANK
  4354
  4355 				; optimize OK (fileselect.inc), line = 21
  4356
  4357 9EE4 A9 02			lda #$02
  4358 9EE6 85 88			sta GETLN.CHN
  4359 9EE8 AD A9 9F			lda DENTRY
  4360 9EEB 85 8C			sta GETLN.BUF
  4361 9EED AD AA 9F			lda DENTRY+1
  4362 9EF0 85 8D			sta GETLN.BUF+1
  4363 9EF2 20 E1 95			jsr GETLN
  4364
  4365 				; optimize OK (fileselect.inc), line = 22
  4366
  4367 9EF5 AD 82 3F			lda adr.DENTRY+$01
  4368 9EF8 C9 30			cmp #$30
  4369 9EFA 90 03			jcc l_0BEB
  4370 9EFC 4C 9D 9F			jmp b_0BD0					; break
  4371 9EFF			l_0BEB
  4372
  4373 				; optimize OK (fileselect.inc), line = 23
  4374
  4375 9EFF AD A9 9F			lda DENTRY
  4376 9F02 85 88			sta REDUCEFILENAME.INFN
  4377 9F04 AD AA 9F			lda DENTRY+1
  4378 9F07 85 89			sta REDUCEFILENAME.INFN+1
  4379 9F09 AD 68 A8			lda OUTSTR
  4380 9F0C 85 8C			sta REDUCEFILENAME.OUTFN
  4381 9F0E AD 69 A8			lda OUTSTR+1
  4382 9F11 85 8D			sta REDUCEFILENAME.OUTFN+1
  4383 9F13 20 49 95			jsr REDUCEFILENAME
  4384
  4385 				; optimize OK (fileselect.inc), line = 24
  4386
  4387 9F16 AD 68 A8			lda OUTSTR
  4388 9F19 85 88			sta GETFILEEXT.FN
  4389 9F1B AD 69 A8			lda OUTSTR+1
  4390 9F1E 85 89			sta GETFILEEXT.FN+1
  4391 9F20 20 0E 95			jsr GETFILEEXT
  4392 9F23 A5 90			lda GETFILEEXT.RESULT
  4393 9F25 8D 96 3F			sta EXT
  4394 9F28 A5 91			lda GETFILEEXT.RESULT+1
  4395 9F2A 8D 97 3F			sta EXT+1
  4396 9F2D A5 92			lda GETFILEEXT.RESULT+2
  4397 9F2F 8D 98 3F			sta EXT+2
  4398 9F32 A5 93			lda GETFILEEXT.RESULT+3
  4399 9F34 8D 99 3F			sta EXT+3
  4400
  4401 				; optimize OK (fileselect.inc), line = 25
  4402
  4403 9F37 AD 83 3F			lda adr.DENTRY+$02
  4404 9F3A C9 3A			cmp #$3A
  4405 9F3C D0 03			jne l_0C0C
  4406 9F3E 4C 93 9F			jmp c_0BD0					; continue
  4407 9F41			l_0C0C
  4408
  4409 				; optimize OK (fileselect.inc), line = 26
  4410
  4411 9F41 AD 93 3F			lda adr.DENTRY+$12
  4412 9F44 C9 3E			cmp #$3E
  4413 9F46 D0 03			jne l_0C22
  4414 9F48 4C 93 9F			jmp c_0BD0					; continue
  4415 9F4B			l_0C22
  4416
  4417 				; optimize OK (fileselect.inc), line = 27
  4418
  4419 9F4B AD 99 3F			lda EXT+3
  4420 9F4E C9 A4			cmp #$A4
  4421 9F50 D0 11			bne @+
  4422 9F52 AD 98 3F			lda EXT+2
  4423 9F55 C9 A9			cmp #$A9
  4424 9F57 D0 0A			bne @+
  4425 9F59 AD 97 3F			lda EXT+1
  4426 9F5C C9 B2			cmp #$B2
  4427 9F5E D0 03			bne @+
  4428 9F60 AD 96 3F			lda EXT
  4429 				@
  4430 9F63 D0 03			jne l_0C35
  4431 9F65 4C 93 9F			jmp c_0BD0					; continue
  4432 9F68			l_0C35
  4433
  4434 				; optimize OK (fileselect.inc), line = 28
  4435
  4436 9F68 AD 99 3F			lda EXT+3
  4437 9F6B C9 4D			cmp #$4D
  4438 9F6D D0 11			bne @+
  4439 9F6F AD 98 3F			lda EXT+2
  4440 9F72 C9 49			cmp #$49
  4441 9F74 D0 0A			bne @+
  4442 9F76 AD 97 3F			lda EXT+1
  4443 9F79 C9 44			cmp #$44
  4444 9F7B D0 03			bne @+
  4445 9F7D AD 96 3F			lda EXT
  4446 				@
  4447 9F80 D0 04			jne l_0C48
  4448 9F82 A9 FF			lda #$FF
  4449 9F84 85 E1			sta MIDFILES._BANK
  4450 9F86			l_0C48
  4451
  4452 				; optimize OK (fileselect.inc), line = 31
  4453
  4454 9F86 AD 68 A8			lda OUTSTR
  4455 9F89 85 88			sta ADDTOLIST.ENTRY
  4456 9F8B AD 69 A8			lda OUTSTR+1
  4457 9F8E 85 89			sta ADDTOLIST.ENTRY+1
  4458 9F90 20 E6 9D			jsr ADDTOLIST
  4459 9F93			c_0BD0
  4460 9F93			l_0BCF
  4461
  4462 				; optimize OK (fileselect.inc), line = 18
  4463
  4464 9F93 AD 87 3E			lda SYSTEM.IORESULT
  4465 9F96 C9 01			cmp #$01
  4466 9F98 D0 03 4C E0 9E		jeq l_0BD0
  4467 9F9D			b_0BD0
  4468
  4469 				; optimize OK (fileselect.inc), line = 33
  4470
  4471 9F9D AD 87 3E			lda SYSTEM.IORESULT
  4472 9FA0 8D 80 3F			sta RESULT
  4473
  4474 				; optimize OK (fileselect.inc), line = 34
  4475
  4476 9FA3 A9 02			lda #$02
  4477 9FA5 20 AE 8A			jsr CIO.CLS
  4478 9FA8			@exit
  4479
  4480 				; ------------------------------------------------------------
  4481
  4482 = 3F7E			PATH	= DATAORIGIN+$00FE
  4483 = 3F80			RESULT	= DATAORIGIN+$0100
  4484 = 0002			CIO_CHN	= $02
  4485 = 3F81			adr.DENTRY	= [DATAORIGIN+$0101] .array [21]
  4486 9FA8			.var DENTRY	= adr.DENTRY .word
  4487 = 3F96			EXT	= DATAORIGIN+$0116
  4488
  4489 = 3F7E			@VarData	= PATH
  4490 = 001B			@VarDataSize	= 27
  4491
  4492 9FA8 60				rts						; ret
  4493 = 9FA9 81 3F		DENTRY
  4493 				.endl
  4494
  4495 9FAB			.local	INPUTLINE					; FUNCTION
  4496
  4497 9FAB 4C E2 9F			jmp l_0C6A
  4498
  4499 9FAE			.local	SHOWLINE					; PROCEDURE
  4500
  4501 				; optimize OK (inputline.inc), line = 10
  4502
  4503 9FAE AC 9A 3F 84 82 AC + 	mwy LN :bp2
  4504 9FB8 A0 00			ldy #$00
  4505 9FBA AD 9D 3F			lda POS
  4506 9FBD 91 82			sta (:bp2),y
  4507
  4508 				; optimize OK (inputline.inc), line = 11
  4509
  4510 9FBF AD 9F 3F			lda OSCRADR
  4511 9FC2 85 D4			sta SCRADR
  4512 9FC4 AD A0 3F			lda OSCRADR+1
  4513 9FC7 85 D5			sta SCRADR+1
  4514
  4515 				; optimize OK (inputline.inc), line = 12
  4516
  4517 9FC9 A9 20			lda #$20
  4518 9FCB 20 73 97			jsr PUTSPACES
  4519 9FCE E6 D4			inc SCRADR
  4520 9FD0 D0 02			sne
  4521 9FD2 E6 D5			inc SCRADR+1
  4522
  4523 				; optimize OK (inputline.inc), line = 13
  4524
  4525 9FD4 AD 9A 3F			lda LN
  4526 9FD7 85 88			sta PUTASCTEXT.S
  4527 9FD9 AD 9B 3F			lda LN+1
  4528 9FDC 85 89			sta PUTASCTEXT.S+1
  4529 9FDE 20 AA 97			jsr PUTASCTEXT
  4530 9FE1			@exit
  4531 					.ifdef @new
  4532 					lda <@VarData
  4533 					sta :ztmp
  4534 					lda >@VarData
  4535 					ldy #@VarDataSize-1
  4536 					jmp @FreeMem
  4537 					els
  4538 9FE1 60				rts						; ret
  4539 					eif
  4540 				.endl
  4541 9FE2			l_0C6A
  4542
  4543 				; optimize OK (inputline.inc), line = 17
  4544
  4545 9FE2 AC 9B 3F			ldy LN+1
  4546 9FE5 84 81			sty :bp+1
  4547 9FE7 AC 9A 3F			ldy LN
  4548 9FEA B1 80			lda (:bp),y
  4549 9FEC 8D 9D 3F			sta POS
  4550
  4551 				; optimize OK (inputline.inc), line = 18
  4552
  4553 9FEF A9 7F			lda #$7F
  4554 9FF1 38 ED 9D 3F			sub POS
  4555 9FF5 85 8C			sta SYSTEM.FILLCHAR_0152.COUNT
  4556 9FF7 A9 00			lda #$00
  4557 9FF9 E9 00			sbc #$00
  4558 9FFB 85 8D			sta SYSTEM.FILLCHAR_0152.COUNT+1
  4559 9FFD AD 9D 3F			lda POS
  4560 A000 18 69 01			add #$01
  4561 A003 85 9F			sta :STACKORIGIN+11
  4562 A005 A9 00			lda #$00
  4563 A007 69 00			adc #$00
  4564 A009 85 AF			sta :STACKORIGIN+STACKWIDTH+11
  4565 A00B AD 9A 3F			lda LN
  4566 A00E 18 65 9F			add :STACKORIGIN+11
  4567 A011 85 88			sta SYSTEM.FILLCHAR_0152.X
  4568 A013 AD 9B 3F			lda LN+1
  4569 A016 65 AF			adc :STACKORIGIN+STACKWIDTH+11
  4570 A018 85 89			sta SYSTEM.FILLCHAR_0152.X+1
  4571 A01A A9 9B			lda #$9B
  4572 A01C 85 84			sta SYSTEM.FILLCHAR_0152.VALUE
  4573 A01E				.local +MAIN.SYSTEM.FILLCHAR_0152
  4574 A01E				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0152.M@INLINE [Source: MIDICar Player.a65]
     4 A01E 20 2E 83			jsr @fill
Source: MIDICar Player.a65
  4575 					.endl
  4576
  4577 				; optimize OK (inputline.inc), line = 19
  4578
  4579 A021 A9 FF			lda #$FF
  4580 A023 8D FC 02			sta KEYB
  4581 A026 A9 01			lda #$01
  4582 A028 8D A2 3F			sta VCRS
  4583
  4584 				; optimize OK (inputline.inc), line = 20
  4585
  4586 A02B A5 D4			lda SCRADR
  4587 A02D 8D 9F 3F			sta OSCRADR
  4588 A030 A5 D5			lda SCRADR+1
  4589 A032 8D A0 3F			sta OSCRADR+1
  4590 A035 20 AE 9F			jsr SHOWLINE
  4591 A038 A5 14			lda _TM
  4592 A03A 8D A1 3F			sta OTM
  4593
  4594 				; --- RepeatUntilProlog
  4595 A03D			l_0CAB
  4596
  4597 				; optimize OK (inputline.inc), line = 22
  4598
  4599 A03D A5 14			lda _TM
  4600 A03F 38 ED A1 3F			sub OTM
  4601 A043 C9 0A			cmp #$0A
  4602 A045 90 1D			jcc l_0CC3
  4603 A047 F0 1B			jeq l_0CC3
  4604
  4605 				; optimize OK (inputline.inc), line = 24
  4606
  4607 A049 A5 14			lda _TM
  4608 A04B 8D A1 3F			sta OTM
  4609
  4610 				; optimize OK (inputline.inc), line = 25
  4611
  4612 A04E AD A2 3F			lda VCRS
  4613 A051 F0 05			jeq l_0CD6
  4614 A053 A9 01			lda #$01
  4615 A055 20 62 97			jsr INVERS
  4616 A058			l_0CD6
  4617
  4618 				; optimize OK (inputline.inc), line = 26
  4619
  4620 A058 A0 01			ldy #1
  4621 A05A AD A2 3F			lda VCRS
  4622 A05D F0 01			beq @+
  4623 A05F 88				dey
  4624 				@
  4625 A060 98				tya
  4626 A061 8D A2 3F			sta VCRS
  4627 A064			l_0CC3
  4628
  4629 				; optimize OK (inputline.inc), line = 28
  4630
  4631 A064 AD FC 02			lda KEYB
  4632 A067 C9 FF			cmp #$FF
  4633 A069 D0 03			jne l_0CF8
  4634 A06B 4C DF A0			jmp c_0CAB					; continue
  4635 A06E			l_0CF8
  4636
  4637 				; optimize OK (inputline.inc), line = 30
  4638
  4639 A06E AD FC 02			lda KEYB
  4640 A071 C9 1C			cmp #$1C
  4641 A073 D0 08			jne l_0D0D
  4642 A075 A9 00			lda #$00
  4643 A077 8D 9C 3F			sta RESULT
  4644 A07A 4C E2 A0			jmp @exit					; exit
  4645 A07D			l_0D0D
  4646
  4647 				; optimize OK (inputline.inc), line = 31
  4648
  4649 A07D AD 9D 3F			lda POS
  4650 A080 F0 2A			jeq l_0D26
  4651
  4652 				; optimize OK (inputline.inc), line = 33
  4653
  4654 A082 AD FC 02			lda KEYB
  4655 A085 C9 0C			cmp #$0C
  4656 A087 D0 08			jne l_0D39
  4657 A089 A9 01			lda #$01
  4658 A08B 8D 9C 3F			sta RESULT
  4659 A08E 4C E2 A0			jmp @exit					; exit
  4660 A091			l_0D39
  4661
  4662 				; optimize OK (inputline.inc), line = 34
  4663
  4664 A091 AD FC 02			lda KEYB
  4665 A094 C9 34			cmp #$34
  4666 A096 D0 14			jne l_0D52
  4667
  4668 				; optimize OK (inputline.inc), line = 36
  4669
  4670 A098 AC 9A 3F 84 82 AC + 	mwy LN :bp2
  4671 A0A2 AC 9D 3F			ldy POS
  4672 A0A5 A9 9B			lda #$9B
  4673 A0A7 91 82			sta (:bp2),y
  4674
  4675 				; optimize FAIL (0, inputline.inc), line = 37
  4676
  4677 A0A9 CE 9D 3F			dec POS
  4678 A0AC			l_0D52
  4679 A0AC			l_0D26
  4680
  4681 				; optimize OK (inputline.inc), line = 40
  4682
  4683 A0AC AD 9D 3F			lda POS
  4684 A0AF C9 1E			cmp #$1E
  4685 A0B1 B0 20			jcs l_0D74
  4686
  4687 				; optimize OK (inputline.inc), line = 42
  4688
  4689 A0B3 AD FC 02			lda KEYB
  4690 A0B6 20 AB 96			jsr KEYSCAN2ASC
  4691 A0B9 AD 65 3F			lda KEYSCAN2ASC.RESULT
  4692 A0BC 8D 9E 3F			sta CH
  4693
  4694 				; optimize OK (inputline.inc), line = 43
  4695
  4696 A0BF F0 12			jeq l_0D8E
  4697
  4698 				; optimize FAIL (0, inputline.inc), line = 45
  4699
  4700 A0C1 EE 9D 3F			inc POS
  4701
  4702 				; optimize OK (inputline.inc), line = 46
  4703
  4704 A0C4 AC 9A 3F 84 82 AC + 	mwy LN :bp2
  4705 A0CE AC 9D 3F			ldy POS
  4706 A0D1 91 82			sta (:bp2),y
  4707 A0D3			l_0D8E
  4708 A0D3			l_0D74
  4709
  4710 				; optimize FAIL ('SHOWLINE', inputline.inc), line = 49
  4711
  4712 A0D3 20 AE 9F			jsr SHOWLINE
  4713
  4714 				; optimize OK (inputline.inc), line = 50
  4715
  4716 A0D6 A9 FF			lda #$FF
  4717 A0D8 8D FC 02			sta KEYB
  4718
  4719 				; optimize OK (inputline.inc), line = 51
  4720
  4721 A0DB A9 00			lda #$00
  4722 A0DD D0 03			bne *+5
  4723 A0DF			c_0CAB
  4724 A0DF 4C 3D A0			jmp l_0CAB
  4725 A0E2			@exit
  4726
  4727 				; ------------------------------------------------------------
  4728
  4729 = 3F9A			LN	= DATAORIGIN+$011A
  4730 = 3F9C			RESULT	= DATAORIGIN+$011C
  4731 = 3F9D			POS	= DATAORIGIN+$011D
  4732 = 3F9E			CH	= DATAORIGIN+$011E
  4733 = 3F9F			OSCRADR	= DATAORIGIN+$011F
  4734 = 3FA1			OTM	= DATAORIGIN+$0121
  4735 = 3FA2			VCRS	= DATAORIGIN+$0122
  4736
  4737 = 3F9A			@VarData	= LN
  4738 = 0008			@VarDataSize	= 8
  4739
  4740 A0E2 60				rts						; ret
  4741 				.endl
  4742
  4743 A0E3			.local	DRAWLISTSELECTION				; PROCEDURE
  4744
  4745 				; optimize OK (list.inc), line = 7
  4746
  4747 A0E3 AD 51 3F			lda YFILE
  4748 A0E6 0A				asl @
  4749 A0E7 A8				tay
  4750 A0E8 B9 2F 3F			lda adr.PLAYLISTSCRADR,y
  4751 A0EB 85 D4			sta SCRADR
  4752 A0ED B9 30 3F			lda adr.PLAYLISTSCRADR+1,y
  4753 A0F0 85 D5			sta SCRADR+1
  4754 A0F2 A9 20			lda #$20
  4755 A0F4 20 62 97			jsr INVERS
  4756 A0F7			@exit
  4757 					.ifdef @new
  4758 					lda <@VarData
  4759 					sta :ztmp
  4760 					lda >@VarData
  4761 					ldy #@VarDataSize-1
  4762 					jmp @FreeMem
  4763 					els
  4764 A0F7 60				rts						; ret
  4765 					eif
  4766 				.endl
  4767
  4768 A0F8			.local	SHOWLIST					; PROCEDURE
  4769
  4770 				; optimize OK (list.inc), line = 16
  4771
  4772 A0F8 AD 52 3F			lda SHFILE
  4773 A0FB 20 C9 9D			jsr GOTONENTRY
  4774 A0FE A9 00			lda #$00
  4775 A100 8D 50 3F			sta CHN
  4776
  4777 				; --- WhileProlog
  4778 A103 4C AE A1			jmp l_0DC6
  4779 A106			l_0DC7
  4780
  4781 				; optimize OK (list.inc), line = 19
  4782
  4783 A106 AD 50 3F			lda CHN
  4784 A109 0A				asl @
  4785 A10A A8				tay
  4786 A10B B9 2F 3F			lda adr.PLAYLISTSCRADR,y
  4787 A10E 85 D4			sta SCRADR
  4788 A110 B9 30 3F			lda adr.PLAYLISTSCRADR+1,y
  4789 A113 85 D5			sta SCRADR+1
  4790 A115 A9 20			lda #$20
  4791 A117 20 73 97			jsr PUTSPACES
  4792
  4793 				; optimize OK (list.inc), line = 20
  4794
  4795 A11A AD 66 A8			lda FN
  4796 A11D 85 88			sta GETENTRY.FN
  4797 A11F AD 67 A8			lda FN+1
  4798 A122 85 89			sta GETENTRY.FN+1
  4799 A124 20 51 9D			jsr GETENTRY
  4800 A127 A5 90			lda GETENTRY.RESULT
  4801 A129 F0 75			jeq l_0DDD
  4802
  4803 				; optimize OK (list.inc), line = 22
  4804
  4805 A12B A9 A6			lda <P_BANK
  4806 A12D 85 88			sta GETENTRYSETS.PTR
  4807 A12F A9 3F			lda >P_BANK
  4808 A131 85 89			sta GETENTRYSETS.PTR+1
  4809 A133 20 8F 9D			jsr GETENTRYSETS
  4810
  4811 				; optimize OK (list.inc), line = 23
  4812
  4813 A136 A9 00			lda #$00
  4814 A138 8D 57 3F			sta V
  4815
  4816 				; optimize OK (list.inc), line = 25
  4817
  4818 A13B AD A6 3F			lda P_BANK
  4819 A13E C9 FE			cmp #$FE
  4820 A140 D0 05			jne l_0DF6
  4821 A142 A9 1E			lda #$1E
  4822 A144 8D 57 3F			sta V
  4823 A147			l_0DF6
  4824
  4825 				; optimize OK (list.inc), line = 26
  4826
  4827 A147 AD A6 3F			lda P_BANK
  4828 A14A C9 FF			cmp #$FF
  4829 A14C D0 05			jne l_0E0F
  4830 A14E A9 5A			lda #$5A
  4831 A150 8D 57 3F			sta V
  4832 A153			l_0E0F
  4833
  4834 				; optimize OK (list.inc), line = 27
  4835
  4836 A153 AD A6 3F			lda P_BANK
  4837 A156 C9 40			cmp #$40
  4838 A158 B0 15			jcs l_0E28
  4839
  4840 				; optimize OK (list.inc), line = 28
  4841
  4842 A15A AD A8 3F			lda P_ADR+1
  4843 A15D 0D A7 3F			ora P_ADR
  4844 A160 D0 08			jne l_0E3A
  4845
  4846 				; optimize OK (list.inc), line = 29
  4847
  4848 A162 A9 4D			lda #$4D
  4849 A164 8D 57 3F			sta V
  4850 A167 4C 6F A1			jmp l_0E48
  4851 A16A			l_0E3A
  4852
  4853 				; optimize OK (list.inc), line = 31
  4854
  4855 A16A A9 5A			lda #$5A
  4856 A16C 8D 57 3F			sta V
  4857 A16F			l_0E48
  4858 A16F			l_0E28
  4859
  4860 				; optimize OK (list.inc), line = 33
  4861
  4862 A16F A4 D5			ldy SCRADR+1
  4863 A171 84 81			sty :bp+1
  4864 A173 A4 D4			ldy SCRADR
  4865 A175 AD 57 3F			lda V
  4866 A178 91 80			sta (:bp),y
  4867 A17A 98				tya
  4868 A17B 18 69 02			add #$02
  4869 A17E 85 D4			sta SCRADR
  4870 A180 90 02			scc
  4871 A182 E6 D5			inc SCRADR+1
  4872
  4873 				; optimize OK (list.inc), line = 35
  4874
  4875 A184 AD 00 05			lda adr.FN+$00
  4876 A187 C9 1F			cmp #$1F
  4877 A189 90 05			jcc l_0E68
  4878 A18B A9 1E			lda #$1E
  4879 A18D 8D 00 05			sta adr.FN+$00
  4880 A190			l_0E68
  4881
  4882 				; optimize OK (list.inc), line = 36
  4883
  4884 A190 AD 66 A8			lda FN
  4885 A193 85 88			sta PUTASCTEXT.S
  4886 A195 AD 67 A8			lda FN+1
  4887 A198 85 89			sta PUTASCTEXT.S+1
  4888 A19A 20 AA 97			jsr PUTASCTEXT
  4889 A19D 4C A3 A1			jmp l_0E7C
  4890 A1A0			l_0DDD
  4891 A1A0 4C B8 A1			jmp b_0DC7					; break
  4892 A1A3			l_0E7C
  4893
  4894 				; optimize FAIL (0, list.inc), line = 40
  4895
  4896 A1A3 EE 50 3F			inc CHN
  4897
  4898 				; optimize FAIL ('NEXTENTRY', list.inc), line = 41
  4899
  4900 A1A6 20 A3 9D			jsr NEXTENTRY
  4901 A1A9 AD 7C 3F 95 95		mva NEXTENTRY.RESULT :STACKORIGIN+1,x
  4902 A1AE			l_0DC6
  4903
  4904 				; optimize OK (list.inc), line = 17
  4905
  4906 A1AE AD 50 3F			lda CHN
  4907 A1B1 C9 10			cmp #$10
  4908 A1B3 B0 03 4C 06 A1		jcc l_0DC7
  4909 A1B8			b_0DC7
  4910
  4911 				; ------------------------------------------------------------
  4912
  4913 = 3FA6			P_BANK	= DATAORIGIN+$0126
  4914 = 3FA7			P_ADR	= DATAORIGIN+$0127
  4915
  4916 = 3FA6			@VarData	= P_BANK
  4917 = 0003			@VarDataSize	= 3
  4918
  4919 A1B8			@exit
  4920 					.ifdef @new
  4921 					lda <@VarData
  4922 					sta :ztmp
  4923 					lda >@VarData
  4924 					ldy #@VarDataSize-1
  4925 					jmp @FreeMem
  4926 					els
  4927 A1B8 60				rts						; ret
  4928 					eif
  4929 				.endl
  4930
  4931 A1B9			.local	CHANGEDEVICE					; FUNCTION
  4932
  4933 				; optimize OK (list.inc), line = 47
  4934
  4935 A1B9 AD 51 3F			lda YFILE
  4936 A1BC 0A				asl @
  4937 A1BD A8				tay
  4938 A1BE B9 2F 3F			lda adr.PLAYLISTSCRADR,y
  4939 A1C1 85 D4			sta SCRADR
  4940 A1C3 B9 30 3F			lda adr.PLAYLISTSCRADR+1,y
  4941 A1C6 85 D5			sta SCRADR+1
  4942
  4943 				; -------------------  ASM Block 00000112  -------------------
  4944
  4945 A1C8 AD 58 3F		    lda firstTime
  4946 A1CB D0 1C		    bne goFileSelector
  4947 				  
  4948 				; optimize OK (list.inc), line = 53
  4949
  4950 A1CD AD 68 A8			lda OUTSTR
  4951 A1D0 8D 9A 3F			sta INPUTLINE.LN
  4952 A1D3 AD 69 A8			lda OUTSTR+1
  4953 A1D6 8D 9B 3F			sta INPUTLINE.LN+1
  4954 A1D9 20 AB 9F			jsr INPUTLINE
  4955 A1DC AD 9C 3F 95 95		mva INPUTLINE.RESULT :STACKORIGIN+1,x
  4956
  4957 				; -------------------  ASM Block 00000113  -------------------
  4958
  4959 A1E1 AD 9C 3F		    lda MAIN.INPUTLINE.Result
  4960 A1E4 D0 03		    bne goFileSelector
  4961 A1E6 4C 4F A2		    jmp skip
  4962 A1E9			  goFileSelector:
  4963 				  
  4964 				; optimize OK (list.inc), line = 62
  4965
  4966 A1E9 AD 68 A8			lda OUTSTR
  4967 A1EC 85 88			sta @move.src
  4968 A1EE AD 69 A8			lda OUTSTR+1
  4969 A1F1 85 89			sta @move.src+1
  4970 					@moveSTRING FN #128
  4970 				 MWA FN @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  4970 A1F3 AD 66 A8 85 8C AD +  MWA FN @MOVE.DST
  4970 A1FD A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  4970 A205 20 76 83		 JSR @MOVESTRING
  4971
  4972 				; optimize OK (list.inc), line = 63
  4973
  4974 A208 AD 68 A8			lda OUTSTR
  4975 A20B 85 88			sta GETDEVICESPEC.FN
  4976 A20D AD 69 A8			lda OUTSTR+1
  4977 A210 85 89			sta GETDEVICESPEC.FN+1
  4978 A212 AD 64 A8			lda CURDEV
  4979 A215 85 8C			sta GETDEVICESPEC.SPEC
  4980 A217 AD 65 A8			lda CURDEV+1
  4981 A21A 85 8D			sta GETDEVICESPEC.SPEC+1
  4982 A21C 20 8D 95			jsr GETDEVICESPEC
  4983 A21F A5 90			lda GETDEVICESPEC.RESULT
  4984 A221 D0 17			jne l_0EAF
  4985 A223 AD 64 A8			lda CURDEV
  4986 A226 85 88			sta JOINSTRINGS.S1
  4987 A228 AD 65 A8			lda CURDEV+1
  4988 A22B 85 89			sta JOINSTRINGS.S1+1
  4989 A22D AD 66 A8			lda FN
  4990 A230 85 8C			sta JOINSTRINGS.S2
  4991 A232 AD 67 A8			lda FN+1
  4992 A235 85 8D			sta JOINSTRINGS.S2+1
  4993 A237 20 B1 95			jsr JOINSTRINGS
  4994 A23A			l_0EAF
  4995
  4996 				; optimize OK (list.inc), line = 64
  4997
  4998 A23A AD 68 A8			lda OUTSTR
  4999 A23D 8D 7E 3F			sta FILESELECT.PATH
  5000 A240 AD 69 A8			lda OUTSTR+1
  5001 A243 8D 7F 3F			sta FILESELECT.PATH+1
  5002 A246 20 84 9E			jsr FILESELECT
  5003 A249 AD 80 3F			lda FILESELECT.RESULT
  5004 A24C 8D A9 3F			sta RESULT
  5005
  5006 				; -------------------  ASM Block 00000114  -------------------
  5007
  5008 A24F			    skip:
  5009 				  
  5010 				; optimize OK (list.inc), line = 69
  5011
  5012 A24F A9 00			lda #$00
  5013 A251 8D 58 3F			sta FIRSTTIME
  5014 A254			@exit
  5015
  5016 				; ------------------------------------------------------------
  5017
  5018 = 3FA9			RESULT	= DATAORIGIN+$0129
  5019 A254 60				rts						; ret
  5020 				.endl
  5021
  5022 A255			.local	CHOICELISTFILE					; PROCEDURE
  5023
  5024 				; optimize OK (list.inc), line = 77
  5025
  5026 A255 A9 FF			lda #$FF
  5027 A257 8D 55 3F			sta CURPLAY
  5028
  5029 				; optimize FAIL ('STATUSSTOPPED', list.inc), line = 78
  5030
  5031 A25A 20 78 9B			jsr STATUSSTOPPED
  5032
  5033 				; optimize OK (list.inc), line = 79
  5034
  5035 A25D AD 53 3F			lda CURFILE
  5036 A260 20 C9 9D			jsr GOTONENTRY
  5037
  5038 				; optimize OK (list.inc), line = 80
  5039
  5040 A263 AD 66 A8			lda FN
  5041 A266 85 88			sta GETENTRY.FN
  5042 A268 AD 67 A8			lda FN+1
  5043 A26B 85 89			sta GETENTRY.FN+1
  5044 A26D 20 51 9D			jsr GETENTRY
  5045 A270 A5 90			lda GETENTRY.RESULT
  5046 A272 D0 03			jne l_0EDD
  5047 A274 4C 3C A3			jmp @exit					; exit
  5048 A277			l_0EDD
  5049
  5050 				; optimize OK (list.inc), line = 81
  5051
  5052 A277 A9 A3			lda <P_BANK
  5053 A279 85 88			sta GETENTRYSETS.PTR
  5054 A27B A9 3F			lda >P_BANK
  5055 A27D 85 89			sta GETENTRYSETS.PTR+1
  5056 A27F 20 8F 9D			jsr GETENTRYSETS
  5057
  5058 				; optimize OK (list.inc), line = 83
  5059
  5060 A282 AD 66 A8			lda FN
  5061 A285 85 88			sta GETDEVICESPEC.FN
  5062 A287 AD 67 A8			lda FN+1
  5063 A28A 85 89			sta GETDEVICESPEC.FN+1
  5064 A28C AD 3D A3			lda DEV
  5065 A28F 85 8C			sta GETDEVICESPEC.SPEC
  5066 A291 AD 3E A3			lda DEV+1
  5067 A294 85 8D			sta GETDEVICESPEC.SPEC+1
  5068 A296 20 8D 95			jsr GETDEVICESPEC
  5069 A299 A5 90			lda GETDEVICESPEC.RESULT
  5070 A29B D0 1A			jne l_0EF3
  5071
  5072 				; optimize OK (list.inc), line = 84
  5073
  5074 A29D AD 64 A8			lda CURDEV
  5075 A2A0 85 88			sta JOINSTRINGS.S1
  5076 A2A2 AD 65 A8			lda CURDEV+1
  5077 A2A5 85 89			sta JOINSTRINGS.S1+1
  5078 A2A7 AD 66 A8			lda FN
  5079 A2AA 85 8C			sta JOINSTRINGS.S2
  5080 A2AC AD 67 A8			lda FN+1
  5081 A2AF 85 8D			sta JOINSTRINGS.S2+1
  5082 A2B1 20 B1 95			jsr JOINSTRINGS
  5083 A2B4 4C D6 A2			jmp l_0F02
  5084 A2B7			l_0EF3
  5085
  5086 				; optimize OK (list.inc), line = 86
  5087
  5088 A2B7 AD 66 A8			lda FN
  5089 A2BA 85 88			sta @move.src
  5090 A2BC AD 67 A8			lda FN+1
  5091 A2BF 85 89			sta @move.src+1
  5092 					@moveSTRING OUTSTR #128
  5092 				 MWA OUTSTR @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  5092 A2C1 AD 68 A8 85 8C AD +  MWA OUTSTR @MOVE.DST
  5092 A2CB A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  5092 A2D3 20 76 83		 JSR @MOVESTRING
  5093 A2D6			l_0F02
  5094
  5095 				; optimize OK (list.inc), line = 89
  5096
  5097 A2D6 AD A3 3F			lda P_BANK
  5098 A2D9 C9 FE			cmp #$FE
  5099 A2DB D0 09			jne l_0F16
  5100 A2DD 20 B9 A1			jsr CHANGEDEVICE
  5101 A2E0 AD A9 3F			lda CHANGEDEVICE.RESULT
  5102 A2E3 8D 87 3E			sta SYSTEM.IORESULT
  5103 A2E6			l_0F16
  5104
  5105 				; optimize OK (list.inc), line = 90
  5106
  5107 A2E6 AD A3 3F			lda P_BANK
  5108 A2E9 C9 FF			cmp #$FF
  5109 A2EB D0 2A			jne l_0F2F
  5110
  5111 				; optimize OK (list.inc), line = 92
  5112
  5113 A2ED AD 5F 3F			lda LAST_BANK
  5114 A2F0 85 E1			sta MIDFILES._BANK
  5115
  5116 				; optimize OK (list.inc), line = 93
  5117
  5118 A2F2 AD 60 3F			lda LAST_ADR
  5119 A2F5 85 E2			sta MIDFILES._ADR
  5120 A2F7 AD 61 3F			lda LAST_ADR+1
  5121 A2FA 85 E3			sta MIDFILES._ADR+1
  5122
  5123 				; optimize OK (list.inc), line = 94
  5124
  5125 A2FC AD 53 3F			lda CURFILE
  5126 A2FF 8D 55 3F			sta CURPLAY
  5127
  5128 				; optimize OK (list.inc), line = 95
  5129
  5130 A302 AD 68 A8			lda OUTSTR
  5131 A305 8D 77 3F			sta LOADSONG.FILENAME
  5132 A308 AD 69 A8			lda OUTSTR+1
  5133 A30B 8D 78 3F			sta LOADSONG.FILENAME+1
  5134 A30E 20 86 9C			jsr LOADSONG
  5135 A311 AD 79 3F			lda LOADSONG.RESULT
  5136 A314 8D 87 3E			sta SYSTEM.IORESULT
  5137 A317			l_0F2F
  5138
  5139 				; optimize OK (list.inc), line = 98
  5140
  5141 A317 A9 FF			lda #$FF
  5142 A319 8D FC 02			sta KEYB
  5143
  5144 				; optimize FAIL ('CLEARSTATUS', list.inc), line = 99
  5145
  5146 A31C 20 56 99			jsr CLEARSTATUS
  5147
  5148 				; optimize FAIL ('SHOWLIST', list.inc), line = 100
  5149
  5150 A31F 20 F8 A0			jsr SHOWLIST
  5151
  5152 				; optimize FAIL ('DRAWLISTSELECTION', list.inc), line = 101
  5153
  5154 A322 20 E3 A0			jsr DRAWLISTSELECTION
  5155
  5156 				; optimize OK (list.inc), line = 102
  5157
  5158 A325 AD 87 3E			lda SYSTEM.IORESULT
  5159 A328 29 FC			and #$FC
  5160 A32A F0 06			jeq l_0F66
  5161 A32C AD 87 3E			lda SYSTEM.IORESULT
  5162 A32F 20 02 9C			jsr STATUSERROR
  5163 A332			l_0F66
  5164
  5165 				; optimize OK (list.inc), line = 103
  5166
  5167 A332 AD A3 3F			lda P_BANK
  5168 A335 C9 FF			cmp #$FF
  5169 A337 D0 03			jne l_0F7F
  5170 A339 20 DA 9A			jsr STATUSPLAYING
  5171 A33C			l_0F7F
  5172
  5173 				; ------------------------------------------------------------
  5174
  5175 = 3FAA			adr.DEV	= [DATAORIGIN+$012A] .array [4]
  5176 A33C			.var DEV	= adr.DEV .word
  5177
  5178 = A33D			@VarData	= DEV
  5179 = 0004			@VarDataSize	= 4
  5180
  5181 A33C			@exit
  5182 					.ifdef @new
  5183 					lda <@VarData
  5184 					sta :ztmp
  5185 					lda >@VarData
  5186 					ldy #@VarDataSize-1
  5187 					jmp @FreeMem
  5188 					els
  5189 A33C 60				rts						; ret
  5190 					eif
  5191 = A33D AA 3F		DEV
  5191 				.endl
  5192
  5193 A33F			.local	INIT						; PROCEDURE
  5194
  5195 A33F 4C 76 A3			jmp l_0F87
  5196
  5197 A342			.local	SETMCBASEADDRESS				; PROCEDURE | ASSEMBLER
  5198
  5199 				; -------------------  ASM Block 00000115  -------------------
  5200
  5201 A342			    icl 'asms/setMCBaseAddr.a65'
Source: setMCBaseAddr.a65
     1 				    .macro m@setMCBase name
     2 				      sty :name
     3 				      stx :name+1
     4 				    .endm
     5
     6 A342 8A 48		    txa:pha
     7
     8 A344 A4 D8		    ldy MCBaseAddr
     9 A346 A6 D9		    ldx MCBaseAddr+1
    10
    11 A348			    m@setMCBase MAIN.MC6850.MC6850_INIT.MCBASESTATE
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A348 8C 0C 8A		      sty MAIN.MC6850.MC6850_INIT.MCBASESTATE
     2 A34B 8E 0D 8A		      stx MAIN.MC6850.MC6850_INIT.MCBASESTATE+1
Source: setMCBaseAddr.a65
    12 A34E			    m@setMCBase MAIN.MC6850.MC6850_Send2.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A34E 8C 10 8A		      sty MAIN.MC6850.MC6850_SEND2.MCBASESTATE
     2 A351 8E 11 8A		      stx MAIN.MC6850.MC6850_SEND2.MCBASESTATE+1
Source: setMCBaseAddr.a65
    13 A354			    m@setMCBase MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A354 8C 24 8A		      sty MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASESTATE
     2 A357 8E 25 8A		      stx MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASESTATE+1
Source: setMCBaseAddr.a65
    14 A35A			    m@setMCBase MAIN.MIDI_FIFO.FIFO_FLUSH.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A35A 8C 5A 8A		      sty MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASESTATE
     2 A35D 8E 5B 8A		      stx MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASESTATE+1
Source: setMCBaseAddr.a65
    15
    16 A360 C8			    iny
    17 A361			    m@setMCBase MAIN.MC6850.MC6850_Send2.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A361 8C 19 8A		      sty MAIN.MC6850.MC6850_SEND2.MCBASEBUF
     2 A364 8E 1A 8A		      stx MAIN.MC6850.MC6850_SEND2.MCBASEBUF+1
Source: setMCBaseAddr.a65
    18 A367			    m@setMCBase MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A367 8C 34 8A		      sty MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASEBUF
     2 A36A 8E 35 8A		      stx MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASEBUF+1
Source: setMCBaseAddr.a65
    19 A36D			    m@setMCBase MAIN.MIDI_FIFO.FIFO_FLUSH.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A36D 8C 64 8A		      sty MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASEBUF
     2 A370 8E 65 8A		      stx MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASEBUF+1
Source: setMCBaseAddr.a65
    20
    21 A373 68 AA		    pla:tax
  5202 				  
  5203 A375			@exit
  5204 					.ifdef @new
  5205 					lda <@VarData
  5206 					sta :ztmp
  5207 					lda >@VarData
  5208 					ldy #@VarDataSize-1
  5209 					jmp @FreeMem
  5210 					els
  5211 A375 60				rts						; ret
  5212 					eif
  5213 				.endl
  5214 A376			l_0F87
  5215
  5216 				; optimize FAIL ('SETMCBASEADDRESS', init.inc), line = 10
  5217
  5218 A376 20 42 A3			jsr SETMCBASEADDRESS
  5219
  5220 				; optimize OK (init.inc), line = 13
  5221
  5222 A379 A9 03			lda #$03
  5223 A37B 20 05 8A			jsr MC6850.MC6850_INIT
  5224
  5225 				; optimize OK (init.inc), line = 14
  5226
  5227 A37E A9 16			lda #$16
  5228 A380 20 05 8A			jsr MC6850.MC6850_INIT
  5229
  5230 				; optimize OK (init.inc), line = 16
  5231
  5232 A383 A9 00			lda #$00
  5233 A385 8D 00 D4			sta DMACTL
  5234
  5235 				; optimize OK (init.inc), line = 17
  5236
  5237 A388 A9 32			lda #$32
  5238 A38A 8D F4 02			sta CHBASE
  5239
  5240 				; optimize OK (init.inc), line = 18
  5241
  5242 A38D A9 B4			lda #$B4
  5243 A38F 8D 30 02			sta SDLST
  5244 A392 A9 3F			lda #$3F
  5245 A394 8D 31 02			sta SDLST+1
  5246
  5247 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', init.inc), line = 20
  5248
  5249 A397 20 1C 8A			jsr MIDI_FIFO.FIFO_RESET
  5250
  5251 				; optimize FAIL (1, init.inc), line = 22
  5252
  5253 A39A E8				inx
  5254 A39B AD 64 A8 95 94		mva CURDEV :STACKORIGIN,x
  5255 A3A0 AD 65 A8 95 A4		mva CURDEV+1 :STACKORIGIN+STACKWIDTH,x
  5256 A3A5 A9 00			lda #$00
  5257 A3A7 20 EA 89			jsr SYSTEM.PARAMSTR
  5258 A3AA AD FF 89			lda SYSTEM.PARAMSTR.RESULT
  5259 A3AD 85 88			sta GETDEVICESPEC.FN
  5260 A3AF AD 00 8A			lda SYSTEM.PARAMSTR.RESULT+1
  5261 A3B2 85 89			sta GETDEVICESPEC.FN+1
  5262 A3B4 B5 94			lda :STACKORIGIN,x
  5263 A3B6 85 8C			sta GETDEVICESPEC.SPEC
  5264 A3B8 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  5265 A3BA 85 8D			sta GETDEVICESPEC.SPEC+1
  5266 A3BC CA				dex
  5267 A3BD 20 8D 95			jsr GETDEVICESPEC
  5268 A3C0 A5 90			lda GETDEVICESPEC.RESULT
  5269 A3C2 D0 0B			jne l_0FAB
  5270 A3C4 A0 FD			ldy #256-3
  5271 A3C6 B9 E5 7F 99 5E 3E + 	mva:rne CODEORIGIN+$00E2+3-256,y adr.CURDEV+3-256,y+
  5272 A3CF			l_0FAB
  5273 A3CF A9 00 8D 00 05		mva #$00 adr.FN
  5274
  5275 				; optimize FAIL ('CLEARWORKAREA', init.inc), line = 25
  5276
  5277 A3D4 20 1F 99			jsr CLEARWORKAREA
  5278
  5279 				; optimize FAIL ('CLEARSTATUS', init.inc), line = 26
  5280
  5281 A3D7 20 56 99			jsr CLEARSTATUS
  5282
  5283 				; optimize OK (init.inc), line = 27
  5284
  5285 A3DA A9 A0			lda #$A0
  5286 A3DC 85 D4			sta SCRADR
  5287 A3DE A9 39			lda #$39
  5288 A3E0 85 D5			sta SCRADR+1
  5289 A3E2 20 15 99			jsr HLINE
  5290
  5291 				; optimize OK (init.inc), line = 28
  5292
  5293 A3E5 A9 A1			lda #$A1
  5294 A3E7 85 D4			sta SCRADR
  5295 A3E9 A9 39			lda #$39
  5296 A3EB 85 D5			sta SCRADR+1
  5297 A3ED A9 E6			lda #$E6
  5298 A3EF 85 88			sta PUTINTTEXT.S
  5299 A3F1 A9 80			lda #$80
  5300 A3F3 85 89			sta PUTINTTEXT.S+1
  5301 A3F5 20 81 97			jsr PUTINTTEXT
  5302
  5303 				; optimize OK (init.inc), line = 29
  5304
  5305 A3F8 A9 BE			lda #$BE
  5306 A3FA 85 D4			sta SCRADR
  5307 A3FC A9 39			lda #$39
  5308 A3FE 85 D5			sta SCRADR+1
  5309 A400 A9 F0			lda #$F0
  5310 A402 85 88			sta PUTINTTEXT.S
  5311 A404 A9 80			lda #$80
  5312 A406 85 89			sta PUTINTTEXT.S+1
  5313 A408 20 81 97			jsr PUTINTTEXT
  5314
  5315 				; optimize OK (init.inc), line = 31
  5316
  5317 A40B A9 00			lda #$00
  5318 A40D 8D 08 95			sta MIDFILES.MIDTRACKS
  5319 A410 A9 2E			lda #$2E
  5320 A412 8D 09 95			sta MIDFILES.MIDTRACKS+1
  5321
  5322 				; optimize OK (init.inc), line = 34
  5323
  5324 A415 A9 00			lda #$00
  5325 A417 85 DE			sta MIDFILES.CTRK
  5326
  5327 A419			l_0FCE
  5328 				; --- ForToDoCondition
  5329 A419 A5 DE			lda MIDFILES.CTRK
  5330 A41B C9 10			cmp #$10
  5331 A41D B0 74			jcs l_0FDC
  5332
  5333 				; optimize OK (init.inc), line = 36
  5334
  5335 A41F 85 9D			sta :STACKORIGIN+9
  5336 A421 A9 00			lda #$00
  5337 A423 06 9D			asl :STACKORIGIN+9
  5338 A425 2A				rol @
  5339 A426 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  5340 A428 A9 22			lda #$22
  5341 A42A 85 9E			sta :STACKORIGIN+10
  5342 A42C A9 37			lda #$37
  5343 A42E 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  5344 A430 A5 DE			lda MIDFILES.CTRK
  5345 A432 20 DA 88			jsr @mul40
  5346 A435 18 65 9E			add :STACKORIGIN+10
  5347 A438 85 9E			sta :STACKORIGIN+10
  5348 A43A A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  5349 A43C 65 85			adc :eax+1
  5350 A43E 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  5351 A440 A5 9D			lda :STACKORIGIN+9
  5352 A442 18 69 00			add #$00
  5353 A445 A8				tay
  5354 A446 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  5355 A448 69 00			adc #$00
  5356 A44A 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  5357 A44C A5 9E			lda :STACKORIGIN+10
  5358 A44E 99 0F 3F			sta adr.CHANNELSCRADR,y
  5359 A451 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  5360 A453 99 10 3F			sta adr.CHANNELSCRADR+1,y
  5361
  5362 				; optimize OK (init.inc), line = 37
  5363
  5364 A456 A5 DE			lda MIDFILES.CTRK
  5365 A458 85 9D			sta :STACKORIGIN+9
  5366 A45A A9 00			lda #$00
  5367 A45C 06 9D			asl :STACKORIGIN+9
  5368 A45E 2A				rol @
  5369 A45F 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  5370 A461 A9 28			lda #$28
  5371 A463 85 9E			sta :STACKORIGIN+10
  5372 A465 A9 37			lda #$37
  5373 A467 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  5374 A469 A5 DE			lda MIDFILES.CTRK
  5375 A46B 20 DA 88			jsr @mul40
  5376 A46E 18 65 9E			add :STACKORIGIN+10
  5377 A471 85 9E			sta :STACKORIGIN+10
  5378 A473 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  5379 A475 65 85			adc :eax+1
  5380 A477 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  5381 A479 A5 9D			lda :STACKORIGIN+9
  5382 A47B 18 69 00			add #$00
  5383 A47E A8				tay
  5384 A47F A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  5385 A481 69 00			adc #$00
  5386 A483 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  5387 A485 A5 9E			lda :STACKORIGIN+10
  5388 A487 99 2F 3F			sta adr.PLAYLISTSCRADR,y
  5389 A48A A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  5390 A48C 99 30 3F			sta adr.PLAYLISTSCRADR+1,y
  5391
  5392 				; --- ForToDoEpilog
  5393 A48F E6 DE			inc MIDFILES.CTRK
  5394 A491 D0 86			jne l_0FCE
  5395 A493			l_0FDC
  5396
  5397 				; -------------------  ASM Block 00000116  -------------------
  5398
  5399 A493 A5 14		    lda $14
  5400 A495 C5 14		    cmp $14
  5401 A497 F0 FC		    beq *-2
  5402 				  
  5403 				; optimize FAIL ('RESETMEMORYPTR', init.inc), line = 47
  5404
  5405 A499 20 35 99			jsr RESETMEMORYPTR
  5406
  5407 				; optimize OK (init.inc), line = 48
  5408
  5409 A49C A5 14			lda _TM
  5410 A49E 8D 4F 3F			sta OTM
  5411
  5412 				; optimize FAIL ('SETCOLORS', init.inc), line = 49
  5413
  5414 A4A1 20 0E 97			jsr SETCOLORS
  5415 A4A4 A9 22			lda #$22
  5416 A4A6 8D 00 D4			sta DMACTL
  5417 A4A9 A9 00			lda #$00
  5418 A4AB 85 41			sta SOUNDR
  5419 A4AD A9 01			lda #$01
  5420 A4AF 8D 56 3F			sta PLAYDIR
  5421
  5422 				; optimize OK (init.inc), line = 50
  5423
  5424 A4B2 8D 59 3F			sta ISSTOPPED
  5425
  5426 				; ------------------------------------------------------------
  5427
  5428 A4B5			@exit
  5429 					.ifdef @new
  5430 					lda <@VarData
  5431 					sta :ztmp
  5432 					lda >@VarData
  5433 					ldy #@VarDataSize-1
  5434 					jmp @FreeMem
  5435 					els
  5436 A4B5 60				rts						; ret
  5437 					eif
  5438 				.endl
  5439
  5440 A4B6			.local	SHOWHELP					; PROCEDURE
  5441
  5442 				; optimize OK (help.inc), line = 3
  5443
  5444 A4B6 A9 01			lda #$01
  5445 A4B8 8D 5A 3F			sta ISHELP
  5446
  5447 				; optimize OK (help.inc), line = 4
  5448
  5449 A4BB A9 40			lda #$40
  5450 A4BD 8D CD 3F			sta $3FCD
  5451 A4C0 A9 3B			lda #$3B
  5452 A4C2 8D CE 3F			sta $3FCD+1
  5453 A4C5			@exit
  5454 					.ifdef @new
  5455 					lda <@VarData
  5456 					sta :ztmp
  5457 					lda >@VarData
  5458 					ldy #@VarDataSize-1
  5459 					jmp @FreeMem
  5460 					els
  5461 A4C5 60				rts						; ret
  5462 					eif
  5463 				.endl
  5464 A4C6			l_0107
  5465
  5466 				; optimize FAIL ('INIT', MIDICar Player.pas), line = 56
  5467
  5468 A4C6 20 3F A3			jsr INIT
  5469
  5470 				; optimize FAIL ('CLEARUVMETERS', MIDICar Player.pas), line = 57
  5471
  5472 A4C9 20 57 9A			jsr CLEARUVMETERS
  5473
  5474 				; optimize OK (MIDICar Player.pas), line = 66
  5475
  5476 A4CC AD 64 A8			lda CURDEV
  5477 A4CF 85 88			sta JOINSTRINGS.S1
  5478 A4D1 AD 65 A8			lda CURDEV+1
  5479 A4D4 85 89			sta JOINSTRINGS.S1+1
  5480 A4D6 A9 FB			lda #$FB
  5481 A4D8 85 8C			sta JOINSTRINGS.S2
  5482 A4DA A9 80			lda #$80
  5483 A4DC 85 8D			sta JOINSTRINGS.S2+1
  5484 A4DE 20 B1 95			jsr JOINSTRINGS
  5485
  5486 				; optimize OK (MIDICar Player.pas), line = 67
  5487
  5488 A4E1 A9 00			lda #$00
  5489 A4E3 20 C9 9D			jsr GOTONENTRY
  5490
  5491 				; optimize OK (MIDICar Player.pas), line = 68
  5492
  5493 A4E6 A9 FF			lda #$FF
  5494 A4E8 85 E2			sta MIDFILES._ADR
  5495 A4EA 85 E3			sta MIDFILES._ADR+1
  5496 A4EC A9 FE			lda #$FE
  5497 A4EE 85 E1			sta MIDFILES._BANK
  5498 A4F0 AD 68 A8			lda OUTSTR
  5499 A4F3 85 88			sta ADDTOLIST.ENTRY
  5500 A4F5 AD 69 A8			lda OUTSTR+1
  5501 A4F8 85 89			sta ADDTOLIST.ENTRY+1
  5502 A4FA 20 E6 9D			jsr ADDTOLIST
  5503
  5504 				; optimize FAIL ('CHOICELISTFILE', MIDICar Player.pas), line = 69
  5505
  5506 A4FD 20 55 A2			jsr CHOICELISTFILE
  5507
  5508 				; optimize FAIL ('SETNMI', MIDICar Player.pas), line = 72
  5509
  5510 A500 20 73 96			jsr SETNMI
  5511
  5512 				; --- RepeatUntilProlog
  5513 A503			l_1045
  5514
  5515 				; optimize FAIL ('MIDFILES.PROCESSMIDI', MIDICar Player.pas), line = 76
  5516
  5517 A503 20 DE 93			jsr MIDFILES.PROCESSMIDI
  5518
  5519 				; optimize OK (MIDICar Player.pas), line = 77
  5520
  5521 A506 AD 59 3F			lda ISSTOPPED
  5522 A509 F0 03 4C 95 A5		jne l_1061
  5523 A50E A5 DF			lda MIDFILES.PLAYINGTRACKS
  5524 A510 F0 03 4C 95 A5		jne l_1061
  5525
  5526 				; optimize OK (MIDICar Player.pas), line = 79
  5527
  5528 A515 A5 4A			lda PLAYERSTATUS
  5529 A517 29 0C			and #$0C
  5530 A519 8D 57 3F			sta V
  5531
  5532 				; optimize FAIL ('STATUSSTOPPED', MIDICar Player.pas), line = 80
  5533
  5534 A51C 20 78 9B			jsr STATUSSTOPPED
  5535
  5536 				; optimize OK (MIDICar Player.pas), line = 81
  5537
  5538 A51F AD 57 3F			lda V
  5539 A522 F0 71			jeq l_107F
  5540
  5541 				; optimize OK (MIDICar Player.pas), line = 83
  5542
  5543 A524 38 E9 05			sub #$05
  5544 A527 50 02			svc
  5545 A529 49 80			eor #$80
  5546 A52B 30 60			jmi l_1092
  5547
  5548 				; optimize OK (MIDICar Player.pas), line = 84
  5549
  5550 A52D AD 55 3F			lda CURPLAY
  5551 A530 C9 FF			cmp #$FF
  5552 A532 F0 59			jeq l_10A5
  5553
  5554 				; --- RepeatUntilProlog
  5555 A534			l_10A7
  5556
  5557 				; optimize OK (MIDICar Player.pas), line = 87
  5558
  5559 A534 AD 55 3F			lda CURPLAY
  5560 A537 C9 FF			cmp #$FF
  5561 A539 D0 06			jne l_10B9
  5562 A53B AD 53 3F			lda CURFILE
  5563 A53E 8D 55 3F			sta CURPLAY
  5564 A541			l_10B9
  5565
  5566 				; optimize OK (MIDICar Player.pas), line = 88
  5567
  5568 A541 AD 57 3F			lda V
  5569 A544 C9 0C			cmp #$0C
  5570 A546 D0 0F			jne l_10D4
  5571
  5572 				; optimize OK (MIDICar Player.pas), line = 89
  5573
  5574 A548 AD 54 3F			lda TOTALFILES
  5575 A54B 20 D3 89			jsr SYSTEM.RANDOM_0172
  5576 A54E AD 8C 3E			lda SYSTEM.RANDOM_0172.RESULT
  5577 A551 8D 55 3F			sta CURPLAY
  5578 A554 4C 78 A5			jmp l_10E5
  5579 A557			l_10D4
  5580
  5581 				; optimize OK (MIDICar Player.pas), line = 92
  5582
  5583 A557 AD 55 3F			lda CURPLAY
  5584 A55A 18 6D 56 3F			add PLAYDIR
  5585 A55E 8D 55 3F			sta CURPLAY
  5586
  5587 				; optimize OK (MIDICar Player.pas), line = 93
  5588
  5589 A561 C9 01			cmp #$01
  5590 A563 D0 06			jne l_10FA
  5591 A565 AD 54 3F			lda TOTALFILES
  5592 A568 8D 55 3F			sta CURPLAY
  5593 A56B			l_10FA
  5594
  5595 				; optimize OK (MIDICar Player.pas), line = 94
  5596
  5597 A56B AD 55 3F			lda CURPLAY
  5598 A56E CD 54 3F			cmp TOTALFILES
  5599 A571 D0 05			jne l_1117
  5600 A573 A9 01			lda #$01
  5601 A575 8D 55 3F			sta CURPLAY
  5602 A578			l_1117
  5603 A578			l_10E5
  5604
  5605 				; optimize OK (MIDICar Player.pas), line = 96
  5606
  5607 A578 AD 55 3F			lda CURPLAY
  5608 A57B 8D 53 3F			sta CURFILE
  5609
  5610 				; optimize FAIL ('CHOICELISTFILE', MIDICar Player.pas), line = 97
  5611
  5612 A57E 20 55 A2			jsr CHOICELISTFILE
  5613
  5614 				; optimize OK (MIDICar Player.pas), line = 98
  5615
  5616 A581 AD 55 3F			lda CURPLAY
  5617 A584 C9 FF			cmp #$FF
  5618 A586 F0 AC			jeq l_10A7
  5619
  5620 				; optimize OK (MIDICar Player.pas), line = 99
  5621
  5622 A588 A9 01			lda #$01
  5623 A58A 8D 56 3F			sta PLAYDIR
  5624 A58D			l_10A5
  5625 A58D			l_1092
  5626
  5627 				; optimize OK (MIDICar Player.pas), line = 101
  5628
  5629 A58D AD BB 3E			lda MIDFILES.TOTALTRACKS
  5630 A590 F0 03			jeq l_114C
  5631 A592 20 DA 9A			jsr STATUSPLAYING
  5632 A595			l_114C
  5633 A595			l_107F
  5634 A595			l_1061
  5635
  5636 				; optimize OK (MIDICar Player.pas), line = 105
  5637
  5638 A595 A5 14			lda _TM
  5639 A597 CD 4F 3F			cmp OTM
  5640 A59A F0 63			jeq l_1168
  5641
  5642 				; optimize OK (MIDICar Player.pas), line = 107
  5643
  5644 A59C 8D 4F 3F			sta OTM
  5645
  5646 				; optimize OK (MIDICar Player.pas), line = 108
  5647
  5648 A59F A9 D4			lda #$D4
  5649 A5A1 85 D4			sta SCRADR
  5650 A5A3 A9 39			lda #$39
  5651 A5A5 85 D5			sta SCRADR+1
  5652 A5A7 A9 F0			lda <MIDFILES._TOTALTICKS
  5653 A5A9 8D 6A 3F			sta PUTHEX.V
  5654 A5AC A9 00			lda >MIDFILES._TOTALTICKS
  5655 A5AE 8D 6B 3F			sta PUTHEX.V+1
  5656 A5B1 A9 08			lda #$08
  5657 A5B3 8D 6C 3F			sta PUTHEX.N
  5658 A5B6 20 DB 97			jsr PUTHEX
  5659
  5660 				; -------------------  ASM Block 00000117  -------------------
  5661
  5662 A5B9			  icl 'asms/uvmeters.a65' 
Source: uvmeters.a65
     1 = 00D6			hlpptr = $D6
     2 A5B9 A5 4A		  lda playerStatus
     3 A5BB 29 02		  and #ps_view
     4 A5BD D0 40		  bne dontUpdateUVMeter
     5
     6 A5BF			updateUVMeter:
     7 A5BF 8A 48		  txa:pha
     8
     9 A5C1 A2 00		  ldx #0
    10 A5C3			uvmeterLoop:
    11 A5C3 BD CA 3E		  lda MIDFILES.adr.CHNVOLUME,x
    12 A5C6 F0 30		  beq dontUpdate
    13
    14 A5C8 C9 04		  cmp #4
    15 A5CA 10 04		  bpl decVol
    16 A5CC A9 00		  lda #0
    17 A5CE F0 03		  beq storeVol
    18 A5D0			decVol:
    19 A5D0 38 E9 04		  sub #4
    20 A5D3			storeVol:
    21 A5D3 9D CA 3E		  sta MIDFILES.adr.CHNVOLUME,x
    22
    23 A5D6 4A			  lsr @
    24 A5D7 29 3C		  and #%00111100
    25
    26 A5D9 18 69 00		  add #<UVMETER_ADDR
    27 A5DC 85 D6		  sta hlpptr
    28 A5DE A9 3B		  lda #>UVMETER_ADDR
    29 A5E0 85 D7		  sta hlpptr+1
    30
    31 A5E2 8A			  txa
    32 A5E3 0A			  asl @
    33 A5E4 A8			  tay
    34 A5E5 B9 0F 3F		  lda adr.CHANNELSCRADR,y
    35 A5E8 85 D4		  sta scradr
    36 A5EA B9 10 3F		  lda adr.CHANNELSCRADR+1,y
    37 A5ED 85 D5		  sta scradr+1
    38
    39 A5EF A0 03		  ldy #3
    40 A5F1			loop:
    41 A5F1 B1 D6		  lda (hlpptr),y
    42 A5F3 91 D4		  sta (scradr),y
    43 A5F5 88			  dey
    44 A5F6 10 F9		  bpl loop
    45
    46 A5F8			dontUpdate:
    47 A5F8 E8			  inx
    48 A5F9 E0 10		  cpx #16
    49 A5FB D0 C6		  bne uvmeterLoop
    50
    51 A5FD 68 AA		  pla:tax
    52 A5FF			dontUpdateUVMeter
  5663 A5FF			l_1168
  5664
  5665 				; optimize OK (keyboard.inc), line = 1
  5666
  5667 A5FF AD FC 02			lda KEYB
  5668 A602 C9 FF			cmp #$FF
  5669 A604 D0 03 4C 3E A8		jeq l_118A
  5670
  5671 				; optimize OK (keyboard.inc), line = 3
  5672
  5673 A609 AD 5A 3F			lda ISHELP
  5674 A60C F0 14			jeq l_1197
  5675
  5676 				; optimize OK (keyboard.inc), line = 5
  5677
  5678 A60E A9 00			lda #$00
  5679 A610 8D 5A 3F			sta ISHELP
  5680
  5681 				; optimize OK (keyboard.inc), line = 6
  5682
  5683 A613 A9 F8			lda #$F8
  5684 A615 8D CD 3F			sta $3FCD
  5685 A618 A9 36			lda #$36
  5686 A61A 8D CE 3F			sta $3FCD+1
  5687
  5688 				; optimize OK (keyboard.inc), line = 7
  5689
  5690 A61D A9 FF			lda #$FF
  5691 A61F 8D FC 02			sta KEYB
  5692 A622			l_1197
  5693
  5694 				; optimize OK (keyboard.inc), line = 9
  5695
  5696 A622 AD FC 02			lda KEYB
  5697 A625 8D AE 3F			sta @CASETMP_0005
  5698 A628 C9 1C			cmp #$1C
  5699 A62A D0 06			jne l_11B0
  5700 				@
  5701 A62C 4C 41 A8			jmp b_1045					; break
  5702
  5703 A62F 4C 39 A8			jmp a_0005
  5704 A632			l_11B0
  5705 A632 C9 39			cmp #$39
  5706 A634 D0 06			jne l_11B9
  5707 				@
  5708
  5709 				; optimize FAIL ('SHOWHELP', keyboard.inc), line = 11
  5710
  5711 A636 20 B6 A4			jsr SHOWHELP
  5712 A639 4C 39 A8			jmp a_0005
  5713 A63C			l_11B9
  5714 A63C C9 0C			cmp #$0C
  5715 A63E D0 06			jne l_11C3
  5716 				@
  5717
  5718 				; optimize FAIL ('CHOICELISTFILE', keyboard.inc), line = 12
  5719
  5720 A640 20 55 A2			jsr CHOICELISTFILE
  5721 A643 4C 39 A8			jmp a_0005
  5722 A646			l_11C3
  5723 A646 C9 21			cmp #$21
  5724 A648 D0 30			jne l_11CD
  5725 				@
  5726
  5727 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 15
  5728
  5729 A64A 20 E3 A0			jsr DRAWLISTSELECTION
  5730
  5731 				; optimize OK (keyboard.inc), line = 16
  5732
  5733 A64D AD 53 3F			lda CURFILE
  5734 A650 20 C9 9D			jsr GOTONENTRY
  5735
  5736 				; optimize OK (keyboard.inc), line = 17
  5737
  5738 A653 A9 A3			lda <P_BANK
  5739 A655 85 88			sta GETENTRYSETS.PTR
  5740 A657 A9 3F			lda >P_BANK
  5741 A659 85 89			sta GETENTRYSETS.PTR+1
  5742 A65B 20 8F 9D			jsr GETENTRYSETS
  5743
  5744 				; optimize OK (keyboard.inc), line = 18
  5745
  5746 A65E AD A3 3F			lda P_BANK
  5747 A661 49 80			eor #$80
  5748 A663 8D A3 3F			sta P_BANK
  5749
  5750 				; optimize OK (keyboard.inc), line = 19
  5751
  5752 A666 A9 A3			lda <P_BANK
  5753 A668 85 88			sta SETENTRYSETS.PTR
  5754 A66A A9 3F			lda >P_BANK
  5755 A66C 85 89			sta SETENTRYSETS.PTR+1
  5756 A66E 20 99 9D			jsr SETENTRYSETS
  5757
  5758 				; optimize FAIL ('SHOWLIST', keyboard.inc), line = 20
  5759
  5760 A671 20 F8 A0			jsr SHOWLIST
  5761
  5762 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 21
  5763
  5764 A674 20 E3 A0			jsr DRAWLISTSELECTION
  5765
  5766 A677 4C 39 A8			jmp a_0005
  5767 A67A			l_11CD
  5768 A67A C9 0E			cmp #$0E
  5769 A67C F0 07			beq @+
  5770 A67E C9 0F			cmp #$0F
  5771 A680 F0 03 4C 33 A7		jne l_11ED
  5772 				@
  5773
  5774 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 25
  5775
  5776 A685 20 E3 A0			jsr DRAWLISTSELECTION
  5777
  5778 				; optimize OK (keyboard.inc), line = 26
  5779
  5780 A688 A9 00			lda #$00
  5781 A68A 8D 57 3F			sta V
  5782
  5783 				; optimize OK (keyboard.inc), line = 27
  5784
  5785 A68D AD FC 02			lda KEYB
  5786 A690 C9 0E			cmp #$0E
  5787 A692 D0 15			jne l_1204
  5788
  5789 				; optimize OK (keyboard.inc), line = 29
  5790
  5791 A694 AD 51 3F			lda YFILE
  5792 A697 F0 06			jeq l_1217
  5793
  5794 				; optimize FAIL (0, keyboard.inc), line = 30
  5795
  5796 A699 CE 51 3F			dec YFILE
  5797 A69C 4C A9 A6			jmp l_1225
  5798 A69F			l_1217
  5799
  5800 				; optimize OK (keyboard.inc), line = 32
  5801
  5802 A69F AD 52 3F			lda SHFILE
  5803 A6A2 F0 05			jeq l_1237
  5804 A6A4 A9 FF			lda #$FF
  5805 A6A6 8D 57 3F			sta V
  5806 A6A9			l_1237
  5807 A6A9			l_1225
  5808 A6A9			l_1204
  5809
  5810 				; optimize OK (keyboard.inc), line = 34
  5811
  5812 A6A9 AD FC 02			lda KEYB
  5813 A6AC C9 0F			cmp #$0F
  5814 A6AE D0 55			jne l_1252
  5815
  5816 				; optimize OK (keyboard.inc), line = 36
  5817
  5818 A6B0 AD 51 3F			lda YFILE
  5819 A6B3 C9 0F			cmp #$0F
  5820 A6B5 B0 06			jcs l_1265
  5821
  5822 				; optimize FAIL (0, keyboard.inc), line = 37
  5823
  5824 A6B7 EE 51 3F			inc YFILE
  5825 A6BA 4C 05 A7			jmp l_1273
  5826 A6BD			l_1265
  5827
  5828 				; optimize OK (keyboard.inc), line = 39
  5829
  5830 A6BD AD 54 3F			lda TOTALFILES
  5831 A6C0 38 ED 51 3F			sub YFILE
  5832 A6C4 85 9E			sta :STACKORIGIN+10
  5833 A6C6 A9 00			lda #$00
  5834 A6C8 E9 00			sbc #$00
  5835 A6CA 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  5836 A6CC A9 00			lda #$00
  5837 A6CE E9 00			sbc #$00
  5838 A6D0 85 BE			sta :STACKORIGIN+STACKWIDTH*2+10
  5839 A6D2 A9 00			lda #$00
  5840 A6D4 E9 00			sbc #$00
  5841 A6D6 85 CE			sta :STACKORIGIN+STACKWIDTH*3+10
  5842 A6D8 A5 9E			lda :STACKORIGIN+10
  5843 A6DA 38 E9 01			sub #$01
  5844 A6DD 85 9E			sta :STACKORIGIN+10
  5845 A6DF A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  5846 A6E1 E9 00			sbc #$00
  5847 A6E3 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  5848 A6E5 A5 BE			lda :STACKORIGIN+STACKWIDTH*2+10
  5849 A6E7 E9 00			sbc #$00
  5850 A6E9 85 BE			sta :STACKORIGIN+STACKWIDTH*2+10
  5851 A6EB A5 CE			lda :STACKORIGIN+STACKWIDTH*3+10
  5852 A6ED E9 00			sbc #$00
  5853 A6EF D0 0D			bne @+
  5854 A6F1 A5 BE			lda :STACKORIGIN+STACKWIDTH*2+10
  5855 A6F3 D0 09			bne @+
  5856 A6F5 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  5857 A6F7 D0 05			bne @+
  5858 A6F9 AD 52 3F			lda SHFILE
  5859 A6FC C5 9E			cmp :STACKORIGIN+10
  5860 				@
  5861 A6FE B0 05			jcs l_1291
  5862 A700 A9 01			lda #$01
  5863 A702 8D 57 3F			sta V
  5864 A705			l_1291
  5865 A705			l_1273
  5866 A705			l_1252
  5867
  5868 				; optimize OK (keyboard.inc), line = 41
  5869
  5870 A705 AD 57 3F			lda V
  5871 A708 F0 0D			jeq l_12AC
  5872
  5873 				; optimize OK (keyboard.inc), line = 43
  5874
  5875 A70A AD 52 3F			lda SHFILE
  5876 A70D 18 6D 57 3F			add V
  5877 A711 8D 52 3F			sta SHFILE
  5878
  5879 				; optimize FAIL ('SHOWLIST', keyboard.inc), line = 44
  5880
  5881 A714 20 F8 A0			jsr SHOWLIST
  5882 A717			l_12AC
  5883
  5884 				; optimize OK (keyboard.inc), line = 46
  5885
  5886 A717 AD 52 3F			lda SHFILE
  5887 A71A 18 6D 51 3F			add YFILE
  5888 A71E 8D 53 3F			sta CURFILE
  5889
  5890 				; optimize OK (keyboard.inc), line = 47
  5891
  5892 A721 CD 54 3F			cmp TOTALFILES
  5893 A724 90 07			jcc l_12D3
  5894 A726 AC 54 3F			ldy TOTALFILES
  5895 A729 88				dey
  5896 A72A 8C 53 3F			sty CURFILE
  5897 A72D			l_12D3
  5898
  5899 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 48
  5900
  5901 A72D 20 E3 A0			jsr DRAWLISTSELECTION
  5902
  5903 A730 4C 39 A8			jmp a_0005
  5904 A733			l_11ED
  5905 A733 C9 00			cmp #$00
  5906 A735 D0 19			jne l_12EA
  5907 				@
  5908
  5909 				; optimize OK (keyboard.inc), line = 52
  5910
  5911 A737 A5 4A			lda PLAYERSTATUS
  5912 A739 18 69 04			add #$04
  5913 A73C 29 0C			and #$0C
  5914 A73E 8D 57 3F			sta V
  5915
  5916 				; optimize OK (keyboard.inc), line = 53
  5917
  5918 A741 A5 4A			lda PLAYERSTATUS
  5919 A743 29 F3			and #$F3
  5920 A745 0D 57 3F			ora V
  5921 A748 85 4A			sta PLAYERSTATUS
  5922
  5923 				; optimize FAIL ('STATUSLOOP', keyboard.inc), line = 54
  5924
  5925 A74A 20 B7 9A			jsr STATUSLOOP
  5926
  5927 A74D 4C 39 A8			jmp a_0005
  5928 A750			l_12EA
  5929 A750 C9 25			cmp #$25
  5930 A752 D0 0C			jne l_1312
  5931 				@
  5932
  5933 				; optimize FAIL ('CLEARUVMETERS', keyboard.inc), line = 58
  5934
  5935 A754 20 57 9A			jsr CLEARUVMETERS
  5936
  5937 				; optimize OK (keyboard.inc), line = 59
  5938
  5939 A757 A5 4A			lda PLAYERSTATUS
  5940 A759 49 02			eor #$02
  5941 A75B 85 4A			sta PLAYERSTATUS
  5942
  5943 A75D 4C 39 A8			jmp a_0005
  5944 A760			l_1312
  5945 A760 C9 27			cmp #$27
  5946 A762 D0 0C			jne l_1326
  5947 				@
  5948
  5949 				; optimize OK (keyboard.inc), line = 63
  5950
  5951 A764 A5 4A			lda PLAYERSTATUS
  5952 A766 49 01			eor #$01
  5953 A768 85 4A			sta PLAYERSTATUS
  5954
  5955 				; optimize FAIL ('SETCOLORS', keyboard.inc), line = 64
  5956
  5957 A76A 20 0E 97			jsr SETCOLORS
  5958
  5959 A76D 4C 39 A8			jmp a_0005
  5960 A770			l_1326
  5961 A770 C9 17			cmp #$17
  5962 A772 F0 04			beq @+
  5963 A774 C9 15			cmp #$15
  5964 A776 D0 22			jne l_133C
  5965 				@
  5966
  5967 				; optimize OK (keyboard.inc), line = 68
  5968
  5969 A778 AD FC 02			lda KEYB
  5970 A77B C9 17			cmp #$17
  5971 A77D D0 05			jne l_134E
  5972 A77F A9 FF			lda #$FF
  5973 A781 8D 56 3F			sta PLAYDIR
  5974 A784			l_134E
  5975
  5976 				; optimize OK (keyboard.inc), line = 69
  5977
  5978 A784 AD FC 02			lda KEYB
  5979 A787 C9 15			cmp #$15
  5980 A789 D0 05			jne l_1367
  5981 A78B A9 01			lda #$01
  5982 A78D 8D 56 3F			sta PLAYDIR
  5983 A790			l_1367
  5984
  5985 				; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 70
  5986
  5987 A790 20 43 9B			jsr STATUSPAUSE
  5988
  5989 				; optimize OK (keyboard.inc), line = 71
  5990
  5991 A793 A9 00			lda #$00
  5992 A795 85 DF			sta MIDFILES.PLAYINGTRACKS
  5993
  5994 A797 4C 39 A8			jmp a_0005
  5995 A79A			l_133C
  5996 A79A C9 16			cmp #$16
  5997 A79C D0 09			jne l_137C
  5998 				@
  5999
  6000 				; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 75
  6001
  6002 A79E 20 78 9B			jsr STATUSSTOPPED
  6003
  6004 				; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 76
  6005
  6006 A7A1 20 DA 9A			jsr STATUSPLAYING
  6007
  6008 A7A4 4C 39 A8			jmp a_0005
  6009 A7A7			l_137C
  6010 A7A7 C9 12			cmp #$12
  6011 A7A9 D0 10			jne l_1387
  6012 				@
  6013
  6014 				; optimize OK (keyboard.inc), line = 80
  6015
  6016 A7AB A5 F5			lda MIDFILES._TIMERSTATUS
  6017 A7AD 10 06			jpl l_139D
  6018
  6019 				; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 82
  6020
  6021 A7AF 20 DA 9A			jsr STATUSPLAYING
  6022 A7B2 4C B8 A7			jmp l_13A8
  6023 A7B5			l_139D
  6024
  6025 				; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 83
  6026
  6027 A7B5 20 43 9B			jsr STATUSPAUSE
  6028 A7B8			l_13A8
  6029
  6030 A7B8 4C 39 A8			jmp a_0005
  6031 A7BB			l_1387
  6032 A7BB C9 10			cmp #$10
  6033 A7BD D0 06			jne l_13B2
  6034 				@
  6035
  6036 				; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 85
  6037
  6038 A7BF 20 78 9B			jsr STATUSSTOPPED
  6039 A7C2 4C 39 A8			jmp a_0005
  6040 A7C5			l_13B2
  6041 A7C5 C9 34			cmp #$34
  6042 A7C7 F0 08			beq @+
  6043 A7C9 C9 36			cmp #$36
  6044 A7CB F0 04			beq @+
  6045 A7CD C9 37			cmp #$37
  6046 A7CF D0 68			jne l_13C0
  6047 				@
  6048
  6049 				; optimize OK (keyboard.inc), line = 88
  6050
  6051 A7D1 AD FC 02			lda KEYB
  6052 A7D4 C9 36			cmp #$36
  6053 A7D6 D0 21			jne l_13D2
  6054 A7D8 AD DE 3E			lda MIDFILES.TEMPOSHIFT
  6055 A7DB 18 69 20			add #$20
  6056 A7DE 8D DE 3E			sta MIDFILES.TEMPOSHIFT
  6057 A7E1 AD DF 3E			lda MIDFILES.TEMPOSHIFT+1
  6058 A7E4 69 4E			adc #$4E
  6059 A7E6 8D DF 3E			sta MIDFILES.TEMPOSHIFT+1
  6060 A7E9 AD E0 3E			lda MIDFILES.TEMPOSHIFT+2
  6061 A7EC 69 00			adc #$00
  6062 A7EE 8D E0 3E			sta MIDFILES.TEMPOSHIFT+2
  6063 A7F1 AD E1 3E			lda MIDFILES.TEMPOSHIFT+3
  6064 A7F4 69 00			adc #$00
  6065 A7F6 8D E1 3E			sta MIDFILES.TEMPOSHIFT+3
  6066 A7F9			l_13D2
  6067
  6068 				; optimize OK (keyboard.inc), line = 89
  6069
  6070 A7F9 AD FC 02			lda KEYB
  6071 A7FC C9 37			cmp #$37
  6072 A7FE D0 21			jne l_13E8
  6073 A800 AD DE 3E			lda MIDFILES.TEMPOSHIFT
  6074 A803 38 E9 20			sub #$20
  6075 A806 8D DE 3E			sta MIDFILES.TEMPOSHIFT
  6076 A809 AD DF 3E			lda MIDFILES.TEMPOSHIFT+1
  6077 A80C E9 4E			sbc #$4E
  6078 A80E 8D DF 3E			sta MIDFILES.TEMPOSHIFT+1
  6079 A811 AD E0 3E			lda MIDFILES.TEMPOSHIFT+2
  6080 A814 E9 00			sbc #$00
  6081 A816 8D E0 3E			sta MIDFILES.TEMPOSHIFT+2
  6082 A819 AD E1 3E			lda MIDFILES.TEMPOSHIFT+3
  6083 A81C E9 00			sbc #$00
  6084 A81E 8D E1 3E			sta MIDFILES.TEMPOSHIFT+3
  6085 A821			l_13E8
  6086
  6087 				; optimize OK (keyboard.inc), line = 90
  6088
  6089 A821 AD FC 02			lda KEYB
  6090 A824 C9 34			cmp #$34
  6091 A826 D0 0E			jne l_13FE
  6092 A828 A9 00			lda #$00
  6093 A82A 8D DE 3E			sta MIDFILES.TEMPOSHIFT
  6094 A82D 8D DF 3E			sta MIDFILES.TEMPOSHIFT+1
  6095 A830 8D E0 3E			sta MIDFILES.TEMPOSHIFT+2
  6096 A833 8D E1 3E			sta MIDFILES.TEMPOSHIFT+3
  6097 A836			l_13FE
  6098
  6099 				; optimize FAIL ('MIDFILES.SETTEMPO', keyboard.inc), line = 91
  6100
  6101 A836 20 09 8F			jsr MIDFILES.SETTEMPO
  6102
  6103 A839			l_13C0
  6104 A839			a_0005
  6105
  6106 				; optimize OK (keyboard.inc), line = 94
  6107
  6108 A839 A9 FF			lda #$FF
  6109 A83B 8D FC 02			sta KEYB
  6110 A83E			l_118A
  6111
  6112 				; optimize OK (MIDICar Player.pas), line = 114
  6113
  6114 A83E 4C 03 A5			jmp l_1045
  6115 A841			b_1045
  6116
  6117 				; optimize FAIL ('UNSETNMI', MIDICar Player.pas), line = 117
  6118
  6119 A841 20 94 96			jsr UNSETNMI
  6120
  6121 				; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 119
  6122
  6123 A844 20 8E 9A			jsr EXIT2DOS
  6124
  6125 				; ------------------------------------------------------------
  6126
  6127 = 3000			CHARS_ADDR	= $3000
  6128 = 3400			SCREEN_ADDR	= $3400
  6129 = 36F8			SCREEN_WORK	= $36F8
  6130 = 39C8			SCREEN_TIME	= $39C8
  6131 = 39DC			SCREEN_STATUS	= $39DC
  6132 = 3A04			SCREEN_FOOT	= $3A04
  6133 = 3B00			UVMETER_ADDR	= $3B00
  6134 = 3B40			HELPSCR_ADDR	= $3B40
  6135 = 3FB4			DLIST_ADDR	= $3FB4
  6136 = 2000			PLAYLIST_ADDR	= $2000
  6137 = 2C00			START_INFO_ADDR	= $2C00
  6138 = 2E00			TRACK_DATA_ADDR	= $2E00
  6139 = 4000			MIDI_DATA_ADDR	= $4000
  6140 = 0023			FREE_MEM	= $23
  6141 = 0020			F_CLEAR	= $20
  6142 = 0001			PS_COLORSET	= $01
  6143 = 0002			PS_VIEW	= $02
  6144 = 000C			PS_LOOP	= $0C
  6145 = 0000			PS_PLAYONCE	= $00
  6146 = 0004			PS_REPEATONE	= $04
  6147 = 0008			PS_REPEATALL	= $08
  6148 = 000C			PS_SHUFFLE	= $0C
  6149 = 001E			LIST_VISIBLE_CHARS	= $1E
  6150 = A4A9B200		FE_DIR	= $A4A9B200
  6151 = 4D494400		FE_MID	= $4D494400
  6152 = 3F0F			adr.CHANNELSCRADR	= [DATAORIGIN+$008F] .array [16] .word
  6153 A847			.var CHANNELSCRADR	= adr.CHANNELSCRADR .word
  6154 = 3F2F			adr.PLAYLISTSCRADR	= [DATAORIGIN+$00AF] .array [16] .word
  6155 A847			.var PLAYLISTSCRADR	= adr.PLAYLISTSCRADR .word
  6156 = 004A			PLAYERSTATUS	= $4A
  6157 = 004B			TOTALXMS	= $4B
  6158 = 00D4			SCRADR	= $D4
  6159 = 00D8			MCBASEADDR	= $D8
  6160 = 00DA			PLS	= $DA
  6161 = 0014			_TM	= $14
  6162 = 3F4F			OTM	= DATAORIGIN+$00CF
  6163 = 3F50			CHN	= DATAORIGIN+$00D0
  6164 = 3F51			YFILE	= DATAORIGIN+$00D1
  6165 = 3F52			SHFILE	= DATAORIGIN+$00D2
  6166 = 3F53			CURFILE	= DATAORIGIN+$00D3
  6167 = 3F54			TOTALFILES	= DATAORIGIN+$00D4
  6168 = 3F55			CURPLAY	= DATAORIGIN+$00D5
  6169 = 3F56			PLAYDIR	= DATAORIGIN+$00D6
  6170 = 3F57			V	= DATAORIGIN+$00D7
  6171 = 3F58			FIRSTTIME	= DATAORIGIN+$00D8
  6172 = 3F59			ISSTOPPED	= DATAORIGIN+$00D9
  6173 = 3F5A			ISHELP	= DATAORIGIN+$00DA
  6174 = 3F5B			adr.CURDEV	= [DATAORIGIN+$00DB] .array [4]
  6175 A847			.var CURDEV	= adr.CURDEV .word
  6176 = 0500			adr.FN	= $0500
  6177 A847			.var FN	= adr.FN .word
  6178 = 0580			adr.OUTSTR	= $0580
  6179 A847			.var OUTSTR	= adr.OUTSTR .word
  6180 = 3F5F			LAST_BANK	= DATAORIGIN+$00DF
  6181 = 3F60			LAST_ADR	= DATAORIGIN+$00E0
  6182 = D40E			NMIEN	= $D40E
  6183 = FFFA			NMIVEC	= $FFFA
  6184 = 3F62			OLDNMIVEC	= DATAORIGIN+$00E2
  6185 = 8100			adr.COLORS	= CODEORIGIN+$0100
  6186 A847			.var COLORS	= adr.COLORS .word
  6187 = 810A			adr.GM_RESET	= CODEORIGIN+$010A
  6188 A847			.var GM_RESET	= adr.GM_RESET .word
  6189 = 0000			K_L	= $00
  6190 = 0006			K_LEFT	= $06
  6191 = 0007			K_RIGHT	= $07
  6192 = 000A			K_P	= $0A
  6193 = 000C			K_RETURN	= $0C
  6194 = 000E			K_UP	= $0E
  6195 = 000F			K_DOWN	= $0F
  6196 = 0010			K_V	= $10
  6197 = 0011			K_HELP	= $11
  6198 = 0012			K_C	= $12
  6199 = 0015			K_B	= $15
  6200 = 0016			K_X	= $16
  6201 = 0017			K_Z	= $17
  6202 = 001C			K_ESC	= $1C
  6203 = 0021			K_SPACE	= $21
  6204 = 0025			K_M	= $25
  6205 = 0027			K_INVERS	= $27
  6206 = 002C			K_TAB	= $2C
  6207 = 0034			K_DELETE	= $34
  6208 = 0036			K_CLEAR	= $36
  6209 = 0037			K_INSERT	= $37
  6210 = 0039			K_H	= $39
  6211 = 003C			K_CAPS	= $3C
  6212 = 003E			K_S	= $3E
  6213 = 02FC			KEYB	= $02FC
  6214 = 3F66			PUTTEXTINVERT	= DATAORIGIN+$00E6
  6215 = 3F67			SDMACTL	= DATAORIGIN+$00E7
  6216 = D400			DMACTL	= $D400
  6217 = 0230			SDLST	= $0230
  6218 = 02F4			CHBASE	= $02F4
  6219 = 0041			SOUNDR	= $41
  6220 = 3FA3			P_BANK	= DATAORIGIN+$0123
  6221 = 3FA4			P_ADR	= DATAORIGIN+$0124
  6222 = 3FAE			@CASETMP_0005	= DATAORIGIN+$012E
  6223 A847			@exit
  6224
  6225 A847 A2 00		@halt	ldx #$00
  6226 A849 9A				txs
  6227 					.ifdef MAIN.@DEFINES.ROMOFF
  6228 A84A EE 01 D3			inc portb
  6229 					.fi
  6230
  6231 A84D A0 01			ldy #$01
  6232
  6233 A84F 60				rts
  6234
  6235 				; ------------------------------------------------------------
  6236
  6237 A850 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  6238
  6239 				; ------------------------------------------------------------
  6240
  6241 A860			.local	@DEFINES
  6242 A860			ATARI
  6243 A860			USE_FIFO
  6244 A860			USE_CIO
  6245 A860			USE_SUPPORT_VARS
  6246 A860			ROMOFF
  6247 				.endl
  6248
  6249 A860			.local	@RESOURCE
  6250 				.endl
  6251
  6252 = A860 0F 3F		CHANNELSCRADR
  6252 = A862 2F 3F		PLAYLISTSCRADR
  6252 = A864 5B 3F		CURDEV
  6252 = A866 00 05		FN
  6252 = A868 80 05		OUTSTR
  6252 = A86A 00 81		COLORS
  6252 = A86C 0A 81		GM_RESET
  6252 				.endl							; MAIN
  6253
  6254 				; ------------------------------------------------------------
  6255 				; ------------------------------------------------------------
  6256
  6257 				.macro	UNITINITIALIZATION
  6258 				
  6259 					.ifdef MAIN.SYSTEM.@UnitInit
  6260 					jsr MAIN.SYSTEM.@UnitInit
  6261 					.fi
  6262 				
  6263 					.ifdef MAIN.MC6850.@UnitInit
  6264 					jsr MAIN.MC6850.@UnitInit
  6265 					.fi
  6266 				
  6267 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  6268 					jsr MAIN.MIDI_FIFO.@UnitInit
  6269 					.fi
  6270 				
  6271 					.ifdef MAIN.CIO.@UnitInit
  6272 					jsr MAIN.CIO.@UnitInit
  6273 					.fi
  6274 				
  6275 					.ifdef MAIN.MIDFILES.@UnitInit
  6276 					jsr MAIN.MIDFILES.@UnitInit
  6277 					.fi
  6278 				
  6279 					.ifdef MAIN.MISC.@UnitInit
  6280 					jsr MAIN.MISC.@UnitInit
  6281 					.fi
  6282 				.endm
  6283
  6284 				; ------------------------------------------------------------
  6285
  6286 					ift .SIZEOF(MAIN.SYSTEM) > 0
  6287 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  6287 				SYSTEM: $8999..$8A04
  6288 					eif
  6289
  6290 					ift .SIZEOF(MAIN.MC6850) > 0
  6291 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  6291 				MC6850: $8A05..$8A1B
  6292 					eif
  6293
  6294 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  6295 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  6295 				MIDI_FIFO: $8A1C..$8A6F
  6296 					eif
  6297
  6298 					ift .SIZEOF(MAIN.CIO) > 0
  6299 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  6299 				CIO: $8A70..$8AFF
  6300 					eif
  6301
  6302 					ift .SIZEOF(MAIN.MIDFILES) > 0
  6303 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  6303 				MIDFILES: $8B00..$950B
  6304 					eif
  6305
  6306 					ift .SIZEOF(MAIN.MISC) > 0
  6307 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  6307 				MISC: $950C..$950D
  6308 					eif
  6309
  6310 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  6310 				CODE: $8000..$A85F
  6311
  6312 				; ------------------------------------------------------------
  6313
  6314 					org $3E80
  6315
  6316 3E80			DATAORIGIN
  6317 3E80-3F58> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  6318 3E98 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  6319 3EB0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  6320 3EC8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  6321 3EE0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  6322 3EF8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  6323 3F10 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  6324 3F28 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  6325 3F40 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  6326 3F58 01			.by  $01
  6327
  6328 = 00D9			VARINITSIZE	= *-DATAORIGIN
  6329 = 012F			VARDATASIZE	= 303
  6330
  6331 = 3FAF			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  6332
  6333 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  6333 				DATA: $3E80..$3FAF
  6334
  6335 02E0-02E1> FF 88			run START
  6336
  6337 				; ------------------------------------------------------------
  6338
  6339 				.macro	STATICDATA
  6340 				.by  $00 $00 $05 $FB $00 $FC $00 $FD  $00 $04 $2D $65 $6D $1A $00 $02  $2B $22 $00 $02 $45 $3A $00 $02
  6341 				.by  $00 $00 $00 $02 $7E $7F $00 $02  $5C $5D $00 $02 $5E $5F $00 $05  $3B $00 $FC $00 $FD $00 $09 $4E
  6342 				.by  $B0 $EC $E1 $F9 $E9 $EE $E7 $CE  $00 $09 $4E $AE $EF $80 $F3 $EF  $EE $E7 $CE $00 $05 $FB $00 $3C
  6343 				.by  $00 $FD $00 $09 $4E $80 $B0 $E1  $F5 $F3 $E5 $80 $CE $00 $05 $FB  $00 $FC $00 $3D $00 $09 $4E $B3
  6344 				.by  $F4 $EF $F0 $F0 $E5 $E4 $CE $00  $09 $4E $AC $EF $E1 $E4 $E9 $EE  $E7 $80 $00 $13 $4E $B2 $E5 $E1
  6345 				.by  $E4 $E9 $EE $E7 $80 $E4 $E9 $F2  $E5 $E3 $F4 $EF $F2 $F9 $80 $00  $14 $4E $B5 $EE $F3 $F5 $F0 $F0
  6346 				.by  $EF $F2 $F4 $E5 $E4 $80 $E6 $EF  $F2 $ED $E1 $F4 $CE $00 $14 $4E  $AE $EF $F4 $80 $E5 $EE $EF $F5
  6347 				.by  $E7 $E8 $F4 $80 $ED $E5 $ED $EF  $F2 $F9 $CE $00 $11 $4E $AE $EF  $F4 $80 $E1 $80 $AD $A9 $A4 $A9
  6348 				.by  $80 $E6 $E9 $EC $E5 $CE $00 $0C  $4E $A9 $8F $AF $80 $A5 $F2 $F2  $EF $F2 $80 $83 $00 $0B $4E $A4
  6349 				.by  $E9 $F2 $E5 $E3 $F4 $EF $F2 $F9  $CE $00 $02 $44 $3A $00 $08 $4E  $B3 $F4 $E1 $F4 $F5 $F3 $CE $00
  6350 				.by  $09 $4E $A3 $EF $F5 $EE $F4 $E5  $F2 $CE $00 $03 $2A $2E $2A $00  $A8 $00 $0A $08 $0A $A8 $0A $00
  6351 				.by  $02 $00 $F0 $7E $7F $09 $01 $F7  $17 $80 $1B $80 $1F $80 $23 $80  $29 $1C $1D $1E
  6352 				.endm
  6353
  6354 					end
