mads 2.1.6
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 2000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 FFFF> 2000-3D05> 04 54 + .by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $0A $4F $70  $65 $6E $20 $66 $69 $6C $65 $20
     2 2018 00 0B 49 2F 4F 20 + .by  $00 $0B $49 $2F $4F $20 $45 $72  $72 $6F $72 $20 $23 $00 $07 $54  $72 $61 $63 $6B $3A $20 $00 $03
     3 2030 2E 2E 2E 00 08 46 + .by  $2E $2E $2E $00 $08 $46 $49 $46  $4F $3A $20 $4F $6E $00 $0F $44  $32 $3A $53 $45 $4C $46 $54 $45
     4 2048 53 54 2E 4D 49 44 + .by  $53 $54 $2E $4D $49 $44 $00 $0A  $50 $6C $61 $79 $69 $6E $67 $2E  $2E $2E $00 $F0 $7E $7F $09 $01
     5 2060 F7			.by  $F7
Source: MIDICar Player.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 2061			RTLIB
   113 2061				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D3
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $2061..$2B6A
   118
   119 				; ------------------------------------------------------------
   120
   121 2B6B			START
   122 2B6B BA				tsx
   123 2B6C 8E EC 3C			stx MAIN.@halt+1
   124
   125 					.ifdef fmulinit
   126 					fmulinit
   127 					.fi
   128
   129 = 01CD			VLEN	= VARDATASIZE-VARINITSIZE
   130 = 3D0E			VADR	= DATAORIGIN+VARINITSIZE
   131
   132 					ift VADR > $BFFF
   133 					ert 'Invalid memory address range ',VADR
   134 					eli (VLEN>0) && (VLEN<=256)
   135 					ldx #256-VLEN
   136 					lda #$00
   137 					sta:rne VADR+VLEN-256,x+
   138 					eli VLEN>256
   139 					@fill #VADR #VLEN #$00
   139 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   139 2B6F A9 0E 85 88 A9 3D +  MWA #VADR @FILL.PTR1
   139 2B77 A9 CD 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   139 2B7F A9 00 85 84		 MVA #$00 @FILL.PTR2
   139 2B83 20 57 24		 JSR @FILL
   140 					eif
   141
   142 				.ifdef :psptr
   143 					mwa #PROGRAMSTACK :psptr
   144 				.fi
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 2B86				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 2B86			.local	rominit
     5
     6 2B86 78			        sei
     7 2B87 A9 00		        lda #%00000000
     8 2B89 8D 0E D4		        sta NMIEN       ;$D40E
     9 2B8C A9 FE		        lda #%11111110
    10 2B8E 8D 01 D3		        sta PORTB       ;$D301
    11
    12 2B91 A2 03			ldx #3
    13 2B93 A0 00			ldy #0
    14 2B95 EE 01 D3		mv	inc portb
    15 2B98 B9 00 E0		afnt0	lda $e000,y
    16 2B9B CE 01 D3			dec portb
    17 2B9E 99 00 E0		afnt1	sta $e000,y
    18 2BA1 C8				iny
    19 2BA2 D0 F1			bne mv
    20 2BA4 EE 9A 2B			inc afnt0+2
    21 2BA7 EE A0 2B			inc afnt1+2
    22 2BAA CA				dex
    23 2BAB 10 E8			bpl mv
    24
    25 2BAD A2 CA		        ldx #<nmiint
    26 2BAF A0 2B		        ldy #>nmiint
    27 2BB1 8E FA FF		        stx NMIVEC      ;$FFFA
    28 2BB4 8C FB FF		        sty NMIVEC+1
    29
    30 2BB7 A2 D4		        ldx #<irqint
    31 2BB9 A0 2B		        ldy #>irqint
    32 2BBB 8E FE FF		        stx IRQVEC      ;$FFFE
    33 2BBE 8C FF FF		        sty IRQVEC+1
    34
    35 2BC1 A9 40		        lda #%01000000
    36 2BC3 8D 0E D4		        sta NMIEN       ;$D40E
    37 2BC6 58			        cli
    38
    39 2BC7 4C F5 2B			jmp skp
    40
    41
    42
    43 2BCA 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 2BCD 10 03		        spl
    45 2BCF 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 2BD2 38			        sec
    48 2BD3 24			        .byte $24        ;BIT $18
    49
    50 2BD4 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 2BD5 EE 01 D3		        inc PORTB       ;$D301
    55
    56 2BD8 48			        pha
    57 2BD9 8A			        txa
    58 2BDA 48			        pha
    59 2BDB BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 2BDC A9 2B		        lda #>iret      ;adres procedury iret
    64 2BDE 48			        pha
    65 2BDF A9 EE		        lda #<iret
    66 2BE1 48			        pha
    67 2BE2 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 2BE5 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 2BE6 90 03		        scc
    73 2BE8 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 2BEB 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 2BEE 68			iret	pla
    77 2BEF AA				tax
    78 2BF0 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 2BF1 CE 01 D3		        dec PORTB       ;$D301
    83 2BF4 40			        rti
    84
    85 2BF5			skp
    86
    87 				.endl
    88
   148 					.fi
   149
   150 2BF5 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 2BF7 BD 40 03 9D F4 3C + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 2C00 E8				inx						; X = 0
   154 2C01 86 80			stx bp						; BP = 0
   155
   156 2C03 8E 0F D2			stx skctl					; reset POKEY
   157 2C06 A9 03			lda #3
   158 2C08 8D 0F D2			sta skctl
   159
   160 2C0B CA				dex						; X = 255
   161
   162 2C0C				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
    27 2C0C 20 85 3A			jsr MAIN.MIDFILES.@UnitInit
Source: MIDICar Player.a65
   163
   164 2C0F			.local	MAIN						; PROCEDURE
   165
   166 2C0F 4C FC 3A			jmp l_0062
   167
   168 				; ------------------------------------------------------------
   169
   170 2C12			.local	SYSTEM						; UNIT
   171
   172 2C12			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   173
   174 				; ------------------------------------------------------------
   175
   176 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   177 				; as Pointer
   178 2C12 B5 94			lda :STACKORIGIN,x
   179 2C14 85 88			sta A
   180 2C16 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   181 2C18 85 89			sta A+1
   182 2C1A CA				dex
   183 2C1B			@main
   184
   185 				; -------------------  ASM Block 00000002  -------------------
   186
   187 2C1B A0 00			ldy #0
   188 2C1D B1 88 85 90			mva (:edx),y Result
   189
   190 2C21			@exit
   191
   192 				; ------------------------------------------------------------
   193
   194 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   195 				; as Pointer
   196
   197 2C21 E8				inx
   198 2C22 A5 90 95 94			mva RESULT :STACKORIGIN,x
   199
   200 					.ifdef @new
   201 					lda <@VarData
   202 					sta :ztmp
   203 					lda >@VarData
   204 					ldy #@VarDataSize-1
   205 					jmp @FreeMem
   206 					eif
   207
   208 				; ------------------------------------------------------------
   209
   210 = 0088			A	= :EDX
   211 = 0090			RESULT	= :STACKORIGIN-4
   212 2C26 60				rts						; ret
   213 				.endl
   214
   215 2C27			.local	FILEPOS						; FUNCTION | ASSEMBLER
   216
   217 				; -------------------  ASM Block 00000011  -------------------
   218
   219 2C27 8A 48			txa:pha
   220
   221 2C29 AD 13 3D 85 82 AD + 	mwa f :bp2
   222
   223 2C33 A0 04			ldy #s@file.chanel
   224 2C35 B1 82			lda (:bp2),y
   225 2C37 AA				tax
   226 2C38 A9 26			lda #38
   227 2C3A 9D 42 03			sta iccmd,x
   228
   229 2C3D				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 2C3D EE 01 D3				inc portb
     6 2C40 20 56 E4				jsr CIOV
     8 2C43 CE 01 D3				dec portb
Source: MIDICar Player.a65
   230
   231 2C46 8C 0F 3D			sty IOResult
   232
   233 2C49 BD 4C 03 85 84		mva icax3,x :eax
   234 2C4E BD 4D 03 85 85		mva icax4,x :eax+1
   235 2C53 BD 4E 03 85 86		mva icax5,x :eax+2
   236
   237 2C58 A9 00 85 87			mva #$00 :eax+3
   238 2C5C 85 8E			sta :ecx+2
   239 2C5E 85 8F			sta :ecx+3
   240
   241 2C60 A0 02			ldy #s@file.record
   242 2C62 B1 82			lda (:bp2),y
   243 2C64 85 8C			sta :ecx
   244 2C66 C8				iny
   245 2C67 B1 82			lda (:bp2),y
   246 2C69 85 8D			sta :ecx+1
   247
   248 2C6B 20 A5 25			jsr idivEAX_ECX.main
   249
   250 2C6E A5 84 8D 15 3D		mva :eax Result
   251 2C73 A5 85 8D 16 3D		mva :eax+1 Result+1
   252 2C78 A5 86 8D 17 3D		mva :eax+2 Result+2
   253 2C7D A5 87 8D 18 3D		mva :eax+3 Result+3
   254
   255 2C82 68 AA			pla:tax
   256
   257 2C84			@exit
   258
   259 				; ------------------------------------------------------------
   260
   261 = 3D13			F	= DATAORIGIN+$000B
   262 = 3D15			RESULT	= DATAORIGIN+$000D
   263
   264 = 3D13			@VarData	= F
   265 = 0002			@VarDataSize	= 2
   266
   267 2C84 60				rts						; ret
   268 				.endl
   269
   270 2C85			.local	SEEK						; PROCEDURE | ASSEMBLER
   271
   272 				; -------------------  ASM Block 00000012  -------------------
   273
   274 2C85 8A 48			txa:pha
   275
   276 2C87 AD 19 3D 85 82 AD + 	mwa f :bp2
   277
   278 2C91 A0 04			ldy #s@file.chanel
   279 2C93 B1 82			lda (:bp2),y
   280 2C95 AA				tax
   281 2C96 A9 25			lda #37
   282 2C98 9D 42 03			sta iccmd,x
   283
   284 2C9B A0 02			ldy #s@file.record
   285 2C9D B1 82			lda (:bp2),y
   286 2C9F 85 84			sta :eax
   287 2CA1 C8				iny
   288 2CA2 B1 82			lda (:bp2),y
   289 2CA4 85 85			sta :eax+1
   290 2CA6 A9 00			lda #$00
   291 2CA8 85 86			sta :eax+2
   292 2CAA 85 87			sta :eax+3
   293
   294 2CAC AD 1B 3D 85 8C		mva a :ecx
   295 2CB1 AD 1C 3D 85 8D		mva a+1 :ecx+1
   296 2CB6 AD 1D 3D 85 8E		mva a+2 :ecx+2
   297 2CBB AD 1E 3D 85 8F		mva a+3 :ecx+3
   298
   299 2CC0 20 59 25			jsr imulECX
   300
   301 2CC3 A5 84 9D 4C 03		mva :eax icax3,x
   302 2CC8 A5 85 9D 4D 03		mva :eax+1 icax4,x
   303 2CCD A5 86 9D 4E 03		mva :eax+2 icax5,x
   304
   305 2CD2				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 2CD2 EE 01 D3				inc portb
     6 2CD5 20 56 E4				jsr CIOV
     8 2CD8 CE 01 D3				dec portb
Source: MIDICar Player.a65
   306
   307 2CDB 8C 0F 3D			sty IOResult
   308
   309 2CDE 68 AA			pla:tax
   310
   311 				; ------------------------------------------------------------
   312
   313 = 3D19			F	= DATAORIGIN+$0011
   314 = 3D1B			A	= DATAORIGIN+$0013
   315
   316 = 3D19			@VarData	= F
   317 = 0006			@VarDataSize	= 6
   318
   319 2CE0			@exit
   320 					.ifdef @new
   321 					lda <@VarData
   322 					sta :ztmp
   323 					lda >@VarData
   324 					ldy #@VarDataSize-1
   325 					jmp @FreeMem
   326 					els
   327 2CE0 60				rts						; ret
   328 					eif
   329 				.endl
   330
   331 2CE1			.local	EOF						; FUNCTION
   332
   333 				; optimize OK (SYSTEM), line = 1163
   334
   335 2CE1 AD 1F 3D			lda F
   336 2CE4 8D 13 3D			sta FILEPOS.F
   337 2CE7 AD 20 3D			lda F+1
   338 2CEA 8D 14 3D			sta FILEPOS.F+1
   339 2CED 20 27 2C			jsr FILEPOS
   340 2CF0 AD 15 3D			lda FILEPOS.RESULT
   341 2CF3 8D 22 3D			sta I
   342 2CF6 AD 16 3D			lda FILEPOS.RESULT+1
   343 2CF9 8D 23 3D			sta I+1
   344 2CFC AD 17 3D			lda FILEPOS.RESULT+2
   345 2CFF 8D 24 3D			sta I+2
   346 2D02 AD 18 3D			lda FILEPOS.RESULT+3
   347 2D05 8D 25 3D			sta I+3
   348 				; BlockRead
   349
   350 				; optimize OK (SYSTEM), line = 1165
   351
   352 2D08 AC 1F 3D 84 82 AC + 	mwy F :bp2
   353 2D12 A0 06			ldy #s@file.buffer
   354 2D14 AD 75 2D			lda BF
   355 2D17 91 82			sta (:bp2),y
   356 2D19 C8				iny
   357 2D1A AD 76 2D			lda BF+1
   358 2D1D 91 82			sta (:bp2),y
   359 2D1F A0 08			ldy #s@file.nrecord
   360 2D21 A9 01			lda #$01
   361 2D23 91 82			sta (:bp2),y
   362 2D25 C8				iny
   363 2D26 A9 00			lda #$00
   364 2D28 91 82			sta (:bp2),y
   365
   366 2D2A 8A 48			txa:pha
   367 2D2C 38				sec
   368 					@readfile F, #7
   368 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
   368 2D2D AC 20 3D		 LDY F+1
   368 2D30 AD 1F 3D		 LDA F
   368 2D33 A2 07		 LDX# 7
   368 2D35 20 30 21		 JSR @READFILE
   369 2D38 68 AA			pla:tax
   370
   371 				; optimize OK (SYSTEM), line = 1167
   372
   373 2D3A AD 1F 3D			lda F
   374 2D3D 8D 19 3D			sta SEEK.F
   375 2D40 AD 20 3D			lda F+1
   376 2D43 8D 1A 3D			sta SEEK.F+1
   377 2D46 AD 22 3D			lda I
   378 2D49 8D 1B 3D			sta SEEK.A
   379 2D4C AD 23 3D			lda I+1
   380 2D4F 8D 1C 3D			sta SEEK.A+1
   381 2D52 AD 24 3D			lda I+2
   382 2D55 8D 1D 3D			sta SEEK.A+2
   383 2D58 AD 25 3D			lda I+3
   384 2D5B 8D 1E 3D			sta SEEK.A+3
   385 2D5E 20 85 2C			jsr SEEK
   386
   387 				; -------------------  ASM Block 00000013  -------------------
   388
   389 2D61 AD 1F 3D 85 82 AD + 	mwa f :bp2
   390
   391 2D6B A0 05			ldy #s@file.status
   392 2D6D B1 82			lda (:bp2),y
   393 2D6F 29 01			and #e@file.eof
   394 2D71 8D 21 3D			sta Result
   395
   396 2D74			@exit
   397
   398 				; ------------------------------------------------------------
   399
   400 = 3D1F			F	= DATAORIGIN+$0017
   401 = 3D21			RESULT	= DATAORIGIN+$0019
   402 = 3D22			I	= DATAORIGIN+$001A
   403 = 3D26			adr.BF	= [DATAORIGIN+$001E] .array [256]
   404 2D74			.var BF	= adr.BF .word
   405
   406 = 3D1F			@VarData	= F
   407 = 0106			@VarDataSize	= 262
   408
   409 2D74 60				rts						; ret
   410 = 2D75 26 3D		BF
   410 				.endl
   411
   412 2D77			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   413
   414 				; ------------------------------------------------------------
   415
   416 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   417 				; as Pointer
   418 2D77 B5 94			lda :STACKORIGIN,x
   419 2D79 85 88			sta A
   420 2D7B B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   421 2D7D 85 89			sta A+1
   422 2D7F CA				dex
   423 2D80 30 05			jmi @main
   424
   425 				; ------------------------------------------------------------
   426
   427 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   428 				; as Pointer
   429 2D82 B5 94			lda :STACKORIGIN,x
   430 2D84 85 8C			sta VALUE
   431 2D86 CA				dex
   432 2D87			@main
   433
   434 				; -------------------  ASM Block 00000018  -------------------
   435
   436 2D87 A0 00			ldy #0
   437 2D89 A5 8C 91 88			mva value (:edx),y
   438
   439 				; ------------------------------------------------------------
   440
   441 = 0088			A	= :EDX
   442 = 008C			VALUE	= :ECX
   443 2D8D			@exit
   444 					.ifdef @new
   445 					lda <@VarData
   446 					sta :ztmp
   447 					lda >@VarData
   448 					ldy #@VarDataSize-1
   449 					jmp @FreeMem
   450 					els
   451 2D8D 60				rts						; ret
   452 					eif
   453 				.endl
   454
   455 2D8E			.local	FILLCHAR_00C5					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   456
   457 					.MACRO m@INLINE
   458 				
   459 				; -------------------  ASM Block 00000021  -------------------
   460 				
   461 					jsr @fill
   462 				
   463 					.ENDM
   464
   465 				; ------------------------------------------------------------
   466
   467 = 0088			A	= :EDX
   468 = 008C			COUNT	= :ECX
   469 = 0084			VALUE	= :EAX
   470 2D8E			@exit
   471 				.endl
   472
   473 2D8E			.local	MOVE_00C6					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   474
   475 					.MACRO m@INLINE
   476 				
   477 				; -------------------  ASM Block 00000028  -------------------
   478 				
   479 					jsr @move
   480 				
   481 					.ENDM
   482
   483 				; ------------------------------------------------------------
   484
   485 = 0088			SOURCE	= :EDX
   486 = 008C			DEST	= :ECX
   487 = 0084			COUNT	= :EAX
   488 2D8E			@exit
   489 				.endl
   490
   491 2D8E			.local	PARAMCOUNT					; FUNCTION | ASSEMBLER
   492
   493 				; -------------------  ASM Block 00000044  -------------------
   494
   495 					@cmdline #255
   495 				 LDA# 255\ JSR @CMDLINE
   495 2D8E A9 FF		 LDA# 255
   495 2D90 20 F8 21		 JSR @CMDLINE
   496 2D93 8D 26 3E			sta Result
   497
   498 2D96			@exit
   499
   500 				; ------------------------------------------------------------
   501
   502 = 3E26			RESULT	= DATAORIGIN+$011E
   503 2D96 60				rts						; ret
   504 				.endl
   505
   506 2D97			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   507 2D97 8D 27 3E			sta I
   508
   509 				; -------------------  ASM Block 00000045  -------------------
   510
   511 					@cmdline i
   511 				 LDA I\ JSR @CMDLINE
   511 2D9A AD 27 3E		 LDA I
   511 2D9D 20 F8 21		 JSR @CMDLINE
   512
   513 				;	@move #@buf Result #33
   514 2DA0 A0 DF			ldy #256-33
   515 2DA2 B9 21 03 99 49 3D + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   516
   517 2DAB			@exit
   518
   519 				; ------------------------------------------------------------
   520
   521 = 3E27			I	= DATAORIGIN+$011F
   522 = 3E28			adr.RESULT	= [DATAORIGIN+$0120] .array [33]
   523 2DAB			.var RESULT	= adr.RESULT .word
   524
   525 = 3E27			@VarData	= I
   526 = 0022			@VarDataSize	= 34
   527
   528 2DAB 60				rts						; ret
   529 = 2DAC 28 3E		RESULT
   529 				.endl
   530
   531 				; ------------------------------------------------------------
   532
   533 = 0101			__PORTB_BANKS	= $0101
   534 = 0648			M_PI_2	= $0648
   535 = 0192			D_PI_2	= $0192
   536 = 0004			D_PI_180	= $04
   537 = 0000			MGTIA	= $00
   538 = 0080			MVBXE	= $80
   539 = 0000			VBXE_XDLADR	= $00
   540 = 00E0			VBXE_BCBTMP	= $E0
   541 = 0100			VBXE_BCBADR	= $0100
   542 = 1000			VBXE_MAPADR	= $1000
   543 = 1000			VBXE_CHBASE	= $1000
   544 = 5000			VBXE_OVRADR	= $5000
   545 = B000			VBXE_WINDOW	= $B000
   546 = 0000			IDLI	= $00
   547 = 0001			IVBL	= $01
   548 = 0002			ITIM1	= $02
   549 = 0003			ITIM2	= $03
   550 = 0004			ITIM4	= $04
   551 = 00FE			CH_DELCHR	= $FE
   552 = 009B			CH_ENTER	= $9B
   553 = 001B			CH_ESC	= $1B
   554 = 001C			CH_CURS_UP	= $1C
   555 = 001D			CH_CURS_DOWN	= $1D
   556 = 001E			CH_CURS_LEFT	= $1E
   557 = 001F			CH_CURS_RIGHT	= $1F
   558 = 007F			CH_TAB	= $7F
   559 = 009B			CH_EOL	= $9B
   560 = 007D			CH_CLR	= $7D
   561 = 00FD			CH_BELL	= $FD
   562 = 007E			CH_DEL	= $7E
   563 = 009C			CH_DELLINE	= $9C
   564 = 009D			CH_INSLINE	= $9D
   565 = 0000			PAL_PMCOLOR0	= $00
   566 = 0001			PAL_PMCOLOR1	= $01
   567 = 0002			PAL_PMCOLOR2	= $02
   568 = 0003			PAL_PMCOLOR3	= $03
   569 = 0004			PAL_COLOR0	= $04
   570 = 0005			PAL_COLOR1	= $05
   571 = 0006			PAL_COLOR2	= $06
   572 = 0007			PAL_COLOR3	= $07
   573 = 0008			PAL_COLBAK	= $08
   574 = 0000			COLOR_BLACK	= $00
   575 = 000E			COLOR_WHITE	= $0E
   576 = 0032			COLOR_RED	= $32
   577 = 0096			COLOR_CYAN	= $96
   578 = 0068			COLOR_VIOLET	= $68
   579 = 00C4			COLOR_GREEN	= $C4
   580 = 0074			COLOR_BLUE	= $74
   581 = 00EE			COLOR_YELLOW	= $EE
   582 = 0028			COLOR_ORANGE	= $28
   583 = 00E4			COLOR_BROWN	= $E4
   584 = 003C			COLOR_LIGHTRED	= $3C
   585 = 0004			COLOR_GRAY1	= $04
   586 = 0006			COLOR_GRAY2	= $06
   587 = 000A			COLOR_GRAY3	= $0A
   588 = 00CC			COLOR_LIGHTGREEN	= $CC
   589 = 007C			COLOR_LIGHTBLUE	= $7C
   590 = 0004			FMOPENREAD	= $04
   591 = 0008			FMOPENWRITE	= $08
   592 = 0009			FMOPENAPPEND	= $09
   593 = 000C			FMOPENREADWRITE	= $0C
   594 = 3D08			SCREENWIDTH	= DATAORIGIN+$0000
   595 = 3D0A			SCREENHEIGHT	= DATAORIGIN+$0002
   596 = 3D0C			DATESEPARATOR	= DATAORIGIN+$0004
   597 = D20A			RND	= $D20A
   598 = 02C0			adr.PALETTE	= $02C0
   599 2DAE			.var PALETTE	= adr.PALETTE .word
   600 = D012			adr.HPALETTE	= $D012
   601 2DAE			.var HPALETTE	= adr.HPALETTE .word
   602 = 3D0D			FILEMODE	= DATAORIGIN+$0005
   603 = 3D0E			GRAPHMODE	= DATAORIGIN+$0006
   604 = 3D0F			IORESULT	= DATAORIGIN+$0007
   605 = 3D10			EOLN	= DATAORIGIN+$0008
   606 = 3D11			RNDSEED	= DATAORIGIN+$0009
   607
   608 = 2DAE C0 02		PALETTE
   608 = 2DB0 12 D0		HPALETTE
   608 				.endl							; UNIT SYSTEM
   609
   610 				; ------------------------------------------------------------
   611
   612 2DB2			.local	MC6850						; UNIT
   613
   614 2DB2			.local	MC6850_RESET					; PROCEDURE
   615
   616 				; optimize OK (MC6850), line = 70
   617
   618 2DB2 A9 03			lda #$03
   619 2DB4 8D 00 D5			sta MC6850_CNTRREG
   620 2DB7			@exit
   621 					.ifdef @new
   622 					lda <@VarData
   623 					sta :ztmp
   624 					lda >@VarData
   625 					ldy #@VarDataSize-1
   626 					jmp @FreeMem
   627 					els
   628 2DB7 60				rts						; ret
   629 					eif
   630 				.endl
   631
   632 2DB8			.local	MC6850_INIT					; PROCEDURE
   633 2DB8 8D 49 3E			sta SETUP
   634
   635 				; optimize OK (MC6850), line = 75
   636
   637 2DBB 8D 00 D5			sta MC6850_CNTRREG
   638
   639 				; ------------------------------------------------------------
   640
   641 = 3E49			SETUP	= DATAORIGIN+$0141
   642
   643 = 3E49			@VarData	= SETUP
   644 = 0001			@VarDataSize	= 1
   645
   646 2DBE			@exit
   647 					.ifdef @new
   648 					lda <@VarData
   649 					sta :ztmp
   650 					lda >@VarData
   651 					ldy #@VarDataSize-1
   652 					jmp @FreeMem
   653 					els
   654 2DBE 60				rts						; ret
   655 					eif
   656 				.endl
   657
   658 2DBF			.local	MC6850_SEND					; PROCEDURE
   659 2DBF 8D 4A 3E			sta DATA
   660
   661 				; --- RepeatUntilProlog
   662 2DC2			l_0109
   663
   664 				; optimize OK (MC6850), line = 87
   665
   666 2DC2 AD 00 D5			lda MC6850_CNTRREG
   667 2DC5 29 02			and #$02
   668 2DC7 F0 F9			jeq l_0109
   669
   670 				; optimize OK (MC6850), line = 88
   671
   672 2DC9 AD 4A 3E			lda DATA
   673 2DCC 8D 01 D5			sta MC6850_BUFFER
   674
   675 				; ------------------------------------------------------------
   676
   677 = 3E4A			DATA	= DATAORIGIN+$0142
   678
   679 = 3E4A			@VarData	= DATA
   680 = 0001			@VarDataSize	= 1
   681
   682 2DCF			@exit
   683 					.ifdef @new
   684 					lda <@VarData
   685 					sta :ztmp
   686 					lda >@VarData
   687 					ldy #@VarDataSize-1
   688 					jmp @FreeMem
   689 					els
   690 2DCF 60				rts						; ret
   691 					eif
   692 				.endl
   693
   694 				; ------------------------------------------------------------
   695
   696 = D500			MC6850_BASE	= $D500
   697 = D500			ADDR_MC6850_CNTRREG	= $D500
   698 = D501			ADDR_MC6850_BUFFER	= $D501
   699 = D500			ADDR_MC6850_STATREG	= $D500
   700 = 0001			CR0	= $01
   701 = 0002			CR1	= $02
   702 = 0004			CR2	= $04
   703 = 0008			CR3	= $08
   704 = 0010			CR4	= $10
   705 = 0020			CR5	= $20
   706 = 0040			CR6	= $40
   707 = 0080			CR7	= $80
   708 = 0000			CD_1	= $00
   709 = 0001			CD_16	= $01
   710 = 0002			CD_64	= $02
   711 = 0003			MASTERRESET	= $03
   712 = 0000			WS_7BITS	= $00
   713 = 0010			WS_8BITS	= $10
   714 = 0000			WS_2BITSTOP	= $00
   715 = 0008			WS_1BITSTOP	= $08
   716 = 0000			WS_EVENPARITY	= $00
   717 = 0004			WS_ODDPARITY	= $04
   718 = 0000			TC_RTSLOW_NOTIRQ	= $00
   719 = 0020			TC_RTSLOW_TIRQ	= $20
   720 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   721 = 0060			TC_BREAKLEVEL	= $60
   722 = 0000			NOIRQ_RECEIVE	= $00
   723 = 0080			IRQ_RECEIVE	= $80
   724 = 0001			RDRF	= $01
   725 = 0002			TDRE	= $02
   726 = 0004			DCD	= $04
   727 = 0008			CTS	= $08
   728 = 0010			FE	= $10
   729 = 0020			OVRN	= $20
   730 = 0040			PE	= $40
   731 = 0080			IRQ	= $80
   732 = D500			MC6850_CNTRREG	= $D500
   733 = D501			MC6850_BUFFER	= $D501
   734 = D500			MC6850_STATREG	= $D500
   735 = 00FF			MC_BYTE	= $FF
   736
   737 				.endl							; UNIT MC6850
   738
   739 				; ------------------------------------------------------------
   740
   741 2DD0			.local	DOS						; UNIT
   742
   743 				; ------------------------------------------------------------
   744
   745 = D014			PALNTSC	= $D014
   746
   747 				.endl							; UNIT DOS
   748
   749 				; ------------------------------------------------------------
   750
   751 2DD0			.local	STRUTILS					; UNIT
   752
   753 				; ------------------------------------------------------------
   754
   755 				.endl							; UNIT STRUTILS
   756
   757 				; ------------------------------------------------------------
   758
   759 2DD0			.local	SYSUTILS					; UNIT
   760
   761 				; ------------------------------------------------------------
   762
   763 = 0001			FAREADONLY	= $01
   764 = 0002			FAHIDDEN	= $02
   765 = 0004			FASYSFILE	= $04
   766 = 0008			FAVOLUMEID	= $08
   767 = 0010			FADIRECTORY	= $10
   768 = 0020			FAARCHIVE	= $20
   769 = 003F			FAANYFILE	= $3F
   770
   771 				.endl							; UNIT SYSUTILS
   772
   773 				; ------------------------------------------------------------
   774
   775 2DD0			.local	MIDI_FIFO					; UNIT
   776
   777 2DD0			.local	FIFO_RESET					; PROCEDURE
   778
   779 				; optimize OK (MIDI_FIFO), line = 27
   780
   781 2DD0 A9 00			lda #$00
   782 2DD2 85 FD			sta FIFO_HEAD
   783
   784 				; optimize OK (MIDI_FIFO), line = 28
   785
   786 2DD4 85 FE			sta FIFO_TAIL
   787
   788 				; optimize OK (MIDI_FIFO), line = 29
   789
   790 2DD6 85 88			sta SYSTEM.FILLCHAR_00C5.A
   791 2DD8 A9 06			lda #$06
   792 2DDA 85 89			sta SYSTEM.FILLCHAR_00C5.A+1
   793 2DDC A9 00			lda #$00
   794 2DDE 85 8C			sta SYSTEM.FILLCHAR_00C5.COUNT
   795 2DE0 A9 01			lda #$01
   796 2DE2 85 8D			sta SYSTEM.FILLCHAR_00C5.COUNT+1
   797 2DE4 A9 00			lda #$00
   798 2DE6 85 84			sta SYSTEM.FILLCHAR_00C5.VALUE
   799 2DE8				.local +MAIN.SYSTEM.FILLCHAR_00C5
   800 2DE8				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_00C5.M@INLINE [Source: MIDICar Player.a65]
     4 2DE8 20 57 24			jsr @fill
Source: MIDICar Player.a65
   801 					.endl
   802 2DEB			@exit
   803 					.ifdef @new
   804 					lda <@VarData
   805 					sta :ztmp
   806 					lda >@VarData
   807 					ldy #@VarDataSize-1
   808 					jmp @FreeMem
   809 					els
   810 2DEB 60				rts						; ret
   811 					eif
   812 				.endl
   813
   814 2DEC			.local	FIFO_READBYTE					; PROCEDURE
   815
   816 				; optimize OK (MIDI_FIFO), line = 34
   817
   818 2DEC A4 FE			ldy FIFO_TAIL
   819 2DEE C4 FD			cpy FIFO_HEAD
   820 2DF0 F0 07			jeq l_017B
   821
   822 				; optimize OK (MIDI_FIFO), line = 36
   823
   824 2DF2 B9 00 06			lda adr.FIFO_BUF,y
   825 2DF5 85 FF			sta FIFO_BYTE
   826
   827 				; optimize FAIL (0, MIDI_FIFO), line = 37
   828
   829 2DF7 E6 FE			inc FIFO_TAIL
   830 2DF9			l_017B
   831 2DF9			@exit
   832 					.ifdef @new
   833 					lda <@VarData
   834 					sta :ztmp
   835 					lda >@VarData
   836 					ldy #@VarDataSize-1
   837 					jmp @FreeMem
   838 					els
   839 2DF9 60				rts						; ret
   840 					eif
   841 				.endl
   842
   843 2DFA			.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER | INLINE
   844
   845 					.MACRO m@INLINE
   846 				
   847 				; -------------------  ASM Block 00000070  -------------------
   848 				
   849 				  lda FIFO_Head
   850 				  clc
   851 				  adc #1
   852 				  cmp FIFO_Tail
   853 				  bne storeInFIFO
   854 				  rts
   855 				
   856 				storeInFIFO:
   857 				  ldy FIFO_Head
   858 				  lda FIFO_Byte
   859 				  sta FIFO_ADDR,y
   860 				  iny
   861 				  sty FIFO_Head
   862 				exitWrite:
   863 				
   864 					.ENDM
   865 2DFA			@exit
   866 				.endl
   867
   868 2DFA			.local	FIFO_SEND					; PROCEDURE
   869
   870 				; optimize OK (MIDI_FIFO), line = 65
   871
   872 2DFA AD 4B 3E			lda DATA
   873 2DFD 8D 4E 3E			sta P
   874 2E00 AD 4C 3E			lda DATA+1
   875 2E03 8D 4F 3E			sta P+1
   876
   877 				; --- WhileProlog
   878 2E06 4C 38 2E			jmp l_0197
   879 2E09			l_0198
   880
   881 				; optimize OK (MIDI_FIFO), line = 68
   882
   883 2E09 AC 4E 3E 84 82 AC + 	mwy P :bp2
   884 2E13 A0 00			ldy #$00
   885 2E15 B1 82			lda (:bp2),y
   886 2E17 85 FF			sta FIFO_BYTE
   887 2E19				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
   888 2E19				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 2E19 A5 FD		  lda FIFO_Head
     5 2E1B 18			  clc
     6 2E1C 69 01		  adc #1
     7 2E1E C5 FE		  cmp FIFO_Tail
     8 2E20 D0 01		  bne storeInFIFO
     9 2E22 60			  rts
    11 2E23			storeInFIFO:
    12 2E23 A4 FD		  ldy FIFO_Head
    13 2E25 A5 FF		  lda FIFO_Byte
    14 2E27 99 00 06		  sta FIFO_ADDR,y
    15 2E2A C8			  iny
    16 2E2B 84 FD		  sty FIFO_Head
    17 2E2D			exitWrite:
Source: MIDICar Player.a65
   889 					.endl
   890
   891 				; optimize FAIL (0, MIDI_FIFO), line = 69
   892
   893 2E2D EE 4E 3E			inc P
   894 2E30 D0 03			sne
   895 2E32 EE 4F 3E			inc P+1
   896 2E35 CE 4D 3E			dec LEN
   897 2E38			l_0197
   898
   899 				; optimize OK (MIDI_FIFO), line = 66
   900
   901 2E38 AD 4D 3E			lda LEN
   902 2E3B D0 CC			jne l_0198
   903
   904 				; ------------------------------------------------------------
   905
   906 = 3E4B			DATA	= DATAORIGIN+$0143
   907 = 3E4D			LEN	= DATAORIGIN+$0145
   908 = 3E4E			P	= DATAORIGIN+$0146
   909
   910 = 3E4B			@VarData	= DATA
   911 = 0005			@VarDataSize	= 5
   912
   913 2E3D			@exit
   914 					.ifdef @new
   915 					lda <@VarData
   916 					sta :ztmp
   917 					lda >@VarData
   918 					ldy #@VarDataSize-1
   919 					jmp @FreeMem
   920 					els
   921 2E3D 60				rts						; ret
   922 					eif
   923 				.endl
   924
   925 2E3E			.local	FIFO_FLUSH					; PROCEDURE
   926
   927 				; --- WhileProlog
   928 2E3E 4C 50 2E			jmp l_01B9
   929 2E41			l_01BA
   930
   931 				; optimize OK (MIDI_FIFO), line = 77
   932
   933 2E41 A4 FE			ldy FIFO_TAIL
   934 2E43 B9 00 06			lda adr.FIFO_BUF,y
   935 2E46 85 FF			sta FIFO_BYTE
   936
   937 				; optimize OK (MIDI_FIFO), line = 78
   938
   939 2E48 8D 1A D0			sta $D01A
   940
   941 				; optimize OK (MIDI_FIFO), line = 79
   942
   943 2E4B 20 BF 2D			jsr MC6850.MC6850_SEND
   944
   945 				; optimize FAIL (0, MIDI_FIFO), line = 80
   946
   947 2E4E E6 FE			inc FIFO_TAIL
   948 2E50			l_01B9
   949
   950 				; optimize OK (MIDI_FIFO), line = 75
   951
   952 2E50 A5 FE			lda FIFO_TAIL
   953 2E52 C5 FD			cmp FIFO_HEAD
   954 2E54 D0 EB			jne l_01BA
   955
   956 				; optimize OK (MIDI_FIFO), line = 82
   957
   958 2E56 A9 00			lda #$00
   959 2E58 8D 1A D0			sta $D01A
   960 2E5B			@exit
   961 					.ifdef @new
   962 					lda <@VarData
   963 					sta :ztmp
   964 					lda >@VarData
   965 					ldy #@VarDataSize-1
   966 					jmp @FreeMem
   967 					els
   968 2E5B 60				rts						; ret
   969 					eif
   970 				.endl
   971
   972 				; ------------------------------------------------------------
   973
   974 = 00FD			FIFO_HEAD	= $FD
   975 = 00FE			FIFO_TAIL	= $FE
   976 = 00FF			FIFO_BYTE	= $FF
   977 = 0600			FIFO_ADDR	= $0600
   978 = 0600			adr.FIFO_BUF	= $0600
   979 2E5C			.var FIFO_BUF	= adr.FIFO_BUF .word
   980
   981 = 2E5C 00 06		FIFO_BUF
   981 				.endl							; UNIT MIDI_FIFO
   982
   983 				; ------------------------------------------------------------
   984
   985 2E5E			.local	MIDFILES					; UNIT
   986
   987 2E5E			.local	WORDBI						; FUNCTION
   988
   989 				; optimize OK (MIDFILES), line = 81
   990
   991 2E5E A9 6D			lda <RESULT
   992 2E60 8D 6F 3E			sta RESULTPTR
   993 2E63 A9 3E			lda >RESULT
   994 2E65 8D 70 3E			sta RESULTPTR+1
   995
   996 				; optimize OK (MIDFILES), line = 82
   997
   998 2E68 AC 6B 3E 84 82 AC + 	mwy BI :bp2
   999 2E72 A0 01			ldy #$01
  1000 2E74 B1 82			lda (:bp2),y
  1001 2E76 AC 70 3E 84 81		mvy RESULTPTR+1 :bp+1
  1002 2E7B AC 6F 3E			ldy RESULTPTR
  1003 2E7E 91 80			sta (:bp),y
  1004 2E80 EE 6F 3E			inc RESULTPTR
  1005 2E83 D0 03			sne
  1006 2E85 EE 70 3E			inc RESULTPTR+1
  1007
  1008 				; optimize OK (MIDFILES), line = 83
  1009
  1010 2E88 A0 00			ldy #$00
  1011 2E8A B1 82			lda (:bp2),y
  1012 2E8C AC 70 3E 84 81		mvy RESULTPTR+1 :bp+1
  1013 2E91 AC 6F 3E			ldy RESULTPTR
  1014 2E94 91 80			sta (:bp),y
  1015 2E96			@exit
  1016
  1017 				; ------------------------------------------------------------
  1018
  1019 = 3E6B			BI	= DATAORIGIN+$0163
  1020 = 3E6D			RESULT	= DATAORIGIN+$0165
  1021 = 3E6F			RESULTPTR	= DATAORIGIN+$0167
  1022
  1023 = 3E6B			@VarData	= BI
  1024 = 0004			@VarDataSize	= 4
  1025
  1026 2E96 60				rts						; ret
  1027 				.endl
  1028
  1029 2E97			.local	LONGBI						; FUNCTION
  1030
  1031 				; optimize OK (MIDFILES), line = 92
  1032
  1033 2E97 A9 73			lda <RESULT
  1034 2E99 8D 77 3E			sta RESULTPTR
  1035 2E9C A9 3E			lda >RESULT
  1036 2E9E 8D 78 3E			sta RESULTPTR+1
  1037
  1038 				; optimize OK (MIDFILES), line = 93
  1039
  1040 2EA1 A9 03			lda #$03
  1041 2EA3 8D 79 3E			sta I
  1042
  1043 2EA6			l_020C
  1044 				; --- ForToDoCondition
  1045
  1046 				; optimize OK (MIDFILES), line = 95
  1047
  1048 2EA6 AC 71 3E 84 82 AC + 	mwy BI :bp2
  1049 2EB0 AC 79 3E			ldy I
  1050 2EB3 B1 82			lda (:bp2),y
  1051 2EB5 AC 78 3E 84 81		mvy RESULTPTR+1 :bp+1
  1052 2EBA AC 77 3E			ldy RESULTPTR
  1053 2EBD 91 80			sta (:bp),y
  1054
  1055 				; optimize FAIL (0, MIDFILES), line = 96
  1056
  1057 2EBF EE 77 3E			inc RESULTPTR
  1058 2EC2 D0 03			sne
  1059 2EC4 EE 78 3E			inc RESULTPTR+1
  1060
  1061 				; --- ForToDoEpilog
  1062 2EC7 CE 79 3E			dec I
  1063 2ECA 10 DA			jpl l_020C
  1064 2ECC			l_021A
  1065 2ECC			@exit
  1066
  1067 				; ------------------------------------------------------------
  1068
  1069 = 3E71			BI	= DATAORIGIN+$0169
  1070 = 3E73			RESULT	= DATAORIGIN+$016B
  1071 = 3E77			RESULTPTR	= DATAORIGIN+$016F
  1072 = 3E79			I	= DATAORIGIN+$0171
  1073
  1074 = 3E71			@VarData	= BI
  1075 = 0005			@VarDataSize	= 5
  1076
  1077 2ECC 60				rts						; ret
  1078 				.endl
  1079
  1080 2ECD			.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER
  1081
  1082 				; -------------------  ASM Block 00000071  -------------------
  1083
  1084 2ECD A5 E0		  lda _adr
  1085 2ECF F0 01		  beq check1Bound
  1086 2ED1 60			  rts
  1087
  1088 2ED2			check1Bound
  1089 2ED2 A5 E1		  lda _adr+1
  1090 2ED4 C9 9C		  cmp #$9c
  1091 2ED6 D0 05		  bne check2Bound
  1092
  1093 2ED8 A9 A0		  lda #$a0
  1094 2EDA 85 E1		  sta _adr+1
  1095 2EDC 60			  rts
  1096
  1097 2EDD			check2Bound:
  1098 2EDD C9 D0		  cmp #$d0
  1099 2EDF D0 05		  bne check3Bound
  1100
  1101 2EE1 A9 D8		  lda #$d8
  1102 2EE3 85 E1		  sta _adr+1
  1103 2EE5 60			  rts
  1104
  1105 2EE6			check3Bound:
  1106 2EE6 C9 E0		  cmp #$e0
  1107 2EE8 D0 05		  bne check4Bound
  1108
  1109 2EEA A9 E4		  lda #$e4
  1110 2EEC 85 E1		  sta _adr+1
  1111 2EEE 60			  rts
  1112
  1113 2EEF			check4bound
  1114 2EEF C9 FF		  cmp #$ff
  1115 2EF1 F0 01		  beq outOfMem
  1116 2EF3 60			  rts
  1117
  1118 2EF4			outOfMem:
  1119 2EF4 A9 02		  lda #2
  1120 2EF6 4C EB 3C		  jmp @halt
  1121
  1122 2EF9			@exit
  1123 					.ifdef @new
  1124 					lda <@VarData
  1125 					sta :ztmp
  1126 					lda >@VarData
  1127 					ldy #@VarDataSize-1
  1128 					jmp @FreeMem
  1129 					els
  1130 2EF9 60				rts						; ret
  1131 					eif
  1132 				.endl
  1133
  1134 2EFA			.local	LOADMID						; FUNCTION
  1135
  1136 2EFA 4C A5 2F			jmp l_0231
  1137
  1138 2EFD			.local	READWORDBI					; FUNCTION
  1139
  1140 				; BlockRead
  1141
  1142 				; optimize OK (MIDFILES), line = 142
  1143
  1144 2EFD AC F8 33 84 82 AC + 	mwy F :bp2
  1145 2F07 A0 06			ldy #s@file.buffer
  1146 2F09 AD E0 3A			lda BI
  1147 2F0C 91 82			sta (:bp2),y
  1148 2F0E C8				iny
  1149 2F0F AD E1 3A			lda BI+1
  1150 2F12 91 82			sta (:bp2),y
  1151 2F14 A0 08			ldy #s@file.nrecord
  1152 2F16 A9 02			lda #$02
  1153 2F18 91 82			sta (:bp2),y
  1154 2F1A C8				iny
  1155 2F1B A9 00			lda #$00
  1156 2F1D 91 82			sta (:bp2),y
  1157
  1158 2F1F 8A 48			txa:pha
  1159 2F21 38				sec
  1160 					@readfile F, #7
  1160 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1160 2F22 AC F9 33		 LDY F+1
  1160 2F25 AD F8 33		 LDA F
  1160 2F28 A2 07		 LDX# 7
  1160 2F2A 20 30 21		 JSR @READFILE
  1161 2F2D 68 AA			pla:tax
  1162
  1163 				; optimize OK (MIDFILES), line = 143
  1164
  1165 2F2F AD E0 3A			lda BI
  1166 2F32 8D 6B 3E			sta WORDBI.BI
  1167 2F35 AD E1 3A			lda BI+1
  1168 2F38 8D 6C 3E			sta WORDBI.BI+1
  1169 2F3B 20 5E 2E			jsr WORDBI
  1170 2F3E AD 6D 3E			lda WORDBI.RESULT
  1171 2F41 8D 9C 3E			sta RESULT
  1172 2F44 AD 6E 3E			lda WORDBI.RESULT+1
  1173 2F47 8D 9D 3E			sta RESULT+1
  1174 2F4A			@exit
  1175
  1176 				; ------------------------------------------------------------
  1177
  1178 = 3E9C			RESULT	= DATAORIGIN+$0194
  1179 2F4A 60				rts						; ret
  1180 				.endl
  1181
  1182 2F4B			.local	READLONGBI					; FUNCTION
  1183
  1184 				; BlockRead
  1185
  1186 				; optimize OK (MIDFILES), line = 148
  1187
  1188 2F4B AC F8 33 84 82 AC + 	mwy F :bp2
  1189 2F55 A0 06			ldy #s@file.buffer
  1190 2F57 AD E0 3A			lda BI
  1191 2F5A 91 82			sta (:bp2),y
  1192 2F5C C8				iny
  1193 2F5D AD E1 3A			lda BI+1
  1194 2F60 91 82			sta (:bp2),y
  1195 2F62 A0 08			ldy #s@file.nrecord
  1196 2F64 A9 04			lda #$04
  1197 2F66 91 82			sta (:bp2),y
  1198 2F68 C8				iny
  1199 2F69 A9 00			lda #$00
  1200 2F6B 91 82			sta (:bp2),y
  1201
  1202 2F6D 8A 48			txa:pha
  1203 2F6F 38				sec
  1204 					@readfile F, #7
  1204 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1204 2F70 AC F9 33		 LDY F+1
  1204 2F73 AD F8 33		 LDA F
  1204 2F76 A2 07		 LDX# 7
  1204 2F78 20 30 21		 JSR @READFILE
  1205 2F7B 68 AA			pla:tax
  1206
  1207 				; optimize OK (MIDFILES), line = 149
  1208
  1209 2F7D AD E0 3A			lda BI
  1210 2F80 8D 71 3E			sta LONGBI.BI
  1211 2F83 AD E1 3A			lda BI+1
  1212 2F86 8D 72 3E			sta LONGBI.BI+1
  1213 2F89 20 97 2E			jsr LONGBI
  1214 2F8C AD 73 3E			lda LONGBI.RESULT
  1215 2F8F 8D 9E 3E			sta RESULT
  1216 2F92 AD 74 3E			lda LONGBI.RESULT+1
  1217 2F95 8D 9F 3E			sta RESULT+1
  1218 2F98 AD 75 3E			lda LONGBI.RESULT+2
  1219 2F9B 8D A0 3E			sta RESULT+2
  1220 2F9E AD 76 3E			lda LONGBI.RESULT+3
  1221 2FA1 8D A1 3E			sta RESULT+3
  1222 2FA4			@exit
  1223
  1224 				; ------------------------------------------------------------
  1225
  1226 = 3E9E			RESULT	= DATAORIGIN+$0196
  1227 2FA4 60				rts						; ret
  1228 				.endl
  1229 2FA5			l_0231
  1230
  1231 				; optimize OK (MIDFILES), line = 153
  1232
  1233 2FA5 AD DE 3A			lda MIDTRACKS
  1234 2FA8 8D 9A 3E			sta NTRKREC
  1235 2FAB AD DF 3A			lda MIDTRACKS+1
  1236 2FAE 8D 9B 3E			sta NTRKREC+1
  1237
  1238 				; optimize FAIL ('@print', MIDFILES), line = 154
  1239
  1240 					@printSTRING #CODEORIGIN+$000D
  1240 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
  1240 2FB1 A0 20		 LDY> CODEORIGIN+$000D
  1240 2FB3 A9 0D		 LDA< CODEORIGIN+$000D
  1240 2FB5 20 98 2A		 JSR @PRINTSTRING
  1241 					@printSTRING FN
  1241 				 LDY FN+1\ LDA FN\ JSR @PRINTSTRING
  1241 2FB8 AC 7B 3E		 LDY FN+1
  1241 2FBB AD 7A 3E		 LDA FN
  1241 2FBE 20 98 2A		 JSR @PRINTSTRING
  1242 2FC1 20 84 2A			@printEOL
  1243 				; AssignFile
  1244
  1245 				; optimize OK (MIDFILES), line = 156
  1246
  1247 2FC4 AC F8 33 84 82 AC + 	mwy F :bp2
  1248 2FCE A0 00			ldy #s@file.pfname
  1249 2FD0 AD 7A 3E			lda FN
  1250 2FD3 91 82			sta (:bp2),y
  1251 2FD5 C8				iny
  1252 2FD6 AD 7B 3E			lda FN+1
  1253 2FD9 91 82			sta (:bp2),y
  1254 2FDB A0 05			ldy #s@file.status
  1255 2FDD A9 00			lda #$00
  1256 2FDF 91 82			sta (:bp2),y
  1257 				; Reset
  1258
  1259 				; optimize OK (MIDFILES), line = 157
  1260
  1261 2FE1 A0 02			ldy #s@file.record
  1262 2FE3 A9 01			lda #$01
  1263 2FE5 91 82			sta (:bp2),y
  1264 2FE7 C8				iny
  1265 2FE8 A9 00			lda #$00
  1266 2FEA 91 82			sta (:bp2),y
  1267
  1268 2FEC 8A 48			txa:pha
  1269 2FEE 18				clc
  1270 					@openfile F, MAIN.SYSTEM.FileMode
  1270 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  1270 2FEF AC F9 33		 LDY F+1
  1270 2FF2 AD F8 33		 LDA F
  1270 2FF5 AE 0D 3D		 LDX MAIN.SYSTEM.FILEMODE
  1270 2FF8 20 61 20		 JSR @OPENFILE
  1271 2FFB 68 AA			pla:tax
  1272
  1273 				; optimize OK (MIDFILES), line = 158
  1274
  1275 2FFD AD 0F 3D			lda SYSTEM.IORESULT
  1276 3000 10 2B			jpl l_0284
  1277
  1278 				; optimize FAIL ('@print', MIDFILES), line = 160
  1279
  1280 					@print #$9B
  1280 				 LDY# $9B\ JSR @PRINT
  1280 3002 A0 9B		 LDY# $9B
  1280 3004 20 89 2A		 JSR @PRINT
  1281 					@printSTRING #CODEORIGIN+$0019
  1281 				 LDY> CODEORIGIN+$0019\ LDA< CODEORIGIN+$0019\ JSR @PRINTSTRING
  1281 3007 A0 20		 LDY> CODEORIGIN+$0019
  1281 3009 A9 19		 LDA< CODEORIGIN+$0019
  1281 300B 20 98 2A		 JSR @PRINTSTRING
  1282 300E AD 0F 3D			lda SYSTEM.IORESULT
  1283 3011 20 CF 2A			jsr @printBYTE._a
  1284 3014 20 84 2A			@printEOL
  1285 				; CloseFile
  1286
  1287 3017 8A 48			txa:pha
  1288 3019 18				clc
  1289 					@closefile F
  1289 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1289 301A AC F9 33		 LDY F+1
  1289 301D AD F8 33		 LDA F
  1289 3020 20 FD 20		 JSR @CLOSEFILE
  1290 3023 68 AA			pla:tax
  1291
  1292 				; optimize OK (MIDFILES), line = 162
  1293
  1294 3025 A9 00			lda #$00
  1295 3027 8D 7C 3E			sta RESULT
  1296 302A 4C F7 33			jmp @exit					; exit
  1297 302D			l_0284
  1298
  1299 				; optimize OK (MIDFILES), line = 164
  1300
  1301 302D A9 00			lda #$00
  1302 302F 8D 89 3E			sta TRACKCOUNT
  1303 3032 8D 8A 3E			sta TRACKCOUNT+1
  1304 3035 A9 FF			lda #$FF
  1305 3037 8D 55 3E			sta NTRACKS
  1306 303A A9 00			lda #$00
  1307 303C 8D 56 3E			sta NTRACKS+1
  1308
  1309 				; --- WhileProlog
  1310 303F 4C 90 33			jmp l_02A0
  1311 3042			l_02A1
  1312 				; BlockRead
  1313
  1314 				; optimize OK (MIDFILES), line = 167
  1315
  1316 3042 AC F8 33 84 82 AC + 	mwy F :bp2
  1317 304C A0 06			ldy #s@file.buffer
  1318 304E A9 8B			lda <CHUNKTAG
  1319 3050 91 82			sta (:bp2),y
  1320 3052 C8				iny
  1321 3053 A9 3E			lda >CHUNKTAG
  1322 3055 91 82			sta (:bp2),y
  1323 3057 A0 08			ldy #s@file.nrecord
  1324 3059 A9 04			lda #$04
  1325 305B 91 82			sta (:bp2),y
  1326 305D C8				iny
  1327 305E A9 00			lda #$00
  1328 3060 91 82			sta (:bp2),y
  1329 3062 A0 0A			ldy #s@file.numread
  1330 3064 A9 8F			lda <V
  1331 3066 91 82			sta (:bp2),y
  1332 3068 C8				iny
  1333 3069 A9 3E			lda >V
  1334 306B 91 82			sta (:bp2),y
  1335
  1336 306D 8A 48			txa:pha
  1337 306F 18				clc
  1338 					@readfile F, #135
  1338 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1338 3070 AC F9 33		 LDY F+1
  1338 3073 AD F8 33		 LDA F
  1338 3076 A2 87		 LDX# 135
  1338 3078 20 30 21		 JSR @READFILE
  1339 307B 68 AA			pla:tax
  1340
  1341 				; optimize OK (MIDFILES), line = 168
  1342
  1343 307D AD 90 3E			lda V+1
  1344 3080 D0 05			bne @+
  1345 3082 AD 8F 3E			lda V
  1346 3085 C9 04			cmp #$04
  1347 				@
  1348 3087 F0 03			jeq l_02BE
  1349 3089 4C E4 33			jmp b_02A1					; break
  1350 308C			l_02BE
  1351
  1352 				; optimize FAIL ('READLONGBI', MIDFILES), line = 169
  1353
  1354 308C 20 4B 2F			jsr READLONGBI
  1355 308F AD 9E 3E			lda READLONGBI.RESULT
  1356 3092 8D 95 3E			sta LEN
  1357 3095 AD 9F 3E			lda READLONGBI.RESULT+1
  1358 3098 8D 96 3E			sta LEN+1
  1359 309B AD A0 3E			lda READLONGBI.RESULT+2
  1360 309E 8D 97 3E			sta LEN+2
  1361 30A1 AD A1 3E			lda READLONGBI.RESULT+3
  1362 30A4 8D 98 3E			sta LEN+3
  1363
  1364 				; optimize OK (MIDFILES), line = 170
  1365
  1366 30A7 AD 8E 3E			lda CHUNKTAG+3
  1367 30AA 49 64			eor #$64
  1368 30AC F0 03 4C 4D 31		jne l_02D5
  1369 30B1 AD 8D 3E			lda CHUNKTAG+2
  1370 30B4 49 68			eor #$68
  1371 30B6 F0 03 4C 4D 31		jne l_02D5
  1372 30BB AD 8C 3E			lda CHUNKTAG+1
  1373 30BE 49 54			eor #$54
  1374 30C0 F0 03 4C 4D 31		jne l_02D5
  1375 30C5 AD 8B 3E			lda CHUNKTAG
  1376 30C8 49 4D			eor #$4D
  1377 30CA F0 03 4C 4D 31		jne l_02D5
  1378
  1379 				; optimize FAIL ('READWORDBI', MIDFILES), line = 172
  1380
  1381 30CF 20 FD 2E			jsr READWORDBI
  1382 30D2 AD 9C 3E			lda READWORDBI.RESULT
  1383 30D5 8D 53 3E			sta FORMAT
  1384 30D8 AD 9D 3E			lda READWORDBI.RESULT+1
  1385 30DB 8D 54 3E			sta FORMAT+1
  1386
  1387 				; optimize FAIL ('READWORDBI', MIDFILES), line = 173
  1388
  1389 30DE 20 FD 2E			jsr READWORDBI
  1390 30E1 AD 9C 3E			lda READWORDBI.RESULT
  1391 30E4 8D 55 3E			sta NTRACKS
  1392 30E7 AD 9D 3E			lda READWORDBI.RESULT+1
  1393 30EA 8D 56 3E			sta NTRACKS+1
  1394
  1395 				; optimize FAIL ('READWORDBI', MIDFILES), line = 178
  1396
  1397 30ED 20 FD 2E			jsr READWORDBI
  1398 30F0 AD 9C 3E			lda READWORDBI.RESULT
  1399 30F3 8D 8F 3E			sta V
  1400 30F6 AD 9D 3E			lda READWORDBI.RESULT+1
  1401 30F9 8D 90 3E			sta V+1
  1402
  1403 				; optimize OK (MIDFILES), line = 179
  1404
  1405 30FC 10 3E			jpl l_02F7
  1406
  1407 				; optimize OK (MIDFILES), line = 181
  1408
  1409 30FE 29 7F			and #$7F
  1410 3100 8D 57 3E			sta FPS
  1411
  1412 				; optimize OK (MIDFILES), line = 182
  1413
  1414 3103 8D A2 3E			sta @CASETMP_0005
  1415 3106 C9 E8			cmp #$E8
  1416 3108 D0 08			jne l_0310
  1417 				@
  1418
  1419 				; optimize OK (MIDFILES), line = 183
  1420
  1421 310A A9 18			lda #$18
  1422 310C 8D 57 3E			sta FPS
  1423
  1424 310F 4C 33 31			jmp a_0005
  1425 3112			l_0310
  1426 3112 C9 E7			cmp #$E7
  1427 3114 D0 08			jne l_031D
  1428 				@
  1429
  1430 				; optimize OK (MIDFILES), line = 184
  1431
  1432 3116 A9 19			lda #$19
  1433 3118 8D 57 3E			sta FPS
  1434
  1435 311B 4C 33 31			jmp a_0005
  1436 311E			l_031D
  1437 311E C9 E3			cmp #$E3
  1438 3120 D0 08			jne l_032A
  1439 				@
  1440
  1441 				; optimize OK (MIDFILES), line = 185
  1442
  1443 3122 A9 1D			lda #$1D
  1444 3124 8D 57 3E			sta FPS
  1445
  1446 3127 4C 33 31			jmp a_0005
  1447 312A			l_032A
  1448 312A C9 E2			cmp #$E2
  1449 312C D0 05			jne l_0337
  1450 				@
  1451
  1452 				; optimize OK (MIDFILES), line = 186
  1453
  1454 312E A9 1E			lda #$1E
  1455 3130 8D 57 3E			sta FPS
  1456
  1457 3133			l_0337
  1458 3133			a_0005
  1459
  1460 				; optimize OK (MIDFILES), line = 188
  1461
  1462 3133 AD 8F 3E			lda V
  1463 3136 8D 58 3E			sta FSD
  1464 3139 4C 4A 31			jmp l_0355
  1465 313C			l_02F7
  1466
  1467 				; optimize OK (MIDFILES), line = 196
  1468
  1469 313C AD 8F 3E			lda V
  1470 313F 8D 59 3E			sta TICKDIV
  1471 3142 AD 90 3E			lda V+1
  1472 3145 29 7F			and #$7F
  1473 3147 8D 5A 3E			sta TICKDIV+1
  1474 314A			l_0355
  1475 314A 4C 8B 33			jmp l_0367
  1476 314D			l_02D5
  1477
  1478 				; optimize OK (MIDFILES), line = 202
  1479
  1480 314D AD 8E 3E			lda CHUNKTAG+3
  1481 3150 49 6B			eor #$6B
  1482 3152 F0 03 4C 8B 33		jne l_0377
  1483 3157 AD 8D 3E			lda CHUNKTAG+2
  1484 315A 49 72			eor #$72
  1485 315C F0 03 4C 8B 33		jne l_0377
  1486 3161 AD 8C 3E			lda CHUNKTAG+1
  1487 3164 49 54			eor #$54
  1488 3166 F0 03 4C 8B 33		jne l_0377
  1489 316B AD 8B 3E			lda CHUNKTAG
  1490 316E 49 4D			eor #$4D
  1491 3170 F0 03 4C 8B 33		jne l_0377
  1492
  1493 				; optimize FAIL (0, MIDFILES), line = 204
  1494
  1495 3175 EE 89 3E			inc TRACKCOUNT
  1496 3178 D0 03			sne
  1497 317A EE 8A 3E			inc TRACKCOUNT+1
  1498
  1499 				; optimize FAIL ('@print', MIDFILES), line = 205
  1500
  1501 					@printSTRING #CODEORIGIN+$0026
  1501 				 LDY> CODEORIGIN+$0026\ LDA< CODEORIGIN+$0026\ JSR @PRINTSTRING
  1501 317D A0 20		 LDY> CODEORIGIN+$0026
  1501 317F A9 26		 LDA< CODEORIGIN+$0026
  1501 3181 20 98 2A		 JSR @PRINTSTRING
  1502 3184 AD 89 3E			lda TRACKCOUNT
  1503 3187 AC 8A 3E			ldy TRACKCOUNT+1
  1504 318A 20 E0 2A			jsr @printWORD._ay
  1505 					@print #$2F
  1505 				 LDY# $2F\ JSR @PRINT
  1505 318D A0 2F		 LDY# $2F
  1505 318F 20 89 2A		 JSR @PRINT
  1506 3192 AD 55 3E			lda NTRACKS
  1507 3195 AC 56 3E			ldy NTRACKS+1
  1508 3198 20 E0 2A			jsr @printWORD._ay
  1509 					@printSTRING #CODEORIGIN+$002F
  1509 				 LDY> CODEORIGIN+$002F\ LDA< CODEORIGIN+$002F\ JSR @PRINTSTRING
  1509 319B A0 20		 LDY> CODEORIGIN+$002F
  1509 319D A9 2F		 LDA< CODEORIGIN+$002F
  1509 319F 20 98 2A		 JSR @PRINTSTRING
  1510
  1511 				; optimize OK (MIDFILES), line = 207
  1512
  1513 31A2 AC 9A 3E 84 82 AC + 	mwy NTRKREC :bp2
  1514 31AC A0 00			ldy #$00
  1515 31AE AD 50 3E			lda MIDDATA
  1516 31B1 91 82			sta (:bp2),y
  1517 31B3 C8				iny
  1518 31B4 AD 51 3E			lda MIDDATA+1
  1519 31B7 91 82			sta (:bp2),y
  1520
  1521 				; optimize OK (MIDFILES), line = 208
  1522
  1523 31B9 C8				iny
  1524 31BA A9 00			lda #$00
  1525 31BC 91 82			sta (:bp2),y
  1526 31BE C8				iny
  1527 31BF 91 82			sta (:bp2),y
  1528 31C1 C8				iny
  1529 31C2 91 82			sta (:bp2),y
  1530 31C4 C8				iny
  1531 31C5 91 82			sta (:bp2),y
  1532
  1533 				; optimize OK (MIDFILES), line = 209
  1534
  1535 31C7 C8				iny
  1536 31C8 91 82			sta (:bp2),y
  1537
  1538 				; --- WhileProlog
  1539 31CA 4C 6A 33			jmp l_039F
  1540 31CD			l_03A0
  1541
  1542 				; optimize OK (MIDFILES), line = 213
  1543
  1544 31CD AD 50 3E			lda MIDDATA
  1545 31D0 85 E0			sta _ADR
  1546 31D2 AD 51 3E			lda MIDDATA+1
  1547 31D5 85 E1			sta _ADR+1
  1548
  1549 				; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 214
  1550
  1551 31D7 20 CD 2E			jsr MEMBOUNDCHECK
  1552
  1553 				; optimize OK (MIDFILES), line = 215
  1554
  1555 31DA A5 E0			lda _ADR
  1556 31DC 8D 50 3E			sta MIDDATA
  1557 31DF A5 E1			lda _ADR+1
  1558 31E1 8D 51 3E			sta MIDDATA+1
  1559
  1560 				; optimize OK (MIDFILES), line = 216
  1561
  1562 31E4				.LOCAL
  1563 31E4 AD 98 3E			lda LEN+3
  1564 31E7 38 E9 00			sub #$00
  1565 31EA D0 1F			bne L4
  1566 31EC AD 97 3E			lda LEN+2
  1567 31EF C9 00			cmp #$00
  1568 31F1 D0 0C			bne L1
  1569 31F3 AD 96 3E			lda LEN+1
  1570 31F6 C9 00			cmp #$00
  1571 31F8 D0 05			bne L1
  1572 31FA AD 95 3E			lda LEN
  1573 31FD C9 80			cmp #$80
  1574 31FF F0 10		L1	beq L5
  1575 3201 B0 04			bcs L3
  1576 3203 A9 FF			lda #$FF
  1577 3205 D0 0A			bne L5
  1578 3207 A9 01		L3	lda #$01
  1579 3209 D0 06			bne L5
  1580 320B 50 04		L4	bvc L5
  1581 320D 49 FF			eor #$FF
  1582 320F 09 01			ora #$01
  1583 3211			L5
  1584 					.ENDL
  1585 3211 30 0A			jmi l_03BB
  1586 3213 F0 08			jeq l_03BB
  1587 3215 A9 80			lda #$80
  1588 3217 8D 99 3E			sta LOADSIZE
  1589 321A 4C 23 32			jmp l_03C9
  1590 321D			l_03BB
  1591 321D AD 95 3E			lda LEN
  1592 3220 8D 99 3E			sta LOADSIZE
  1593 3223			l_03C9
  1594
  1595 				; optimize OK (MIDFILES), line = 217
  1596
  1597 3223 A5 E0			lda _ADR
  1598 3225 18 6D 99 3E			add LOADSIZE
  1599 3229 8D 93 3E			sta ENDADR
  1600 322C A5 E1			lda _ADR+1
  1601 322E 69 00			adc #$00
  1602 3230 8D 94 3E			sta ENDADR+1
  1603
  1604 				; optimize OK (MIDFILES), line = 218
  1605
  1606 3233 C9 9C			cmp #$9C
  1607 3235 90 20			jcc l_03F4
  1608 3237 D0 05			bne @+
  1609 3239 AD 93 3E			lda ENDADR
  1610 323C 90 19			jcc l_03F4
  1611 				@
  1612 323E AD 94 3E			lda ENDADR+1
  1613 3241 C9 A0			cmp #$A0
  1614 3243 D0 05			bne @+
  1615 3245 AD 93 3E			lda ENDADR
  1616 3248 C9 00			cmp #$00
  1617 				@
  1618 324A B0 0B			jcs l_03F4
  1619
  1620 				; optimize OK (MIDFILES), line = 219
  1621
  1622 324C A9 00			lda #$00
  1623 324E 38 E5 E0			sub _ADR
  1624 3251 8D 99 3E			sta LOADSIZE
  1625 3254 4C BB 32			jmp l_0407
  1626 3257			l_03F4
  1627
  1628 				; optimize OK (MIDFILES), line = 220
  1629
  1630 3257 AD 94 3E			lda ENDADR+1
  1631 325A C9 D0			cmp #$D0
  1632 325C 90 20			jcc l_0423
  1633 325E D0 05			bne @+
  1634 3260 AD 93 3E			lda ENDADR
  1635 3263 90 19			jcc l_0423
  1636 				@
  1637 3265 AD 94 3E			lda ENDADR+1
  1638 3268 C9 D8			cmp #$D8
  1639 326A D0 05			bne @+
  1640 326C AD 93 3E			lda ENDADR
  1641 326F C9 00			cmp #$00
  1642 				@
  1643 3271 B0 0B			jcs l_0423
  1644
  1645 				; optimize OK (MIDFILES), line = 221
  1646
  1647 3273 A9 00			lda #$00
  1648 3275 38 E5 E0			sub _ADR
  1649 3278 8D 99 3E			sta LOADSIZE
  1650 327B 4C BB 32			jmp l_0436
  1651 327E			l_0423
  1652
  1653 				; optimize OK (MIDFILES), line = 222
  1654
  1655 327E AD 94 3E			lda ENDADR+1
  1656 3281 C9 E0			cmp #$E0
  1657 3283 90 20			jcc l_0452
  1658 3285 D0 05			bne @+
  1659 3287 AD 93 3E			lda ENDADR
  1660 328A 90 19			jcc l_0452
  1661 				@
  1662 328C AD 94 3E			lda ENDADR+1
  1663 328F C9 E4			cmp #$E4
  1664 3291 D0 05			bne @+
  1665 3293 AD 93 3E			lda ENDADR
  1666 3296 C9 00			cmp #$00
  1667 				@
  1668 3298 B0 0B			jcs l_0452
  1669
  1670 				; optimize OK (MIDFILES), line = 223
  1671
  1672 329A A9 00			lda #$00
  1673 329C 38 E5 E0			sub _ADR
  1674 329F 8D 99 3E			sta LOADSIZE
  1675 32A2 4C BB 32			jmp l_0465
  1676 32A5			l_0452
  1677
  1678 				; optimize OK (MIDFILES), line = 224
  1679
  1680 32A5 AD 94 3E			lda ENDADR+1
  1681 32A8 C9 FF			cmp #$FF
  1682 32AA 90 0F			jcc l_0476
  1683 32AC D0 05			bne @+
  1684 32AE AD 93 3E			lda ENDADR
  1685 32B1 90 08			jcc l_0476
  1686 				@
  1687
  1688 				; optimize OK (MIDFILES), line = 225
  1689
  1690 32B3 A9 00			lda #$00
  1691 32B5 38 E5 E0			sub _ADR
  1692 32B8 8D 99 3E			sta LOADSIZE
  1693 32BB			l_0476
  1694 32BB			l_0465
  1695 32BB			l_0436
  1696 32BB			l_0407
  1697
  1698 				; optimize OK (MIDFILES), line = 226
  1699
  1700 32BB AD 99 3E			lda LOADSIZE
  1701 32BE D0 03			jne l_0494
  1702 32C0 4C 6A 33			jmp c_03A0					; continue
  1703 32C3			l_0494
  1704 				; BlockRead
  1705
  1706 				; optimize OK (MIDFILES), line = 228
  1707
  1708 32C3 AC F8 33 84 82 AC + 	mwy F :bp2
  1709 32CD A0 06			ldy #s@file.buffer
  1710 32CF AD E2 3A			lda RBUF
  1711 32D2 91 82			sta (:bp2),y
  1712 32D4 C8				iny
  1713 32D5 AD E3 3A			lda RBUF+1
  1714 32D8 91 82			sta (:bp2),y
  1715 32DA A0 08			ldy #s@file.nrecord
  1716 32DC AD 99 3E			lda LOADSIZE
  1717 32DF 91 82			sta (:bp2),y
  1718 32E1 C8				iny
  1719 32E2 A9 00			lda #$00
  1720 32E4 91 82			sta (:bp2),y
  1721 32E6 A0 0A			ldy #s@file.numread
  1722 32E8 A9 8F			lda <V
  1723 32EA 91 82			sta (:bp2),y
  1724 32EC C8				iny
  1725 32ED A9 3E			lda >V
  1726 32EF 91 82			sta (:bp2),y
  1727
  1728 32F1 8A 48			txa:pha
  1729 32F3 18				clc
  1730 					@readfile F, #135
  1730 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1730 32F4 AC F9 33		 LDY F+1
  1730 32F7 AD F8 33		 LDA F
  1730 32FA A2 87		 LDX# 135
  1730 32FC 20 30 21		 JSR @READFILE
  1731 32FF 68 AA			pla:tax
  1732
  1733 				; optimize OK (MIDFILES), line = 229
  1734
  1735 3301 AD 90 3E			lda V+1
  1736 3304 D0 06			bne @+
  1737 3306 AD 8F 3E			lda V
  1738 3309 CD 99 3E			cmp LOADSIZE
  1739 				@
  1740 330C F0 08			jeq l_04B9
  1741 330E A9 00			lda #$00
  1742 3310 8D 7C 3E			sta RESULT
  1743 3313 4C F7 33			jmp @exit					; exit
  1744 3316			l_04B9
  1745
  1746 				; optimize OK (MIDFILES), line = 231
  1747
  1748 3316 A9 00			lda #$00
  1749 3318 85 88			sta SYSTEM.MOVE_00C6.SOURCE
  1750 331A A9 06			lda #$06
  1751 331C 85 89			sta SYSTEM.MOVE_00C6.SOURCE+1
  1752 331E AD 50 3E			lda MIDDATA
  1753 3321 85 8C			sta SYSTEM.MOVE_00C6.DEST
  1754 3323 AD 51 3E			lda MIDDATA+1
  1755 3326 85 8D			sta SYSTEM.MOVE_00C6.DEST+1
  1756 3328 AD 99 3E			lda LOADSIZE
  1757 332B 85 84			sta SYSTEM.MOVE_00C6.COUNT
  1758 332D A9 00			lda #$00
  1759 332F 85 85			sta SYSTEM.MOVE_00C6.COUNT+1
  1760 3331				.local +MAIN.SYSTEM.MOVE_00C6
  1761 3331				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00C6.M@INLINE [Source: MIDICar Player.a65]
     4 3331 20 02 24			jsr @move
Source: MIDICar Player.a65
  1762 					.endl
  1763
  1764 				; optimize OK (MIDFILES), line = 232
  1765
  1766 3334 AD 50 3E			lda MIDDATA
  1767 3337 18 6D 8F 3E			add V
  1768 333B 8D 50 3E			sta MIDDATA
  1769 333E AD 51 3E			lda MIDDATA+1
  1770 3341 6D 90 3E			adc V+1
  1771 3344 8D 51 3E			sta MIDDATA+1
  1772
  1773 				; optimize OK (MIDFILES), line = 233
  1774
  1775 3347 AD 95 3E			lda LEN
  1776 334A 38 ED 8F 3E			sub V
  1777 334E 8D 95 3E			sta LEN
  1778 3351 AD 96 3E			lda LEN+1
  1779 3354 ED 90 3E			sbc V+1
  1780 3357 8D 96 3E			sta LEN+1
  1781 335A AD 97 3E			lda LEN+2
  1782 335D E9 00			sbc #$00
  1783 335F 8D 97 3E			sta LEN+2
  1784 3362 AD 98 3E			lda LEN+3
  1785 3365 E9 00			sbc #$00
  1786 3367 8D 98 3E			sta LEN+3
  1787 336A			c_03A0
  1788 336A			l_039F
  1789
  1790 				; optimize OK (MIDFILES), line = 211
  1791
  1792 336A AD 98 3E			lda LEN+3
  1793 336D 30 0E			bmi @+
  1794 336F 0D 97 3E			ora LEN+2
  1795 3372 0D 96 3E			ora LEN+1
  1796 3375 0D 95 3E			ora LEN
  1797 3378 F0 03 4C CD 31		jne l_03A0
  1798 				@
  1799
  1800 				; optimize OK (MIDFILES), line = 236
  1801
  1802 337D AD 9A 3E			lda NTRKREC
  1803 3380 18 69 08			add #$08
  1804 3383 8D 9A 3E			sta NTRKREC
  1805 3386 90 03			scc
  1806 3388 EE 9B 3E			inc NTRKREC+1
  1807 338B			l_0377
  1808 338B			l_0367
  1809
  1810 				; optimize FAIL ('@print', MIDFILES), line = 238
  1811
  1812 					@print #$9C
  1812 				 LDY# $9C\ JSR @PRINT
  1812 338B A0 9C		 LDY# $9C
  1812 338D 20 89 2A		 JSR @PRINT
  1813 3390			l_02A0
  1814
  1815 				; optimize FAIL (1, MIDFILES), line = 165
  1816
  1817 3390 E8				inx
  1818 3391 A0 01			ldy #1
  1819 3393 AD 0F 3D			lda SYSTEM.IORESULT
  1820 3396 C9 80			cmp #$80
  1821 3398 90 01			bcc @+
  1822 339A 88				dey
  1823 				@
  1824 339B 94 94			sty :STACKORIGIN,x
  1825 339D AD F8 33			lda F
  1826 33A0 8D 1F 3D			sta SYSTEM.EOF.F
  1827 33A3 AD F9 33			lda F+1
  1828 33A6 8D 20 3D			sta SYSTEM.EOF.F+1
  1829 33A9 20 E1 2C			jsr SYSTEM.EOF
  1830 33AC E8				inx
  1831 33AD AD 21 3D 95 94		mva SYSTEM.EOF.RESULT :STACKORIGIN,x
  1832 33B2 20 52 23			jsr notBOOLEAN
  1833 33B5 20 8D 23			jsr andAL_CL
  1834 33B8 AD 89 3E 95 94		mva TRACKCOUNT :STACKORIGIN,x
  1835 33BD AD 8A 3E 95 A4		mva TRACKCOUNT+1 :STACKORIGIN+STACKWIDTH,x
  1836 33C2 E8				inx
  1837 33C3 AD 55 3E 95 94		mva NTRACKS :STACKORIGIN,x
  1838 33C8 AD 56 3E 95 A4		mva NTRACKS+1 :STACKORIGIN+STACKWIDTH,x
  1839 33CD A0 01			ldy #1
  1840 33CF 20 47 23			jsr cmpEAX_ECX.AX_CX
  1841 33D2 90 01			bcc @+
  1842 33D4 88				dey
  1843 				@
  1844 33D5 94 93			sty :STACKORIGIN-1,x
  1845 33D7 CA				dex
  1846 33D8 20 8D 23			jsr andAL_CL
  1847 33DB CA				dex
  1848 33DC CA				dex
  1849 33DD B5 95			lda :STACKORIGIN+1,x
  1850 33DF F0 03 4C 42 30		jne l_02A1
  1851 33E4			b_02A1
  1852 				; CloseFile
  1853
  1854 33E4 8A 48			txa:pha
  1855 33E6 18				clc
  1856 					@closefile F
  1856 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1856 33E7 AC F9 33		 LDY F+1
  1856 33EA AD F8 33		 LDA F
  1856 33ED 20 FD 20		 JSR @CLOSEFILE
  1857 33F0 68 AA			pla:tax
  1858
  1859 				; optimize OK (MIDFILES), line = 241
  1860
  1861 33F2 A9 01			lda #$01
  1862 33F4 8D 7C 3E			sta RESULT
  1863 33F7			@exit
  1864
  1865 				; ------------------------------------------------------------
  1866
  1867 = 3E7A			FN	= DATAORIGIN+$0172
  1868 = 3E7C			RESULT	= DATAORIGIN+$0174
  1869 33F7			.var F	= DATAORIGIN+$0175 .word
  1870 = 3E89			TRACKCOUNT	= DATAORIGIN+$0181
  1871 = 3E8B			CHUNKTAG	= DATAORIGIN+$0183
  1872 = 3E8F			V	= DATAORIGIN+$0187
  1873 = 3E91			TOP	= DATAORIGIN+$0189
  1874 = 3E93			ENDADR	= DATAORIGIN+$018B
  1875 = 3E95			LEN	= DATAORIGIN+$018D
  1876 = 3E99			LOADSIZE	= DATAORIGIN+$0191
  1877 = 3E9A			NTRKREC	= DATAORIGIN+$0192
  1878 = 3D08			NTRKREC.PTR	= DATAORIGIN+$0000
  1879 = 3D0A			NTRKREC.TRACKTIME	= DATAORIGIN+$0002
  1880 = 3D0E			NTRKREC.SKIPDELTA	= DATAORIGIN+$0006
  1881 = 3D0F			NTRKREC._EVENT	= DATAORIGIN+$0007
  1882 = 3EA2			@CASETMP_0005	= DATAORIGIN+$019A
  1883
  1884 = 3E7A			@VarData	= FN
  1885 = 0022			@VarDataSize	= 34
  1886
  1887 33F7 60				rts						; ret
  1888 = 33F8 7D 3E		F
  1888 				.endl
  1889
  1890 33FA			.local	PROCESSTRACK					; FUNCTION
  1891
  1892 33FA 4C 70 35			jmp l_0501
  1893
  1894 33FD			.local	READB						; PROCEDURE | INLINE
  1895
  1896 					.MACRO m@INLINE
  1897 				
  1898 				; optimize OK (MIDFILES), line = 253
  1899 				
  1900 					ldy #$00
  1901 					lda (_PTR),y
  1902 					sta _TMP
  1903 				
  1904 				; optimize FAIL (0, MIDFILES), line = 254
  1905 				
  1906 					inc _ADR
  1907 					sne
  1908 					inc _ADR+1
  1909 				
  1910 				; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 255
  1911 				
  1912 					jsr MEMBOUNDCHECK
  1913 					.ENDM
  1914 33FD			@exit
  1915 				.endl
  1916
  1917 33FD			.local	READB2FB					; PROCEDURE | INLINE
  1918
  1919 					.MACRO m@INLINE
  1920 				
  1921 				; optimize OK (MIDFILES), line = 261
  1922 				
  1923 					ldy #$00
  1924 					lda (_PTR),y
  1925 					sta MIDI_FIFO.FIFO_BYTE
  1926 				
  1927 				; optimize FAIL (0, MIDFILES), line = 262
  1928 				
  1929 					inc _ADR
  1930 					sne
  1931 					inc _ADR+1
  1932 				
  1933 				; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 263
  1934 				
  1935 					jsr MEMBOUNDCHECK
  1936 					.ENDM
  1937 33FD			@exit
  1938 				.endl
  1939
  1940 33FD			.local	GETDATA						; PROCEDURE
  1941
  1942 				; --- WhileProlog
  1943 33FD 4C 22 34			jmp l_0524
  1944 3400			l_0525
  1945
  1946 				; optimize OK (MIDFILES), line = 278
  1947
  1948 3400 A0 00			ldy #$00
  1949 3402 B1 E0			lda (_PTR),y
  1950 3404 AC B2 3E 84 81		mvy P+1 :bp+1
  1951 3409 AC B1 3E			ldy P
  1952 340C 91 80			sta (:bp),y
  1953
  1954 				; optimize FAIL (0, MIDFILES), line = 279
  1955
  1956 340E E6 E0			inc _ADR
  1957 3410 D0 02			sne
  1958 3412 E6 E1			inc _ADR+1
  1959
  1960 				; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 280
  1961
  1962 3414 20 CD 2E			jsr MEMBOUNDCHECK
  1963
  1964 				; optimize FAIL (0, MIDFILES), line = 281
  1965
  1966 3417 EE B1 3E			inc P
  1967 341A D0 03			sne
  1968 341C EE B2 3E			inc P+1
  1969
  1970 				; optimize FAIL (0, MIDFILES), line = 282
  1971
  1972 341F CE B3 3E			dec SIZE
  1973 3422			l_0524
  1974
  1975 				; optimize OK (MIDFILES), line = 276
  1976
  1977 3422 AD B3 3E			lda SIZE
  1978 3425 D0 D9			jne l_0525
  1979
  1980 				; ------------------------------------------------------------
  1981
  1982 = 3EB1			P	= DATAORIGIN+$01A9
  1983 = 3EB3			SIZE	= DATAORIGIN+$01AB
  1984
  1985 = 3EB1			@VarData	= P
  1986 = 0003			@VarDataSize	= 3
  1987
  1988 3427			@exit
  1989 					.ifdef @new
  1990 					lda <@VarData
  1991 					sta :ztmp
  1992 					lda >@VarData
  1993 					ldy #@VarDataSize-1
  1994 					jmp @FreeMem
  1995 					els
  1996 3427 60				rts						; ret
  1997 					eif
  1998 				.endl
  1999
  2000 3428			.local	READVARL					; FUNCTION | ASSEMBLER
  2001
  2002 				; -------------------  ASM Block 00000072  -------------------
  2003
  2004 = 3EB4			A equ result;
  2005 = 3EB5			B equ result+1;
  2006 = 3EB6			C equ result+2;
  2007 = 3EB7			D equ result+3;
  2008
  2009 3428 A9 00		  lda #0
  2010 342A 8D B4 3E		  sta A
  2011 342D 8D B5 3E		  sta B
  2012 3430 8D B6 3E		  sta C
  2013 3433 8D B7 3E		  sta D
  2014
  2015 				// read block
  2016
  2017 				// read 1st byte
  2018 3436				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2019 3436				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 3436 A0 00			ldy #$00
     5 3438 B1 E0			lda (_PTR),y
     6 343A 85 F6			sta _TMP
    10 343C E6 E0			inc _ADR
    11 343E D0 02			sne
    12 3440 E6 E1			inc _ADR+1
    16 3442 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2020 					.endl
  2021 3445 A5 F6			lda _TMP
  2022 3447 8D B4 3E			sta A
  2023
  2024 344A 10 67		  bpl endRead
  2025
  2026 				// move A to B and read 2nd byte
  2027 344C 29 7F			and #$7F
  2028 344E 8D B5 3E			sta B
  2029
  2030 				// read 2nd byte
  2031 3451				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2032 3451				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 3451 A0 00			ldy #$00
     5 3453 B1 E0			lda (_PTR),y
     6 3455 85 F6			sta _TMP
    10 3457 E6 E0			inc _ADR
    11 3459 D0 02			sne
    12 345B E6 E1			inc _ADR+1
    16 345D 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2033 					.endl
  2034 3460 A5 F6			lda _TMP
  2035 3462 8D B4 3E			sta A
  2036
  2037 3465 10 4C		  bpl endRead
  2038
  2039 				// mova B to C, A to B and read 3rd byte
  2040 3467 AD B5 3E			lda B
  2041 346A 8D B6 3E			sta C
  2042 346D AD B4 3E			lda A
  2043 3470 29 7F			and #$7F
  2044 3472 8D B5 3E			sta B
  2045
  2046 				// read 3rd
  2047 3475				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2048 3475				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 3475 A0 00			ldy #$00
     5 3477 B1 E0			lda (_PTR),y
     6 3479 85 F6			sta _TMP
    10 347B E6 E0			inc _ADR
    11 347D D0 02			sne
    12 347F E6 E1			inc _ADR+1
    16 3481 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2049 					.endl
  2050 3484 A5 F6			lda _TMP
  2051 3486 8D B4 3E			sta A
  2052
  2053 3489 10 28		  bpl endRead
  2054
  2055 				// move C to D, B to C, A to B and read 4th byte
  2056 348B AD B6 3E			lda C
  2057 348E 8D B7 3E			sta D
  2058 3491 AD B5 3E			lda B
  2059 3494 8D B6 3E			sta C
  2060 3497 AD B4 3E			lda A
  2061 349A 29 7F			and #$7F
  2062 349C 8D B5 3E			sta B
  2063
  2064 				// read 4th
  2065 349F				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2066 349F				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 349F A0 00			ldy #$00
     5 34A1 B1 E0			lda (_PTR),y
     6 34A3 85 F6			sta _TMP
    10 34A5 E6 E0			inc _ADR
    11 34A7 D0 02			sne
    12 34A9 E6 E1			inc _ADR+1
    16 34AB 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2067 					.endl
  2068 34AE A5 F6			lda _TMP
  2069 34B0 8D B4 3E			sta A
  2070
  2071 34B3			endRead:
  2072
  2073 				// decode block
  2074 				// 'A' stays as it is
  2075
  2076 				// 'B' if geather than zero, lets decode
  2077 34B3 AD B5 3E		  lda B
  2078 34B6 F0 0D		  beq noDecodeB
  2079
  2080 				// 76543210 76543210
  2081 				// 0bbbbbbb 0aaaaaaa
  2082 				// 00bbbbbb baaaaaaa
  2083 34B8 4E B5 3E		  lsr B
  2084 34BB 90 08		  bcc noDecodeB
  2085
  2086 34BD AD B4 3E		  lda A
  2087 34C0 09 80		  ora #$80
  2088 34C2 8D B4 3E		  sta A
  2089
  2090 34C5			noDecodeB:
  2091 				// 'C' if geather than zero, lets decode
  2092 34C5 AD B6 3E		  lda C
  2093 34C8 F0 1D		  beq noDecodeC
  2094
  2095 				// 76543210 76543210
  2096 				// 0ccccccc 0bbbbbbb
  2097 				// 00cccccc 0cbbbbbb
  2098 34CA 4E B6 3E		  lsr C
  2099 34CD 90 0B		  bcc noC1
  2100
  2101 34CF AD B5 3E		  lda B
  2102 34D2 09 40		  ora #$40
  2103 34D4 8D B5 3E		  sta B
  2104
  2105 34D7 AD B6 3E		  lda C // reload C
  2106
  2107 34DA			noC1:
  2108 				// 76543210 76543210
  2109 				// 0ccccccc 0bbbbbbb
  2110 				// 000ccccc ccbbbbbb
  2111 34DA 4E B6 3E		  lsr C
  2112 34DD 90 08		  bcc noDecodeC
  2113
  2114 34DF AD B5 3E		  lda B
  2115 34E2 09 80		  ora #$80
  2116 34E4 8D B5 3E		  sta B
  2117
  2118 34E7			noDecodeC:
  2119 				// 'D' if geather than zero, lets decode
  2120 34E7 AD B7 3E		  lda D
  2121 34EA F0 2D		  beq noDecodeD
  2122
  2123 34EC 4E B7 3E		  lsr D
  2124 34EF 90 0B		  bcc noD1
  2125
  2126 34F1 AD B6 3E		  lda C
  2127 34F4 09 20		  ora #$20
  2128 34F6 8D B6 3E		  sta C
  2129
  2130 34F9 AD B7 3E		  lda D // reload D
  2131 34FC			noD1:
  2132 34FC 4E B7 3E		  lsr D
  2133 34FF 90 0B		  bcc noD2
  2134
  2135 3501 AD B6 3E		  lda C
  2136 3504 09 40		  ora #$40
  2137 3506 8D B6 3E		  sta C
  2138
  2139 3509 AD B7 3E		  lda D // realod D
  2140 350C			noD2:
  2141 350C 4E B7 3E		  lsr D
  2142 350F 90 08		  bcc noDecodeD
  2143
  2144 3511 AD B6 3E		  lda C
  2145 3514 09 80		  ora #$80
  2146 3516 8D B6 3E		  sta C
  2147
  2148 3519			noDecodeD:
  2149
  2150
  2151 3519			@exit
  2152
  2153 				; ------------------------------------------------------------
  2154
  2155 = 3EB4			RESULT	= DATAORIGIN+$01AC
  2156 3519 60				rts						; ret
  2157 				.endl
  2158
  2159 351A			.local	READT						; FUNCTION
  2160
  2161 				; optimize OK (MIDFILES), line = 304
  2162
  2163 351A A9 B8			lda <RESULT
  2164 351C 8D BC 3E			sta RESULTPTR
  2165 351F A9 3E			lda >RESULT
  2166 3521 8D BD 3E			sta RESULTPTR+1
  2167
  2168 				; optimize OK (MIDFILES), line = 305
  2169
  2170 3524 AD E0 3A			lda BI
  2171 3527 8D B1 3E			sta GETDATA.P
  2172 352A AD E1 3A			lda BI+1
  2173 352D 8D B2 3E			sta GETDATA.P+1
  2174 3530 A9 03			lda #$03
  2175 3532 8D B3 3E			sta GETDATA.SIZE
  2176 3535 20 FD 33			jsr GETDATA
  2177
  2178 				; optimize OK (MIDFILES), line = 306
  2179
  2180 3538 AD 69 3E			lda adr.BI+$02
  2181 353B AC BD 3E 84 81		mvy RESULTPTR+1 :bp+1
  2182 3540 AC BC 3E			ldy RESULTPTR
  2183 3543 91 80			sta (:bp),y
  2184 3545 EE BC 3E			inc RESULTPTR
  2185 3548 D0 03			sne
  2186 354A EE BD 3E			inc RESULTPTR+1
  2187
  2188 				; optimize OK (MIDFILES), line = 307
  2189
  2190 354D AD 68 3E			lda adr.BI+$01
  2191 3550 AC BD 3E 84 81		mvy RESULTPTR+1 :bp+1
  2192 3555 AC BC 3E			ldy RESULTPTR
  2193 3558 91 80			sta (:bp),y
  2194 355A EE BC 3E			inc RESULTPTR
  2195 355D D0 03			sne
  2196 355F EE BD 3E			inc RESULTPTR+1
  2197
  2198 				; optimize OK (MIDFILES), line = 308
  2199
  2200 3562 AD 67 3E			lda adr.BI+$00
  2201 3565 AC BD 3E 84 81		mvy RESULTPTR+1 :bp+1
  2202 356A AC BC 3E			ldy RESULTPTR
  2203 356D 91 80			sta (:bp),y
  2204 356F			@exit
  2205
  2206 				; ------------------------------------------------------------
  2207
  2208 = 3EB8			RESULT	= DATAORIGIN+$01B0
  2209 = 3EBC			RESULTPTR	= DATAORIGIN+$01B4
  2210
  2211 = 3EBC			@VarData	= RESULTPTR
  2212 = 0002			@VarDataSize	= 2
  2213
  2214 356F 60				rts						; ret
  2215 				.endl
  2216 3570			l_0501
  2217
  2218 				; optimize OK (MIDFILES), line = 312
  2219
  2220 3570 A9 00			lda #$00
  2221 3572 8D A8 3E			sta DELTATIME
  2222 3575 8D A9 3E			sta DELTATIME+1
  2223 3578 8D AA 3E			sta DELTATIME+2
  2224 357B 8D AB 3E			sta DELTATIME+3
  2225
  2226 				; --- RepeatUntilProlog
  2227 357E			l_0574
  2228
  2229 				; optimize OK (MIDFILES), line = 314
  2230
  2231 357E A5 E6			lda _SKIPDELTA
  2232 3580 D0 2E			jne l_0583
  2233
  2234 				; optimize FAIL ('READVARL', MIDFILES), line = 316
  2235
  2236 3582 20 28 34			jsr READVARL
  2237 3585 AD B4 3E			lda READVARL.RESULT
  2238 3588 8D A8 3E			sta DELTATIME
  2239 358B AD B5 3E			lda READVARL.RESULT+1
  2240 358E 8D A9 3E			sta DELTATIME+1
  2241 3591 AD B6 3E			lda READVARL.RESULT+2
  2242 3594 8D AA 3E			sta DELTATIME+2
  2243 3597 AD B7 3E			lda READVARL.RESULT+3
  2244 359A 8D AB 3E			sta DELTATIME+3
  2245
  2246 				; optimize OK (MIDFILES), line = 317
  2247
  2248 359D 30 0E			jmi l_0598
  2249 359F 0D AA 3E			ora DELTATIME+2
  2250 35A2 0D A9 3E			ora DELTATIME+1
  2251 35A5 0D A8 3E			ora DELTATIME
  2252 35A8 F0 03			jeq l_0598
  2253 35AA 4C 27 38			jmp b_0574					; break
  2254 35AD			l_0598
  2255 35AD 4C B4 35			jmp l_05A4
  2256 35B0			l_0583
  2257
  2258 				; optimize OK (MIDFILES), line = 320
  2259
  2260 35B0 A9 00			lda #$00
  2261 35B2 85 E6			sta _SKIPDELTA
  2262 35B4			l_05A4
  2263
  2264 				; optimize OK (MIDFILES), line = 322
  2265
  2266 35B4 A0 00			ldy #$00
  2267 35B6 B1 E0			lda (_PTR),y
  2268 35B8 10 13			jpl l_05BE
  2269
  2270 				; optimize FAIL ('m@INLINE', MIDFILES), line = 324
  2271
  2272 35BA				.local READB
  2273 35BA				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 35BA A0 00			ldy #$00
     5 35BC B1 E0			lda (_PTR),y
     6 35BE 85 F6			sta _TMP
    10 35C0 E6 E0			inc _ADR
    11 35C2 D0 02			sne
    12 35C4 E6 E1			inc _ADR+1
    16 35C6 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2274 					.endl
  2275 35C9 A5 F6			lda _TMP
  2276 35CB 85 E7			sta _EVENT
  2277 35CD			l_05BE
  2278
  2279 				; optimize OK (MIDFILES), line = 327
  2280
  2281 35CD A5 E7			lda _EVENT
  2282 35CF 8D BE 3E			sta @CASETMP_0006
  2283 35D2 18				clc						; clear carry for add
  2284 35D3 69 40			adc #$FF-$BF					; make m = $FF
  2285 35D5 69 40			adc #$BF-$80+1					; carry set if in range n to m
  2286 35D7 B0 0A			bcs @+
  2287 35D9 AD BE 3E			lda @CASETMP_0006
  2288 35DC 18				clc						; clear carry for add
  2289 35DD 69 10			adc #$FF-$EF					; make m = $FF
  2290 35DF 69 10			adc #$EF-$E0+1					; carry set if in range n to m
  2291 35E1 90 61			jcc l_05D5
  2292 				@
  2293
  2294 				; optimize OK (MIDFILES), line = 332
  2295
  2296 35E3 A5 E7			lda _EVENT
  2297 35E5 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2298 35E7				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2299 35E7				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 35E7 A5 FD		  lda FIFO_Head
     5 35E9 18			  clc
     6 35EA 69 01		  adc #1
     7 35EC C5 FE		  cmp FIFO_Tail
     8 35EE D0 01		  bne storeInFIFO
     9 35F0 60			  rts
    11 35F1			storeInFIFO:
    12 35F1 A4 FD		  ldy FIFO_Head
    13 35F3 A5 FF		  lda FIFO_Byte
    14 35F5 99 00 06		  sta FIFO_ADDR,y
    15 35F8 C8			  iny
    16 35F9 84 FD		  sty FIFO_Head
    17 35FB			exitWrite:
Source: MIDICar Player.a65
  2300 					.endl
  2301
  2302 				; optimize FAIL ('m@INLINE', MIDFILES), line = 333
  2303
  2304 35FB				.local READB2FB
  2305 35FB				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 35FB A0 00			ldy #$00
     5 35FD B1 E0			lda (_PTR),y
     6 35FF 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 3601 E6 E0			inc _ADR
    11 3603 D0 02			sne
    12 3605 E6 E1			inc _ADR+1
    16 3607 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2306 					.endl
  2307 360A				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2308 360A				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 360A A5 FD		  lda FIFO_Head
     5 360C 18			  clc
     6 360D 69 01		  adc #1
     7 360F C5 FE		  cmp FIFO_Tail
     8 3611 D0 01		  bne storeInFIFO
     9 3613 60			  rts
    11 3614			storeInFIFO:
    12 3614 A4 FD		  ldy FIFO_Head
    13 3616 A5 FF		  lda FIFO_Byte
    14 3618 99 00 06		  sta FIFO_ADDR,y
    15 361B C8			  iny
    16 361C 84 FD		  sty FIFO_Head
    17 361E			exitWrite:
Source: MIDICar Player.a65
  2309 					.endl
  2310
  2311 				; optimize FAIL ('m@INLINE', MIDFILES), line = 334
  2312
  2313 361E				.local READB2FB
  2314 361E				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 361E A0 00			ldy #$00
     5 3620 B1 E0			lda (_PTR),y
     6 3622 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 3624 E6 E0			inc _ADR
    11 3626 D0 02			sne
    12 3628 E6 E1			inc _ADR+1
    16 362A 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2315 					.endl
  2316 362D				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2317 362D				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 362D A5 FD		  lda FIFO_Head
     5 362F 18			  clc
     6 3630 69 01		  adc #1
     7 3632 C5 FE		  cmp FIFO_Tail
     8 3634 D0 01		  bne storeInFIFO
     9 3636 60			  rts
    11 3637			storeInFIFO:
    12 3637 A4 FD		  ldy FIFO_Head
    13 3639 A5 FF		  lda FIFO_Byte
    14 363B 99 00 06		  sta FIFO_ADDR,y
    15 363E C8			  iny
    16 363F 84 FD		  sty FIFO_Head
    17 3641			exitWrite:
Source: MIDICar Player.a65
  2318 					.endl
  2319
  2320 3641 4C FF 37			jmp a_0006
  2321 3644			l_05D5
  2322 3644 AD BE 3E			lda @CASETMP_0006
  2323 3647 18				clc						; clear carry for add
  2324 3648 69 20			adc #$FF-$DF					; make m = $FF
  2325 364A 69 20			adc #$DF-$C0+1					; carry set if in range n to m
  2326 364C 90 3E			jcc l_05E9
  2327 				@
  2328
  2329 				; optimize OK (MIDFILES), line = 344
  2330
  2331 364E A5 E7			lda _EVENT
  2332 3650 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2333 3652				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2334 3652				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 3652 A5 FD		  lda FIFO_Head
     5 3654 18			  clc
     6 3655 69 01		  adc #1
     7 3657 C5 FE		  cmp FIFO_Tail
     8 3659 D0 01		  bne storeInFIFO
     9 365B 60			  rts
    11 365C			storeInFIFO:
    12 365C A4 FD		  ldy FIFO_Head
    13 365E A5 FF		  lda FIFO_Byte
    14 3660 99 00 06		  sta FIFO_ADDR,y
    15 3663 C8			  iny
    16 3664 84 FD		  sty FIFO_Head
    17 3666			exitWrite:
Source: MIDICar Player.a65
  2335 					.endl
  2336
  2337 				; optimize FAIL ('m@INLINE', MIDFILES), line = 345
  2338
  2339 3666				.local READB2FB
  2340 3666				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 3666 A0 00			ldy #$00
     5 3668 B1 E0			lda (_PTR),y
     6 366A 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 366C E6 E0			inc _ADR
    11 366E D0 02			sne
    12 3670 E6 E1			inc _ADR+1
    16 3672 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2341 					.endl
  2342 3675				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2343 3675				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 3675 A5 FD		  lda FIFO_Head
     5 3677 18			  clc
     6 3678 69 01		  adc #1
     7 367A C5 FE		  cmp FIFO_Tail
     8 367C D0 01		  bne storeInFIFO
     9 367E 60			  rts
    11 367F			storeInFIFO:
    12 367F A4 FD		  ldy FIFO_Head
    13 3681 A5 FF		  lda FIFO_Byte
    14 3683 99 00 06		  sta FIFO_ADDR,y
    15 3686 C8			  iny
    16 3687 84 FD		  sty FIFO_Head
    17 3689			exitWrite:
Source: MIDICar Player.a65
  2344 					.endl
  2345
  2346 3689 4C FF 37			jmp a_0006
  2347 368C			l_05E9
  2348 368C AD BE 3E			lda @CASETMP_0006
  2349 368F 18				clc						; clear carry for add
  2350 3690 69 08			adc #$FF-$F7					; make m = $FF
  2351 3692 69 08			adc #$F7-$F0+1					; carry set if in range n to m
  2352 3694 90 62			jcc l_05FB
  2353 				@
  2354
  2355 				; optimize FAIL ('READVARL', MIDFILES), line = 353
  2356
  2357 3696 20 28 34			jsr READVARL
  2358 3699 AD B4 3E			lda READVARL.RESULT
  2359 369C 85 F6			sta _TMP
  2360
  2361 				; optimize OK (MIDFILES), line = 355
  2362
  2363 369E A5 E7			lda _EVENT
  2364 36A0 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2365 36A2				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2366 36A2				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 36A2 A5 FD		  lda FIFO_Head
     5 36A4 18			  clc
     6 36A5 69 01		  adc #1
     7 36A7 C5 FE		  cmp FIFO_Tail
     8 36A9 D0 01		  bne storeInFIFO
     9 36AB 60			  rts
    11 36AC			storeInFIFO:
    12 36AC A4 FD		  ldy FIFO_Head
    13 36AE A5 FF		  lda FIFO_Byte
    14 36B0 99 00 06		  sta FIFO_ADDR,y
    15 36B3 C8			  iny
    16 36B4 84 FD		  sty FIFO_Head
    17 36B6			exitWrite:
Source: MIDICar Player.a65
  2367 					.endl
  2368
  2369 				; --- WhileProlog
  2370 36B6 4C DE 36			jmp l_0608
  2371 36B9			l_0609
  2372
  2373 				; optimize FAIL ('m@INLINE', MIDFILES), line = 361
  2374
  2375 36B9				.local READB2FB
  2376 36B9				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 36B9 A0 00			ldy #$00
     5 36BB B1 E0			lda (_PTR),y
     6 36BD 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 36BF E6 E0			inc _ADR
    11 36C1 D0 02			sne
    12 36C3 E6 E1			inc _ADR+1
    16 36C5 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2377 					.endl
  2378
  2379 				; optimize FAIL ('m@INLINE', MIDFILES), line = 363
  2380
  2381 36C8				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2382 36C8				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 36C8 A5 FD		  lda FIFO_Head
     5 36CA 18			  clc
     6 36CB 69 01		  adc #1
     7 36CD C5 FE		  cmp FIFO_Tail
     8 36CF D0 01		  bne storeInFIFO
     9 36D1 60			  rts
    11 36D2			storeInFIFO:
    12 36D2 A4 FD		  ldy FIFO_Head
    13 36D4 A5 FF		  lda FIFO_Byte
    14 36D6 99 00 06		  sta FIFO_ADDR,y
    15 36D9 C8			  iny
    16 36DA 84 FD		  sty FIFO_Head
    17 36DC			exitWrite:
Source: MIDICar Player.a65
  2383 					.endl
  2384
  2385 				; optimize FAIL (0, MIDFILES), line = 367
  2386
  2387 36DC C6 F6			dec _TMP
  2388 36DE			l_0608
  2389
  2390 				; optimize OK (MIDFILES), line = 359
  2391
  2392 36DE A5 F6			lda _TMP
  2393 36E0 D0 D7			jne l_0609
  2394
  2395 				; optimize OK (MIDFILES), line = 370
  2396
  2397 36E2 A5 FF			lda MIDI_FIFO.FIFO_BYTE
  2398 36E4 C9 F7			cmp #$F7
  2399 36E6 D0 08			jne l_062D
  2400 36E8 A9 00			lda #$00
  2401 36EA 8D A7 3E			sta FLAGSYSEX
  2402 36ED 4C F5 36			jmp l_063B
  2403 36F0			l_062D
  2404 36F0 A9 01			lda #$01
  2405 36F2 8D A7 3E			sta FLAGSYSEX
  2406 36F5			l_063B
  2407
  2408 36F5 4C FF 37			jmp a_0006
  2409 36F8			l_05FB
  2410 36F8 AD BE 3E			lda @CASETMP_0006
  2411 36FB C9 FF			cmp #$FF
  2412 36FD F0 03 4C FF 37		jne l_0648
  2413 				@
  2414
  2415 				; optimize FAIL ('m@INLINE', MIDFILES), line = 377
  2416
  2417 3702				.local READB2FB
  2418 3702				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 3702 A0 00			ldy #$00
     5 3704 B1 E0			lda (_PTR),y
     6 3706 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 3708 E6 E0			inc _ADR
    11 370A D0 02			sne
    12 370C E6 E1			inc _ADR+1
    16 370E 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2419 					.endl
  2420
  2421 				; optimize FAIL ('READVARL', MIDFILES), line = 378
  2422
  2423 3711 20 28 34			jsr READVARL
  2424 3714 AD B4 3E			lda READVARL.RESULT
  2425 3717 8D AC 3E			sta MSGLEN
  2426
  2427 				; optimize OK (MIDFILES), line = 380
  2428
  2429 371A A5 FF			lda MIDI_FIFO.FIFO_BYTE
  2430 371C 8D BF 3E			sta @CASETMP_0007
  2431 371F C9 2F			cmp #$2F
  2432 3721 D0 11			jne l_0658
  2433 				@
  2434
  2435 				; optimize OK (MIDFILES), line = 385
  2436
  2437 3723 A9 FF			lda #$FF
  2438 3725 8D A8 3E			sta DELTATIME
  2439 3728 8D A9 3E			sta DELTATIME+1
  2440 372B 8D AA 3E			sta DELTATIME+2
  2441 372E 8D AB 3E			sta DELTATIME+3
  2442
  2443 3731 4C FF 37			jmp a_0007
  2444 3734			l_0658
  2445 3734 C9 51			cmp #$51
  2446 3736 D0 56			jne l_0665
  2447 				@
  2448
  2449 				; optimize FAIL ('READT', MIDFILES), line = 388
  2450
  2451 3738 20 1A 35			jsr READT
  2452 373B AD B8 3E			lda READT.RESULT
  2453 373E 8D AD 3E			sta NTEMPO
  2454 3741 AD B9 3E			lda READT.RESULT+1
  2455 3744 8D AE 3E			sta NTEMPO+1
  2456 3747 AD BA 3E			lda READT.RESULT+2
  2457 374A 8D AF 3E			sta NTEMPO+2
  2458 374D AD BB 3E			lda READT.RESULT+3
  2459 3750 8D B0 3E			sta NTEMPO+3
  2460
  2461 				; optimize OK (MIDFILES), line = 389
  2462
  2463 3753 CD 5E 3E			cmp MS_PER_QNOTE+3
  2464 3756 D0 18			bne @+
  2465 3758 AD AF 3E			lda NTEMPO+2
  2466 375B CD 5D 3E			cmp MS_PER_QNOTE+2
  2467 375E D0 10			bne @+
  2468 3760 AD AE 3E			lda NTEMPO+1
  2469 3763 CD 5C 3E			cmp MS_PER_QNOTE+1
  2470 3766 D0 08			bne @+
  2471 3768 AD AD 3E			lda NTEMPO
  2472 376B CD 5B 3E			cmp MS_PER_QNOTE
  2473 376E F0 1B			jeq l_0679
  2474 				@
  2475
  2476 				; optimize OK (MIDFILES), line = 391
  2477
  2478 3770 AD AD 3E			lda NTEMPO
  2479 3773 8D 5B 3E			sta MS_PER_QNOTE
  2480 3776 AD AE 3E			lda NTEMPO+1
  2481 3779 8D 5C 3E			sta MS_PER_QNOTE+1
  2482 377C AD AF 3E			lda NTEMPO+2
  2483 377F 8D 5D 3E			sta MS_PER_QNOTE+2
  2484 3782 AD B0 3E			lda NTEMPO+3
  2485 3785 8D 5E 3E			sta MS_PER_QNOTE+3
  2486
  2487 				; optimize FAIL ('SETTEMPO', MIDFILES), line = 392
  2488
  2489 3788 20 6C 38			jsr SETTEMPO
  2490 378B			l_0679
  2491
  2492 378B 4C FF 37			jmp a_0007
  2493 378E			l_0665
  2494 378E C9 58			cmp #$58
  2495 3790 D0 56			jne l_068A
  2496 				@
  2497
  2498 				; optimize FAIL ('m@INLINE', MIDFILES), line = 397
  2499
  2500 3792				.local READB
  2501 3792				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 3792 A0 00			ldy #$00
     5 3794 B1 E0			lda (_PTR),y
     6 3796 85 F6			sta _TMP
    10 3798 E6 E0			inc _ADR
    11 379A D0 02			sne
    12 379C E6 E1			inc _ADR+1
    16 379E 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2502 					.endl
  2503 37A1 A5 F6			lda _TMP
  2504 37A3 8D 5F 3E			sta TACTNUM
  2505
  2506 				; optimize FAIL ('m@INLINE', MIDFILES), line = 398
  2507
  2508 37A6				.local READB
  2509 37A6				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 37A6 A0 00			ldy #$00
     5 37A8 B1 E0			lda (_PTR),y
     6 37AA 85 F6			sta _TMP
    10 37AC E6 E0			inc _ADR
    11 37AE D0 02			sne
    12 37B0 E6 E1			inc _ADR+1
    16 37B2 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2510 					.endl
  2511 37B5 A5 F6			lda _TMP
  2512 37B7 8D 60 3E			sta TACTDENUM
  2513
  2514 				; optimize FAIL ('m@INLINE', MIDFILES), line = 399
  2515
  2516 37BA				.local READB
  2517 37BA				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 37BA A0 00			ldy #$00
     5 37BC B1 E0			lda (_PTR),y
     6 37BE 85 F6			sta _TMP
    10 37C0 E6 E0			inc _ADR
    11 37C2 D0 02			sne
    12 37C4 E6 E1			inc _ADR+1
    16 37C6 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2518 					.endl
  2519 37C9 A5 F6			lda _TMP
  2520 37CB 8D 61 3E			sta TICKS_PER_QNOTE
  2521
  2522 				; optimize FAIL ('m@INLINE', MIDFILES), line = 400
  2523
  2524 37CE				.local READB
  2525 37CE				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 37CE A0 00			ldy #$00
     5 37D0 B1 E0			lda (_PTR),y
     6 37D2 85 F6			sta _TMP
    10 37D4 E6 E0			inc _ADR
    11 37D6 D0 02			sne
    12 37D8 E6 E1			inc _ADR+1
    16 37DA 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2526 					.endl
  2527 37DD A5 F6			lda _TMP
  2528 37DF 8D 62 3E			sta TICKS_PER_32ND
  2529
  2530 				; optimize FAIL ('SETTEMPO', MIDFILES), line = 401
  2531
  2532 37E2 20 6C 38			jsr SETTEMPO
  2533
  2534 37E5 4C FF 37			jmp a_0007
  2535 37E8			l_068A
  2536
  2537 				; optimize OK (MIDFILES), line = 404
  2538
  2539 37E8 AD AC 3E			lda MSGLEN
  2540 37EB 85 F6			sta _TMP
  2541
  2542 				; --- WhileProlog
  2543 37ED 4C FB 37			jmp l_06B3
  2544 37F0			l_06B4
  2545
  2546 				; optimize FAIL (0, MIDFILES), line = 407
  2547
  2548 37F0 C6 F6			dec _TMP
  2549
  2550 				; optimize FAIL (0, MIDFILES), line = 408
  2551
  2552 37F2 E6 E0			inc _ADR
  2553 37F4 D0 02			sne
  2554 37F6 E6 E1			inc _ADR+1
  2555
  2556 				; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 409
  2557
  2558 37F8 20 CD 2E			jsr MEMBOUNDCHECK
  2559 37FB			l_06B3
  2560
  2561 				; optimize OK (MIDFILES), line = 405
  2562
  2563 37FB A5 F6			lda _TMP
  2564 37FD D0 F1			jne l_06B4
  2565 37FF			a_0007
  2566
  2567 37FF			l_0648
  2568 37FF			a_0006
  2569
  2570 				; optimize OK (MIDFILES), line = 414
  2571
  2572 37FF AD AB 3E			lda DELTATIME+3
  2573 3802 49 FF			eor #$FF
  2574 3804 F0 03 4C 7E 35		jne l_0574
  2575 3809 AD AA 3E			lda DELTATIME+2
  2576 380C 49 FF			eor #$FF
  2577 380E F0 03 4C 7E 35		jne l_0574
  2578 3813 AD A9 3E			lda DELTATIME+1
  2579 3816 49 FF			eor #$FF
  2580 3818 F0 03 4C 7E 35		jne l_0574
  2581 381D AD A8 3E			lda DELTATIME
  2582 3820 49 FF			eor #$FF
  2583 3822 F0 03 4C 7E 35		jne l_0574
  2584 3827			b_0574
  2585
  2586 				; optimize OK (MIDFILES), line = 415
  2587
  2588 3827 A9 01			lda #$01
  2589 3829 85 E6			sta _SKIPDELTA
  2590
  2591 				; optimize OK (MIDFILES), line = 416
  2592
  2593 382B AD A8 3E			lda DELTATIME
  2594 382E 8D A3 3E			sta RESULT
  2595 3831 AD A9 3E			lda DELTATIME+1
  2596 3834 8D A4 3E			sta RESULT+1
  2597 3837 AD AA 3E			lda DELTATIME+2
  2598 383A 8D A5 3E			sta RESULT+2
  2599 383D AD AB 3E			lda DELTATIME+3
  2600 3840 8D A6 3E			sta RESULT+3
  2601 3843			@exit
  2602
  2603 				; ------------------------------------------------------------
  2604
  2605 = 3EA3			RESULT	= DATAORIGIN+$019B
  2606 = 3EA7			FLAGSYSEX	= DATAORIGIN+$019F
  2607 = 3EA8			DELTATIME	= DATAORIGIN+$01A0
  2608 = 3EAC			MSGLEN	= DATAORIGIN+$01A4
  2609 = 3EAD			NTEMPO	= DATAORIGIN+$01A5
  2610 = 3EBE			@CASETMP_0006	= DATAORIGIN+$01B6
  2611 = 3EBF			@CASETMP_0007	= DATAORIGIN+$01B7
  2612
  2613 = 3EA7			@VarData	= FLAGSYSEX
  2614 = 000C			@VarDataSize	= 12
  2615
  2616 3843 60				rts						; ret
  2617 				.endl
  2618
  2619 3844			.local	INT_PLAY					; PROCEDURE | ASSEMBLER | INTERRUPT
  2620
  2621 				; -------------------  ASM Block 00000073  -------------------
  2622
  2623 3844 A5 F5		    lda _timerStatus
  2624 3846 30 22		    bmi skip
  2625
  2626 3848 29 0F		    and #f_ratio
  2627 384A C5 F4		    cmp _subCnt
  2628 384C D0 1A		    bne incSubCounter
  2629
  2630 384E A5 F5		    lda _timerStatus
  2631 3850 09 40		    ora #f_tick
  2632 3852 85 F5		    sta _timerStatus
  2633
  2634 3854 A9 01		    lda #1
  2635 3856 85 F4		    sta _subCnt
  2636
  2637 3858 E6 F0		    inc _totalTicks
  2638 385A D0 0E		    bne skip
  2639 385C E6 F1		    inc _totalTicks+1
  2640 385E D0 0A		    bne skip
  2641 3860 E6 F2		    inc _totalTicks+2
  2642 3862 D0 06		    bne skip
  2643 3864 E6 F3		    inc _totalTicks+3
  2644 3866 D0 02		    bne skip
  2645
  2646 3868			incSubCounter:
  2647 3868 E6 F4		    inc _subCnt
  2648
  2649 386A			skip:
  2650
  2651 386A 68			  pla
  2652
  2653 386B 40				rti						; ret
  2654 				.endl
  2655
  2656 386C			.local	SETTEMPO					; PROCEDURE
  2657
  2658 				; optimize FAIL ('divmulINT.DIV', MIDFILES), line = 463
  2659
  2660 386C E8				inx
  2661 386D AD 5B 3E 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  2662 3872 AD 5C 3E 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  2663 3877 AD 5D 3E 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  2664 387C AD 5E 3E 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  2665 3881 E8				inx
  2666 3882 AD 59 3E 95 94		mva TICKDIV :STACKORIGIN,x
  2667 3887 AD 5A 3E 95 A4		mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
  2668 388C A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  2669 3890 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  2670 3894 20 B1 24			jsr divmulINT.DIV
  2671 3897 CA				dex
  2672 3898 B5 94			lda :STACKORIGIN,x
  2673 389A 8D C4 3E			sta _FREQ
  2674 389D B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2675 389F 8D C5 3E			sta _FREQ+1
  2676 38A2 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2677 38A4 8D C6 3E			sta _FREQ+2
  2678 38A7 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2679 38A9 8D C7 3E			sta _FREQ+3
  2680
  2681 				; optimize FAIL ('@I2F_m', MIDFILES), line = 464
  2682
  2683 38AC AD C4 3E 95 94		mva _FREQ :STACKORIGIN,x
  2684 38B1 AD C5 3E 95 A4		mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2685 38B6 AD C6 3E 95 B4		mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2686 38BB AD C7 3E 95 C4		mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2687 38C0 E8				inx
  2688 38C1 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2689 38C5 A9 24 95 A4			mva #$24 :STACKORIGIN+STACKWIDTH,x
  2690 38C9 A9 74 95 B4			mva #$74 :STACKORIGIN+STACKWIDTH*2,x
  2691 38CD A9 49 95 C4			mva #$49 :STACKORIGIN+STACKWIDTH*3,x
  2692 38D1 20 62 2A			jsr @I2F_m
  2693 38D4 20 24 29			jsr @FDIV
  2694 38D7 CA				dex
  2695 38D8 B5 94			lda :STACKORIGIN,x
  2696 38DA 8D C0 3E			sta FREQ
  2697 38DD B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2698 38DF 8D C1 3E			sta FREQ+1
  2699 38E2 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2700 38E4 8D C2 3E			sta FREQ+2
  2701 38E7 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2702 38E9 8D C3 3E			sta FREQ+3
  2703
  2704 				; optimize FAIL ('@FDIV', MIDFILES), line = 465
  2705
  2706 38EC A9 00 95 94			mva #$00 :STACKORIGIN,x
  2707 38F0 A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2708 38F4 A9 80 95 B4			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  2709 38F8 A9 3F 95 C4			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  2710 38FC E8				inx
  2711 38FD AD C0 3E 95 94		mva FREQ :STACKORIGIN,x
  2712 3902 AD C1 3E 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2713 3907 AD C2 3E 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2714 390C AD C3 3E 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2715 3911 20 24 29			jsr @FDIV
  2716 3914 CA				dex
  2717 3915 B5 94			lda :STACKORIGIN,x
  2718 3917 8D C0 3E			sta FREQ
  2719 391A B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2720 391C 8D C1 3E			sta FREQ+1
  2721 391F B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2722 3921 8D C2 3E			sta FREQ+2
  2723 3924 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2724 3926 8D C3 3E			sta FREQ+3
  2725
  2726 				; optimize FAIL ('@FDIV', MIDFILES), line = 468
  2727
  2728 3929 A9 F5 95 94			mva #$F5 :STACKORIGIN,x
  2729 392D A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  2730 3931 A9 7A 95 B4			mva #$7A :STACKORIGIN+STACKWIDTH*2,x
  2731 3935 A9 43 95 C4			mva #$43 :STACKORIGIN+STACKWIDTH*3,x
  2732 3939 E8				inx
  2733 393A AD C0 3E 95 94		mva FREQ :STACKORIGIN,x
  2734 393F AD C1 3E 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2735 3944 AD C2 3E 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2736 3949 AD C3 3E 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2737 394E 20 24 29			jsr @FDIV
  2738 3951 CA				dex
  2739 3952 B5 94			lda :STACKORIGIN,x
  2740 3954 8D C9 3E			sta RATIO
  2741 3957 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2742 3959 8D CA 3E			sta RATIO+1
  2743 395C B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2744 395E 8D CB 3E			sta RATIO+2
  2745 3961 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2746 3963 8D CC 3E			sta RATIO+3
  2747
  2748 				; optimize FAIL ('@F2I', MIDFILES), line = 469
  2749
  2750 3966 A9 01 95 94			mva #$01 :STACKORIGIN,x
  2751 396A E8				inx
  2752 396B AD C9 3E 95 94		mva RATIO :STACKORIGIN,x
  2753 3970 AD CA 3E 95 A4		mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
  2754 3975 AD CB 3E 95 B4		mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
  2755 397A AD CC 3E 95 C4		mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
  2756 397F 20 B3 29			jsr @F2I
  2757 3982 A9 00 95 A3			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  2758 3986 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  2759 398A A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  2760 398E B5 93			lda :STACKORIGIN-1,x
  2761 3990 18 75 94			add :STACKORIGIN,x
  2762 3993 8D CD 3E			sta _RATIO
  2763 3996 CA				dex
  2764 3997 CA				dex
  2765
  2766 				; optimize OK (MIDFILES), line = 470
  2767
  2768 3998 AD CD 3E			lda _RATIO
  2769 399B C9 10			cmp #$10
  2770 399D 90 12			jcc l_0732
  2771 399F A9 00			lda #$00
  2772 39A1 8D C9 3E			sta RATIO
  2773 39A4 8D CA 3E			sta RATIO+1
  2774 39A7 A9 70			lda #$70
  2775 39A9 8D CB 3E			sta RATIO+2
  2776 39AC A9 41			lda #$41
  2777 39AE 8D CC 3E			sta RATIO+3
  2778 39B1			l_0732
  2779
  2780 				; optimize OK (MIDFILES), line = 473
  2781
  2782 39B1 A5 F5			lda _TIMERSTATUS
  2783 39B3 29 C0			and #$C0
  2784 39B5 0D CD 3E			ora _RATIO
  2785 39B8 85 F5			sta _TIMERSTATUS
  2786
  2787 				; optimize FAIL ('@I2F', MIDFILES), line = 476
  2788
  2789 39BA E8				inx
  2790 39BB A9 00 95 94			mva #$00 :STACKORIGIN,x
  2791 39BF A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  2792 39C3 E8				inx
  2793 39C4 AD C0 3E 95 94		mva FREQ :STACKORIGIN,x
  2794 39C9 AD C1 3E 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2795 39CE AD C2 3E 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2796 39D3 AD C3 3E 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2797 39D8 E8				inx
  2798 39D9 AD CD 3E 95 94		mva _RATIO :STACKORIGIN,x
  2799 39DE A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2800 39E2 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  2801 39E6 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  2802 39EA 20 3D 2A			jsr @I2F
  2803 39ED 20 6D 28			jsr @FMUL
  2804 39F0 CA				dex
  2805 39F1 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  2806 39F5 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  2807 39F9 20 62 2A			jsr @I2F_m
  2808 39FC 20 24 29			jsr @FDIV
  2809 39FF CA				dex
  2810 3A00 20 8D 26			jsr @FROUND
  2811 3A03 20 B3 29			jsr @F2I
  2812 3A06 B5 94			lda :STACKORIGIN,x
  2813 3A08 8D C8 3E			sta FDIV
  2814
  2815 				; optimize FAIL ('divmulINT.DIV', MIDFILES), line = 479
  2816
  2817 3A0B A9 00 95 94			mva #$00 :STACKORIGIN,x
  2818 3A0F A9 87 95 A4			mva #$87 :STACKORIGIN+STACKWIDTH,x
  2819 3A13 A9 93 95 B4			mva #$93 :STACKORIGIN+STACKWIDTH*2,x
  2820 3A17 A9 03 95 C4			mva #$03 :STACKORIGIN+STACKWIDTH*3,x
  2821 3A1B E8				inx
  2822 3A1C AD 5B 3E 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  2823 3A21 AD 5C 3E 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  2824 3A26 AD 5D 3E 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  2825 3A2B AD 5E 3E 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  2826 3A30 20 B1 24			jsr divmulINT.DIV
  2827 3A33 CA				dex
  2828 3A34 B5 94			lda :STACKORIGIN,x
  2829 3A36 8D 63 3E			sta BPM
  2830 3A39 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2831 3A3B 8D 64 3E			sta BPM+1
  2832 3A3E CA				dex
  2833
  2834 				; optimize OK (MIDFILES), line = 485
  2835
  2836 3A3F 78				sei
  2837 3A40 AD 65 3E 8D 10 02		mva OLDTIMERVEC VTIMR1
  2838 3A46 AD 66 3E 8D 11 02		mva OLDTIMERVEC+1 VTIMR1+1
  2839 3A4C A5 10			lda irqens
  2840 3A4E 29 FE			and #$fe
  2841 3A50 85 10			sta irqens
  2842 3A52 8D 0E D2			sta irqen
  2843 3A55 58				cli
  2844
  2845 				; optimize OK (MIDFILES), line = 486
  2846
  2847 3A56 78				sei
  2848 3A57 A9 44 8D 10 02		mva <INT_PLAY VTIMR1
  2849 3A5C A9 38 8D 11 02		mva >INT_PLAY VTIMR1+1
  2850 3A61 A9 00			lda #$00
  2851 3A63 A0 03			ldy #$03
  2852 3A65 8D 08 D2			sta AUDCTL
  2853 3A68 8D 01 D2			sta AUDC1
  2854 3A6B 8C 0F D2			sty SKCTL
  2855 3A6E 8D 08 D2			sta AUDCTL
  2856 3A71 AD C8 3E 8D 00 D2		mva FDIV AUDF1
  2857 3A77 A5 10			lda irqens
  2858 3A79 09 01			ora #$01
  2859 3A7B 85 10			sta irqens
  2860 3A7D 8D 0E D2			sta irqen
  2861 3A80 8D 09 D2			sta stimer
  2862 3A83 58				cli
  2863
  2864 				; ------------------------------------------------------------
  2865
  2866 = 3EC0			FREQ	= DATAORIGIN+$01B8
  2867 = 3EC4			_FREQ	= DATAORIGIN+$01BC
  2868 = 3EC8			FDIV	= DATAORIGIN+$01C0
  2869 = 3EC9			RATIO	= DATAORIGIN+$01C1
  2870 = 3ECD			_RATIO	= DATAORIGIN+$01C5
  2871
  2872 = 3EC0			@VarData	= FREQ
  2873 = 000E			@VarDataSize	= 14
  2874
  2875 3A84			@exit
  2876 					.ifdef @new
  2877 					lda <@VarData
  2878 					sta :ztmp
  2879 					lda >@VarData
  2880 					ldy #@VarDataSize-1
  2881 					jmp @FreeMem
  2882 					els
  2883 3A84 60				rts						; ret
  2884 					eif
  2885 				.endl
  2886
  2887 				; ------------------------------------------------------------
  2888 				; ------------------------------------------------------------
  2889 3A85			@UnitInit
  2890
  2891 				; optimize OK (MIDFILES), line = 502
  2892
  2893 3A85 A9 00			lda #$00
  2894 3A87 8D 65 3E			sta OLDTIMERVEC
  2895 3A8A 8D 66 3E			sta OLDTIMERVEC+1
  2896
  2897 				; optimize OK (MIDFILES), line = 503
  2898
  2899 3A8D A9 80			lda #$80
  2900 3A8F 8D 59 3E			sta TICKDIV
  2901 3A92 A9 01			lda #$01
  2902 3A94 8D 5A 3E			sta TICKDIV+1
  2903
  2904 				; optimize OK (MIDFILES), line = 504
  2905
  2906 3A97 A9 04			lda #$04
  2907 3A99 8D 5F 3E			sta TACTNUM
  2908
  2909 				; optimize OK (MIDFILES), line = 505
  2910
  2911 3A9C 8D 60 3E			sta TACTDENUM
  2912
  2913 				; optimize OK (MIDFILES), line = 506
  2914
  2915 3A9F A9 18			lda #$18
  2916 3AA1 8D 61 3E			sta TICKS_PER_QNOTE
  2917
  2918 				; optimize OK (MIDFILES), line = 507
  2919
  2920 3AA4 A9 08			lda #$08
  2921 3AA6 8D 62 3E			sta TICKS_PER_32ND
  2922
  2923 				; optimize OK (MIDFILES), line = 508
  2924
  2925 3AA9 A9 20			lda #$20
  2926 3AAB 8D 5B 3E			sta MS_PER_QNOTE
  2927 3AAE A9 A1			lda #$A1
  2928 3AB0 8D 5C 3E			sta MS_PER_QNOTE+1
  2929 3AB3 A9 07			lda #$07
  2930 3AB5 8D 5D 3E			sta MS_PER_QNOTE+2
  2931 3AB8 A9 00			lda #$00
  2932 3ABA 8D 5E 3E			sta MS_PER_QNOTE+3
  2933
  2934 				; optimize OK (MIDFILES), line = 509
  2935
  2936 3ABD 85 F5			sta _TIMERSTATUS
  2937
  2938 				; optimize FAIL (0, MIDFILES), line = 510
  2939
  2940 3ABF EE 5B 3E D0 0D EE + 	ind MS_PER_QNOTE
  2941
  2942 3AD1 AD 10 02			lda VTIMR1
  2943 3AD4 8D 65 3E			sta OLDTIMERVEC
  2944 3AD7 AD 11 02			lda VTIMR1+1
  2945 3ADA 8D 66 3E			sta OLDTIMERVEC+1
  2946
  2947 3ADD 60				rts
  2948
  2949 				; ------------------------------------------------------------
  2950
  2951 = 0080			F_COUNTER	= $80
  2952 = 0040			F_TICK	= $40
  2953 = 00C0			F_FLAGS	= $C0
  2954 = 000F			F_RATIO	= $0F
  2955 = 00E0			_TRKREGS	= $E0
  2956 = 3E50			MIDDATA	= DATAORIGIN+$0148
  2957 = 3E52			adr.MIDTRACKS	= [DATAORIGIN+$014A] .array [1]
  2958 3ADE			.var MIDTRACKS	= adr.MIDTRACKS .word
  2959 = 3E53			FORMAT	= DATAORIGIN+$014B
  2960 = 3E55			NTRACKS	= DATAORIGIN+$014D
  2961 = 3E57			FPS	= DATAORIGIN+$014F
  2962 = 3E58			FSD	= DATAORIGIN+$0150
  2963 = 3E59			TICKDIV	= DATAORIGIN+$0151
  2964 = 3E5B			MS_PER_QNOTE	= DATAORIGIN+$0153
  2965 = 3E5F			TACTNUM	= DATAORIGIN+$0157
  2966 = 3E60			TACTDENUM	= DATAORIGIN+$0158
  2967 = 3E61			TICKS_PER_QNOTE	= DATAORIGIN+$0159
  2968 = 3E62			TICKS_PER_32ND	= DATAORIGIN+$015A
  2969 = 3E63			BPM	= DATAORIGIN+$015B
  2970 = 3E65			OLDTIMERVEC	= DATAORIGIN+$015D
  2971 = 00F0			_TOTALTICKS	= $F0
  2972 = 00F4			_SUBCNT	= $F4
  2973 = 00F5			_TIMERSTATUS	= $F5
  2974 = 00F6			_TMP	= $F6
  2975 = 00E0			_PTR	= $E0
  2976 = 00E0			_ADR	= $E0
  2977 = 00E2			_TRACKTIME	= $E2
  2978 = 00E6			_SKIPDELTA	= $E6
  2979 = 00E7			_EVENT	= $E7
  2980 = 6468544D		TAG_MTHD	= $6468544D
  2981 = 6B72544D		TAG_MTRK	= $6B72544D
  2982 = 3E67			adr.BI	= [DATAORIGIN+$015F] .array [4]
  2983 3ADE			.var BI	= adr.BI .word
  2984 = 0600			adr.RBUF	= $0600
  2985 3ADE			.var RBUF	= adr.RBUF .word
  2986
  2987 = 3ADE 52 3E		MIDTRACKS
  2987 = 3AE0 67 3E		BI
  2987 = 3AE2 00 06		RBUF
  2987 				.endl							; UNIT MIDFILES
  2988
  2989 3AE4			.local	RESET_MIDI					; PROCEDURE
  2990
  2991 				; optimize OK (MIDICar Player.pas), line = 25
  2992
  2993 3AE4 AD 04 3D			lda GM_RESET
  2994 3AE7 8D 4B 3E			sta MIDI_FIFO.FIFO_SEND.DATA
  2995 3AEA AD 05 3D			lda GM_RESET+1
  2996 3AED 8D 4C 3E			sta MIDI_FIFO.FIFO_SEND.DATA+1
  2997 3AF0 A9 06			lda #$06
  2998 3AF2 8D 4D 3E			sta MIDI_FIFO.FIFO_SEND.LEN
  2999 3AF5 20 FA 2D			jsr MIDI_FIFO.FIFO_SEND
  3000 3AF8 20 3E 2E			jsr MIDI_FIFO.FIFO_FLUSH
  3001 3AFB			@exit
  3002 					.ifdef @new
  3003 					lda <@VarData
  3004 					sta :ztmp
  3005 					lda >@VarData
  3006 					ldy #@VarDataSize-1
  3007 					jmp @FreeMem
  3008 					els
  3009 3AFB 60				rts						; ret
  3010 					eif
  3011 				.endl
  3012 3AFC			l_0062
  3013
  3014 				; optimize FAIL ('@print', MIDICar Player.pas), line = 33
  3015
  3016 					@printSTRING #CODEORIGIN+$0034
  3016 				 LDY> CODEORIGIN+$0034\ LDA< CODEORIGIN+$0034\ JSR @PRINTSTRING
  3016 3AFC A0 20		 LDY> CODEORIGIN+$0034
  3016 3AFE A9 34		 LDA< CODEORIGIN+$0034
  3016 3B00 20 98 2A		 JSR @PRINTSTRING
  3017 3B03 20 84 2A			@printEOL
  3018
  3019 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', MIDICar Player.pas), line = 34
  3020
  3021 3B06 20 D0 2D			jsr MIDI_FIFO.FIFO_RESET
  3022
  3023 				; optimize OK (MIDICar Player.pas), line = 39
  3024
  3025 3B09 A9 00			lda #$00
  3026 3B0B 8D DE 3A			sta MIDFILES.MIDTRACKS
  3027 3B0E A9 44			lda #$44
  3028 3B10 8D DF 3A			sta MIDFILES.MIDTRACKS+1
  3029
  3030 				; optimize OK (MIDICar Player.pas), line = 40
  3031
  3032 3B13 A9 00			lda #$00
  3033 3B15 8D 50 3E			sta MIDFILES.MIDDATA
  3034 3B18 A9 45			lda #$45
  3035 3B1A 8D 51 3E			sta MIDFILES.MIDDATA+1
  3036
  3037 				; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 42
  3038
  3039 3B1D 20 8E 2D			jsr SYSTEM.PARAMCOUNT
  3040 3B20 AD 26 3E			lda SYSTEM.PARAMCOUNT.RESULT
  3041 3B23 C9 01			cmp #$01
  3042 3B25 D0 14			jne l_07B5
  3043 				@
  3044
  3045 				; optimize OK (MIDICar Player.pas), line = 43
  3046
  3047 3B27 A9 01			lda #$01
  3048 3B29 20 97 2D			jsr SYSTEM.PARAMSTR
  3049 3B2C AD AC 2D			lda SYSTEM.PARAMSTR.RESULT
  3050 3B2F 8D CE 3E			sta FN
  3051 3B32 AD AD 2D			lda SYSTEM.PARAMSTR.RESULT+1
  3052 3B35 8D CF 3E			sta FN+1
  3053 3B38 4C 45 3B			jmp l_07C4
  3054 3B3B			l_07B5
  3055
  3056 				; optimize OK (MIDICar Player.pas), line = 48
  3057
  3058 3B3B A9 3E			lda #$3E
  3059 3B3D 8D CE 3E			sta FN
  3060 3B40 A9 20			lda #$20
  3061 3B42 8D CF 3E			sta FN+1
  3062 3B45			l_07C4
  3063
  3064 				; optimize OK (MIDICar Player.pas), line = 51
  3065
  3066 3B45 AD CE 3E			lda FN
  3067 3B48 8D 7A 3E			sta MIDFILES.LOADMID.FN
  3068 3B4B AD CF 3E			lda FN+1
  3069 3B4E 8D 7B 3E			sta MIDFILES.LOADMID.FN+1
  3070 3B51 20 FA 2E			jsr MIDFILES.LOADMID
  3071 3B54 AD 7C 3E			lda MIDFILES.LOADMID.RESULT
  3072 3B57 D0 05			jne l_07D7
  3073 3B59 A9 01			lda #$01
  3074 3B5B 4C EB 3C			jmp @halt
  3075 3B5E			l_07D7
  3076
  3077 				; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 56
  3078
  3079 3B5E 20 B2 2D			jsr MC6850.MC6850_RESET
  3080
  3081 				; optimize OK (MIDICar Player.pas), line = 57
  3082
  3083 3B61 A9 96			lda #$96
  3084 3B63 20 B8 2D			jsr MC6850.MC6850_INIT
  3085
  3086 				; optimize FAIL ('@print', MIDICar Player.pas), line = 62
  3087
  3088 					@printSTRING #CODEORIGIN+$004F
  3088 				 LDY> CODEORIGIN+$004F\ LDA< CODEORIGIN+$004F\ JSR @PRINTSTRING
  3088 3B66 A0 20		 LDY> CODEORIGIN+$004F
  3088 3B68 A9 4F		 LDA< CODEORIGIN+$004F
  3088 3B6A 20 98 2A		 JSR @PRINTSTRING
  3089
  3090 				; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 64
  3091
  3092 3B6D 20 E4 3A			jsr RESET_MIDI
  3093
  3094 				; optimize OK (MIDICar Player.pas), line = 65
  3095
  3096 3B70 A9 00			lda #$00
  3097 3B72 85 F0			sta MIDFILES._TOTALTICKS
  3098 3B74 85 F1			sta MIDFILES._TOTALTICKS+1
  3099 3B76 85 F2			sta MIDFILES._TOTALTICKS+2
  3100 3B78 85 F3			sta MIDFILES._TOTALTICKS+3
  3101
  3102 				; optimize FAIL ('MIDFILES.SETTEMPO', MIDICar Player.pas), line = 67
  3103
  3104 3B7A 20 6C 38			jsr MIDFILES.SETTEMPO
  3105
  3106 				; optimize OK (MIDICar Player.pas), line = 71
  3107
  3108 3B7D AD 55 3E			lda MIDFILES.NTRACKS
  3109 3B80 8D D9 3E			sta CTRK
  3110
  3111 				; --- RepeatUntilProlog
  3112 3B83			l_07EE
  3113
  3114 				; optimize OK (MIDICar Player.pas), line = 74
  3115
  3116 3B83 A9 00			lda #$00
  3117 3B85 CD 56 3E			cmp MIDFILES.NTRACKS+1
  3118 3B88 D0 06			bne @+
  3119 3B8A AD D9 3E			lda CTRK
  3120 3B8D CD 55 3E			cmp MIDFILES.NTRACKS
  3121 				@
  3122 3B90 D0 13			jne l_0801
  3123
  3124 				; optimize OK (MIDICar Player.pas), line = 76
  3125
  3126 3B92 A9 00			lda #$00
  3127 3B94 8D D2 3E			sta CURTRACKOFS
  3128 3B97 A9 01			lda #$01
  3129 3B99 8D D9 3E			sta CTRK
  3130
  3131 				; optimize OK (MIDICar Player.pas), line = 77
  3132
  3133 3B9C AD 55 3E			lda MIDFILES.NTRACKS
  3134 3B9F 8D DA 3E			sta PLAYINGTRACKS
  3135 3BA2 4C B1 3B			jmp l_0818
  3136 3BA5			l_0801
  3137
  3138 				; optimize OK (MIDICar Player.pas), line = 81
  3139
  3140 3BA5 AD D2 3E			lda CURTRACKOFS
  3141 3BA8 18 69 08			add #$08
  3142 3BAB 8D D2 3E			sta CURTRACKOFS
  3143
  3144 				; optimize FAIL (0, MIDICar Player.pas), line = 82
  3145
  3146 3BAE EE D9 3E			inc CTRK
  3147 3BB1			l_0818
  3148
  3149 				; optimize OK (MIDICar Player.pas), line = 85
  3150
  3151 3BB1 AD DE 3A			lda MIDFILES.MIDTRACKS
  3152 3BB4 18 6D D2 3E			add CURTRACKOFS
  3153 3BB8 85 82			sta :bp2
  3154 3BBA AD DF 3A			lda MIDFILES.MIDTRACKS+1
  3155 3BBD 69 00			adc #$00
  3156 3BBF 85 83			sta :bp2+1
  3157 3BC1 A0 07			ldy #$07
  3158 3BC3 B1 82 99 E0 00 88 + 	mva:rpl (:bp2),y $00E0,y-
  3159
  3160 				; optimize OK (MIDICar Player.pas), line = 87
  3161
  3162 3BCB A5 E5			lda MIDFILES._TRACKTIME+3
  3163 3BCD 10 03 4C 8B 3C		jmi l_0833
  3164
  3165 				; optimize OK (MIDICar Player.pas), line = 89
  3166
  3167 3BD2				.LOCAL
  3168 3BD2 A5 F3			lda MIDFILES._TOTALTICKS+3
  3169 3BD4 38 E5 E5			sub MIDFILES._TRACKTIME+3
  3170 3BD7 D0 1C			bne L4
  3171 3BD9 A5 F2			lda MIDFILES._TOTALTICKS+2
  3172 3BDB C5 E4			cmp MIDFILES._TRACKTIME+2
  3173 3BDD D0 0A			bne L1
  3174 3BDF A5 F1			lda MIDFILES._TOTALTICKS+1
  3175 3BE1 C5 E3			cmp MIDFILES._TRACKTIME+1
  3176 3BE3 D0 04			bne L1
  3177 3BE5 A5 F0			lda MIDFILES._TOTALTICKS
  3178 3BE7 C5 E2			cmp MIDFILES._TRACKTIME
  3179 3BE9 F0 10		L1	beq L5
  3180 3BEB B0 04			bcs L3
  3181 3BED A9 FF			lda #$FF
  3182 3BEF D0 0A			bne L5
  3183 3BF1 A9 01		L3	lda #$01
  3184 3BF3 D0 06			bne L5
  3185 3BF5 50 04		L4	bvc L5
  3186 3BF7 49 FF			eor #$FF
  3187 3BF9 09 01			ora #$01
  3188 3BFB			L5
  3189 					.ENDL
  3190 3BFB 10 03 4C 88 3C		jmi l_0844
  3191
  3192 				; optimize OK (MIDICar Player.pas), line = 91
  3193
  3194 3C00 A5 F5			lda MIDFILES._TIMERSTATUS
  3195 3C02 09 80			ora #$80
  3196 3C04 85 F5			sta MIDFILES._TIMERSTATUS
  3197
  3198 				; optimize OK (MIDICar Player.pas), line = 93
  3199
  3200 3C06 A5 F0			lda MIDFILES._TOTALTICKS
  3201 3C08 38 E5 E2			sub MIDFILES._TRACKTIME
  3202 3C0B 8D D7 3E			sta DTM
  3203 3C0E A5 F1			lda MIDFILES._TOTALTICKS+1
  3204 3C10 E5 E3			sbc MIDFILES._TRACKTIME+1
  3205 3C12 8D D8 3E			sta DTM+1
  3206
  3207 				; optimize FAIL ('MIDFILES.PROCESSTRACK', MIDICar Player.pas), line = 94
  3208
  3209 3C15 20 FA 33			jsr MIDFILES.PROCESSTRACK
  3210 3C18 AD A3 3E			lda MIDFILES.PROCESSTRACK.RESULT
  3211 3C1B 8D D3 3E			sta DELTATIME
  3212 3C1E AD A4 3E			lda MIDFILES.PROCESSTRACK.RESULT+1
  3213 3C21 8D D4 3E			sta DELTATIME+1
  3214 3C24 AD A5 3E			lda MIDFILES.PROCESSTRACK.RESULT+2
  3215 3C27 8D D5 3E			sta DELTATIME+2
  3216 3C2A AD A6 3E			lda MIDFILES.PROCESSTRACK.RESULT+3
  3217 3C2D 8D D6 3E			sta DELTATIME+3
  3218
  3219 				; optimize OK (MIDICar Player.pas), line = 95
  3220
  3221 3C30 30 46			jmi l_086B
  3222 3C32 0D D5 3E			ora DELTATIME+2
  3223 3C35 0D D4 3E			ora DELTATIME+1
  3224 3C38 0D D3 3E			ora DELTATIME
  3225 3C3B F0 3B			jeq l_086B
  3226
  3227 				; optimize OK (MIDICar Player.pas), line = 96
  3228
  3229 3C3D A5 F0			lda MIDFILES._TOTALTICKS
  3230 3C3F 18 6D D3 3E			add DELTATIME
  3231 3C43 85 9D			sta :STACKORIGIN+9
  3232 3C45 A5 F1			lda MIDFILES._TOTALTICKS+1
  3233 3C47 6D D4 3E			adc DELTATIME+1
  3234 3C4A 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3235 3C4C A5 F2			lda MIDFILES._TOTALTICKS+2
  3236 3C4E 6D D5 3E			adc DELTATIME+2
  3237 3C51 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
  3238 3C53 A5 F3			lda MIDFILES._TOTALTICKS+3
  3239 3C55 6D D6 3E			adc DELTATIME+3
  3240 3C58 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
  3241 3C5A A5 9D			lda :STACKORIGIN+9
  3242 3C5C 38 ED D7 3E			sub DTM
  3243 3C60 85 E2			sta MIDFILES._TRACKTIME
  3244 3C62 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  3245 3C64 ED D8 3E			sbc DTM+1
  3246 3C67 85 E3			sta MIDFILES._TRACKTIME+1
  3247 3C69 A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
  3248 3C6B E9 00			sbc #$00
  3249 3C6D 85 E4			sta MIDFILES._TRACKTIME+2
  3250 3C6F A5 CD			lda :STACKORIGIN+STACKWIDTH*3+9
  3251 3C71 E9 00			sbc #$00
  3252 3C73 85 E5			sta MIDFILES._TRACKTIME+3
  3253 3C75 4C 82 3C			jmp l_0882
  3254 3C78			l_086B
  3255
  3256 				; optimize OK (MIDICar Player.pas), line = 98
  3257
  3258 3C78 A9 FF			lda #$FF
  3259 3C7A 85 E2			sta MIDFILES._TRACKTIME
  3260 3C7C 85 E3			sta MIDFILES._TRACKTIME+1
  3261 3C7E 85 E4			sta MIDFILES._TRACKTIME+2
  3262 3C80 85 E5			sta MIDFILES._TRACKTIME+3
  3263 3C82			l_0882
  3264
  3265 				; optimize OK (MIDICar Player.pas), line = 100
  3266
  3267 3C82 A5 F5			lda MIDFILES._TIMERSTATUS
  3268 3C84 29 7F			and #$7F
  3269 3C86 85 F5			sta MIDFILES._TIMERSTATUS
  3270 3C88			l_0844
  3271 3C88 4C 8E 3C			jmp l_089B
  3272 3C8B			l_0833
  3273
  3274 				; optimize FAIL (0, MIDICar Player.pas), line = 104
  3275
  3276 3C8B CE DA 3E			dec PLAYINGTRACKS
  3277 3C8E			l_089B
  3278
  3279 				; optimize OK (MIDICar Player.pas), line = 105
  3280
  3281 3C8E AD DE 3A			lda MIDFILES.MIDTRACKS
  3282 3C91 18 6D D2 3E			add CURTRACKOFS
  3283 3C95 85 82			sta :bp2
  3284 3C97 AD DF 3A			lda MIDFILES.MIDTRACKS+1
  3285 3C9A 69 00			adc #$00
  3286 3C9C 85 83			sta :bp2+1
  3287 3C9E A0 07			ldy #$07
  3288 3CA0 B9 E0 00 91 82 88 + 	mva:rpl $00E0,y (:bp2),y-
  3289
  3290 				; optimize OK (MIDICar Player.pas), line = 108
  3291
  3292 3CA8 AD 00 D5			lda MC6850.MC6850_CNTRREG
  3293 3CAB 29 02			and #$02
  3294 3CAD F0 0E			jeq l_08BB
  3295
  3296 				; optimize OK (MIDICar Player.pas), line = 109
  3297
  3298 3CAF A5 FE			lda MIDI_FIFO.FIFO_TAIL
  3299 3CB1 C5 FD			cmp MIDI_FIFO.FIFO_HEAD
  3300 3CB3 F0 08			jeq l_08D0
  3301
  3302 				; optimize FAIL ('MIDI_FIFO.FIFO_READBYTE', MIDICar Player.pas), line = 112
  3303
  3304 3CB5 20 EC 2D			jsr MIDI_FIFO.FIFO_READBYTE
  3305
  3306 				; optimize OK (MIDICar Player.pas), line = 113
  3307
  3308 3CB8 A5 FF			lda MIDI_FIFO.FIFO_BYTE
  3309 3CBA 8D 01 D5			sta MC6850.MC6850_BUFFER
  3310 3CBD			l_08D0
  3311 3CBD			l_08BB
  3312
  3313 				; optimize OK (MIDICar Player.pas), line = 118
  3314
  3315 3CBD AD DA 3E			lda PLAYINGTRACKS
  3316 3CC0 F0 0A			jeq l_07EEx
  3317 3CC2 AD FC 02			lda $02FC
  3318 3CC5 C9 FF			cmp #$FF
  3319 3CC7 D0 03 4C 83 3B		jeq l_07EE
  3320 3CCC			l_07EEx
  3321
  3322 				; optimize FAIL ('@print', MIDICar Player.pas), line = 120
  3323
  3324 					@print #$9C
  3324 				 LDY# $9C\ JSR @PRINT
  3324 3CCC A0 9C		 LDY# $9C
  3324 3CCE 20 89 2A		 JSR @PRINT
  3325
  3326 				; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 127
  3327
  3328 3CD1 20 E4 3A			jsr RESET_MIDI
  3329
  3330 				; optimize OK (MIDICar Player.pas), line = 133
  3331
  3332 3CD4 78				sei
  3333 3CD5 AD 65 3E 8D 10 02		mva MIDFILES.OLDTIMERVEC VTIMR1
  3334 3CDB AD 66 3E 8D 11 02		mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
  3335 3CE1 A5 10			lda irqens
  3336 3CE3 29 FE			and #$fe
  3337 3CE5 85 10			sta irqens
  3338 3CE7 8D 0E D2			sta irqen
  3339 3CEA 58				cli
  3340
  3341 				; ------------------------------------------------------------
  3342
  3343 = 205B			adr.GM_RESET	= CODEORIGIN+$005B
  3344 3CEB			.var GM_RESET	= adr.GM_RESET .word
  3345 = 3ECE			FN	= DATAORIGIN+$01C6
  3346 = 3ED0			TRKPTR	= DATAORIGIN+$01C8
  3347 = 3D08			TRKPTR.PTR	= DATAORIGIN+$0000
  3348 = 3D0A			TRKPTR.TRACKTIME	= DATAORIGIN+$0002
  3349 = 3D0E			TRKPTR.SKIPDELTA	= DATAORIGIN+$0006
  3350 = 3D0F			TRKPTR._EVENT	= DATAORIGIN+$0007
  3351 = 3ED2			CURTRACKOFS	= DATAORIGIN+$01CA
  3352 = 3ED3			DELTATIME	= DATAORIGIN+$01CB
  3353 = 3ED7			DTM	= DATAORIGIN+$01CF
  3354 = 3ED9			CTRK	= DATAORIGIN+$01D1
  3355 = 3EDA			PLAYINGTRACKS	= DATAORIGIN+$01D2
  3356 3CEB			@exit
  3357
  3358 3CEB A2 00		@halt	ldx #$00
  3359 3CED 9A				txs
  3360 					.ifdef MAIN.@DEFINES.ROMOFF
  3361 3CEE EE 01 D3			inc portb
  3362 					.fi
  3363
  3364 3CF1 A0 01			ldy #$01
  3365
  3366 3CF3 60				rts
  3367
  3368 				; ------------------------------------------------------------
  3369
  3370 3CF4 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  3371
  3372 				; ------------------------------------------------------------
  3373
  3374 3D04			.local	@DEFINES
  3375 3D04			ATARI
  3376 3D04			USE_FIFO
  3377 3D04			ROMOFF
  3378 				.endl
  3379
  3380 3D04			.local	@RESOURCE
  3381 				.endl
  3382
  3383 = 3D04 5B 20		GM_RESET
  3383 				.endl							; MAIN
  3384
  3385 				; ------------------------------------------------------------
  3386 				; ------------------------------------------------------------
  3387
  3388 				.macro	UNITINITIALIZATION
  3389 				
  3390 					.ifdef MAIN.SYSTEM.@UnitInit
  3391 					jsr MAIN.SYSTEM.@UnitInit
  3392 					.fi
  3393 				
  3394 					.ifdef MAIN.MC6850.@UnitInit
  3395 					jsr MAIN.MC6850.@UnitInit
  3396 					.fi
  3397 				
  3398 					.ifdef MAIN.DOS.@UnitInit
  3399 					jsr MAIN.DOS.@UnitInit
  3400 					.fi
  3401 				
  3402 					.ifdef MAIN.STRUTILS.@UnitInit
  3403 					jsr MAIN.STRUTILS.@UnitInit
  3404 					.fi
  3405 				
  3406 					.ifdef MAIN.SYSUTILS.@UnitInit
  3407 					jsr MAIN.SYSUTILS.@UnitInit
  3408 					.fi
  3409 				
  3410 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  3411 					jsr MAIN.MIDI_FIFO.@UnitInit
  3412 					.fi
  3413 				
  3414 					.ifdef MAIN.MIDFILES.@UnitInit
  3415 					jsr MAIN.MIDFILES.@UnitInit
  3416 					.fi
  3417 				.endm
  3418
  3419 				; ------------------------------------------------------------
  3420
  3421 					ift .SIZEOF(MAIN.SYSTEM) > 0
  3422 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  3422 				SYSTEM: $2C12..$2DB1
  3423 					eif
  3424
  3425 					ift .SIZEOF(MAIN.MC6850) > 0
  3426 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  3426 				MC6850: $2DB2..$2DCF
  3427 					eif
  3428
  3429 					ift .SIZEOF(MAIN.DOS) > 0
  3430 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  3431 					eif
  3432
  3433 					ift .SIZEOF(MAIN.STRUTILS) > 0
  3434 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  3435 					eif
  3436
  3437 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  3438 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  3439 					eif
  3440
  3441 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  3442 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  3442 				MIDI_FIFO: $2DD0..$2E5D
  3443 					eif
  3444
  3445 					ift .SIZEOF(MAIN.MIDFILES) > 0
  3446 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  3446 				MIDFILES: $2E5E..$3AE3
  3447 					eif
  3448
  3449 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  3449 				CODE: $2000..$3D03
  3450
  3451 				; ------------------------------------------------------------
  3452
  3453 3D06				.align $0004
  3454
  3455 3D08			DATAORIGIN
  3456 3D08-3D0D> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  3457
  3458 = 0006			VARINITSIZE	= *-DATAORIGIN
  3459 = 01D3			VARDATASIZE	= 467
  3460
  3461 = 3EDB			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  3462
  3463 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  3463 				DATA: $3D08..$3EDB
  3464
  3465 02E0-02E1> 6B 2B			run START
  3466
  3467 				; ------------------------------------------------------------
  3468
  3469 				.macro	STATICDATA
  3470 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $0A $4F $70  $65 $6E $20 $66 $69 $6C $65 $20
  3471 				.by  $00 $0B $49 $2F $4F $20 $45 $72  $72 $6F $72 $20 $23 $00 $07 $54  $72 $61 $63 $6B $3A $20 $00 $03
  3472 				.by  $2E $2E $2E $00 $08 $46 $49 $46  $4F $3A $20 $4F $6E $00 $0F $44  $32 $3A $53 $45 $4C $46 $54 $45
  3473 				.by  $53 $54 $2E $4D $49 $44 $00 $0A  $50 $6C $61 $79 $69 $6E $67 $2E  $2E $2E $00 $F0 $7E $7F $09 $01
  3474 				.by  $F7
  3475 				.endm
  3476
  3477 					end
