mads 2.1.6
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				.local	RESOURCE
   105 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1142 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 2000				RCDATA 'selftest.mti' TRACK_DATA_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0008			len = .filesize('selftest.mti')-0
    28 					org main.TRACK_DATA_ADDR
    30 FFFF> 4000-4007> 00 41 + 	ins 'selftest.mti',0
    32 					.print '$R RCDATA  ',main.TRACK_DATA_ADDR,'..',*-1," 'selftest.mti'"
    32 				$R RCDATA  $4000..$4007 'selftest.mti'
Source: MIDICar Player.a65
   110 4008				RCDATA 'selftest.rmd' MIDI_DATA_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 006A			len = .filesize('selftest.rmd')-0
    28 4008				org main.MIDI_DATA_ADDR
    30 4100-4169> 00 FF 21 01 + 	ins 'selftest.rmd',0
    32 					.print '$R RCDATA  ',main.MIDI_DATA_ADDR,'..',*-1," 'selftest.rmd'"
    32 				$R RCDATA  $4100..$4169 'selftest.rmd'
Source: MIDICar Player.a65
   111 				.endl
   112
   113 				; ------------------------------------------------------------
   114
   115 416A				org CODEORIGIN
   116
   117 2000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 2000-3BBE> 04 54 52 55 + .by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $0A $4F $70  $65 $6E $20 $66 $69 $6C $65 $20
     2 2018 00 07 54 72 61 63 + .by  $00 $07 $54 $72 $61 $63 $6B $3A  $20 $00 $03 $2E $2E $2E $00 $23  $4D $49 $44 $20 $50 $6C $61 $79
     3 2030 65 72 20 66 6F 72 + .by  $65 $72 $20 $66 $6F $72 $20 $4D  $49 $44 $49 $43 $61 $72 $20 $52  $43 $31 $20 $32 $30 $32 $32 $20
     4 2048 47 53 44 00 12 55 + .by  $47 $53 $44 $00 $12 $55 $6E $73  $75 $70 $70 $6F $72 $74 $65 $64  $20 $66 $6F $72 $6D $61 $74 $00
     5 2060 12 4E 6F 74 20 65 + .by  $12 $4E $6F $74 $20 $65 $6E $6F  $75 $67 $68 $74 $20 $6D $65 $6D  $6F $72 $79 $00 $0B $49 $2F $4F
     6 2078 20 45 72 72 6F 72 + .by  $20 $45 $72 $72 $6F $72 $20 $23  $00 $2A $54 $79 $70 $65 $20 $22  $50 $20 $64 $65 $76 $69 $63 $65
     7 2090 3A 66 69 6C 65 6E + .by  $3A $66 $69 $6C $65 $6E $61 $6D  $65 $2E $4D $49 $44 $22 $20 $74  $6F $20 $70 $6C $61 $79 $20 $66
     8 20A8 69 6C 65 2E 00 0B + .by  $69 $6C $65 $2E $00 $0B $53 $65  $6C $66 $74 $65 $73 $74 $2E $2E  $2E $00 $0A $50 $6C $61 $79 $69
     9 20C0 6E 67 2E 2E 2E 00 + .by  $6E $67 $2E $2E $2E $00 $F0 $7E  $7F $09 $01 $F7
Source: MIDICar Player.a65
   118
   119 				; ------------------------------------------------------------
   120
   121 20CC			RTLIB
   122 20CC				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   123
   124 				.print 'ZPAGE: ',zpage,'..',zpend-1
   124 				ZPAGE: $0080..$00D3
   125
   126 				.print 'RTLIB: ',RTLIB,'..',*-1
   126 				RTLIB: $20CC..$2BD5
   127
   128 				; ------------------------------------------------------------
   129
   130 2BD6			START
   131 2BD6 BA				tsx
   132 2BD7 8E A5 3B			stx MAIN.@halt+1
   133
   134 					.ifdef fmulinit
   135 					fmulinit
   136 					.fi
   137
   138 = 01B1			VLEN	= VARDATASIZE-VARINITSIZE
   139 = 3BC6			VADR	= DATAORIGIN+VARINITSIZE
   140
   141 					ift VADR > $BFFF
   142 					ert 'Invalid memory address range ',VADR
   143 					eli (VLEN>0) && (VLEN<=256)
   144 					ldx #256-VLEN
   145 					lda #$00
   146 					sta:rne VADR+VLEN-256,x+
   147 					eli VLEN>256
   148 					@fill #VADR #VLEN #$00
   148 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   148 2BDA A9 C6 85 88 A9 3B +  MWA #VADR @FILL.PTR1
   148 2BE2 A9 B1 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   148 2BEA A9 00 85 84		 MVA #$00 @FILL.PTR2
   148 2BEE 20 C2 24		 JSR @FILL
   149 					eif
   150
   151 				.ifdef :psptr
   152 					mwa #PROGRAMSTACK :psptr
   153 				.fi
   154
   155 					.ifdef MAIN.@DEFINES.ROMOFF
   156 2BF1				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 2BF1			.local	rominit
     5
     6 2BF1 78			        sei
     7 2BF2 A9 00		        lda #%00000000
     8 2BF4 8D 0E D4		        sta NMIEN       ;$D40E
     9 2BF7 A9 FE		        lda #%11111110
    10 2BF9 8D 01 D3		        sta PORTB       ;$D301
    11
    12 2BFC A2 03			ldx #3
    13 2BFE A0 00			ldy #0
    14 2C00 EE 01 D3		mv	inc portb
    15 2C03 B9 00 E0		afnt0	lda $e000,y
    16 2C06 CE 01 D3			dec portb
    17 2C09 99 00 E0		afnt1	sta $e000,y
    18 2C0C C8				iny
    19 2C0D D0 F1			bne mv
    20 2C0F EE 05 2C			inc afnt0+2
    21 2C12 EE 0B 2C			inc afnt1+2
    22 2C15 CA				dex
    23 2C16 10 E8			bpl mv
    24
    25 2C18 A2 35		        ldx #<nmiint
    26 2C1A A0 2C		        ldy #>nmiint
    27 2C1C 8E FA FF		        stx NMIVEC      ;$FFFA
    28 2C1F 8C FB FF		        sty NMIVEC+1
    29
    30 2C22 A2 3F		        ldx #<irqint
    31 2C24 A0 2C		        ldy #>irqint
    32 2C26 8E FE FF		        stx IRQVEC      ;$FFFE
    33 2C29 8C FF FF		        sty IRQVEC+1
    34
    35 2C2C A9 40		        lda #%01000000
    36 2C2E 8D 0E D4		        sta NMIEN       ;$D40E
    37 2C31 58			        cli
    38
    39 2C32 4C 60 2C			jmp skp
    40
    41
    42
    43 2C35 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 2C38 10 03		        spl
    45 2C3A 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 2C3D 38			        sec
    48 2C3E 24			        .byte $24        ;BIT $18
    49
    50 2C3F 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 2C40 EE 01 D3		        inc PORTB       ;$D301
    55
    56 2C43 48			        pha
    57 2C44 8A			        txa
    58 2C45 48			        pha
    59 2C46 BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 2C47 A9 2C		        lda #>iret      ;adres procedury iret
    64 2C49 48			        pha
    65 2C4A A9 59		        lda #<iret
    66 2C4C 48			        pha
    67 2C4D BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 2C50 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 2C51 90 03		        scc
    73 2C53 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 2C56 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 2C59 68			iret	pla
    77 2C5A AA				tax
    78 2C5B 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 2C5C CE 01 D3		        dec PORTB       ;$D301
    83 2C5F 40			        rti
    84
    85 2C60			skp
    86
    87 				.endl
    88
   157 					.fi
   158
   159 2C60 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   160 2C62 BD 40 03 9D AD 3B + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   161
   162 2C6B E8				inx						; X = 0
   163 2C6C 86 80			stx bp						; BP = 0
   164
   165 2C6E 8E 0F D2			stx skctl					; reset POKEY
   166 2C71 A9 03			lda #3
   167 2C73 8D 0F D2			sta skctl
   168
   169 2C76 CA				dex						; X = 255
   170
   171 2C77				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
    27 2C77 20 09 39			jsr MAIN.MIDFILES.@UnitInit
Source: MIDICar Player.a65
   172
   173 2C7A			.local	MAIN						; PROCEDURE
   174
   175 2C7A 4C 5C 39			jmp l_00CD
   176
   177 				; ------------------------------------------------------------
   178
   179 2C7D			.local	SYSTEM						; UNIT
   180
   181 2C7D			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   182
   183 				; ------------------------------------------------------------
   184
   185 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   186 				; as Pointer
   187 2C7D B5 94			lda :STACKORIGIN,x
   188 2C7F 85 88			sta A
   189 2C81 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   190 2C83 85 89			sta A+1
   191 2C85 CA				dex
   192 2C86			@main
   193
   194 				; -------------------  ASM Block 00000002  -------------------
   195
   196 2C86 A0 00			ldy #0
   197 2C88 B1 88 85 90			mva (:edx),y Result
   198
   199 2C8C			@exit
   200
   201 				; ------------------------------------------------------------
   202
   203 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   204 				; as Pointer
   205
   206 2C8C E8				inx
   207 2C8D A5 90 95 94			mva RESULT :STACKORIGIN,x
   208
   209 					.ifdef @new
   210 					lda <@VarData
   211 					sta :ztmp
   212 					lda >@VarData
   213 					ldy #@VarDataSize-1
   214 					jmp @FreeMem
   215 					eif
   216
   217 				; ------------------------------------------------------------
   218
   219 = 0088			A	= :EDX
   220 = 0090			RESULT	= :STACKORIGIN-4
   221 2C91 60				rts						; ret
   222 				.endl
   223
   224 2C92			.local	FILEPOS						; FUNCTION | ASSEMBLER
   225
   226 				; -------------------  ASM Block 00000011  -------------------
   227
   228 2C92 8A 48			txa:pha
   229
   230 2C94 AD CB 3B 85 82 AD + 	mwa f :bp2
   231
   232 2C9E A0 04			ldy #s@file.chanel
   233 2CA0 B1 82			lda (:bp2),y
   234 2CA2 AA				tax
   235 2CA3 A9 26			lda #38
   236 2CA5 9D 42 03			sta iccmd,x
   237
   238 2CA8				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 2CA8 EE 01 D3				inc portb
     6 2CAB 20 56 E4				jsr CIOV
     8 2CAE CE 01 D3				dec portb
Source: MIDICar Player.a65
   239
   240 2CB1 8C C7 3B			sty IOResult
   241
   242 2CB4 BD 4C 03 85 84		mva icax3,x :eax
   243 2CB9 BD 4D 03 85 85		mva icax4,x :eax+1
   244 2CBE BD 4E 03 85 86		mva icax5,x :eax+2
   245
   246 2CC3 A9 00 85 87			mva #$00 :eax+3
   247 2CC7 85 8E			sta :ecx+2
   248 2CC9 85 8F			sta :ecx+3
   249
   250 2CCB A0 02			ldy #s@file.record
   251 2CCD B1 82			lda (:bp2),y
   252 2CCF 85 8C			sta :ecx
   253 2CD1 C8				iny
   254 2CD2 B1 82			lda (:bp2),y
   255 2CD4 85 8D			sta :ecx+1
   256
   257 2CD6 20 10 26			jsr idivEAX_ECX.main
   258
   259 2CD9 A5 84 8D CD 3B		mva :eax Result
   260 2CDE A5 85 8D CE 3B		mva :eax+1 Result+1
   261 2CE3 A5 86 8D CF 3B		mva :eax+2 Result+2
   262 2CE8 A5 87 8D D0 3B		mva :eax+3 Result+3
   263
   264 2CED 68 AA			pla:tax
   265
   266 2CEF			@exit
   267
   268 				; ------------------------------------------------------------
   269
   270 = 3BCB			F	= DATAORIGIN+$000B
   271 = 3BCD			RESULT	= DATAORIGIN+$000D
   272
   273 = 3BCB			@VarData	= F
   274 = 0002			@VarDataSize	= 2
   275
   276 2CEF 60				rts						; ret
   277 				.endl
   278
   279 2CF0			.local	SEEK						; PROCEDURE | ASSEMBLER
   280
   281 				; -------------------  ASM Block 00000012  -------------------
   282
   283 2CF0 8A 48			txa:pha
   284
   285 2CF2 AD D1 3B 85 82 AD + 	mwa f :bp2
   286
   287 2CFC A0 04			ldy #s@file.chanel
   288 2CFE B1 82			lda (:bp2),y
   289 2D00 AA				tax
   290 2D01 A9 25			lda #37
   291 2D03 9D 42 03			sta iccmd,x
   292
   293 2D06 A0 02			ldy #s@file.record
   294 2D08 B1 82			lda (:bp2),y
   295 2D0A 85 84			sta :eax
   296 2D0C C8				iny
   297 2D0D B1 82			lda (:bp2),y
   298 2D0F 85 85			sta :eax+1
   299 2D11 A9 00			lda #$00
   300 2D13 85 86			sta :eax+2
   301 2D15 85 87			sta :eax+3
   302
   303 2D17 AD D3 3B 85 8C		mva a :ecx
   304 2D1C AD D4 3B 85 8D		mva a+1 :ecx+1
   305 2D21 AD D5 3B 85 8E		mva a+2 :ecx+2
   306 2D26 AD D6 3B 85 8F		mva a+3 :ecx+3
   307
   308 2D2B 20 C4 25			jsr imulECX
   309
   310 2D2E A5 84 9D 4C 03		mva :eax icax3,x
   311 2D33 A5 85 9D 4D 03		mva :eax+1 icax4,x
   312 2D38 A5 86 9D 4E 03		mva :eax+2 icax5,x
   313
   314 2D3D				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 2D3D EE 01 D3				inc portb
     6 2D40 20 56 E4				jsr CIOV
     8 2D43 CE 01 D3				dec portb
Source: MIDICar Player.a65
   315
   316 2D46 8C C7 3B			sty IOResult
   317
   318 2D49 68 AA			pla:tax
   319
   320 				; ------------------------------------------------------------
   321
   322 = 3BD1			F	= DATAORIGIN+$0011
   323 = 3BD3			A	= DATAORIGIN+$0013
   324
   325 = 3BD1			@VarData	= F
   326 = 0006			@VarDataSize	= 6
   327
   328 2D4B			@exit
   329 					.ifdef @new
   330 					lda <@VarData
   331 					sta :ztmp
   332 					lda >@VarData
   333 					ldy #@VarDataSize-1
   334 					jmp @FreeMem
   335 					els
   336 2D4B 60				rts						; ret
   337 					eif
   338 				.endl
   339
   340 2D4C			.local	EOF						; FUNCTION
   341
   342 				; optimize OK (SYSTEM), line = 1163
   343
   344 2D4C AD D7 3B			lda F
   345 2D4F 8D CB 3B			sta FILEPOS.F
   346 2D52 AD D8 3B			lda F+1
   347 2D55 8D CC 3B			sta FILEPOS.F+1
   348 2D58 20 92 2C			jsr FILEPOS
   349 2D5B AD CD 3B			lda FILEPOS.RESULT
   350 2D5E 8D DA 3B			sta I
   351 2D61 AD CE 3B			lda FILEPOS.RESULT+1
   352 2D64 8D DB 3B			sta I+1
   353 2D67 AD CF 3B			lda FILEPOS.RESULT+2
   354 2D6A 8D DC 3B			sta I+2
   355 2D6D AD D0 3B			lda FILEPOS.RESULT+3
   356 2D70 8D DD 3B			sta I+3
   357 				; BlockRead
   358
   359 				; optimize OK (SYSTEM), line = 1165
   360
   361 2D73 AC D7 3B 84 82 AC + 	mwy F :bp2
   362 2D7D A0 06			ldy #s@file.buffer
   363 2D7F AD E0 2D			lda BF
   364 2D82 91 82			sta (:bp2),y
   365 2D84 C8				iny
   366 2D85 AD E1 2D			lda BF+1
   367 2D88 91 82			sta (:bp2),y
   368 2D8A A0 08			ldy #s@file.nrecord
   369 2D8C A9 01			lda #$01
   370 2D8E 91 82			sta (:bp2),y
   371 2D90 C8				iny
   372 2D91 A9 00			lda #$00
   373 2D93 91 82			sta (:bp2),y
   374
   375 2D95 8A 48			txa:pha
   376 2D97 38				sec
   377 					@readfile F, #7
   377 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
   377 2D98 AC D8 3B		 LDY F+1
   377 2D9B AD D7 3B		 LDA F
   377 2D9E A2 07		 LDX# 7
   377 2DA0 20 9B 21		 JSR @READFILE
   378 2DA3 68 AA			pla:tax
   379
   380 				; optimize OK (SYSTEM), line = 1167
   381
   382 2DA5 AD D7 3B			lda F
   383 2DA8 8D D1 3B			sta SEEK.F
   384 2DAB AD D8 3B			lda F+1
   385 2DAE 8D D2 3B			sta SEEK.F+1
   386 2DB1 AD DA 3B			lda I
   387 2DB4 8D D3 3B			sta SEEK.A
   388 2DB7 AD DB 3B			lda I+1
   389 2DBA 8D D4 3B			sta SEEK.A+1
   390 2DBD AD DC 3B			lda I+2
   391 2DC0 8D D5 3B			sta SEEK.A+2
   392 2DC3 AD DD 3B			lda I+3
   393 2DC6 8D D6 3B			sta SEEK.A+3
   394 2DC9 20 F0 2C			jsr SEEK
   395
   396 				; -------------------  ASM Block 00000013  -------------------
   397
   398 2DCC AD D7 3B 85 82 AD + 	mwa f :bp2
   399
   400 2DD6 A0 05			ldy #s@file.status
   401 2DD8 B1 82			lda (:bp2),y
   402 2DDA 29 01			and #e@file.eof
   403 2DDC 8D D9 3B			sta Result
   404
   405 2DDF			@exit
   406
   407 				; ------------------------------------------------------------
   408
   409 = 3BD7			F	= DATAORIGIN+$0017
   410 = 3BD9			RESULT	= DATAORIGIN+$0019
   411 = 3BDA			I	= DATAORIGIN+$001A
   412 = 3BDE			adr.BF	= [DATAORIGIN+$001E] .array [256]
   413 2DDF			.var BF	= adr.BF .word
   414
   415 = 3BD7			@VarData	= F
   416 = 0106			@VarDataSize	= 262
   417
   418 2DDF 60				rts						; ret
   419 = 2DE0 DE 3B		BF
   419 				.endl
   420
   421 2DE2			.local	FILLCHAR_0129					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   422
   423 					.MACRO m@INLINE
   424 				
   425 				; -------------------  ASM Block 00000021  -------------------
   426 				
   427 					jsr @fill
   428 				
   429 					.ENDM
   430
   431 				; ------------------------------------------------------------
   432
   433 = 0088			A	= :EDX
   434 = 008C			COUNT	= :ECX
   435 = 0084			VALUE	= :EAX
   436 2DE2			@exit
   437 				.endl
   438
   439 2DE2			.local	MOVE_012A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   440
   441 					.MACRO m@INLINE
   442 				
   443 				; -------------------  ASM Block 00000028  -------------------
   444 				
   445 					jsr @move
   446 				
   447 					.ENDM
   448
   449 				; ------------------------------------------------------------
   450
   451 = 0088			SOURCE	= :EDX
   452 = 008C			DEST	= :ECX
   453 = 0084			COUNT	= :EAX
   454 2DE2			@exit
   455 				.endl
   456
   457 2DE2			.local	PARAMCOUNT					; FUNCTION | ASSEMBLER
   458
   459 				; -------------------  ASM Block 00000044  -------------------
   460
   461 					@cmdline #255
   461 				 LDA# 255\ JSR @CMDLINE
   461 2DE2 A9 FF		 LDA# 255
   461 2DE4 20 63 22		 JSR @CMDLINE
   462 2DE7 8D DE 3C			sta Result
   463
   464 2DEA			@exit
   465
   466 				; ------------------------------------------------------------
   467
   468 = 3CDE			RESULT	= DATAORIGIN+$011E
   469 2DEA 60				rts						; ret
   470 				.endl
   471
   472 2DEB			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   473 2DEB 8D DF 3C			sta I
   474
   475 				; -------------------  ASM Block 00000045  -------------------
   476
   477 					@cmdline i
   477 				 LDA I\ JSR @CMDLINE
   477 2DEE AD DF 3C		 LDA I
   477 2DF1 20 63 22		 JSR @CMDLINE
   478
   479 				;	@move #@buf Result #33
   480 2DF4 A0 DF			ldy #256-33
   481 2DF6 B9 21 03 99 01 3C + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   482
   483 2DFF			@exit
   484
   485 				; ------------------------------------------------------------
   486
   487 = 3CDF			I	= DATAORIGIN+$011F
   488 = 3CE0			adr.RESULT	= [DATAORIGIN+$0120] .array [33]
   489 2DFF			.var RESULT	= adr.RESULT .word
   490
   491 = 3CDF			@VarData	= I
   492 = 0022			@VarDataSize	= 34
   493
   494 2DFF 60				rts						; ret
   495 = 2E00 E0 3C		RESULT
   495 				.endl
   496
   497 				; ------------------------------------------------------------
   498
   499 = 0101			__PORTB_BANKS	= $0101
   500 = 0648			M_PI_2	= $0648
   501 = 0192			D_PI_2	= $0192
   502 = 0004			D_PI_180	= $04
   503 = 0000			MGTIA	= $00
   504 = 0080			MVBXE	= $80
   505 = 0000			VBXE_XDLADR	= $00
   506 = 00E0			VBXE_BCBTMP	= $E0
   507 = 0100			VBXE_BCBADR	= $0100
   508 = 1000			VBXE_MAPADR	= $1000
   509 = 1000			VBXE_CHBASE	= $1000
   510 = 5000			VBXE_OVRADR	= $5000
   511 = B000			VBXE_WINDOW	= $B000
   512 = 0000			IDLI	= $00
   513 = 0001			IVBL	= $01
   514 = 0002			ITIM1	= $02
   515 = 0003			ITIM2	= $03
   516 = 0004			ITIM4	= $04
   517 = 00FE			CH_DELCHR	= $FE
   518 = 009B			CH_ENTER	= $9B
   519 = 001B			CH_ESC	= $1B
   520 = 001C			CH_CURS_UP	= $1C
   521 = 001D			CH_CURS_DOWN	= $1D
   522 = 001E			CH_CURS_LEFT	= $1E
   523 = 001F			CH_CURS_RIGHT	= $1F
   524 = 007F			CH_TAB	= $7F
   525 = 009B			CH_EOL	= $9B
   526 = 007D			CH_CLR	= $7D
   527 = 00FD			CH_BELL	= $FD
   528 = 007E			CH_DEL	= $7E
   529 = 009C			CH_DELLINE	= $9C
   530 = 009D			CH_INSLINE	= $9D
   531 = 0000			PAL_PMCOLOR0	= $00
   532 = 0001			PAL_PMCOLOR1	= $01
   533 = 0002			PAL_PMCOLOR2	= $02
   534 = 0003			PAL_PMCOLOR3	= $03
   535 = 0004			PAL_COLOR0	= $04
   536 = 0005			PAL_COLOR1	= $05
   537 = 0006			PAL_COLOR2	= $06
   538 = 0007			PAL_COLOR3	= $07
   539 = 0008			PAL_COLBAK	= $08
   540 = 0000			COLOR_BLACK	= $00
   541 = 000E			COLOR_WHITE	= $0E
   542 = 0032			COLOR_RED	= $32
   543 = 0096			COLOR_CYAN	= $96
   544 = 0068			COLOR_VIOLET	= $68
   545 = 00C4			COLOR_GREEN	= $C4
   546 = 0074			COLOR_BLUE	= $74
   547 = 00EE			COLOR_YELLOW	= $EE
   548 = 0028			COLOR_ORANGE	= $28
   549 = 00E4			COLOR_BROWN	= $E4
   550 = 003C			COLOR_LIGHTRED	= $3C
   551 = 0004			COLOR_GRAY1	= $04
   552 = 0006			COLOR_GRAY2	= $06
   553 = 000A			COLOR_GRAY3	= $0A
   554 = 00CC			COLOR_LIGHTGREEN	= $CC
   555 = 007C			COLOR_LIGHTBLUE	= $7C
   556 = 0004			FMOPENREAD	= $04
   557 = 0008			FMOPENWRITE	= $08
   558 = 0009			FMOPENAPPEND	= $09
   559 = 000C			FMOPENREADWRITE	= $0C
   560 = 3BC0			SCREENWIDTH	= DATAORIGIN+$0000
   561 = 3BC2			SCREENHEIGHT	= DATAORIGIN+$0002
   562 = 3BC4			DATESEPARATOR	= DATAORIGIN+$0004
   563 = D20A			RND	= $D20A
   564 = 02C0			adr.PALETTE	= $02C0
   565 2E02			.var PALETTE	= adr.PALETTE .word
   566 = D012			adr.HPALETTE	= $D012
   567 2E02			.var HPALETTE	= adr.HPALETTE .word
   568 = 3BC5			FILEMODE	= DATAORIGIN+$0005
   569 = 3BC6			GRAPHMODE	= DATAORIGIN+$0006
   570 = 3BC7			IORESULT	= DATAORIGIN+$0007
   571 = 3BC8			EOLN	= DATAORIGIN+$0008
   572 = 3BC9			RNDSEED	= DATAORIGIN+$0009
   573
   574 = 2E02 C0 02		PALETTE
   574 = 2E04 12 D0		HPALETTE
   574 				.endl							; UNIT SYSTEM
   575
   576 				; ------------------------------------------------------------
   577
   578 2E06			.local	MC6850						; UNIT
   579
   580 2E06			.local	MC6850_RESET					; PROCEDURE
   581
   582 				; optimize OK (MC6850), line = 70
   583
   584 2E06 A9 03			lda #$03
   585 2E08 8D 00 D5			sta MC6850_CNTRREG
   586 2E0B			@exit
   587 					.ifdef @new
   588 					lda <@VarData
   589 					sta :ztmp
   590 					lda >@VarData
   591 					ldy #@VarDataSize-1
   592 					jmp @FreeMem
   593 					els
   594 2E0B 60				rts						; ret
   595 					eif
   596 				.endl
   597
   598 2E0C			.local	MC6850_INIT					; PROCEDURE
   599 2E0C 8D 01 3D			sta SETUP
   600
   601 				; optimize OK (MC6850), line = 75
   602
   603 2E0F 8D 00 D5			sta MC6850_CNTRREG
   604
   605 				; ------------------------------------------------------------
   606
   607 = 3D01			SETUP	= DATAORIGIN+$0141
   608
   609 = 3D01			@VarData	= SETUP
   610 = 0001			@VarDataSize	= 1
   611
   612 2E12			@exit
   613 					.ifdef @new
   614 					lda <@VarData
   615 					sta :ztmp
   616 					lda >@VarData
   617 					ldy #@VarDataSize-1
   618 					jmp @FreeMem
   619 					els
   620 2E12 60				rts						; ret
   621 					eif
   622 				.endl
   623
   624 2E13			.local	MC6850_SEND					; PROCEDURE
   625 2E13 8D 02 3D			sta DATA
   626
   627 				; --- RepeatUntilProlog
   628 2E16			l_016D
   629
   630 				; optimize OK (MC6850), line = 87
   631
   632 2E16 AD 00 D5			lda MC6850_CNTRREG
   633 2E19 29 02			and #$02
   634 2E1B F0 F9			jeq l_016D
   635
   636 				; optimize OK (MC6850), line = 88
   637
   638 2E1D AD 02 3D			lda DATA
   639 2E20 8D 01 D5			sta MC6850_BUFFER
   640
   641 				; ------------------------------------------------------------
   642
   643 = 3D02			DATA	= DATAORIGIN+$0142
   644
   645 = 3D02			@VarData	= DATA
   646 = 0001			@VarDataSize	= 1
   647
   648 2E23			@exit
   649 					.ifdef @new
   650 					lda <@VarData
   651 					sta :ztmp
   652 					lda >@VarData
   653 					ldy #@VarDataSize-1
   654 					jmp @FreeMem
   655 					els
   656 2E23 60				rts						; ret
   657 					eif
   658 				.endl
   659
   660 				; ------------------------------------------------------------
   661
   662 = D500			MC6850_BASE	= $D500
   663 = D500			ADDR_MC6850_CNTRREG	= $D500
   664 = D501			ADDR_MC6850_BUFFER	= $D501
   665 = D500			ADDR_MC6850_STATREG	= $D500
   666 = 0001			CR0	= $01
   667 = 0002			CR1	= $02
   668 = 0004			CR2	= $04
   669 = 0008			CR3	= $08
   670 = 0010			CR4	= $10
   671 = 0020			CR5	= $20
   672 = 0040			CR6	= $40
   673 = 0080			CR7	= $80
   674 = 0000			CD_1	= $00
   675 = 0001			CD_16	= $01
   676 = 0002			CD_64	= $02
   677 = 0003			MASTERRESET	= $03
   678 = 0000			WS_7BITS	= $00
   679 = 0010			WS_8BITS	= $10
   680 = 0000			WS_2BITSTOP	= $00
   681 = 0008			WS_1BITSTOP	= $08
   682 = 0000			WS_EVENPARITY	= $00
   683 = 0004			WS_ODDPARITY	= $04
   684 = 0000			TC_RTSLOW_NOTIRQ	= $00
   685 = 0020			TC_RTSLOW_TIRQ	= $20
   686 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   687 = 0060			TC_BREAKLEVEL	= $60
   688 = 0000			NOIRQ_RECEIVE	= $00
   689 = 0080			IRQ_RECEIVE	= $80
   690 = 0001			RDRF	= $01
   691 = 0002			TDRE	= $02
   692 = 0004			DCD	= $04
   693 = 0008			CTS	= $08
   694 = 0010			FE	= $10
   695 = 0020			OVRN	= $20
   696 = 0040			PE	= $40
   697 = 0080			IRQ	= $80
   698 = D500			MC6850_CNTRREG	= $D500
   699 = D501			MC6850_BUFFER	= $D501
   700 = D500			MC6850_STATREG	= $D500
   701 = 00FF			MC_BYTE	= $FF
   702
   703 				.endl							; UNIT MC6850
   704
   705 				; ------------------------------------------------------------
   706
   707 2E24			.local	DOS						; UNIT
   708
   709 				; ------------------------------------------------------------
   710
   711 = D014			PALNTSC	= $D014
   712
   713 				.endl							; UNIT DOS
   714
   715 				; ------------------------------------------------------------
   716
   717 2E24			.local	STRUTILS					; UNIT
   718
   719 				; ------------------------------------------------------------
   720
   721 				.endl							; UNIT STRUTILS
   722
   723 				; ------------------------------------------------------------
   724
   725 2E24			.local	SYSUTILS					; UNIT
   726
   727 				; ------------------------------------------------------------
   728
   729 = 0001			FAREADONLY	= $01
   730 = 0002			FAHIDDEN	= $02
   731 = 0004			FASYSFILE	= $04
   732 = 0008			FAVOLUMEID	= $08
   733 = 0010			FADIRECTORY	= $10
   734 = 0020			FAARCHIVE	= $20
   735 = 003F			FAANYFILE	= $3F
   736
   737 				.endl							; UNIT SYSUTILS
   738
   739 				; ------------------------------------------------------------
   740
   741 2E24			.local	MIDI_FIFO					; UNIT
   742
   743 2E24			.local	FIFO_RESET					; PROCEDURE
   744
   745 				; optimize OK (MIDI_FIFO), line = 27
   746
   747 2E24 A9 00			lda #$00
   748 2E26 85 FD			sta FIFO_HEAD
   749
   750 				; optimize OK (MIDI_FIFO), line = 28
   751
   752 2E28 85 FE			sta FIFO_TAIL
   753
   754 				; optimize OK (MIDI_FIFO), line = 29
   755
   756 2E2A 85 88			sta SYSTEM.FILLCHAR_0129.A
   757 2E2C A9 06			lda #$06
   758 2E2E 85 89			sta SYSTEM.FILLCHAR_0129.A+1
   759 2E30 A9 00			lda #$00
   760 2E32 85 8C			sta SYSTEM.FILLCHAR_0129.COUNT
   761 2E34 A9 01			lda #$01
   762 2E36 85 8D			sta SYSTEM.FILLCHAR_0129.COUNT+1
   763 2E38 A9 00			lda #$00
   764 2E3A 85 84			sta SYSTEM.FILLCHAR_0129.VALUE
   765 2E3C				.local +MAIN.SYSTEM.FILLCHAR_0129
   766 2E3C				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0129.M@INLINE [Source: MIDICar Player.a65]
     4 2E3C 20 C2 24			jsr @fill
Source: MIDICar Player.a65
   767 					.endl
   768 2E3F			@exit
   769 					.ifdef @new
   770 					lda <@VarData
   771 					sta :ztmp
   772 					lda >@VarData
   773 					ldy #@VarDataSize-1
   774 					jmp @FreeMem
   775 					els
   776 2E3F 60				rts						; ret
   777 					eif
   778 				.endl
   779
   780 2E40			.local	FIFO_READBYTE					; PROCEDURE
   781
   782 				; optimize OK (MIDI_FIFO), line = 34
   783
   784 2E40 A4 FE			ldy FIFO_TAIL
   785 2E42 C4 FD			cpy FIFO_HEAD
   786 2E44 F0 07			jeq l_01DF
   787
   788 				; optimize OK (MIDI_FIFO), line = 36
   789
   790 2E46 B9 00 06			lda adr.FIFO_BUF,y
   791 2E49 85 FF			sta FIFO_BYTE
   792
   793 				; optimize FAIL (0, MIDI_FIFO), line = 37
   794
   795 2E4B E6 FE			inc FIFO_TAIL
   796 2E4D			l_01DF
   797 2E4D			@exit
   798 					.ifdef @new
   799 					lda <@VarData
   800 					sta :ztmp
   801 					lda >@VarData
   802 					ldy #@VarDataSize-1
   803 					jmp @FreeMem
   804 					els
   805 2E4D 60				rts						; ret
   806 					eif
   807 				.endl
   808
   809 2E4E			.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER | INLINE
   810
   811 					.MACRO m@INLINE
   812 				
   813 				; -------------------  ASM Block 00000070  -------------------
   814 				
   815 				  lda FIFO_Head
   816 				  clc
   817 				  adc #1
   818 				  cmp FIFO_Tail
   819 				  bne storeInFIFO
   820 				  rts
   821 				
   822 				storeInFIFO:
   823 				  ldy FIFO_Head
   824 				  lda FIFO_Byte
   825 				  sta FIFO_ADDR,y
   826 				  iny
   827 				  sty FIFO_Head
   828 				exitWrite:
   829 				
   830 					.ENDM
   831 2E4E			@exit
   832 				.endl
   833
   834 2E4E			.local	FIFO_SEND					; PROCEDURE
   835
   836 				; optimize OK (MIDI_FIFO), line = 65
   837
   838 2E4E AD 03 3D			lda DATA
   839 2E51 8D 06 3D			sta P
   840 2E54 AD 04 3D			lda DATA+1
   841 2E57 8D 07 3D			sta P+1
   842
   843 				; --- WhileProlog
   844 2E5A 4C 8C 2E			jmp l_01FB
   845 2E5D			l_01FC
   846
   847 				; optimize OK (MIDI_FIFO), line = 68
   848
   849 2E5D AC 06 3D 84 82 AC + 	mwy P :bp2
   850 2E67 A0 00			ldy #$00
   851 2E69 B1 82			lda (:bp2),y
   852 2E6B 85 FF			sta FIFO_BYTE
   853 2E6D				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
   854 2E6D				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 2E6D A5 FD		  lda FIFO_Head
     5 2E6F 18			  clc
     6 2E70 69 01		  adc #1
     7 2E72 C5 FE		  cmp FIFO_Tail
     8 2E74 D0 01		  bne storeInFIFO
     9 2E76 60			  rts
    11 2E77			storeInFIFO:
    12 2E77 A4 FD		  ldy FIFO_Head
    13 2E79 A5 FF		  lda FIFO_Byte
    14 2E7B 99 00 06		  sta FIFO_ADDR,y
    15 2E7E C8			  iny
    16 2E7F 84 FD		  sty FIFO_Head
    17 2E81			exitWrite:
Source: MIDICar Player.a65
   855 					.endl
   856
   857 				; optimize FAIL (0, MIDI_FIFO), line = 69
   858
   859 2E81 EE 06 3D			inc P
   860 2E84 D0 03			sne
   861 2E86 EE 07 3D			inc P+1
   862 2E89 CE 05 3D			dec LEN
   863 2E8C			l_01FB
   864
   865 				; optimize OK (MIDI_FIFO), line = 66
   866
   867 2E8C AD 05 3D			lda LEN
   868 2E8F D0 CC			jne l_01FC
   869
   870 				; ------------------------------------------------------------
   871
   872 = 3D03			DATA	= DATAORIGIN+$0143
   873 = 3D05			LEN	= DATAORIGIN+$0145
   874 = 3D06			P	= DATAORIGIN+$0146
   875
   876 = 3D03			@VarData	= DATA
   877 = 0005			@VarDataSize	= 5
   878
   879 2E91			@exit
   880 					.ifdef @new
   881 					lda <@VarData
   882 					sta :ztmp
   883 					lda >@VarData
   884 					ldy #@VarDataSize-1
   885 					jmp @FreeMem
   886 					els
   887 2E91 60				rts						; ret
   888 					eif
   889 				.endl
   890
   891 2E92			.local	FIFO_FLUSH					; PROCEDURE
   892
   893 				; --- WhileProlog
   894 2E92 4C A1 2E			jmp l_021D
   895 2E95			l_021E
   896
   897 				; optimize OK (MIDI_FIFO), line = 77
   898
   899 2E95 A4 FE			ldy FIFO_TAIL
   900 2E97 B9 00 06			lda adr.FIFO_BUF,y
   901 2E9A 85 FF			sta FIFO_BYTE
   902
   903 				; optimize OK (MIDI_FIFO), line = 81
   904
   905 2E9C 20 13 2E			jsr MC6850.MC6850_SEND
   906
   907 				; optimize FAIL (0, MIDI_FIFO), line = 82
   908
   909 2E9F E6 FE			inc FIFO_TAIL
   910 2EA1			l_021D
   911
   912 				; optimize OK (MIDI_FIFO), line = 75
   913
   914 2EA1 A5 FE			lda FIFO_TAIL
   915 2EA3 C5 FD			cmp FIFO_HEAD
   916 2EA5 D0 EE			jne l_021E
   917 2EA7			@exit
   918 					.ifdef @new
   919 					lda <@VarData
   920 					sta :ztmp
   921 					lda >@VarData
   922 					ldy #@VarDataSize-1
   923 					jmp @FreeMem
   924 					els
   925 2EA7 60				rts						; ret
   926 					eif
   927 				.endl
   928
   929 				; ------------------------------------------------------------
   930
   931 = 00FD			FIFO_HEAD	= $FD
   932 = 00FE			FIFO_TAIL	= $FE
   933 = 00FF			FIFO_BYTE	= $FF
   934 = 0600			FIFO_ADDR	= $0600
   935 = 0600			adr.FIFO_BUF	= $0600
   936 2EA8			.var FIFO_BUF	= adr.FIFO_BUF .word
   937
   938 = 2EA8 00 06		FIFO_BUF
   938 				.endl							; UNIT MIDI_FIFO
   939
   940 				; ------------------------------------------------------------
   941
   942 2EAA			.local	MIDFILES					; UNIT
   943
   944 2EAA			.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT
   945
   946 				; -------------------  ASM Block 00000071  -------------------
   947
   948 2EAA A5 F5		    lda _timerStatus
   949 2EAC 30 1C		    bmi skip
   950
   951 2EAE 29 0F		    and #f_ratio
   952 2EB0 C5 F4		    cmp _subCnt
   953 2EB2 D0 14		    bne incSubCounter
   954
   955 				    // lda _timerStatus
   956 				    // ora #f_tick
   957 				    // sta _timerStatus
   958
   959 2EB4 A9 01		    lda #1
   960 2EB6 85 F4		    sta _subCnt
   961
   962 2EB8 E6 F0		    inc _totalTicks
   963 2EBA D0 0E		    bne skip
   964 2EBC E6 F1		    inc _totalTicks+1
   965 2EBE D0 0A		    bne skip
   966 2EC0 E6 F2		    inc _totalTicks+2
   967 2EC2 D0 06		    bne skip
   968 2EC4 E6 F3		    inc _totalTicks+3
   969 2EC6 D0 02		    bne skip
   970
   971 2EC8			incSubCounter:
   972 2EC8 E6 F4		    inc _subCnt
   973
   974 2ECA			skip:
   975
   976 2ECA 68			  pla
   977
   978 2ECB 40				rti						; ret
   979 				.endl
   980
   981 2ECC			.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER
   982
   983 				; -------------------  ASM Block 00000072  -------------------
   984
   985 2ECC A5 E0		  lda _adr
   986 2ECE F0 01		  beq check1Bound
   987 2ED0 60			  rts
   988
   989 2ED1			check1Bound
   990 2ED1 A5 E1		  lda _adr+1
   991 2ED3 C9 9C		  cmp #$9c
   992 2ED5 D0 05		  bne check2Bound
   993
   994 2ED7 A9 A0		  lda #$a0
   995 2ED9 85 E1		  sta _adr+1
   996 2EDB 60			  rts
   997
   998 2EDC			check2Bound:
   999 2EDC C9 D0		  cmp #$d0
  1000 2EDE D0 05		  bne check3Bound
  1001
  1002 2EE0 A9 D8		  lda #$d8
  1003 2EE2 85 E1		  sta _adr+1
  1004 2EE4 60			  rts
  1005
  1006 2EE5			check3Bound:
  1007 2EE5 C9 E0		  cmp #$e0
  1008 2EE7 D0 05		  bne check4Bound
  1009
  1010 2EE9 A9 E4		  lda #$e4
  1011 2EEB 85 E1		  sta _adr+1
  1012 2EED 60			  rts
  1013
  1014 2EEE			check4bound
  1015 2EEE C9 FF		  cmp #$ff
  1016 2EF0 F0 01		  beq outOfMem
  1017 2EF2 60			  rts
  1018
  1019 2EF3			outOfMem:
  1020 2EF3 A9 65		  lda #ERR_NOT_ENOUGHT_MEMORY
  1021 2EF5 8D C7 3B		  sta SYSTEM.IOResult
  1022 				  // jmp @halt
  1023
  1024 2EF8			@exit
  1025 					.ifdef @new
  1026 					lda <@VarData
  1027 					sta :ztmp
  1028 					lda >@VarData
  1029 					ldy #@VarDataSize-1
  1030 					jmp @FreeMem
  1031 					els
  1032 2EF8 60				rts						; ret
  1033 					eif
  1034 				.endl
  1035
  1036 2EF9			.local	WORDBI						; FUNCTION
  1037
  1038 				; optimize OK (bigindian.inc), line = 6
  1039
  1040 2EF9 A9 1D			lda <RESULT
  1041 2EFB 8D 1F 3D			sta RESULTPTR
  1042 2EFE A9 3D			lda >RESULT
  1043 2F00 8D 20 3D			sta RESULTPTR+1
  1044
  1045 				; optimize OK (bigindian.inc), line = 7
  1046
  1047 2F03 AC 1B 3D 84 82 AC + 	mwy BI :bp2
  1048 2F0D A0 01			ldy #$01
  1049 2F0F B1 82			lda (:bp2),y
  1050 2F11 AC 20 3D 84 81		mvy RESULTPTR+1 :bp+1
  1051 2F16 AC 1F 3D			ldy RESULTPTR
  1052 2F19 91 80			sta (:bp),y
  1053 2F1B EE 1F 3D			inc RESULTPTR
  1054 2F1E D0 03			sne
  1055 2F20 EE 20 3D			inc RESULTPTR+1
  1056
  1057 				; optimize OK (bigindian.inc), line = 8
  1058
  1059 2F23 A0 00			ldy #$00
  1060 2F25 B1 82			lda (:bp2),y
  1061 2F27 AC 20 3D 84 81		mvy RESULTPTR+1 :bp+1
  1062 2F2C AC 1F 3D			ldy RESULTPTR
  1063 2F2F 91 80			sta (:bp),y
  1064 2F31			@exit
  1065
  1066 				; ------------------------------------------------------------
  1067
  1068 = 3D1B			BI	= DATAORIGIN+$015B
  1069 = 3D1D			RESULT	= DATAORIGIN+$015D
  1070 = 3D1F			RESULTPTR	= DATAORIGIN+$015F
  1071
  1072 = 3D1B			@VarData	= BI
  1073 = 0004			@VarDataSize	= 4
  1074
  1075 2F31 60				rts						; ret
  1076 				.endl
  1077
  1078 2F32			.local	LONGBI						; FUNCTION
  1079
  1080 				; optimize OK (bigindian.inc), line = 17
  1081
  1082 2F32 A9 23			lda <RESULT
  1083 2F34 8D 27 3D			sta RESULTPTR
  1084 2F37 A9 3D			lda >RESULT
  1085 2F39 8D 28 3D			sta RESULTPTR+1
  1086
  1087 				; optimize OK (bigindian.inc), line = 18
  1088
  1089 2F3C A9 03			lda #$03
  1090 2F3E 8D 29 3D			sta I
  1091
  1092 2F41			l_026A
  1093 				; --- ForToDoCondition
  1094
  1095 				; optimize OK (bigindian.inc), line = 20
  1096
  1097 2F41 AC 21 3D 84 82 AC + 	mwy BI :bp2
  1098 2F4B AC 29 3D			ldy I
  1099 2F4E B1 82			lda (:bp2),y
  1100 2F50 AC 28 3D 84 81		mvy RESULTPTR+1 :bp+1
  1101 2F55 AC 27 3D			ldy RESULTPTR
  1102 2F58 91 80			sta (:bp),y
  1103
  1104 				; optimize FAIL (0, bigindian.inc), line = 21
  1105
  1106 2F5A EE 27 3D			inc RESULTPTR
  1107 2F5D D0 03			sne
  1108 2F5F EE 28 3D			inc RESULTPTR+1
  1109
  1110 				; --- ForToDoEpilog
  1111 2F62 CE 29 3D			dec I
  1112 2F65 10 DA			jpl l_026A
  1113 2F67			l_0278
  1114 2F67			@exit
  1115
  1116 				; ------------------------------------------------------------
  1117
  1118 = 3D21			BI	= DATAORIGIN+$0161
  1119 = 3D23			RESULT	= DATAORIGIN+$0163
  1120 = 3D27			RESULTPTR	= DATAORIGIN+$0167
  1121 = 3D29			I	= DATAORIGIN+$0169
  1122
  1123 = 3D21			@VarData	= BI
  1124 = 0005			@VarDataSize	= 5
  1125
  1126 2F67 60				rts						; ret
  1127 				.endl
  1128
  1129 2F68			.local	LOADMID						; FUNCTION
  1130
  1131 2F68 4C 13 30			jmp l_028E
  1132
  1133 2F6B			.local	READWORDBI					; FUNCTION
  1134
  1135 				; BlockRead
  1136
  1137 				; optimize OK (MIDFILES), line = 110
  1138
  1139 2F6B AC 1F 34 84 82 AC + 	mwy F :bp2
  1140 2F75 A0 06			ldy #s@file.buffer
  1141 2F77 AD 40 39			lda BI
  1142 2F7A 91 82			sta (:bp2),y
  1143 2F7C C8				iny
  1144 2F7D AD 41 39			lda BI+1
  1145 2F80 91 82			sta (:bp2),y
  1146 2F82 A0 08			ldy #s@file.nrecord
  1147 2F84 A9 02			lda #$02
  1148 2F86 91 82			sta (:bp2),y
  1149 2F88 C8				iny
  1150 2F89 A9 00			lda #$00
  1151 2F8B 91 82			sta (:bp2),y
  1152
  1153 2F8D 8A 48			txa:pha
  1154 2F8F 38				sec
  1155 					@readfile F, #7
  1155 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1155 2F90 AC 20 34		 LDY F+1
  1155 2F93 AD 1F 34		 LDA F
  1155 2F96 A2 07		 LDX# 7
  1155 2F98 20 9B 21		 JSR @READFILE
  1156 2F9B 68 AA			pla:tax
  1157
  1158 				; optimize OK (MIDFILES), line = 111
  1159
  1160 2F9D AD 40 39			lda BI
  1161 2FA0 8D 1B 3D			sta WORDBI.BI
  1162 2FA3 AD 41 39			lda BI+1
  1163 2FA6 8D 1C 3D			sta WORDBI.BI+1
  1164 2FA9 20 F9 2E			jsr WORDBI
  1165 2FAC AD 1D 3D			lda WORDBI.RESULT
  1166 2FAF 8D 4C 3D			sta RESULT
  1167 2FB2 AD 1E 3D			lda WORDBI.RESULT+1
  1168 2FB5 8D 4D 3D			sta RESULT+1
  1169 2FB8			@exit
  1170
  1171 				; ------------------------------------------------------------
  1172
  1173 = 3D4C			RESULT	= DATAORIGIN+$018C
  1174 2FB8 60				rts						; ret
  1175 				.endl
  1176
  1177 2FB9			.local	READLONGBI					; FUNCTION
  1178
  1179 				; BlockRead
  1180
  1181 				; optimize OK (MIDFILES), line = 116
  1182
  1183 2FB9 AC 1F 34 84 82 AC + 	mwy F :bp2
  1184 2FC3 A0 06			ldy #s@file.buffer
  1185 2FC5 AD 40 39			lda BI
  1186 2FC8 91 82			sta (:bp2),y
  1187 2FCA C8				iny
  1188 2FCB AD 41 39			lda BI+1
  1189 2FCE 91 82			sta (:bp2),y
  1190 2FD0 A0 08			ldy #s@file.nrecord
  1191 2FD2 A9 04			lda #$04
  1192 2FD4 91 82			sta (:bp2),y
  1193 2FD6 C8				iny
  1194 2FD7 A9 00			lda #$00
  1195 2FD9 91 82			sta (:bp2),y
  1196
  1197 2FDB 8A 48			txa:pha
  1198 2FDD 38				sec
  1199 					@readfile F, #7
  1199 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1199 2FDE AC 20 34		 LDY F+1
  1199 2FE1 AD 1F 34		 LDA F
  1199 2FE4 A2 07		 LDX# 7
  1199 2FE6 20 9B 21		 JSR @READFILE
  1200 2FE9 68 AA			pla:tax
  1201
  1202 				; optimize OK (MIDFILES), line = 117
  1203
  1204 2FEB AD 40 39			lda BI
  1205 2FEE 8D 21 3D			sta LONGBI.BI
  1206 2FF1 AD 41 39			lda BI+1
  1207 2FF4 8D 22 3D			sta LONGBI.BI+1
  1208 2FF7 20 32 2F			jsr LONGBI
  1209 2FFA AD 23 3D			lda LONGBI.RESULT
  1210 2FFD 8D 4E 3D			sta RESULT
  1211 3000 AD 24 3D			lda LONGBI.RESULT+1
  1212 3003 8D 4F 3D			sta RESULT+1
  1213 3006 AD 25 3D			lda LONGBI.RESULT+2
  1214 3009 8D 50 3D			sta RESULT+2
  1215 300C AD 26 3D			lda LONGBI.RESULT+3
  1216 300F 8D 51 3D			sta RESULT+3
  1217 3012			@exit
  1218
  1219 				; ------------------------------------------------------------
  1220
  1221 = 3D4E			RESULT	= DATAORIGIN+$018E
  1222 3012 60				rts						; ret
  1223 				.endl
  1224 3013			l_028E
  1225
  1226 				; optimize OK (MIDFILES), line = 121
  1227
  1228 3013 AD 3E 39			lda MIDTRACKS
  1229 3016 8D 4A 3D			sta NTRKREC
  1230 3019 AD 3F 39			lda MIDTRACKS+1
  1231 301C 8D 4B 3D			sta NTRKREC+1
  1232
  1233 				; optimize FAIL ('@print', MIDFILES), line = 122
  1234
  1235 					@printSTRING #CODEORIGIN+$000D
  1235 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
  1235 301F A0 20		 LDY> CODEORIGIN+$000D
  1235 3021 A9 0D		 LDA< CODEORIGIN+$000D
  1235 3023 20 03 2B		 JSR @PRINTSTRING
  1236 					@printSTRING FN
  1236 				 LDY FN+1\ LDA FN\ JSR @PRINTSTRING
  1236 3026 AC 2B 3D		 LDY FN+1
  1236 3029 AD 2A 3D		 LDA FN
  1236 302C 20 03 2B		 JSR @PRINTSTRING
  1237 302F 20 EF 2A			@printEOL
  1238 				; AssignFile
  1239
  1240 				; optimize OK (MIDFILES), line = 124
  1241
  1242 3032 AC 1F 34 84 82 AC + 	mwy F :bp2
  1243 303C A0 00			ldy #s@file.pfname
  1244 303E AD 2A 3D			lda FN
  1245 3041 91 82			sta (:bp2),y
  1246 3043 C8				iny
  1247 3044 AD 2B 3D			lda FN+1
  1248 3047 91 82			sta (:bp2),y
  1249 3049 A0 05			ldy #s@file.status
  1250 304B A9 00			lda #$00
  1251 304D 91 82			sta (:bp2),y
  1252 				; Reset
  1253
  1254 				; optimize OK (MIDFILES), line = 125
  1255
  1256 304F A0 02			ldy #s@file.record
  1257 3051 A9 01			lda #$01
  1258 3053 91 82			sta (:bp2),y
  1259 3055 C8				iny
  1260 3056 A9 00			lda #$00
  1261 3058 91 82			sta (:bp2),y
  1262
  1263 305A 8A 48			txa:pha
  1264 305C 18				clc
  1265 					@openfile F, MAIN.SYSTEM.FileMode
  1265 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  1265 305D AC 20 34		 LDY F+1
  1265 3060 AD 1F 34		 LDA F
  1265 3063 AE C5 3B		 LDX MAIN.SYSTEM.FILEMODE
  1265 3066 20 CC 20		 JSR @OPENFILE
  1266 3069 68 AA			pla:tax
  1267
  1268 				; optimize OK (MIDFILES), line = 126
  1269
  1270 306B AD C7 3B			lda SYSTEM.IORESULT
  1271 306E 10 14			jpl l_02E1
  1272
  1273 				; optimize OK (MIDFILES), line = 128
  1274
  1275 3070 8D 2C 3D			sta RESULT
  1276 				; CloseFile
  1277
  1278 3073 8A 48			txa:pha
  1279 3075 18				clc
  1280 					@closefile F
  1280 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1280 3076 AC 20 34		 LDY F+1
  1280 3079 AD 1F 34		 LDA F
  1280 307C 20 68 21		 JSR @CLOSEFILE
  1281 307F 68 AA			pla:tax
  1282
  1283 3081 4C 1E 34			jmp @exit					; exit
  1284 3084			l_02E1
  1285
  1286 				; optimize OK (MIDFILES), line = 133
  1287
  1288 3084 A9 00			lda #$00
  1289 3086 8D 39 3D			sta TRACKCOUNT
  1290 3089 8D 3A 3D			sta TRACKCOUNT+1
  1291
  1292 				; optimize OK (MIDFILES), line = 134
  1293
  1294 308C A9 FF			lda #$FF
  1295 308E 8D 0D 3D			sta NTRACKS
  1296 3091 A9 00			lda #$00
  1297 3093 8D 0E 3D			sta NTRACKS+1
  1298
  1299 				; optimize OK (MIDFILES), line = 135
  1300
  1301 3096 AD 08 3D			lda MIDDATA
  1302 3099 85 E0			sta _ADR
  1303 309B AD 09 3D			lda MIDDATA+1
  1304 309E 85 E1			sta _ADR+1
  1305
  1306 				; --- WhileProlog
  1307 30A0 4C B7 33			jmp l_02F9
  1308 30A3			l_02FA
  1309 				; BlockRead
  1310
  1311 				; optimize OK (MIDFILES), line = 139
  1312
  1313 30A3 AC 1F 34 84 82 AC + 	mwy F :bp2
  1314 30AD A0 06			ldy #s@file.buffer
  1315 30AF A9 3B			lda <CHUNKTAG
  1316 30B1 91 82			sta (:bp2),y
  1317 30B3 C8				iny
  1318 30B4 A9 3D			lda >CHUNKTAG
  1319 30B6 91 82			sta (:bp2),y
  1320 30B8 A0 08			ldy #s@file.nrecord
  1321 30BA A9 04			lda #$04
  1322 30BC 91 82			sta (:bp2),y
  1323 30BE C8				iny
  1324 30BF A9 00			lda #$00
  1325 30C1 91 82			sta (:bp2),y
  1326 30C3 A0 0A			ldy #s@file.numread
  1327 30C5 A9 3F			lda <V
  1328 30C7 91 82			sta (:bp2),y
  1329 30C9 C8				iny
  1330 30CA A9 3D			lda >V
  1331 30CC 91 82			sta (:bp2),y
  1332
  1333 30CE 8A 48			txa:pha
  1334 30D0 18				clc
  1335 					@readfile F, #135
  1335 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1335 30D1 AC 20 34		 LDY F+1
  1335 30D4 AD 1F 34		 LDA F
  1335 30D7 A2 87		 LDX# 135
  1335 30D9 20 9B 21		 JSR @READFILE
  1336 30DC 68 AA			pla:tax
  1337
  1338 				; optimize OK (MIDFILES), line = 140
  1339
  1340 30DE AD 40 3D			lda V+1
  1341 30E1 D0 05			bne @+
  1342 30E3 AD 3F 3D			lda V
  1343 30E6 C9 04			cmp #$04
  1344 				@
  1345 30E8 F0 03			jeq l_0317
  1346 30EA 4C 0B 34			jmp b_02FA					; break
  1347 30ED			l_0317
  1348
  1349 				; optimize FAIL ('READLONGBI', MIDFILES), line = 141
  1350
  1351 30ED 20 B9 2F			jsr READLONGBI
  1352 30F0 AD 4E 3D			lda READLONGBI.RESULT
  1353 30F3 8D 45 3D			sta LEN
  1354 30F6 AD 4F 3D			lda READLONGBI.RESULT+1
  1355 30F9 8D 46 3D			sta LEN+1
  1356 30FC AD 50 3D			lda READLONGBI.RESULT+2
  1357 30FF 8D 47 3D			sta LEN+2
  1358 3102 AD 51 3D			lda READLONGBI.RESULT+3
  1359 3105 8D 48 3D			sta LEN+3
  1360
  1361 				; optimize OK (MIDFILES), line = 142
  1362
  1363 3108 AD 3E 3D			lda CHUNKTAG+3
  1364 310B 49 64			eor #$64
  1365 310D D0 71			jne l_032E
  1366 310F AD 3D 3D			lda CHUNKTAG+2
  1367 3112 49 68			eor #$68
  1368 3114 D0 6A			jne l_032E
  1369 3116 AD 3C 3D			lda CHUNKTAG+1
  1370 3119 49 54			eor #$54
  1371 311B D0 63			jne l_032E
  1372 311D AD 3B 3D			lda CHUNKTAG
  1373 3120 49 4D			eor #$4D
  1374 3122 D0 5C			jne l_032E
  1375
  1376 				; optimize FAIL ('READWORDBI', MIDFILES), line = 144
  1377
  1378 3124 20 6B 2F			jsr READWORDBI
  1379 3127 AD 4C 3D			lda READWORDBI.RESULT
  1380 312A 8D 0B 3D			sta FORMAT
  1381 312D AD 4D 3D			lda READWORDBI.RESULT+1
  1382 3130 8D 0C 3D			sta FORMAT+1
  1383
  1384 				; optimize OK (MIDFILES), line = 145
  1385
  1386 3133 0D 0B 3D			ora FORMAT
  1387 3136 F0 14			jeq l_034F
  1388 3138 AD 0C 3D			lda FORMAT+1
  1389 313B D0 05			bne @+
  1390 313D AD 0B 3D			lda FORMAT
  1391 3140 C9 01			cmp #$01
  1392 				@
  1393 3142 F0 08			jeq l_034F
  1394 3144 A9 64			lda #$64
  1395 3146 8D 2C 3D			sta RESULT
  1396 3149 4C 1E 34			jmp @exit					; exit
  1397 314C			l_034F
  1398
  1399 				; optimize FAIL ('READWORDBI', MIDFILES), line = 146
  1400
  1401 314C 20 6B 2F			jsr READWORDBI
  1402 314F AD 4C 3D			lda READWORDBI.RESULT
  1403 3152 8D 0D 3D			sta NTRACKS
  1404 3155 AD 4D 3D			lda READWORDBI.RESULT+1
  1405 3158 8D 0E 3D			sta NTRACKS+1
  1406
  1407 				; optimize FAIL ('READWORDBI', MIDFILES), line = 151
  1408
  1409 315B 20 6B 2F			jsr READWORDBI
  1410 315E AD 4C 3D			lda READWORDBI.RESULT
  1411 3161 8D 3F 3D			sta V
  1412 3164 AD 4D 3D			lda READWORDBI.RESULT+1
  1413 3167 8D 40 3D			sta V+1
  1414
  1415 				; optimize OK (MIDFILES), line = 152
  1416
  1417 316A 10 03			jpl l_0373
  1418 316C 4C 7D 31			jmp l_037D
  1419 316F			l_0373
  1420
  1421 				; optimize OK (MIDFILES), line = 171
  1422
  1423 316F AD 3F 3D			lda V
  1424 3172 8D 0F 3D			sta TICKDIV
  1425 3175 AD 40 3D			lda V+1
  1426 3178 29 7F			and #$7F
  1427 317A 8D 10 3D			sta TICKDIV+1
  1428 317D			l_037D
  1429 317D 4C B2 33			jmp l_038F
  1430 3180			l_032E
  1431
  1432 				; optimize OK (MIDFILES), line = 177
  1433
  1434 3180 AD 3E 3D			lda CHUNKTAG+3
  1435 3183 49 6B			eor #$6B
  1436 3185 F0 03 4C B2 33		jne l_039F
  1437 318A AD 3D 3D			lda CHUNKTAG+2
  1438 318D 49 72			eor #$72
  1439 318F F0 03 4C B2 33		jne l_039F
  1440 3194 AD 3C 3D			lda CHUNKTAG+1
  1441 3197 49 54			eor #$54
  1442 3199 F0 03 4C B2 33		jne l_039F
  1443 319E AD 3B 3D			lda CHUNKTAG
  1444 31A1 49 4D			eor #$4D
  1445 31A3 F0 03 4C B2 33		jne l_039F
  1446
  1447 				; optimize FAIL (0, MIDFILES), line = 179
  1448
  1449 31A8 EE 39 3D			inc TRACKCOUNT
  1450 31AB D0 03			sne
  1451 31AD EE 3A 3D			inc TRACKCOUNT+1
  1452
  1453 				; optimize FAIL ('@print', MIDFILES), line = 180
  1454
  1455 					@printSTRING #CODEORIGIN+$0019
  1455 				 LDY> CODEORIGIN+$0019\ LDA< CODEORIGIN+$0019\ JSR @PRINTSTRING
  1455 31B0 A0 20		 LDY> CODEORIGIN+$0019
  1455 31B2 A9 19		 LDA< CODEORIGIN+$0019
  1455 31B4 20 03 2B		 JSR @PRINTSTRING
  1456 31B7 AD 39 3D			lda TRACKCOUNT
  1457 31BA AC 3A 3D			ldy TRACKCOUNT+1
  1458 31BD 20 4B 2B			jsr @printWORD._ay
  1459 					@print #$2F
  1459 				 LDY# $2F\ JSR @PRINT
  1459 31C0 A0 2F		 LDY# $2F
  1459 31C2 20 F4 2A		 JSR @PRINT
  1460 31C5 AD 0D 3D			lda NTRACKS
  1461 31C8 AC 0E 3D			ldy NTRACKS+1
  1462 31CB 20 4B 2B			jsr @printWORD._ay
  1463 					@printSTRING #CODEORIGIN+$0022
  1463 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
  1463 31CE A0 20		 LDY> CODEORIGIN+$0022
  1463 31D0 A9 22		 LDA< CODEORIGIN+$0022
  1463 31D2 20 03 2B		 JSR @PRINTSTRING
  1464
  1465 				; optimize OK (MIDFILES), line = 182
  1466
  1467 31D5 AC 4A 3D 84 82 AC + 	mwy NTRKREC :bp2
  1468 31DF A0 00			ldy #$00
  1469 31E1 A5 E0			lda _ADR
  1470 31E3 91 82			sta (:bp2),y
  1471 31E5 C8				iny
  1472 31E6 A5 E1			lda _ADR+1
  1473 31E8 91 82			sta (:bp2),y
  1474
  1475 				; optimize OK (MIDFILES), line = 183
  1476
  1477 31EA C8				iny
  1478 31EB A9 00			lda #$00
  1479 31ED 91 82			sta (:bp2),y
  1480 31EF C8				iny
  1481 31F0 91 82			sta (:bp2),y
  1482 31F2 C8				iny
  1483 31F3 91 82			sta (:bp2),y
  1484 31F5 C8				iny
  1485 31F6 91 82			sta (:bp2),y
  1486
  1487 				; optimize OK (MIDFILES), line = 184
  1488
  1489 31F8 C8				iny
  1490 31F9 91 82			sta (:bp2),y
  1491
  1492 				; --- WhileProlog
  1493 31FB 4C 91 33			jmp l_03C7
  1494 31FE			l_03C8
  1495
  1496 				; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 189
  1497
  1498 31FE 20 CC 2E			jsr MEMBOUNDCHECK
  1499 3201 AD C7 3B			lda SYSTEM.IORESULT
  1500 3204 C9 01			cmp #$01
  1501 3206 F0 08			jeq l_03DB
  1502 3208 A9 65			lda #$65
  1503 320A 8D 2C 3D			sta RESULT
  1504 320D 4C 1E 34			jmp @exit					; exit
  1505 3210			l_03DB
  1506
  1507 				; optimize OK (MIDFILES), line = 191
  1508
  1509 3210				.LOCAL
  1510 3210 AD 48 3D			lda LEN+3
  1511 3213 38 E9 00			sub #$00
  1512 3216 D0 1F			bne L4
  1513 3218 AD 47 3D			lda LEN+2
  1514 321B C9 00			cmp #$00
  1515 321D D0 0C			bne L1
  1516 321F AD 46 3D			lda LEN+1
  1517 3222 C9 00			cmp #$00
  1518 3224 D0 05			bne L1
  1519 3226 AD 45 3D			lda LEN
  1520 3229 C9 80			cmp #$80
  1521 322B F0 10		L1	beq L5
  1522 322D B0 04			bcs L3
  1523 322F A9 FF			lda #$FF
  1524 3231 D0 0A			bne L5
  1525 3233 A9 01		L3	lda #$01
  1526 3235 D0 06			bne L5
  1527 3237 50 04		L4	bvc L5
  1528 3239 49 FF			eor #$FF
  1529 323B 09 01			ora #$01
  1530 323D			L5
  1531 					.ENDL
  1532 323D 30 0A			jmi l_03F2
  1533 323F F0 08			jeq l_03F2
  1534 3241 A9 80			lda #$80
  1535 3243 8D 49 3D			sta LOADSIZE
  1536 3246 4C 4F 32			jmp l_0400
  1537 3249			l_03F2
  1538 3249 AD 45 3D			lda LEN
  1539 324C 8D 49 3D			sta LOADSIZE
  1540 324F			l_0400
  1541
  1542 				; optimize OK (MIDFILES), line = 192
  1543
  1544 324F A5 E0			lda _ADR
  1545 3251 18 6D 49 3D			add LOADSIZE
  1546 3255 8D 43 3D			sta ENDADR
  1547 3258 A5 E1			lda _ADR+1
  1548 325A 69 00			adc #$00
  1549 325C 8D 44 3D			sta ENDADR+1
  1550
  1551 				; optimize OK (MIDFILES), line = 194
  1552
  1553 325F C9 9C			cmp #$9C
  1554 3261 90 20			jcc l_042B
  1555 3263 D0 05			bne @+
  1556 3265 AD 43 3D			lda ENDADR
  1557 3268 90 19			jcc l_042B
  1558 				@
  1559 326A AD 44 3D			lda ENDADR+1
  1560 326D C9 A0			cmp #$A0
  1561 326F D0 05			bne @+
  1562 3271 AD 43 3D			lda ENDADR
  1563 3274 C9 00			cmp #$00
  1564 				@
  1565 3276 B0 0B			jcs l_042B
  1566
  1567 				; optimize OK (MIDFILES), line = 195
  1568
  1569 3278 A9 00			lda #$00
  1570 327A 38 E5 E0			sub _ADR
  1571 327D 8D 49 3D			sta LOADSIZE
  1572 3280 4C E7 32			jmp l_043E
  1573 3283			l_042B
  1574
  1575 				; optimize OK (MIDFILES), line = 196
  1576
  1577 3283 AD 44 3D			lda ENDADR+1
  1578 3286 C9 D0			cmp #$D0
  1579 3288 90 20			jcc l_045A
  1580 328A D0 05			bne @+
  1581 328C AD 43 3D			lda ENDADR
  1582 328F 90 19			jcc l_045A
  1583 				@
  1584 3291 AD 44 3D			lda ENDADR+1
  1585 3294 C9 D8			cmp #$D8
  1586 3296 D0 05			bne @+
  1587 3298 AD 43 3D			lda ENDADR
  1588 329B C9 00			cmp #$00
  1589 				@
  1590 329D B0 0B			jcs l_045A
  1591
  1592 				; optimize OK (MIDFILES), line = 197
  1593
  1594 329F A9 00			lda #$00
  1595 32A1 38 E5 E0			sub _ADR
  1596 32A4 8D 49 3D			sta LOADSIZE
  1597 32A7 4C E7 32			jmp l_046D
  1598 32AA			l_045A
  1599
  1600 				; optimize OK (MIDFILES), line = 198
  1601
  1602 32AA AD 44 3D			lda ENDADR+1
  1603 32AD C9 E0			cmp #$E0
  1604 32AF 90 20			jcc l_0489
  1605 32B1 D0 05			bne @+
  1606 32B3 AD 43 3D			lda ENDADR
  1607 32B6 90 19			jcc l_0489
  1608 				@
  1609 32B8 AD 44 3D			lda ENDADR+1
  1610 32BB C9 E4			cmp #$E4
  1611 32BD D0 05			bne @+
  1612 32BF AD 43 3D			lda ENDADR
  1613 32C2 C9 00			cmp #$00
  1614 				@
  1615 32C4 B0 0B			jcs l_0489
  1616
  1617 				; optimize OK (MIDFILES), line = 199
  1618
  1619 32C6 A9 00			lda #$00
  1620 32C8 38 E5 E0			sub _ADR
  1621 32CB 8D 49 3D			sta LOADSIZE
  1622 32CE 4C E7 32			jmp l_049C
  1623 32D1			l_0489
  1624
  1625 				; optimize OK (MIDFILES), line = 200
  1626
  1627 32D1 AD 44 3D			lda ENDADR+1
  1628 32D4 C9 FF			cmp #$FF
  1629 32D6 90 0F			jcc l_04AD
  1630 32D8 D0 05			bne @+
  1631 32DA AD 43 3D			lda ENDADR
  1632 32DD 90 08			jcc l_04AD
  1633 				@
  1634
  1635 				; optimize OK (MIDFILES), line = 201
  1636
  1637 32DF A9 00			lda #$00
  1638 32E1 38 E5 E0			sub _ADR
  1639 32E4 8D 49 3D			sta LOADSIZE
  1640 32E7			l_04AD
  1641 32E7			l_049C
  1642 32E7			l_046D
  1643 32E7			l_043E
  1644
  1645 				; optimize OK (MIDFILES), line = 202
  1646
  1647 32E7 AD 49 3D			lda LOADSIZE
  1648 32EA D0 03			jne l_04CB
  1649 32EC 4C 91 33			jmp c_03C8					; continue
  1650 32EF			l_04CB
  1651 				; BlockRead
  1652
  1653 				; optimize OK (MIDFILES), line = 204
  1654
  1655 32EF AC 1F 34 84 82 AC + 	mwy F :bp2
  1656 32F9 A0 06			ldy #s@file.buffer
  1657 32FB AD 42 39			lda RBUF
  1658 32FE 91 82			sta (:bp2),y
  1659 3300 C8				iny
  1660 3301 AD 43 39			lda RBUF+1
  1661 3304 91 82			sta (:bp2),y
  1662 3306 A0 08			ldy #s@file.nrecord
  1663 3308 AD 49 3D			lda LOADSIZE
  1664 330B 91 82			sta (:bp2),y
  1665 330D C8				iny
  1666 330E A9 00			lda #$00
  1667 3310 91 82			sta (:bp2),y
  1668 3312 A0 0A			ldy #s@file.numread
  1669 3314 A9 3F			lda <V
  1670 3316 91 82			sta (:bp2),y
  1671 3318 C8				iny
  1672 3319 A9 3D			lda >V
  1673 331B 91 82			sta (:bp2),y
  1674
  1675 331D 8A 48			txa:pha
  1676 331F 18				clc
  1677 					@readfile F, #135
  1677 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1677 3320 AC 20 34		 LDY F+1
  1677 3323 AD 1F 34		 LDA F
  1677 3326 A2 87		 LDX# 135
  1677 3328 20 9B 21		 JSR @READFILE
  1678 332B 68 AA			pla:tax
  1679
  1680 				; optimize OK (MIDFILES), line = 205
  1681
  1682 332D AD 40 3D			lda V+1
  1683 3330 D0 06			bne @+
  1684 3332 AD 3F 3D			lda V
  1685 3335 CD 49 3D			cmp LOADSIZE
  1686 				@
  1687 3338 F0 09			jeq l_04F0
  1688 333A AD C7 3B			lda SYSTEM.IORESULT
  1689 333D 8D 2C 3D			sta RESULT
  1690 3340 4C 1E 34			jmp @exit					; exit
  1691 3343			l_04F0
  1692
  1693 				; optimize OK (MIDFILES), line = 207
  1694
  1695 3343 A9 00			lda #$00
  1696 3345 85 88			sta SYSTEM.MOVE_012A.SOURCE
  1697 3347 A9 06			lda #$06
  1698 3349 85 89			sta SYSTEM.MOVE_012A.SOURCE+1
  1699 334B A5 E0			lda _PTR
  1700 334D 85 8C			sta SYSTEM.MOVE_012A.DEST
  1701 334F A5 E1			lda _PTR+1
  1702 3351 85 8D			sta SYSTEM.MOVE_012A.DEST+1
  1703 3353 AD 49 3D			lda LOADSIZE
  1704 3356 85 84			sta SYSTEM.MOVE_012A.COUNT
  1705 3358 A9 00			lda #$00
  1706 335A 85 85			sta SYSTEM.MOVE_012A.COUNT+1
  1707 335C				.local +MAIN.SYSTEM.MOVE_012A
  1708 335C				m@INLINE
Macro: MAIN.SYSTEM.MOVE_012A.M@INLINE [Source: MIDICar Player.a65]
     4 335C 20 6D 24			jsr @move
Source: MIDICar Player.a65
  1709 					.endl
  1710
  1711 				; optimize OK (MIDFILES), line = 208
  1712
  1713 335F A5 E0			lda _ADR
  1714 3361 18 6D 3F 3D			add V
  1715 3365 85 E0			sta _ADR
  1716 3367 A5 E1			lda _ADR+1
  1717 3369 6D 40 3D			adc V+1
  1718 336C 85 E1			sta _ADR+1
  1719
  1720 				; optimize OK (MIDFILES), line = 209
  1721
  1722 336E AD 45 3D			lda LEN
  1723 3371 38 ED 3F 3D			sub V
  1724 3375 8D 45 3D			sta LEN
  1725 3378 AD 46 3D			lda LEN+1
  1726 337B ED 40 3D			sbc V+1
  1727 337E 8D 46 3D			sta LEN+1
  1728 3381 AD 47 3D			lda LEN+2
  1729 3384 E9 00			sbc #$00
  1730 3386 8D 47 3D			sta LEN+2
  1731 3389 AD 48 3D			lda LEN+3
  1732 338C E9 00			sbc #$00
  1733 338E 8D 48 3D			sta LEN+3
  1734 3391			c_03C8
  1735 3391			l_03C7
  1736
  1737 				; optimize OK (MIDFILES), line = 186
  1738
  1739 3391 AD 48 3D			lda LEN+3
  1740 3394 30 0E			bmi @+
  1741 3396 0D 47 3D			ora LEN+2
  1742 3399 0D 46 3D			ora LEN+1
  1743 339C 0D 45 3D			ora LEN
  1744 339F F0 03 4C FE 31		jne l_03C8
  1745 				@
  1746
  1747 				; optimize OK (MIDFILES), line = 212
  1748
  1749 33A4 AD 4A 3D			lda NTRKREC
  1750 33A7 18 69 08			add #$08
  1751 33AA 8D 4A 3D			sta NTRKREC
  1752 33AD 90 03			scc
  1753 33AF EE 4B 3D			inc NTRKREC+1
  1754 33B2			l_039F
  1755 33B2			l_038F
  1756
  1757 				; optimize FAIL ('@print', MIDFILES), line = 214
  1758
  1759 					@print #$9C
  1759 				 LDY# $9C\ JSR @PRINT
  1759 33B2 A0 9C		 LDY# $9C
  1759 33B4 20 F4 2A		 JSR @PRINT
  1760 33B7			l_02F9
  1761
  1762 				; optimize FAIL (1, MIDFILES), line = 137
  1763
  1764 33B7 E8				inx
  1765 33B8 A0 01			ldy #1
  1766 33BA AD C7 3B			lda SYSTEM.IORESULT
  1767 33BD C9 01			cmp #$01
  1768 33BF F0 01			beq @+
  1769 33C1 88				dey
  1770 				@
  1771 33C2 94 94			sty :STACKORIGIN,x
  1772 33C4 AD 1F 34			lda F
  1773 33C7 8D D7 3B			sta SYSTEM.EOF.F
  1774 33CA AD 20 34			lda F+1
  1775 33CD 8D D8 3B			sta SYSTEM.EOF.F+1
  1776 33D0 20 4C 2D			jsr SYSTEM.EOF
  1777 33D3 E8				inx
  1778 33D4 AD D9 3B 95 94		mva SYSTEM.EOF.RESULT :STACKORIGIN,x
  1779 33D9 20 BD 23			jsr notBOOLEAN
  1780 33DC 20 F8 23			jsr andAL_CL
  1781 33DF AD 39 3D 95 94		mva TRACKCOUNT :STACKORIGIN,x
  1782 33E4 AD 3A 3D 95 A4		mva TRACKCOUNT+1 :STACKORIGIN+STACKWIDTH,x
  1783 33E9 E8				inx
  1784 33EA AD 0D 3D 95 94		mva NTRACKS :STACKORIGIN,x
  1785 33EF AD 0E 3D 95 A4		mva NTRACKS+1 :STACKORIGIN+STACKWIDTH,x
  1786 33F4 A0 01			ldy #1
  1787 33F6 20 B2 23			jsr cmpEAX_ECX.AX_CX
  1788 33F9 90 01			bcc @+
  1789 33FB 88				dey
  1790 				@
  1791 33FC 94 93			sty :STACKORIGIN-1,x
  1792 33FE CA				dex
  1793 33FF 20 F8 23			jsr andAL_CL
  1794 3402 CA				dex
  1795 3403 CA				dex
  1796 3404 B5 95			lda :STACKORIGIN+1,x
  1797 3406 F0 03 4C A3 30		jne l_02FA
  1798 340B			b_02FA
  1799 				; CloseFile
  1800
  1801 340B 8A 48			txa:pha
  1802 340D 18				clc
  1803 					@closefile F
  1803 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1803 340E AC 20 34		 LDY F+1
  1803 3411 AD 1F 34		 LDA F
  1803 3414 20 68 21		 JSR @CLOSEFILE
  1804 3417 68 AA			pla:tax
  1805
  1806 				; optimize OK (MIDFILES), line = 217
  1807
  1808 3419 A9 00			lda #$00
  1809 341B 8D 2C 3D			sta RESULT
  1810 341E			@exit
  1811
  1812 				; ------------------------------------------------------------
  1813
  1814 = 3D2A			FN	= DATAORIGIN+$016A
  1815 = 3D2C			RESULT	= DATAORIGIN+$016C
  1816 341E			.var F	= DATAORIGIN+$016D .word
  1817 = 3D39			TRACKCOUNT	= DATAORIGIN+$0179
  1818 = 3D3B			CHUNKTAG	= DATAORIGIN+$017B
  1819 = 3D3F			V	= DATAORIGIN+$017F
  1820 = 3D41			TOP	= DATAORIGIN+$0181
  1821 = 3D43			ENDADR	= DATAORIGIN+$0183
  1822 = 3D45			LEN	= DATAORIGIN+$0185
  1823 = 3D49			LOADSIZE	= DATAORIGIN+$0189
  1824 = 3D4A			NTRKREC	= DATAORIGIN+$018A
  1825 = 3BC0			NTRKREC.PTR	= DATAORIGIN+$0000
  1826 = 3BC2			NTRKREC.TRACKTIME	= DATAORIGIN+$0002
  1827 = 3BC6			NTRKREC.SKIPDELTA	= DATAORIGIN+$0006
  1828 = 3BC7			NTRKREC._EVENT	= DATAORIGIN+$0007
  1829
  1830 = 3D2A			@VarData	= FN
  1831 = 0021			@VarDataSize	= 33
  1832
  1833 341E 60				rts						; ret
  1834 = 341F 2D 3D		F
  1834 				.endl
  1835
  1836 3421			.local	PROCESSTRACK					; FUNCTION
  1837
  1838 3421 4C 19 35			jmp l_053A
  1839
  1840 3424			.local	READB						; PROCEDURE | INLINE
  1841
  1842 					.MACRO m@INLINE
  1843 				
  1844 				; optimize OK (MIDFILES), line = 227
  1845 				
  1846 					ldy #$00
  1847 					lda (_PTR),y
  1848 					sta _TMP
  1849 				
  1850 				; optimize FAIL (0, MIDFILES), line = 228
  1851 				
  1852 					inc _ADR
  1853 					sne
  1854 					inc _ADR+1
  1855 				
  1856 				; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 229
  1857 				
  1858 					jsr MEMBOUNDCHECK
  1859 					.ENDM
  1860 3424			@exit
  1861 				.endl
  1862
  1863 3424			.local	READB2FB					; PROCEDURE | INLINE
  1864
  1865 					.MACRO m@INLINE
  1866 				
  1867 				; optimize OK (MIDFILES), line = 235
  1868 				
  1869 					ldy #$00
  1870 					lda (_PTR),y
  1871 					sta MIDI_FIFO.FIFO_BYTE
  1872 				
  1873 				; optimize FAIL (0, MIDFILES), line = 239
  1874 				
  1875 					inc _ADR
  1876 					sne
  1877 					inc _ADR+1
  1878 				
  1879 				; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 240
  1880 				
  1881 					jsr MEMBOUNDCHECK
  1882 					.ENDM
  1883 3424			@exit
  1884 				.endl
  1885
  1886 3424			.local	READVARL					; PROCEDURE | ASSEMBLER
  1887
  1888 				; -------------------  ASM Block 00000073  -------------------
  1889
  1890 = 00F6			A equ _delta;
  1891 = 00F7			B equ _delta+1;
  1892 = 00F8			C equ _delta+2;
  1893 = 00F9			D equ _delta+3;
  1894
  1895 				  .MACRO m@read2A
  1896 				    lda (_PTR),y
  1897 				    sta A
  1898 				    inc _ADR
  1899 				    sne
  1900 				    inc _ADR+1
  1901 				    jsr MEMBOUNDCHECK
  1902 				    lda A
  1903 				  .ENDM
  1904
  1905 3424 A0 00		  ldy #$00
  1906 3426 84 F6		  sty A
  1907 3428 84 F7		  sty B
  1908 342A 84 F8		  sty C
  1909 342C 84 F9		  sty D
  1910
  1911 				// read block
  1912
  1913 				// read 1st byte
  1914 342E			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 342E B1 E0		    lda (_PTR),y
     2 3430 85 F6		    sta A
     3 3432 E6 E0		    inc _ADR
     4 3434 D0 02		    sne
     5 3436 E6 E1		    inc _ADR+1
     6 3438 20 CC 2E		    jsr MEMBOUNDCHECK
     7 343B A5 F6		    lda A
Source: MIDICar Player.a65
  1915
  1916 343D 10 4D		  bpl endRead
  1917
  1918 				// move A to B and read 2nd byte
  1919 343F 29 7F			and #$7F
  1920 3441 85 F7			sta B
  1921
  1922 				// read 2nd byte
  1923 3443			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 3443 B1 E0		    lda (_PTR),y
     2 3445 85 F6		    sta A
     3 3447 E6 E0		    inc _ADR
     4 3449 D0 02		    sne
     5 344B E6 E1		    inc _ADR+1
     6 344D 20 CC 2E		    jsr MEMBOUNDCHECK
     7 3450 A5 F6		    lda A
Source: MIDICar Player.a65
  1924
  1925 3452 10 38		  bpl endRead
  1926
  1927 				// mova B to C, A to B and read 3rd byte
  1928 3454 A5 F7			lda B
  1929 3456 85 F8			sta C
  1930 3458 A5 F6			lda A
  1931 345A 29 7F			and #$7F
  1932 345C 85 F7			sta B
  1933
  1934 				// read 3rd
  1935 345E			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 345E B1 E0		    lda (_PTR),y
     2 3460 85 F6		    sta A
     3 3462 E6 E0		    inc _ADR
     4 3464 D0 02		    sne
     5 3466 E6 E1		    inc _ADR+1
     6 3468 20 CC 2E		    jsr MEMBOUNDCHECK
     7 346B A5 F6		    lda A
Source: MIDICar Player.a65
  1936
  1937 346D 10 1D		  bpl endRead
  1938
  1939 				// move C to D, B to C, A to B and read 4th byte
  1940 346F A5 F8			lda C
  1941 3471 85 F9			sta D
  1942 3473 A5 F7			lda B
  1943 3475 85 F8			sta C
  1944 3477 A5 F6			lda A
  1945 3479 29 7F			and #$7F
  1946 347B 85 F7			sta B
  1947
  1948 				// read 4th
  1949 347D			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 347D B1 E0		    lda (_PTR),y
     2 347F 85 F6		    sta A
     3 3481 E6 E0		    inc _ADR
     4 3483 D0 02		    sne
     5 3485 E6 E1		    inc _ADR+1
     6 3487 20 CC 2E		    jsr MEMBOUNDCHECK
     7 348A A5 F6		    lda A
Source: MIDICar Player.a65
  1950
  1951 				// end read block
  1952 348C			endRead:
  1953
  1954 				// decode block
  1955 				// 'A' stays as it is
  1956
  1957 				// 'B' if geather than zero, lets decode
  1958 348C A5 F7		  lda B
  1959 348E F0 0A		  beq noDecodeB
  1960
  1961 				// 76543210 76543210
  1962 				// 0bbbbbbb 0aaaaaaa
  1963 				// 00bbbbbb Baaaaaaa
  1964 3490 46 F7		  lsr B
  1965 3492 90 06		  bcc noDecodeB
  1966
  1967 3494 A5 F6		  lda A
  1968 3496 09 80		  ora #$80
  1969 3498 85 F6		  sta A
  1970
  1971 349A			noDecodeB:
  1972 				// 'C' if geather than zero, lets decode
  1973 349A A5 F8		  lda C
  1974 349C F0 16		  beq noDecodeC
  1975
  1976 				// 76543210 76543210
  1977 				// 0ccccccc 0bbbbbbb
  1978 				// 00cccccc 0Cbbbbbb
  1979 349E 46 F8		  lsr C
  1980 34A0 90 08		  bcc noC1
  1981
  1982 34A2 A5 F7		  lda B
  1983 34A4 09 40		  ora #$40
  1984 34A6 85 F7		  sta B
  1985
  1986 34A8 A5 F8		  lda C // reload C
  1987
  1988 34AA			noC1:
  1989 				// 76543210 76543210
  1990 				// 0ccccccc 0bbbbbbb
  1991 				// 000ccccc Ccbbbbbb
  1992 34AA 46 F8		  lsr C
  1993 34AC 90 06		  bcc noDecodeC
  1994
  1995 34AE A5 F7		  lda B
  1996 34B0 09 80		  ora #$80
  1997 34B2 85 F7		  sta B
  1998
  1999 34B4			noDecodeC:
  2000 				// 'D' if geather than zero, lets decode
  2001 34B4 A5 F9		  lda D
  2002 34B6 F0 22		  beq noDecodeD
  2003
  2004 				// 76543210 76543210
  2005 				// 0ddddddd 0ccccccc
  2006 				// 00dddddd 00Dccccc
  2007 34B8 46 F9		  lsr D
  2008 34BA 90 08		  bcc noD1
  2009
  2010 34BC A5 F8		  lda C
  2011 34BE 09 20		  ora #$20
  2012 34C0 85 F8		  sta C
  2013
  2014 34C2 A5 F9		  lda D // reloaad D
  2015 34C4			noD1:
  2016 				// 76543210 76543210
  2017 				// 0ddddddd 0ccccccc
  2018 				// 000ddddd 0Ddccccc
  2019 34C4 46 F9		  lsr D
  2020 34C6 90 08		  bcc noD2
  2021
  2022 34C8 A5 F8		  lda C
  2023 34CA 09 40		  ora #$40
  2024 34CC 85 F8		  sta C
  2025
  2026 34CE A5 F9		  lda D // reaload D
  2027 34D0			noD2:
  2028 				// 76543210 76543210
  2029 				// 0ddddddd 0ccccccc
  2030 				// 0000dddd Dddccccc
  2031 34D0 46 F9		  lsr D
  2032 34D2 90 06		  bcc noDecodeD
  2033
  2034 34D4 A5 F8		  lda C
  2035 34D6 09 80		  ora #$80
  2036 34D8 85 F8		  sta C
  2037
  2038 34DA			noDecodeD:
  2039
  2040
  2041 34DA			@exit
  2042 					.ifdef @new
  2043 					lda <@VarData
  2044 					sta :ztmp
  2045 					lda >@VarData
  2046 					ldy #@VarDataSize-1
  2047 					jmp @FreeMem
  2048 					els
  2049 34DA 60				rts						; ret
  2050 					eif
  2051 				.endl
  2052
  2053 34DB			.local	READ24						; PROCEDURE | ASSEMBLER
  2054
  2055 				; -------------------  ASM Block 00000074  -------------------
  2056
  2057 34DB			  .local +MAIN.MIDFILES.PROCESSTRACK.READB
  2058 34DB			  m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 34DB A0 00			ldy #$00
     5 34DD B1 E0			lda (_PTR),y
     6 34DF 85 F6			sta _TMP
    10 34E1 E6 E0			inc _ADR
    11 34E3 D0 02			sne
    12 34E5 E6 E1			inc _ADR+1
    16 34E7 20 CC 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2059 				  .endl
  2060 34EA A5 F6		  lda _TMP
  2061 34EC 85 F8		  sta _delta+2
  2062
  2063 34EE			  .local +MAIN.MIDFILES.PROCESSTRACK.READB
  2064 34EE			  m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 34EE A0 00			ldy #$00
     5 34F0 B1 E0			lda (_PTR),y
     6 34F2 85 F6			sta _TMP
    10 34F4 E6 E0			inc _ADR
    11 34F6 D0 02			sne
    12 34F8 E6 E1			inc _ADR+1
    16 34FA 20 CC 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2065 				  .endl
  2066 34FD A5 F6		  lda _TMP
  2067 34FF 85 F7		  sta _delta+1
  2068
  2069 3501			  .local +MAIN.MIDFILES.PROCESSTRACK.READB
  2070 3501			  m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 3501 A0 00			ldy #$00
     5 3503 B1 E0			lda (_PTR),y
     6 3505 85 F6			sta _TMP
    10 3507 E6 E0			inc _ADR
    11 3509 D0 02			sne
    12 350B E6 E1			inc _ADR+1
    16 350D 20 CC 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2071 				  .endl
  2072 3510 A5 F6		  lda _TMP
  2073 3512 85 F6		  sta _delta+0
  2074
  2075 3514 A9 00		  lda #0
  2076 3516 85 F9		  sta _delta+3
  2077
  2078 3518			@exit
  2079 					.ifdef @new
  2080 					lda <@VarData
  2081 					sta :ztmp
  2082 					lda >@VarData
  2083 					ldy #@VarDataSize-1
  2084 					jmp @FreeMem
  2085 					els
  2086 3518 60				rts						; ret
  2087 					eif
  2088 				.endl
  2089 3519			l_053A
  2090
  2091 				; optimize OK (MIDFILES), line = 247
  2092
  2093 3519 A9 00			lda #$00
  2094 351B 85 F6			sta _DELTA
  2095 351D 85 F7			sta _DELTA+1
  2096 351F 85 F8			sta _DELTA+2
  2097 3521 85 F9			sta _DELTA+3
  2098
  2099 				; --- RepeatUntilProlog
  2100 3523			l_055F
  2101
  2102 				; optimize OK (MIDFILES), line = 249
  2103
  2104 3523 A5 E6			lda _SKIPDELTA
  2105 3525 D0 15			jne l_056E
  2106
  2107 				; optimize FAIL ('READVARL', MIDFILES), line = 251
  2108
  2109 3527 20 24 34			jsr READVARL
  2110
  2111 				; optimize OK (MIDFILES), line = 252
  2112
  2113 352A A5 F9			lda _DELTA+3
  2114 352C 30 0B			jmi l_0580
  2115 352E 05 F8			ora _DELTA+2
  2116 3530 05 F7			ora _DELTA+1
  2117 3532 05 F6			ora _DELTA
  2118 3534 F0 03			jeq l_0580
  2119 3536 4C 21 37			jmp b_055F					; break
  2120 3539			l_0580
  2121 3539 4C 40 35			jmp l_058C
  2122 353C			l_056E
  2123
  2124 				; optimize OK (MIDFILES), line = 255
  2125
  2126 353C A9 00			lda #$00
  2127 353E 85 E6			sta _SKIPDELTA
  2128 3540			l_058C
  2129
  2130 				; optimize OK (MIDFILES), line = 257
  2131
  2132 3540 A0 00			ldy #$00
  2133 3542 B1 E0			lda (_PTR),y
  2134 3544 10 13			jpl l_05A6
  2135
  2136 				; optimize FAIL ('m@INLINE', MIDFILES), line = 259
  2137
  2138 3546				.local READB
  2139 3546				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 3546 A0 00			ldy #$00
     5 3548 B1 E0			lda (_PTR),y
     6 354A 85 F6			sta _TMP
    10 354C E6 E0			inc _ADR
    11 354E D0 02			sne
    12 3550 E6 E1			inc _ADR+1
    16 3552 20 CC 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2140 					.endl
  2141 3555 A5 F6			lda _TMP
  2142 3557 85 E7			sta _EVENT
  2143 3559			l_05A6
  2144
  2145 				; optimize OK (MIDFILES), line = 262
  2146
  2147 3559 A5 E7			lda _EVENT
  2148 355B 8D 58 3D			sta @CASETMP_0005
  2149 355E 18				clc						; clear carry for add
  2150 355F 69 40			adc #$FF-$BF					; make m = $FF
  2151 3561 69 40			adc #$BF-$80+1					; carry set if in range n to m
  2152 3563 B0 0A			bcs @+
  2153 3565 AD 58 3D			lda @CASETMP_0005
  2154 3568 18				clc						; clear carry for add
  2155 3569 69 10			adc #$FF-$EF					; make m = $FF
  2156 356B 69 10			adc #$EF-$E0+1					; carry set if in range n to m
  2157 356D 90 61			jcc l_05BD
  2158 				@
  2159
  2160 				; optimize OK (MIDFILES), line = 268
  2161
  2162 356F A5 E7			lda _EVENT
  2163 3571 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2164 3573				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2165 3573				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 3573 A5 FD		  lda FIFO_Head
     5 3575 18			  clc
     6 3576 69 01		  adc #1
     7 3578 C5 FE		  cmp FIFO_Tail
     8 357A D0 01		  bne storeInFIFO
     9 357C 60			  rts
    11 357D			storeInFIFO:
    12 357D A4 FD		  ldy FIFO_Head
    13 357F A5 FF		  lda FIFO_Byte
    14 3581 99 00 06		  sta FIFO_ADDR,y
    15 3584 C8			  iny
    16 3585 84 FD		  sty FIFO_Head
    17 3587			exitWrite:
Source: MIDICar Player.a65
  2166 					.endl
  2167
  2168 				; optimize FAIL ('m@INLINE', MIDFILES), line = 269
  2169
  2170 3587				.local READB2FB
  2171 3587				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 3587 A0 00			ldy #$00
     5 3589 B1 E0			lda (_PTR),y
     6 358B 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 358D E6 E0			inc _ADR
    11 358F D0 02			sne
    12 3591 E6 E1			inc _ADR+1
    16 3593 20 CC 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2172 					.endl
  2173 3596				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2174 3596				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 3596 A5 FD		  lda FIFO_Head
     5 3598 18			  clc
     6 3599 69 01		  adc #1
     7 359B C5 FE		  cmp FIFO_Tail
     8 359D D0 01		  bne storeInFIFO
     9 359F 60			  rts
    11 35A0			storeInFIFO:
    12 35A0 A4 FD		  ldy FIFO_Head
    13 35A2 A5 FF		  lda FIFO_Byte
    14 35A4 99 00 06		  sta FIFO_ADDR,y
    15 35A7 C8			  iny
    16 35A8 84 FD		  sty FIFO_Head
    17 35AA			exitWrite:
Source: MIDICar Player.a65
  2175 					.endl
  2176
  2177 				; optimize FAIL ('m@INLINE', MIDFILES), line = 270
  2178
  2179 35AA				.local READB2FB
  2180 35AA				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 35AA A0 00			ldy #$00
     5 35AC B1 E0			lda (_PTR),y
     6 35AE 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 35B0 E6 E0			inc _ADR
    11 35B2 D0 02			sne
    12 35B4 E6 E1			inc _ADR+1
    16 35B6 20 CC 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2181 					.endl
  2182 35B9				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2183 35B9				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 35B9 A5 FD		  lda FIFO_Head
     5 35BB 18			  clc
     6 35BC 69 01		  adc #1
     7 35BE C5 FE		  cmp FIFO_Tail
     8 35C0 D0 01		  bne storeInFIFO
     9 35C2 60			  rts
    11 35C3			storeInFIFO:
    12 35C3 A4 FD		  ldy FIFO_Head
    13 35C5 A5 FF		  lda FIFO_Byte
    14 35C7 99 00 06		  sta FIFO_ADDR,y
    15 35CA C8			  iny
    16 35CB 84 FD		  sty FIFO_Head
    17 35CD			exitWrite:
Source: MIDICar Player.a65
  2184 					.endl
  2185
  2186 35CD 4C FD 36			jmp a_0005
  2187 35D0			l_05BD
  2188 35D0 AD 58 3D			lda @CASETMP_0005
  2189 35D3 18				clc						; clear carry for add
  2190 35D4 69 20			adc #$FF-$DF					; make m = $FF
  2191 35D6 69 20			adc #$DF-$C0+1					; carry set if in range n to m
  2192 35D8 90 3E			jcc l_05D1
  2193 				@
  2194
  2195 				; optimize OK (MIDFILES), line = 280
  2196
  2197 35DA A5 E7			lda _EVENT
  2198 35DC 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2199 35DE				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2200 35DE				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 35DE A5 FD		  lda FIFO_Head
     5 35E0 18			  clc
     6 35E1 69 01		  adc #1
     7 35E3 C5 FE		  cmp FIFO_Tail
     8 35E5 D0 01		  bne storeInFIFO
     9 35E7 60			  rts
    11 35E8			storeInFIFO:
    12 35E8 A4 FD		  ldy FIFO_Head
    13 35EA A5 FF		  lda FIFO_Byte
    14 35EC 99 00 06		  sta FIFO_ADDR,y
    15 35EF C8			  iny
    16 35F0 84 FD		  sty FIFO_Head
    17 35F2			exitWrite:
Source: MIDICar Player.a65
  2201 					.endl
  2202
  2203 				; optimize FAIL ('m@INLINE', MIDFILES), line = 281
  2204
  2205 35F2				.local READB2FB
  2206 35F2				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 35F2 A0 00			ldy #$00
     5 35F4 B1 E0			lda (_PTR),y
     6 35F6 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 35F8 E6 E0			inc _ADR
    11 35FA D0 02			sne
    12 35FC E6 E1			inc _ADR+1
    16 35FE 20 CC 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2207 					.endl
  2208 3601				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2209 3601				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 3601 A5 FD		  lda FIFO_Head
     5 3603 18			  clc
     6 3604 69 01		  adc #1
     7 3606 C5 FE		  cmp FIFO_Tail
     8 3608 D0 01		  bne storeInFIFO
     9 360A 60			  rts
    11 360B			storeInFIFO:
    12 360B A4 FD		  ldy FIFO_Head
    13 360D A5 FF		  lda FIFO_Byte
    14 360F 99 00 06		  sta FIFO_ADDR,y
    15 3612 C8			  iny
    16 3613 84 FD		  sty FIFO_Head
    17 3615			exitWrite:
Source: MIDICar Player.a65
  2210 					.endl
  2211
  2212 3615 4C FD 36			jmp a_0005
  2213 3618			l_05D1
  2214 3618 AD 58 3D			lda @CASETMP_0005
  2215 361B 18				clc						; clear carry for add
  2216 361C 69 08			adc #$FF-$F7					; make m = $FF
  2217 361E 69 08			adc #$F7-$F0+1					; carry set if in range n to m
  2218 3620 90 5D			jcc l_05E3
  2219 				@
  2220
  2221 				; optimize FAIL ('READVARL', MIDFILES), line = 289
  2222
  2223 3622 20 24 34			jsr READVARL
  2224
  2225 				; optimize OK (MIDFILES), line = 291
  2226
  2227 3625 A5 E7			lda _EVENT
  2228 3627 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2229 3629				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2230 3629				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 3629 A5 FD		  lda FIFO_Head
     5 362B 18			  clc
     6 362C 69 01		  adc #1
     7 362E C5 FE		  cmp FIFO_Tail
     8 3630 D0 01		  bne storeInFIFO
     9 3632 60			  rts
    11 3633			storeInFIFO:
    12 3633 A4 FD		  ldy FIFO_Head
    13 3635 A5 FF		  lda FIFO_Byte
    14 3637 99 00 06		  sta FIFO_ADDR,y
    15 363A C8			  iny
    16 363B 84 FD		  sty FIFO_Head
    17 363D			exitWrite:
Source: MIDICar Player.a65
  2231 					.endl
  2232
  2233 				; --- WhileProlog
  2234 363D 4C 65 36			jmp l_05ED
  2235 3640			l_05EE
  2236
  2237 				; optimize FAIL ('m@INLINE', MIDFILES), line = 297
  2238
  2239 3640				.local READB2FB
  2240 3640				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 3640 A0 00			ldy #$00
     5 3642 B1 E0			lda (_PTR),y
     6 3644 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 3646 E6 E0			inc _ADR
    11 3648 D0 02			sne
    12 364A E6 E1			inc _ADR+1
    16 364C 20 CC 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2241 					.endl
  2242
  2243 				; optimize FAIL ('m@INLINE', MIDFILES), line = 299
  2244
  2245 364F				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2246 364F				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 364F A5 FD		  lda FIFO_Head
     5 3651 18			  clc
     6 3652 69 01		  adc #1
     7 3654 C5 FE		  cmp FIFO_Tail
     8 3656 D0 01		  bne storeInFIFO
     9 3658 60			  rts
    11 3659			storeInFIFO:
    12 3659 A4 FD		  ldy FIFO_Head
    13 365B A5 FF		  lda FIFO_Byte
    14 365D 99 00 06		  sta FIFO_ADDR,y
    15 3660 C8			  iny
    16 3661 84 FD		  sty FIFO_Head
    17 3663			exitWrite:
Source: MIDICar Player.a65
  2247 					.endl
  2248
  2249 				; optimize FAIL (0, MIDFILES), line = 303
  2250
  2251 3663 C6 F6			dec _TMP
  2252 3665			l_05ED
  2253
  2254 				; optimize OK (MIDFILES), line = 295
  2255
  2256 3665 A5 F6			lda _TMP
  2257 3667 D0 D7			jne l_05EE
  2258
  2259 				; optimize OK (MIDFILES), line = 306
  2260
  2261 3669 A5 FF			lda MIDI_FIFO.FIFO_BYTE
  2262 366B C9 F7			cmp #$F7
  2263 366D D0 08			jne l_0612
  2264 366F A9 00			lda #$00
  2265 3671 8D 56 3D			sta FLAGSYSEX
  2266 3674 4C 7C 36			jmp l_0620
  2267 3677			l_0612
  2268 3677 A9 01			lda #$01
  2269 3679 8D 56 3D			sta FLAGSYSEX
  2270 367C			l_0620
  2271
  2272 367C 4C FD 36			jmp a_0005
  2273 367F			l_05E3
  2274 367F AD 58 3D			lda @CASETMP_0005
  2275 3682 C9 FF			cmp #$FF
  2276 3684 D0 77			jne l_062D
  2277 				@
  2278
  2279 				; optimize FAIL ('m@INLINE', MIDFILES), line = 315
  2280
  2281 3686				.local READB2FB
  2282 3686				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 3686 A0 00			ldy #$00
     5 3688 B1 E0			lda (_PTR),y
     6 368A 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 368C E6 E0			inc _ADR
    11 368E D0 02			sne
    12 3690 E6 E1			inc _ADR+1
    16 3692 20 CC 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2283 					.endl
  2284
  2285 				; optimize FAIL ('READVARL', MIDFILES), line = 316
  2286
  2287 3695 20 24 34			jsr READVARL
  2288
  2289 				; optimize OK (MIDFILES), line = 318
  2290
  2291 3698 A5 FF			lda MIDI_FIFO.FIFO_BYTE
  2292 369A 8D 59 3D			sta @CASETMP_0006
  2293 369D C9 2F			cmp #$2F
  2294 369F D0 0D			jne l_063A
  2295 				@
  2296
  2297 				; optimize OK (MIDFILES), line = 323
  2298
  2299 36A1 A9 FF			lda #$FF
  2300 36A3 85 F6			sta _DELTA
  2301 36A5 85 F7			sta _DELTA+1
  2302 36A7 85 F8			sta _DELTA+2
  2303 36A9 85 F9			sta _DELTA+3
  2304
  2305 36AB 4C FD 36			jmp a_0006
  2306 36AE			l_063A
  2307 36AE C9 51			cmp #$51
  2308 36B0 D0 39			jne l_0647
  2309 				@
  2310
  2311 				; optimize FAIL ('READ24', MIDFILES), line = 326
  2312
  2313 36B2 20 DB 34			jsr READ24
  2314
  2315 				; optimize OK (MIDFILES), line = 327
  2316
  2317 36B5 A5 F9			lda _DELTA+3
  2318 36B7 CD 14 3D			cmp MS_PER_QNOTE+3
  2319 36BA D0 15			bne @+
  2320 36BC A5 F8			lda _DELTA+2
  2321 36BE CD 13 3D			cmp MS_PER_QNOTE+2
  2322 36C1 D0 0E			bne @+
  2323 36C3 A5 F7			lda _DELTA+1
  2324 36C5 CD 12 3D			cmp MS_PER_QNOTE+1
  2325 36C8 D0 07			bne @+
  2326 36CA A5 F6			lda _DELTA
  2327 36CC CD 11 3D			cmp MS_PER_QNOTE
  2328 36CF F0 17			jeq l_0658
  2329 				@
  2330
  2331 				; optimize OK (MIDFILES), line = 329
  2332
  2333 36D1 A5 F6			lda _DELTA
  2334 36D3 8D 11 3D			sta MS_PER_QNOTE
  2335 36D6 A5 F7			lda _DELTA+1
  2336 36D8 8D 12 3D			sta MS_PER_QNOTE+1
  2337 36DB A5 F8			lda _DELTA+2
  2338 36DD 8D 13 3D			sta MS_PER_QNOTE+2
  2339 36E0 A5 F9			lda _DELTA+3
  2340 36E2 8D 14 3D			sta MS_PER_QNOTE+3
  2341
  2342 				; optimize FAIL ('SETTEMPO', MIDFILES), line = 330
  2343
  2344 36E5 20 3A 37			jsr SETTEMPO
  2345 36E8			l_0658
  2346
  2347 36E8 4C FD 36			jmp a_0006
  2348 36EB			l_0647
  2349
  2350 				; --- WhileProlog
  2351 36EB 4C F9 36			jmp l_0666
  2352 36EE			l_0667
  2353
  2354 				; optimize FAIL (0, MIDFILES), line = 348
  2355
  2356 36EE C6 F6			dec _TMP
  2357
  2358 				; optimize FAIL (0, MIDFILES), line = 349
  2359
  2360 36F0 E6 E0			inc _ADR
  2361 36F2 D0 02			sne
  2362 36F4 E6 E1			inc _ADR+1
  2363
  2364 				; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 350
  2365
  2366 36F6 20 CC 2E			jsr MEMBOUNDCHECK
  2367 36F9			l_0666
  2368
  2369 				; optimize OK (MIDFILES), line = 346
  2370
  2371 36F9 A5 F6			lda _TMP
  2372 36FB D0 F1			jne l_0667
  2373 36FD			a_0006
  2374
  2375 36FD			l_062D
  2376 36FD			a_0005
  2377
  2378 				; optimize OK (MIDFILES), line = 356
  2379
  2380 36FD A5 F9			lda _DELTA+3
  2381 36FF 49 FF			eor #$FF
  2382 3701 F0 03 4C 23 35		jne l_055F
  2383 3706 A5 F8			lda _DELTA+2
  2384 3708 49 FF			eor #$FF
  2385 370A F0 03 4C 23 35		jne l_055F
  2386 370F A5 F7			lda _DELTA+1
  2387 3711 49 FF			eor #$FF
  2388 3713 F0 03 4C 23 35		jne l_055F
  2389 3718 A5 F6			lda _DELTA
  2390 371A 49 FF			eor #$FF
  2391 371C F0 03 4C 23 35		jne l_055F
  2392 3721			b_055F
  2393
  2394 				; optimize OK (MIDFILES), line = 357
  2395
  2396 3721 A9 01			lda #$01
  2397 3723 85 E6			sta _SKIPDELTA
  2398
  2399 				; optimize OK (MIDFILES), line = 358
  2400
  2401 3725 A5 F6			lda _DELTA
  2402 3727 8D 52 3D			sta RESULT
  2403 372A A5 F7			lda _DELTA+1
  2404 372C 8D 53 3D			sta RESULT+1
  2405 372F A5 F8			lda _DELTA+2
  2406 3731 8D 54 3D			sta RESULT+2
  2407 3734 A5 F9			lda _DELTA+3
  2408 3736 8D 55 3D			sta RESULT+3
  2409 3739			@exit
  2410
  2411 				; ------------------------------------------------------------
  2412
  2413 = 3D52			RESULT	= DATAORIGIN+$0192
  2414 = 3D56			FLAGSYSEX	= DATAORIGIN+$0196
  2415 = 3D57			MSGLEN	= DATAORIGIN+$0197
  2416 = 3D58			@CASETMP_0005	= DATAORIGIN+$0198
  2417 = 3D59			@CASETMP_0006	= DATAORIGIN+$0199
  2418
  2419 = 3D56			@VarData	= FLAGSYSEX
  2420 = 0004			@VarDataSize	= 4
  2421
  2422 3739 60				rts						; ret
  2423 				.endl
  2424
  2425 373A			.local	SETTEMPO					; PROCEDURE
  2426
  2427 				; optimize FAIL ('divmulINT.DIV', MIDFILES), line = 370
  2428
  2429 373A E8				inx
  2430 373B AD 11 3D 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  2431 3740 AD 12 3D 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  2432 3745 AD 13 3D 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  2433 374A AD 14 3D 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  2434 374F E8				inx
  2435 3750 AD 0F 3D 95 94		mva TICKDIV :STACKORIGIN,x
  2436 3755 AD 10 3D 95 A4		mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
  2437 375A A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  2438 375E A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  2439 3762 20 1C 25			jsr divmulINT.DIV
  2440 3765 CA				dex
  2441 3766 B5 94			lda :STACKORIGIN,x
  2442 3768 8D 5E 3D			sta _FREQ
  2443 376B B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2444 376D 8D 5F 3D			sta _FREQ+1
  2445 3770 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2446 3772 8D 60 3D			sta _FREQ+2
  2447 3775 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2448 3777 8D 61 3D			sta _FREQ+3
  2449
  2450 				; optimize FAIL ('@I2F_m', MIDFILES), line = 371
  2451
  2452 377A AD 5E 3D 95 94		mva _FREQ :STACKORIGIN,x
  2453 377F AD 5F 3D 95 A4		mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2454 3784 AD 60 3D 95 B4		mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2455 3789 AD 61 3D 95 C4		mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2456 378E E8				inx
  2457 378F A9 00 95 94			mva #$00 :STACKORIGIN,x
  2458 3793 A9 24 95 A4			mva #$24 :STACKORIGIN+STACKWIDTH,x
  2459 3797 A9 74 95 B4			mva #$74 :STACKORIGIN+STACKWIDTH*2,x
  2460 379B A9 49 95 C4			mva #$49 :STACKORIGIN+STACKWIDTH*3,x
  2461 379F 20 CD 2A			jsr @I2F_m
  2462 37A2 20 8F 29			jsr @FDIV
  2463 37A5 CA				dex
  2464 37A6 B5 94			lda :STACKORIGIN,x
  2465 37A8 8D 5A 3D			sta FREQ
  2466 37AB B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2467 37AD 8D 5B 3D			sta FREQ+1
  2468 37B0 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2469 37B2 8D 5C 3D			sta FREQ+2
  2470 37B5 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2471 37B7 8D 5D 3D			sta FREQ+3
  2472
  2473 				; optimize FAIL ('@FDIV', MIDFILES), line = 372
  2474
  2475 37BA A9 00 95 94			mva #$00 :STACKORIGIN,x
  2476 37BE A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2477 37C2 A9 80 95 B4			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  2478 37C6 A9 3F 95 C4			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  2479 37CA E8				inx
  2480 37CB AD 5A 3D 95 94		mva FREQ :STACKORIGIN,x
  2481 37D0 AD 5B 3D 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2482 37D5 AD 5C 3D 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2483 37DA AD 5D 3D 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2484 37DF 20 8F 29			jsr @FDIV
  2485 37E2 CA				dex
  2486 37E3 B5 94			lda :STACKORIGIN,x
  2487 37E5 8D 5A 3D			sta FREQ
  2488 37E8 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2489 37EA 8D 5B 3D			sta FREQ+1
  2490 37ED B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2491 37EF 8D 5C 3D			sta FREQ+2
  2492 37F2 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2493 37F4 8D 5D 3D			sta FREQ+3
  2494
  2495 				; optimize FAIL ('@FDIV', MIDFILES), line = 375
  2496
  2497 37F7 A9 F5 95 94			mva #$F5 :STACKORIGIN,x
  2498 37FB A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  2499 37FF A9 7A 95 B4			mva #$7A :STACKORIGIN+STACKWIDTH*2,x
  2500 3803 A9 43 95 C4			mva #$43 :STACKORIGIN+STACKWIDTH*3,x
  2501 3807 E8				inx
  2502 3808 AD 5A 3D 95 94		mva FREQ :STACKORIGIN,x
  2503 380D AD 5B 3D 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2504 3812 AD 5C 3D 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2505 3817 AD 5D 3D 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2506 381C 20 8F 29			jsr @FDIV
  2507 381F CA				dex
  2508 3820 B5 94			lda :STACKORIGIN,x
  2509 3822 8D 63 3D			sta RATIO
  2510 3825 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2511 3827 8D 64 3D			sta RATIO+1
  2512 382A B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2513 382C 8D 65 3D			sta RATIO+2
  2514 382F B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2515 3831 8D 66 3D			sta RATIO+3
  2516
  2517 				; optimize FAIL ('@F2I', MIDFILES), line = 376
  2518
  2519 3834 A9 01 95 94			mva #$01 :STACKORIGIN,x
  2520 3838 E8				inx
  2521 3839 AD 63 3D 95 94		mva RATIO :STACKORIGIN,x
  2522 383E AD 64 3D 95 A4		mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
  2523 3843 AD 65 3D 95 B4		mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
  2524 3848 AD 66 3D 95 C4		mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
  2525 384D 20 1E 2A			jsr @F2I
  2526 3850 A9 00 95 A3			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  2527 3854 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  2528 3858 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  2529 385C B5 93			lda :STACKORIGIN-1,x
  2530 385E 18 75 94			add :STACKORIGIN,x
  2531 3861 8D 67 3D			sta _RATIO
  2532 3864 CA				dex
  2533 3865 CA				dex
  2534
  2535 				; optimize OK (MIDFILES), line = 377
  2536
  2537 3866 AD 67 3D			lda _RATIO
  2538 3869 C9 10			cmp #$10
  2539 386B 90 12			jcc l_06E3
  2540 386D A9 00			lda #$00
  2541 386F 8D 63 3D			sta RATIO
  2542 3872 8D 64 3D			sta RATIO+1
  2543 3875 A9 70			lda #$70
  2544 3877 8D 65 3D			sta RATIO+2
  2545 387A A9 41			lda #$41
  2546 387C 8D 66 3D			sta RATIO+3
  2547 387F			l_06E3
  2548
  2549 				; optimize OK (MIDFILES), line = 380
  2550
  2551 387F A5 F5			lda _TIMERSTATUS
  2552 3881 29 C0			and #$C0
  2553 3883 0D 67 3D			ora _RATIO
  2554 3886 85 F5			sta _TIMERSTATUS
  2555
  2556 				; optimize FAIL ('@I2F', MIDFILES), line = 383
  2557
  2558 3888 E8				inx
  2559 3889 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2560 388D A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  2561 3891 E8				inx
  2562 3892 AD 5A 3D 95 94		mva FREQ :STACKORIGIN,x
  2563 3897 AD 5B 3D 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2564 389C AD 5C 3D 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2565 38A1 AD 5D 3D 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2566 38A6 E8				inx
  2567 38A7 AD 67 3D 95 94		mva _RATIO :STACKORIGIN,x
  2568 38AC A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2569 38B0 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  2570 38B4 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  2571 38B8 20 A8 2A			jsr @I2F
  2572 38BB 20 D8 28			jsr @FMUL
  2573 38BE CA				dex
  2574 38BF A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  2575 38C3 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  2576 38C7 20 CD 2A			jsr @I2F_m
  2577 38CA 20 8F 29			jsr @FDIV
  2578 38CD CA				dex
  2579 38CE 20 F8 26			jsr @FROUND
  2580 38D1 20 1E 2A			jsr @F2I
  2581 38D4 B5 94			lda :STACKORIGIN,x
  2582 38D6 8D 62 3D			sta FDIV
  2583 38D9 CA				dex
  2584
  2585 				; optimize OK (MIDFILES), line = 389
  2586
  2587 38DA 78				sei
  2588 38DB A9 AA 8D 10 02		mva <INT_TIMER VTIMR1
  2589 38E0 A9 2E 8D 11 02		mva >INT_TIMER VTIMR1+1
  2590 38E5 A9 00			lda #$00
  2591 38E7 A0 03			ldy #$03
  2592 38E9 8D 08 D2			sta AUDCTL
  2593 38EC 8D 01 D2			sta AUDC1
  2594 38EF 8C 0F D2			sty SKCTL
  2595 38F2 8D 08 D2			sta AUDCTL
  2596 38F5 AD 62 3D 8D 00 D2		mva FDIV AUDF1
  2597 38FB A5 10			lda irqens
  2598 38FD 09 01			ora #$01
  2599 38FF 85 10			sta irqens
  2600 3901 8D 0E D2			sta irqen
  2601 3904 8D 09 D2			sta stimer
  2602 3907 58				cli
  2603
  2604 				; ------------------------------------------------------------
  2605
  2606 = 3D5A			FREQ	= DATAORIGIN+$019A
  2607 = 3D5E			_FREQ	= DATAORIGIN+$019E
  2608 = 3D62			FDIV	= DATAORIGIN+$01A2
  2609 = 3D63			RATIO	= DATAORIGIN+$01A3
  2610 = 3D67			_RATIO	= DATAORIGIN+$01A7
  2611
  2612 = 3D5A			@VarData	= FREQ
  2613 = 000E			@VarDataSize	= 14
  2614
  2615 3908			@exit
  2616 					.ifdef @new
  2617 					lda <@VarData
  2618 					sta :ztmp
  2619 					lda >@VarData
  2620 					ldy #@VarDataSize-1
  2621 					jmp @FreeMem
  2622 					els
  2623 3908 60				rts						; ret
  2624 					eif
  2625 				.endl
  2626
  2627 				; ------------------------------------------------------------
  2628 				; ------------------------------------------------------------
  2629 3909			@UnitInit
  2630
  2631 				; optimize OK (MIDFILES), line = 393
  2632
  2633 3909 A9 00			lda #$00
  2634 390B 8D 15 3D			sta OLDTIMERVEC
  2635 390E 8D 16 3D			sta OLDTIMERVEC+1
  2636
  2637 				; optimize OK (MIDFILES), line = 394
  2638
  2639 3911 A9 80			lda #$80
  2640 3913 8D 0F 3D			sta TICKDIV
  2641 3916 A9 01			lda #$01
  2642 3918 8D 10 3D			sta TICKDIV+1
  2643
  2644 				; optimize OK (MIDFILES), line = 395
  2645
  2646 391B A9 20			lda #$20
  2647 391D 8D 11 3D			sta MS_PER_QNOTE
  2648 3920 A9 A1			lda #$A1
  2649 3922 8D 12 3D			sta MS_PER_QNOTE+1
  2650 3925 A9 07			lda #$07
  2651 3927 8D 13 3D			sta MS_PER_QNOTE+2
  2652 392A A9 00			lda #$00
  2653 392C 8D 14 3D			sta MS_PER_QNOTE+3
  2654
  2655 				; optimize OK (MIDFILES), line = 402
  2656
  2657 392F 85 F5			sta _TIMERSTATUS
  2658
  2659 3931 AD 10 02			lda VTIMR1
  2660 3934 8D 15 3D			sta OLDTIMERVEC
  2661 3937 AD 11 02			lda VTIMR1+1
  2662 393A 8D 16 3D			sta OLDTIMERVEC+1
  2663
  2664 393D 60				rts
  2665
  2666 				; ------------------------------------------------------------
  2667
  2668 = 0080			F_COUNTER	= $80
  2669 = 0040			F_TICK	= $40
  2670 = 00C0			F_FLAGS	= $C0
  2671 = 000F			F_RATIO	= $0F
  2672 = 00E0			_TRKREGS	= $E0
  2673 = 0000			MID_0	= $00
  2674 = 0001			MID_1	= $01
  2675 = 0064			ERR_UNSUPPORTED_FORMAT	= $64
  2676 = 0065			ERR_NOT_ENOUGHT_MEMORY	= $65
  2677 = 3D08			MIDDATA	= DATAORIGIN+$0148
  2678 = 3D0A			adr.MIDTRACKS	= [DATAORIGIN+$014A] .array [1]
  2679 393E			.var MIDTRACKS	= adr.MIDTRACKS .word
  2680 = 3D0B			FORMAT	= DATAORIGIN+$014B
  2681 = 3D0D			NTRACKS	= DATAORIGIN+$014D
  2682 = 3D0F			TICKDIV	= DATAORIGIN+$014F
  2683 = 3D11			MS_PER_QNOTE	= DATAORIGIN+$0151
  2684 = 3D15			OLDTIMERVEC	= DATAORIGIN+$0155
  2685 = 00F0			_TOTALTICKS	= $F0
  2686 = 00F4			_SUBCNT	= $F4
  2687 = 00F5			_TIMERSTATUS	= $F5
  2688 = 00F6			_DELTA	= $F6
  2689 = 00F6			_TMP	= $F6
  2690 = 00E0			_PTR	= $E0
  2691 = 00E0			_ADR	= $E0
  2692 = 00E2			_TRACKTIME	= $E2
  2693 = 00E6			_SKIPDELTA	= $E6
  2694 = 00E7			_EVENT	= $E7
  2695 = 6468544D		TAG_MTHD	= $6468544D
  2696 = 6B72544D		TAG_MTRK	= $6B72544D
  2697 = 3D17			adr.BI	= [DATAORIGIN+$0157] .array [4]
  2698 393E			.var BI	= adr.BI .word
  2699 = 0600			adr.RBUF	= $0600
  2700 393E			.var RBUF	= adr.RBUF .word
  2701
  2702 = 393E 0A 3D		MIDTRACKS
  2702 = 3940 17 3D		BI
  2702 = 3942 00 06		RBUF
  2702 				.endl							; UNIT MIDFILES
  2703
  2704 3944			.local	RESET_MIDI					; PROCEDURE
  2705
  2706 				; optimize OK (MIDICar Player.pas), line = 30
  2707
  2708 3944 AD BD 3B			lda GM_RESET
  2709 3947 8D 03 3D			sta MIDI_FIFO.FIFO_SEND.DATA
  2710 394A AD BE 3B			lda GM_RESET+1
  2711 394D 8D 04 3D			sta MIDI_FIFO.FIFO_SEND.DATA+1
  2712 3950 A9 06			lda #$06
  2713 3952 8D 05 3D			sta MIDI_FIFO.FIFO_SEND.LEN
  2714 3955 20 4E 2E			jsr MIDI_FIFO.FIFO_SEND
  2715 3958 20 92 2E			jsr MIDI_FIFO.FIFO_FLUSH
  2716 395B			@exit
  2717 					.ifdef @new
  2718 					lda <@VarData
  2719 					sta :ztmp
  2720 					lda >@VarData
  2721 					ldy #@VarDataSize-1
  2722 					jmp @FreeMem
  2723 					els
  2724 395B 60				rts						; ret
  2725 					eif
  2726 				.endl
  2727 395C			l_00CD
  2728
  2729 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', MIDICar Player.pas), line = 39
  2730
  2731 395C 20 24 2E			jsr MIDI_FIFO.FIFO_RESET
  2732
  2733 				; optimize FAIL ('@print', MIDICar Player.pas), line = 44
  2734
  2735 					@printSTRING #CODEORIGIN+$0027
  2735 				 LDY> CODEORIGIN+$0027\ LDA< CODEORIGIN+$0027\ JSR @PRINTSTRING
  2735 395F A0 20		 LDY> CODEORIGIN+$0027
  2735 3961 A9 27		 LDA< CODEORIGIN+$0027
  2735 3963 20 03 2B		 JSR @PRINTSTRING
  2736 3966 20 EF 2A			@printEOL
  2737
  2738 				; optimize OK (MIDICar Player.pas), line = 45
  2739
  2740 3969 A9 00			lda #$00
  2741 396B 8D 3E 39			sta MIDFILES.MIDTRACKS
  2742 396E A9 40			lda #$40
  2743 3970 8D 3F 39			sta MIDFILES.MIDTRACKS+1
  2744
  2745 				; optimize OK (MIDICar Player.pas), line = 46
  2746
  2747 3973 A9 00			lda #$00
  2748 3975 8D 08 3D			sta MIDFILES.MIDDATA
  2749 3978 A9 41			lda #$41
  2750 397A 8D 09 3D			sta MIDFILES.MIDDATA+1
  2751
  2752 				; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 48
  2753
  2754 397D 20 E2 2D			jsr SYSTEM.PARAMCOUNT
  2755 3980 AD DE 3C			lda SYSTEM.PARAMCOUNT.RESULT
  2756 3983 C9 01			cmp #$01
  2757 3985 D0 72			jne l_0745
  2758 				@
  2759
  2760 				; optimize OK (MIDICar Player.pas), line = 50
  2761
  2762 3987 A9 01			lda #$01
  2763 3989 20 EB 2D			jsr SYSTEM.PARAMSTR
  2764 398C AD 00 2E			lda SYSTEM.PARAMSTR.RESULT
  2765 398F 8D 68 3D			sta FN
  2766 3992 AD 01 2E			lda SYSTEM.PARAMSTR.RESULT+1
  2767 3995 8D 69 3D			sta FN+1
  2768
  2769 				; optimize OK (MIDICar Player.pas), line = 51
  2770
  2771 3998 AD 68 3D			lda FN
  2772 399B 8D 2A 3D			sta MIDFILES.LOADMID.FN
  2773 399E AD 69 3D			lda FN+1
  2774 39A1 8D 2B 3D			sta MIDFILES.LOADMID.FN+1
  2775 39A4 20 68 2F			jsr MIDFILES.LOADMID
  2776 39A7 AD 2C 3D			lda MIDFILES.LOADMID.RESULT
  2777 39AA 8D 75 3D			sta V
  2778
  2779 				; optimize FAIL ('@print', MIDICar Player.pas), line = 52
  2780
  2781 					@print #$9B
  2781 				 LDY# $9B\ JSR @PRINT
  2781 39AD A0 9B		 LDY# $9B
  2781 39AF 20 F4 2A		 JSR @PRINT
  2782
  2783 				; optimize OK (MIDICar Player.pas), line = 53
  2784
  2785 39B2 AD 75 3D			lda V
  2786 39B5 F0 3F			jeq l_0763
  2787
  2788 				; optimize OK (MIDICar Player.pas), line = 55
  2789
  2790 39B7 8D 76 3D			sta @CASETMP_0007
  2791 39BA C9 64			cmp #$64
  2792 39BC D0 0D			jne l_076F
  2793 				@
  2794
  2795 				; optimize FAIL ('@print', MIDICar Player.pas), line = 56
  2796
  2797 					@printSTRING #CODEORIGIN+$004C
  2797 				 LDY> CODEORIGIN+$004C\ LDA< CODEORIGIN+$004C\ JSR @PRINTSTRING
  2797 39BE A0 20		 LDY> CODEORIGIN+$004C
  2797 39C0 A9 4C		 LDA< CODEORIGIN+$004C
  2797 39C2 20 03 2B		 JSR @PRINTSTRING
  2798 39C5 20 EF 2A			@printEOL
  2799
  2800 39C8 4C F1 39			jmp a_0007
  2801 39CB			l_076F
  2802 39CB C9 65			cmp #$65
  2803 39CD D0 0D			jne l_077B
  2804 				@
  2805
  2806 				; optimize FAIL ('@print', MIDICar Player.pas), line = 57
  2807
  2808 					@printSTRING #CODEORIGIN+$0060
  2808 				 LDY> CODEORIGIN+$0060\ LDA< CODEORIGIN+$0060\ JSR @PRINTSTRING
  2808 39CF A0 20		 LDY> CODEORIGIN+$0060
  2808 39D1 A9 60		 LDA< CODEORIGIN+$0060
  2808 39D3 20 03 2B		 JSR @PRINTSTRING
  2809 39D6 20 EF 2A			@printEOL
  2810
  2811 39D9 4C F1 39			jmp a_0007
  2812 39DC			l_077B
  2813 39DC 30 03			bmi @+
  2814 39DE 4C F1 39			jmp l_0787
  2815 				@
  2816
  2817 				; optimize FAIL ('@print', MIDICar Player.pas), line = 58
  2818
  2819 					@printSTRING #CODEORIGIN+$0074
  2819 				 LDY> CODEORIGIN+$0074\ LDA< CODEORIGIN+$0074\ JSR @PRINTSTRING
  2819 39E1 A0 20		 LDY> CODEORIGIN+$0074
  2819 39E3 A9 74		 LDA< CODEORIGIN+$0074
  2819 39E5 20 03 2B		 JSR @PRINTSTRING
  2820 39E8 AD 75 3D			lda V
  2821 39EB 20 3A 2B			jsr @printBYTE._a
  2822 39EE 20 EF 2A			@printEOL
  2823
  2824 39F1			l_0787
  2825 39F1			a_0007
  2826 39F1 A9 00			lda #$00
  2827 39F3 4C A4 3B			jmp @halt
  2828 39F6			l_0763
  2829 39F6 4C 17 3A			jmp l_07A6
  2830 39F9			l_0745
  2831
  2832 				; optimize FAIL ('@print', MIDICar Player.pas), line = 65
  2833
  2834 					@printSTRING #CODEORIGIN+$0081
  2834 				 LDY> CODEORIGIN+$0081\ LDA< CODEORIGIN+$0081\ JSR @PRINTSTRING
  2834 39F9 A0 20		 LDY> CODEORIGIN+$0081
  2834 39FB A9 81		 LDA< CODEORIGIN+$0081
  2834 39FD 20 03 2B		 JSR @PRINTSTRING
  2835 3A00 20 EF 2A			@printEOL
  2836
  2837 				; optimize OK (MIDICar Player.pas), line = 66
  2838
  2839 3A03 A9 01			lda #$01
  2840 3A05 8D 0D 3D			sta MIDFILES.NTRACKS
  2841 3A08 A9 00			lda #$00
  2842 3A0A 8D 0E 3D			sta MIDFILES.NTRACKS+1
  2843
  2844 				; optimize FAIL ('@print', MIDICar Player.pas), line = 67
  2845
  2846 					@printSTRING #CODEORIGIN+$00AD
  2846 				 LDY> CODEORIGIN+$00AD\ LDA< CODEORIGIN+$00AD\ JSR @PRINTSTRING
  2846 3A0D A0 20		 LDY> CODEORIGIN+$00AD
  2846 3A0F A9 AD		 LDA< CODEORIGIN+$00AD
  2846 3A11 20 03 2B		 JSR @PRINTSTRING
  2847 3A14 20 EF 2A			@printEOL
  2848 3A17			l_07A6
  2849
  2850 				; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 73
  2851
  2852 3A17 20 06 2E			jsr MC6850.MC6850_RESET
  2853
  2854 				; optimize OK (MIDICar Player.pas), line = 74
  2855
  2856 3A1A A9 96			lda #$96
  2857 3A1C 20 0C 2E			jsr MC6850.MC6850_INIT
  2858
  2859 				; optimize FAIL ('@print', MIDICar Player.pas), line = 79
  2860
  2861 					@printSTRING #CODEORIGIN+$00BA
  2861 				 LDY> CODEORIGIN+$00BA\ LDA< CODEORIGIN+$00BA\ JSR @PRINTSTRING
  2861 3A1F A0 20		 LDY> CODEORIGIN+$00BA
  2861 3A21 A9 BA		 LDA< CODEORIGIN+$00BA
  2861 3A23 20 03 2B		 JSR @PRINTSTRING
  2862
  2863 				; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 81
  2864
  2865 3A26 20 44 39			jsr RESET_MIDI
  2866
  2867 				; optimize OK (MIDICar Player.pas), line = 82
  2868
  2869 3A29 A9 00			lda #$00
  2870 3A2B 85 F0			sta MIDFILES._TOTALTICKS
  2871 3A2D 85 F1			sta MIDFILES._TOTALTICKS+1
  2872 3A2F 85 F2			sta MIDFILES._TOTALTICKS+2
  2873 3A31 85 F3			sta MIDFILES._TOTALTICKS+3
  2874
  2875 				; optimize FAIL ('MIDFILES.SETTEMPO', MIDICar Player.pas), line = 84
  2876
  2877 3A33 20 3A 37			jsr MIDFILES.SETTEMPO
  2878
  2879 				; optimize OK (MIDICar Player.pas), line = 88
  2880
  2881 3A36 AD 0D 3D			lda MIDFILES.NTRACKS
  2882 3A39 8D 73 3D			sta CTRK
  2883
  2884 				; --- RepeatUntilProlog
  2885 3A3C			l_07C2
  2886
  2887 				; optimize OK (MIDICar Player.pas), line = 91
  2888
  2889 3A3C A9 00			lda #$00
  2890 3A3E CD 0E 3D			cmp MIDFILES.NTRACKS+1
  2891 3A41 D0 06			bne @+
  2892 3A43 AD 73 3D			lda CTRK
  2893 3A46 CD 0D 3D			cmp MIDFILES.NTRACKS
  2894 				@
  2895 3A49 D0 13			jne l_07D5
  2896
  2897 				; optimize OK (MIDICar Player.pas), line = 93
  2898
  2899 3A4B A9 00			lda #$00
  2900 3A4D 8D 6C 3D			sta CURTRACKOFS
  2901 3A50 A9 01			lda #$01
  2902 3A52 8D 73 3D			sta CTRK
  2903
  2904 				; optimize OK (MIDICar Player.pas), line = 94
  2905
  2906 3A55 AD 0D 3D			lda MIDFILES.NTRACKS
  2907 3A58 8D 74 3D			sta PLAYINGTRACKS
  2908 3A5B 4C 6A 3A			jmp l_07EC
  2909 3A5E			l_07D5
  2910
  2911 				; optimize OK (MIDICar Player.pas), line = 98
  2912
  2913 3A5E AD 6C 3D			lda CURTRACKOFS
  2914 3A61 18 69 08			add #$08
  2915 3A64 8D 6C 3D			sta CURTRACKOFS
  2916
  2917 				; optimize FAIL (0, MIDICar Player.pas), line = 99
  2918
  2919 3A67 EE 73 3D			inc CTRK
  2920 3A6A			l_07EC
  2921
  2922 				; optimize OK (MIDICar Player.pas), line = 102
  2923
  2924 3A6A AD 3E 39			lda MIDFILES.MIDTRACKS
  2925 3A6D 18 6D 6C 3D			add CURTRACKOFS
  2926 3A71 85 82			sta :bp2
  2927 3A73 AD 3F 39			lda MIDFILES.MIDTRACKS+1
  2928 3A76 69 00			adc #$00
  2929 3A78 85 83			sta :bp2+1
  2930 3A7A A0 07			ldy #$07
  2931 3A7C B1 82 99 E0 00 88 + 	mva:rpl (:bp2),y $00E0,y-
  2932
  2933 				; optimize OK (MIDICar Player.pas), line = 104
  2934
  2935 3A84 A5 E5			lda MIDFILES._TRACKTIME+3
  2936 3A86 10 03 4C 44 3B		jmi l_0807
  2937
  2938 				; optimize OK (MIDICar Player.pas), line = 106
  2939
  2940 3A8B				.LOCAL
  2941 3A8B A5 F3			lda MIDFILES._TOTALTICKS+3
  2942 3A8D 38 E5 E5			sub MIDFILES._TRACKTIME+3
  2943 3A90 D0 1C			bne L4
  2944 3A92 A5 F2			lda MIDFILES._TOTALTICKS+2
  2945 3A94 C5 E4			cmp MIDFILES._TRACKTIME+2
  2946 3A96 D0 0A			bne L1
  2947 3A98 A5 F1			lda MIDFILES._TOTALTICKS+1
  2948 3A9A C5 E3			cmp MIDFILES._TRACKTIME+1
  2949 3A9C D0 04			bne L1
  2950 3A9E A5 F0			lda MIDFILES._TOTALTICKS
  2951 3AA0 C5 E2			cmp MIDFILES._TRACKTIME
  2952 3AA2 F0 10		L1	beq L5
  2953 3AA4 B0 04			bcs L3
  2954 3AA6 A9 FF			lda #$FF
  2955 3AA8 D0 0A			bne L5
  2956 3AAA A9 01		L3	lda #$01
  2957 3AAC D0 06			bne L5
  2958 3AAE 50 04		L4	bvc L5
  2959 3AB0 49 FF			eor #$FF
  2960 3AB2 09 01			ora #$01
  2961 3AB4			L5
  2962 					.ENDL
  2963 3AB4 10 03 4C 41 3B		jmi l_0818
  2964
  2965 				; optimize OK (MIDICar Player.pas), line = 108
  2966
  2967 3AB9 A5 F5			lda MIDFILES._TIMERSTATUS
  2968 3ABB 09 80			ora #$80
  2969 3ABD 85 F5			sta MIDFILES._TIMERSTATUS
  2970
  2971 				; optimize OK (MIDICar Player.pas), line = 110
  2972
  2973 3ABF A5 F0			lda MIDFILES._TOTALTICKS
  2974 3AC1 38 E5 E2			sub MIDFILES._TRACKTIME
  2975 3AC4 8D 71 3D			sta DTM
  2976 3AC7 A5 F1			lda MIDFILES._TOTALTICKS+1
  2977 3AC9 E5 E3			sbc MIDFILES._TRACKTIME+1
  2978 3ACB 8D 72 3D			sta DTM+1
  2979
  2980 				; optimize FAIL ('MIDFILES.PROCESSTRACK', MIDICar Player.pas), line = 111
  2981
  2982 3ACE 20 21 34			jsr MIDFILES.PROCESSTRACK
  2983 3AD1 AD 52 3D			lda MIDFILES.PROCESSTRACK.RESULT
  2984 3AD4 8D 6D 3D			sta DELTATIME
  2985 3AD7 AD 53 3D			lda MIDFILES.PROCESSTRACK.RESULT+1
  2986 3ADA 8D 6E 3D			sta DELTATIME+1
  2987 3ADD AD 54 3D			lda MIDFILES.PROCESSTRACK.RESULT+2
  2988 3AE0 8D 6F 3D			sta DELTATIME+2
  2989 3AE3 AD 55 3D			lda MIDFILES.PROCESSTRACK.RESULT+3
  2990 3AE6 8D 70 3D			sta DELTATIME+3
  2991
  2992 				; optimize OK (MIDICar Player.pas), line = 112
  2993
  2994 3AE9 30 46			jmi l_083F
  2995 3AEB 0D 6F 3D			ora DELTATIME+2
  2996 3AEE 0D 6E 3D			ora DELTATIME+1
  2997 3AF1 0D 6D 3D			ora DELTATIME
  2998 3AF4 F0 3B			jeq l_083F
  2999
  3000 				; optimize OK (MIDICar Player.pas), line = 113
  3001
  3002 3AF6 A5 F0			lda MIDFILES._TOTALTICKS
  3003 3AF8 18 6D 6D 3D			add DELTATIME
  3004 3AFC 85 9D			sta :STACKORIGIN+9
  3005 3AFE A5 F1			lda MIDFILES._TOTALTICKS+1
  3006 3B00 6D 6E 3D			adc DELTATIME+1
  3007 3B03 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3008 3B05 A5 F2			lda MIDFILES._TOTALTICKS+2
  3009 3B07 6D 6F 3D			adc DELTATIME+2
  3010 3B0A 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
  3011 3B0C A5 F3			lda MIDFILES._TOTALTICKS+3
  3012 3B0E 6D 70 3D			adc DELTATIME+3
  3013 3B11 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
  3014 3B13 A5 9D			lda :STACKORIGIN+9
  3015 3B15 38 ED 71 3D			sub DTM
  3016 3B19 85 E2			sta MIDFILES._TRACKTIME
  3017 3B1B A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  3018 3B1D ED 72 3D			sbc DTM+1
  3019 3B20 85 E3			sta MIDFILES._TRACKTIME+1
  3020 3B22 A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
  3021 3B24 E9 00			sbc #$00
  3022 3B26 85 E4			sta MIDFILES._TRACKTIME+2
  3023 3B28 A5 CD			lda :STACKORIGIN+STACKWIDTH*3+9
  3024 3B2A E9 00			sbc #$00
  3025 3B2C 85 E5			sta MIDFILES._TRACKTIME+3
  3026 3B2E 4C 3B 3B			jmp l_0856
  3027 3B31			l_083F
  3028
  3029 				; optimize OK (MIDICar Player.pas), line = 115
  3030
  3031 3B31 A9 FF			lda #$FF
  3032 3B33 85 E2			sta MIDFILES._TRACKTIME
  3033 3B35 85 E3			sta MIDFILES._TRACKTIME+1
  3034 3B37 85 E4			sta MIDFILES._TRACKTIME+2
  3035 3B39 85 E5			sta MIDFILES._TRACKTIME+3
  3036 3B3B			l_0856
  3037
  3038 				; optimize OK (MIDICar Player.pas), line = 117
  3039
  3040 3B3B A5 F5			lda MIDFILES._TIMERSTATUS
  3041 3B3D 29 7F			and #$7F
  3042 3B3F 85 F5			sta MIDFILES._TIMERSTATUS
  3043 3B41			l_0818
  3044 3B41 4C 47 3B			jmp l_086F
  3045 3B44			l_0807
  3046
  3047 				; optimize FAIL (0, MIDICar Player.pas), line = 121
  3048
  3049 3B44 CE 74 3D			dec PLAYINGTRACKS
  3050 3B47			l_086F
  3051
  3052 				; optimize OK (MIDICar Player.pas), line = 122
  3053
  3054 3B47 AD 3E 39			lda MIDFILES.MIDTRACKS
  3055 3B4A 18 6D 6C 3D			add CURTRACKOFS
  3056 3B4E 85 82			sta :bp2
  3057 3B50 AD 3F 39			lda MIDFILES.MIDTRACKS+1
  3058 3B53 69 00			adc #$00
  3059 3B55 85 83			sta :bp2+1
  3060 3B57 A0 07			ldy #$07
  3061 3B59 B9 E0 00 91 82 88 + 	mva:rpl $00E0,y (:bp2),y-
  3062
  3063 				; optimize OK (MIDICar Player.pas), line = 125
  3064
  3065 3B61 AD 00 D5			lda MC6850.MC6850_CNTRREG
  3066 3B64 29 02			and #$02
  3067 3B66 F0 0E			jeq l_088F
  3068
  3069 				; optimize OK (MIDICar Player.pas), line = 126
  3070
  3071 3B68 A5 FE			lda MIDI_FIFO.FIFO_TAIL
  3072 3B6A C5 FD			cmp MIDI_FIFO.FIFO_HEAD
  3073 3B6C F0 08			jeq l_08A4
  3074
  3075 				; optimize FAIL ('MIDI_FIFO.FIFO_READBYTE', MIDICar Player.pas), line = 129
  3076
  3077 3B6E 20 40 2E			jsr MIDI_FIFO.FIFO_READBYTE
  3078
  3079 				; optimize OK (MIDICar Player.pas), line = 130
  3080
  3081 3B71 A5 FF			lda MIDI_FIFO.FIFO_BYTE
  3082 3B73 8D 01 D5			sta MC6850.MC6850_BUFFER
  3083 3B76			l_08A4
  3084 3B76			l_088F
  3085
  3086 				; optimize OK (MIDICar Player.pas), line = 135
  3087
  3088 3B76 AD 74 3D			lda PLAYINGTRACKS
  3089 3B79 F0 0A			jeq l_07C2x
  3090 3B7B AD FC 02			lda $02FC
  3091 3B7E C9 FF			cmp #$FF
  3092 3B80 D0 03 4C 3C 3A		jeq l_07C2
  3093 3B85			l_07C2x
  3094
  3095 				; optimize FAIL ('@print', MIDICar Player.pas), line = 137
  3096
  3097 					@print #$9C
  3097 				 LDY# $9C\ JSR @PRINT
  3097 3B85 A0 9C		 LDY# $9C
  3097 3B87 20 F4 2A		 JSR @PRINT
  3098
  3099 				; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 144
  3100
  3101 3B8A 20 44 39			jsr RESET_MIDI
  3102
  3103 				; optimize OK (MIDICar Player.pas), line = 150
  3104
  3105 3B8D 78				sei
  3106 3B8E AD 15 3D 8D 10 02		mva MIDFILES.OLDTIMERVEC VTIMR1
  3107 3B94 AD 16 3D 8D 11 02		mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
  3108 3B9A A5 10			lda irqens
  3109 3B9C 29 FE			and #$fe
  3110 3B9E 85 10			sta irqens
  3111 3BA0 8D 0E D2			sta irqen
  3112 3BA3 58				cli
  3113
  3114 				; ------------------------------------------------------------
  3115
  3116 = 4000			TRACK_DATA_ADDR	= $4000
  3117 = 4100			MIDI_DATA_ADDR	= $4100
  3118 = 20C6			adr.GM_RESET	= CODEORIGIN+$00C6
  3119 3BA4			.var GM_RESET	= adr.GM_RESET .word
  3120 = 3D68			FN	= DATAORIGIN+$01A8
  3121 = 3D6A			TRKPTR	= DATAORIGIN+$01AA
  3122 = 3BC0			TRKPTR.PTR	= DATAORIGIN+$0000
  3123 = 3BC2			TRKPTR.TRACKTIME	= DATAORIGIN+$0002
  3124 = 3BC6			TRKPTR.SKIPDELTA	= DATAORIGIN+$0006
  3125 = 3BC7			TRKPTR._EVENT	= DATAORIGIN+$0007
  3126 = 3D6C			CURTRACKOFS	= DATAORIGIN+$01AC
  3127 = 3D6D			DELTATIME	= DATAORIGIN+$01AD
  3128 = 3D71			DTM	= DATAORIGIN+$01B1
  3129 = 3D73			CTRK	= DATAORIGIN+$01B3
  3130 = 3D74			PLAYINGTRACKS	= DATAORIGIN+$01B4
  3131 = 3D75			V	= DATAORIGIN+$01B5
  3132 = 3D76			@CASETMP_0007	= DATAORIGIN+$01B6
  3133 3BA4			@exit
  3134
  3135 3BA4 A2 00		@halt	ldx #$00
  3136 3BA6 9A				txs
  3137 					.ifdef MAIN.@DEFINES.ROMOFF
  3138 3BA7 EE 01 D3			inc portb
  3139 					.fi
  3140
  3141 3BAA A0 01			ldy #$01
  3142
  3143 3BAC 60				rts
  3144
  3145 				; ------------------------------------------------------------
  3146
  3147 3BAD 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  3148
  3149 				; ------------------------------------------------------------
  3150
  3151 3BBD			.local	@DEFINES
  3152 3BBD			ATARI
  3153 3BBD			USE_FIFO
  3154 3BBD			ROMOFF
  3155 				.endl
  3156
  3157 3BBD			.local	@RESOURCE
  3158 				.endl
  3159
  3160 = 3BBD C6 20		GM_RESET
  3160 				.endl							; MAIN
  3161
  3162 				; ------------------------------------------------------------
  3163 				; ------------------------------------------------------------
  3164
  3165 				.macro	UNITINITIALIZATION
  3166 				
  3167 					.ifdef MAIN.SYSTEM.@UnitInit
  3168 					jsr MAIN.SYSTEM.@UnitInit
  3169 					.fi
  3170 				
  3171 					.ifdef MAIN.MC6850.@UnitInit
  3172 					jsr MAIN.MC6850.@UnitInit
  3173 					.fi
  3174 				
  3175 					.ifdef MAIN.DOS.@UnitInit
  3176 					jsr MAIN.DOS.@UnitInit
  3177 					.fi
  3178 				
  3179 					.ifdef MAIN.STRUTILS.@UnitInit
  3180 					jsr MAIN.STRUTILS.@UnitInit
  3181 					.fi
  3182 				
  3183 					.ifdef MAIN.SYSUTILS.@UnitInit
  3184 					jsr MAIN.SYSUTILS.@UnitInit
  3185 					.fi
  3186 				
  3187 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  3188 					jsr MAIN.MIDI_FIFO.@UnitInit
  3189 					.fi
  3190 				
  3191 					.ifdef MAIN.MIDFILES.@UnitInit
  3192 					jsr MAIN.MIDFILES.@UnitInit
  3193 					.fi
  3194 				.endm
  3195
  3196 				; ------------------------------------------------------------
  3197
  3198 					ift .SIZEOF(MAIN.SYSTEM) > 0
  3199 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  3199 				SYSTEM: $2C7D..$2E05
  3200 					eif
  3201
  3202 					ift .SIZEOF(MAIN.MC6850) > 0
  3203 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  3203 				MC6850: $2E06..$2E23
  3204 					eif
  3205
  3206 					ift .SIZEOF(MAIN.DOS) > 0
  3207 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  3208 					eif
  3209
  3210 					ift .SIZEOF(MAIN.STRUTILS) > 0
  3211 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  3212 					eif
  3213
  3214 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  3215 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  3216 					eif
  3217
  3218 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  3219 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  3219 				MIDI_FIFO: $2E24..$2EA9
  3220 					eif
  3221
  3222 					ift .SIZEOF(MAIN.MIDFILES) > 0
  3223 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  3223 				MIDFILES: $2EAA..$3943
  3224 					eif
  3225
  3226 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  3226 				CODE: $2000..$3BBC
  3227
  3228 				; ------------------------------------------------------------
  3229
  3230 3BBF				.align $0004
  3231
  3232 3BC0			DATAORIGIN
  3233 3BC0-3BC5> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  3234
  3235 = 0006			VARINITSIZE	= *-DATAORIGIN
  3236 = 01B7			VARDATASIZE	= 439
  3237
  3238 = 3D77			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  3239
  3240 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  3240 				DATA: $3BC0..$3D77
  3241
  3242 02E0-02E1> D6 2B			run START
  3243
  3244 				; ------------------------------------------------------------
  3245
  3246 				.macro	STATICDATA
  3247 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $0A $4F $70  $65 $6E $20 $66 $69 $6C $65 $20
  3248 				.by  $00 $07 $54 $72 $61 $63 $6B $3A  $20 $00 $03 $2E $2E $2E $00 $23  $4D $49 $44 $20 $50 $6C $61 $79
  3249 				.by  $65 $72 $20 $66 $6F $72 $20 $4D  $49 $44 $49 $43 $61 $72 $20 $52  $43 $31 $20 $32 $30 $32 $32 $20
  3250 				.by  $47 $53 $44 $00 $12 $55 $6E $73  $75 $70 $70 $6F $72 $74 $65 $64  $20 $66 $6F $72 $6D $61 $74 $00
  3251 				.by  $12 $4E $6F $74 $20 $65 $6E $6F  $75 $67 $68 $74 $20 $6D $65 $6D  $6F $72 $79 $00 $0B $49 $2F $4F
  3252 				.by  $20 $45 $72 $72 $6F $72 $20 $23  $00 $2A $54 $79 $70 $65 $20 $22  $50 $20 $64 $65 $76 $69 $63 $65
  3253 				.by  $3A $66 $69 $6C $65 $6E $61 $6D  $65 $2E $4D $49 $44 $22 $20 $74  $6F $20 $70 $6C $61 $79 $20 $66
  3254 				.by  $69 $6C $65 $2E $00 $0B $53 $65  $6C $66 $74 $65 $73 $74 $2E $2E  $2E $00 $0A $50 $6C $61 $79 $69
  3255 				.by  $6E $67 $2E $2E $2E $00 $F0 $7E  $7F $09 $01 $F7
  3256 				.endm
  3257
  3258 					end
