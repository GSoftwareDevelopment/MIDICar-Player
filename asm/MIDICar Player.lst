mads 2.1.6
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 8000			CODEORIGIN	= $8000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				.local	RESOURCE
   105 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1142 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 8075				RCDATA 'resources/font_blk.fnt' CHARS_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('resources/font_blk.fnt')-0
    28 8075				org main.CHARS_ADDR
    30 3000-33FF> 00 00 00 00 + 	ins 'resources/font_blk.fnt',0
    32 					.print '$R RCDATA  ',main.CHARS_ADDR,'..',*-1," 'resources/font_blk.fnt'"
    32 				$R RCDATA  $3000..$33FF 'resources/font_blk.fnt'
Source: MIDICar Player.a65
   110 3400				RCASM 'resources/dlist.asm' DLIST_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 3400				org RESORIGIN
     4 = 0049			len = .sizeof(_DLIST_ADDR)
     6 				mcpy	ift main.DLIST_ADDR+len >= $bc20
    11 8075-80DE> 20 41 80		jsr sys.off
    13 8078 A9 96 85 88 A9 80 +  MWA #DATA EDX
    13 8080 A9 B7 85 8C A9 3F +  MWA #MAIN.DLIST_ADDR ECX
    13 8088 A9 49 85 84 A9 00 +  MWA #LEN EAX
    13 8090 20 00 80		 JSR RESOURCE.MEMCPY
    15 8093 4C 65 80			jmp sys.on
    16 8096			data
Source: dlist.inc
     1 = 0000			DL_BLANK1 = 0; // 1 blank line
     2 = 0010			DL_BLANK2 = %00010000; // 2 blank lines
     3 = 0020			DL_BLANK3 = %00100000; // 3 blank lines
     4 = 0030			DL_BLANK4 = %00110000; // 4 blank lines
     5 = 0040			DL_BLANK5 = %01000000; // 5 blank lines
     6 = 0050			DL_BLANK6 = %01010000; // 6 blank lines
     7 = 0060			DL_BLANK7 = %01100000; // 7 blank lines
     8 = 0070			DL_BLANK8 = %01110000; // 8 blank lines
    10 = 0080			DL_DLI = %10000000; // Order to run DLI
    11 = 0040			DL_LMS = %01000000; // Order to set new memory address
    12 = 0020			DL_VSCROLL = %00100000; // Turn on vertical scroll on this line
    13 = 0010			DL_HSCROLL = %00010000; // Turn on horizontal scroll on this line
    15 = 0002			DL_MODE_40x24T2 = 2; // Antic Modes
    16 = 0004			DL_MODE_40x24T5 = 4;
    17 = 0005			DL_MODE_40x12T5 = 5;
    18 = 0006			DL_MODE_20x24T5 = 6;
    19 = 0007			DL_MODE_20x12T5 = 7;
    20 = 0008			DL_MODE_40x24G4 = 8;
    21 = 0009			DL_MODE_80x48G2 = 9;
    22 = 000A			DL_MODE_80x48G4 = $A;
    23 = 000B			DL_MODE_160x96G2 = $B;
    24 = 000C			DL_MODE_160x192G2 = $C;
    25 = 000D			DL_MODE_160x96G4 = $D;
    26 = 000E			DL_MODE_160x192G4 = $E;
    27 = 000F			DL_MODE_320x192G2 = $F;
    29 = 0001			DL_JMP = %00000001; // Order to jump
    30 = 0041			DL_JVB = %01000001; // Jump to begining
     3 3FB7			dl_start
     4 3FB7 70 70		    :2  dta DL_BLANK8
     6 3FB9 4F 00 34		        dta DL_MODE_320x192G2 + DL_LMS, A(MAIN.SCREEN_ADDR);
     7 3FBC 0F 0F 0F 0F 0F 0F +     :18 dta DL_MODE_320x192G2
     9 3FCE 00			        dta DL_BLANK1
    11 3FCF 02 00 02 00 02 00 +     :18 dta DL_MODE_40x24T2, DL_BLANK1
    13 3FF3 07			        dta DL_MODE_20x12T5
    14 3FF4 00			        dta DL_BLANK1
    15 3FF5 02			        dta DL_MODE_40x24T2
    17 3FF6 00			        dta DL_BLANK1
    18 3FF7 0F 0F 0F 0F 0F 0F	    :6 dta DL_MODE_320x192G2
    20 3FFD 41 B7 3F		        dta DL_JVB, A(dl_start)
    23 					.print '$R RCASM   ',main.DLIST_ADDR,'..',main.DLIST_ADDR+len-1," 'resources/dlist.asm'"
    23 				$R RCASM   $3FB7..$3FFF 'resources/dlist.asm'
    25 02E2-02E3> 75 80			ini mcpy
Source: MIDICar Player.a65
   111 80DF				RCDATA 'resources/header-gr8.obj' SCREEN_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 02F8			len = .filesize('resources/header-gr8.obj')-0
    28 80DF				org main.SCREEN_ADDR
    30 3400-36F7> 07 FF FF FF + 	ins 'resources/header-gr8.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_ADDR,'..',*-1," 'resources/header-gr8.obj'"
    32 				$R RCDATA  $3400..$36F7 'resources/header-gr8.obj'
Source: MIDICar Player.a65
   112 36F8				RCDATA 'resources/footer-gr8-3.obj' SCREEN_FOOT 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 00F0			len = .filesize('resources/footer-gr8-3.obj')-0
    28 36F8				org main.SCREEN_FOOT
    30 3A04-3AF3> 00 00 00 00 + 	ins 'resources/footer-gr8-3.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_FOOT,'..',*-1," 'resources/footer-gr8-3.obj'"
    32 				$R RCDATA  $3A04..$3AF3 'resources/footer-gr8-3.obj'
Source: MIDICar Player.a65
   113 3AF4				RCDATA 'resources/uvmeter.obj' UVMETER_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0040			len = .filesize('resources/uvmeter.obj')-0
    28 3AF4				org main.UVMETER_ADDR
    30 3B00-3B3F> 41 41 41 41 + 	ins 'resources/uvmeter.obj',0
    32 					.print '$R RCDATA  ',main.UVMETER_ADDR,'..',*-1," 'resources/uvmeter.obj'"
    32 				$R RCDATA  $3B00..$3B3F 'resources/uvmeter.obj'
Source: MIDICar Player.a65
   114 				.endl
   115
   116 				; ------------------------------------------------------------
   117
   118 3B40				org CODEORIGIN
   119
   120 8000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 8000-A784> 00 00 02 7E + .by  $00 $00 $02 $7E $7F $00 $02 $FE  $FF $00 $05 $FB $00 $FC $00 $FD  $00 $04 $2D $65 $6D $1A $00 $02
     2 8018 2B 22 00 02 45 3A + .by  $2B $22 $00 $02 $45 $3A $00 $05  $3B $00 $FC $00 $FD $00 $09 $4E  $B0 $EC $E1 $F9 $E9 $EE $E7 $CE
     3 8030 00 09 4E AE EF 80 + .by  $00 $09 $4E $AE $EF $80 $F3 $EF  $EE $E7 $CE $00 $05 $FB $00 $3C  $00 $FD $00 $09 $4E $80 $B0 $E1
     4 8048 F5 F3 E5 80 CE 00 + .by  $F5 $F3 $E5 $80 $CE $00 $05 $FB  $00 $FC $00 $3D $00 $09 $4E $B3  $F4 $EF $F0 $F0 $E5 $E4 $CE $00
     5 8060 09 4E AC EF E1 E4 + .by  $09 $4E $AC $EF $E1 $E4 $E9 $EE  $E7 $80 $00 $13 $4E $B2 $E5 $E1  $E4 $E9 $EE $E7 $80 $E4 $E9 $F2
     6 8078 E5 E3 F4 EF F2 F9 + .by  $E5 $E3 $F4 $EF $F2 $F9 $80 $00  $12 $4E $B2 $E5 $E1 $E4 $E9 $EE  $E7 $80 $F0 $EC $E1 $F9 $EC $E9
     7 8090 F3 F4 80 00 14 4E + .by  $F3 $F4 $80 $00 $14 $4E $B5 $EE  $F3 $F5 $F0 $F0 $EF $F2 $F4 $E5  $E4 $80 $E6 $EF $F2 $ED $E1 $F4
     8 80A8 CE 00 14 4E AE EF + .by  $CE $00 $14 $4E $AE $EF $F4 $80  $E5 $EE $EF $F5 $E7 $E8 $F4 $80  $ED $E5 $ED $EF $F2 $F9 $CE $00
     9 80C0 11 4E AE EF F4 80 + .by  $11 $4E $AE $EF $F4 $80 $E1 $80  $AD $A9 $A4 $A9 $80 $E6 $E9 $EC  $E5 $CE $00 $0C $4E $A9 $8F $AF
    10 80D8 80 A5 F2 F2 EF F2 + .by  $80 $A5 $F2 $F2 $EF $F2 $80 $83  $00 $02 $44 $3A $00 $08 $4E $B3  $F4 $E1 $F4 $F5 $F3 $CE $00 $09
    11 80F0 4E A3 EF F5 EE F4 + .by  $4E $A3 $EF $F5 $EE $F4 $E5 $F2  $CE $00 $0B $4E $A4 $E9 $F2 $E5  $E3 $F4 $EF $F2 $F9 $CE $00 $0A
    12 8108 4E B0 EC E1 F9 EC + .by  $4E $B0 $EC $E1 $F9 $EC $E9 $F3  $F4 $CE $00 $03 $2A $2E $2A $00  $A8 $00 $0A $08 $0A $A8 $0A $00
    13 8120 02 00 F0 7E 7F 09 + .by  $02 $00 $F0 $7E $7F $09 $01 $F7  $29 $1C $1D $1E
Source: MIDICar Player.a65
   121
   122 				; ------------------------------------------------------------
   123
   124 812C			RTLIB
   125 812C				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   126
   127 				.print 'ZPAGE: ',zpage,'..',zpend-1
   127 				ZPAGE: $0080..$00D3
   128
   129 				.print 'RTLIB: ',RTLIB,'..',*-1
   129 				RTLIB: $812C..$8960
   130
   131 				; ------------------------------------------------------------
   132
   133 8961			START
   134 8961 BA				tsx
   135 8962 8E 5F A7			stx MAIN.@halt+1
   136
   137 					.ifdef fmulinit
   138 					fmulinit
   139 					.fi
   140
   141 = 0053			VLEN	= VARDATASIZE-VARINITSIZE
   142 = 3C18			VADR	= DATAORIGIN+VARINITSIZE
   143
   144 					ift VADR > $BFFF
   145 					ert 'Invalid memory address range ',VADR
   146 					eli (VLEN>0) && (VLEN<=256)
   147 8965 A2 AD			ldx #256-VLEN
   148 8967 A9 00			lda #$00
   149 8969 9D 6B 3B E8 D0 FA		sta:rne VADR+VLEN-256,x+
   150 					eli VLEN>256
   151 					@fill #VADR #VLEN #$00
   152 					eif
   153
   154 				.ifdef :psptr
   155 					mwa #PROGRAMSTACK :psptr
   156 				.fi
   157
   158 					.ifdef MAIN.@DEFINES.ROMOFF
   159 896F				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 896F			.local	rominit
     5
     6 896F 78			        sei
     7 8970 A9 00		        lda #%00000000
     8 8972 8D 0E D4		        sta NMIEN       ;$D40E
     9 8975 A9 FE		        lda #%11111110
    10 8977 8D 01 D3		        sta PORTB       ;$D301
    11
    12 897A A2 03			ldx #3
    13 897C A0 00			ldy #0
    14 897E EE 01 D3		mv	inc portb
    15 8981 B9 00 E0		afnt0	lda $e000,y
    16 8984 CE 01 D3			dec portb
    17 8987 99 00 E0		afnt1	sta $e000,y
    18 898A C8				iny
    19 898B D0 F1			bne mv
    20 898D EE 83 89			inc afnt0+2
    21 8990 EE 89 89			inc afnt1+2
    22 8993 CA				dex
    23 8994 10 E8			bpl mv
    24
    25 8996 A2 B3		        ldx #<nmiint
    26 8998 A0 89		        ldy #>nmiint
    27 899A 8E FA FF		        stx NMIVEC      ;$FFFA
    28 899D 8C FB FF		        sty NMIVEC+1
    29
    30 89A0 A2 BD		        ldx #<irqint
    31 89A2 A0 89		        ldy #>irqint
    32 89A4 8E FE FF		        stx IRQVEC      ;$FFFE
    33 89A7 8C FF FF		        sty IRQVEC+1
    34
    35 89AA A9 40		        lda #%01000000
    36 89AC 8D 0E D4		        sta NMIEN       ;$D40E
    37 89AF 58			        cli
    38
    39 89B0 4C DE 89			jmp skp
    40
    41
    42
    43 89B3 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 89B6 10 03		        spl
    45 89B8 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 89BB 38			        sec
    48 89BC 24			        .byte $24        ;BIT $18
    49
    50 89BD 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 89BE EE 01 D3		        inc PORTB       ;$D301
    55
    56 89C1 48			        pha
    57 89C2 8A			        txa
    58 89C3 48			        pha
    59 89C4 BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 89C5 A9 89		        lda #>iret      ;adres procedury iret
    64 89C7 48			        pha
    65 89C8 A9 D7		        lda #<iret
    66 89CA 48			        pha
    67 89CB BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 89CE 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 89CF 90 03		        scc
    73 89D1 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 89D4 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 89D7 68			iret	pla
    77 89D8 AA				tax
    78 89D9 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 89DA CE 01 D3		        dec PORTB       ;$D301
    83 89DD 40			        rti
    84
    85 89DE			skp
    86
    87 				.endl
    88
   160 					.fi
   161
   162 89DE A2 0F			ldx #$0F					; DOS II+/D ParamStr
   163 89E0 BD 40 03 9D 67 A7 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   164
   165 89E9 E8				inx						; X = 0
   166 89EA 86 80			stx bp						; BP = 0
   167
   168 89EC 8E 0F D2			stx skctl					; reset POKEY
   169 89EF A9 03			lda #3
   170 89F1 8D 0F D2			sta skctl
   171
   172 89F4 CA				dex						; X = 255
   173
   174 89F5				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
    19 89F5 20 04 94			jsr MAIN.MIDFILES.@UnitInit
   175
   176 89F8			.local	MAIN						; PROCEDURE
   177
   178 89F8 4C F2 A4			jmp l_011F
   179
   180 				; ------------------------------------------------------------
   181
   182 89FB			.local	SYSTEM						; UNIT
   183
   184 89FB			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   185
   186 				; ------------------------------------------------------------
   187
   188 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   189 				; as Pointer
   190 89FB B5 94			lda :STACKORIGIN,x
   191 89FD 85 88			sta A
   192 89FF B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   193 8A01 85 89			sta A+1
   194 8A03 CA				dex
   195 8A04 10 03 4C 0E 8A		jmi @main
   196
   197 				; ------------------------------------------------------------
   198
   199 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   200 				; as Pointer
   201 8A09 B5 94			lda :STACKORIGIN,x
   202 8A0B 85 8C			sta VALUE
   203 8A0D CA				dex
   204 8A0E			@main
   205
   206 				; -------------------  ASM Block 00000018  -------------------
   207
   208 8A0E A0 00			ldy #0
   209 8A10 A5 8C 91 88			mva value (:edx),y
   210
   211 				; ------------------------------------------------------------
   212
   213 = 0088			A	= :EDX
   214 = 008C			VALUE	= :ECX
   215 8A14			@exit
   216 					.ifdef @new
   217 					lda <@VarData
   218 					sta :ztmp
   219 					lda >@VarData
   220 					ldy #@VarDataSize-1
   221 					jmp @FreeMem
   222 					els
   223 8A14 60				rts						; ret
   224 					eif
   225 				.endl
   226
   227 8A15			.local	FILLCHAR_0162					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   228
   229 					.MACRO m@INLINE
   230 				
   231 				; -------------------  ASM Block 00000021  -------------------
   232 				
   233 					jsr @fill
   234 				
   235 					.ENDM
   236
   237 				; ------------------------------------------------------------
   238
   239 = 0088			A	= :EDX
   240 = 008C			COUNT	= :ECX
   241 = 0084			VALUE	= :EAX
   242 8A15			@exit
   243 				.endl
   244
   245 8A15			.local	FILLCHAR_0163					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   246
   247 					.MACRO m@INLINE
   248 				
   249 				; -------------------  ASM Block 00000024  -------------------
   250 				
   251 					jsr @fill
   252 				
   253 					.ENDM
   254
   255 				; ------------------------------------------------------------
   256
   257 = 0088			X	= :EDX
   258 = 008C			COUNT	= :ECX
   259 = 0084			VALUE	= :EAX
   260 8A15			@exit
   261 				.endl
   262
   263 8A15			.local	MOVE_0164					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   264
   265 					.MACRO m@INLINE
   266 				
   267 				; -------------------  ASM Block 00000028  -------------------
   268 				
   269 					jsr @move
   270 				
   271 					.ENDM
   272
   273 				; ------------------------------------------------------------
   274
   275 = 0088			SOURCE	= :EDX
   276 = 008C			DEST	= :ECX
   277 = 0084			COUNT	= :EAX
   278 8A15			@exit
   279 				.endl
   280
   281 8A15			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   282 8A15 8D 4B 3B			sta I
   283
   284 				; -------------------  ASM Block 00000045  -------------------
   285
   286 					@cmdline i
   286 				 LDA I\ JSR @CMDLINE
   286 8A18 AD 4B 3B		 LDA I
   286 8A1B 20 2C 81		 JSR @CMDLINE
   287
   288 				;	@move #@buf Result #33
   289 8A1E A0 DF			ldy #256-33
   290 8A20 B9 21 03 99 6D 3A + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   291
   292 8A29			@exit
   293
   294 				; ------------------------------------------------------------
   295
   296 = 3B4B			I	= DATAORIGIN+$000B
   297 = 3B4C			adr.RESULT	= [DATAORIGIN+$000C] .array [33]
   298 8A29			.var RESULT	= adr.RESULT .word
   299
   300 = 3B4B			@VarData	= I
   301 = 0022			@VarDataSize	= 34
   302
   303 8A29 60				rts						; ret
   304 = 8A2A 4C 3B		RESULT
   304 				.endl
   305
   306 				; ------------------------------------------------------------
   307
   308 = 0101			__PORTB_BANKS	= $0101
   309 = 0648			M_PI_2	= $0648
   310 = 0192			D_PI_2	= $0192
   311 = 0004			D_PI_180	= $04
   312 = 0000			MGTIA	= $00
   313 = 0080			MVBXE	= $80
   314 = 0000			VBXE_XDLADR	= $00
   315 = 00E0			VBXE_BCBTMP	= $E0
   316 = 0100			VBXE_BCBADR	= $0100
   317 = 1000			VBXE_MAPADR	= $1000
   318 = 1000			VBXE_CHBASE	= $1000
   319 = 5000			VBXE_OVRADR	= $5000
   320 = B000			VBXE_WINDOW	= $B000
   321 = 0000			IDLI	= $00
   322 = 0001			IVBL	= $01
   323 = 0002			ITIM1	= $02
   324 = 0003			ITIM2	= $03
   325 = 0004			ITIM4	= $04
   326 = 00FE			CH_DELCHR	= $FE
   327 = 009B			CH_ENTER	= $9B
   328 = 001B			CH_ESC	= $1B
   329 = 001C			CH_CURS_UP	= $1C
   330 = 001D			CH_CURS_DOWN	= $1D
   331 = 001E			CH_CURS_LEFT	= $1E
   332 = 001F			CH_CURS_RIGHT	= $1F
   333 = 007F			CH_TAB	= $7F
   334 = 009B			CH_EOL	= $9B
   335 = 007D			CH_CLR	= $7D
   336 = 00FD			CH_BELL	= $FD
   337 = 007E			CH_DEL	= $7E
   338 = 009C			CH_DELLINE	= $9C
   339 = 009D			CH_INSLINE	= $9D
   340 = 0000			PAL_PMCOLOR0	= $00
   341 = 0001			PAL_PMCOLOR1	= $01
   342 = 0002			PAL_PMCOLOR2	= $02
   343 = 0003			PAL_PMCOLOR3	= $03
   344 = 0004			PAL_COLOR0	= $04
   345 = 0005			PAL_COLOR1	= $05
   346 = 0006			PAL_COLOR2	= $06
   347 = 0007			PAL_COLOR3	= $07
   348 = 0008			PAL_COLBAK	= $08
   349 = 0000			COLOR_BLACK	= $00
   350 = 000E			COLOR_WHITE	= $0E
   351 = 0032			COLOR_RED	= $32
   352 = 0096			COLOR_CYAN	= $96
   353 = 0068			COLOR_VIOLET	= $68
   354 = 00C4			COLOR_GREEN	= $C4
   355 = 0074			COLOR_BLUE	= $74
   356 = 00EE			COLOR_YELLOW	= $EE
   357 = 0028			COLOR_ORANGE	= $28
   358 = 00E4			COLOR_BROWN	= $E4
   359 = 003C			COLOR_LIGHTRED	= $3C
   360 = 0004			COLOR_GRAY1	= $04
   361 = 0006			COLOR_GRAY2	= $06
   362 = 000A			COLOR_GRAY3	= $0A
   363 = 00CC			COLOR_LIGHTGREEN	= $CC
   364 = 007C			COLOR_LIGHTBLUE	= $7C
   365 = 0004			FMOPENREAD	= $04
   366 = 0008			FMOPENWRITE	= $08
   367 = 0009			FMOPENAPPEND	= $09
   368 = 000C			FMOPENREADWRITE	= $0C
   369 = 3B40			SCREENWIDTH	= DATAORIGIN+$0000
   370 = 3B42			SCREENHEIGHT	= DATAORIGIN+$0002
   371 = 3B44			DATESEPARATOR	= DATAORIGIN+$0004
   372 = D20A			RND	= $D20A
   373 = 02C0			adr.PALETTE	= $02C0
   374 8A2C			.var PALETTE	= adr.PALETTE .word
   375 = D012			adr.HPALETTE	= $D012
   376 8A2C			.var HPALETTE	= adr.HPALETTE .word
   377 = 3B45			FILEMODE	= DATAORIGIN+$0005
   378 = 3B46			GRAPHMODE	= DATAORIGIN+$0006
   379 = 3B47			IORESULT	= DATAORIGIN+$0007
   380 = 3B48			EOLN	= DATAORIGIN+$0008
   381 = 3B49			RNDSEED	= DATAORIGIN+$0009
   382
   383 = 8A2C C0 02		PALETTE
   383 = 8A2E 12 D0		HPALETTE
   383 				.endl							; UNIT SYSTEM
   384
   385 				; ------------------------------------------------------------
   386
   387 8A30			.local	MC6850						; UNIT
   388
   389 8A30			.local	MC6850_INIT					; PROCEDURE | ASSEMBLER | KEEP
   390 8A30 8D 6D 3B			sta SETUP
   391
   392 				; -------------------  ASM Block 00000052  -------------------
   393
   394 8A33 AD 6D 3B		    lda setup
   395 8A36 8D 00 D5		    sta MCBaseState:$d500
   396
   397 				; ------------------------------------------------------------
   398
   399 = 3B6D			SETUP	= DATAORIGIN+$002D
   400
   401 = 3B6D			@VarData	= SETUP
   402 = 0001			@VarDataSize	= 1
   403
   404 8A39			@exit
   405 					.ifdef @new
   406 					lda <@VarData
   407 					sta :ztmp
   408 					lda >@VarData
   409 					ldy #@VarDataSize-1
   410 					jmp @FreeMem
   411 					els
   412 8A39 60				rts						; ret
   413 					eif
   414 				.endl
   415
   416 8A3A			.local	MC6850_SEND2					; PROCEDURE | ASSEMBLER | KEEP
   417
   418 				; -------------------  ASM Block 00000053  -------------------
   419
   420 8A3A			wait:
   421 8A3A AD 00 D5		    lda MCBaseState:$d500
   422 8A3D 29 02		    and #TDRE
   423 8A3F D0 F9		    bne wait
   424
   425 8A41 A5 FF		    lda MC_Byte
   426 8A43 8D 00 D5		    sta MCBaseBuf:$d500
   427
   428 8A46			@exit
   429 					.ifdef @new
   430 					lda <@VarData
   431 					sta :ztmp
   432 					lda >@VarData
   433 					ldy #@VarDataSize-1
   434 					jmp @FreeMem
   435 					els
   436 8A46 60				rts						; ret
   437 					eif
   438 				.endl
   439
   440 				; ------------------------------------------------------------
   441
   442 = 0001			CR0	= $01
   443 = 0002			CR1	= $02
   444 = 0004			CR2	= $04
   445 = 0008			CR3	= $08
   446 = 0010			CR4	= $10
   447 = 0020			CR5	= $20
   448 = 0040			CR6	= $40
   449 = 0080			CR7	= $80
   450 = 0000			CD_1	= $00
   451 = 0001			CD_16	= $01
   452 = 0002			CD_64	= $02
   453 = 0003			MASTERRESET	= $03
   454 = 0000			WS_7BITS	= $00
   455 = 0010			WS_8BITS	= $10
   456 = 0000			WS_2BITSTOP	= $00
   457 = 0008			WS_1BITSTOP	= $08
   458 = 0000			WS_EVENPARITY	= $00
   459 = 0004			WS_ODDPARITY	= $04
   460 = 0000			TC_RTSLOW_NOTIRQ	= $00
   461 = 0020			TC_RTSLOW_TIRQ	= $20
   462 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   463 = 0060			TC_BREAKLEVEL	= $60
   464 = 0000			NOIRQ_RECEIVE	= $00
   465 = 0080			IRQ_RECEIVE	= $80
   466 = 0001			RDRF	= $01
   467 = 0002			TDRE	= $02
   468 = 0004			DCD	= $04
   469 = 0008			CTS	= $08
   470 = 0010			FE	= $10
   471 = 0020			OVRN	= $20
   472 = 0040			PE	= $40
   473 = 0080			IRQ	= $80
   474 = 00FF			MC_BYTE	= $FF
   475
   476 				.endl							; UNIT MC6850
   477
   478 				; ------------------------------------------------------------
   479
   480 8A47			.local	MIDI_FIFO					; UNIT
   481
   482 8A47			.local	FIFO_RESET					; PROCEDURE
   483
   484 				; optimize OK (MIDI_FIFO), line = 30
   485
   486 8A47 A9 00			lda #$00
   487 8A49 85 FD			sta FIFO_HEAD
   488
   489 				; optimize OK (MIDI_FIFO), line = 31
   490
   491 8A4B 85 FE			sta FIFO_TAIL
   492 8A4D			@exit
   493 					.ifdef @new
   494 					lda <@VarData
   495 					sta :ztmp
   496 					lda >@VarData
   497 					ldy #@VarDataSize-1
   498 					jmp @FreeMem
   499 					els
   500 8A4D 60				rts						; ret
   501 					eif
   502 				.endl
   503
   504 8A4E			.local	FIFO_PUSHDIRECT2MC6850				; PROCEDURE | ASSEMBLER
   505
   506 				; -------------------  ASM Block 00000054  -------------------
   507
   508 8A4E AD 00 D5		  lda MCBaseState:$d500 // MC6850.MC6850_CNTRREG
   509 8A51 29 02		  and #MC6850.TDRE
   510 8A53 F0 0E		  beq exitPush
   511
   512 8A55 A4 FE		  ldy FIFO_Tail
   513 8A57 C4 FD		  cpy FIFO_Head
   514 8A59 F0 08		  beq exitPush
   515
   516 8A5B B9 00 06		  lda FIFO_ADDR,y
   517 8A5E 8D 00 D5		  sta MCBaseBuf:$d500  //MC6850.MC6850_BUFFER
   518 8A61 E6 FE		  inc FIFO_Tail
   519
   520 8A63			exitPush:
   521
   522 8A63			@exit
   523 					.ifdef @new
   524 					lda <@VarData
   525 					sta :ztmp
   526 					lda >@VarData
   527 					ldy #@VarDataSize-1
   528 					jmp @FreeMem
   529 					els
   530 8A63 60				rts						; ret
   531 					eif
   532 				.endl
   533
   534 8A64			.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER
   535
   536 				; -------------------  ASM Block 00000055  -------------------
   537
   538 8A64 A5 FD		  lda FIFO_Head
   539 8A66 18			  clc
   540 8A67 69 01		  adc #1
   541 8A69 C5 FE		  cmp FIFO_Tail
   542 8A6B D0 03		  bne storeInFIFO
   543
   544 8A6D 20 7D 8A		  jsr FIFO_Flush
   545
   546 8A70			storeInFIFO:
   547 8A70 A4 FD		  ldy FIFO_Head
   548 8A72 A5 FF		  lda FIFO_Byte
   549 8A74 99 00 06		  sta FIFO_ADDR,y
   550 8A77 E6 FD		  inc FIFO_Head
   551
   552 8A79 20 4E 8A		  jsr FIFO_PushDirect2MC6850
   553 8A7C			exitWrite:
   554
   555 8A7C			@exit
   556 					.ifdef @new
   557 					lda <@VarData
   558 					sta :ztmp
   559 					lda >@VarData
   560 					ldy #@VarDataSize-1
   561 					jmp @FreeMem
   562 					els
   563 8A7C 60				rts						; ret
   564 					eif
   565 				.endl
   566
   567 8A7D			.local	FIFO_FLUSH					; PROCEDURE | ASSEMBLER | KEEP
   568
   569 				; -------------------  ASM Block 00000056  -------------------
   570
   571 8A7D 78			  sei
   572 				  // lda _timerStatus
   573 				  // eor #$80
   574 				  // sta _timerStatus
   575
   576 8A7E A4 FE		  ldy FIFO_Tail
   577 8A80			flushLoop:
   578 8A80 C4 FD		  cpy FIFO_Head
   579 8A82 F0 11		  beq endFlush
   580
   581 8A84			waitOnMC:
   582 8A84 AD 00 D5		  lda MCBaseState:$d500 // MC6850.MC6850_CNTRReg
   583 8A87 29 02		  and #MC6850.TDRE
   584 8A89 F0 F9		  beq waitOnMc
   585
   586 8A8B B9 00 06		  lda FIFO_ADDR,y
   587 8A8E 8D 00 D5		  sta MCBaseBuf:$d500   // MC6850.MC6850_BUFFER
   588
   589 8A91 C8			  iny
   590 8A92 4C 80 8A		  jmp flushLoop
   591
   592 8A95			endFlush:
   593 8A95 84 FE		  sty FIFO_Tail
   594
   595 8A97 58			  cli
   596 				  // lda _timerStatus
   597 				  // eor #$80
   598 				  // sta _timerStatus
   599
   600 8A98			@exit
   601 					.ifdef @new
   602 					lda <@VarData
   603 					sta :ztmp
   604 					lda >@VarData
   605 					ldy #@VarDataSize-1
   606 					jmp @FreeMem
   607 					els
   608 8A98 60				rts						; ret
   609 					eif
   610 				.endl
   611
   612 				; ------------------------------------------------------------
   613
   614 = 00FD			FIFO_HEAD	= $FD
   615 = 00FE			FIFO_TAIL	= $FE
   616 = 00FF			FIFO_BYTE	= $FF
   617 = 3B6E			FIFO2NULL	= DATAORIGIN+$002E
   618 = 0600			FIFO_ADDR	= $0600
   619 = 0600			adr.FIFO_BUF	= $0600
   620 8A99			.var FIFO_BUF	= adr.FIFO_BUF .word
   621 = 00F5			_TIMERSTATUS	= $F5
   622
   623 = 8A99 00 06		FIFO_BUF
   623 				.endl							; UNIT MIDI_FIFO
   624
   625 				; ------------------------------------------------------------
   626
   627 8A9B			.local	CIO						; UNIT
   628
   629 8A9B			.local	OPN						; PROCEDURE | ASSEMBLER
   630
   631 				; -------------------  ASM Block 00000057  -------------------
   632
   633 8A9B 8A 48			txa:pha
   634
   635 8A9D AD 6F 3B			lda chn
   636 8AA0 0A 0A 0A 0A			:4 asl @
   637 8AA4 AA				tax
   638
   639 8AA5 A9 03			lda #$03		;komenda: OPEN
   640 8AA7 9D 42 03			sta iccmd,x
   641
   642 8AAA EE 72 3B D0 03 EE + 	inw device		;omin bajt z dlugoscia STRING-a
   643
   644 8AB2 AD 72 3B			lda device		;adres nazwy pliku
   645 8AB5 9D 44 03			sta icbufa,x
   646 8AB8 AD 73 3B			lda device+1
   647 8ABB 9D 45 03			sta icbufa+1,x
   648
   649 8ABE AD 70 3B			lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
   650 8AC1 9D 4A 03			sta icax1,x
   651
   652 8AC4 AD 71 3B			lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
   653 8AC7 9D 4B 03			sta icax2,x
   654
   655 8ACA				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8ACA EE 01 D3				inc portb
     6 8ACD 20 56 E4				jsr CIOV
     8 8AD0 CE 01 D3				dec portb
Source: MIDICar Player.a65
   656
   657 8AD3 8C 47 3B			sty MAIN.SYSTEM.IOResult
   658
   659 8AD6 68 AA			pla:tax
   660
   661 				; ------------------------------------------------------------
   662
   663 = 3B6F			CHN	= DATAORIGIN+$002F
   664 = 3B70			AX1	= DATAORIGIN+$0030
   665 = 3B71			AX2	= DATAORIGIN+$0031
   666 = 3B72			DEVICE	= DATAORIGIN+$0032
   667
   668 = 3B6F			@VarData	= CHN
   669 = 0005			@VarDataSize	= 5
   670
   671 8AD8			@exit
   672 					.ifdef @new
   673 					lda <@VarData
   674 					sta :ztmp
   675 					lda >@VarData
   676 					ldy #@VarDataSize-1
   677 					jmp @FreeMem
   678 					els
   679 8AD8 60				rts						; ret
   680 					eif
   681 				.endl
   682
   683 8AD9			.local	CLS						; PROCEDURE | ASSEMBLER
   684 8AD9 8D 74 3B			sta CHN
   685
   686 				; -------------------  ASM Block 00000058  -------------------
   687
   688 8ADC 8A 48			txa:pha
   689
   690 8ADE AD 74 3B			lda chn
   691 8AE1 0A 0A 0A 0A			:4 asl @
   692 8AE5 AA				tax
   693
   694 8AE6 A9 0C			lda #$0c		;komenda: CLOSE
   695 8AE8 9D 42 03			sta iccmd,x
   696
   697 8AEB				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8AEB EE 01 D3				inc portb
     6 8AEE 20 56 E4				jsr CIOV
     8 8AF1 CE 01 D3				dec portb
Source: MIDICar Player.a65
   698
   699 8AF4 8C 47 3B			sty MAIN.SYSTEM.IOResult
   700
   701 8AF7 68 AA			pla:tax
   702
   703 				; ------------------------------------------------------------
   704
   705 = 3B74			CHN	= DATAORIGIN+$0034
   706
   707 = 3B74			@VarData	= CHN
   708 = 0001			@VarDataSize	= 1
   709
   710 8AF9			@exit
   711 					.ifdef @new
   712 					lda <@VarData
   713 					sta :ztmp
   714 					lda >@VarData
   715 					ldy #@VarDataSize-1
   716 					jmp @FreeMem
   717 					els
   718 8AF9 60				rts						; ret
   719 					eif
   720 				.endl
   721
   722 8AFA			.local	BGET						; PROCEDURE | ASSEMBLER | REGISTER
   723
   724 				; -------------------  ASM Block 00000060  -------------------
   725
   726 8AFA 8A 48			txa:pha
   727
   728 8AFC A5 88			lda chn
   729 8AFE 0A 0A 0A 0A			:4 asl @
   730 8B02 AA				tax
   731
   732 8B03 A9 07			lda #7		;get char/s command
   733 8B05 9D 42 03			sta iccmd,x
   734
   735 8B08 A5 8C			lda buf
   736 8B0A 9D 44 03			sta icbufa,x
   737 8B0D A5 8D			lda buf+1
   738 8B0F 9D 45 03			sta icbufa+1,x
   739
   740 8B12 A5 84			lda cnt
   741 8B14 9D 48 03			sta icbufl,x
   742 8B17 A5 85			lda cnt+1
   743 8B19 9D 49 03			sta icbufh,x
   744
   745 8B1C				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8B1C EE 01 D3				inc portb
     6 8B1F 20 56 E4				jsr CIOV
     8 8B22 CE 01 D3				dec portb
Source: MIDICar Player.a65
   746
   747 8B25 8C 47 3B			sty MAIN.SYSTEM.IOResult
   748
   749 8B28 68 AA			pla:tax
   750
   751 				; ------------------------------------------------------------
   752
   753 = 0088			CHN	= :EDX
   754 = 008C			BUF	= :ECX
   755 = 0084			CNT	= :EAX
   756 8B2A			@exit
   757 					.ifdef @new
   758 					lda <@VarData
   759 					sta :ztmp
   760 					lda >@VarData
   761 					ldy #@VarDataSize-1
   762 					jmp @FreeMem
   763 					els
   764 8B2A 60				rts						; ret
   765 					eif
   766 				.endl
   767
   768 				; ------------------------------------------------------------
   769
   770 				.endl							; UNIT CIO
   771
   772 				; ------------------------------------------------------------
   773
   774 8B2B			.local	MIDFILES					; UNIT
   775
   776 8B2B			.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT
   777
   778 				; -------------------  ASM Block 00000067  -------------------
   779
   780 8B2B			  icl 'midfile/asms/int_timer.a65'
Source: int_timer.a65
     1 8B2B A5 F5		    lda _timerStatus
     2 8B2D 30 1E		    bmi skip
     3
     4 8B2F			doSubTick:
     5 8B2F 29 0F		    and #f_ratio
     6 8B31 C5 F4		    cmp _subCnt
     7 8B33 F0 04		    beq doMainTick
     8
     9 8B35 E6 F4		    inc _subCnt
    10 8B37 70 14		    bvs skip
    11
    12 8B39			doMainTick:
    13 8B39 A9 01		    lda #1
    14 8B3B 85 F4		    sta _subCnt
    15
    16 8B3D A5 F5		    lda _timerStatus
    17 8B3F 09 40		    ora #f_tick
    18 8B41 85 F5		    sta _timerStatus
    19
    20 8B43 E6 F0		    inc _totalTicks
    21 8B45 D0 06		    bne skip
    22 8B47 E6 F1		    inc _totalTicks+1
    23 8B49 D0 02		    bne skip
    24 8B4B E6 F2		    inc _totalTicks+2
    25 				    // bne skip
    26 				    // inc _totalTicks+3
    27
    28 8B4D			skip:
    29
    30 				//   sty regy
    31
    32 				//   ldy MIDI_FIFO.FIFO_Tail
    33 				//   cpy MIDI_FIFO.FIFO_Head
    34 				//   beq fifo_end
    35
    36 				//   lda MC6850.MC6850_CNTRREG
    37 				//   and #MC6850.TDRE
    38 				//   beq fifo_end
    39
    40 				//   lda MIDI_FIFO.FIFO_ADDR,y
    41 				//   sta MC6850.MC6850_BUFFER
    42
    43 				//   inc MIDI_FIFO.FIFO_Tail
    44
    45 				// fifo_end:
    46 				//   ldy regy:#$00
    47
    48 8B4D 68			  pla
   781
   782 8B4E 40				rti						; ret
   783 				.endl
   784
   785 8B4F			.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER
   786
   787 				; -------------------  ASM Block 00000068  -------------------
   788
   789 8B4F			  icl 'midfile/asms/memory_bound_check.a65'
Source: memory_bound_check.a65
     1 8B4F A5 E2		  lda _adr            // get LSB of address
     2 8B51 F0 01		  beq checkMemType    // zero means, we crossing the page. Check block bounds
     3 8B53 60			  rts
     4
     5 8B54			checkMemType
     6 8B54 A5 E3		  lda _adr+1          // get MSB of address
     7 8B56 A4 E1		  ldy _bank           // get current bank index
     8 8B58 D0 17		  bne checkXMSBound   // zero, means we checking bounds in base memory
     9 				                      // otherwise, we checking bound of extended memory
    10
    11 				// base memory bounds check
    12 				// 1nd, $d800..$ff00
    13 8B5A			check1Bound:
    14 8B5A C9 FF		  cmp #$ff
    15 8B5C D0 05		  bne check2Bound
    16
    17 8B5E A9 A8		  lda #$a8
    18 8B60 85 E3		  sta _adr+1
    19 8B62 60			  rts
    20
    21 				// 2st, $a800..$cfff
    22 8B63			check2bound:
    23 8B63 C9 D0		  cmp #$d0
    24 8B65 D0 05		  bne check3Bound
    25
    26 8B67 A9 40		  lda #$40
    27 8B69 85 E3		  sta _adr+1
    28 8B6B 60			  rts
    29
    30 				// 3nd, $4000..$8000
    31 8B6C			check3Bound
    32 8B6C C9 80		  cmp #$80
    33 8B6E F0 22		  beq outOfMem
    34 8B70 60			  rts
    35
    36 				// extended memory bound check
    37
    38 8B71			checkXMSBound         // extender memory window $4000..$7fff
    39 8B71 C9 80		  cmp #$80            // the bank's memory area ends at $7fff
    40 8B73 F0 01		  beq switchXMSBank   // if MSB addres is out of this address, we need switch bank
    41
    42 8B75 60			  rts
    43
    44 8B76			switchXMSBank:
    45 8B76 88			  dey             // decrement current bank index
    46 8B77 F0 0D		  beq switch2Conv // if zero, meand we back to conventional memory
    47
    48 8B79 B9 00 01		  lda $100,y      // get bank set
    49 8B7C 84 E1		  sty _bank       // store current bank index
    50 8B7E 8D 01 D3		  sta PORTB       // set PORTB (switch bank)
    51 8B81 A9 40		  lda #$40        // set MSB address to the begining of bank
    52 8B83 85 E3		  sta _adr+1
    53 8B85 60			  rts
    54
    55 8B86			switch2Conv:
    56 8B86 84 E1		  sty _bank
    57 8B88 A9 FE		  lda #$fe        // switch to conventional memory and turn off ROM
    58 8B8A 8D 01 D3		  sta PORTB
    59 8B8D A9 A8		  lda #$a8        // set MSB address
    60 8B8F 85 E3		  sta _adr+1
    61 8B91 60			  rts
    62
    63 8B92			outOfMem:
    64 8B92 A9 65		  lda #ERR_NOT_ENOUGHT_MEMORY
    65 8B94 8D 47 3B		  sta SYSTEM.IOResult
   790
   791 8B97			@exit
   792 					.ifdef @new
   793 					lda <@VarData
   794 					sta :ztmp
   795 					lda >@VarData
   796 					ldy #@VarDataSize-1
   797 					jmp @FreeMem
   798 					els
   799 8B97 60				rts						; ret
   800 					eif
   801 				.endl
   802
   803 8B98			.local	LOADMID						; FUNCTION
   804
   805 8B98 4C C5 8C			jmp l_01AB
   806
   807 8B9B			.local	READWORDBI					; FUNCTION
   808
   809 				; optimize OK (bigendian.inc), line = 3
   810
   811 8B9B A9 01			lda #$01
   812 8B9D 85 88			sta CIO.BGET.CHN
   813 8B9F A9 BA			lda <RESULT
   814 8BA1 85 8C			sta CIO.BGET.BUF
   815 8BA3 A9 3B			lda >RESULT
   816 8BA5 85 8D			sta CIO.BGET.BUF+1
   817 8BA7 A9 02			lda #$02
   818 8BA9 85 84			sta CIO.BGET.CNT
   819 8BAB A9 00			lda #$00
   820 8BAD 85 85			sta CIO.BGET.CNT+1
   821 8BAF 20 FA 8A			jsr CIO.BGET
   822
   823 				; -------------------  ASM Block 00000069  -------------------
   824
   825 8BB2 AE BA 3B		    ldx result
   826 8BB5 AC BB 3B		    ldy result+1
   827 8BB8 8E BB 3B		    stx result+1
   828 8BBB 8C BA 3B		    sty result
   829 				  
   830 8BBE			@exit
   831
   832 				; ------------------------------------------------------------
   833
   834 = 3BBA			RESULT	= DATAORIGIN+$007A
   835 8BBE 60				rts						; ret
   836 				.endl
   837
   838 8BBF			.local	READLONGBI					; FUNCTION
   839
   840 				; optimize OK (bigendian.inc), line = 15
   841
   842 8BBF A9 01			lda #$01
   843 8BC1 85 88			sta CIO.BGET.CHN
   844 8BC3 A9 BC			lda <RESULT
   845 8BC5 85 8C			sta CIO.BGET.BUF
   846 8BC7 A9 3B			lda >RESULT
   847 8BC9 85 8D			sta CIO.BGET.BUF+1
   848 8BCB A9 04			lda #$04
   849 8BCD 85 84			sta CIO.BGET.CNT
   850 8BCF A9 00			lda #$00
   851 8BD1 85 85			sta CIO.BGET.CNT+1
   852 8BD3 20 FA 8A			jsr CIO.BGET
   853
   854 				; -------------------  ASM Block 00000070  -------------------
   855
   856 8BD6 AE BC 3B		    ldx result
   857 8BD9 AC BF 3B		    ldy result+3
   858 8BDC 8E BF 3B		    stx result+3
   859 8BDF 8C BC 3B		    sty result
   860
   861 8BE2 AE BD 3B		    ldx result+1
   862 8BE5 AC BE 3B		    ldy result+2
   863 8BE8 8E BE 3B		    stx result+2
   864 8BEB 8C BD 3B		    sty result+1
   865 				  
   866 8BEE			@exit
   867
   868 				; ------------------------------------------------------------
   869
   870 = 3BBC			RESULT	= DATAORIGIN+$007C
   871 8BEE 60				rts						; ret
   872 				.endl
   873
   874 8BEF			.local	_BGET						; PROCEDURE
   875
   876 				; optimize OK (loadmid.inc), line = 21
   877
   878 8BEF A9 01			lda #$01
   879 8BF1 85 88			sta CIO.BGET.CHN
   880 8BF3 AD C0 3B			lda DEST
   881 8BF6 85 8C			sta CIO.BGET.BUF
   882 8BF8 AD C1 3B			lda DEST+1
   883 8BFB 85 8D			sta CIO.BGET.BUF+1
   884 8BFD AD B2 3B			lda LOADSIZE
   885 8C00 85 84			sta CIO.BGET.CNT
   886 8C02 AD B3 3B			lda LOADSIZE+1
   887 8C05 85 85			sta CIO.BGET.CNT+1
   888 8C07 20 FA 8A			jsr CIO.BGET
   889
   890 				; ------------------------------------------------------------
   891
   892 = 3BC0			DEST	= DATAORIGIN+$0080
   893
   894 = 3BC0			@VarData	= DEST
   895 = 0002			@VarDataSize	= 2
   896
   897 8C0A			@exit
   898 					.ifdef @new
   899 					lda <@VarData
   900 					sta :ztmp
   901 					lda >@VarData
   902 					ldy #@VarDataSize-1
   903 					jmp @FreeMem
   904 					els
   905 8C0A 60				rts						; ret
   906 					eif
   907 				.endl
   908
   909 8C0B			.local	CHECKLOADSIZE					; PROCEDURE
   910
   911 				; optimize OK (loadmid.inc), line = 26
   912
   913 8C0B A9 00			lda #$00
   914 8C0D 8D B2 3B			sta LOADSIZE
   915 8C10 8D B3 3B			sta LOADSIZE+1
   916
   917 				; --- RepeatUntilProlog
   918 8C13			l_01CD
   919
   920 				; optimize FAIL ('MEMBOUNDCHECK', loadmid.inc), line = 28
   921
   922 8C13 20 4F 8B			jsr MEMBOUNDCHECK
   923
   924 				; optimize OK (loadmid.inc), line = 29
   925
   926 8C16 AD 47 3B			lda SYSTEM.IORESULT
   927 8C19 C9 01			cmp #$01
   928 8C1B F0 03			jeq l_01E0
   929 8C1D 4C C4 8C			jmp @exit					; exit
   930 8C20			l_01E0
   931
   932 				; optimize OK (loadmid.inc), line = 31
   933
   934 8C20 A5 E3			lda _ADR+1
   935 8C22 C9 D8			cmp #$D8
   936 8C24 90 0D			jcc l_01F4
   937 8C26 A9 00			lda #$00
   938 8C28 8D B2 3B			sta LOADSIZE
   939 8C2B A9 FF			lda #$FF
   940 8C2D 8D B3 3B			sta LOADSIZE+1
   941 8C30 4C 69 8C			jmp l_0202
   942 8C33			l_01F4
   943
   944 				; optimize OK (loadmid.inc), line = 32
   945
   946 8C33 A5 E3			lda _ADR+1
   947 8C35 C9 C0			cmp #$C0
   948 8C37 90 0D			jcc l_0213
   949 8C39 A9 00			lda #$00
   950 8C3B 8D B2 3B			sta LOADSIZE
   951 8C3E A9 D0			lda #$D0
   952 8C40 8D B3 3B			sta LOADSIZE+1
   953 8C43 4C 69 8C			jmp l_0221
   954 8C46			l_0213
   955
   956 				; optimize OK (loadmid.inc), line = 33
   957
   958 8C46 A5 E3			lda _ADR+1
   959 8C48 C9 A8			cmp #$A8
   960 8C4A 90 0D			jcc l_0232
   961 8C4C A9 00			lda #$00
   962 8C4E 8D B2 3B			sta LOADSIZE
   963 8C51 A9 C0			lda #$C0
   964 8C53 8D B3 3B			sta LOADSIZE+1
   965 8C56 4C 69 8C			jmp l_0240
   966 8C59			l_0232
   967
   968 				; optimize OK (loadmid.inc), line = 34
   969
   970 8C59 A5 E3			lda _ADR+1
   971 8C5B C9 40			cmp #$40
   972 8C5D 90 0A			jcc l_0251
   973 8C5F A9 00			lda #$00
   974 8C61 8D B2 3B			sta LOADSIZE
   975 8C64 A9 80			lda #$80
   976 8C66 8D B3 3B			sta LOADSIZE+1
   977 8C69			l_0251
   978 8C69			l_0240
   979 8C69			l_0221
   980 8C69			l_0202
   981
   982 				; optimize OK (loadmid.inc), line = 35
   983
   984 8C69 AD B2 3B			lda LOADSIZE
   985 8C6C 38 E5 E2			sub _ADR
   986 8C6F 8D B2 3B			sta LOADSIZE
   987 8C72 AD B3 3B			lda LOADSIZE+1
   988 8C75 E5 E3			sbc _ADR+1
   989 8C77 8D B3 3B			sta LOADSIZE+1
   990
   991 				; optimize OK (loadmid.inc), line = 37
   992
   993 8C7A				.LOCAL
   994 8C7A A9 00			lda #$00
   995 8C7C 38 ED B7 3B			sub LEN+3
   996 8C80 D0 21			bne L4
   997 8C82 A9 00			lda #$00
   998 8C84 CD B6 3B			cmp LEN+2
   999 8C87 D0 0E			bne L1
  1000 8C89 AD B3 3B			lda LOADSIZE+1
  1001 8C8C CD B5 3B			cmp LEN+1
  1002 8C8F D0 06			bne L1
  1003 8C91 AD B2 3B			lda LOADSIZE
  1004 8C94 CD B4 3B			cmp LEN
  1005 8C97 F0 10		L1	beq L5
  1006 8C99 B0 04			bcs L3
  1007 8C9B A9 FF			lda #$FF
  1008 8C9D D0 0A			bne L5
  1009 8C9F A9 01		L3	lda #$01
  1010 8CA1 D0 06			bne L5
  1011 8CA3 50 04		L4	bvc L5
  1012 8CA5 49 FF			eor #$FF
  1013 8CA7 09 01			ora #$01
  1014 8CA9			L5
  1015 					.ENDL
  1016 8CA9 30 0E			jmi l_026B
  1017 8CAB F0 0C			jeq l_026B
  1018 8CAD AD B4 3B			lda LEN
  1019 8CB0 8D B2 3B			sta LOADSIZE
  1020 8CB3 AD B5 3B			lda LEN+1
  1021 8CB6 8D B3 3B			sta LOADSIZE+1
  1022 8CB9			l_026B
  1023
  1024 				; optimize OK (loadmid.inc), line = 38
  1025
  1026 8CB9 AD B3 3B			lda LOADSIZE+1
  1027 8CBC 0D B2 3B			ora LOADSIZE
  1028 8CBF D0 03 4C 13 8C		jeq l_01CD
  1029 8CC4			@exit
  1030 					.ifdef @new
  1031 					lda <@VarData
  1032 					sta :ztmp
  1033 					lda >@VarData
  1034 					ldy #@VarDataSize-1
  1035 					jmp @FreeMem
  1036 					els
  1037 8CC4 60				rts						; ret
  1038 					eif
  1039 				.endl
  1040 8CC5			l_01AB
  1041
  1042 				; optimize OK (loadmid.inc), line = 42
  1043
  1044 8CC5 A9 01			lda #$01
  1045 8CC7 8D 6F 3B			sta CIO.OPN.CHN
  1046 8CCA A9 04			lda #$04
  1047 8CCC 8D 70 3B			sta CIO.OPN.AX1
  1048 8CCF A9 00			lda #$00
  1049 8CD1 8D 71 3B			sta CIO.OPN.AX2
  1050 8CD4 AD 98 3B			lda FN
  1051 8CD7 8D 72 3B			sta CIO.OPN.DEVICE
  1052 8CDA AD 99 3B			lda FN+1
  1053 8CDD 8D 73 3B			sta CIO.OPN.DEVICE+1
  1054 8CE0 20 9B 8A			jsr CIO.OPN
  1055
  1056 				; optimize OK (loadmid.inc), line = 43
  1057
  1058 8CE3 AD 47 3B			lda SYSTEM.IORESULT
  1059 8CE6 10 0B			jpl l_0297
  1060
  1061 				; optimize OK (loadmid.inc), line = 45
  1062
  1063 8CE8 8D 9A 3B			sta RESULT
  1064
  1065 				; optimize OK (loadmid.inc), line = 46
  1066
  1067 8CEB A9 01			lda #$01
  1068 8CED 20 D9 8A			jsr CIO.CLS
  1069 8CF0 4C E4 8E			jmp @exit					; exit
  1070 8CF3			l_0297
  1071
  1072 				; optimize OK (loadmid.inc), line = 50
  1073
  1074 8CF3 AD 4A 94			lda MIDTRACKS
  1075 8CF6 8D B8 3B			sta TRKDATA
  1076 8CF9 AD 4B 94			lda MIDTRACKS+1
  1077 8CFC 8D B9 3B			sta TRKDATA+1
  1078
  1079 				; optimize OK (loadmid.inc), line = 51
  1080
  1081 8CFF A9 00			lda #$00
  1082 8D01 8D A7 3B			sta TRACKCOUNT
  1083
  1084 				; optimize OK (loadmid.inc), line = 52
  1085
  1086 8D04 A9 FF			lda #$FF
  1087 8D06 8D 79 3B			sta TOTALTRACKS
  1088
  1089 				; --- WhileProlog
  1090 8D09 4C C7 8E			jmp l_02B1
  1091 8D0C			l_02B2
  1092
  1093 				; optimize OK (loadmid.inc), line = 56
  1094
  1095 8D0C A9 01			lda #$01
  1096 8D0E 85 88			sta CIO.BGET.CHN
  1097 8D10 A9 A8			lda <CHUNKTAG
  1098 8D12 85 8C			sta CIO.BGET.BUF
  1099 8D14 A9 3B			lda >CHUNKTAG
  1100 8D16 85 8D			sta CIO.BGET.BUF+1
  1101 8D18 A9 04			lda #$04
  1102 8D1A 85 84			sta CIO.BGET.CNT
  1103 8D1C A9 00			lda #$00
  1104 8D1E 85 85			sta CIO.BGET.CNT+1
  1105 8D20 20 FA 8A			jsr CIO.BGET
  1106
  1107 				; optimize FAIL ('READLONGBI', loadmid.inc), line = 57
  1108
  1109 8D23 20 BF 8B			jsr READLONGBI
  1110 8D26 AD BC 3B			lda READLONGBI.RESULT
  1111 8D29 8D B4 3B			sta LEN
  1112 8D2C AD BD 3B			lda READLONGBI.RESULT+1
  1113 8D2F 8D B5 3B			sta LEN+1
  1114 8D32 AD BE 3B			lda READLONGBI.RESULT+2
  1115 8D35 8D B6 3B			sta LEN+2
  1116 8D38 AD BF 3B			lda READLONGBI.RESULT+3
  1117 8D3B 8D B7 3B			sta LEN+3
  1118
  1119 				; optimize OK (loadmid.inc), line = 58
  1120
  1121 8D3E AD AB 3B			lda CHUNKTAG+3
  1122 8D41 49 64			eor #$64
  1123 8D43 D0 55			jne l_02CA
  1124 8D45 AD AA 3B			lda CHUNKTAG+2
  1125 8D48 49 68			eor #$68
  1126 8D4A D0 4E			jne l_02CA
  1127 8D4C AD A9 3B			lda CHUNKTAG+1
  1128 8D4F 49 54			eor #$54
  1129 8D51 D0 47			jne l_02CA
  1130 8D53 AD A8 3B			lda CHUNKTAG
  1131 8D56 49 4D			eor #$4D
  1132 8D58 D0 40			jne l_02CA
  1133
  1134 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 60
  1135
  1136 8D5A 20 9B 8B			jsr READWORDBI
  1137 8D5D AD BA 3B			lda READWORDBI.RESULT
  1138 8D60 8D 78 3B			sta FORMAT
  1139
  1140 				; optimize OK (loadmid.inc), line = 61
  1141
  1142 8D63 F0 0C			jeq l_02ED
  1143 8D65 C9 01			cmp #$01
  1144 8D67 F0 08			jeq l_02ED
  1145
  1146 				; optimize OK (loadmid.inc), line = 63
  1147
  1148 8D69 A9 64			lda #$64
  1149 8D6B 8D 47 3B			sta SYSTEM.IORESULT
  1150 8D6E 4C D9 8E			jmp b_02B2					; break
  1151 8D71			l_02ED
  1152
  1153 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 66
  1154
  1155 8D71 20 9B 8B			jsr READWORDBI
  1156 8D74 AD BA 3B			lda READWORDBI.RESULT
  1157 8D77 8D 79 3B			sta TOTALTRACKS
  1158
  1159 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 67
  1160
  1161 8D7A 20 9B 8B			jsr READWORDBI
  1162 8D7D AD BA 3B			lda READWORDBI.RESULT
  1163 8D80 8D AC 3B			sta V
  1164 8D83 AD BB 3B			lda READWORDBI.RESULT+1
  1165 8D86 8D AD 3B			sta V+1
  1166
  1167 				; optimize OK (loadmid.inc), line = 68
  1168
  1169 8D89 30 0C			jmi l_0311
  1170
  1171 				; optimize OK (loadmid.inc), line = 69
  1172
  1173 8D8B AD AC 3B			lda V
  1174 8D8E 8D 7A 3B			sta TICKDIV
  1175 8D91 AD AD 3B			lda V+1
  1176 8D94 8D 7B 3B			sta TICKDIV+1
  1177 8D97			l_0311
  1178 8D97 4C C7 8E			jmp l_0322
  1179 8D9A			l_02CA
  1180
  1181 				; optimize OK (loadmid.inc), line = 84
  1182
  1183 8D9A AD AB 3B			lda CHUNKTAG+3
  1184 8D9D 49 6B			eor #$6B
  1185 8D9F F0 03 4C C2 8E		jne l_0332
  1186 8DA4 AD AA 3B			lda CHUNKTAG+2
  1187 8DA7 49 72			eor #$72
  1188 8DA9 F0 03 4C C2 8E		jne l_0332
  1189 8DAE AD A9 3B			lda CHUNKTAG+1
  1190 8DB1 49 54			eor #$54
  1191 8DB3 F0 03 4C C2 8E		jne l_0332
  1192 8DB8 AD A8 3B			lda CHUNKTAG
  1193 8DBB 49 4D			eor #$4D
  1194 8DBD F0 03 4C C2 8E		jne l_0332
  1195
  1196 				; optimize FAIL (0, loadmid.inc), line = 86
  1197
  1198 8DC2 EE A7 3B			inc TRACKCOUNT
  1199
  1200 				; optimize OK (loadmid.inc), line = 88
  1201
  1202 8DC5 AC B8 3B 84 82 AC + 	mwy TRKDATA :bp2
  1203 8DCF A0 00			ldy #$00
  1204 8DD1 98				tya
  1205 8DD2 91 82			sta (:bp2),y
  1206
  1207 				; optimize OK (loadmid.inc), line = 89
  1208
  1209 8DD4 A0 04			ldy #$04
  1210 8DD6 91 82			sta (:bp2),y
  1211 8DD8 C8				iny
  1212 8DD9 91 82			sta (:bp2),y
  1213 8DDB C8				iny
  1214 8DDC 91 82			sta (:bp2),y
  1215 8DDE C8				iny
  1216 8DDF 91 82			sta (:bp2),y
  1217
  1218 				; optimize OK (loadmid.inc), line = 90
  1219
  1220 8DE1 A0 01			ldy #$01
  1221 8DE3 A5 E1			lda _BANK
  1222 8DE5 91 82			sta (:bp2),y
  1223
  1224 				; optimize OK (loadmid.inc), line = 91
  1225
  1226 8DE7 C8				iny
  1227 8DE8 A5 E2			lda _ADR
  1228 8DEA 91 82			sta (:bp2),y
  1229 8DEC C8				iny
  1230 8DED A5 E3			lda _ADR+1
  1231 8DEF 91 82			sta (:bp2),y
  1232
  1233 				; -------------------  ASM Block 00000071  -------------------
  1234
  1235 				 ldy _bank \ lda $100,y \ sta PORTB 
  1235 8DF1 A4 E1		 LDY _BANK 
  1235 8DF3 B9 00 01		 LDA $100,Y 
  1235 8DF6 8D 01 D3		 STA PORTB 
  1236 				; --- WhileProlog
  1237 8DF9 4C 9E 8E			jmp l_034C
  1238 8DFC			l_034D
  1239
  1240 				; optimize FAIL (':TMP', loadmid.inc), line = 97
  1241
  1242 8DFC AD 92 3B			lda LOADPROCESS
  1243 8DFF 85 91			sta :TMP+1
  1244 8E01 AD 93 3B			lda LOADPROCESS+1
  1245 8E04 85 92			sta :TMP+2
  1246 8E06 A9 4C			lda #$4C
  1247 8E08 85 90			sta :TMP
  1248 8E0A E8				inx
  1249 8E0B AD A7 3B 95 94		mva TRACKCOUNT :STACKORIGIN,x
  1250 8E10 20 90 00			jsr :TMP
  1251
  1252 				; optimize FAIL ('CHECKLOADSIZE', loadmid.inc), line = 98
  1253
  1254 8E13 20 0B 8C			jsr CHECKLOADSIZE
  1255
  1256 				; optimize OK (loadmid.inc), line = 99
  1257
  1258 8E16 AD 47 3B			lda SYSTEM.IORESULT
  1259 8E19 C9 01			cmp #$01
  1260 8E1B F0 03			jeq l_0364
  1261 8E1D 4C B1 8E			jmp b_034D					; break
  1262 8E20			l_0364
  1263
  1264 				; optimize OK (loadmid.inc), line = 101
  1265
  1266 8E20 A5 E3			lda _ADR+1
  1267 8E22 C9 C0			cmp #$C0
  1268 8E24 90 2F			jcc l_0378
  1269
  1270 				; optimize OK (loadmid.inc), line = 103
  1271
  1272 8E26 A9 00			lda #$00
  1273 8E28 8D C0 3B			sta _BGET.DEST
  1274 8E2B A9 40			lda #$40
  1275 8E2D 8D C1 3B			sta _BGET.DEST+1
  1276 8E30 20 EF 8B			jsr _BGET
  1277
  1278 				; optimize OK (loadmid.inc), line = 104
  1279
  1280 8E33 AD E7 8E			lda RBUF
  1281 8E36 85 88			sta SYSTEM.MOVE_0164.SOURCE
  1282 8E38 AD E8 8E			lda RBUF+1
  1283 8E3B 85 89			sta SYSTEM.MOVE_0164.SOURCE+1
  1284 8E3D A5 E2			lda _PTR
  1285 8E3F 85 8C			sta SYSTEM.MOVE_0164.DEST
  1286 8E41 A5 E3			lda _PTR+1
  1287 8E43 85 8D			sta SYSTEM.MOVE_0164.DEST+1
  1288 8E45 AD B2 3B			lda LOADSIZE
  1289 8E48 85 84			sta SYSTEM.MOVE_0164.COUNT
  1290 8E4A AD B3 3B			lda LOADSIZE+1
  1291 8E4D 85 85			sta SYSTEM.MOVE_0164.COUNT+1
  1292 8E4F				.local +MAIN.SYSTEM.MOVE_0164
  1293 8E4F				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0164.M@INLINE [Source: MIDICar Player.a65]
     4 8E4F 20 3B 83			jsr @move
Source: MIDICar Player.a65
  1294 					.endl
  1295 8E52 4C 62 8E			jmp l_038B
  1296 8E55			l_0378
  1297
  1298 				; optimize OK (loadmid.inc), line = 107
  1299
  1300 8E55 A5 E2			lda _PTR
  1301 8E57 8D C0 3B			sta _BGET.DEST
  1302 8E5A A5 E3			lda _PTR+1
  1303 8E5C 8D C1 3B			sta _BGET.DEST+1
  1304 8E5F 20 EF 8B			jsr _BGET
  1305 8E62			l_038B
  1306
  1307 				; optimize OK (loadmid.inc), line = 109
  1308
  1309 8E62 AD 47 3B			lda SYSTEM.IORESULT
  1310 8E65 C9 01			cmp #$01
  1311 8E67 F0 03			jeq l_03A0
  1312 8E69 4C B1 8E			jmp b_034D					; break
  1313 8E6C			l_03A0
  1314
  1315 				; optimize OK (loadmid.inc), line = 111
  1316
  1317 8E6C A5 E2			lda _ADR
  1318 8E6E 18 6D B2 3B			add LOADSIZE
  1319 8E72 85 E2			sta _ADR
  1320 8E74 A5 E3			lda _ADR+1
  1321 8E76 6D B3 3B			adc LOADSIZE+1
  1322 8E79 85 E3			sta _ADR+1
  1323
  1324 				; optimize OK (loadmid.inc), line = 112
  1325
  1326 8E7B AD B4 3B			lda LEN
  1327 8E7E 38 ED B2 3B			sub LOADSIZE
  1328 8E82 8D B4 3B			sta LEN
  1329 8E85 AD B5 3B			lda LEN+1
  1330 8E88 ED B3 3B			sbc LOADSIZE+1
  1331 8E8B 8D B5 3B			sta LEN+1
  1332 8E8E AD B6 3B			lda LEN+2
  1333 8E91 E9 00			sbc #$00
  1334 8E93 8D B6 3B			sta LEN+2
  1335 8E96 AD B7 3B			lda LEN+3
  1336 8E99 E9 00			sbc #$00
  1337 8E9B 8D B7 3B			sta LEN+3
  1338 8E9E			l_034C
  1339
  1340 				; optimize OK (loadmid.inc), line = 95
  1341
  1342 8E9E AD B7 3B			lda LEN+3
  1343 8EA1 30 0E			bmi @+
  1344 8EA3 0D B6 3B			ora LEN+2
  1345 8EA6 0D B5 3B			ora LEN+1
  1346 8EA9 0D B4 3B			ora LEN
  1347 8EAC F0 03 4C FC 8D		jne l_034D
  1348 				@
  1349 8EB1			b_034D
  1350
  1351 				; optimize OK (loadmid.inc), line = 114
  1352
  1353 8EB1 AD B8 3B			lda TRKDATA
  1354 8EB4 18 69 09			add #$09
  1355 8EB7 8D B8 3B			sta TRKDATA
  1356 8EBA 90 03			scc
  1357 8EBC EE B9 3B			inc TRKDATA+1
  1358 8EBF 4C C7 8E			jmp l_03BB
  1359 8EC2			l_0332
  1360
  1361 				; optimize OK (loadmid.inc), line = 116
  1362
  1363 8EC2 A9 66			lda #$66
  1364 8EC4 8D 47 3B			sta SYSTEM.IORESULT
  1365 8EC7			l_03BB
  1366 8EC7			l_0322
  1367 8EC7			l_02B1
  1368
  1369 				; optimize OK (loadmid.inc), line = 54
  1370
  1371 8EC7 AD 47 3B			lda SYSTEM.IORESULT
  1372 8ECA C9 01			cmp #$01
  1373 8ECC D0 0B			jne l_02B2w
  1374 8ECE AD A7 3B			lda TRACKCOUNT
  1375 8ED1 CD 79 3B			cmp TOTALTRACKS
  1376 8ED4 B0 03 4C 0C 8D		jcc l_02B2
  1377 8ED9			l_02B2w
  1378 8ED9			b_02B2
  1379
  1380 				; optimize OK (loadmid.inc), line = 118
  1381
  1382 8ED9 AD 47 3B			lda SYSTEM.IORESULT
  1383 8EDC 8D 9A 3B			sta RESULT
  1384
  1385 				; optimize OK (loadmid.inc), line = 119
  1386
  1387 8EDF A9 01			lda #$01
  1388 8EE1 20 D9 8A			jsr CIO.CLS
  1389 8EE4			@exit
  1390
  1391 				; ------------------------------------------------------------
  1392
  1393 = 3B98			FN	= DATAORIGIN+$0058
  1394 = 3B9A			RESULT	= DATAORIGIN+$005A
  1395 = 4000			LOADBUF_SIZE	= $4000
  1396 = 0001			CIO_CHN	= $01
  1397 8EE4			.var F	= DATAORIGIN+$005B .word
  1398 = 3BA7			TRACKCOUNT	= DATAORIGIN+$0067
  1399 = 3BA8			CHUNKTAG	= DATAORIGIN+$0068
  1400 = 3BAC			V	= DATAORIGIN+$006C
  1401 = 3BAE			TOP	= DATAORIGIN+$006E
  1402 = 3BB0			ENDADR	= DATAORIGIN+$0070
  1403 = 3BB2			LOADSIZE	= DATAORIGIN+$0072
  1404 = 3BB4			LEN	= DATAORIGIN+$0074
  1405 = 3BB8			TRKDATA	= DATAORIGIN+$0078
  1406 = 3B40			TRKDATA.STATUS	= DATAORIGIN+$0000
  1407 = 3B41			TRKDATA.BANK	= DATAORIGIN+$0001
  1408 = 3B42			TRKDATA.PTR	= DATAORIGIN+$0002
  1409 = 3B44			TRKDATA.TRACKTIME	= DATAORIGIN+$0004
  1410 = 3B48			TRKDATA._EVENT	= DATAORIGIN+$0008
  1411 = 4000			adr.RBUF	= $4000
  1412 8EE4			.var RBUF	= adr.RBUF .word
  1413
  1414 = 3B98			@VarData	= FN
  1415 = 0020			@VarDataSize	= 32
  1416
  1417 8EE4 60				rts						; ret
  1418 = 8EE5 9B 3B		F
  1418 = 8EE7 00 40		RBUF
  1418 				.endl
  1419
  1420 8EE9			.local	SETTEMPO					; PROCEDURE
  1421
  1422 				; optimize OK (settempo.inc), line = 10
  1423
  1424 8EE9 A5 F5			lda _TIMERSTATUS
  1425 8EEB 49 80			eor #$80
  1426 8EED 85 F5			sta _TIMERSTATUS
  1427
  1428 				; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 13
  1429
  1430 8EEF E8				inx
  1431 8EF0 AD 7C 3B 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  1432 8EF5 AD 7D 3B 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  1433 8EFA AD 7E 3B 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  1434 8EFF AD 7F 3B 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  1435 8F04 E8				inx
  1436 8F05 AD 94 3B 95 94		mva TEMPOSHIFT :STACKORIGIN,x
  1437 8F0A AD 95 3B 95 A4		mva TEMPOSHIFT+1 :STACKORIGIN+STACKWIDTH,x
  1438 8F0F AD 96 3B 95 B4		mva TEMPOSHIFT+2 :STACKORIGIN+STACKWIDTH*2,x
  1439 8F14 AD 97 3B 95 C4		mva TEMPOSHIFT+3 :STACKORIGIN+STACKWIDTH*3,x
  1440 8F19 20 2D 82			jsr addEAX_ECX
  1441 8F1C AD 7A 3B 95 94		mva TICKDIV :STACKORIGIN,x
  1442 8F21 AD 7B 3B 95 A4		mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
  1443 8F26 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1444 8F2A A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1445 8F2E 20 FA 83			jsr divmulINT.DIV
  1446 8F31 CA				dex
  1447 8F32 B5 94			lda :STACKORIGIN,x
  1448 8F34 8D C6 3B			sta _FREQ
  1449 8F37 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1450 8F39 8D C7 3B			sta _FREQ+1
  1451 8F3C B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1452 8F3E 8D C8 3B			sta _FREQ+2
  1453 8F41 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1454 8F43 8D C9 3B			sta _FREQ+3
  1455
  1456 				; optimize FAIL ('@I2F_m', settempo.inc), line = 14
  1457
  1458 8F46 AD C6 3B 95 94		mva _FREQ :STACKORIGIN,x
  1459 8F4B AD C7 3B 95 A4		mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1460 8F50 AD C8 3B 95 B4		mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1461 8F55 AD C9 3B 95 C4		mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1462 8F5A E8				inx
  1463 8F5B A9 00 95 94			mva #$00 :STACKORIGIN,x
  1464 8F5F A9 24 95 A4			mva #$24 :STACKORIGIN+STACKWIDTH,x
  1465 8F63 A9 74 95 B4			mva #$74 :STACKORIGIN+STACKWIDTH*2,x
  1466 8F67 A9 49 95 C4			mva #$49 :STACKORIGIN+STACKWIDTH*3,x
  1467 8F6B 20 1A 89			jsr @I2F_m
  1468 8F6E 20 DC 87			jsr @FDIV
  1469 8F71 CA				dex
  1470 8F72 B5 94			lda :STACKORIGIN,x
  1471 8F74 8D C2 3B			sta FREQ
  1472 8F77 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1473 8F79 8D C3 3B			sta FREQ+1
  1474 8F7C B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1475 8F7E 8D C4 3B			sta FREQ+2
  1476 8F81 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1477 8F83 8D C5 3B			sta FREQ+3
  1478
  1479 				; optimize FAIL ('@FDIV', settempo.inc), line = 15
  1480
  1481 8F86 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1482 8F8A A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1483 8F8E A9 80 95 B4			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  1484 8F92 A9 3F 95 C4			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  1485 8F96 E8				inx
  1486 8F97 AD C2 3B 95 94		mva FREQ :STACKORIGIN,x
  1487 8F9C AD C3 3B 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1488 8FA1 AD C4 3B 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1489 8FA6 AD C5 3B 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1490 8FAB 20 DC 87			jsr @FDIV
  1491 8FAE CA				dex
  1492 8FAF B5 94			lda :STACKORIGIN,x
  1493 8FB1 8D C2 3B			sta FREQ
  1494 8FB4 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1495 8FB6 8D C3 3B			sta FREQ+1
  1496 8FB9 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1497 8FBB 8D C4 3B			sta FREQ+2
  1498 8FBE B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1499 8FC0 8D C5 3B			sta FREQ+3
  1500
  1501 				; optimize FAIL ('@FDIV', settempo.inc), line = 24
  1502
  1503 8FC3 A9 F5 95 94			mva #$F5 :STACKORIGIN,x
  1504 8FC7 A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1505 8FCB A9 7A 95 B4			mva #$7A :STACKORIGIN+STACKWIDTH*2,x
  1506 8FCF A9 43 95 C4			mva #$43 :STACKORIGIN+STACKWIDTH*3,x
  1507 8FD3 E8				inx
  1508 8FD4 AD C2 3B 95 94		mva FREQ :STACKORIGIN,x
  1509 8FD9 AD C3 3B 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1510 8FDE AD C4 3B 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1511 8FE3 AD C5 3B 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1512 8FE8 20 DC 87			jsr @FDIV
  1513 8FEB CA				dex
  1514 8FEC B5 94			lda :STACKORIGIN,x
  1515 8FEE 8D CB 3B			sta RATIO
  1516 8FF1 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1517 8FF3 8D CC 3B			sta RATIO+1
  1518 8FF6 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1519 8FF8 8D CD 3B			sta RATIO+2
  1520 8FFB B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1521 8FFD 8D CE 3B			sta RATIO+3
  1522
  1523 				; optimize FAIL ('@F2I', settempo.inc), line = 25
  1524
  1525 9000 A9 01 95 94			mva #$01 :STACKORIGIN,x
  1526 9004 E8				inx
  1527 9005 AD CB 3B 95 94		mva RATIO :STACKORIGIN,x
  1528 900A AD CC 3B 95 A4		mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
  1529 900F AD CD 3B 95 B4		mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
  1530 9014 AD CE 3B 95 C4		mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
  1531 9019 20 6B 88			jsr @F2I
  1532 901C A9 00 95 A3			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  1533 9020 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1534 9024 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1535 9028 B5 93			lda :STACKORIGIN-1,x
  1536 902A 18 75 94			add :STACKORIGIN,x
  1537 902D 8D CF 3B			sta _RATIO
  1538 9030 CA				dex
  1539 9031 CA				dex
  1540
  1541 				; optimize OK (settempo.inc), line = 26
  1542
  1543 9032 AD CF 3B			lda _RATIO
  1544 9035 C9 10			cmp #$10
  1545 9037 90 12			jcc l_0439
  1546 9039 A9 00			lda #$00
  1547 903B 8D CB 3B			sta RATIO
  1548 903E 8D CC 3B			sta RATIO+1
  1549 9041 A9 70			lda #$70
  1550 9043 8D CD 3B			sta RATIO+2
  1551 9046 A9 41			lda #$41
  1552 9048 8D CE 3B			sta RATIO+3
  1553 904B			l_0439
  1554
  1555 				; optimize OK (settempo.inc), line = 29
  1556
  1557 904B A5 F5			lda _TIMERSTATUS
  1558 904D 29 C0			and #$C0
  1559 904F 0D CF 3B			ora _RATIO
  1560 9052 85 F5			sta _TIMERSTATUS
  1561
  1562 				; optimize OK (settempo.inc), line = 30
  1563
  1564 9054 A9 01			lda #$01
  1565 9056 85 F4			sta _SUBCNT
  1566
  1567 				; optimize FAIL ('@I2F', settempo.inc), line = 32
  1568
  1569 9058 E8				inx
  1570 9059 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1571 905D A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1572 9061 E8				inx
  1573 9062 AD C2 3B 95 94		mva FREQ :STACKORIGIN,x
  1574 9067 AD C3 3B 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1575 906C AD C4 3B 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1576 9071 AD C5 3B 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1577 9076 E8				inx
  1578 9077 AD CF 3B 95 94		mva _RATIO :STACKORIGIN,x
  1579 907C A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1580 9080 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1581 9084 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1582 9088 20 F5 88			jsr @I2F
  1583 908B 20 25 87			jsr @FMUL
  1584 908E CA				dex
  1585 908F A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1586 9093 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1587 9097 20 1A 89			jsr @I2F_m
  1588 909A 20 DC 87			jsr @FDIV
  1589 909D CA				dex
  1590 909E 20 45 85			jsr @FROUND
  1591 90A1 20 6B 88			jsr @F2I
  1592 90A4 B5 94			lda :STACKORIGIN,x
  1593 90A6 8D CA 3B			sta FDIV
  1594 90A9 CA				dex
  1595
  1596 				; optimize OK (settempo.inc), line = 39
  1597
  1598 90AA A5 F5			lda _TIMERSTATUS
  1599 90AC 49 80			eor #$80
  1600 90AE 85 F5			sta _TIMERSTATUS
  1601
  1602 				; -------------------  ASM Block 00000072  -------------------
  1603
  1604 90B0 78			    sei  // disable IRQ
  1605 				  // reset POKEY
  1606 90B1 A9 00		    lda #$00
  1607 90B3 A0 03		    ldy #$03
  1608 90B5 8D 08 D2		    sta AUDCTL
  1609 90B8 8D 01 D2		    sta AUDC1
  1610 90BB 8C 0F D2		    sty SKCTL
  1611 				  // setup TIMER1
  1612 90BE 8D 08 D2		    sta AUDCTL
  1613 90C1 AD CA 3B 8D 00 D2	    mva FDIV AUDF1
  1614 				  // initialize IRQ for TIMER1
  1615 				    // lda irqens
  1616 				    // ora #$01
  1617 				    // sta irqens
  1618 				    // sta irqen
  1619 				  // start timer strobe
  1620 90C7 8D 09 D2		    sta stimer
  1621
  1622 90CA 58			    cli  // enable IRQ
  1623 				  
  1624 				; ------------------------------------------------------------
  1625
  1626 = 3BC2			FREQ	= DATAORIGIN+$0082
  1627 = 3BC6			_FREQ	= DATAORIGIN+$0086
  1628 = 3BCA			FDIV	= DATAORIGIN+$008A
  1629 = 3BCB			RATIO	= DATAORIGIN+$008B
  1630 = 3BCF			_RATIO	= DATAORIGIN+$008F
  1631
  1632 = 3BC2			@VarData	= FREQ
  1633 = 000E			@VarDataSize	= 14
  1634
  1635 90CB			@exit
  1636 					.ifdef @new
  1637 					lda <@VarData
  1638 					sta :ztmp
  1639 					lda >@VarData
  1640 					ldy #@VarDataSize-1
  1641 					jmp @FreeMem
  1642 					els
  1643 90CB 60				rts						; ret
  1644 					eif
  1645 				.endl
  1646
  1647 90CC			.local	PROCESSTRACK					; PROCEDURE | KEEP
  1648
  1649 90CC 4C 89 92			jmp l_0473
  1650
  1651 90CF			.local	READB						; PROCEDURE | INLINE
  1652
  1653 					.MACRO m@INLINE
  1654 				
  1655 				; optimize OK (processtrack.inc), line = 11
  1656 				
  1657 					ldy #$00
  1658 					lda (_PTR),y
  1659 					sta EVENT
  1660 				
  1661 				; optimize FAIL (0, processtrack.inc), line = 12
  1662 				
  1663 					inc _ADR
  1664 					sne
  1665 					inc _ADR+1
  1666 				
  1667 				; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 13
  1668 				
  1669 					jsr MEMBOUNDCHECK
  1670 					.ENDM
  1671 90CF			@exit
  1672 				.endl
  1673
  1674 90CF			.local	READVARL					; PROCEDURE | ASSEMBLER
  1675
  1676 				; -------------------  ASM Block 00000073  -------------------
  1677
  1678 90CF			    icl 'midfile/asms/readvar.asm'
Source: readvar.asm
     1 = 00F6			A equ _delta;
     2 = 00F7			B equ _delta+1;
     3 = 00F8			C equ _delta+2;
     4 = 00F9			D equ _delta+3;
     5
     6 				  .MACRO m@read2A
     7 				    ldy #0
     8 				    lda (_PTR),y
     9 				    sta A
    10 				    inc _ADR
    11 				    sne
    12 				    inc _ADR+1
    13 				    jsr MEMBOUNDCHECK
    14 				    lda A
    15 				  .ENDM
    16
    17 90CF A0 00		  ldy #0
    18 90D1 84 F6		  sty A
    19 90D3 84 F7		  sty B
    20 90D5 84 F8		  sty C
    21 90D7 84 F9		  sty D
    22
    23 				// read block
    24
    25 				// read 1st byte to A
    26 90D9			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 90D9 A0 00		    ldy #0
     2 90DB B1 E2		    lda (_PTR),y
     3 90DD 85 F6		    sta A
     4 90DF E6 E2		    inc _ADR
     5 90E1 D0 02		    sne
     6 90E3 E6 E3		    inc _ADR+1
     7 90E5 20 4F 8B		    jsr MEMBOUNDCHECK
     8 90E8 A5 F6		    lda A
Source: readvar.asm
    27
    28 90EA 10 53		  bpl endRead
    29
    30 				// move A to B and read 2nd byte to A
    31 				// B <- A = 4th readed byte
    32 90EC 29 7F			and #$7F
    33 90EE 85 F7			sta B
    34
    35 				// read 2nd byte
    36 90F0			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 90F0 A0 00		    ldy #0
     2 90F2 B1 E2		    lda (_PTR),y
     3 90F4 85 F6		    sta A
     4 90F6 E6 E2		    inc _ADR
     5 90F8 D0 02		    sne
     6 90FA E6 E3		    inc _ADR+1
     7 90FC 20 4F 8B		    jsr MEMBOUNDCHECK
     8 90FF A5 F6		    lda A
Source: readvar.asm
    37
    38 9101 10 3C		  bpl endRead
    39
    40 				// mova B to C, A to B and read 3rd byte to A
    41 				// C <- B <- A = 4th readed byte
    42 9103 A5 F7			lda B
    43 9105 85 F8			sta C
    44 9107 A5 F6			lda A
    45 9109 29 7F			and #$7F
    46 910B 85 F7			sta B
    47
    48 				// read 3rd
    49 910D			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 910D A0 00		    ldy #0
     2 910F B1 E2		    lda (_PTR),y
     3 9111 85 F6		    sta A
     4 9113 E6 E2		    inc _ADR
     5 9115 D0 02		    sne
     6 9117 E6 E3		    inc _ADR+1
     7 9119 20 4F 8B		    jsr MEMBOUNDCHECK
     8 911C A5 F6		    lda A
Source: readvar.asm
    50
    51 911E 10 1F		  bpl endRead
    52
    53 				// move C to D, B to C, A to B and read 4th byte to A
    54 				// D <- C <- B <- A = 4th readed byte
    55 9120 A5 F8			lda C
    56 9122 85 F9			sta D
    57 9124 A5 F7			lda B
    58 9126 85 F8			sta C
    59 9128 A5 F6			lda A
    60 912A 29 7F			and #$7F
    61 912C 85 F7			sta B
    62
    63 				// read 4th
    64 912E			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 912E A0 00		    ldy #0
     2 9130 B1 E2		    lda (_PTR),y
     3 9132 85 F6		    sta A
     4 9134 E6 E2		    inc _ADR
     5 9136 D0 02		    sne
     6 9138 E6 E3		    inc _ADR+1
     7 913A 20 4F 8B		    jsr MEMBOUNDCHECK
     8 913D A5 F6		    lda A
Source: readvar.asm
    65
    66 				// end read block
    67 913F			endRead:
    68
    69 				// decode block
    70 				// 'A' stays as it is
    71
    72 				// 'B' if geather than zero, lets decode
    73 913F A5 F7		  lda B
    74 9141 F0 0A		  beq decodeC
    75
    76 				// 76543210
    77 				// 0bbbbbbb and %1
    78 				// 0000000b
    79 				//        |
    80 				// +------+ 7:asl
    81 				// v
    82 				// b0000000 ora A
    83 				// baaaaaaa
    84
    85 9143 46 F7		  lsr B
    86 9145 90 06		  bcc decodeC
    87
    88 9147 A5 F6		  lda A
    89 9149 09 80		  ora #$80
    90 914B 85 F6		  sta A
    91
    92 914D			decodeC:
    93 				// 'C' if geather than zero, lets decode
    94 914D A5 F8		  lda C
    95 914F F0 12		  beq decodeD
    96
    97 				// 76543210
    98 				// 0ccccccc and %11
    99 				// 000000cc
   100 				//       ||
   101 				// +-----+| 6:asl
   102 				// |+-----+
   103 				// vv
   104 				// cc000000 ora B
   105 				// ccbbbbbb
   106 9151 29 03		  and #%11    // 2
   107 9153 F0 08		  beq noOrC   // 2**
   108 9155 A8			  tay         // 2
   109 9156 B9 7B 91		  lda OrC,y   // 4*
   110 9159 05 F7		  ora B       // 3
   111 915B 85 F7		  sta B       // 3
   112
   113 915D			noOrC:
   114 915D A5 F8		  lda C       // 3
   115 915F 4A			  lsr @       // 2
   116 9160 4A			  lsr @       // 2
   117 9161 85 F8		  sta C       // 3
   118 				              //=26*+**
   119
   120 9163			decodeD:
   121 				// 'D' if geather than zero, lets decode
   122 9163 A5 F9		  lda D
   123 9165 F0 13		  beq endDecode
   124
   125 				// 76543210
   126 				// 0ddddddd and %111
   127 				// 00000ddd
   128 				//      |||
   129 				// +----+||
   130 				// |+----+| 5:asl
   131 				// ||+----+
   132 				// vvv
   133 				// ddd00000 ora C
   134 				// dddccccc
   135
   136 9167 29 07		  and #%111   // 2
   137 9169 F0 08		  beq noOrD   // 2**
   138 916B A8			  tay         // 2
   139 916C B9 7F 91		  lda OrD,y   // 4*
   140 916F 05 F8		  ora C       // 3
   141 9171 85 F8		  sta C       // 3
   142
   143 9173			noOrD:
   144 9173 A5 F9		  lda D       // 3
   145 9175 4A			  lsr @       // 2
   146 9176 4A			  lsr @       // 2
   147 9177 4A			  lsr @       // 2
   148 9178 85 F9		  sta D       // 3
   149 				              //=28*+**
   150 917A			endDecode:
   151 917A 60			  rts
   152
   153 917B			OrC:
   154 917B 00			  dta %00000000
   155 917C 40			  dta %01000000
   156 917D 80			  dta %10000000
   157 917E C0			  dta %11000000
   158
   159 917F			OrD:
   160 917F 00			  dta %00000000
   161 9180 20			  dta %00100000
   162 9181 40			  dta %01000000
   163 9182 60			  dta %01100000
   164 9183 80			  dta %10000000
   165 9184 A0			  dta %10100000
   166 9185 C0			  dta %11000000
   167 9186 E0			  dta %11100000
  1679 				  
  1680 9187			@exit
  1681 					.ifdef @new
  1682 					lda <@VarData
  1683 					sta :ztmp
  1684 					lda >@VarData
  1685 					ldy #@VarDataSize-1
  1686 					jmp @FreeMem
  1687 					els
  1688 9187 60				rts						; ret
  1689 					eif
  1690 				.endl
  1691
  1692 9188			.local	READ24						; PROCEDURE | ASSEMBLER
  1693
  1694 				; -------------------  ASM Block 00000074  -------------------
  1695
  1696 9188			    icl 'midfile/asms/read24bigendian.pas'
Source: read24bigendian.pas
     1 				  .MACRO m@readByte storeTo
     2 				    ldy #0
     3 				    lda (_PTR),y
     4 				    sta :storeTo
     5 				    inc _ADR
     6 				    sne
     7 				    inc _ADR+1
     8 				    jsr MEMBOUNDCHECK
     9 				  .ENDM
    10
    11 9188			  m@readByte _delta+2
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 9188 A0 00		    ldy #0
     2 918A B1 E2		    lda (_PTR),y
     3 918C 85 F8		    sta _DELTA+2
     4 918E E6 E2		    inc _ADR
     5 9190 D0 02		    sne
     6 9192 E6 E3		    inc _ADR+1
     7 9194 20 4F 8B		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    12 9197			  m@readByte _delta+1
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 9197 A0 00		    ldy #0
     2 9199 B1 E2		    lda (_PTR),y
     3 919B 85 F7		    sta _DELTA+1
     4 919D E6 E2		    inc _ADR
     5 919F D0 02		    sne
     6 91A1 E6 E3		    inc _ADR+1
     7 91A3 20 4F 8B		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    13 91A6			  m@readByte _delta+0
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 91A6 A0 00		    ldy #0
     2 91A8 B1 E2		    lda (_PTR),y
     3 91AA 85 F6		    sta _DELTA+0
     4 91AC E6 E2		    inc _ADR
     5 91AE D0 02		    sne
     6 91B0 E6 E3		    inc _ADR+1
     7 91B2 20 4F 8B		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    14 91B5 A9 00		  lda #0
    15 91B7 85 F9		  sta _delta+3
  1697 				  
  1698 91B9			@exit
  1699 					.ifdef @new
  1700 					lda <@VarData
  1701 					sta :ztmp
  1702 					lda >@VarData
  1703 					ldy #@VarDataSize-1
  1704 					jmp @FreeMem
  1705 					els
  1706 91B9 60				rts						; ret
  1707 					eif
  1708 				.endl
  1709
  1710 91BA			.local	EVENTMIDI3					; PROCEDURE
  1711
  1712 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 4
  1713
  1714 91BA 20 64 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1715
  1716 				; optimize FAIL ('m@INLINE', events.inc), line = 5
  1717
  1718 91BD				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1719 91BD				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 91BD A0 00			ldy #$00
     5 91BF B1 E2			lda (_PTR),y
     6 91C1 85 FF			sta EVENT
    10 91C3 E6 E2			inc _ADR
    11 91C5 D0 02			sne
    12 91C7 E6 E3			inc _ADR+1
    16 91C9 20 4F 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1720 					.endl
  1721 91CC 20 64 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1722
  1723 				; optimize FAIL ('m@INLINE', events.inc), line = 6
  1724
  1725 91CF				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1726 91CF				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 91CF A0 00			ldy #$00
     5 91D1 B1 E2			lda (_PTR),y
     6 91D3 85 FF			sta EVENT
    10 91D5 E6 E2			inc _ADR
    11 91D7 D0 02			sne
    12 91D9 E6 E3			inc _ADR+1
    16 91DB 20 4F 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1727 					.endl
  1728 91DE 20 64 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1729
  1730 				; optimize OK (events.inc), line = 15
  1731
  1732 91E1 A5 FF			lda EVENT
  1733 91E3 F0 12			jeq l_04AE
  1734 91E5 A5 E8			lda _EVENT
  1735 91E7 29 F0			and #$F0
  1736 91E9 C9 90			cmp #$90
  1737 91EB D0 0A			jne l_04AE
  1738
  1739 				; optimize OK (events.inc), line = 16
  1740
  1741 91ED A5 E8			lda _EVENT
  1742 91EF 29 0F			and #$0F
  1743 91F1 A8				tay
  1744 91F2 A5 FF			lda MC6850.MC_BYTE
  1745 91F4 99 80 3B			sta adr.CHNVOLUME,y
  1746 91F7			l_04AE
  1747 91F7			@exit
  1748 					.ifdef @new
  1749 					lda <@VarData
  1750 					sta :ztmp
  1751 					lda >@VarData
  1752 					ldy #@VarDataSize-1
  1753 					jmp @FreeMem
  1754 					els
  1755 91F7 60				rts						; ret
  1756 					eif
  1757 				.endl
  1758
  1759 91F8			.local	EVENTMIDI2					; PROCEDURE
  1760
  1761 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 22
  1762
  1763 91F8 20 64 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1764
  1765 				; optimize FAIL ('m@INLINE', events.inc), line = 23
  1766
  1767 91FB				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1768 91FB				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 91FB A0 00			ldy #$00
     5 91FD B1 E2			lda (_PTR),y
     6 91FF 85 FF			sta EVENT
    10 9201 E6 E2			inc _ADR
    11 9203 D0 02			sne
    12 9205 E6 E3			inc _ADR+1
    16 9207 20 4F 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1769 					.endl
  1770 920A 20 64 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1771 920D			@exit
  1772 					.ifdef @new
  1773 					lda <@VarData
  1774 					sta :ztmp
  1775 					lda >@VarData
  1776 					ldy #@VarDataSize-1
  1777 					jmp @FreeMem
  1778 					els
  1779 920D 60				rts						; ret
  1780 					eif
  1781 				.endl
  1782
  1783 920E			.local	EVENTSYSEX					; PROCEDURE
  1784
  1785 				; optimize FAIL ('READVARL', events.inc), line = 32
  1786
  1787 920E 20 CF 90			jsr READVARL
  1788
  1789 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 34
  1790
  1791 9211 20 64 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1792
  1793 				; --- WhileProlog
  1794 9214 4C 2B 92			jmp l_04CD
  1795 9217			l_04CE
  1796
  1797 				; optimize FAIL ('m@INLINE', events.inc), line = 40
  1798
  1799 9217				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1800 9217				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9217 A0 00			ldy #$00
     5 9219 B1 E2			lda (_PTR),y
     6 921B 85 FF			sta EVENT
    10 921D E6 E2			inc _ADR
    11 921F D0 02			sne
    12 9221 E6 E3			inc _ADR+1
    16 9223 20 4F 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1801 					.endl
  1802
  1803 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 42
  1804
  1805 9226 20 64 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1806
  1807 				; optimize FAIL (0, events.inc), line = 46
  1808
  1809 9229 C6 F6			dec _TMP
  1810 922B			l_04CD
  1811
  1812 				; optimize OK (events.inc), line = 38
  1813
  1814 922B A5 F6			lda _TMP
  1815 922D D0 E8			jne l_04CE
  1816 922F			@exit
  1817 					.ifdef @new
  1818 					lda <@VarData
  1819 					sta :ztmp
  1820 					lda >@VarData
  1821 					ldy #@VarDataSize-1
  1822 					jmp @FreeMem
  1823 					els
  1824 922F 60				rts						; ret
  1825 					eif
  1826 				.endl
  1827
  1828 9230			.local	EVENTMETA					; PROCEDURE
  1829
  1830 				; optimize FAIL ('m@INLINE', events.inc), line = 58
  1831
  1832 9230				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1833 9230				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9230 A0 00			ldy #$00
     5 9232 B1 E2			lda (_PTR),y
     6 9234 85 FF			sta EVENT
    10 9236 E6 E2			inc _ADR
    11 9238 D0 02			sne
    12 923A E6 E3			inc _ADR+1
    16 923C 20 4F 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1834 					.endl
  1835
  1836 				; optimize FAIL ('READVARL', events.inc), line = 59
  1837
  1838 923F 20 CF 90			jsr READVARL
  1839
  1840 				; optimize OK (events.inc), line = 61
  1841
  1842 9242 A5 FF			lda EVENT
  1843 9244 C9 2F			cmp #$2F
  1844 9246 D0 0B			jne l_04F8
  1845
  1846 				; optimize FAIL (0, events.inc), line = 63
  1847
  1848 9248 C6 DF			dec PLAYINGTRACKS
  1849
  1850 				; optimize OK (events.inc), line = 64
  1851
  1852 924A A5 E0			lda _STATUS
  1853 924C 09 40			ora #$40
  1854 924E 85 E0			sta _STATUS
  1855 9250 4C 88 92			jmp l_0510
  1856 9253			l_04F8
  1857
  1858 				; optimize OK (events.inc), line = 66
  1859
  1860 9253 A5 FF			lda EVENT
  1861 9255 C9 51			cmp #$51
  1862 9257 D0 1D			jne l_0522
  1863
  1864 				; optimize FAIL ('READ24', events.inc), line = 68
  1865
  1866 9259 20 88 91			jsr READ24
  1867
  1868 				; optimize OK (events.inc), line = 69
  1869
  1870 925C A5 F6			lda _DELTA
  1871 925E 8D 7C 3B			sta MS_PER_QNOTE
  1872 9261 A5 F7			lda _DELTA+1
  1873 9263 8D 7D 3B			sta MS_PER_QNOTE+1
  1874 9266 A5 F8			lda _DELTA+2
  1875 9268 8D 7E 3B			sta MS_PER_QNOTE+2
  1876 926B A5 F9			lda _DELTA+3
  1877 926D 8D 7F 3B			sta MS_PER_QNOTE+3
  1878
  1879 				; optimize FAIL ('SETTEMPO', events.inc), line = 70
  1880
  1881 9270 20 E9 8E			jsr SETTEMPO
  1882 9273 4C 88 92			jmp l_0532
  1883 9276			l_0522
  1884
  1885 				; --- WhileProlog
  1886 9276 4C 84 92			jmp l_0534
  1887 9279			l_0535
  1888
  1889 				; optimize FAIL (0, events.inc), line = 85
  1890
  1891 9279 C6 F6			dec _TMP
  1892
  1893 				; optimize FAIL (0, events.inc), line = 86
  1894
  1895 927B E6 E2			inc _ADR
  1896 927D D0 02			sne
  1897 927F E6 E3			inc _ADR+1
  1898
  1899 				; optimize FAIL ('MEMBOUNDCHECK', events.inc), line = 87
  1900
  1901 9281 20 4F 8B			jsr MEMBOUNDCHECK
  1902 9284			l_0534
  1903
  1904 				; optimize OK (events.inc), line = 83
  1905
  1906 9284 A5 F6			lda _TMP
  1907 9286 D0 F1			jne l_0535
  1908 9288			l_0532
  1909 9288			l_0510
  1910 9288			@exit
  1911 					.ifdef @new
  1912 					lda <@VarData
  1913 					sta :ztmp
  1914 					lda >@VarData
  1915 					ldy #@VarDataSize-1
  1916 					jmp @FreeMem
  1917 					els
  1918 9288 60				rts						; ret
  1919 					eif
  1920 				.endl
  1921 9289			l_0473
  1922
  1923 				; -------------------  ASM Block 00000075  -------------------
  1924
  1925 				 ldy _bank \ lda $100,y \ sta PORTB 
  1925 9289 A4 E1		 LDY _BANK 
  1925 928B B9 00 01		 LDA $100,Y 
  1925 928E 8D 01 D3		 STA PORTB 
  1926 				; --- RepeatUntilProlog
  1927 9291			l_054C
  1928
  1929 				; optimize OK (processtrack.inc), line = 33
  1930
  1931 9291 A5 E0			lda _STATUS
  1932 9293 30 2E			jmi l_0562
  1933
  1934 				; optimize FAIL ('READVARL', processtrack.inc), line = 35
  1935
  1936 9295 20 CF 90			jsr READVARL
  1937
  1938 				; optimize OK (processtrack.inc), line = 36
  1939
  1940 9298 A5 F9			lda _DELTA+3
  1941 929A 30 24			jmi l_0574
  1942 929C 05 F8			ora _DELTA+2
  1943 929E 05 F7			ora _DELTA+1
  1944 92A0 05 F6			ora _DELTA
  1945 92A2 F0 1C			jeq l_0574
  1946
  1947 				; optimize OK (processtrack.inc), line = 38
  1948
  1949 92A4 A5 E4			lda _TRACKTIME
  1950 92A6 18 65 F6			add _DELTA
  1951 92A9 85 E4			sta _TRACKTIME
  1952 92AB A5 E5			lda _TRACKTIME+1
  1953 92AD 65 F7			adc _DELTA+1
  1954 92AF 85 E5			sta _TRACKTIME+1
  1955 92B1 A5 E6			lda _TRACKTIME+2
  1956 92B3 65 F8			adc _DELTA+2
  1957 92B5 85 E6			sta _TRACKTIME+2
  1958 92B7 A5 E7			lda _TRACKTIME+3
  1959 92B9 65 F9			adc _DELTA+3
  1960 92BB 85 E7			sta _TRACKTIME+3
  1961 92BD 4C 2B 93			jmp b_054C					; break
  1962 92C0			l_0574
  1963 92C0 4C C9 92			jmp l_0588
  1964 92C3			l_0562
  1965
  1966 				; optimize OK (processtrack.inc), line = 43
  1967
  1968 92C3 A5 E0			lda _STATUS
  1969 92C5 29 7F			and #$7F
  1970 92C7 85 E0			sta _STATUS
  1971 92C9			l_0588
  1972
  1973 				; optimize OK (processtrack.inc), line = 45
  1974
  1975 92C9 A0 00			ldy #$00
  1976 92CB B1 E2			lda (_PTR),y
  1977 92CD 10 16			jpl l_05AB
  1978
  1979 				; optimize FAIL ('m@INLINE', processtrack.inc), line = 47
  1980
  1981 92CF				.local READB
  1982 92CF				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 92CF A0 00			ldy #$00
     5 92D1 B1 E2			lda (_PTR),y
     6 92D3 85 FF			sta EVENT
    10 92D5 E6 E2			inc _ADR
    11 92D7 D0 02			sne
    12 92D9 E6 E3			inc _ADR+1
    16 92DB 20 4F 8B			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1983 					.endl
  1984 92DE A5 FF			lda EVENT
  1985 92E0 85 E8			sta _EVENT
  1986 92E2 4C E9 92			jmp l_05BC
  1987 92E5			l_05AB
  1988
  1989 				; optimize OK (processtrack.inc), line = 50
  1990
  1991 92E5 A5 E8			lda _EVENT
  1992 92E7 85 FF			sta EVENT
  1993 92E9			l_05BC
  1994
  1995 				; optimize OK (processtrack.inc), line = 52
  1996
  1997 92E9 A9 BF			lda #$BF
  1998 92EB C5 E8			cmp _EVENT
  1999 92ED 90 06			jcc l_05D4
  2000
  2001 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 54
  2002
  2003 92EF 20 BA 91			jsr EVENTMIDI3
  2004 92F2 4C 22 93			jmp l_05DF
  2005 92F5			l_05D4
  2006 92F5 A9 DF			lda #$DF
  2007 92F7 C5 E8			cmp _EVENT
  2008 92F9 90 06			jcc l_05F1
  2009
  2010 				; optimize FAIL ('EVENTMIDI2', processtrack.inc), line = 56
  2011
  2012 92FB 20 F8 91			jsr EVENTMIDI2
  2013 92FE 4C 22 93			jmp l_05FC
  2014 9301			l_05F1
  2015 9301 A9 EF			lda #$EF
  2016 9303 C5 E8			cmp _EVENT
  2017 9305 90 06			jcc l_060E
  2018
  2019 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 58
  2020
  2021 9307 20 BA 91			jsr EVENTMIDI3
  2022 930A 4C 22 93			jmp l_0619
  2023 930D			l_060E
  2024 930D A9 F7			lda #$F7
  2025 930F C5 E8			cmp _EVENT
  2026 9311 90 06			jcc l_062B
  2027
  2028 				; optimize FAIL ('EVENTSYSEX', processtrack.inc), line = 60
  2029
  2030 9313 20 0E 92			jsr EVENTSYSEX
  2031 9316 4C 22 93			jmp l_0636
  2032 9319			l_062B
  2033 9319 A5 E8			lda _EVENT
  2034 931B C9 FF			cmp #$FF
  2035 931D D0 03			jne l_0648
  2036
  2037 				; optimize FAIL ('EVENTMETA', processtrack.inc), line = 61
  2038
  2039 931F 20 30 92			jsr EVENTMETA
  2040 9322			l_0648
  2041 9322			l_0636
  2042 9322			l_0619
  2043 9322			l_05FC
  2044 9322			l_05DF
  2045
  2046 				; optimize OK (processtrack.inc), line = 63
  2047
  2048 9322 A5 E0			lda _STATUS
  2049 9324 29 40			and #$40
  2050 9326 D0 03 4C 91 92		jeq l_054C
  2051 932B			b_054C
  2052
  2053 				; optimize OK (processtrack.inc), line = 65
  2054
  2055 932B A5 E0			lda _STATUS
  2056 932D 09 80			ora #$80
  2057 932F 85 E0			sta _STATUS
  2058
  2059 				; ------------------------------------------------------------
  2060
  2061 = 00FF			EVENT	= $FF
  2062 9331			@exit
  2063 					.ifdef @new
  2064 					lda <@VarData
  2065 					sta :ztmp
  2066 					lda >@VarData
  2067 					ldy #@VarDataSize-1
  2068 					jmp @FreeMem
  2069 					els
  2070 9331 60				rts						; ret
  2071 					eif
  2072 				.endl
  2073
  2074 9332			.local	PROCESSMIDI					; PROCEDURE
  2075
  2076 				; optimize FAIL ('MIDI_FIFO.FIFO_PUSHDIRECT2MC6850', processmidi.inc), line = 29
  2077
  2078 9332 20 4E 8A			jsr MIDI_FIFO.FIFO_PUSHDIRECT2MC6850
  2079
  2080 				; optimize OK (processmidi.inc), line = 31
  2081
  2082 9335 A5 F5			lda _TIMERSTATUS
  2083 9337 10 03			jpl l_0682
  2084 9339 4C B3 93			jmp @exit					; exit
  2085 933C			l_0682
  2086
  2087 				; optimize OK (processmidi.inc), line = 32
  2088
  2089 933C A5 DE			lda CTRK
  2090 933E CD 79 3B			cmp TOTALTRACKS
  2091 9341 D0 11			jne l_0699
  2092
  2093 				; optimize OK (processmidi.inc), line = 34
  2094
  2095 9343 A9 01			lda #$01
  2096 9345 85 DE			sta CTRK
  2097
  2098 				; optimize OK (processmidi.inc), line = 35
  2099
  2100 9347 AD 4A 94			lda MIDTRACKS
  2101 934A 85 DC			sta CURTRACKPTR
  2102 934C AD 4B 94			lda MIDTRACKS+1
  2103 934F 85 DD			sta CURTRACKPTR+1
  2104 9351 4C 61 93			jmp l_06AC
  2105 9354			l_0699
  2106
  2107 				; optimize FAIL (0, processmidi.inc), line = 39
  2108
  2109 9354 E6 DE			inc CTRK
  2110
  2111 				; optimize OK (processmidi.inc), line = 40
  2112
  2113 9356 A5 DC			lda CURTRACKPTR
  2114 9358 18 69 09			add #$09
  2115 935B 85 DC			sta CURTRACKPTR
  2116 935D 90 02			scc
  2117 935F E6 DD			inc CURTRACKPTR+1
  2118 9361			l_06AC
  2119
  2120 				; -------------------  ASM Block 00000076  -------------------
  2121
  2122 				// if _status and f_stop=0 then
  2123 9361 A0 00		    ldy #0
  2124 9363 B1 DC		    lda (curTrackPtr),y
  2125 9365 29 40		    and #f_stop
  2126 9367 D0 4A		    bne skipProcessTrack
  2127
  2128 				// if _totalTicks>=_trackTime then ProcessTrack;
  2129 9369 A0 07		    ldy #7
  2130 936B A5 F3		    lda _totalTicks+3
  2131 936D 38 F1 DC		    sub (curTrackPtr),y
  2132 9370 D0 22		    bne L4
  2133 9372 A5 F2		    lda _totalTicks+2
  2134 9374 88			    dey
  2135 9375 38 F1 DC		    sub (curTrackPtr),y
  2136 9378 D0 0E		    bne L1
  2137 937A A5 F1		    lda _totalTicks+1
  2138 937C 88			    dey
  2139 937D 38 F1 DC		    sub (curTrackPtr),y
  2140 9380 D0 06		    bne L1
  2141 9382 A5 F0		    lda _totalTicks
  2142 9384 88			    dey
  2143 9385 38 F1 DC		    sub (curTrackPtr),y
  2144 9388			  L1:
  2145 9388 F0 10		    beq L5
  2146 938A B0 04		    bcs L3
  2147 938C A9 FF		    lda #$ff
  2148 938E D0 0A		    bne L5
  2149 9390			  L3:
  2150 9390 A9 01		    lda #$01
  2151 9392 D0 06		    bne L5
  2152 9394			  L4:
  2153 9394 50 04		    bvc L5
  2154 9396 49 FF		    eor #$ff
  2155 9398 09 01		    ora #$01
  2156 939A			  L5:
  2157 939A 30 17		    jmi skipProcessTrack
  2158
  2159 				  // copy current track data to work registers
  2160 939C A0 08		    ldy #sizeOf_TMIDTrack-1
  2161 939E			  loop:
  2162 939E B1 DC		    lda (curTrackPtr),y
  2163 93A0 99 E0 00		    sta _trkRegs,y
  2164 93A3 88			    dey
  2165 93A4 10 F8		    bpl loop
  2166
  2167 				  
  2168 				; optimize FAIL ('PROCESSTRACK', processmidi.inc), line = 92
  2169
  2170 93A6 20 CC 90			jsr PROCESSTRACK
  2171
  2172 				; -------------------  ASM Block 00000077  -------------------
  2173
  2174 				// store work registers in track data
  2175 93A9 A0 08		    ldy #sizeOf_TMIDTrack-1
  2176 93AB			  loop2:
  2177 93AB B9 E0 00		    lda _trkRegs,y
  2178 93AE 91 DC		    sta (curTrackPtr),y
  2179 93B0 88			    dey
  2180 93B1 10 F8		    bpl loop2
  2181
  2182 93B3			  skipProcessTrack:
  2183 				  
  2184 93B3			@exit
  2185 					.ifdef @new
  2186 					lda <@VarData
  2187 					sta :ztmp
  2188 					lda >@VarData
  2189 					ldy #@VarDataSize-1
  2190 					jmp @FreeMem
  2191 					els
  2192 93B3 60				rts						; ret
  2193 					eif
  2194 				.endl
  2195
  2196 93B4			.local	INITTIMER					; PROCEDURE
  2197
  2198 				; optimize OK (MIDFILES), line = 84
  2199
  2200 93B4 A9 00			lda #$00
  2201 93B6 85 F0			sta _TOTALTICKS
  2202 93B8 85 F1			sta _TOTALTICKS+1
  2203 93BA 85 F2			sta _TOTALTICKS+2
  2204 93BC 85 F3			sta _TOTALTICKS+3
  2205
  2206 				; optimize OK (MIDFILES), line = 85
  2207
  2208 93BE 8D 94 3B			sta TEMPOSHIFT
  2209 93C1 8D 95 3B			sta TEMPOSHIFT+1
  2210 93C4 8D 96 3B			sta TEMPOSHIFT+2
  2211 93C7 8D 97 3B			sta TEMPOSHIFT+3
  2212
  2213 				; optimize OK (MIDFILES), line = 86
  2214
  2215 93CA A9 01			lda #$01
  2216 93CC 85 F5			sta _TIMERSTATUS
  2217
  2218 				; optimize OK (MIDFILES), line = 87
  2219
  2220 93CE AD 79 3B			lda TOTALTRACKS
  2221 93D1 85 DE			sta CTRK
  2222
  2223 				; optimize OK (MIDFILES), line = 88
  2224
  2225 93D3 85 DF			sta PLAYINGTRACKS
  2226
  2227 				; -------------------  ASM Block 00000078  -------------------
  2228
  2229 93D5 78			    sei
  2230 93D6 A9 2B 8D 10 02	    mva <INT_TIMER VTIMR1
  2231 93DB A9 8B 8D 11 02	    mva >INT_TIMER VTIMR1+1
  2232 				  // reset POKEY
  2233 93E0 A9 00		    lda #$00
  2234 93E2 A0 03		    ldy #$03
  2235 93E4 8D 08 D2		    sta AUDCTL
  2236 93E7 8D 01 D2		    sta AUDC1
  2237 93EA 8C 0F D2		    sty SKCTL
  2238 				  // setup TIMER1
  2239 93ED 8D 08 D2		    sta AUDCTL
  2240 93F0 A5 53 8D 00 D2	    mva 83 AUDF1
  2241 				  // initialize IRQ for TIMER1
  2242 93F5 A5 10		    lda irqens
  2243 93F7 09 01		    ora #$01
  2244 93F9 85 10		    sta irqens
  2245 93FB 8D 0E D2		    sta irqen
  2246 				  // start timer strobe
  2247 93FE 8D 09 D2		    sta stimer
  2248
  2249 9401 58			    cli  // enable IRQ
  2250 				  
  2251 9402			@exit
  2252 					.ifdef @new
  2253 					lda <@VarData
  2254 					sta :ztmp
  2255 					lda >@VarData
  2256 					ldy #@VarDataSize-1
  2257 					jmp @FreeMem
  2258 					els
  2259 9402 60				rts						; ret
  2260 					eif
  2261 				.endl
  2262
  2263 9403			.local	NULLLOADPRCS					; PROCEDURE
  2264
  2265 9403			@exit
  2266 					.ifdef @new
  2267 					lda <@VarData
  2268 					sta :ztmp
  2269 					lda >@VarData
  2270 					ldy #@VarDataSize-1
  2271 					jmp @FreeMem
  2272 					els
  2273 9403 60				rts						; ret
  2274 					eif
  2275 				.endl
  2276
  2277 				; ------------------------------------------------------------
  2278 				; ------------------------------------------------------------
  2279 9404			@UnitInit
  2280
  2281 				; optimize OK (MIDFILES), line = 121
  2282
  2283 9404 A9 00			lda #$00
  2284 9406 8D 90 3B			sta OLDTIMERVEC
  2285 9409 8D 91 3B			sta OLDTIMERVEC+1
  2286
  2287 				; optimize OK (MIDFILES), line = 122
  2288
  2289 940C A9 03			lda <NULLLOADPRCS
  2290 940E 8D 92 3B			sta LOADPROCESS
  2291 9411 A9 94			lda >NULLLOADPRCS
  2292 9413 8D 93 3B			sta LOADPROCESS+1
  2293
  2294 				; optimize OK (MIDFILES), line = 123
  2295
  2296 9416 A9 80			lda #$80
  2297 9418 8D 7A 3B			sta TICKDIV
  2298 941B A9 01			lda #$01
  2299 941D 8D 7B 3B			sta TICKDIV+1
  2300
  2301 				; optimize OK (MIDFILES), line = 124
  2302
  2303 9420 A9 20			lda #$20
  2304 9422 8D 7C 3B			sta MS_PER_QNOTE
  2305 9425 A9 A1			lda #$A1
  2306 9427 8D 7D 3B			sta MS_PER_QNOTE+1
  2307 942A A9 07			lda #$07
  2308 942C 8D 7E 3B			sta MS_PER_QNOTE+2
  2309 942F A9 00			lda #$00
  2310 9431 8D 7F 3B			sta MS_PER_QNOTE+3
  2311
  2312 				; optimize OK (MIDFILES), line = 125
  2313
  2314 9434 8D 79 3B			sta TOTALTRACKS
  2315
  2316 				; optimize OK (MIDFILES), line = 126
  2317
  2318 9437 85 DE			sta CTRK
  2319
  2320 				; optimize OK (MIDFILES), line = 127
  2321
  2322 9439 A9 80			lda #$80
  2323 943B 85 F5			sta _TIMERSTATUS
  2324
  2325 943D AD 10 02			lda VTIMR1
  2326 9440 8D 90 3B			sta OLDTIMERVEC
  2327 9443 AD 11 02			lda VTIMR1+1
  2328 9446 8D 91 3B			sta OLDTIMERVEC+1
  2329
  2330 9449 60				rts
  2331
  2332 				; ------------------------------------------------------------
  2333
  2334 = 0080			F_COUNTER	= $80
  2335 = 0040			F_TICK	= $40
  2336 = 00C0			F_FLAGS	= $C0
  2337 = 000F			F_RATIO	= $0F
  2338 = 0080			F_SKIPDELTA	= $80
  2339 = 0040			F_STOP	= $40
  2340 = 00E0			_TRKREGS	= $E0
  2341 = 0000			MID_0	= $00
  2342 = 0001			MID_1	= $01
  2343 = 0064			ERR_UNSUPPORTED_FORMAT	= $64
  2344 = 0065			ERR_NOT_ENOUGHT_MEMORY	= $65
  2345 = 0066			ERR_NOT_A_MIDI_FILE	= $66
  2346 = 6468544D		TAG_MTHD	= $6468544D
  2347 = 6B72544D		TAG_MTRK	= $6B72544D
  2348 = 0009			SIZEOF_TMIDTRACK	= $09
  2349 = 00DC			CURTRACKPTR	= $DC
  2350 = 00DE			CTRK	= $DE
  2351 = 00DF			PLAYINGTRACKS	= $DF
  2352 = 00F0			_TOTALTICKS	= $F0
  2353 = 00F4			_SUBCNT	= $F4
  2354 = 00F5			_TIMERSTATUS	= $F5
  2355 = 00F6			_DELTA	= $F6
  2356 = 00F6			_TMP	= $F6
  2357 = 00E0			_STATUS	= $E0
  2358 = 00E1			_BANK	= $E1
  2359 = 00E2			_PTR	= $E2
  2360 = 00E2			_ADR	= $E2
  2361 = 00E4			_TRACKTIME	= $E4
  2362 = 00E8			_EVENT	= $E8
  2363 = 3B75			MIDDATA	= DATAORIGIN+$0035
  2364 = 3B77			adr.MIDTRACKS	= [DATAORIGIN+$0037] .array [1]
  2365 944A			.var MIDTRACKS	= adr.MIDTRACKS .word
  2366 = 3B78			FORMAT	= DATAORIGIN+$0038
  2367 = 3B79			TOTALTRACKS	= DATAORIGIN+$0039
  2368 = 3B7A			TICKDIV	= DATAORIGIN+$003A
  2369 = 3B7C			MS_PER_QNOTE	= DATAORIGIN+$003C
  2370 = 3B80			adr.CHNVOLUME	= [DATAORIGIN+$0040] .array [16]
  2371 944A			.var CHNVOLUME	= adr.CHNVOLUME .word
  2372 = 3B90			OLDTIMERVEC	= DATAORIGIN+$0050
  2373 = 3B92			LOADPROCESS	= DATAORIGIN+$0052
  2374 = 3B94			TEMPOSHIFT	= DATAORIGIN+$0054
  2375
  2376 = 944A 77 3B		MIDTRACKS
  2376 = 944C 80 3B		CHNVOLUME
  2376 				.endl							; UNIT MIDFILES
  2377
  2378 				; ------------------------------------------------------------
  2379
  2380 944E			.local	MISC						; UNIT
  2381
  2382 				; ------------------------------------------------------------
  2383
  2384 = 0101			adr.BANKS	= $0101
  2385 944E			.var BANKS	= adr.BANKS .word
  2386 = FFF7			DETECTOS	= $FFF7
  2387
  2388 = 944E 01 01		BANKS
  2388 				.endl							; UNIT MISC
  2389
  2390 9450			.local	MYNMI						; PROCEDURE | ASSEMBLER | INTERRUPT
  2391
  2392 				; -------------------  ASM Block 00000089  -------------------
  2393
  2394 9450			  icl 'asms/nmi.a65'
Source: nmi.a65
     1 = 0012			RTCLOK = $12
     2 = D209			KBCODE = $d209
     3 = D20F			SKSTAT = $d20f
     4 = D40F			NMIRES = $d40f
     5
     6 = 022B			SRTIMR = $022b
     7 = 026D			KEYDIS = $026d
     8 = 02DA			KEYREP = $02da
     9 = 02F1			KEYDEL = $02f1
    10 = 02FC			CH     = $02fc
    11 = 02C0			PCOLR0 = $02c0
    12 = D012			COLPM0 = $d012
    13
    14 				// systemowa procedure obsługi RTClock ($C0E2)
    15 9450 D8			    cld
    16 9451 8D 9C 94		    sta rega
    17 9454 8E 9E 94		    stx regx
    18 9457 8C A0 94		    sty regy
    19 945A 8D 0F D4		    STA NMIRES
    20
    21 945D E6 14		    inc RTCLOK+2
    22 945F D0 06		    bne end_rtclk
    23 9461 E6 13		    inc RTCLOK+1
    24 9463 D0 02		    bne end_rtclk
    25 9465 E6 12		    inc RTCLOK
    26
    27 9467			end_rtclk:
    28
    29 				// fragment systemowej procedury kopiowania rejestrów kolorów
    30 				//    ldx #$08
    31 				//colloop:
    32 				//    lda PCOLR0,x
    33 				//    sta COLPM0,x
    34 				//    dex
    35 				//    bpl colloop
    36
    37 				// systemowa procedura obsługi klawiatry ($C1A1)
    38 9467 AD 0F D2		    lda SKSTAT
    39 946A 29 04		    and #$04
    40 946C F0 08		    beq skip_keyDelay
    41 946E AD F1 02		    lda KEYDEL
    42 9471 F0 03		    beq skip_keyDelay
    43 9473 CE F1 02		    dec KEYDEL
    44 9476			skip_keyDelay:
    45 9476 AD 2B 02		    lda SRTIMR
    46 9479 F0 20		    beq end_key
    47
    48 947B AD 0F D2		    lda SKSTAT
    49 947E 29 04		    and #$04
    50 9480 D0 14		    bne skip_key
    51
    52 9482 CE 2B 02		    dec SRTIMR
    53 9485 D0 14		    bne end_key
    54 9487 AD DA 02		    lda KEYREP
    55 948A 8D 2B 02		    sta SRTIMR
    56
    57 948D AD 09 D2		    lda KBCODE
    58 9490 8D FC 02		    sta CH
    59 9493 4C 9B 94		    jmp end_key
    60
    61 9496			skip_key:
    62 9496 A9 00		    lda #$00
    63 9498 8D 2B 02		    sta SRTIMR
    64
    65 949B			end_key:
    66
    67 949B A9 00		    lda rega:#0
    68 949D A2 00		    ldx regx:#0
    69 949F A0 00		    ldy regy:#0
  2395
  2396 94A1 40				rti						; ret
  2397 				.endl
  2398
  2399 94A2			.local	SETNMI						; PROCEDURE
  2400
  2401 				; optimize OK (mynmi.inc), line = 14
  2402
  2403 94A2 AD FA FF			lda NMIVEC
  2404 94A5 8D 20 3C			sta OLDNMIVEC
  2405 94A8 AD FB FF			lda NMIVEC+1
  2406 94AB 8D 21 3C			sta OLDNMIVEC+1
  2407
  2408 				; optimize OK (mynmi.inc), line = 15
  2409
  2410 94AE A9 00			lda #$00
  2411 94B0 8D 0E D4			sta NMIEN
  2412 94B3 A9 50			lda <MYNMI
  2413 94B5 8D FA FF			sta NMIVEC
  2414 94B8 A9 94			lda >MYNMI
  2415 94BA 8D FB FF			sta NMIVEC+1
  2416 94BD A9 40			lda #$40
  2417 94BF 8D 0E D4			sta NMIEN
  2418 94C2			@exit
  2419 					.ifdef @new
  2420 					lda <@VarData
  2421 					sta :ztmp
  2422 					lda >@VarData
  2423 					ldy #@VarDataSize-1
  2424 					jmp @FreeMem
  2425 					els
  2426 94C2 60				rts						; ret
  2427 					eif
  2428 				.endl
  2429
  2430 94C3			.local	UNSETNMI					; PROCEDURE
  2431
  2432 				; optimize OK (mynmi.inc), line = 20
  2433
  2434 94C3 A9 00			lda #$00
  2435 94C5 8D 0E D4			sta NMIEN
  2436 94C8 AD 20 3C			lda OLDNMIVEC
  2437 94CB 8D FA FF			sta NMIVEC
  2438 94CE AD 21 3C			lda OLDNMIVEC+1
  2439 94D1 8D FB FF			sta NMIVEC+1
  2440 94D4 A9 40			lda #$40
  2441 94D6 8D 0E D4			sta NMIEN
  2442 94D9			@exit
  2443 					.ifdef @new
  2444 					lda <@VarData
  2445 					sta :ztmp
  2446 					lda >@VarData
  2447 					ldy #@VarDataSize-1
  2448 					jmp @FreeMem
  2449 					els
  2450 94D9 60				rts						; ret
  2451 					eif
  2452 				.endl
  2453
  2454 94DA			.local	KEYSCAN2ASC					; FUNCTION | ASSEMBLER
  2455 94DA 8D 22 3C			sta KEYSCAN
  2456
  2457 				; -------------------  ASM Block 00000090  -------------------
  2458
  2459 94DD			  icl 'asms/keyscan2asc.a65'
Source: keyscan2asc.a65
     1 94DD A0 00		    ldy #0
     2 94DF			loop:
     3 94DF B9 FC 94		    lda scan2asc,y
     4 94E2 F0 05		    beq skip
     5 94E4 CD 22 3C		    cmp keyscan
     6 94E7 F0 0B		    beq found
     7 94E9			skip:
     8 94E9 C8			    iny
     9 94EA C0 40		    cpy #64
    10 94EC D0 F1		    bne loop
    11
    12 94EE			notFound:
    13 94EE A9 00		    lda #0
    14 94F0 8D 23 3C		    sta Result
    15 94F3 60			    rts
    16
    17 94F4			found:
    18 94F4 98			    tya
    19 94F5 18 69 20		    add #32
    20 94F8 8D 23 3C		    sta Result
    21
    22 94FB 60			    rts
    23
    24 94FC			scan2asc:        // from 32 to 95
    25 94FC 21			    .byte 33   //   space
    26 94FD 5F			    .byte 95   // ! exclamation mark
    27 94FE 00			    .byte 0  // " quote mark
    28 94FF 5A			    .byte 90   // # hash
    29 9500 00			    .byte 0  // $ dolar
    30 9501 5D			    .byte 93   // % percent
    31 9502 00			    .byte 0  // & and
    32 9503 00			    .byte 0  // '
    33 9504 00			    .byte 0  // (
    34 9505 00			    .byte 0  // )
    35 9506 07			    .byte 7    // * star
    36 9507 00			    .byte 0  // + plus
    37 9508 00			    .byte 0  //  comma
    38 9509 0E			    .byte 14   // - hypen
    39 950A 22			    .byte 34   // . dot
    40 950B 26			    .byte 38   // / slash
    41 950C 32 1F 1E 1A 18 1D +     .byte 50,31,30,26,24,29,27,51,53,48 // 0-9 digits
    42 9516 42			    .byte 66   // :colon
    43 9517 00			    .byte 0  // ; semicolon
    44 9518 36			    .byte 54   // < less sign
    45 9519 00			    .byte 0  // = equal
    46 951A 37			    .byte 55   // > more sign
    47 951B 66			    .byte 102  // ? question mark
    48 951C 00			    .byte 0  // @ at
    49 951D 3F 15 12 3A 2A 38 +     .byte 63,21,18,58,42,56,61,57,13,1,5,0,37,35,8,10,47,40,62,45,11,16,46,22,43,23 // A-Z letters
    50 9537 00			    .byte 0  // [
    51 9538 46			    .byte 70   // \ backslash
    52 9539 00			    .byte 0  // ]
    53 953A 00			    .byte 0  // ^
    54 953B 4E			    .byte 78    // _ underscore mark
  2460
  2461 953C			@exit
  2462
  2463 				; ------------------------------------------------------------
  2464
  2465 = 3C22			KEYSCAN	= DATAORIGIN+$00E2
  2466 = 3C23			RESULT	= DATAORIGIN+$00E3
  2467
  2468 = 3C22			@VarData	= KEYSCAN
  2469 = 0001			@VarDataSize	= 1
  2470
  2471 953C 60				rts						; ret
  2472 				.endl
  2473
  2474 953D			.local	SETCOLORS					; PROCEDURE
  2475
  2476 				; optimize OK (helpers.inc), line = 25
  2477
  2478 953D A5 4A			lda PLAYERSTATUS
  2479 953F 29 01			and #$01
  2480 9541 85 9D			sta :STACKORIGIN+9
  2481 9543 A0 01			ldy #1
  2482 9545 A5 9D			lda :STACKORIGIN+9
  2483 9547 C9 01			cmp #$01
  2484 9549 F0 01			beq @+
  2485 954B 88				dey
  2486 				@
  2487 954C 84 9D			sty :STACKORIGIN+9
  2488 954E A9 05			lda #$05
  2489 9550 85 8C			sta :ecx
  2490 9552 A5 9D			lda :STACKORIGIN+9
  2491 9554 85 84			sta :eax
  2492 					.ifdef fmulinit
  2493 					fmulu_8
  2494 					els
  2495 9556 20 2F 84			imulCL
  2496 					eif
  2497 9559 A9 18			lda <adr.COLORS
  2498 955B 18 65 84			add :eax
  2499 955E 8D 26 3C			sta P
  2500 9561 A9 81			lda >adr.COLORS
  2501 9563 65 85			adc :eax+1
  2502 9565 8D 27 3C			sta P+1
  2503
  2504 				; optimize OK (helpers.inc), line = 26
  2505
  2506 9568 AD 26 3C			lda P
  2507 956B 85 82			sta :bp2
  2508 956D AD 27 3C			lda P+1
  2509 9570 85 83			sta :bp2+1
  2510 9572 A0 04			ldy #$04
  2511 9574 B1 82 99 16 D0 88 + 	mva:rpl (:bp2),y $D016,y-
  2512
  2513 				; optimize OK (helpers.inc), line = 27
  2514
  2515 957C AD 26 3C			lda P
  2516 957F 85 82			sta :bp2
  2517 9581 AD 27 3C			lda P+1
  2518 9584 85 83			sta :bp2+1
  2519 9586 A0 04			ldy #$04
  2520 9588 B1 82 99 C4 02 88 + 	mva:rpl (:bp2),y $02C4,y-
  2521
  2522 				; ------------------------------------------------------------
  2523
  2524 = 3C26			P	= DATAORIGIN+$00E6
  2525
  2526 = 3C26			@VarData	= P
  2527 = 0002			@VarDataSize	= 2
  2528
  2529 9590			@exit
  2530 					.ifdef @new
  2531 					lda <@VarData
  2532 					sta :ztmp
  2533 					lda >@VarData
  2534 					ldy #@VarDataSize-1
  2535 					jmp @FreeMem
  2536 					els
  2537 9590 60				rts						; ret
  2538 					eif
  2539 				.endl
  2540
  2541 9591			.local	INVERS						; PROCEDURE | ASSEMBLER | REGISTER
  2542 9591 85 88			sta CHARS
  2543
  2544 				; -------------------  ASM Block 00000091  -------------------
  2545
  2546 9593			  icl 'asms/invers.a65'
Source: invers.a65
     1 9593 A8			  tay // ldy spaces
     2 9594 D0 01 60		  sne:rts
     3 9597 88			  dey
     4 9598			loop:
     5 9598 B1 D4		  lda (scradr),y
     6 959A 49 80		  eor #$80
     7 959C 91 D4		  sta (scradr),y
     8 959E 88			  dey
     9 959F 10 F7		  bpl loop
  2547
  2548 				; ------------------------------------------------------------
  2549
  2550 = 0088			CHARS	= :EDX
  2551 95A1			@exit
  2552 					.ifdef @new
  2553 					lda <@VarData
  2554 					sta :ztmp
  2555 					lda >@VarData
  2556 					ldy #@VarDataSize-1
  2557 					jmp @FreeMem
  2558 					els
  2559 95A1 60				rts						; ret
  2560 					eif
  2561 				.endl
  2562
  2563 95A2			.local	PUTSPACES					; PROCEDURE | ASSEMBLER | REGISTER
  2564 95A2 85 88			sta SPACES
  2565
  2566 				; -------------------  ASM Block 00000092  -------------------
  2567
  2568 95A4			  icl 'asms/put_spaces.a65'
Source: put_spaces.a65
     1 95A4 A8			  tay // ldy spaces
     2 95A5 D0 01 60		  sne:rts
     3 95A8 A9 00		  lda #0
     4 95AA			loop:
     5 95AA 88			  dey
     6 95AB 91 D4		  sta (scradr),y
     7 95AD D0 FB		  bne loop
  2569
  2570 				; ------------------------------------------------------------
  2571
  2572 = 0088			SPACES	= :EDX
  2573 95AF			@exit
  2574 					.ifdef @new
  2575 					lda <@VarData
  2576 					sta :ztmp
  2577 					lda >@VarData
  2578 					ldy #@VarDataSize-1
  2579 					jmp @FreeMem
  2580 					els
  2581 95AF 60				rts						; ret
  2582 					eif
  2583 				.endl
  2584
  2585 95B0			.local	PUTINTTEXT					; PROCEDURE | ASSEMBLER | REGISTER
  2586
  2587 				; -------------------  ASM Block 00000093  -------------------
  2588
  2589 95B0			  icl 'asms/putinttext.a65'
Source: putinttext.a65
     1 = 0088			  regptr = $88
     2
     3 95B0 A5 89		  lda s+1
     4 95B2 85 89		  sta regptr+1
     5 95B4 A5 88		  lda s
     6 95B6 85 88		  sta regptr
     7
     8 95B8 A0 00		  ldy #0
     9 95BA B1 88		  lda (regptr),y
    10 95BC F0 1A		  beq exitPutText
    11
    12 95BE 48 A8		  pha:tay
    13 95C0 88			  dey
    14 95C1 E6 88		  inc regptr
    15 95C3 D0 02 E6 89		  sne:inc regptr+1
    16
    17 95C7			putText:
    18 95C7 B1 88		  lda (regptr),y   // get string character
    19 95C9 91 D4		  sta (scradr),y   // put on screen
    20 95CB 88			  dey
    21 95CC 10 F9		  bpl putText
    22
    23 95CE 68			  pla
    24 95CF 18			  clc
    25 95D0 65 D4		  adc scradr
    26 95D2 85 D4		  sta scradr
    27 95D4 90 02 E6 D5		  scc:inc scradr+1
    28
    29 95D8			exitPutText:
  2590
  2591 				; ------------------------------------------------------------
  2592
  2593 = 0088			S	= :EDX
  2594 95D8			@exit
  2595 					.ifdef @new
  2596 					lda <@VarData
  2597 					sta :ztmp
  2598 					lda >@VarData
  2599 					ldy #@VarDataSize-1
  2600 					jmp @FreeMem
  2601 					els
  2602 95D8 60				rts						; ret
  2603 					eif
  2604 				.endl
  2605
  2606 95D9			.local	PUTASCTEXT					; PROCEDURE | ASSEMBLER | REGISTER
  2607
  2608 				; -------------------  ASM Block 00000094  -------------------
  2609
  2610 95D9			  icl 'asms/putasctext.a65'
Source: putasctext.a65
     1 = 0088			  regptr = $88
     2
     3 95D9 8A 48		  txa:pha
     4
     5 95DB A0 00		  ldy #0
     6 95DD B1 88		  lda (regptr),y
     7 95DF F0 26		  beq exitPutText
     8
     9 95E1 48 A8		  pha:tay
    10 95E3 88			  dey
    11 95E4 E6 88		  inc regptr
    12 95E6 D0 02 E6 89		  sne:inc regptr+1
    13
    14 95EA			putText:
    15 95EA B1 88		  lda (regptr),y   // get string character
    16
    17 95EC			atasci2antic:
    18 95EC 0A			  asl
    19 95ED 69 C0		  adc #$c0
    20 95EF 10 02 49 40		  spl:eor #$40
    21 95F3 4A			  lsr
    22 95F4 90 02 49 80		  scc:eor #$80
    23
    24 95F8 91 D4		  sta (scradr),y   // put on screen
    25 95FA 88			  dey
    26 95FB 10 ED		  bpl putText
    27
    28 95FD 68			  pla
    29 95FE 18			  clc
    30 95FF 65 D4		  adc scradr
    31 9601 85 D4		  sta scradr
    32 9603 90 02 E6 D5		  scc:inc scradr+1
    33
    34 9607			exitPutText:
    35 9607 68 AA		  pla:tax
  2611
  2612 				; ------------------------------------------------------------
  2613
  2614 = 0088			S	= :EDX
  2615 9609			@exit
  2616 					.ifdef @new
  2617 					lda <@VarData
  2618 					sta :ztmp
  2619 					lda >@VarData
  2620 					ldy #@VarDataSize-1
  2621 					jmp @FreeMem
  2622 					els
  2623 9609 60				rts						; ret
  2624 					eif
  2625 				.endl
  2626
  2627 960A			.local	PUTHEX						; PROCEDURE | ASSEMBLER
  2628
  2629 				; -------------------  ASM Block 00000095  -------------------
  2630
  2631 960A			  icl 'asms/puthex.a65'
Source: puthex.a65
     1 				// store `scradr` value as a operand of opcode
     2 960A 8A 48		  txa:pha
     3
     4 960C A5 D4		  lda scradr
     5 960E 8D 52 96		  sta screen
     6 9611 A5 D5		  lda scradr+1
     7 9613 8D 53 96		  sta screen+1
     8 9616 AD 28 3C		  lda v
     9 9619 8D 3B 96		  sta vadr1
    10 961C 8D 43 96		  sta vadr2
    11 961F AD 29 3C		  lda v+1
    12 9622 8D 3C 96		  sta vadr1+1
    13 9625 8D 44 96		  sta vadr2+1
    14
    15 9628 A9 00		  lda #0
    16 962A 8D 67 96		  sta _vofs
    17
    18 				// get nibbles to show, if =0 exit
    19 962D AC 2A 3C		  ldy n
    20 9630 F0 32		  beq stop
    21
    22 9632			hexLoop:
    23 9632 AE 67 96		  ldx _vofs
    24 9635 98			  tya
    25 9636 29 01		  and #1
    26 9638 D0 08		  bne HiNibble
    27 963A BD 00 F0		  lda vadr1:$f000,x
    28 963D 29 0F		  and #$0f
    29 963F 4C 4C 96		  jmp put2screen
    30 9642			HiNibble:
    31 9642 BD 00 F0		  lda vadr2:$f000,x
    32 9645 4A 4A 4A 4A		  :4 lsr @
    33 9649 EE 67 96		  inc _vofs
    34
    35 964C			put2screen:
    36 964C AA			  tax
    37 964D BD 68 96		  lda hexTab,x
    38 				//  ora puttextinvert
    39 9650 88			  dey
    40 9651 99 00 F0		  sta screen:$f000,y
    41
    42 9654 C0 00		  cpy #0
    43 9656 D0 DA		  bne hexLoop
    44
    45 9658			calcEndAddr:
    46 9658 A5 D4		  lda scradr
    47 965A 18			  clc
    48 965B 6D 2A 3C		  adc n
    49 965E 85 D4		  sta scradr
    50 9660 90 02		  bcc stop
    51 9662 E6 D5		  inc scradr+1
    52
    53 9664			stop:
    54 9664 68 AA		  pla:tax
    55 9666 60			  rts
    56
    57 9667			_vofs
    58 9667 00			  .by 0
    59 9668			hexTab:
    60 9668 10 11 12 13 14 15 +   dta d'0123456789ABCDEF'
  2632
  2633 				; ------------------------------------------------------------
  2634
  2635 = 3C28			V	= DATAORIGIN+$00E8
  2636 = 3C2A			N	= DATAORIGIN+$00EA
  2637
  2638 = 3C28			@VarData	= V
  2639 = 0003			@VarDataSize	= 3
  2640
  2641 9678			@exit
  2642 					.ifdef @new
  2643 					lda <@VarData
  2644 					sta :ztmp
  2645 					lda >@VarData
  2646 					ldy #@VarDataSize-1
  2647 					jmp @FreeMem
  2648 					els
  2649 9678 60				rts						; ret
  2650 					eif
  2651 				.endl
  2652
  2653 9679			.local	PUTINT						; PROCEDURE | ASSEMBLER
  2654
  2655 				; -------------------  ASM Block 00000096  -------------------
  2656
  2657 9679			  icl 'asms/int2str.a65'
Source: int2str.a65
     1 = 0000			EOL = 0
     2
     3 9679 A5 D4		    lda scradr
     4 967B 8D C5 96		    sta screen1
     5 967E 8D DC 96		    sta screen2
     6 9681 A5 D5		    lda scradr+1
     7 9683 8D C6 96		    sta screen1+1
     8 9686 8D DD 96		    sta screen2+1
     9
    10 9689			INT2STR:
    11 9689 A0 00		    ldy #0
    12 968B 8C EA 96		    sty _cnt
    13 968E			ITSNEXT:
    14 968E A2 00		    ldx #0
    15 9690			ITSSLP:
    16 9690 AD 2B 3C		    lda value
    17 9693 38			    sec
    18 9694 F9 EB 96		    sbc Pow10Tab,Y
    19 9697 8D 2B 3C		    sta value
    20 969A AD 2C 3C		    lda value+1
    21 969D C8			    iny
    22 969E F9 EB 96		    sbc Pow10Tab,Y
    23 96A1 90 08		    bcc ITSADD
    24 96A3 8D 2C 3C		    sta value+1
    25 96A6 E8			    inx
    26 96A7 88			    dey
    27 96A8 18			    clc
    28 96A9 90 E5		    bcc ITSSLP
    29 96AB			ITSADD:
    30 96AB 88			    dey
    31 96AC AD 2B 3C		    lda value
    32 96AF 79 EB 96		    adc Pow10Tab,Y
    33 96B2 8D 2B 3C		    sta value
    34 96B5 8A			    txa
    35 96B6 09 10		    ora #$10
    36
    37 				; skip lead zeros
    38 96B8 AE EA 96		    ldx _cnt
    39 96BB D0 04		    bne storeDigit
    40 96BD C9 10		    cmp #$10
    41 96BF F0 09		    beq skipDigit
    42
    43 96C1			storeDigit:
    44 96C1 0D 24 3C		    ora puttextinvert
    45 96C4 9D 00 F0		    sta screen1:$f000,X
    46 96C7 EE EA 96		    inc _cnt
    47 96CA			skipDigit:
    48 96CA C8			    iny
    49 96CB C8			    iny
    50 96CC C0 08		    cpy #8
    51 96CE 90 BE		    bcc ITSNEXT
    52
    53 				; last digit
    54 96D0 AD 2B 3C		    lda value
    55 96D3 09 10		    ora #$10
    56 96D5 AE EA 96		    ldx _cnt
    57 96D8 0D 24 3C		    ora puttextinvert
    58 96DB 9D 00 F0		    sta screen2:$f000,X
    59 96DE E8			    inx
    60
    61 				; set screen addres to the end of value
    62 96DF 8A			    txa
    63 96E0 18			    clc
    64 96E1 65 D4		    adc scradr
    65 96E3 85 D4		    sta scradr
    66 96E5 90 02		    bcc stop
    67 96E7 E6 D5		    inc scradr+1
    68
    69 96E9			stop:
    70 96E9 60			    rts
    71
    72 96EA			_cnt
    73 96EA 00			    .by 0
    74 96EB			Pow10Tab
    75 96EB 10 27		    .wo 10000
    76 96ED E8 03		    .wo 1000
    77 96EF 64 00		    .wo 100
    78 96F1 0A 00		    .wo 10
  2658
  2659 				; ------------------------------------------------------------
  2660
  2661 = 3C2B			VALUE	= DATAORIGIN+$00EB
  2662
  2663 = 3C2B			@VarData	= VALUE
  2664 = 0002			@VarDataSize	= 2
  2665
  2666 96F3			@exit
  2667 					.ifdef @new
  2668 					lda <@VarData
  2669 					sta :ztmp
  2670 					lda >@VarData
  2671 					ldy #@VarDataSize-1
  2672 					jmp @FreeMem
  2673 					els
  2674 96F3 60				rts						; ret
  2675 					eif
  2676 				.endl
  2677
  2678 96F4			.local	RESET_MIDI					; PROCEDURE
  2679
  2680 				; optimize OK (helpers.inc), line = 71
  2681
  2682 96F4 A9 00			lda #$00
  2683 96F6 8D 2D 3C			sta I
  2684
  2685 				; --- WhileProlog
  2686 96F9 4C 0A 97			jmp l_074B
  2687 96FC			l_074C
  2688
  2689 				; optimize OK (helpers.inc), line = 74
  2690
  2691 96FC AC 2D 3C			ldy I
  2692 96FF B9 22 81			lda adr.GM_RESET,y
  2693 9702 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2694 9704 20 64 8A			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2695
  2696 				; optimize FAIL (0, helpers.inc), line = 75
  2697
  2698 9707 EE 2D 3C			inc I
  2699 970A			l_074B
  2700
  2701 				; optimize OK (helpers.inc), line = 72
  2702
  2703 970A AD 2D 3C			lda I
  2704 970D C9 06			cmp #$06
  2705 970F 90 EB			jcc l_074C
  2706
  2707 				; optimize FAIL ('MIDI_FIFO.FIFO_FLUSH', helpers.inc), line = 77
  2708
  2709 9711 20 7D 8A			jsr MIDI_FIFO.FIFO_FLUSH
  2710
  2711 				; ------------------------------------------------------------
  2712
  2713 = 3C2D			I	= DATAORIGIN+$00ED
  2714
  2715 = 3C2D			@VarData	= I
  2716 = 0001			@VarDataSize	= 1
  2717
  2718 9714			@exit
  2719 					.ifdef @new
  2720 					lda <@VarData
  2721 					sta :ztmp
  2722 					lda >@VarData
  2723 					ldy #@VarDataSize-1
  2724 					jmp @FreeMem
  2725 					els
  2726 9714 60				rts						; ret
  2727 					eif
  2728 				.endl
  2729
  2730 9715			.local	STOPMIDI					; PROCEDURE
  2731
  2732 				; optimize OK (helpers.inc), line = 82
  2733
  2734 9715 A5 F5			lda MIDFILES._TIMERSTATUS
  2735 9717 09 80			ora #$80
  2736 9719 85 F5			sta MIDFILES._TIMERSTATUS
  2737
  2738 				; optimize OK (helpers.inc), line = 83
  2739
  2740 971B A9 00			lda #$00
  2741 971D 85 F0			sta MIDFILES._TOTALTICKS
  2742 971F 85 F1			sta MIDFILES._TOTALTICKS+1
  2743 9721 85 F2			sta MIDFILES._TOTALTICKS+2
  2744 9723 85 F3			sta MIDFILES._TOTALTICKS+3
  2745 9725 A9 01			lda #$01
  2746 9727 85 F4			sta MIDFILES._SUBCNT
  2747
  2748 				; optimize OK (helpers.inc), line = 84
  2749
  2750 9729 78				sei
  2751 972A AD 90 3B 8D 10 02		mva MIDFILES.OLDTIMERVEC VTIMR1
  2752 9730 AD 91 3B 8D 11 02		mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
  2753 9736 A5 10			lda irqens
  2754 9738 29 FE			and #$fe
  2755 973A 85 10			sta irqens
  2756 973C 8D 0E D2			sta irqen
  2757 973F 58				cli
  2758
  2759 				; optimize FAIL ('RESET_MIDI', helpers.inc), line = 85
  2760
  2761 9740 20 F4 96			jsr RESET_MIDI
  2762 9743			@exit
  2763 					.ifdef @new
  2764 					lda <@VarData
  2765 					sta :ztmp
  2766 					lda >@VarData
  2767 					ldy #@VarDataSize-1
  2768 					jmp @FreeMem
  2769 					els
  2770 9743 60				rts						; ret
  2771 					eif
  2772 				.endl
  2773
  2774 9744			.local	HLINE						; PROCEDURE | ASSEMBLER
  2775
  2776 				; -------------------  ASM Block 00000097  -------------------
  2777
  2778 9744			  icl 'asms/hline.a65'
Source: hline.a65
     1 9744 A0 27		  ldy #39
     2 9746 A9 4A		  lda #$4a
     3 9748			loop:
     4 9748 91 D4		  sta (scradr),y
     5 974A 88			  dey
     6 974B 10 FB		  bpl loop
  2779
  2780 974D			@exit
  2781 					.ifdef @new
  2782 					lda <@VarData
  2783 					sta :ztmp
  2784 					lda >@VarData
  2785 					ldy #@VarDataSize-1
  2786 					jmp @FreeMem
  2787 					els
  2788 974D 60				rts						; ret
  2789 					eif
  2790 				.endl
  2791
  2792 974E			.local	CLEARWORKAREA					; PROCEDURE | ASSEMBLER
  2793
  2794 				; -------------------  ASM Block 00000098  -------------------
  2795
  2796 974E			  icl 'asms/clear_workarea.a65'
Source: clear_workarea.a65
     1 974E A0 00		  ldy #0
     2 9750 A9 00		  lda #0
     3 9752			loop1:
     4 9752 99 F8 36		  sta SCREEN_WORK,y
     5 9755 99 F8 37		  sta SCREEN_WORK+$100,y
     6 9758 C8			  iny
     7 9759 D0 F7		  bne loop1
     8 975B A0 A8		  ldy #$A8
     9 975D			loop2:
    10 975D 99 F7 38		  sta SCREEN_WORK+$1FF,y
    11 9760 88			  dey
    12 9761 D0 FA		  bne loop2
  2797
  2798 9763			@exit
  2799 					.ifdef @new
  2800 					lda <@VarData
  2801 					sta :ztmp
  2802 					lda >@VarData
  2803 					ldy #@VarDataSize-1
  2804 					jmp @FreeMem
  2805 					els
  2806 9763 60				rts						; ret
  2807 					eif
  2808 				.endl
  2809
  2810 9764			.local	RESETMEMORYPTR					; PROCEDURE
  2811
  2812 				; optimize OK (helpers.inc), line = 102
  2813
  2814 9764 A5 4B			lda TOTALXMS
  2815 9766 8D 1D 3C			sta LAST_BANK
  2816
  2817 				; optimize OK (helpers.inc), line = 103
  2818
  2819 9769 A5 4B			lda TOTALXMS
  2820 976B F0 0D			jeq l_079E
  2821
  2822 				; optimize OK (helpers.inc), line = 104
  2823
  2824 976D A9 00			lda #$00
  2825 976F 8D 1E 3C			sta LAST_ADR
  2826 9772 A9 40			lda #$40
  2827 9774 8D 1F 3C			sta LAST_ADR+1
  2828 9777 4C 84 97			jmp l_07AC
  2829 977A			l_079E
  2830
  2831 				; optimize OK (helpers.inc), line = 106
  2832
  2833 977A A9 00			lda #$00
  2834 977C 8D 1E 3C			sta LAST_ADR
  2835 977F A9 D8			lda #$D8
  2836 9781 8D 1F 3C			sta LAST_ADR+1
  2837 9784			l_07AC
  2838 9784			@exit
  2839 					.ifdef @new
  2840 					lda <@VarData
  2841 					sta :ztmp
  2842 					lda >@VarData
  2843 					ldy #@VarDataSize-1
  2844 					jmp @FreeMem
  2845 					els
  2846 9784 60				rts						; ret
  2847 					eif
  2848 				.endl
  2849
  2850 9785			.local	CLEARPLAYLIST					; PROCEDURE
  2851
  2852 				; optimize OK (helpers.inc), line = 111
  2853
  2854 9785 A9 00			lda #$00
  2855 9787 85 DA			sta PLS
  2856 9789 A9 20			lda #$20
  2857 978B 85 DB			sta PLS+1
  2858
  2859 				; optimize OK (helpers.inc), line = 112
  2860
  2861 978D A5 DA			lda PLS
  2862 978F 85 88			sta SYSTEM.FILLCHAR_0162.A
  2863 9791 A5 DB			lda PLS+1
  2864 9793 85 89			sta SYSTEM.FILLCHAR_0162.A+1
  2865 9795 A9 00			lda #$00
  2866 9797 85 8C			sta SYSTEM.FILLCHAR_0162.COUNT
  2867 9799 A9 0C			lda #$0C
  2868 979B 85 8D			sta SYSTEM.FILLCHAR_0162.COUNT+1
  2869 979D A9 9B			lda #$9B
  2870 979F 85 84			sta SYSTEM.FILLCHAR_0162.VALUE
  2871 97A1				.local +MAIN.SYSTEM.FILLCHAR_0162
  2872 97A1				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0162.M@INLINE [Source: MIDICar Player.a65]
     4 97A1 20 90 83			jsr @fill
Source: MIDICar Player.a65
  2873 					.endl
  2874
  2875 				; optimize OK (helpers.inc), line = 113
  2876
  2877 97A4 A9 00			lda #$00
  2878 97A6 8D 15 3C			sta TOTALFILES
  2879 97A9 20 64 97			jsr RESETMEMORYPTR
  2880 97AC A9 00			lda #$00
  2881 97AE 8D 14 3C			sta CURFILE
  2882 97B1 8D 12 3C			sta YFILE
  2883 97B4 8D 13 3C			sta SHFILE
  2884
  2885 				; optimize OK (helpers.inc), line = 114
  2886
  2887 97B7 8D 11 3C			sta CHN
  2888
  2889 				; --- WhileProlog
  2890 97BA 4C D4 97			jmp l_07D4
  2891 97BD			l_07D5
  2892
  2893 				; optimize OK (helpers.inc), line = 117
  2894
  2895 97BD AD 11 3C			lda CHN
  2896 97C0 0A				asl @
  2897 97C1 A8				tay
  2898 97C2 B9 F0 3B			lda adr.PLAYLISTSCRADR,y
  2899 97C5 85 D4			sta SCRADR
  2900 97C7 B9 F1 3B			lda adr.PLAYLISTSCRADR+1,y
  2901 97CA 85 D5			sta SCRADR+1
  2902
  2903 				; optimize OK (helpers.inc), line = 118
  2904
  2905 97CC A9 20			lda #$20
  2906 97CE 20 A2 95			jsr PUTSPACES
  2907
  2908 				; optimize FAIL (0, helpers.inc), line = 119
  2909
  2910 97D1 EE 11 3C			inc CHN
  2911 97D4			l_07D4
  2912
  2913 				; optimize OK (helpers.inc), line = 115
  2914
  2915 97D4 AD 11 3C			lda CHN
  2916 97D7 C9 10			cmp #$10
  2917 97D9 90 E2			jcc l_07D5
  2918 97DB			@exit
  2919 					.ifdef @new
  2920 					lda <@VarData
  2921 					sta :ztmp
  2922 					lda >@VarData
  2923 					ldy #@VarDataSize-1
  2924 					jmp @FreeMem
  2925 					els
  2926 97DB 60				rts						; ret
  2927 					eif
  2928 				.endl
  2929
  2930 97DC			.local	DRAWPLAYLISTSELECTION				; PROCEDURE
  2931
  2932 				; optimize OK (helpers.inc), line = 125
  2933
  2934 97DC AD 12 3C			lda YFILE
  2935 97DF 0A				asl @
  2936 97E0 A8				tay
  2937 97E1 B9 F0 3B			lda adr.PLAYLISTSCRADR,y
  2938 97E4 85 D4			sta SCRADR
  2939 97E6 B9 F1 3B			lda adr.PLAYLISTSCRADR+1,y
  2940 97E9 85 D5			sta SCRADR+1
  2941 97EB A9 20			lda #$20
  2942 97ED 20 91 95			jsr INVERS
  2943 97F0			@exit
  2944 					.ifdef @new
  2945 					lda <@VarData
  2946 					sta :ztmp
  2947 					lda >@VarData
  2948 					ldy #@VarDataSize-1
  2949 					jmp @FreeMem
  2950 					els
  2951 97F0 60				rts						; ret
  2952 					eif
  2953 				.endl
  2954
  2955 97F1			.local	ISLOOPED					; PROCEDURE
  2956
  2957 				; optimize OK (helpers.inc), line = 130
  2958
  2959 97F1 A9 CE			lda #$CE
  2960 97F3 85 D4			sta SCRADR
  2961 97F5 A9 39			lda #$39
  2962 97F7 85 D5			sta SCRADR+1
  2963
  2964 				; optimize OK (helpers.inc), line = 131
  2965
  2966 97F9 A5 4A			lda PLAYERSTATUS
  2967 97FB 29 04			and #$04
  2968 97FD F0 0E			jeq l_081B
  2969
  2970 				; optimize OK (helpers.inc), line = 132
  2971
  2972 97FF A9 02			lda #$02
  2973 9801 85 88			sta PUTINTTEXT.S
  2974 9803 A9 80			lda #$80
  2975 9805 85 89			sta PUTINTTEXT.S+1
  2976 9807 20 B0 95			jsr PUTINTTEXT
  2977 980A 4C 18 98			jmp l_0827
  2978 980D			l_081B
  2979
  2980 				; optimize OK (helpers.inc), line = 134
  2981
  2982 980D A9 06			lda #$06
  2983 980F 85 88			sta PUTINTTEXT.S
  2984 9811 A9 80			lda #$80
  2985 9813 85 89			sta PUTINTTEXT.S+1
  2986 9815 20 B0 95			jsr PUTINTTEXT
  2987 9818			l_0827
  2988 9818			@exit
  2989 					.ifdef @new
  2990 					lda <@VarData
  2991 					sta :ztmp
  2992 					lda >@VarData
  2993 					ldy #@VarDataSize-1
  2994 					jmp @FreeMem
  2995 					els
  2996 9818 60				rts						; ret
  2997 					eif
  2998 				.endl
  2999
  3000 9819			.local	CLEARSTATUS					; PROCEDURE
  3001
  3002 				; optimize OK (helpers.inc), line = 143
  3003
  3004 9819 A9 00			lda #$00
  3005 981B A0 3B			ldy #$3B
  3006 981D 99 C8 39 88 10 FA		sta:rpl $39C8,y-
  3007
  3008 				; optimize OK (helpers.inc), line = 144
  3009
  3010 9823 A9 C9			lda #$C9
  3011 9825 85 D4			sta SCRADR
  3012 9827 A9 39			lda #$39
  3013 9829 85 D5			sta SCRADR+1
  3014 982B A9 0A			lda #$0A
  3015 982D 85 88			sta PUTINTTEXT.S
  3016 982F A9 80			lda #$80
  3017 9831 85 89			sta PUTINTTEXT.S+1
  3018 9833 20 B0 95			jsr PUTINTTEXT
  3019
  3020 				; optimize FAIL ('ISLOOPED', helpers.inc), line = 145
  3021
  3022 9836 20 F1 97			jsr ISLOOPED
  3023
  3024 				; optimize OK (helpers.inc), line = 146
  3025
  3026 9839 A9 DC			lda #$DC
  3027 983B 85 D4			sta SCRADR
  3028 983D A9 39			lda #$39
  3029 983F 85 D5			sta SCRADR+1
  3030 9841 20 44 97			jsr HLINE
  3031
  3032 				; optimize OK (helpers.inc), line = 147
  3033
  3034 9844 A9 10			lda #$10
  3035 9846 85 8C			sta :ecx
  3036 9848 A5 4B			lda TOTALXMS
  3037 984A 85 84			sta :eax
  3038 					.ifdef fmulinit
  3039 					fmulu_8
  3040 					els
  3041 984C 20 2F 84			imulCL
  3042 					eif
  3043 984F A5 84			lda :eax
  3044 9851 18 69 23			add #$23
  3045 9854 8D 2F 3C			sta MEMAVAILABLE
  3046 9857 A5 85			lda :eax+1
  3047 9859 69 00			adc #$00
  3048 985B 8D 30 3C			sta MEMAVAILABLE+1
  3049
  3050 				; optimize OK (helpers.inc), line = 148
  3051
  3052 985E C9 03			cmp #$03
  3053 9860 D0 05			bne @+
  3054 9862 AD 2F 3C			lda MEMAVAILABLE
  3055 9865 C9 E8			cmp #$E8
  3056 				@
  3057 9867 B0 08			jcs l_085C
  3058 9869 A9 FA			lda #$FA
  3059 986B 85 D4			sta SCRADR
  3060 986D A9 39			lda #$39
  3061 986F 85 D5			sta SCRADR+1
  3062 9871			l_085C
  3063
  3064 				; optimize OK (helpers.inc), line = 149
  3065
  3066 9871 AD 30 3C			lda MEMAVAILABLE+1
  3067 9874 D0 0F			jne l_0874
  3068 9876 AD 2F 3C			lda MEMAVAILABLE
  3069 9879 C9 64			cmp #$64
  3070 987B B0 08			jcs l_0874
  3071 987D A9 FB			lda #$FB
  3072 987F 85 D4			sta SCRADR
  3073 9881 A9 39			lda #$39
  3074 9883 85 D5			sta SCRADR+1
  3075 9885			l_0874
  3076
  3077 				; optimize OK (helpers.inc), line = 150
  3078
  3079 9885 AD 30 3C			lda MEMAVAILABLE+1
  3080 9888 D0 0F			jne l_088C
  3081 988A AD 2F 3C			lda MEMAVAILABLE
  3082 988D C9 0A			cmp #$0A
  3083 988F B0 08			jcs l_088C
  3084 9891 A9 FC			lda #$FC
  3085 9893 85 D4			sta SCRADR
  3086 9895 A9 39			lda #$39
  3087 9897 85 D5			sta SCRADR+1
  3088 9899			l_088C
  3089
  3090 				; optimize OK (helpers.inc), line = 151
  3091
  3092 9899 A9 11			lda #$11
  3093 989B 85 88			sta PUTINTTEXT.S
  3094 989D A9 80			lda #$80
  3095 989F 85 89			sta PUTINTTEXT.S+1
  3096 98A1 20 B0 95			jsr PUTINTTEXT
  3097 98A4 AD 2F 3C			lda MEMAVAILABLE
  3098 98A7 8D 2B 3C			sta PUTINT.VALUE
  3099 98AA AD 30 3C			lda MEMAVAILABLE+1
  3100 98AD 8D 2C 3C			sta PUTINT.VALUE+1
  3101 98B0 20 79 96			jsr PUTINT
  3102 98B3 A9 17			lda #$17
  3103 98B5 85 88			sta PUTINTTEXT.S
  3104 98B7 A9 80			lda #$80
  3105 98B9 85 89			sta PUTINTTEXT.S+1
  3106 98BB 20 B0 95			jsr PUTINTTEXT
  3107
  3108 				; optimize OK (helpers.inc), line = 152
  3109
  3110 98BE AD 00 05			lda adr.FN
  3111 98C1 8D 2E 3C			sta L
  3112
  3113 				; optimize OK (helpers.inc), line = 153
  3114
  3115 98C4 D0 03			jne l_08AF
  3116 98C6 4C FD 98			jmp @exit					; exit
  3117 98C9			l_08AF
  3118
  3119 				; optimize OK (helpers.inc), line = 154
  3120
  3121 98C9 AD 2E 3C			lda L
  3122 98CC C9 11			cmp #$11
  3123 98CE 90 05			jcc l_08C4
  3124 98D0 A9 10			lda #$10
  3125 98D2 8D 00 05			sta adr.FN+$00
  3126 98D5			l_08C4
  3127
  3128 				; optimize OK (helpers.inc), line = 155
  3129
  3130 98D5 A9 1E			lda #$1E
  3131 98D7 38 ED 2E 3C			sub L
  3132 98DB 85 9E			sta :STACKORIGIN+10
  3133 98DD A9 00			lda #$00
  3134 98DF E9 00			sbc #$00
  3135 98E1 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3136 98E3 A9 DC			lda #$DC
  3137 98E5 18 65 9E			add :STACKORIGIN+10
  3138 98E8 85 D4			sta SCRADR
  3139 98EA A9 39			lda #$39
  3140 98EC 65 AE			adc :STACKORIGIN+STACKWIDTH+10
  3141 98EE 85 D5			sta SCRADR+1
  3142 98F0 AD 7D A7			lda FN
  3143 98F3 85 88			sta PUTASCTEXT.S
  3144 98F5 AD 7E A7			lda FN+1
  3145 98F8 85 89			sta PUTASCTEXT.S+1
  3146 98FA 20 D9 95			jsr PUTASCTEXT
  3147
  3148 				; ------------------------------------------------------------
  3149
  3150 = 3C2E			L	= DATAORIGIN+$00EE
  3151 = 3C2F			MEMAVAILABLE	= DATAORIGIN+$00EF
  3152
  3153 = 3C2E			@VarData	= L
  3154 = 0003			@VarDataSize	= 3
  3155
  3156 98FD			@exit
  3157 					.ifdef @new
  3158 					lda <@VarData
  3159 					sta :ztmp
  3160 					lda >@VarData
  3161 					ldy #@VarDataSize-1
  3162 					jmp @FreeMem
  3163 					els
  3164 98FD 60				rts						; ret
  3165 					eif
  3166 				.endl
  3167
  3168 98FE			.local	CLEARUVMETERS					; PROCEDURE
  3169
  3170 				; optimize OK (helpers.inc), line = 160
  3171
  3172 98FE A5 4A			lda PLAYERSTATUS
  3173 9900 29 02			and #$02
  3174 9902 F0 27			jeq l_08F7
  3175
  3176 				; optimize OK (helpers.inc), line = 162
  3177
  3178 9904 A9 00			lda #$00
  3179 9906 8D 11 3C			sta CHN
  3180
  3181 				; --- RepeatUntilProlog
  3182 9909			l_08FD
  3183
  3184 				; optimize OK (helpers.inc), line = 164
  3185
  3186 9909 AD 11 3C			lda CHN
  3187 990C 0A				asl @
  3188 990D A8				tay
  3189 990E B9 D0 3B			lda adr.CHANNELSCRADR,y
  3190 9911 85 D4			sta SCRADR
  3191 9913 B9 D1 3B			lda adr.CHANNELSCRADR+1,y
  3192 9916 85 D5			sta SCRADR+1
  3193
  3194 				; -------------------  ASM Block 00000099  -------------------
  3195
  3196 9918 A0 03		        ldy #3
  3197 991A A9 41		        lda #$41
  3198 991C			      VClr:
  3199 991C 91 D4		        sta (scradr),y
  3200 991E 88			        dey
  3201 991F 10 FB		        bpl VClr
  3202 				      
  3203 				; optimize FAIL (0, helpers.inc), line = 174
  3204
  3205 9921 EE 11 3C			inc CHN
  3206
  3207 				; optimize OK (helpers.inc), line = 175
  3208
  3209 9924 AD 11 3C			lda CHN
  3210 9927 C9 10			cmp #$10
  3211 9929 D0 DE			jne l_08FD
  3212 992B			l_08F7
  3213 992B			@exit
  3214 					.ifdef @new
  3215 					lda <@VarData
  3216 					sta :ztmp
  3217 					lda >@VarData
  3218 					ldy #@VarDataSize-1
  3219 					jmp @FreeMem
  3220 					els
  3221 992B 60				rts						; ret
  3222 					eif
  3223 				.endl
  3224
  3225 992C			.local	GETFILEEXT					; FUNCTION | ASSEMBLER | REGISTER
  3226
  3227 				; -------------------  ASM Block 00000100  -------------------
  3228
  3229 992C			  icl 'asms/get_file_ext.a65'
Source: get_file_ext.a65
     1 = 0088			hlpptr = $88
     2
     3 992C A9 00		  lda #0
     4 992E 85 90		  sta result
     5 9930 85 91		  sta result+1
     6 9932 85 92		  sta result+2
     7 9934 85 93		  sta result+3
     8
     9 9936 A0 00		  ldy #0
    10 9938 B1 88		  lda (hlpptr),y
    11 993A 8D 64 99		  sta fnlen
    12 993D F0 24		  beq endGetFileExt
    13 993F A8			  tay
    14
    15 9940			dotSearch:
    16 9940 B1 88		  lda (hlpptr),y
    17 9942 C9 2E		  cmp #'.'
    18 9944 F0 05		  beq endDotSearch
    19 9946 88			  dey
    20 9947 D0 F7		  bne dotSearch
    21 9949 F0 18		  beq endGetFileExt
    22
    23 994B			endDotSearch:
    24 994B 8C 65 99		  sty extst
    25 994E AD 64 99		  lda fnlen
    26 9951 38			  sec
    27 9952 ED 65 99		  sbc extst
    28 9955 C9 04		  cmp #4
    29 9957 B0 0A		  bcs endGetFileExt
    30
    31 9959 C8			  iny
    32 995A AA			  tax
    33
    34 995B			copyExt2Result:
    35 995B B1 88		  lda (hlpptr),y
    36 995D 95 90		  sta result,x
    37 995F C8			  iny
    38 9960 CA			  dex
    39 9961 D0 F8		  bne copyExt2Result
    40
    41 9963			endGetFileExt:
    42 9963 60			  rts
    43
    44 9964 00			fnlen .byte 0
    45 9965 00			extst .byte 0
  3230
  3231 9966			@exit
  3232
  3233 				; ------------------------------------------------------------
  3234
  3235 = 0088			FN	= :EDX
  3236 = 0090			RESULT	= :STACKORIGIN-4
  3237 9966 60				rts						; ret
  3238 				.endl
  3239
  3240 9967			.local	REDUCEFILENAME					; PROCEDURE | ASSEMBLER | REGISTER
  3241
  3242 				; -------------------  ASM Block 00000101  -------------------
  3243
  3244 9967			  icl 'asms/reduce_filename.a65'
Source: reduce_filename.a65
     1 = 0088			inreg  = $88
     2 = 008C			outReg = $8c
     3
     4 9967 8A 48		  txa:pha
     5
     6 9969 A5 88		  lda inreg
     7 996B 8D 7D 99		  sta inptr
     8 996E A5 89		  lda inreg+1
     9 9970 8D 7E 99		  sta inptr+1
    10
    11 				; 0123456789abcdef01
    12 				;  *:FILENAMEEXT 000
    13
    14 9973 A9 0B		  lda #$0b
    15 9975 8D 88 99		  sta fpos
    16
    17 9978 A2 03		  ldx #3
    18 997A A0 01		  ldy #1
    19
    20 997C			fnLoop:
    21 997C BD 00 20		  lda inptr:$2000,x
    22 997F C9 20		  cmp #' '
    23 9981 F0 03		  beq skip
    24 9983 91 8C		  sta (outreg),y
    25 9985 C8			  iny
    26 9986			skip:
    27 9986 E8			  inx
    28 9987 E0 0B		  cpx fpos:#11
    29 9989 D0 F1		  bne fnLoop
    30
    31 998B			dot:
    32 998B E0 0E		  cpx #$0e
    33 998D F0 0B		  beq storeDot
    34
    35 998F 98 48		  tya:pha
    36 9991 C8			  iny
    37 9992 A9 0E		  lda #$0e
    38 9994 8D 88 99		  sta fpos
    39 9997 4C 7C 99		  jmp fnLoop
    40
    41 999A			storeDot:
    42 999A 88			  dey
    43 999B 98 AA		  tya:tax   // move Y to X - string length
    44 999D 68 A8		  pla:tay   // pop stored dot position
    45 999F A9 2E		  lda #'.'
    46 99A1 91 8C		  sta (outreg),y
    47
    48 99A3 8A			  txa       // move string length to Accu
    49 99A4 A0 00		  ldy #0
    50 99A6 91 8C		  sta (outreg),y
    51
    52 99A8 68 AA		  pla:tax
  3245
  3246 				; ------------------------------------------------------------
  3247
  3248 = 0088			INFN	= :EDX
  3249 = 008C			OUTFN	= :ECX
  3250 99AA			@exit
  3251 					.ifdef @new
  3252 					lda <@VarData
  3253 					sta :ztmp
  3254 					lda >@VarData
  3255 					ldy #@VarDataSize-1
  3256 					jmp @FreeMem
  3257 					els
  3258 99AA 60				rts						; ret
  3259 					eif
  3260 				.endl
  3261
  3262 99AB			.local	GETDEVICESPEC					; PROCEDURE | ASSEMBLER | REGISTER
  3263
  3264 				; -------------------  ASM Block 00000103  -------------------
  3265
  3266 99AB			  icl 'asms/getDeviceSpec.a65'
Source: getDeviceSpec.a65
     1 = 0088			fnreg   = $88
     2 = 008C			specreg = $8c
     3
     4 99AB			getDeviceSpec:
     5 99AB A0 01		  ldy #1
     6 99AD			colonLoop:
     7 99AD B1 88		  lda (fnreg),y
     8 99AF C9 3A		  cmp #':'
     9 99B1 F0 0B		  beq foundSpec
    10 99B3 C8			  iny
    11 99B4 C0 04		  cpy #4
    12 99B6 D0 F5		  bne colonLoop
    13
    14 99B8			specNotFound:
    15 99B8 A9 00		  lda #0
    16 99BA A8			  tay
    17 99BB 91 8C		  sta (specreg),y
    18 99BD 60			  rts
    19
    20 99BE			foundSpec:
    21 99BE 98			  tya
    22 99BF A0 00		  ldy #0
    23 99C1 91 8C		  sta (specreg),y
    24 99C3 A8			  tay
    25
    26 99C4			copySpec:
    27 99C4 B1 88		  lda (fnreg),y
    28 99C6 91 8C		  sta (specreg),y
    29 99C8 88			  dey
    30 99C9 D0 F9		  bne copySpec
  3267
  3268 				; ------------------------------------------------------------
  3269
  3270 = 0088			FN	= :EDX
  3271 = 008C			SPEC	= :ECX
  3272 99CB			@exit
  3273 					.ifdef @new
  3274 					lda <@VarData
  3275 					sta :ztmp
  3276 					lda >@VarData
  3277 					ldy #@VarDataSize-1
  3278 					jmp @FreeMem
  3279 					els
  3280 99CB 60				rts						; ret
  3281 					eif
  3282 				.endl
  3283
  3284 99CC			.local	JOINSTRINGS					; PROCEDURE | ASSEMBLER | REGISTER
  3285
  3286 				; -------------------  ASM Block 00000104  -------------------
  3287
  3288 99CC			  icl 'asms/joinStrings.a65'
Source: joinStrings.a65
     1 99CC			JoinStrings:
     2
     3 99CC 8A 48		    txa:pha
     4
     5 99CE A0 00		    ldy #0
     6 99D0 B1 88		    lda (s1),y
     7 99D2 8D DF 99		    sta devlen
     8 99D5 A2 01		    ldx #1
     9
    10 99D7			copyS1:
    11 99D7 C8			    iny
    12 99D8 B1 88		    lda (s1),y
    13 99DA 9D 80 05		    sta adr.outstr,x
    14 99DD E8			    inx
    15 99DE C0 00		    cpy devlen:#00
    16 99E0 D0 F5		    bne copyS1
    17
    18 99E2			nextCopy:
    19 99E2 A0 00		    ldy #0
    20 99E4 B1 8C		    lda (s2),y
    21 99E6 8D F1 99		    sta fnlen
    22
    23 99E9			copyS2:
    24 99E9 C8			    iny
    25 99EA B1 8C		    lda (s2),y
    26 99EC 9D 80 05		    sta adr.outstr,x
    27 99EF E8			    inx
    28 99F0 C0 00		    cpy fnlen:#00
    29 99F2 D0 F5		    bne copyS2
    30
    31 99F4 CA			    dex
    32 99F5 8E 80 05		    stx adr.outstr
    33
    34 99F8 68 AA		    pla:tax
    35 99FA 60			    rts
  3289
  3290 				; ------------------------------------------------------------
  3291
  3292 = 0088			S1	= :EDX
  3293 = 008C			S2	= :ECX
  3294 99FB			@exit
  3295 					.ifdef @new
  3296 					lda <@VarData
  3297 					sta :ztmp
  3298 					lda >@VarData
  3299 					ldy #@VarDataSize-1
  3300 					jmp @FreeMem
  3301 					els
  3302 99FB 60				rts						; ret
  3303 					eif
  3304 				.endl
  3305
  3306 99FC			.local	GETLN						; PROCEDURE | ASSEMBLER | REGISTER
  3307
  3308 				; -------------------  ASM Block 00000105  -------------------
  3309
  3310 99FC			  icl 'asms/get_line.a65'
Source: get_line.a65
     1 99FC 8A 48		  txa:pha
     2
     3 99FE A5 88		  lda chn
     4 9A00 0A 0A 0A 0A		  :4 asl @
     5 9A04 AA			  tax
     6
     7 9A05 A9 05		  lda #5
     8 9A07 9D 42 03		  sta iccmd,x
     9
    10 9A0A A5 8D		  lda buf+1
    11 9A0C 9D 45 03		  sta icbufa+1,x
    12 9A0F A5 8C		  lda buf
    13 9A11 18 69 01		  add #1
    14 9A14 9D 44 03		  sta icbufa,x
    15 9A17 90 03 FE 45 03	  scc:inc icbufa+1,X
    16
    17 9A1C A9 80		  lda #$80
    18 9A1E 9D 48 03		  sta icbufl,x
    19 9A21 A9 00		  lda #0
    20 9A23 9D 49 03		  sta icbufl+1,x
    21
    22 9A26			  m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 9A26 EE 01 D3				inc portb
     6 9A29 20 56 E4				jsr CIOV
     8 9A2C CE 01 D3				dec portb
Source: get_line.a65
    23 9A2F 8C 47 3B		  sty MAIN.SYSTEM.IOResult
    24
    25 9A32 BD 48 03		  lda icbufl,x
    26 9A35 A0 00		  ldy #0
    27 9A37 91 8C		  sta (buf),y
    28
    29 9A39 68 AA		  pla:tax
  3311
  3312 				; ------------------------------------------------------------
  3313
  3314 = 0088			CHN	= :EDX
  3315 = 008C			BUF	= :ECX
  3316 9A3B			@exit
  3317 					.ifdef @new
  3318 					lda <@VarData
  3319 					sta :ztmp
  3320 					lda >@VarData
  3321 					ldy #@VarDataSize-1
  3322 					jmp @FreeMem
  3323 					els
  3324 9A3B 60				rts						; ret
  3325 					eif
  3326 				.endl
  3327
  3328 9A3C			.local	EXIT2DOS					; PROCEDURE
  3329
  3330 				; optimize FAIL ('STOPMIDI', helpers.inc), line = 220
  3331
  3332 9A3C 20 15 97			jsr STOPMIDI
  3333
  3334 				; optimize OK (helpers.inc), line = 221
  3335
  3336 9A3F A9 00			lda #$00
  3337 9A41 20 D9 8A			jsr CIO.CLS
  3338 9A44 A9 00			lda #$00
  3339 9A46 8D 6F 3B			sta CIO.OPN.CHN
  3340 9A49 A9 0C			lda #$0C
  3341 9A4B 8D 70 3B			sta CIO.OPN.AX1
  3342 9A4E A9 00			lda #$00
  3343 9A50 8D 71 3B			sta CIO.OPN.AX2
  3344 9A53 A9 1B			lda #$1B
  3345 9A55 8D 72 3B			sta CIO.OPN.DEVICE
  3346 9A58 A9 80			lda #$80
  3347 9A5A 8D 73 3B			sta CIO.OPN.DEVICE+1
  3348 9A5D 20 9B 8A			jsr CIO.OPN
  3349 9A60 A9 01			lda #$01
  3350 9A62 85 41			sta SOUNDR
  3351 9A64			@exit
  3352 					.ifdef @new
  3353 					lda <@VarData
  3354 					sta :ztmp
  3355 					lda >@VarData
  3356 					ldy #@VarDataSize-1
  3357 					jmp @FreeMem
  3358 					els
  3359 9A64 60				rts						; ret
  3360 					eif
  3361 				.endl
  3362
  3363 9A65			.local	STATUSPLAYING					; PROCEDURE
  3364
  3365 				; optimize OK (status.inc), line = 3
  3366
  3367 9A65 AD 79 3B			lda MIDFILES.TOTALTRACKS
  3368 9A68 F0 3F			jeq l_0943
  3369
  3370 				; optimize OK (status.inc), line = 5
  3371
  3372 9A6A A9 C9			lda #$C9
  3373 9A6C 85 D4			sta SCRADR
  3374 9A6E A9 39			lda #$39
  3375 9A70 85 D5			sta SCRADR+1
  3376 9A72 A9 1F			lda #$1F
  3377 9A74 85 88			sta PUTINTTEXT.S
  3378 9A76 A9 80			lda #$80
  3379 9A78 85 89			sta PUTINTTEXT.S+1
  3380 9A7A 20 B0 95			jsr PUTINTTEXT
  3381
  3382 				; optimize OK (status.inc), line = 6
  3383
  3384 9A7D A9 DD			lda #$DD
  3385 9A7F 85 D4			sta SCRADR
  3386 9A81 A9 39			lda #$39
  3387 9A83 85 D5			sta SCRADR+1
  3388 9A85 A9 26			lda #$26
  3389 9A87 85 88			sta PUTINTTEXT.S
  3390 9A89 A9 80			lda #$80
  3391 9A8B 85 89			sta PUTINTTEXT.S+1
  3392 9A8D 20 B0 95			jsr PUTINTTEXT
  3393
  3394 				; optimize OK (status.inc), line = 7
  3395
  3396 9A90 AD 18 3C			lda ISSTOPPED
  3397 9A93 F0 0B			jeq l_095C
  3398
  3399 				; optimize FAIL ('MIDFILES.INITTIMER', status.inc), line = 9
  3400
  3401 9A95 20 B4 93			jsr MIDFILES.INITTIMER
  3402
  3403 				; optimize OK (status.inc), line = 10
  3404
  3405 9A98 A9 00			lda #$00
  3406 9A9A 8D 18 3C			sta ISSTOPPED
  3407 9A9D 4C A6 9A			jmp l_096B
  3408 9AA0			l_095C
  3409
  3410 				; optimize OK (status.inc), line = 13
  3411
  3412 9AA0 A5 F5			lda MIDFILES._TIMERSTATUS
  3413 9AA2 29 7F			and #$7F
  3414 9AA4 85 F5			sta MIDFILES._TIMERSTATUS
  3415 9AA6			l_096B
  3416 9AA6 4C CF 9A			jmp l_0981
  3417 9AA9			l_0943
  3418
  3419 				; optimize OK (status.inc), line = 17
  3420
  3421 9AA9 A9 C9			lda #$C9
  3422 9AAB 85 D4			sta SCRADR
  3423 9AAD A9 39			lda #$39
  3424 9AAF 85 D5			sta SCRADR+1
  3425 9AB1 A9 0A			lda #$0A
  3426 9AB3 85 88			sta PUTINTTEXT.S
  3427 9AB5 A9 80			lda #$80
  3428 9AB7 85 89			sta PUTINTTEXT.S+1
  3429 9AB9 20 B0 95			jsr PUTINTTEXT
  3430
  3431 				; optimize OK (status.inc), line = 18
  3432
  3433 9ABC A9 DD			lda #$DD
  3434 9ABE 85 D4			sta SCRADR
  3435 9AC0 A9 39			lda #$39
  3436 9AC2 85 D5			sta SCRADR+1
  3437 9AC4 A9 31			lda #$31
  3438 9AC6 85 88			sta PUTINTTEXT.S
  3439 9AC8 A9 80			lda #$80
  3440 9ACA 85 89			sta PUTINTTEXT.S+1
  3441 9ACC 20 B0 95			jsr PUTINTTEXT
  3442 9ACF			l_0981
  3443 9ACF			@exit
  3444 					.ifdef @new
  3445 					lda <@VarData
  3446 					sta :ztmp
  3447 					lda >@VarData
  3448 					ldy #@VarDataSize-1
  3449 					jmp @FreeMem
  3450 					els
  3451 9ACF 60				rts						; ret
  3452 					eif
  3453 				.endl
  3454
  3455 9AD0			.local	STATUSPAUSE					; PROCEDURE
  3456
  3457 				; optimize OK (status.inc), line = 24
  3458
  3459 9AD0 AD 18 3C			lda ISSTOPPED
  3460 9AD3 F0 03			jeq l_099D
  3461 9AD5 4C 04 9B			jmp @exit					; exit
  3462 9AD8			l_099D
  3463
  3464 				; optimize OK (status.inc), line = 25
  3465
  3466 9AD8 A9 C9			lda #$C9
  3467 9ADA 85 D4			sta SCRADR
  3468 9ADC A9 39			lda #$39
  3469 9ADE 85 D5			sta SCRADR+1
  3470 9AE0 A9 3C			lda #$3C
  3471 9AE2 85 88			sta PUTINTTEXT.S
  3472 9AE4 A9 80			lda #$80
  3473 9AE6 85 89			sta PUTINTTEXT.S+1
  3474 9AE8 20 B0 95			jsr PUTINTTEXT
  3475
  3476 				; optimize OK (status.inc), line = 26
  3477
  3478 9AEB A9 DD			lda #$DD
  3479 9AED 85 D4			sta SCRADR
  3480 9AEF A9 39			lda #$39
  3481 9AF1 85 D5			sta SCRADR+1
  3482 9AF3 A9 43			lda #$43
  3483 9AF5 85 88			sta PUTINTTEXT.S
  3484 9AF7 A9 80			lda #$80
  3485 9AF9 85 89			sta PUTINTTEXT.S+1
  3486 9AFB 20 B0 95			jsr PUTINTTEXT
  3487
  3488 				; optimize OK (status.inc), line = 27
  3489
  3490 9AFE A5 F5			lda MIDFILES._TIMERSTATUS
  3491 9B00 09 80			ora #$80
  3492 9B02 85 F5			sta MIDFILES._TIMERSTATUS
  3493 9B04			@exit
  3494 					.ifdef @new
  3495 					lda <@VarData
  3496 					sta :ztmp
  3497 					lda >@VarData
  3498 					ldy #@VarDataSize-1
  3499 					jmp @FreeMem
  3500 					els
  3501 9B04 60				rts						; ret
  3502 					eif
  3503 				.endl
  3504
  3505 9B05			.local	STATUSSTOPPED					; PROCEDURE
  3506
  3507 				; optimize OK (status.inc), line = 32
  3508
  3509 9B05 AD 79 3B			lda MIDFILES.TOTALTRACKS
  3510 9B08 D0 03			jne l_09CC
  3511 9B0A 4C 66 9B			jmp @exit					; exit
  3512 9B0D			l_09CC
  3513
  3514 				; optimize OK (status.inc), line = 33
  3515
  3516 9B0D AD 18 3C			lda ISSTOPPED
  3517 9B10 F0 03			jeq l_09DB
  3518 9B12 4C 66 9B			jmp @exit					; exit
  3519 9B15			l_09DB
  3520
  3521 				; optimize OK (status.inc), line = 34
  3522
  3523 9B15 A9 01			lda #$01
  3524 9B17 8D 18 3C			sta ISSTOPPED
  3525
  3526 				; optimize OK (status.inc), line = 35
  3527
  3528 9B1A A9 C9			lda #$C9
  3529 9B1C 85 D4			sta SCRADR
  3530 9B1E A9 39			lda #$39
  3531 9B20 85 D5			sta SCRADR+1
  3532 9B22 A9 4E			lda #$4E
  3533 9B24 85 88			sta PUTINTTEXT.S
  3534 9B26 A9 80			lda #$80
  3535 9B28 85 89			sta PUTINTTEXT.S+1
  3536 9B2A 20 B0 95			jsr PUTINTTEXT
  3537
  3538 				; optimize OK (status.inc), line = 36
  3539
  3540 9B2D A9 DD			lda #$DD
  3541 9B2F 85 D4			sta SCRADR
  3542 9B31 A9 39			lda #$39
  3543 9B33 85 D5			sta SCRADR+1
  3544 9B35 A9 55			lda #$55
  3545 9B37 85 88			sta PUTINTTEXT.S
  3546 9B39 A9 80			lda #$80
  3547 9B3B 85 89			sta PUTINTTEXT.S+1
  3548 9B3D 20 B0 95			jsr PUTINTTEXT
  3549
  3550 				; optimize FAIL ('STOPMIDI', status.inc), line = 37
  3551
  3552 9B40 20 15 97			jsr STOPMIDI
  3553
  3554 				; optimize OK (status.inc), line = 38
  3555
  3556 9B43 A9 00			lda #$00
  3557 9B45 85 88			sta SYSTEM.MOVE_0164.SOURCE
  3558 9B47 A9 2C			lda #$2C
  3559 9B49 85 89			sta SYSTEM.MOVE_0164.SOURCE+1
  3560 9B4B A9 00			lda #$00
  3561 9B4D 85 8C			sta SYSTEM.MOVE_0164.DEST
  3562 9B4F A9 2E			lda #$2E
  3563 9B51 85 8D			sta SYSTEM.MOVE_0164.DEST+1
  3564 9B53 A9 00			lda #$00
  3565 9B55 85 84			sta SYSTEM.MOVE_0164.COUNT
  3566 9B57 A9 02			lda #$02
  3567 9B59 85 85			sta SYSTEM.MOVE_0164.COUNT+1
  3568 9B5B				.local +MAIN.SYSTEM.MOVE_0164
  3569 9B5B				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0164.M@INLINE [Source: MIDICar Player.a65]
     4 9B5B 20 3B 83			jsr @move
Source: MIDICar Player.a65
  3570 					.endl
  3571
  3572 				; optimize OK (status.inc), line = 39
  3573
  3574 9B5E A9 00			lda #$00
  3575 9B60 8D 11 3C			sta CHN
  3576
  3577 				; optimize FAIL ('CLEARUVMETERS', status.inc), line = 40
  3578
  3579 9B63 20 FE 98			jsr CLEARUVMETERS
  3580 9B66			@exit
  3581 					.ifdef @new
  3582 					lda <@VarData
  3583 					sta :ztmp
  3584 					lda >@VarData
  3585 					ldy #@VarDataSize-1
  3586 					jmp @FreeMem
  3587 					els
  3588 9B66 60				rts						; ret
  3589 					eif
  3590 				.endl
  3591
  3592 9B67			.local	STATUSLOADING					; PROCEDURE
  3593
  3594 				; optimize OK (status.inc), line = 45
  3595
  3596 9B67 A9 DD			lda #$DD
  3597 9B69 85 D4			sta SCRADR
  3598 9B6B A9 39			lda #$39
  3599 9B6D 85 D5			sta SCRADR+1
  3600 9B6F A9 60			lda #$60
  3601 9B71 85 88			sta PUTINTTEXT.S
  3602 9B73 A9 80			lda #$80
  3603 9B75 85 89			sta PUTINTTEXT.S+1
  3604 9B77 20 B0 95			jsr PUTINTTEXT
  3605 9B7A			@exit
  3606 					.ifdef @new
  3607 					lda <@VarData
  3608 					sta :ztmp
  3609 					lda >@VarData
  3610 					ldy #@VarDataSize-1
  3611 					jmp @FreeMem
  3612 					els
  3613 9B7A 60				rts						; ret
  3614 					eif
  3615 				.endl
  3616
  3617 9B7B			.local	STATUSREADDIRECTORY				; PROCEDURE
  3618
  3619 				; optimize OK (status.inc), line = 50
  3620
  3621 9B7B A9 DD			lda #$DD
  3622 9B7D 85 D4			sta SCRADR
  3623 9B7F A9 39			lda #$39
  3624 9B81 85 D5			sta SCRADR+1
  3625 9B83 A9 6B			lda #$6B
  3626 9B85 85 88			sta PUTINTTEXT.S
  3627 9B87 A9 80			lda #$80
  3628 9B89 85 89			sta PUTINTTEXT.S+1
  3629 9B8B 20 B0 95			jsr PUTINTTEXT
  3630 9B8E			@exit
  3631 					.ifdef @new
  3632 					lda <@VarData
  3633 					sta :ztmp
  3634 					lda >@VarData
  3635 					ldy #@VarDataSize-1
  3636 					jmp @FreeMem
  3637 					els
  3638 9B8E 60				rts						; ret
  3639 					eif
  3640 				.endl
  3641
  3642 9B8F			.local	STATUSREADPLAYLIST				; PROCEDURE
  3643
  3644 				; optimize OK (status.inc), line = 55
  3645
  3646 9B8F A9 DD			lda #$DD
  3647 9B91 85 D4			sta SCRADR
  3648 9B93 A9 39			lda #$39
  3649 9B95 85 D5			sta SCRADR+1
  3650 9B97 A9 80			lda #$80
  3651 9B99 85 88			sta PUTINTTEXT.S
  3652 9B9B 85 89			sta PUTINTTEXT.S+1
  3653 9B9D 20 B0 95			jsr PUTINTTEXT
  3654 9BA0			@exit
  3655 					.ifdef @new
  3656 					lda <@VarData
  3657 					sta :ztmp
  3658 					lda >@VarData
  3659 					ldy #@VarDataSize-1
  3660 					jmp @FreeMem
  3661 					els
  3662 9BA0 60				rts						; ret
  3663 					eif
  3664 				.endl
  3665
  3666 9BA1			.local	STATUSERROR					; PROCEDURE
  3667 9BA1 8D 31 3C			sta ERR
  3668
  3669 				; optimize OK (status.inc), line = 60
  3670
  3671 9BA4 A9 FF			lda #$FF
  3672 9BA6 8D FC 02			sta KEYB
  3673
  3674 				; optimize OK (status.inc), line = 61
  3675
  3676 9BA9 A9 DC			lda #$DC
  3677 9BAB 85 D4			sta SCRADR
  3678 9BAD A9 39			lda #$39
  3679 9BAF 85 D5			sta SCRADR+1
  3680
  3681 				; optimize OK (status.inc), line = 62
  3682
  3683 9BB1 AD 31 3C			lda ERR
  3684 9BB4 8D 32 3C			sta @CASETMP_0003
  3685 9BB7 C9 64			cmp #$64
  3686 9BB9 D0 0E			jne l_0A2D
  3687 				@
  3688
  3689 				; optimize OK (status.inc), line = 63
  3690
  3691 9BBB A9 94			lda #$94
  3692 9BBD 85 88			sta PUTINTTEXT.S
  3693 9BBF A9 80			lda #$80
  3694 9BC1 85 89			sta PUTINTTEXT.S+1
  3695 9BC3 20 B0 95			jsr PUTINTTEXT
  3696
  3697 9BC6 4C 1A 9C			jmp a_0003
  3698 9BC9			l_0A2D
  3699 9BC9 C9 65			cmp #$65
  3700 9BCB D0 0E			jne l_0A38
  3701 				@
  3702
  3703 				; optimize OK (status.inc), line = 64
  3704
  3705 9BCD A9 AA			lda #$AA
  3706 9BCF 85 88			sta PUTINTTEXT.S
  3707 9BD1 A9 80			lda #$80
  3708 9BD3 85 89			sta PUTINTTEXT.S+1
  3709 9BD5 20 B0 95			jsr PUTINTTEXT
  3710
  3711 9BD8 4C 1A 9C			jmp a_0003
  3712 9BDB			l_0A38
  3713 9BDB C9 66			cmp #$66
  3714 9BDD D0 0E			jne l_0A43
  3715 				@
  3716
  3717 				; optimize OK (status.inc), line = 65
  3718
  3719 9BDF A9 C0			lda #$C0
  3720 9BE1 85 88			sta PUTINTTEXT.S
  3721 9BE3 A9 80			lda #$80
  3722 9BE5 85 89			sta PUTINTTEXT.S+1
  3723 9BE7 20 B0 95			jsr PUTINTTEXT
  3724
  3725 9BEA 4C 1A 9C			jmp a_0003
  3726 9BED			l_0A43
  3727
  3728 				; optimize OK (status.inc), line = 67
  3729
  3730 9BED A9 80			lda #$80
  3731 9BEF 8D 24 3C			sta PUTTEXTINVERT
  3732
  3733 				; optimize OK (status.inc), line = 68
  3734
  3735 9BF2 A9 D3			lda #$D3
  3736 9BF4 85 88			sta PUTINTTEXT.S
  3737 9BF6 A9 80			lda #$80
  3738 9BF8 85 89			sta PUTINTTEXT.S+1
  3739 9BFA 20 B0 95			jsr PUTINTTEXT
  3740 9BFD AD 31 3C			lda ERR
  3741 9C00 8D 2B 3C			sta PUTINT.VALUE
  3742 9C03 A9 00			lda #$00
  3743 9C05 8D 2C 3C			sta PUTINT.VALUE+1
  3744 9C08 20 79 96			jsr PUTINT
  3745 9C0B A4 D5			ldy SCRADR+1
  3746 9C0D 84 81			sty :bp+1
  3747 9C0F A4 D4			ldy SCRADR
  3748 9C11 A9 CE			lda #$CE
  3749 9C13 91 80			sta (:bp),y
  3750
  3751 				; optimize OK (status.inc), line = 69
  3752
  3753 9C15 A9 00			lda #$00
  3754 9C17 8D 24 3C			sta PUTTEXTINVERT
  3755 9C1A			a_0003
  3756
  3757 				; --- WhileProlog
  3758 9C1A			l_0A61
  3759
  3760 				; optimize OK (status.inc), line = 71
  3761
  3762 9C1A AD FC 02			lda KEYB
  3763 9C1D C9 FF			cmp #$FF
  3764 9C1F F0 F9			jeq l_0A61
  3765
  3766 				; optimize FAIL ('CLEARSTATUS', status.inc), line = 72
  3767
  3768 9C21 20 19 98			jsr CLEARSTATUS
  3769
  3770 				; ------------------------------------------------------------
  3771
  3772 = 3C31			ERR	= DATAORIGIN+$00F1
  3773 = 3C32			@CASETMP_0003	= DATAORIGIN+$00F2
  3774
  3775 = 3C31			@VarData	= ERR
  3776 = 0002			@VarDataSize	= 2
  3777
  3778 9C24			@exit
  3779 					.ifdef @new
  3780 					lda <@VarData
  3781 					sta :ztmp
  3782 					lda >@VarData
  3783 					ldy #@VarDataSize-1
  3784 					jmp @FreeMem
  3785 					els
  3786 9C24 60				rts						; ret
  3787 					eif
  3788 				.endl
  3789
  3790 9C25			.local	INIT						; PROCEDURE
  3791
  3792 9C25 4C 5C 9C			jmp l_0A72
  3793
  3794 9C28			.local	SETMCBASEADDRESS				; PROCEDURE | ASSEMBLER
  3795
  3796 				; -------------------  ASM Block 00000106  -------------------
  3797
  3798 9C28			    icl 'asms/setMCBaseAddr.a65'
Source: setMCBaseAddr.a65
     1 				    .macro m@setMCBase name
     2 				      sty :name
     3 				      stx :name+1
     4 				    .endm
     5
     6 9C28 8A 48		    txa:pha
     7
     8 9C2A A4 D8		    ldy MCBaseAddr
     9 9C2C A6 D9		    ldx MCBaseAddr+1
    10
    11 9C2E			    m@setMCBase MAIN.MC6850.MC6850_INIT.MCBASESTATE
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 9C2E 8C 37 8A		      sty MAIN.MC6850.MC6850_INIT.MCBASESTATE
     2 9C31 8E 38 8A		      stx MAIN.MC6850.MC6850_INIT.MCBASESTATE+1
Source: setMCBaseAddr.a65
    12 9C34			    m@setMCBase MAIN.MC6850.MC6850_Send2.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 9C34 8C 3B 8A		      sty MAIN.MC6850.MC6850_SEND2.MCBASESTATE
     2 9C37 8E 3C 8A		      stx MAIN.MC6850.MC6850_SEND2.MCBASESTATE+1
Source: setMCBaseAddr.a65
    13 9C3A			    m@setMCBase MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 9C3A 8C 4F 8A		      sty MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASESTATE
     2 9C3D 8E 50 8A		      stx MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASESTATE+1
Source: setMCBaseAddr.a65
    14 9C40			    m@setMCBase MAIN.MIDI_FIFO.FIFO_FLUSH.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 9C40 8C 85 8A		      sty MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASESTATE
     2 9C43 8E 86 8A		      stx MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASESTATE+1
Source: setMCBaseAddr.a65
    15
    16 9C46 C8			    iny
    17 9C47			    m@setMCBase MAIN.MC6850.MC6850_Send2.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 9C47 8C 44 8A		      sty MAIN.MC6850.MC6850_SEND2.MCBASEBUF
     2 9C4A 8E 45 8A		      stx MAIN.MC6850.MC6850_SEND2.MCBASEBUF+1
Source: setMCBaseAddr.a65
    18 9C4D			    m@setMCBase MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 9C4D 8C 5F 8A		      sty MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASEBUF
     2 9C50 8E 60 8A		      stx MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASEBUF+1
Source: setMCBaseAddr.a65
    19 9C53			    m@setMCBase MAIN.MIDI_FIFO.FIFO_FLUSH.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 9C53 8C 8F 8A		      sty MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASEBUF
     2 9C56 8E 90 8A		      stx MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASEBUF+1
Source: setMCBaseAddr.a65
    20
    21 9C59 68 AA		    pla:tax
  3799 				  
  3800 9C5B			@exit
  3801 					.ifdef @new
  3802 					lda <@VarData
  3803 					sta :ztmp
  3804 					lda >@VarData
  3805 					ldy #@VarDataSize-1
  3806 					jmp @FreeMem
  3807 					els
  3808 9C5B 60				rts						; ret
  3809 					eif
  3810 				.endl
  3811 9C5C			l_0A72
  3812
  3813 				; optimize FAIL ('SETMCBASEADDRESS', init.inc), line = 10
  3814
  3815 9C5C 20 28 9C			jsr SETMCBASEADDRESS
  3816
  3817 				; optimize OK (init.inc), line = 13
  3818
  3819 9C5F A9 03			lda #$03
  3820 9C61 20 30 8A			jsr MC6850.MC6850_INIT
  3821
  3822 				; optimize OK (init.inc), line = 14
  3823
  3824 9C64 A9 16			lda #$16
  3825 9C66 20 30 8A			jsr MC6850.MC6850_INIT
  3826
  3827 				; optimize OK (init.inc), line = 16
  3828
  3829 9C69 A9 00			lda #$00
  3830 9C6B 8D 00 D4			sta DMACTL
  3831
  3832 				; optimize OK (init.inc), line = 17
  3833
  3834 9C6E A9 32			lda #$32
  3835 9C70 8D F4 02			sta CHBASE
  3836
  3837 				; optimize OK (init.inc), line = 18
  3838
  3839 9C73 A9 B7			lda #$B7
  3840 9C75 8D 30 02			sta SDLST
  3841 9C78 A9 3F			lda #$3F
  3842 9C7A 8D 31 02			sta SDLST+1
  3843
  3844 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', init.inc), line = 20
  3845
  3846 9C7D 20 47 8A			jsr MIDI_FIFO.FIFO_RESET
  3847
  3848 				; optimize OK (init.inc), line = 22
  3849
  3850 9C80 A9 00			lda #$00
  3851 9C82 20 15 8A			jsr SYSTEM.PARAMSTR
  3852 9C85 E8				inx
  3853 9C86 AD 2A 8A			lda SYSTEM.PARAMSTR.RESULT
  3854 9C89 85 88			sta @move.src
  3855 9C8B AD 2B 8A			lda SYSTEM.PARAMSTR.RESULT+1
  3856 9C8E 85 89			sta @move.src+1
  3857 					@moveSTRING FN #128
  3857 				 MWA FN @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  3857 9C90 AD 7D A7 85 8C AD +  MWA FN @MOVE.DST
  3857 9C9A A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  3857 9CA2 20 D8 83		 JSR @MOVESTRING
  3858 9CA5 CA				dex
  3859 9CA6 AD 7D A7			lda FN
  3860 9CA9 85 88			sta GETDEVICESPEC.FN
  3861 9CAB AD 7E A7			lda FN+1
  3862 9CAE 85 89			sta GETDEVICESPEC.FN+1
  3863 9CB0 AD 7B A7			lda CURDEV
  3864 9CB3 85 8C			sta GETDEVICESPEC.SPEC
  3865 9CB5 AD 7C A7			lda CURDEV+1
  3866 9CB8 85 8D			sta GETDEVICESPEC.SPEC+1
  3867 9CBA 20 AB 99			jsr GETDEVICESPEC
  3868
  3869 				; optimize FAIL ('cmpSTRING', init.inc), line = 23
  3870
  3871 9CBD E8				inx
  3872 9CBE AD 7B A7 95 94		mva CURDEV :STACKORIGIN,x
  3873 9CC3 AD 7C A7 95 A4		mva CURDEV+1 :STACKORIGIN+STACKWIDTH,x
  3874 9CC8 E8				inx
  3875 9CC9 A9 00 95 94			mva #$00 :STACKORIGIN,x
  3876 9CCD A9 80 95 A4			mva #$80 :STACKORIGIN+STACKWIDTH,x
  3877 9CD1 A0 01			ldy #1
  3878 9CD3 20 BE 82			jsr cmpSTRING
  3879 9CD6 F0 01			beq @+
  3880 9CD8 88				dey
  3881 				@
  3882 9CD9 CA				dex
  3883 9CDA CA				dex
  3884 9CDB 98				tya
  3885 9CDC F0 0B			jeq l_0A9D
  3886 9CDE A0 FD			ldy #256-3
  3887 9CE0 B9 E4 7F 99 1C 3B + 	mva:rne CODEORIGIN+$00E1+3-256,y adr.CURDEV+3-256,y+
  3888 9CE9			l_0A9D
  3889 9CE9 A9 00 8D 00 05		mva #$00 adr.FN
  3890
  3891 				; optimize FAIL ('CLEARWORKAREA', init.inc), line = 26
  3892
  3893 9CEE 20 4E 97			jsr CLEARWORKAREA
  3894
  3895 				; optimize FAIL ('CLEARSTATUS', init.inc), line = 27
  3896
  3897 9CF1 20 19 98			jsr CLEARSTATUS
  3898
  3899 				; optimize OK (init.inc), line = 28
  3900
  3901 9CF4 A9 A0			lda #$A0
  3902 9CF6 85 D4			sta SCRADR
  3903 9CF8 A9 39			lda #$39
  3904 9CFA 85 D5			sta SCRADR+1
  3905 9CFC 20 44 97			jsr HLINE
  3906
  3907 				; optimize OK (init.inc), line = 29
  3908
  3909 9CFF A9 A1			lda #$A1
  3910 9D01 85 D4			sta SCRADR
  3911 9D03 A9 39			lda #$39
  3912 9D05 85 D5			sta SCRADR+1
  3913 9D07 A9 E5			lda #$E5
  3914 9D09 85 88			sta PUTINTTEXT.S
  3915 9D0B A9 80			lda #$80
  3916 9D0D 85 89			sta PUTINTTEXT.S+1
  3917 9D0F 20 B0 95			jsr PUTINTTEXT
  3918
  3919 				; optimize OK (init.inc), line = 30
  3920
  3921 9D12 A9 BE			lda #$BE
  3922 9D14 85 D4			sta SCRADR
  3923 9D16 A9 39			lda #$39
  3924 9D18 85 D5			sta SCRADR+1
  3925 9D1A A9 EF			lda #$EF
  3926 9D1C 85 88			sta PUTINTTEXT.S
  3927 9D1E A9 80			lda #$80
  3928 9D20 85 89			sta PUTINTTEXT.S+1
  3929 9D22 20 B0 95			jsr PUTINTTEXT
  3930
  3931 				; optimize OK (init.inc), line = 32
  3932
  3933 9D25 A9 00			lda #$00
  3934 9D27 8D 4A 94			sta MIDFILES.MIDTRACKS
  3935 9D2A A9 2E			lda #$2E
  3936 9D2C 8D 4B 94			sta MIDFILES.MIDTRACKS+1
  3937
  3938 				; optimize OK (init.inc), line = 35
  3939
  3940 9D2F A9 00			lda #$00
  3941 9D31 85 DE			sta MIDFILES.CTRK
  3942
  3943 9D33			l_0AC0
  3944 				; --- ForToDoCondition
  3945 9D33 A5 DE			lda MIDFILES.CTRK
  3946 9D35 C9 10			cmp #$10
  3947 9D37 B0 74			jcs l_0ACE
  3948
  3949 				; optimize OK (init.inc), line = 37
  3950
  3951 9D39 85 9D			sta :STACKORIGIN+9
  3952 9D3B A9 00			lda #$00
  3953 9D3D 06 9D			asl :STACKORIGIN+9
  3954 9D3F 2A				rol @
  3955 9D40 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3956 9D42 A9 22			lda #$22
  3957 9D44 85 9E			sta :STACKORIGIN+10
  3958 9D46 A9 37			lda #$37
  3959 9D48 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3960 9D4A A5 DE			lda MIDFILES.CTRK
  3961 9D4C 20 3C 89			jsr @mul40
  3962 9D4F 18 65 9E			add :STACKORIGIN+10
  3963 9D52 85 9E			sta :STACKORIGIN+10
  3964 9D54 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  3965 9D56 65 85			adc :eax+1
  3966 9D58 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3967 9D5A A5 9D			lda :STACKORIGIN+9
  3968 9D5C 18 69 00			add #$00
  3969 9D5F A8				tay
  3970 9D60 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  3971 9D62 69 00			adc #$00
  3972 9D64 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3973 9D66 A5 9E			lda :STACKORIGIN+10
  3974 9D68 99 D0 3B			sta adr.CHANNELSCRADR,y
  3975 9D6B A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  3976 9D6D 99 D1 3B			sta adr.CHANNELSCRADR+1,y
  3977
  3978 				; optimize OK (init.inc), line = 38
  3979
  3980 9D70 A5 DE			lda MIDFILES.CTRK
  3981 9D72 85 9D			sta :STACKORIGIN+9
  3982 9D74 A9 00			lda #$00
  3983 9D76 06 9D			asl :STACKORIGIN+9
  3984 9D78 2A				rol @
  3985 9D79 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3986 9D7B A9 28			lda #$28
  3987 9D7D 85 9E			sta :STACKORIGIN+10
  3988 9D7F A9 37			lda #$37
  3989 9D81 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3990 9D83 A5 DE			lda MIDFILES.CTRK
  3991 9D85 20 3C 89			jsr @mul40
  3992 9D88 18 65 9E			add :STACKORIGIN+10
  3993 9D8B 85 9E			sta :STACKORIGIN+10
  3994 9D8D A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  3995 9D8F 65 85			adc :eax+1
  3996 9D91 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3997 9D93 A5 9D			lda :STACKORIGIN+9
  3998 9D95 18 69 00			add #$00
  3999 9D98 A8				tay
  4000 9D99 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  4001 9D9B 69 00			adc #$00
  4002 9D9D 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  4003 9D9F A5 9E			lda :STACKORIGIN+10
  4004 9DA1 99 F0 3B			sta adr.PLAYLISTSCRADR,y
  4005 9DA4 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  4006 9DA6 99 F1 3B			sta adr.PLAYLISTSCRADR+1,y
  4007
  4008 				; --- ForToDoEpilog
  4009 9DA9 E6 DE			inc MIDFILES.CTRK
  4010 9DAB D0 86			jne l_0AC0
  4011 9DAD			l_0ACE
  4012
  4013 				; -------------------  ASM Block 00000107  -------------------
  4014
  4015 9DAD A5 14		    lda $14
  4016 9DAF C5 14		    cmp $14
  4017 9DB1 F0 FC		    beq *-2
  4018 				  
  4019 				; optimize FAIL ('RESETMEMORYPTR', init.inc), line = 48
  4020
  4021 9DB3 20 64 97			jsr RESETMEMORYPTR
  4022
  4023 				; optimize OK (init.inc), line = 49
  4024
  4025 9DB6 A5 14			lda _TM
  4026 9DB8 8D 10 3C			sta OTM
  4027
  4028 				; optimize FAIL ('SETCOLORS', init.inc), line = 50
  4029
  4030 9DBB 20 3D 95			jsr SETCOLORS
  4031 9DBE A9 22			lda #$22
  4032 9DC0 8D 00 D4			sta DMACTL
  4033 9DC3 A9 00			lda #$00
  4034 9DC5 85 41			sta SOUNDR
  4035
  4036 				; optimize OK (init.inc), line = 51
  4037
  4038 9DC7 A9 01			lda #$01
  4039 9DC9 8D 18 3C			sta ISSTOPPED
  4040
  4041 				; ------------------------------------------------------------
  4042
  4043 9DCC			@exit
  4044 					.ifdef @new
  4045 					lda <@VarData
  4046 					sta :ztmp
  4047 					lda >@VarData
  4048 					ldy #@VarDataSize-1
  4049 					jmp @FreeMem
  4050 					els
  4051 9DCC 60				rts						; ret
  4052 					eif
  4053 				.endl
  4054
  4055 9DCD			.local	LOADSONG					; FUNCTION
  4056
  4057 9DCD 4C 3E 9E			jmp l_0B15
  4058
  4059 9DD0			.local	LOADPRC						; PROCEDURE
  4060 9DD0 8D 37 3C			sta V
  4061
  4062 				; optimize OK (load.inc), line = 10
  4063
  4064 9DD3 AC 36 3C			ldy THI
  4065 9DD6 B9 28 81			lda adr.TH,y
  4066 9DD9 8D DC 39			sta $39DC
  4067
  4068 				; optimize FAIL (0, load.inc), line = 11
  4069
  4070 9DDC EE 36 3C			inc THI
  4071 9DDF AD 36 3C			lda THI
  4072 9DE2 C9 04			cmp #$04
  4073 9DE4 D0 05			jne l_0B36
  4074 9DE6 A9 00			lda #$00
  4075 9DE8 8D 36 3C			sta THI
  4076 9DEB			l_0B36
  4077
  4078 				; optimize OK (load.inc), line = 12
  4079
  4080 9DEB AD 37 3C			lda V
  4081 9DEE F0 4D			jeq l_0B4F
  4082
  4083 				; optimize OK (load.inc), line = 14
  4084
  4085 9DF0 A9 80			lda #$80
  4086 9DF2 8D 24 3C			sta PUTTEXTINVERT
  4087
  4088 				; optimize OK (load.inc), line = 15
  4089
  4090 9DF5 A9 E6			lda #$E6
  4091 9DF7 85 D4			sta SCRADR
  4092 9DF9 A9 39			lda #$39
  4093 9DFB 85 D5			sta SCRADR+1
  4094
  4095 				; optimize OK (load.inc), line = 16
  4096
  4097 9DFD AD 37 3C			lda V
  4098 9E00 38 E9 01			sub #$01
  4099 9E03 8D 2B 3C			sta PUTINT.VALUE
  4100 9E06 A9 00			lda #$00
  4101 9E08 E9 00			sbc #$00
  4102 9E0A 8D 2C 3C			sta PUTINT.VALUE+1
  4103 9E0D 20 79 96			jsr PUTINT
  4104 9E10 A4 D5			ldy SCRADR+1
  4105 9E12 84 81			sty :bp+1
  4106 9E14 A4 D4			ldy SCRADR
  4107 9E16 A9 8F			lda #$8F
  4108 9E18 91 80			sta (:bp),y
  4109 9E1A E6 D4			inc SCRADR
  4110 9E1C D0 02			sne
  4111 9E1E E6 D5			inc SCRADR+1
  4112
  4113 				; optimize OK (load.inc), line = 17
  4114
  4115 9E20 AD 79 3B			lda MIDFILES.TOTALTRACKS
  4116 9E23 8D 2B 3C			sta PUTINT.VALUE
  4117 9E26 A9 00			lda #$00
  4118 9E28 8D 2C 3C			sta PUTINT.VALUE+1
  4119 9E2B 20 79 96			jsr PUTINT
  4120
  4121 				; optimize OK (load.inc), line = 18
  4122
  4123 9E2E A4 D5			ldy SCRADR+1
  4124 9E30 84 81			sty :bp+1
  4125 9E32 A4 D4			ldy SCRADR
  4126 9E34 A9 CE			lda #$CE
  4127 9E36 91 80			sta (:bp),y
  4128
  4129 				; optimize OK (load.inc), line = 19
  4130
  4131 9E38 A9 00			lda #$00
  4132 9E3A 8D 24 3C			sta PUTTEXTINVERT
  4133 9E3D			l_0B4F
  4134
  4135 				; ------------------------------------------------------------
  4136
  4137 = 3C37			V	= DATAORIGIN+$00F7
  4138
  4139 = 3C37			@VarData	= V
  4140 = 0001			@VarDataSize	= 1
  4141
  4142 9E3D			@exit
  4143 					.ifdef @new
  4144 					lda <@VarData
  4145 					sta :ztmp
  4146 					lda >@VarData
  4147 					ldy #@VarDataSize-1
  4148 					jmp @FreeMem
  4149 					els
  4150 9E3D 60				rts						; ret
  4151 					eif
  4152 				.endl
  4153 9E3E			l_0B15
  4154
  4155 				; optimize FAIL ('CLEARSTATUS', load.inc), line = 24
  4156
  4157 9E3E 20 19 98			jsr CLEARSTATUS
  4158
  4159 				; optimize FAIL ('STATUSLOADING', load.inc), line = 25
  4160
  4161 9E41 20 67 9B			jsr STATUSLOADING
  4162
  4163 				; optimize OK (load.inc), line = 26
  4164
  4165 9E44 A9 D0			lda <LOADPRC
  4166 9E46 8D 92 3B			sta MIDFILES.LOADPROCESS
  4167 9E49 A9 9D			lda >LOADPRC
  4168 9E4B 8D 93 3B			sta MIDFILES.LOADPROCESS+1
  4169 9E4E A9 00			lda #$00
  4170 9E50 8D 36 3C			sta THI
  4171
  4172 				; optimize OK (load.inc), line = 27
  4173
  4174 9E53 AD 33 3C			lda FILENAME
  4175 9E56 8D 98 3B			sta MIDFILES.LOADMID.FN
  4176 9E59 AD 34 3C			lda FILENAME+1
  4177 9E5C 8D 99 3B			sta MIDFILES.LOADMID.FN+1
  4178 9E5F 20 98 8B			jsr MIDFILES.LOADMID
  4179 9E62 AD 9A 3B			lda MIDFILES.LOADMID.RESULT
  4180 9E65 8D 35 3C			sta RESULT
  4181
  4182 				; optimize FAIL ('CLEARSTATUS', load.inc), line = 28
  4183
  4184 9E68 20 19 98			jsr CLEARSTATUS
  4185
  4186 				; optimize OK (load.inc), line = 29
  4187
  4188 9E6B AD 35 3C			lda RESULT
  4189 9E6E 29 FC			and #$FC
  4190 9E70 F0 08			jeq l_0B9D
  4191
  4192 				; optimize OK (load.inc), line = 30
  4193
  4194 9E72 A9 00			lda #$00
  4195 9E74 8D 79 3B			sta MIDFILES.TOTALTRACKS
  4196 9E77 4C 95 9E			jmp l_0BAB
  4197 9E7A			l_0B9D
  4198
  4199 				; optimize OK (load.inc), line = 32
  4200
  4201 9E7A A9 00			lda #$00
  4202 9E7C 85 88			sta SYSTEM.MOVE_0164.SOURCE
  4203 9E7E A9 2E			lda #$2E
  4204 9E80 85 89			sta SYSTEM.MOVE_0164.SOURCE+1
  4205 9E82 A9 00			lda #$00
  4206 9E84 85 8C			sta SYSTEM.MOVE_0164.DEST
  4207 9E86 A9 2C			lda #$2C
  4208 9E88 85 8D			sta SYSTEM.MOVE_0164.DEST+1
  4209 9E8A A9 00			lda #$00
  4210 9E8C 85 84			sta SYSTEM.MOVE_0164.COUNT
  4211 9E8E A9 02			lda #$02
  4212 9E90 85 85			sta SYSTEM.MOVE_0164.COUNT+1
  4213 9E92				.local +MAIN.SYSTEM.MOVE_0164
  4214 9E92				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0164.M@INLINE [Source: MIDICar Player.a65]
     4 9E92 20 3B 83			jsr @move
Source: MIDICar Player.a65
  4215 					.endl
  4216 9E95			l_0BAB
  4217 9E95			@exit
  4218
  4219 				; ------------------------------------------------------------
  4220
  4221 = 3C33			FILENAME	= DATAORIGIN+$00F3
  4222 = 3C35			RESULT	= DATAORIGIN+$00F5
  4223 = 8128			adr.TH	= CODEORIGIN+$0128
  4224 9E95			.var TH	= adr.TH .word
  4225 = 3C36			THI	= DATAORIGIN+$00F6
  4226
  4227 = 3C33			@VarData	= FILENAME
  4228 = 0003			@VarDataSize	= 3
  4229
  4230 9E95 60				rts						; ret
  4231 = 9E96 28 81		TH
  4231 				.endl
  4232
  4233 9E98			.local	INPUTLINE					; FUNCTION
  4234
  4235 9E98 4C CF 9E			jmp l_0BB3
  4236
  4237 9E9B			.local	SHOWLINE					; PROCEDURE
  4238
  4239 				; optimize OK (inputline.inc), line = 10
  4240
  4241 9E9B AC 38 3C 84 82 AC + 	mwy LN :bp2
  4242 9EA5 A0 00			ldy #$00
  4243 9EA7 AD 3B 3C			lda POS
  4244 9EAA 91 82			sta (:bp2),y
  4245
  4246 				; optimize OK (inputline.inc), line = 11
  4247
  4248 9EAC AD 3D 3C			lda OSCRADR
  4249 9EAF 85 D4			sta SCRADR
  4250 9EB1 AD 3E 3C			lda OSCRADR+1
  4251 9EB4 85 D5			sta SCRADR+1
  4252
  4253 				; optimize OK (inputline.inc), line = 12
  4254
  4255 9EB6 A9 20			lda #$20
  4256 9EB8 20 A2 95			jsr PUTSPACES
  4257 9EBB E6 D4			inc SCRADR
  4258 9EBD D0 02			sne
  4259 9EBF E6 D5			inc SCRADR+1
  4260
  4261 				; optimize OK (inputline.inc), line = 13
  4262
  4263 9EC1 AD 38 3C			lda LN
  4264 9EC4 85 88			sta PUTASCTEXT.S
  4265 9EC6 AD 39 3C			lda LN+1
  4266 9EC9 85 89			sta PUTASCTEXT.S+1
  4267 9ECB 20 D9 95			jsr PUTASCTEXT
  4268 9ECE			@exit
  4269 					.ifdef @new
  4270 					lda <@VarData
  4271 					sta :ztmp
  4272 					lda >@VarData
  4273 					ldy #@VarDataSize-1
  4274 					jmp @FreeMem
  4275 					els
  4276 9ECE 60				rts						; ret
  4277 					eif
  4278 				.endl
  4279 9ECF			l_0BB3
  4280
  4281 				; optimize OK (inputline.inc), line = 17
  4282
  4283 9ECF AC 39 3C			ldy LN+1
  4284 9ED2 84 81			sty :bp+1
  4285 9ED4 AC 38 3C			ldy LN
  4286 9ED7 B1 80			lda (:bp),y
  4287 9ED9 8D 3B 3C			sta POS
  4288
  4289 				; optimize OK (inputline.inc), line = 18
  4290
  4291 9EDC A9 7F			lda #$7F
  4292 9EDE 38 ED 3B 3C			sub POS
  4293 9EE2 85 8C			sta SYSTEM.FILLCHAR_0163.COUNT
  4294 9EE4 A9 00			lda #$00
  4295 9EE6 E9 00			sbc #$00
  4296 9EE8 85 8D			sta SYSTEM.FILLCHAR_0163.COUNT+1
  4297 9EEA AD 3B 3C			lda POS
  4298 9EED 18 69 01			add #$01
  4299 9EF0 85 9F			sta :STACKORIGIN+11
  4300 9EF2 A9 00			lda #$00
  4301 9EF4 69 00			adc #$00
  4302 9EF6 85 AF			sta :STACKORIGIN+STACKWIDTH+11
  4303 9EF8 AD 38 3C			lda LN
  4304 9EFB 18 65 9F			add :STACKORIGIN+11
  4305 9EFE 85 88			sta SYSTEM.FILLCHAR_0163.X
  4306 9F00 AD 39 3C			lda LN+1
  4307 9F03 65 AF			adc :STACKORIGIN+STACKWIDTH+11
  4308 9F05 85 89			sta SYSTEM.FILLCHAR_0163.X+1
  4309 9F07 A9 9B			lda #$9B
  4310 9F09 85 84			sta SYSTEM.FILLCHAR_0163.VALUE
  4311 9F0B				.local +MAIN.SYSTEM.FILLCHAR_0163
  4312 9F0B				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0163.M@INLINE [Source: MIDICar Player.a65]
     4 9F0B 20 90 83			jsr @fill
Source: MIDICar Player.a65
  4313 					.endl
  4314
  4315 				; optimize OK (inputline.inc), line = 19
  4316
  4317 9F0E A9 FF			lda #$FF
  4318 9F10 8D FC 02			sta KEYB
  4319 9F13 A9 01			lda #$01
  4320 9F15 8D 40 3C			sta VCRS
  4321
  4322 				; optimize OK (inputline.inc), line = 20
  4323
  4324 9F18 A5 D4			lda SCRADR
  4325 9F1A 8D 3D 3C			sta OSCRADR
  4326 9F1D A5 D5			lda SCRADR+1
  4327 9F1F 8D 3E 3C			sta OSCRADR+1
  4328 9F22 20 9B 9E			jsr SHOWLINE
  4329 9F25 A5 14			lda _TM
  4330 9F27 8D 3F 3C			sta OTM
  4331
  4332 				; --- RepeatUntilProlog
  4333 9F2A			l_0BF4
  4334
  4335 				; optimize OK (inputline.inc), line = 22
  4336
  4337 9F2A A5 14			lda _TM
  4338 9F2C 38 ED 3F 3C			sub OTM
  4339 9F30 C9 0A			cmp #$0A
  4340 9F32 90 1D			jcc l_0C0C
  4341 9F34 F0 1B			jeq l_0C0C
  4342
  4343 				; optimize OK (inputline.inc), line = 24
  4344
  4345 9F36 A5 14			lda _TM
  4346 9F38 8D 3F 3C			sta OTM
  4347
  4348 				; optimize OK (inputline.inc), line = 25
  4349
  4350 9F3B AD 40 3C			lda VCRS
  4351 9F3E F0 05			jeq l_0C1F
  4352 9F40 A9 01			lda #$01
  4353 9F42 20 91 95			jsr INVERS
  4354 9F45			l_0C1F
  4355
  4356 				; optimize OK (inputline.inc), line = 26
  4357
  4358 9F45 A0 01			ldy #1
  4359 9F47 AD 40 3C			lda VCRS
  4360 9F4A F0 01			beq @+
  4361 9F4C 88				dey
  4362 				@
  4363 9F4D 98				tya
  4364 9F4E 8D 40 3C			sta VCRS
  4365 9F51			l_0C0C
  4366
  4367 				; optimize OK (inputline.inc), line = 28
  4368
  4369 9F51 AD FC 02			lda KEYB
  4370 9F54 C9 FF			cmp #$FF
  4371 9F56 D0 03			jne l_0C41
  4372 9F58 4C CC 9F			jmp c_0BF4					; continue
  4373 9F5B			l_0C41
  4374
  4375 				; optimize OK (inputline.inc), line = 30
  4376
  4377 9F5B AD FC 02			lda KEYB
  4378 9F5E C9 1C			cmp #$1C
  4379 9F60 D0 08			jne l_0C56
  4380 9F62 A9 00			lda #$00
  4381 9F64 8D 3A 3C			sta RESULT
  4382 9F67 4C CF 9F			jmp @exit					; exit
  4383 9F6A			l_0C56
  4384
  4385 				; optimize OK (inputline.inc), line = 31
  4386
  4387 9F6A AD 3B 3C			lda POS
  4388 9F6D F0 2A			jeq l_0C6F
  4389
  4390 				; optimize OK (inputline.inc), line = 33
  4391
  4392 9F6F AD FC 02			lda KEYB
  4393 9F72 C9 0C			cmp #$0C
  4394 9F74 D0 08			jne l_0C82
  4395 9F76 A9 01			lda #$01
  4396 9F78 8D 3A 3C			sta RESULT
  4397 9F7B 4C CF 9F			jmp @exit					; exit
  4398 9F7E			l_0C82
  4399
  4400 				; optimize OK (inputline.inc), line = 34
  4401
  4402 9F7E AD FC 02			lda KEYB
  4403 9F81 C9 34			cmp #$34
  4404 9F83 D0 14			jne l_0C9B
  4405
  4406 				; optimize OK (inputline.inc), line = 36
  4407
  4408 9F85 AC 38 3C 84 82 AC + 	mwy LN :bp2
  4409 9F8F AC 3B 3C			ldy POS
  4410 9F92 A9 9B			lda #$9B
  4411 9F94 91 82			sta (:bp2),y
  4412
  4413 				; optimize FAIL (0, inputline.inc), line = 37
  4414
  4415 9F96 CE 3B 3C			dec POS
  4416 9F99			l_0C9B
  4417 9F99			l_0C6F
  4418
  4419 				; optimize OK (inputline.inc), line = 40
  4420
  4421 9F99 AD 3B 3C			lda POS
  4422 9F9C C9 1E			cmp #$1E
  4423 9F9E B0 20			jcs l_0CBD
  4424
  4425 				; optimize OK (inputline.inc), line = 42
  4426
  4427 9FA0 AD FC 02			lda KEYB
  4428 9FA3 20 DA 94			jsr KEYSCAN2ASC
  4429 9FA6 AD 23 3C			lda KEYSCAN2ASC.RESULT
  4430 9FA9 8D 3C 3C			sta CH
  4431
  4432 				; optimize OK (inputline.inc), line = 43
  4433
  4434 9FAC F0 12			jeq l_0CD7
  4435
  4436 				; optimize FAIL (0, inputline.inc), line = 45
  4437
  4438 9FAE EE 3B 3C			inc POS
  4439
  4440 				; optimize OK (inputline.inc), line = 46
  4441
  4442 9FB1 AC 38 3C 84 82 AC + 	mwy LN :bp2
  4443 9FBB AC 3B 3C			ldy POS
  4444 9FBE 91 82			sta (:bp2),y
  4445 9FC0			l_0CD7
  4446 9FC0			l_0CBD
  4447
  4448 				; optimize FAIL ('SHOWLINE', inputline.inc), line = 49
  4449
  4450 9FC0 20 9B 9E			jsr SHOWLINE
  4451
  4452 				; optimize OK (inputline.inc), line = 50
  4453
  4454 9FC3 A9 FF			lda #$FF
  4455 9FC5 8D FC 02			sta KEYB
  4456
  4457 				; optimize OK (inputline.inc), line = 51
  4458
  4459 9FC8 A9 00			lda #$00
  4460 9FCA D0 03			bne *+5
  4461 9FCC			c_0BF4
  4462 9FCC 4C 2A 9F			jmp l_0BF4
  4463 9FCF			@exit
  4464
  4465 				; ------------------------------------------------------------
  4466
  4467 = 3C38			LN	= DATAORIGIN+$00F8
  4468 = 3C3A			RESULT	= DATAORIGIN+$00FA
  4469 = 3C3B			POS	= DATAORIGIN+$00FB
  4470 = 3C3C			CH	= DATAORIGIN+$00FC
  4471 = 3C3D			OSCRADR	= DATAORIGIN+$00FD
  4472 = 3C3F			OTM	= DATAORIGIN+$00FF
  4473 = 3C40			VCRS	= DATAORIGIN+$0100
  4474
  4475 = 3C38			@VarData	= LN
  4476 = 0008			@VarDataSize	= 8
  4477
  4478 9FCF 60				rts						; ret
  4479 				.endl
  4480
  4481 9FD0			.local	GETENTRY					; FUNCTION | ASSEMBLER | REGISTER
  4482
  4483 				; -------------------  ASM Block 00000108  -------------------
  4484
  4485 9FD0			  icl 'asms/playlist_getEntry.a65'
Source: playlist_getEntry.a65
     1 = 0088			hlpptr = $88;
     2
     3 9FD0			getEntry:
     4 9FD0 8A 48		  txa:pha
     5
     6 9FD2 A5 DA		  lda pls
     7 9FD4 8D E5 9F		  sta entryptr
     8 9FD7 A5 DB		  lda pls+1
     9 9FD9 8D E6 9F		  sta entryptr+1
    10
    11 9FDC A9 00		  lda #0
    12 9FDE 85 90		  sta result
    13
    14 9FE0 A2 03		  ldx #3
    15 9FE2 A0 01		  ldy #1
    16 9FE4			loop:
    17 9FE4 BD D0 07		  lda entryptr:2000,x
    18 9FE7 C9 9B		  cmp #$9B
    19 9FE9 F0 06		  beq endEntry
    20 9FEB 91 88		  sta (hlpptr),y
    21 9FED E8			  inx
    22 9FEE C8			  iny
    23 9FEF D0 F3		  bne loop
    24
    25 9FF1			endEntry:
    26 9FF1 A9 9B		  lda #$9B
    27 9FF3 91 88		  sta (hlpptr),y
    28
    29 9FF5 C0 01		  cpy #1
    30 9FF7 D0 03		  bne store
    31 9FF9 68 AA		  pla:tax
    32 9FFB 60			  rts
    33
    34 9FFC			store:
    35 9FFC 8A 48		  txa:pha
    36
    37 9FFE A9 01		  lda #1
    38 A000 85 90		  sta result
    39
    40 A002 68 AA		  pla:tax
    41 A004 38			  sec
    42 A005 E9 03		  sbc #3            // decease position by 3
    43 A007 A0 00		  ldy #0
    44 A009 91 88		  sta (hlpptr),y    // store as string length
    45
    46 A00B 68 AA		  pla:tax
  4486
  4487 A00D			@exit
  4488
  4489 				; ------------------------------------------------------------
  4490
  4491 = 0088			FN	= :EDX
  4492 = 0090			RESULT	= :STACKORIGIN-4
  4493 A00D 60				rts						; ret
  4494 				.endl
  4495
  4496 A00E			.local	GETENTRYSETS					; PROCEDURE | ASSEMBLER | REGISTER
  4497
  4498 				; -------------------  ASM Block 00000109  -------------------
  4499
  4500 A00E			  icl 'asms/playlist_getEntrySets.a65'
Source: playlist_getEntrySets.a65
     1 A00E			getEntrySets:
     2 = 0088			PTRREG = $88
     3
     4 A00E A0 02		    ldy #2
     5 A010			loop:
     6 A010 B1 DA		    lda (pls),y
     7 A012 91 88		    sta (PTRREG),y
     8 A014 88			    dey
     9 A015 10 F9		    bpl loop
  4501
  4502 				; ------------------------------------------------------------
  4503
  4504 = 0088			PTR	= :EDX
  4505 A017			@exit
  4506 					.ifdef @new
  4507 					lda <@VarData
  4508 					sta :ztmp
  4509 					lda >@VarData
  4510 					ldy #@VarDataSize-1
  4511 					jmp @FreeMem
  4512 					els
  4513 A017 60				rts						; ret
  4514 					eif
  4515 				.endl
  4516
  4517 A018			.local	NEXTENTRY					; FUNCTION | ASSEMBLER
  4518
  4519 				; -------------------  ASM Block 00000110  -------------------
  4520
  4521 A018			  icl 'asms/playlist_nextEntry.a65'
Source: playlist_nextEntry.a65
     1 A018			nextEntry:
     2 A018 A0 03		  ldy #3
     3 A01A			loop:
     4 A01A B1 DA		  lda (pls),y
     5 A01C C9 9B		  cmp #$9B
     6 A01E F0 03		  beq endEntry
     7 A020 C8			  iny
     8 A021 D0 F7		  bne loop
     9
    10 A023			endEntry:
    11 A023 C0 03		  cpy #3
    12 A025 D0 06		  bne moveEntryPtr
    13
    14 A027 A9 00		  lda #0
    15 A029 8D 41 3C		  sta result
    16 A02C 60			  rts
    17
    18 A02D			moveEntryPtr:
    19 A02D C8			  iny
    20 A02E 98			  tya
    21 A02F 18 65 DA		  add pls
    22 A032 85 DA		  sta pls
    23 A034 90 02 E6 DB		  scc:inc pls+1
    24
    25 A038 A9 01		  lda #1
    26 A03A 8D 41 3C		  sta result
  4522
  4523 A03D			@exit
  4524
  4525 				; ------------------------------------------------------------
  4526
  4527 = 3C41			RESULT	= DATAORIGIN+$0101
  4528 A03D 60				rts						; ret
  4529 				.endl
  4530
  4531 A03E			.local	GOTONENTRY					; PROCEDURE | ASSEMBLER
  4532 A03E 8D 42 3C			sta NENTRY
  4533
  4534 				; -------------------  ASM Block 00000111  -------------------
  4535
  4536 A041			  icl 'asms/playlist_gotoNEntry.a65'
Source: playlist_gotoNEntry.a65
     1 A041			gotoNEntry:
     2 A041 8A 48		    txa:pha
     3
     4 A043 A9 00		    lda #<PLAYLIST_ADDR
     5 A045 85 DA		    sta pls
     6 A047 A9 20		    lda #>PLAYLIST_ADDR
     7 A049 85 DB		    sta pls+1
     8
     9 A04B AE 42 3C		    ldx nEntry
    10 A04E F0 08		    beq exitGotoNEntry
    11
    12 A050			loop:
    13 A050 20 18 A0		    jsr nextEntry
    14 A053 F0 03		    beq exitGotoNEntry
    15 A055 CA			    dex
    16 A056 D0 F8		    bne loop
    17
    18 A058			exitGotoNEntry:
    19
    20 A058 68 AA		    pla:tax
  4537
  4538 				; ------------------------------------------------------------
  4539
  4540 = 3C42			NENTRY	= DATAORIGIN+$0102
  4541
  4542 = 3C42			@VarData	= NENTRY
  4543 = 0001			@VarDataSize	= 1
  4544
  4545 A05A			@exit
  4546 					.ifdef @new
  4547 					lda <@VarData
  4548 					sta :ztmp
  4549 					lda >@VarData
  4550 					ldy #@VarDataSize-1
  4551 					jmp @FreeMem
  4552 					els
  4553 A05A 60				rts						; ret
  4554 					eif
  4555 				.endl
  4556
  4557 A05B			.local	ADDTOPLAYLIST					; PROCEDURE | ASSEMBLER | REGISTER
  4558
  4559 				; -------------------  ASM Block 00000112  -------------------
  4560
  4561 A05B			  icl 'asms/playlist_addToPlaylist.a65'
Source: playlist_addToPlaylist.a65
     1 = 0088			ptrreg = $88;
     2
     3 A05B 8A 48		  txa:pha
     4
     5 A05D A0 00		  ldy #0
     6 A05F B1 88		  lda (ptrreg),y
     7 A061 18 69 01		  add #1
     8 A064 8D 8C A0		  sta fnlen
     9
    10 A067 A0 00		  ldy #0
    11 A069 A5 E1		  lda MAIN.MIDFILES._bank
    12 A06B 91 DA		  sta (pls),y
    13 A06D C8			  iny
    14 A06E A5 E2		  lda MAIN.MIDFILES._adr
    15 A070 91 DA		  sta (pls),y
    16 A072 C8			  iny
    17 A073 A5 E3		  lda MAIN.MIDFILES._adr+1
    18 A075 91 DA		  sta (pls),y
    19 A077 C8			  iny
    20
    21 A078 A5 88		  lda ptrreg
    22 A07A 8D 85 A0		  sta eptr
    23 A07D A5 89		  lda ptrreg+1
    24 A07F 8D 86 A0		  sta eptr+1
    25
    26 A082 A2 01		  ldx #1
    27 A084			loop:
    28 A084 BD 00 20		  lda eptr:$2000,x
    29 A087 91 DA		  sta (pls),y
    30 A089 C8			  iny
    31 A08A E8			  inx
    32 A08B E0 00		  cpx fnlen:#00
    33 A08D 30 F5		  bmi loop
    34
    35 A08F			storeEOFN:
    36 A08F A9 9B		  lda #$9B
    37 A091 91 DA		  sta (pls),y
    38 A093 C8			  iny
    39
    40 A094 98			  tya
    41 A095 18 65 DA		  add pls
    42 A098 85 DA		  sta pls
    43 A09A 90 02 E6 DB		  scc:inc pls+1
    44
    45 A09E EE 15 3C		  inc totalFiles
    46
    47 A0A1 68 AA		  pla:tax
  4562
  4563 				; ------------------------------------------------------------
  4564
  4565 = 0088			ENTRY	= :EDX
  4566 A0A3			@exit
  4567 					.ifdef @new
  4568 					lda <@VarData
  4569 					sta :ztmp
  4570 					lda >@VarData
  4571 					ldy #@VarDataSize-1
  4572 					jmp @FreeMem
  4573 					els
  4574 A0A3 60				rts						; ret
  4575 					eif
  4576 				.endl
  4577
  4578 A0A4			.local	FILESELECT					; FUNCTION
  4579
  4580 				; optimize OK (fileselect.inc), line = 10
  4581
  4582 A0A4 A9 F8			lda #$F8
  4583 A0A6 85 D4			sta SCRADR
  4584 A0A8 A9 36			lda #$36
  4585 A0AA 85 D5			sta SCRADR+1
  4586 A0AC 20 44 97			jsr HLINE
  4587
  4588 				; optimize OK (fileselect.inc), line = 11
  4589
  4590 A0AF A9 14			lda #$14
  4591 A0B1 85 D4			sta SCRADR
  4592 A0B3 A9 37			lda #$37
  4593 A0B5 85 D5			sta SCRADR+1
  4594 A0B7 A9 FA			lda #$FA
  4595 A0B9 85 88			sta PUTINTTEXT.S
  4596 A0BB A9 80			lda #$80
  4597 A0BD 85 89			sta PUTINTTEXT.S+1
  4598 A0BF 20 B0 95			jsr PUTINTTEXT
  4599
  4600 				; optimize FAIL ('CLEARPLAYLIST', fileselect.inc), line = 13
  4601
  4602 A0C2 20 85 97			jsr CLEARPLAYLIST
  4603
  4604 				; optimize OK (fileselect.inc), line = 14
  4605
  4606 A0C5 A9 FF			lda #$FF
  4607 A0C7 85 E2			sta MIDFILES._ADR
  4608 A0C9 85 E3			sta MIDFILES._ADR+1
  4609 A0CB A9 FE			lda #$FE
  4610 A0CD 85 E1			sta MIDFILES._BANK
  4611 A0CF AD 43 3C			lda PATH
  4612 A0D2 85 88			sta ADDTOPLAYLIST.ENTRY
  4613 A0D4 AD 44 3C			lda PATH+1
  4614 A0D7 85 89			sta ADDTOPLAYLIST.ENTRY+1
  4615 A0D9 20 5B A0			jsr ADDTOPLAYLIST
  4616
  4617 				; optimize FAIL ('STATUSREADDIRECTORY', fileselect.inc), line = 15
  4618
  4619 A0DC 20 7B 9B			jsr STATUSREADDIRECTORY
  4620
  4621 				; optimize OK (fileselect.inc), line = 17
  4622
  4623 A0DF A9 02			lda #$02
  4624 A0E1 8D 6F 3B			sta CIO.OPN.CHN
  4625 A0E4 A9 06			lda #$06
  4626 A0E6 8D 70 3B			sta CIO.OPN.AX1
  4627 A0E9 A9 00			lda #$00
  4628 A0EB 8D 71 3B			sta CIO.OPN.AX2
  4629 A0EE AD 43 3C			lda PATH
  4630 A0F1 8D 72 3B			sta CIO.OPN.DEVICE
  4631 A0F4 AD 44 3C			lda PATH+1
  4632 A0F7 8D 73 3B			sta CIO.OPN.DEVICE+1
  4633 A0FA 20 9B 8A			jsr CIO.OPN
  4634
  4635 				; --- WhileProlog
  4636 A0FD 4C B6 A1			jmp l_0D1C
  4637 A100			l_0D1D
  4638
  4639 				; optimize OK (fileselect.inc), line = 20
  4640
  4641 A100 A9 02			lda #$02
  4642 A102 85 88			sta GETLN.CHN
  4643 A104 AD CC A1			lda DENTRY
  4644 A107 85 8C			sta GETLN.BUF
  4645 A109 AD CD A1			lda DENTRY+1
  4646 A10C 85 8D			sta GETLN.BUF+1
  4647 A10E 20 FC 99			jsr GETLN
  4648
  4649 				; optimize OK (fileselect.inc), line = 21
  4650
  4651 A111 AD 47 3C			lda adr.DENTRY+$01
  4652 A114 C9 30			cmp #$30
  4653 A116 90 03			jcc l_0D34
  4654 A118 4C C0 A1			jmp b_0D1D					; break
  4655 A11B			l_0D34
  4656
  4657 				; optimize OK (fileselect.inc), line = 22
  4658
  4659 A11B AD CC A1			lda DENTRY
  4660 A11E 85 88			sta REDUCEFILENAME.INFN
  4661 A120 AD CD A1			lda DENTRY+1
  4662 A123 85 89			sta REDUCEFILENAME.INFN+1
  4663 A125 AD 7D A7			lda FN
  4664 A128 85 8C			sta REDUCEFILENAME.OUTFN
  4665 A12A AD 7E A7			lda FN+1
  4666 A12D 85 8D			sta REDUCEFILENAME.OUTFN+1
  4667 A12F 20 67 99			jsr REDUCEFILENAME
  4668
  4669 				; optimize OK (fileselect.inc), line = 23
  4670
  4671 A132 AD 7D A7			lda FN
  4672 A135 85 88			sta GETFILEEXT.FN
  4673 A137 AD 7E A7			lda FN+1
  4674 A13A 85 89			sta GETFILEEXT.FN+1
  4675 A13C 20 2C 99			jsr GETFILEEXT
  4676 A13F A5 90			lda GETFILEEXT.RESULT
  4677 A141 8D 5B 3C			sta EXT
  4678 A144 A5 91			lda GETFILEEXT.RESULT+1
  4679 A146 8D 5C 3C			sta EXT+1
  4680 A149 A5 92			lda GETFILEEXT.RESULT+2
  4681 A14B 8D 5D 3C			sta EXT+2
  4682 A14E A5 93			lda GETFILEEXT.RESULT+3
  4683 A150 8D 5E 3C			sta EXT+3
  4684
  4685 				; optimize OK (fileselect.inc), line = 24
  4686
  4687 A153 AD 48 3C			lda adr.DENTRY+$02
  4688 A156 C9 3A			cmp #$3A
  4689 A158 D0 03			jne l_0D55
  4690 A15A 4C B6 A1			jmp c_0D1D					; continue
  4691 A15D			l_0D55
  4692
  4693 				; optimize OK (fileselect.inc), line = 25
  4694
  4695 A15D AD 58 3C			lda adr.DENTRY+$12
  4696 A160 C9 3E			cmp #$3E
  4697 A162 D0 03			jne l_0D6B
  4698 A164 4C B6 A1			jmp c_0D1D					; continue
  4699 A167			l_0D6B
  4700
  4701 				; optimize OK (fileselect.inc), line = 26
  4702
  4703 A167 AD 5E 3C			lda EXT+3
  4704 A16A C9 A4			cmp #$A4
  4705 A16C D0 11			bne @+
  4706 A16E AD 5D 3C			lda EXT+2
  4707 A171 C9 A9			cmp #$A9
  4708 A173 D0 0A			bne @+
  4709 A175 AD 5C 3C			lda EXT+1
  4710 A178 C9 B2			cmp #$B2
  4711 A17A D0 03			bne @+
  4712 A17C AD 5B 3C			lda EXT
  4713 				@
  4714 A17F D0 03			jne l_0D7E
  4715 A181 4C B6 A1			jmp c_0D1D					; continue
  4716 A184			l_0D7E
  4717
  4718 				; optimize OK (fileselect.inc), line = 27
  4719
  4720 A184 AD 5E 3C			lda EXT+3
  4721 A187 C9 50			cmp #$50
  4722 A189 D0 11			bne @+
  4723 A18B AD 5D 3C			lda EXT+2
  4724 A18E C9 4C			cmp #$4C
  4725 A190 D0 0A			bne @+
  4726 A192 AD 5C 3C			lda EXT+1
  4727 A195 C9 53			cmp #$53
  4728 A197 D0 03			bne @+
  4729 A199 AD 5B 3C			lda EXT
  4730 				@
  4731 A19C D0 07			jne l_0D91
  4732
  4733 				; optimize OK (fileselect.inc), line = 28
  4734
  4735 A19E A9 FD			lda #$FD
  4736 A1A0 85 E1			sta MIDFILES._BANK
  4737 A1A2 4C A9 A1			jmp l_0D9F
  4738 A1A5			l_0D91
  4739
  4740 				; optimize OK (fileselect.inc), line = 30
  4741
  4742 A1A5 A9 FF			lda #$FF
  4743 A1A7 85 E1			sta MIDFILES._BANK
  4744 A1A9			l_0D9F
  4745
  4746 				; optimize OK (fileselect.inc), line = 32
  4747
  4748 A1A9 AD 7D A7			lda FN
  4749 A1AC 85 88			sta ADDTOPLAYLIST.ENTRY
  4750 A1AE AD 7E A7			lda FN+1
  4751 A1B1 85 89			sta ADDTOPLAYLIST.ENTRY+1
  4752 A1B3 20 5B A0			jsr ADDTOPLAYLIST
  4753 A1B6			c_0D1D
  4754 A1B6			l_0D1C
  4755
  4756 				; optimize OK (fileselect.inc), line = 18
  4757
  4758 A1B6 AD 47 3B			lda SYSTEM.IORESULT
  4759 A1B9 C9 01			cmp #$01
  4760 A1BB D0 03 4C 00 A1		jeq l_0D1D
  4761 A1C0			b_0D1D
  4762
  4763 				; optimize OK (fileselect.inc), line = 34
  4764
  4765 A1C0 AD 47 3B			lda SYSTEM.IORESULT
  4766 A1C3 8D 45 3C			sta RESULT
  4767
  4768 				; optimize OK (fileselect.inc), line = 35
  4769
  4770 A1C6 A9 02			lda #$02
  4771 A1C8 20 D9 8A			jsr CIO.CLS
  4772 A1CB			@exit
  4773
  4774 				; ------------------------------------------------------------
  4775
  4776 = 3C43			PATH	= DATAORIGIN+$0103
  4777 = 3C45			RESULT	= DATAORIGIN+$0105
  4778 = 0002			CIO_CHN	= $02
  4779 = 3C46			adr.DENTRY	= [DATAORIGIN+$0106] .array [21]
  4780 A1CB			.var DENTRY	= adr.DENTRY .word
  4781 = 3C5B			EXT	= DATAORIGIN+$011B
  4782
  4783 = 3C43			@VarData	= PATH
  4784 = 001B			@VarDataSize	= 27
  4785
  4786 A1CB 60				rts						; ret
  4787 = A1CC 46 3C		DENTRY
  4787 				.endl
  4788
  4789 A1CE			.local	LOADPLAYLIST					; FUNCTION
  4790
  4791 				; optimize OK (playlist.inc), line = 6
  4792
  4793 A1CE A9 F8			lda #$F8
  4794 A1D0 85 D4			sta SCRADR
  4795 A1D2 A9 36			lda #$36
  4796 A1D4 85 D5			sta SCRADR+1
  4797 A1D6 20 44 97			jsr HLINE
  4798
  4799 				; optimize OK (playlist.inc), line = 7
  4800
  4801 A1D9 A9 16			lda #$16
  4802 A1DB 85 D4			sta SCRADR
  4803 A1DD A9 37			lda #$37
  4804 A1DF 85 D5			sta SCRADR+1
  4805 A1E1 A9 07			lda #$07
  4806 A1E3 85 88			sta PUTINTTEXT.S
  4807 A1E5 A9 81			lda #$81
  4808 A1E7 85 89			sta PUTINTTEXT.S+1
  4809 A1E9 20 B0 95			jsr PUTINTTEXT
  4810
  4811 				; optimize OK (playlist.inc), line = 9
  4812
  4813 A1EC A9 00			lda #$00
  4814 A1EE 20 3E A0			jsr GOTONENTRY
  4815 A1F1 AD 7D A7			lda FN
  4816 A1F4 85 88			sta GETENTRY.FN
  4817 A1F6 AD 7E A7			lda FN+1
  4818 A1F9 85 89			sta GETENTRY.FN+1
  4819 A1FB 20 D0 9F			jsr GETENTRY
  4820 A1FE A5 90 95 95			mva GETENTRY.RESULT :STACKORIGIN+1,x
  4821
  4822 				; optimize FAIL ('CLEARPLAYLIST', playlist.inc), line = 10
  4823
  4824 A202 20 85 97			jsr CLEARPLAYLIST
  4825
  4826 				; optimize OK (playlist.inc), line = 11
  4827
  4828 A205 A9 FF			lda #$FF
  4829 A207 85 E2			sta MIDFILES._ADR
  4830 A209 85 E3			sta MIDFILES._ADR+1
  4831 A20B A9 FE			lda #$FE
  4832 A20D 85 E1			sta MIDFILES._BANK
  4833 A20F AD 7D A7			lda FN
  4834 A212 85 88			sta ADDTOPLAYLIST.ENTRY
  4835 A214 AD 7E A7			lda FN+1
  4836 A217 85 89			sta ADDTOPLAYLIST.ENTRY+1
  4837 A219 20 5B A0			jsr ADDTOPLAYLIST
  4838
  4839 				; optimize OK (playlist.inc), line = 12
  4840
  4841 A21C AD 5F 3C			lda PLSFILENAME
  4842 A21F 85 88			sta @move.src
  4843 A221 AD 60 3C			lda PLSFILENAME+1
  4844 A224 85 89			sta @move.src+1
  4845 					@moveSTRING FN #128
  4845 				 MWA FN @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  4845 A226 AD 7D A7 85 8C AD +  MWA FN @MOVE.DST
  4845 A230 A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  4845 A238 20 D8 83		 JSR @MOVESTRING
  4846 A23B 20 19 98			jsr CLEARSTATUS
  4847
  4848 				; optimize FAIL ('STATUSREADPLAYLIST', playlist.inc), line = 13
  4849
  4850 A23E 20 8F 9B			jsr STATUSREADPLAYLIST
  4851
  4852 				; optimize OK (playlist.inc), line = 15
  4853
  4854 A241 A9 01			lda #$01
  4855 A243 8D 6F 3B			sta CIO.OPN.CHN
  4856 A246 A9 04			lda #$04
  4857 A248 8D 70 3B			sta CIO.OPN.AX1
  4858 A24B A9 00			lda #$00
  4859 A24D 8D 71 3B			sta CIO.OPN.AX2
  4860 A250 AD 5F 3C			lda PLSFILENAME
  4861 A253 8D 72 3B			sta CIO.OPN.DEVICE
  4862 A256 AD 60 3C			lda PLSFILENAME+1
  4863 A259 8D 73 3B			sta CIO.OPN.DEVICE+1
  4864 A25C 20 9B 8A			jsr CIO.OPN
  4865
  4866 				; optimize OK (playlist.inc), line = 16
  4867
  4868 A25F A9 00			lda #$00
  4869 A261 85 E1			sta MIDFILES._BANK
  4870 A263 85 E2			sta MIDFILES._ADR
  4871 A265 85 E3			sta MIDFILES._ADR+1
  4872
  4873 				; --- WhileProlog
  4874 A267 4C 90 A2			jmp l_0DEE
  4875 A26A			l_0DEF
  4876
  4877 				; optimize OK (playlist.inc), line = 19
  4878
  4879 A26A A9 01			lda #$01
  4880 A26C 85 88			sta GETLN.CHN
  4881 A26E AD 7F A7			lda OUTSTR
  4882 A271 85 8C			sta GETLN.BUF
  4883 A273 AD 80 A7			lda OUTSTR+1
  4884 A276 85 8D			sta GETLN.BUF+1
  4885 A278 20 FC 99			jsr GETLN
  4886
  4887 				; optimize OK (playlist.inc), line = 20
  4888
  4889 A27B CE 80 05			dec adr.OUTSTR+$00
  4890
  4891 				; optimize OK (playlist.inc), line = 21
  4892
  4893 A27E D0 03			jne l_0E08
  4894 A280 4C 90 A2			jmp c_0DEF					; continue
  4895 A283			l_0E08
  4896
  4897 				; optimize OK (playlist.inc), line = 22
  4898
  4899 A283 AD 7F A7			lda OUTSTR
  4900 A286 85 88			sta ADDTOPLAYLIST.ENTRY
  4901 A288 AD 80 A7			lda OUTSTR+1
  4902 A28B 85 89			sta ADDTOPLAYLIST.ENTRY+1
  4903 A28D 20 5B A0			jsr ADDTOPLAYLIST
  4904 A290			c_0DEF
  4905 A290			l_0DEE
  4906
  4907 				; optimize OK (playlist.inc), line = 17
  4908
  4909 A290 AD 47 3B			lda SYSTEM.IORESULT
  4910 A293 C9 01			cmp #$01
  4911 A295 F0 D3			jeq l_0DEF
  4912
  4913 				; optimize OK (playlist.inc), line = 24
  4914
  4915 A297 8D 61 3C			sta RESULT
  4916
  4917 				; optimize OK (playlist.inc), line = 25
  4918
  4919 A29A A9 01			lda #$01
  4920 A29C 20 D9 8A			jsr CIO.CLS
  4921 A29F			@exit
  4922
  4923 				; ------------------------------------------------------------
  4924
  4925 = 3C5F			PLSFILENAME	= DATAORIGIN+$011F
  4926 = 3C61			RESULT	= DATAORIGIN+$0121
  4927 = 0001			CIO_CHN	= $01
  4928
  4929 = 3C5F			@VarData	= PLSFILENAME
  4930 = 0002			@VarDataSize	= 2
  4931
  4932 A29F 60				rts						; ret
  4933 				.endl
  4934
  4935 A2A0			.local	SHOWPLAYLIST					; PROCEDURE
  4936
  4937 				; optimize OK (playlist.inc), line = 30
  4938
  4939 A2A0 A9 00			lda #$00
  4940 A2A2 8D 11 3C			sta CHN
  4941
  4942 				; --- WhileProlog
  4943 A2A5 4C FD A2			jmp l_0E2C
  4944 A2A8			l_0E2D
  4945
  4946 				; optimize OK (playlist.inc), line = 33
  4947
  4948 A2A8 AD 11 3C			lda CHN
  4949 A2AB 0A				asl @
  4950 A2AC A8				tay
  4951 A2AD B9 F0 3B			lda adr.PLAYLISTSCRADR,y
  4952 A2B0 85 D4			sta SCRADR
  4953 A2B2 B9 F1 3B			lda adr.PLAYLISTSCRADR+1,y
  4954 A2B5 85 D5			sta SCRADR+1
  4955
  4956 				; optimize OK (playlist.inc), line = 34
  4957
  4958 A2B7 A9 20			lda #$20
  4959 A2B9 20 A2 95			jsr PUTSPACES
  4960
  4961 				; optimize FAIL (0, playlist.inc), line = 35
  4962
  4963 A2BC E6 D4			inc SCRADR
  4964 A2BE D0 02			sne
  4965 A2C0 E6 D5			inc SCRADR+1
  4966
  4967 				; optimize OK (playlist.inc), line = 36
  4968
  4969 A2C2 AD 7D A7			lda FN
  4970 A2C5 85 88			sta GETENTRY.FN
  4971 A2C7 AD 7E A7			lda FN+1
  4972 A2CA 85 89			sta GETENTRY.FN+1
  4973 A2CC 20 D0 9F			jsr GETENTRY
  4974 A2CF A5 90			lda GETENTRY.RESULT
  4975 A2D1 F0 1C			jeq l_0E47
  4976
  4977 				; optimize OK (playlist.inc), line = 38
  4978
  4979 A2D3 AD 00 05			lda adr.FN+$00
  4980 A2D6 C9 1F			cmp #$1F
  4981 A2D8 90 05			jcc l_0E5B
  4982 A2DA A9 1E			lda #$1E
  4983 A2DC 8D 00 05			sta adr.FN+$00
  4984 A2DF			l_0E5B
  4985
  4986 				; optimize OK (playlist.inc), line = 39
  4987
  4988 A2DF AD 7D A7			lda FN
  4989 A2E2 85 88			sta PUTASCTEXT.S
  4990 A2E4 AD 7E A7			lda FN+1
  4991 A2E7 85 89			sta PUTASCTEXT.S+1
  4992 A2E9 20 D9 95			jsr PUTASCTEXT
  4993 A2EC 4C F2 A2			jmp l_0E6F
  4994 A2EF			l_0E47
  4995 A2EF 4C 04 A3			jmp b_0E2D					; break
  4996 A2F2			l_0E6F
  4997
  4998 				; optimize FAIL (0, playlist.inc), line = 43
  4999
  5000 A2F2 EE 11 3C			inc CHN
  5001
  5002 				; optimize FAIL ('NEXTENTRY', playlist.inc), line = 44
  5003
  5004 A2F5 20 18 A0			jsr NEXTENTRY
  5005 A2F8 AD 41 3C 95 95		mva NEXTENTRY.RESULT :STACKORIGIN+1,x
  5006 A2FD			l_0E2C
  5007
  5008 				; optimize OK (playlist.inc), line = 31
  5009
  5010 A2FD AD 11 3C			lda CHN
  5011 A300 C9 10			cmp #$10
  5012 A302 90 A4			jcc l_0E2D
  5013 A304			b_0E2D
  5014 A304			@exit
  5015 					.ifdef @new
  5016 					lda <@VarData
  5017 					sta :ztmp
  5018 					lda >@VarData
  5019 					ldy #@VarDataSize-1
  5020 					jmp @FreeMem
  5021 					els
  5022 A304 60				rts						; ret
  5023 					eif
  5024 				.endl
  5025
  5026 A305			.local	CHOICEPLAYLISTFILE				; PROCEDURE
  5027
  5028 				; optimize FAIL ('STATUSSTOPPED', playlist.inc), line = 56
  5029
  5030 A305 20 05 9B			jsr STATUSSTOPPED
  5031
  5032 				; optimize OK (playlist.inc), line = 57
  5033
  5034 A308 AD 14 3C			lda CURFILE
  5035 A30B 20 3E A0			jsr GOTONENTRY
  5036
  5037 				; optimize OK (playlist.inc), line = 58
  5038
  5039 A30E AD 7D A7			lda FN
  5040 A311 85 88			sta GETENTRY.FN
  5041 A313 AD 7E A7			lda FN+1
  5042 A316 85 89			sta GETENTRY.FN+1
  5043 A318 20 D0 9F			jsr GETENTRY
  5044 A31B A5 90			lda GETENTRY.RESULT
  5045 A31D D0 03			jne l_0E98
  5046 A31F 4C EF A4			jmp @exit					; exit
  5047 A322			l_0E98
  5048
  5049 				; optimize OK (playlist.inc), line = 59
  5050
  5051 A322 A9 62			lda <P_BANK
  5052 A324 85 88			sta GETENTRYSETS.PTR
  5053 A326 A9 3C			lda >P_BANK
  5054 A328 85 89			sta GETENTRYSETS.PTR+1
  5055 A32A 20 0E A0			jsr GETENTRYSETS
  5056
  5057 				; optimize OK (playlist.inc), line = 61
  5058
  5059 A32D AD 7D A7			lda FN
  5060 A330 85 88			sta GETDEVICESPEC.FN
  5061 A332 AD 7E A7			lda FN+1
  5062 A335 85 89			sta GETDEVICESPEC.FN+1
  5063 A337 AD F0 A4			lda DEV
  5064 A33A 85 8C			sta GETDEVICESPEC.SPEC
  5065 A33C AD F1 A4			lda DEV+1
  5066 A33F 85 8D			sta GETDEVICESPEC.SPEC+1
  5067 A341 20 AB 99			jsr GETDEVICESPEC
  5068
  5069 				; optimize FAIL ('cmpSTRING', playlist.inc), line = 62
  5070
  5071 A344 E8				inx
  5072 A345 AD F0 A4 95 94		mva DEV :STACKORIGIN,x
  5073 A34A AD F1 A4 95 A4		mva DEV+1 :STACKORIGIN+STACKWIDTH,x
  5074 A34F E8				inx
  5075 A350 A9 00 95 94			mva #$00 :STACKORIGIN,x
  5076 A354 A9 80 95 A4			mva #$80 :STACKORIGIN+STACKWIDTH,x
  5077 A358 A0 01			ldy #1
  5078 A35A 20 BE 82			jsr cmpSTRING
  5079 A35D F0 01			beq @+
  5080 A35F 88				dey
  5081 				@
  5082 A360 CA				dex
  5083 A361 CA				dex
  5084 A362 98				tya
  5085 A363 F0 39			jeq l_0EB3
  5086
  5087 				; optimize OK (playlist.inc), line = 64
  5088
  5089 A365 AD 7B A7			lda CURDEV
  5090 A368 85 88			sta @move.src
  5091 A36A AD 7C A7			lda CURDEV+1
  5092 A36D 85 89			sta @move.src+1
  5093 					@moveSTRING DEV #4
  5093 				 MWA DEV @MOVE.DST\ MWA #4 @MOVE.CNT\ JSR @MOVESTRING
  5093 A36F AD F0 A4 85 8C AD +  MWA DEV @MOVE.DST
  5093 A379 A9 04 85 84 A9 00 +  MWA #4 @MOVE.CNT
  5093 A381 20 D8 83		 JSR @MOVESTRING
  5094 A384 AD F0 A4			lda DEV
  5095 A387 85 88			sta JOINSTRINGS.S1
  5096 A389 AD F1 A4			lda DEV+1
  5097 A38C 85 89			sta JOINSTRINGS.S1+1
  5098 A38E AD 7D A7			lda FN
  5099 A391 85 8C			sta JOINSTRINGS.S2
  5100 A393 AD 7E A7			lda FN+1
  5101 A396 85 8D			sta JOINSTRINGS.S2+1
  5102 A398 20 CC 99			jsr JOINSTRINGS
  5103 A39B 4C BD A3			jmp l_0EC4
  5104 A39E			l_0EB3
  5105
  5106 				; optimize OK (playlist.inc), line = 67
  5107
  5108 A39E AD 7D A7			lda FN
  5109 A3A1 85 88			sta @move.src
  5110 A3A3 AD 7E A7			lda FN+1
  5111 A3A6 85 89			sta @move.src+1
  5112 					@moveSTRING OUTSTR #128
  5112 				 MWA OUTSTR @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  5112 A3A8 AD 7F A7 85 8C AD +  MWA OUTSTR @MOVE.DST
  5112 A3B2 A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  5112 A3BA 20 D8 83		 JSR @MOVESTRING
  5113 A3BD			l_0EC4
  5114
  5115 				; optimize OK (playlist.inc), line = 69
  5116
  5117 A3BD AD 62 3C			lda P_BANK
  5118 A3C0 C9 FD			cmp #$FD
  5119 A3C2 D0 15			jne l_0ED8
  5120 A3C4 AD 7F A7			lda OUTSTR
  5121 A3C7 8D 5F 3C			sta LOADPLAYLIST.PLSFILENAME
  5122 A3CA AD 80 A7			lda OUTSTR+1
  5123 A3CD 8D 60 3C			sta LOADPLAYLIST.PLSFILENAME+1
  5124 A3D0 20 CE A1			jsr LOADPLAYLIST
  5125 A3D3 AD 61 3C			lda LOADPLAYLIST.RESULT
  5126 A3D6 8D 47 3B			sta SYSTEM.IORESULT
  5127 A3D9			l_0ED8
  5128
  5129 				; optimize OK (playlist.inc), line = 70
  5130
  5131 A3D9 AD 62 3C			lda P_BANK
  5132 A3DC C9 FE			cmp #$FE
  5133 A3DE F0 03 4C A3 A4		jne l_0EF3
  5134
  5135 				; optimize OK (playlist.inc), line = 72
  5136
  5137 A3E3 AD 12 3C			lda YFILE
  5138 A3E6 0A				asl @
  5139 A3E7 A8				tay
  5140 A3E8 B9 F0 3B			lda adr.PLAYLISTSCRADR,y
  5141 A3EB 85 D4			sta SCRADR
  5142 A3ED B9 F1 3B			lda adr.PLAYLISTSCRADR+1,y
  5143 A3F0 85 D5			sta SCRADR+1
  5144
  5145 				; -------------------  ASM Block 00000113  -------------------
  5146
  5147 A3F2 AD 17 3C		      lda firstTime
  5148 A3F5 D0 1C		      bne goFileSelector
  5149 				    
  5150 				; optimize OK (playlist.inc), line = 78
  5151
  5152 A3F7 AD 7F A7			lda OUTSTR
  5153 A3FA 8D 38 3C			sta INPUTLINE.LN
  5154 A3FD AD 80 A7			lda OUTSTR+1
  5155 A400 8D 39 3C			sta INPUTLINE.LN+1
  5156 A403 20 98 9E			jsr INPUTLINE
  5157 A406 AD 3A 3C 95 95		mva INPUTLINE.RESULT :STACKORIGIN+1,x
  5158
  5159 				; -------------------  ASM Block 00000114  -------------------
  5160
  5161 A40B AD 3A 3C		      lda MAIN.INPUTLINE.Result
  5162 A40E D0 03		      bne goFileSelector
  5163 A410 4C 84 A4		      jmp skip
  5164 A413			    goFileSelector:
  5165 				    
  5166 				; optimize OK (playlist.inc), line = 86
  5167
  5168 A413 AD 7F A7			lda OUTSTR
  5169 A416 85 88			sta GETDEVICESPEC.FN
  5170 A418 AD 80 A7			lda OUTSTR+1
  5171 A41B 85 89			sta GETDEVICESPEC.FN+1
  5172 A41D AD F0 A4			lda DEV
  5173 A420 85 8C			sta GETDEVICESPEC.SPEC
  5174 A422 AD F1 A4			lda DEV+1
  5175 A425 85 8D			sta GETDEVICESPEC.SPEC+1
  5176 A427 20 AB 99			jsr GETDEVICESPEC
  5177
  5178 				; optimize FAIL ('cmpSTRING', playlist.inc), line = 87
  5179
  5180 A42A E8				inx
  5181 A42B AD F0 A4 95 94		mva DEV :STACKORIGIN,x
  5182 A430 AD F1 A4 95 A4		mva DEV+1 :STACKORIGIN+STACKWIDTH,x
  5183 A435 E8				inx
  5184 A436 A9 00 95 94			mva #$00 :STACKORIGIN,x
  5185 A43A A9 80 95 A4			mva #$80 :STACKORIGIN+STACKWIDTH,x
  5186 A43E A0 01			ldy #1
  5187 A440 20 BE 82			jsr cmpSTRING
  5188 A443 D0 01			bne @+
  5189 A445 88				dey
  5190 				@
  5191 A446 CA				dex
  5192 A447 CA				dex
  5193 A448 98				tya
  5194 A449 F0 1F			jeq l_0F15
  5195 A44B AD F0 A4			lda DEV
  5196 A44E 85 88			sta @move.src
  5197 A450 AD F1 A4			lda DEV+1
  5198 A453 85 89			sta @move.src+1
  5199 					@moveSTRING CURDEV #4
  5199 				 MWA CURDEV @MOVE.DST\ MWA #4 @MOVE.CNT\ JSR @MOVESTRING
  5199 A455 AD 7B A7 85 8C AD +  MWA CURDEV @MOVE.DST
  5199 A45F A9 04 85 84 A9 00 +  MWA #4 @MOVE.CNT
  5199 A467 20 D8 83		 JSR @MOVESTRING
  5200 A46A			l_0F15
  5201
  5202 				; optimize OK (playlist.inc), line = 88
  5203
  5204 A46A AD 7F A7			lda OUTSTR
  5205 A46D 8D 43 3C			sta FILESELECT.PATH
  5206 A470 AD 80 A7			lda OUTSTR+1
  5207 A473 8D 44 3C			sta FILESELECT.PATH+1
  5208 A476 20 A4 A0			jsr FILESELECT
  5209 A479 AD 45 3C			lda FILESELECT.RESULT
  5210 A47C 8D 47 3B			sta SYSTEM.IORESULT
  5211
  5212 				; optimize OK (playlist.inc), line = 89
  5213
  5214 A47F A9 00			lda #$00
  5215 A481 8D 17 3C			sta FIRSTTIME
  5216
  5217 				; -------------------  ASM Block 00000115  -------------------
  5218
  5219 A484			      skip:
  5220 				    
  5221 				; optimize OK (playlist.inc), line = 94
  5222
  5223 A484 AD 7F A7			lda OUTSTR
  5224 A487 85 88			sta @move.src
  5225 A489 AD 80 A7			lda OUTSTR+1
  5226 A48C 85 89			sta @move.src+1
  5227 					@moveSTRING FN #128
  5227 				 MWA FN @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  5227 A48E AD 7D A7 85 8C AD +  MWA FN @MOVE.DST
  5227 A498 A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  5227 A4A0 20 D8 83		 JSR @MOVESTRING
  5228 A4A3			l_0EF3
  5229
  5230 				; optimize OK (playlist.inc), line = 96
  5231
  5232 A4A3 AD 62 3C			lda P_BANK
  5233 A4A6 C9 FF			cmp #$FF
  5234 A4A8 D0 24			jne l_0F3A
  5235
  5236 				; optimize OK (playlist.inc), line = 98
  5237
  5238 A4AA AD 1D 3C			lda LAST_BANK
  5239 A4AD 85 E1			sta MIDFILES._BANK
  5240
  5241 				; optimize OK (playlist.inc), line = 99
  5242
  5243 A4AF AD 1E 3C			lda LAST_ADR
  5244 A4B2 85 E2			sta MIDFILES._ADR
  5245 A4B4 AD 1F 3C			lda LAST_ADR+1
  5246 A4B7 85 E3			sta MIDFILES._ADR+1
  5247
  5248 				; optimize OK (playlist.inc), line = 100
  5249
  5250 A4B9 AD 7F A7			lda OUTSTR
  5251 A4BC 8D 33 3C			sta LOADSONG.FILENAME
  5252 A4BF AD 80 A7			lda OUTSTR+1
  5253 A4C2 8D 34 3C			sta LOADSONG.FILENAME+1
  5254 A4C5 20 CD 9D			jsr LOADSONG
  5255 A4C8 AD 35 3C			lda LOADSONG.RESULT
  5256 A4CB 8D 47 3B			sta SYSTEM.IORESULT
  5257 A4CE			l_0F3A
  5258
  5259 				; optimize OK (playlist.inc), line = 102
  5260
  5261 A4CE A9 FF			lda #$FF
  5262 A4D0 8D FC 02			sta KEYB
  5263
  5264 				; optimize FAIL ('CLEARSTATUS', playlist.inc), line = 104
  5265
  5266 A4D3 20 19 98			jsr CLEARSTATUS
  5267
  5268 				; optimize OK (playlist.inc), line = 105
  5269
  5270 A4D6 AD 13 3C			lda SHFILE
  5271 A4D9 20 3E A0			jsr GOTONENTRY
  5272
  5273 				; optimize FAIL ('SHOWPLAYLIST', playlist.inc), line = 106
  5274
  5275 A4DC 20 A0 A2			jsr SHOWPLAYLIST
  5276
  5277 				; optimize FAIL ('DRAWPLAYLISTSELECTION', playlist.inc), line = 107
  5278
  5279 A4DF 20 DC 97			jsr DRAWPLAYLISTSELECTION
  5280
  5281 				; optimize OK (playlist.inc), line = 108
  5282
  5283 A4E2 AD 47 3B			lda SYSTEM.IORESULT
  5284 A4E5 29 FC			and #$FC
  5285 A4E7 F0 06			jeq l_0F6F
  5286 A4E9 AD 47 3B			lda SYSTEM.IORESULT
  5287 A4EC 20 A1 9B			jsr STATUSERROR
  5288 A4EF			l_0F6F
  5289
  5290 				; ------------------------------------------------------------
  5291
  5292 = 3C62			P_BANK	= DATAORIGIN+$0122
  5293 = 3C63			P_ADR	= DATAORIGIN+$0123
  5294 = 3C65			ISENTRY	= DATAORIGIN+$0125
  5295 = 3C66			adr.DEV	= [DATAORIGIN+$0126] .array [4]
  5296 A4EF			.var DEV	= adr.DEV .word
  5297
  5298 = 3C62			@VarData	= P_BANK
  5299 = 0008			@VarDataSize	= 8
  5300
  5301 A4EF			@exit
  5302 					.ifdef @new
  5303 					lda <@VarData
  5304 					sta :ztmp
  5305 					lda >@VarData
  5306 					ldy #@VarDataSize-1
  5307 					jmp @FreeMem
  5308 					els
  5309 A4EF 60				rts						; ret
  5310 					eif
  5311 = A4F0 66 3C		DEV
  5311 				.endl
  5312 A4F2			l_011F
  5313
  5314 				; optimize FAIL ('INIT', MIDICar Player.pas), line = 49
  5315
  5316 A4F2 20 25 9C			jsr INIT
  5317
  5318 				; optimize OK (MIDICar Player.pas), line = 58
  5319
  5320 A4F5 AD 7B A7			lda CURDEV
  5321 A4F8 85 88			sta JOINSTRINGS.S1
  5322 A4FA AD 7C A7			lda CURDEV+1
  5323 A4FD 85 89			sta JOINSTRINGS.S1+1
  5324 A4FF A9 13			lda #$13
  5325 A501 85 8C			sta JOINSTRINGS.S2
  5326 A503 A9 81			lda #$81
  5327 A505 85 8D			sta JOINSTRINGS.S2+1
  5328 A507 20 CC 99			jsr JOINSTRINGS
  5329
  5330 				; optimize OK (MIDICar Player.pas), line = 59
  5331
  5332 A50A A9 00			lda #$00
  5333 A50C 20 3E A0			jsr GOTONENTRY
  5334
  5335 				; optimize OK (MIDICar Player.pas), line = 60
  5336
  5337 A50F A9 FF			lda #$FF
  5338 A511 85 E2			sta MIDFILES._ADR
  5339 A513 85 E3			sta MIDFILES._ADR+1
  5340 A515 A9 FE			lda #$FE
  5341 A517 85 E1			sta MIDFILES._BANK
  5342 A519 AD 7F A7			lda OUTSTR
  5343 A51C 85 88			sta ADDTOPLAYLIST.ENTRY
  5344 A51E AD 80 A7			lda OUTSTR+1
  5345 A521 85 89			sta ADDTOPLAYLIST.ENTRY+1
  5346 A523 20 5B A0			jsr ADDTOPLAYLIST
  5347
  5348 				; optimize FAIL ('CHOICEPLAYLISTFILE', MIDICar Player.pas), line = 61
  5349
  5350 A526 20 05 A3			jsr CHOICEPLAYLISTFILE
  5351
  5352 				; optimize FAIL ('SETNMI', MIDICar Player.pas), line = 65
  5353
  5354 A529 20 A2 94			jsr SETNMI
  5355
  5356 				; optimize FAIL ('CLEARUVMETERS', MIDICar Player.pas), line = 67
  5357
  5358 A52C 20 FE 98			jsr CLEARUVMETERS
  5359
  5360 				; --- RepeatUntilProlog
  5361 A52F			l_0F8D
  5362
  5363 				; optimize FAIL ('MIDFILES.PROCESSMIDI', MIDICar Player.pas), line = 71
  5364
  5365 A52F 20 32 93			jsr MIDFILES.PROCESSMIDI
  5366
  5367 				; optimize OK (MIDICar Player.pas), line = 72
  5368
  5369 A532 AD 18 3C			lda ISSTOPPED
  5370 A535 D0 10			jne l_0FA9
  5371 A537 A5 DF			lda MIDFILES.PLAYINGTRACKS
  5372 A539 D0 0C			jne l_0FA9
  5373
  5374 				; optimize FAIL ('STATUSSTOPPED', MIDICar Player.pas), line = 74
  5375
  5376 A53B 20 05 9B			jsr STATUSSTOPPED
  5377
  5378 				; optimize OK (MIDICar Player.pas), line = 75
  5379
  5380 A53E A5 4A			lda PLAYERSTATUS
  5381 A540 29 04			and #$04
  5382 A542 F0 03			jeq l_0FC1
  5383
  5384 				; optimize FAIL ('STATUSPLAYING', MIDICar Player.pas), line = 76
  5385
  5386 A544 20 65 9A			jsr STATUSPLAYING
  5387 A547			l_0FC1
  5388 A547			l_0FA9
  5389
  5390 				; optimize OK (MIDICar Player.pas), line = 79
  5391
  5392 A547 A5 14			lda _TM
  5393 A549 CD 10 3C			cmp OTM
  5394 A54C F0 63			jeq l_0FDB
  5395
  5396 				; optimize OK (MIDICar Player.pas), line = 81
  5397
  5398 A54E 8D 10 3C			sta OTM
  5399
  5400 				; optimize OK (MIDICar Player.pas), line = 82
  5401
  5402 A551 A9 D3			lda #$D3
  5403 A553 85 D4			sta SCRADR
  5404 A555 A9 39			lda #$39
  5405 A557 85 D5			sta SCRADR+1
  5406 A559 A9 F0			lda <MIDFILES._TOTALTICKS
  5407 A55B 8D 28 3C			sta PUTHEX.V
  5408 A55E A9 00			lda >MIDFILES._TOTALTICKS
  5409 A560 8D 29 3C			sta PUTHEX.V+1
  5410 A563 A9 08			lda #$08
  5411 A565 8D 2A 3C			sta PUTHEX.N
  5412 A568 20 0A 96			jsr PUTHEX
  5413
  5414 				; -------------------  ASM Block 00000116  -------------------
  5415
  5416 A56B			  icl 'asms/uvmeters.a65' 
Source: uvmeters.a65
     1 = 00D6			hlpptr = $D6
     2 A56B A5 4A		  lda playerStatus
     3 A56D 29 02		  and #ps_view
     4 A56F F0 40		  beq dontUpdateUVMeter
     5
     6 A571			updateUVMeter:
     7 A571 8A 48		  txa:pha
     8
     9 A573 A2 00		  ldx #0
    10 A575			uvmeterLoop:
    11 A575 BD 80 3B		  lda MIDFILES.adr.CHNVOLUME,x
    12 A578 F0 30		  beq dontUpdate
    13
    14 A57A C9 04		  cmp #4
    15 A57C 10 04		  bpl decVol
    16 A57E A9 00		  lda #0
    17 A580 F0 03		  beq storeVol
    18 A582			decVol:
    19 A582 38 E9 04		  sub #4
    20 A585			storeVol:
    21 A585 9D 80 3B		  sta MIDFILES.adr.CHNVOLUME,x
    22
    23 A588 4A			  lsr @
    24 A589 29 3C		  and #%00111100
    25
    26 A58B 18 69 00		  add #<UVMETER_ADDR
    27 A58E 85 D6		  sta hlpptr
    28 A590 A9 3B		  lda #>UVMETER_ADDR
    29 A592 85 D7		  sta hlpptr+1
    30
    31 A594 8A			  txa
    32 A595 0A			  asl @
    33 A596 A8			  tay
    34 A597 B9 D0 3B		  lda adr.CHANNELSCRADR,y
    35 A59A 85 D4		  sta scradr
    36 A59C B9 D1 3B		  lda adr.CHANNELSCRADR+1,y
    37 A59F 85 D5		  sta scradr+1
    38
    39 A5A1 A0 03		  ldy #3
    40 A5A3			loop:
    41 A5A3 B1 D6		  lda (hlpptr),y
    42 A5A5 91 D4		  sta (scradr),y
    43 A5A7 88			  dey
    44 A5A8 10 F9		  bpl loop
    45
    46 A5AA			dontUpdate:
    47 A5AA E8			  inx
    48 A5AB E0 10		  cpx #16
    49 A5AD D0 C6		  bne uvmeterLoop
    50
    51 A5AF 68 AA		  pla:tax
    52 A5B1			dontUpdateUVMeter
  5417 A5B1			l_0FDB
  5418
  5419 				; optimize OK (keyboard.inc), line = 1
  5420
  5421 A5B1 AD FC 02			lda KEYB
  5422 A5B4 C9 FF			cmp #$FF
  5423 A5B6 D0 03 4C 55 A7		jeq l_0FFD
  5424
  5425 				; optimize OK (keyboard.inc), line = 3
  5426
  5427 A5BB 8D 6A 3C			sta @CASETMP_0004
  5428 A5BE C9 1C			cmp #$1C
  5429 A5C0 D0 06			jne l_1009
  5430 				@
  5431 A5C2 4C 58 A7			jmp b_0F8D					; break
  5432
  5433 A5C5 4C 50 A7			jmp a_0004
  5434 A5C8			l_1009
  5435 A5C8 C9 0C			cmp #$0C
  5436 A5CA D0 06			jne l_1012
  5437 				@
  5438
  5439 				; optimize FAIL ('CHOICEPLAYLISTFILE', keyboard.inc), line = 5
  5440
  5441 A5CC 20 05 A3			jsr CHOICEPLAYLISTFILE
  5442 A5CF 4C 50 A7			jmp a_0004
  5443 A5D2			l_1012
  5444 A5D2 C9 0E			cmp #$0E
  5445 A5D4 F0 07			beq @+
  5446 A5D6 C9 0F			cmp #$0F
  5447 A5D8 F0 03 4C 8E A6		jne l_101E
  5448 				@
  5449
  5450 				; optimize FAIL ('DRAWPLAYLISTSELECTION', keyboard.inc), line = 8
  5451
  5452 A5DD 20 DC 97			jsr DRAWPLAYLISTSELECTION
  5453
  5454 				; optimize OK (keyboard.inc), line = 9
  5455
  5456 A5E0 A9 00			lda #$00
  5457 A5E2 8D 16 3C			sta V
  5458
  5459 				; optimize OK (keyboard.inc), line = 10
  5460
  5461 A5E5 AD FC 02			lda KEYB
  5462 A5E8 C9 0E			cmp #$0E
  5463 A5EA D0 15			jne l_1035
  5464
  5465 				; optimize OK (keyboard.inc), line = 12
  5466
  5467 A5EC AD 12 3C			lda YFILE
  5468 A5EF F0 06			jeq l_1048
  5469
  5470 				; optimize FAIL (0, keyboard.inc), line = 13
  5471
  5472 A5F1 CE 12 3C			dec YFILE
  5473 A5F4 4C 01 A6			jmp l_1056
  5474 A5F7			l_1048
  5475
  5476 				; optimize OK (keyboard.inc), line = 15
  5477
  5478 A5F7 AD 13 3C			lda SHFILE
  5479 A5FA F0 05			jeq l_1068
  5480 A5FC A9 FF			lda #$FF
  5481 A5FE 8D 16 3C			sta V
  5482 A601			l_1068
  5483 A601			l_1056
  5484 A601			l_1035
  5485
  5486 				; optimize OK (keyboard.inc), line = 17
  5487
  5488 A601 AD FC 02			lda KEYB
  5489 A604 C9 0F			cmp #$0F
  5490 A606 D0 55			jne l_1083
  5491
  5492 				; optimize OK (keyboard.inc), line = 19
  5493
  5494 A608 AD 12 3C			lda YFILE
  5495 A60B C9 0F			cmp #$0F
  5496 A60D B0 06			jcs l_1096
  5497
  5498 				; optimize FAIL (0, keyboard.inc), line = 20
  5499
  5500 A60F EE 12 3C			inc YFILE
  5501 A612 4C 5D A6			jmp l_10A4
  5502 A615			l_1096
  5503
  5504 				; optimize OK (keyboard.inc), line = 22
  5505
  5506 A615 AD 15 3C			lda TOTALFILES
  5507 A618 38 ED 12 3C			sub YFILE
  5508 A61C 85 9E			sta :STACKORIGIN+10
  5509 A61E A9 00			lda #$00
  5510 A620 E9 00			sbc #$00
  5511 A622 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  5512 A624 A9 00			lda #$00
  5513 A626 E9 00			sbc #$00
  5514 A628 85 BE			sta :STACKORIGIN+STACKWIDTH*2+10
  5515 A62A A9 00			lda #$00
  5516 A62C E9 00			sbc #$00
  5517 A62E 85 CE			sta :STACKORIGIN+STACKWIDTH*3+10
  5518 A630 A5 9E			lda :STACKORIGIN+10
  5519 A632 38 E9 01			sub #$01
  5520 A635 85 9E			sta :STACKORIGIN+10
  5521 A637 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  5522 A639 E9 00			sbc #$00
  5523 A63B 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  5524 A63D A5 BE			lda :STACKORIGIN+STACKWIDTH*2+10
  5525 A63F E9 00			sbc #$00
  5526 A641 85 BE			sta :STACKORIGIN+STACKWIDTH*2+10
  5527 A643 A5 CE			lda :STACKORIGIN+STACKWIDTH*3+10
  5528 A645 E9 00			sbc #$00
  5529 A647 D0 0D			bne @+
  5530 A649 A5 BE			lda :STACKORIGIN+STACKWIDTH*2+10
  5531 A64B D0 09			bne @+
  5532 A64D A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  5533 A64F D0 05			bne @+
  5534 A651 AD 13 3C			lda SHFILE
  5535 A654 C5 9E			cmp :STACKORIGIN+10
  5536 				@
  5537 A656 B0 05			jcs l_10C2
  5538 A658 A9 01			lda #$01
  5539 A65A 8D 16 3C			sta V
  5540 A65D			l_10C2
  5541 A65D			l_10A4
  5542 A65D			l_1083
  5543
  5544 				; optimize OK (keyboard.inc), line = 24
  5545
  5546 A65D AD 16 3C			lda V
  5547 A660 F0 10			jeq l_10DD
  5548
  5549 				; optimize OK (keyboard.inc), line = 26
  5550
  5551 A662 AD 13 3C			lda SHFILE
  5552 A665 18 6D 16 3C			add V
  5553 A669 8D 13 3C			sta SHFILE
  5554
  5555 				; optimize OK (keyboard.inc), line = 27
  5556
  5557 A66C 20 3E A0			jsr GOTONENTRY
  5558
  5559 				; optimize FAIL ('SHOWPLAYLIST', keyboard.inc), line = 28
  5560
  5561 A66F 20 A0 A2			jsr SHOWPLAYLIST
  5562 A672			l_10DD
  5563
  5564 				; optimize OK (keyboard.inc), line = 30
  5565
  5566 A672 AD 13 3C			lda SHFILE
  5567 A675 18 6D 12 3C			add YFILE
  5568 A679 8D 14 3C			sta CURFILE
  5569
  5570 				; optimize OK (keyboard.inc), line = 31
  5571
  5572 A67C CD 15 3C			cmp TOTALFILES
  5573 A67F 90 07			jcc l_1108
  5574 A681 AC 15 3C			ldy TOTALFILES
  5575 A684 88				dey
  5576 A685 8C 14 3C			sty CURFILE
  5577 A688			l_1108
  5578
  5579 				; optimize FAIL ('DRAWPLAYLISTSELECTION', keyboard.inc), line = 35
  5580
  5581 A688 20 DC 97			jsr DRAWPLAYLISTSELECTION
  5582
  5583 A68B 4C 50 A7			jmp a_0004
  5584 A68E			l_101E
  5585 A68E C9 00			cmp #$00
  5586 A690 D0 0C			jne l_111F
  5587 				@
  5588
  5589 				; optimize OK (keyboard.inc), line = 39
  5590
  5591 A692 A5 4A			lda PLAYERSTATUS
  5592 A694 49 04			eor #$04
  5593 A696 85 4A			sta PLAYERSTATUS
  5594
  5595 				; optimize FAIL ('ISLOOPED', keyboard.inc), line = 40
  5596
  5597 A698 20 F1 97			jsr ISLOOPED
  5598
  5599 A69B 4C 50 A7			jmp a_0004
  5600 A69E			l_111F
  5601 A69E C9 25			cmp #$25
  5602 A6A0 D0 0C			jne l_1133
  5603 				@
  5604
  5605 				; optimize FAIL ('CLEARUVMETERS', keyboard.inc), line = 44
  5606
  5607 A6A2 20 FE 98			jsr CLEARUVMETERS
  5608
  5609 				; optimize OK (keyboard.inc), line = 45
  5610
  5611 A6A5 A5 4A			lda PLAYERSTATUS
  5612 A6A7 49 02			eor #$02
  5613 A6A9 85 4A			sta PLAYERSTATUS
  5614
  5615 A6AB 4C 50 A7			jmp a_0004
  5616 A6AE			l_1133
  5617 A6AE C9 27			cmp #$27
  5618 A6B0 D0 0C			jne l_1147
  5619 				@
  5620
  5621 				; optimize OK (keyboard.inc), line = 50
  5622
  5623 A6B2 A5 4A			lda PLAYERSTATUS
  5624 A6B4 49 01			eor #$01
  5625 A6B6 85 4A			sta PLAYERSTATUS
  5626
  5627 				; optimize FAIL ('SETCOLORS', keyboard.inc), line = 51
  5628
  5629 A6B8 20 3D 95			jsr SETCOLORS
  5630
  5631 A6BB 4C 50 A7			jmp a_0004
  5632 A6BE			l_1147
  5633 A6BE C9 0A			cmp #$0A
  5634 A6C0 D0 10			jne l_115B
  5635 				@
  5636
  5637 				; optimize OK (keyboard.inc), line = 55
  5638
  5639 A6C2 A5 F5			lda MIDFILES._TIMERSTATUS
  5640 A6C4 10 06			jpl l_1171
  5641
  5642 				; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 57
  5643
  5644 A6C6 20 65 9A			jsr STATUSPLAYING
  5645 A6C9 4C CF A6			jmp l_117C
  5646 A6CC			l_1171
  5647
  5648 				; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 58
  5649
  5650 A6CC 20 D0 9A			jsr STATUSPAUSE
  5651 A6CF			l_117C
  5652
  5653 A6CF 4C 50 A7			jmp a_0004
  5654 A6D2			l_115B
  5655 A6D2 C9 3E			cmp #$3E
  5656 A6D4 D0 06			jne l_1186
  5657 				@
  5658
  5659 				; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 60
  5660
  5661 A6D6 20 05 9B			jsr STATUSSTOPPED
  5662 A6D9 4C 50 A7			jmp a_0004
  5663 A6DC			l_1186
  5664 A6DC C9 34			cmp #$34
  5665 A6DE F0 08			beq @+
  5666 A6E0 C9 36			cmp #$36
  5667 A6E2 F0 04			beq @+
  5668 A6E4 C9 37			cmp #$37
  5669 A6E6 D0 68			jne l_1194
  5670 				@
  5671
  5672 				; optimize OK (keyboard.inc), line = 63
  5673
  5674 A6E8 AD FC 02			lda KEYB
  5675 A6EB C9 36			cmp #$36
  5676 A6ED D0 21			jne l_11A6
  5677 A6EF AD 94 3B			lda MIDFILES.TEMPOSHIFT
  5678 A6F2 18 69 20			add #$20
  5679 A6F5 8D 94 3B			sta MIDFILES.TEMPOSHIFT
  5680 A6F8 AD 95 3B			lda MIDFILES.TEMPOSHIFT+1
  5681 A6FB 69 4E			adc #$4E
  5682 A6FD 8D 95 3B			sta MIDFILES.TEMPOSHIFT+1
  5683 A700 AD 96 3B			lda MIDFILES.TEMPOSHIFT+2
  5684 A703 69 00			adc #$00
  5685 A705 8D 96 3B			sta MIDFILES.TEMPOSHIFT+2
  5686 A708 AD 97 3B			lda MIDFILES.TEMPOSHIFT+3
  5687 A70B 69 00			adc #$00
  5688 A70D 8D 97 3B			sta MIDFILES.TEMPOSHIFT+3
  5689 A710			l_11A6
  5690
  5691 				; optimize OK (keyboard.inc), line = 64
  5692
  5693 A710 AD FC 02			lda KEYB
  5694 A713 C9 37			cmp #$37
  5695 A715 D0 21			jne l_11BC
  5696 A717 AD 94 3B			lda MIDFILES.TEMPOSHIFT
  5697 A71A 38 E9 20			sub #$20
  5698 A71D 8D 94 3B			sta MIDFILES.TEMPOSHIFT
  5699 A720 AD 95 3B			lda MIDFILES.TEMPOSHIFT+1
  5700 A723 E9 4E			sbc #$4E
  5701 A725 8D 95 3B			sta MIDFILES.TEMPOSHIFT+1
  5702 A728 AD 96 3B			lda MIDFILES.TEMPOSHIFT+2
  5703 A72B E9 00			sbc #$00
  5704 A72D 8D 96 3B			sta MIDFILES.TEMPOSHIFT+2
  5705 A730 AD 97 3B			lda MIDFILES.TEMPOSHIFT+3
  5706 A733 E9 00			sbc #$00
  5707 A735 8D 97 3B			sta MIDFILES.TEMPOSHIFT+3
  5708 A738			l_11BC
  5709
  5710 				; optimize OK (keyboard.inc), line = 65
  5711
  5712 A738 AD FC 02			lda KEYB
  5713 A73B C9 34			cmp #$34
  5714 A73D D0 0E			jne l_11D2
  5715 A73F A9 00			lda #$00
  5716 A741 8D 94 3B			sta MIDFILES.TEMPOSHIFT
  5717 A744 8D 95 3B			sta MIDFILES.TEMPOSHIFT+1
  5718 A747 8D 96 3B			sta MIDFILES.TEMPOSHIFT+2
  5719 A74A 8D 97 3B			sta MIDFILES.TEMPOSHIFT+3
  5720 A74D			l_11D2
  5721
  5722 				; optimize FAIL ('MIDFILES.SETTEMPO', keyboard.inc), line = 66
  5723
  5724 A74D 20 E9 8E			jsr MIDFILES.SETTEMPO
  5725
  5726 A750			l_1194
  5727 A750			a_0004
  5728
  5729 				; optimize OK (keyboard.inc), line = 69
  5730
  5731 A750 A9 FF			lda #$FF
  5732 A752 8D FC 02			sta KEYB
  5733 A755			l_0FFD
  5734
  5735 				; optimize OK (MIDICar Player.pas), line = 88
  5736
  5737 A755 4C 2F A5			jmp l_0F8D
  5738 A758			b_0F8D
  5739
  5740 				; optimize FAIL ('UNSETNMI', MIDICar Player.pas), line = 91
  5741
  5742 A758 20 C3 94			jsr UNSETNMI
  5743
  5744 				; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 93
  5745
  5746 A75B 20 3C 9A			jsr EXIT2DOS
  5747
  5748 				; ------------------------------------------------------------
  5749
  5750 = 3000			CHARS_ADDR	= $3000
  5751 = 3400			SCREEN_ADDR	= $3400
  5752 = 36F8			SCREEN_WORK	= $36F8
  5753 = 39C8			SCREEN_TIME	= $39C8
  5754 = 39DC			SCREEN_STATUS	= $39DC
  5755 = 3A04			SCREEN_FOOT	= $3A04
  5756 = 3B00			UVMETER_ADDR	= $3B00
  5757 = 3FB7			DLIST_ADDR	= $3FB7
  5758 = 2000			PLAYLIST_ADDR	= $2000
  5759 = 2C00			START_INFO_ADDR	= $2C00
  5760 = 2E00			TRACK_DATA_ADDR	= $2E00
  5761 = 4000			MIDI_DATA_ADDR	= $4000
  5762 = 0023			FREE_MEM	= $23
  5763 = 0020			F_CLEAR	= $20
  5764 = 0001			PS_COLORSET	= $01
  5765 = 0002			PS_VIEW	= $02
  5766 = 0004			PS_LOOP	= $04
  5767 = 001E			PLAYLIST_VISIBLE_CHARS	= $1E
  5768 = 504C5300		FE_PLS	= $504C5300
  5769 = A4A9B200		FE_DIR	= $A4A9B200
  5770 = 3BD0			adr.CHANNELSCRADR	= [DATAORIGIN+$0090] .array [16] .word
  5771 A75E			.var CHANNELSCRADR	= adr.CHANNELSCRADR .word
  5772 = 3BF0			adr.PLAYLISTSCRADR	= [DATAORIGIN+$00B0] .array [16] .word
  5773 A75E			.var PLAYLISTSCRADR	= adr.PLAYLISTSCRADR .word
  5774 = 004A			PLAYERSTATUS	= $4A
  5775 = 004B			TOTALXMS	= $4B
  5776 = 00D4			SCRADR	= $D4
  5777 = 00D8			MCBASEADDR	= $D8
  5778 = 00DA			PLS	= $DA
  5779 = 0014			_TM	= $14
  5780 = 3C10			OTM	= DATAORIGIN+$00D0
  5781 = 3C11			CHN	= DATAORIGIN+$00D1
  5782 = 3C12			YFILE	= DATAORIGIN+$00D2
  5783 = 3C13			SHFILE	= DATAORIGIN+$00D3
  5784 = 3C14			CURFILE	= DATAORIGIN+$00D4
  5785 = 3C15			TOTALFILES	= DATAORIGIN+$00D5
  5786 = 3C16			V	= DATAORIGIN+$00D6
  5787 = 3C17			FIRSTTIME	= DATAORIGIN+$00D7
  5788 = 3C18			ISSTOPPED	= DATAORIGIN+$00D8
  5789 = 3C19			adr.CURDEV	= [DATAORIGIN+$00D9] .array [4]
  5790 A75E			.var CURDEV	= adr.CURDEV .word
  5791 = 0500			adr.FN	= $0500
  5792 A75E			.var FN	= adr.FN .word
  5793 = 0580			adr.OUTSTR	= $0580
  5794 A75E			.var OUTSTR	= adr.OUTSTR .word
  5795 = 3C1D			LAST_BANK	= DATAORIGIN+$00DD
  5796 = 3C1E			LAST_ADR	= DATAORIGIN+$00DE
  5797 = D40E			NMIEN	= $D40E
  5798 = FFFA			NMIVEC	= $FFFA
  5799 = 3C20			OLDNMIVEC	= DATAORIGIN+$00E0
  5800 = 8118			adr.COLORS	= CODEORIGIN+$0118
  5801 A75E			.var COLORS	= adr.COLORS .word
  5802 = 8122			adr.GM_RESET	= CODEORIGIN+$0122
  5803 A75E			.var GM_RESET	= adr.GM_RESET .word
  5804 = 0000			K_L	= $00
  5805 = 0006			K_LEFT	= $06
  5806 = 0007			K_RIGHT	= $07
  5807 = 000A			K_P	= $0A
  5808 = 000C			K_RETURN	= $0C
  5809 = 000E			K_UP	= $0E
  5810 = 000F			K_DOWN	= $0F
  5811 = 001C			K_ESC	= $1C
  5812 = 0021			K_SPACE	= $21
  5813 = 0025			K_M	= $25
  5814 = 0027			K_INVERS	= $27
  5815 = 002C			K_TAB	= $2C
  5816 = 0034			K_DELETE	= $34
  5817 = 0036			K_CLEAR	= $36
  5818 = 0037			K_INSERT	= $37
  5819 = 003C			K_CAPS	= $3C
  5820 = 003E			K_S	= $3E
  5821 = 02FC			KEYB	= $02FC
  5822 = 3C24			PUTTEXTINVERT	= DATAORIGIN+$00E4
  5823 = 3C25			SDMACTL	= DATAORIGIN+$00E5
  5824 = D400			DMACTL	= $D400
  5825 = 0230			SDLST	= $0230
  5826 = 02F4			CHBASE	= $02F4
  5827 = 0041			SOUNDR	= $41
  5828 = 3C6A			@CASETMP_0004	= DATAORIGIN+$012A
  5829 A75E			@exit
  5830
  5831 A75E A2 00		@halt	ldx #$00
  5832 A760 9A				txs
  5833 					.ifdef MAIN.@DEFINES.ROMOFF
  5834 A761 EE 01 D3			inc portb
  5835 					.fi
  5836
  5837 A764 A0 01			ldy #$01
  5838
  5839 A766 60				rts
  5840
  5841 				; ------------------------------------------------------------
  5842
  5843 A767 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  5844
  5845 				; ------------------------------------------------------------
  5846
  5847 A777			.local	@DEFINES
  5848 A777			ATARI
  5849 A777			USE_FIFO
  5850 A777			ROMOFF
  5851 				.endl
  5852
  5853 A777			.local	@RESOURCE
  5854 				.endl
  5855
  5856 = A777 D0 3B		CHANNELSCRADR
  5856 = A779 F0 3B		PLAYLISTSCRADR
  5856 = A77B 19 3C		CURDEV
  5856 = A77D 00 05		FN
  5856 = A77F 80 05		OUTSTR
  5856 = A781 18 81		COLORS
  5856 = A783 22 81		GM_RESET
  5856 				.endl							; MAIN
  5857
  5858 				; ------------------------------------------------------------
  5859 				; ------------------------------------------------------------
  5860
  5861 				.macro	UNITINITIALIZATION
  5862 				
  5863 					.ifdef MAIN.SYSTEM.@UnitInit
  5864 					jsr MAIN.SYSTEM.@UnitInit
  5865 					.fi
  5866 				
  5867 					.ifdef MAIN.MC6850.@UnitInit
  5868 					jsr MAIN.MC6850.@UnitInit
  5869 					.fi
  5870 				
  5871 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  5872 					jsr MAIN.MIDI_FIFO.@UnitInit
  5873 					.fi
  5874 				
  5875 					.ifdef MAIN.CIO.@UnitInit
  5876 					jsr MAIN.CIO.@UnitInit
  5877 					.fi
  5878 				
  5879 					.ifdef MAIN.MIDFILES.@UnitInit
  5880 					jsr MAIN.MIDFILES.@UnitInit
  5881 					.fi
  5882 				
  5883 					.ifdef MAIN.MISC.@UnitInit
  5884 					jsr MAIN.MISC.@UnitInit
  5885 					.fi
  5886 				.endm
  5887
  5888 				; ------------------------------------------------------------
  5889
  5890 					ift .SIZEOF(MAIN.SYSTEM) > 0
  5891 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  5891 				SYSTEM: $89FB..$8A2F
  5892 					eif
  5893
  5894 					ift .SIZEOF(MAIN.MC6850) > 0
  5895 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  5895 				MC6850: $8A30..$8A46
  5896 					eif
  5897
  5898 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  5899 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  5899 				MIDI_FIFO: $8A47..$8A9A
  5900 					eif
  5901
  5902 					ift .SIZEOF(MAIN.CIO) > 0
  5903 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  5903 				CIO: $8A9B..$8B2A
  5904 					eif
  5905
  5906 					ift .SIZEOF(MAIN.MIDFILES) > 0
  5907 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  5907 				MIDFILES: $8B2B..$944D
  5908 					eif
  5909
  5910 					ift .SIZEOF(MAIN.MISC) > 0
  5911 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  5911 				MISC: $944E..$944F
  5912 					eif
  5913
  5914 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  5914 				CODE: $8000..$A776
  5915
  5916 				; ------------------------------------------------------------
  5917
  5918 					org $3B40
  5919
  5920 3B40			DATAORIGIN
  5921 3B40-3C17> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5922 3B58 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5923 3B70 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5924 3B88 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5925 3BA0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5926 3BB8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5927 3BD0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5928 3BE8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  5929 3C00 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $01
  5930
  5931 = 00D8			VARINITSIZE	= *-DATAORIGIN
  5932 = 012B			VARDATASIZE	= 299
  5933
  5934 = 3C6B			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  5935
  5936 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  5936 				DATA: $3B40..$3C6B
  5937
  5938 02E0-02E1> 61 89			run START
  5939
  5940 				; ------------------------------------------------------------
  5941
  5942 				.macro	STATICDATA
  5943 				.by  $00 $00 $02 $7E $7F $00 $02 $FE  $FF $00 $05 $FB $00 $FC $00 $FD  $00 $04 $2D $65 $6D $1A $00 $02
  5944 				.by  $2B $22 $00 $02 $45 $3A $00 $05  $3B $00 $FC $00 $FD $00 $09 $4E  $B0 $EC $E1 $F9 $E9 $EE $E7 $CE
  5945 				.by  $00 $09 $4E $AE $EF $80 $F3 $EF  $EE $E7 $CE $00 $05 $FB $00 $3C  $00 $FD $00 $09 $4E $80 $B0 $E1
  5946 				.by  $F5 $F3 $E5 $80 $CE $00 $05 $FB  $00 $FC $00 $3D $00 $09 $4E $B3  $F4 $EF $F0 $F0 $E5 $E4 $CE $00
  5947 				.by  $09 $4E $AC $EF $E1 $E4 $E9 $EE  $E7 $80 $00 $13 $4E $B2 $E5 $E1  $E4 $E9 $EE $E7 $80 $E4 $E9 $F2
  5948 				.by  $E5 $E3 $F4 $EF $F2 $F9 $80 $00  $12 $4E $B2 $E5 $E1 $E4 $E9 $EE  $E7 $80 $F0 $EC $E1 $F9 $EC $E9
  5949 				.by  $F3 $F4 $80 $00 $14 $4E $B5 $EE  $F3 $F5 $F0 $F0 $EF $F2 $F4 $E5  $E4 $80 $E6 $EF $F2 $ED $E1 $F4
  5950 				.by  $CE $00 $14 $4E $AE $EF $F4 $80  $E5 $EE $EF $F5 $E7 $E8 $F4 $80  $ED $E5 $ED $EF $F2 $F9 $CE $00
  5951 				.by  $11 $4E $AE $EF $F4 $80 $E1 $80  $AD $A9 $A4 $A9 $80 $E6 $E9 $EC  $E5 $CE $00 $0C $4E $A9 $8F $AF
  5952 				.by  $80 $A5 $F2 $F2 $EF $F2 $80 $83  $00 $02 $44 $3A $00 $08 $4E $B3  $F4 $E1 $F4 $F5 $F3 $CE $00 $09
  5953 				.by  $4E $A3 $EF $F5 $EE $F4 $E5 $F2  $CE $00 $0B $4E $A4 $E9 $F2 $E5  $E3 $F4 $EF $F2 $F9 $CE $00 $0A
  5954 				.by  $4E $B0 $EC $E1 $F9 $EC $E9 $F3  $F4 $CE $00 $03 $2A $2E $2A $00  $A8 $00 $0A $08 $0A $A8 $0A $00
  5955 				.by  $02 $00 $F0 $7E $7F $09 $01 $F7  $29 $1C $1D $1E
  5956 				.endm
  5957
  5958 					end
