mads 2.1.6
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 8000			CODEORIGIN	= $8000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				.local	RESOURCE
   105 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1142 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 8075				RCDATA 'resources/font_s.fnt' CHARS_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('resources/font_s.fnt')-0
    28 8075				org main.CHARS_ADDR
    30 3000-33FF> 00 00 00 00 + 	ins 'resources/font_s.fnt',0
    32 					.print '$R RCDATA  ',main.CHARS_ADDR,'..',*-1," 'resources/font_s.fnt'"
    32 				$R RCDATA  $3000..$33FF 'resources/font_s.fnt'
Source: MIDICar Player.a65
   110 3400				RCASM 'resources/dlist.asm' DLIST_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 3400				org RESORIGIN
     4 = 0022			len = .sizeof(_DLIST_ADDR)
     6 				mcpy	ift main.DLIST_ADDR+len >= $bc20
    11 8075-80B7> 20 41 80		jsr sys.off
    13 8078 A9 96 85 88 A9 80 +  MWA #DATA EDX
    13 8080 A9 00 85 8C A9 34 +  MWA #MAIN.DLIST_ADDR ECX
    13 8088 A9 22 85 84 A9 00 +  MWA #LEN EAX
    13 8090 20 00 80		 JSR RESOURCE.MEMCPY
    15 8093 4C 65 80			jmp sys.on
    16 8096			data
Source: dlist.inc
     1 = 0000			DL_BLANK1 = 0; // 1 blank line
     2 = 0010			DL_BLANK2 = %00010000; // 2 blank lines
     3 = 0020			DL_BLANK3 = %00100000; // 3 blank lines
     4 = 0030			DL_BLANK4 = %00110000; // 4 blank lines
     5 = 0040			DL_BLANK5 = %01000000; // 5 blank lines
     6 = 0050			DL_BLANK6 = %01010000; // 6 blank lines
     7 = 0060			DL_BLANK7 = %01100000; // 7 blank lines
     8 = 0070			DL_BLANK8 = %01110000; // 8 blank lines
    10 = 0080			DL_DLI = %10000000; // Order to run DLI
    11 = 0040			DL_LMS = %01000000; // Order to set new memory address
    12 = 0020			DL_VSCROLL = %00100000; // Turn on vertical scroll on this line
    13 = 0010			DL_HSCROLL = %00010000; // Turn on horizontal scroll on this line
    15 = 0002			DL_MODE_40x24T2 = 2; // Antic Modes
    16 = 0004			DL_MODE_40x24T5 = 4;
    17 = 0005			DL_MODE_40x12T5 = 5;
    18 = 0006			DL_MODE_20x24T5 = 6;
    19 = 0007			DL_MODE_20x12T5 = 7;
    20 = 0008			DL_MODE_40x24G4 = 8;
    21 = 0009			DL_MODE_80x48G2 = 9;
    22 = 000A			DL_MODE_80x48G4 = $A;
    23 = 000B			DL_MODE_160x96G2 = $B;
    24 = 000C			DL_MODE_160x192G2 = $C;
    25 = 000D			DL_MODE_160x96G4 = $D;
    26 = 000E			DL_MODE_160x192G4 = $E;
    27 = 000F			DL_MODE_320x192G2 = $F;
    29 = 0001			DL_JMP = %00000001; // Order to jump
    30 = 0041			DL_JVB = %01000001; // Jump to begining
     3 3400			dl_start
     4 3400 70 70		    :2 dta DL_BLANK8
     6 3402 42 22 34		    dta DL_MODE_40x24T2 + DL_LMS, A(MAIN.SCREEN_ADDR)
     7 3405 02			    dta DL_MODE_40x24T2
     9 3406 00			    dta DL_BLANK1
    11 3407 02 02 02 02 02 02 +     :21 dta DL_MODE_40x24T2
    13 341C 07			    dta DL_MODE_20x12T5
    14 341D 00			    dta DL_BLANK1
    15 341E 02			    dta DL_MODE_40x24T2
    17 341F 41 00 34		    dta DL_JVB, A(dl_start)
    23 					.print '$R RCASM   ',main.DLIST_ADDR,'..',main.DLIST_ADDR+len-1," 'resources/dlist.asm'"
    23 				$R RCASM   $3400..$3421 'resources/dlist.asm'
    25 02E2-02E3> 75 80			ini mcpy
Source: MIDICar Player.a65
   111 80B8				RCDATA 'resources/header.obj' SCREEN_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0050			len = .filesize('resources/header.obj')-0
    28 80B8				org main.SCREEN_ADDR
    30 3422-3471> 49 4A 48 49 + 	ins 'resources/header.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_ADDR,'..',*-1," 'resources/header.obj'"
    32 				$R RCDATA  $3422..$3471 'resources/header.obj'
Source: MIDICar Player.a65
   112 3472				RCDATA 'resources/uvmeter.obj' UVMETER_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0040			len = .filesize('resources/uvmeter.obj')-0
    28 3472				org main.UVMETER_ADDR
    30 3880-38BF> 40 40 40 40 + 	ins 'resources/uvmeter.obj',0
    32 					.print '$R RCDATA  ',main.UVMETER_ADDR,'..',*-1," 'resources/uvmeter.obj'"
    32 				$R RCDATA  $3880..$38BF 'resources/uvmeter.obj'
Source: MIDICar Player.a65
   113 38C0				RCDATA 'resources/selftest.mti' TRACK_DATA_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 000A			len = .filesize('resources/selftest.mti')-0
    28 38C0				org main.TRACK_DATA_ADDR
    30 3E00-3E09> 00 00 00 40 + 	ins 'resources/selftest.mti',0
    32 					.print '$R RCDATA  ',main.TRACK_DATA_ADDR,'..',*-1," 'resources/selftest.mti'"
    32 				$R RCDATA  $3E00..$3E09 'resources/selftest.mti'
Source: MIDICar Player.a65
   114 3E0A				RCDATA 'resources/selftest.rmd' MIDI_DATA_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 006A			len = .filesize('resources/selftest.rmd')-0
    28 3E0A				org main.MIDI_DATA_ADDR
    30 4000-4069> 00 FF 21 01 + 	ins 'resources/selftest.rmd',0
    32 					.print '$R RCDATA  ',main.MIDI_DATA_ADDR,'..',*-1," 'resources/selftest.rmd'"
    32 				$R RCDATA  $4000..$4069 'resources/selftest.rmd'
Source: MIDICar Player.a65
   115 				.endl
   116
   117 				; ------------------------------------------------------------
   118
   119 406A				org CODEORIGIN
   120
   121 8000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 8000-A1C4> 00 00 04 4C + .by  $00 $00 $04 $4C $4F $4F $50 $00  $04 $20 $20 $20 $20 $00 $07 $50  $6C $61 $79 $69 $6E $67 $00 $07
     2 8018 50 61 75 73 65 20 + .by  $50 $61 $75 $73 $65 $20 $20 $00  $07 $53 $74 $6F $70 $70 $65 $64  $00 $07 $4C $6F $61 $64 $69 $6E
     3 8030 67 00 0E 43 61 6C + .by  $67 $00 $0E $43 $61 $6C $63 $75  $6C $61 $74 $69 $6E $67 $2E $2E  $2E $00 $02 $45 $3A $00 $10 $05
     4 8048 12 12 12 12 12 54 + .by  $12 $12 $12 $12 $12 $54 $49 $4D  $45 $12 $12 $12 $12 $12 $17 $00  $05 $4D $65 $6D $3A $20 $00 $02
     5 8060 4B 42 00 12 55 6E + .by  $4B $42 $00 $12 $55 $6E $73 $75  $70 $70 $6F $72 $74 $65 $64 $20  $66 $6F $72 $6D $61 $74 $00 $12
     6 8078 4E 6F 74 20 65 6E + .by  $4E $6F $74 $20 $65 $6E $6F $75  $67 $68 $74 $20 $6D $65 $6D $6F  $72 $79 $00 $0B $49 $2F $4F $20
     7 8090 45 72 72 6F 72 20 + .by  $45 $72 $72 $6F $72 $20 $23 $00  $00 $00 $0A $00 $0A $0A $0A $00  $00 $00 $F0 $7E $7F $09 $01 $F7
Source: MIDICar Player.a65
   122
   123 				; ------------------------------------------------------------
   124
   125 80A8			RTLIB
   126 80A8				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   127
   128 				.print 'ZPAGE: ',zpage,'..',zpend-1
   128 				ZPAGE: $0080..$00D3
   129
   130 				.print 'RTLIB: ',RTLIB,'..',*-1
   130 				RTLIB: $80A8..$8BB4
   131
   132 				; ------------------------------------------------------------
   133
   134 8BB5			START
   135 8BB5 BA				tsx
   136 8BB6 8E A7 A1			stx MAIN.@halt+1
   137
   138 					.ifdef fmulinit
   139 					fmulinit
   140 					.fi
   141
   142 = 01E5			VLEN	= VARDATASIZE-VARINITSIZE
   143 = 2006			VADR	= DATAORIGIN+VARINITSIZE
   144
   145 					ift VADR > $BFFF
   146 					ert 'Invalid memory address range ',VADR
   147 					eli (VLEN>0) && (VLEN<=256)
   148 					ldx #256-VLEN
   149 					lda #$00
   150 					sta:rne VADR+VLEN-256,x+
   151 					eli VLEN>256
   152 					@fill #VADR #VLEN #$00
   152 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   152 8BB9 A9 06 85 88 A9 20 +  MWA #VADR @FILL.PTR1
   152 8BC1 A9 E5 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   152 8BC9 A9 00 85 84		 MVA #$00 @FILL.PTR2
   152 8BCD 20 A1 84		 JSR @FILL
   153 					eif
   154
   155 				.ifdef :psptr
   156 					mwa #PROGRAMSTACK :psptr
   157 				.fi
   158
   159 					.ifdef MAIN.@DEFINES.ROMOFF
   160 8BD0				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 8BD0			.local	rominit
     5
     6 8BD0 78			        sei
     7 8BD1 A9 00		        lda #%00000000
     8 8BD3 8D 0E D4		        sta NMIEN       ;$D40E
     9 8BD6 A9 FE		        lda #%11111110
    10 8BD8 8D 01 D3		        sta PORTB       ;$D301
    11
    12 8BDB A2 03			ldx #3
    13 8BDD A0 00			ldy #0
    14 8BDF EE 01 D3		mv	inc portb
    15 8BE2 B9 00 E0		afnt0	lda $e000,y
    16 8BE5 CE 01 D3			dec portb
    17 8BE8 99 00 E0		afnt1	sta $e000,y
    18 8BEB C8				iny
    19 8BEC D0 F1			bne mv
    20 8BEE EE E4 8B			inc afnt0+2
    21 8BF1 EE EA 8B			inc afnt1+2
    22 8BF4 CA				dex
    23 8BF5 10 E8			bpl mv
    24
    25 8BF7 A2 14		        ldx #<nmiint
    26 8BF9 A0 8C		        ldy #>nmiint
    27 8BFB 8E FA FF		        stx NMIVEC      ;$FFFA
    28 8BFE 8C FB FF		        sty NMIVEC+1
    29
    30 8C01 A2 1E		        ldx #<irqint
    31 8C03 A0 8C		        ldy #>irqint
    32 8C05 8E FE FF		        stx IRQVEC      ;$FFFE
    33 8C08 8C FF FF		        sty IRQVEC+1
    34
    35 8C0B A9 40		        lda #%01000000
    36 8C0D 8D 0E D4		        sta NMIEN       ;$D40E
    37 8C10 58			        cli
    38
    39 8C11 4C 3F 8C			jmp skp
    40
    41
    42
    43 8C14 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 8C17 10 03		        spl
    45 8C19 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 8C1C 38			        sec
    48 8C1D 24			        .byte $24        ;BIT $18
    49
    50 8C1E 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 8C1F EE 01 D3		        inc PORTB       ;$D301
    55
    56 8C22 48			        pha
    57 8C23 8A			        txa
    58 8C24 48			        pha
    59 8C25 BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 8C26 A9 8C		        lda #>iret      ;adres procedury iret
    64 8C28 48			        pha
    65 8C29 A9 38		        lda #<iret
    66 8C2B 48			        pha
    67 8C2C BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 8C2F 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 8C30 90 03		        scc
    73 8C32 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 8C35 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 8C38 68			iret	pla
    77 8C39 AA				tax
    78 8C3A 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 8C3B CE 01 D3		        dec PORTB       ;$D301
    83 8C3E 40			        rti
    84
    85 8C3F			skp
    86
    87 				.endl
    88
   161 					.fi
   162
   163 8C3F A2 0F			ldx #$0F					; DOS II+/D ParamStr
   164 8C41 BD 40 03 9D AF A1 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   165
   166 8C4A E8				inx						; X = 0
   167 8C4B 86 80			stx bp						; BP = 0
   168
   169 8C4D 8E 0F D2			stx skctl					; reset POKEY
   170 8C50 A9 03			lda #3
   171 8C52 8D 0F D2			sta skctl
   172
   173 8C55 CA				dex						; X = 255
   174
   175 8C56				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
    15 8C56 20 38 98			jsr MAIN.MIDFILES.@UnitInit
Source: MIDICar Player.a65
   176
   177 8C59			.local	MAIN						; PROCEDURE
   178
   179 8C59 4C A0 9F			jmp l_009F
   180
   181 				; ------------------------------------------------------------
   182
   183 8C5C			.local	SYSTEM						; UNIT
   184
   185 8C5C			.local	FILEPOS						; FUNCTION | ASSEMBLER
   186
   187 				; -------------------  ASM Block 00000011  -------------------
   188
   189 8C5C 8A 48			txa:pha
   190
   191 8C5E AD 0B 20 85 82 AD + 	mwa f :bp2
   192
   193 8C68 A0 04			ldy #s@file.chanel
   194 8C6A B1 82			lda (:bp2),y
   195 8C6C AA				tax
   196 8C6D A9 26			lda #38
   197 8C6F 9D 42 03			sta iccmd,x
   198
   199 8C72				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8C72 EE 01 D3				inc portb
     6 8C75 20 56 E4				jsr CIOV
     8 8C78 CE 01 D3				dec portb
Source: MIDICar Player.a65
   200
   201 8C7B 8C 07 20			sty IOResult
   202
   203 8C7E BD 4C 03 85 84		mva icax3,x :eax
   204 8C83 BD 4D 03 85 85		mva icax4,x :eax+1
   205 8C88 BD 4E 03 85 86		mva icax5,x :eax+2
   206
   207 8C8D A9 00 85 87			mva #$00 :eax+3
   208 8C91 85 8E			sta :ecx+2
   209 8C93 85 8F			sta :ecx+3
   210
   211 8C95 A0 02			ldy #s@file.record
   212 8C97 B1 82			lda (:bp2),y
   213 8C99 85 8C			sta :ecx
   214 8C9B C8				iny
   215 8C9C B1 82			lda (:bp2),y
   216 8C9E 85 8D			sta :ecx+1
   217
   218 8CA0 20 EF 85			jsr idivEAX_ECX.main
   219
   220 8CA3 A5 84 8D 0D 20		mva :eax Result
   221 8CA8 A5 85 8D 0E 20		mva :eax+1 Result+1
   222 8CAD A5 86 8D 0F 20		mva :eax+2 Result+2
   223 8CB2 A5 87 8D 10 20		mva :eax+3 Result+3
   224
   225 8CB7 68 AA			pla:tax
   226
   227 8CB9			@exit
   228
   229 				; ------------------------------------------------------------
   230
   231 = 200B			F	= DATAORIGIN+$000B
   232 = 200D			RESULT	= DATAORIGIN+$000D
   233
   234 = 200B			@VarData	= F
   235 = 0002			@VarDataSize	= 2
   236
   237 8CB9 60				rts						; ret
   238 				.endl
   239
   240 8CBA			.local	SEEK						; PROCEDURE | ASSEMBLER
   241
   242 				; -------------------  ASM Block 00000012  -------------------
   243
   244 8CBA 8A 48			txa:pha
   245
   246 8CBC AD 11 20 85 82 AD + 	mwa f :bp2
   247
   248 8CC6 A0 04			ldy #s@file.chanel
   249 8CC8 B1 82			lda (:bp2),y
   250 8CCA AA				tax
   251 8CCB A9 25			lda #37
   252 8CCD 9D 42 03			sta iccmd,x
   253
   254 8CD0 A0 02			ldy #s@file.record
   255 8CD2 B1 82			lda (:bp2),y
   256 8CD4 85 84			sta :eax
   257 8CD6 C8				iny
   258 8CD7 B1 82			lda (:bp2),y
   259 8CD9 85 85			sta :eax+1
   260 8CDB A9 00			lda #$00
   261 8CDD 85 86			sta :eax+2
   262 8CDF 85 87			sta :eax+3
   263
   264 8CE1 AD 13 20 85 8C		mva a :ecx
   265 8CE6 AD 14 20 85 8D		mva a+1 :ecx+1
   266 8CEB AD 15 20 85 8E		mva a+2 :ecx+2
   267 8CF0 AD 16 20 85 8F		mva a+3 :ecx+3
   268
   269 8CF5 20 A3 85			jsr imulECX
   270
   271 8CF8 A5 84 9D 4C 03		mva :eax icax3,x
   272 8CFD A5 85 9D 4D 03		mva :eax+1 icax4,x
   273 8D02 A5 86 9D 4E 03		mva :eax+2 icax5,x
   274
   275 8D07				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8D07 EE 01 D3				inc portb
     6 8D0A 20 56 E4				jsr CIOV
     8 8D0D CE 01 D3				dec portb
Source: MIDICar Player.a65
   276
   277 8D10 8C 07 20			sty IOResult
   278
   279 8D13 68 AA			pla:tax
   280
   281 				; ------------------------------------------------------------
   282
   283 = 2011			F	= DATAORIGIN+$0011
   284 = 2013			A	= DATAORIGIN+$0013
   285
   286 = 2011			@VarData	= F
   287 = 0006			@VarDataSize	= 6
   288
   289 8D15			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					els
   297 8D15 60				rts						; ret
   298 					eif
   299 				.endl
   300
   301 8D16			.local	EOF						; FUNCTION
   302
   303 				; optimize OK (SYSTEM), line = 1163
   304
   305 8D16 AD 17 20			lda F
   306 8D19 8D 0B 20			sta FILEPOS.F
   307 8D1C AD 18 20			lda F+1
   308 8D1F 8D 0C 20			sta FILEPOS.F+1
   309 8D22 20 5C 8C			jsr FILEPOS
   310 8D25 AD 0D 20			lda FILEPOS.RESULT
   311 8D28 8D 1A 20			sta I
   312 8D2B AD 0E 20			lda FILEPOS.RESULT+1
   313 8D2E 8D 1B 20			sta I+1
   314 8D31 AD 0F 20			lda FILEPOS.RESULT+2
   315 8D34 8D 1C 20			sta I+2
   316 8D37 AD 10 20			lda FILEPOS.RESULT+3
   317 8D3A 8D 1D 20			sta I+3
   318 				; BlockRead
   319
   320 				; optimize OK (SYSTEM), line = 1165
   321
   322 8D3D AC 17 20 84 82 AC + 	mwy F :bp2
   323 8D47 A0 06			ldy #s@file.buffer
   324 8D49 AD AA 8D			lda BF
   325 8D4C 91 82			sta (:bp2),y
   326 8D4E C8				iny
   327 8D4F AD AB 8D			lda BF+1
   328 8D52 91 82			sta (:bp2),y
   329 8D54 A0 08			ldy #s@file.nrecord
   330 8D56 A9 01			lda #$01
   331 8D58 91 82			sta (:bp2),y
   332 8D5A C8				iny
   333 8D5B A9 00			lda #$00
   334 8D5D 91 82			sta (:bp2),y
   335
   336 8D5F 8A 48			txa:pha
   337 8D61 38				sec
   338 					@readfile F, #7
   338 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
   338 8D62 AC 18 20		 LDY F+1
   338 8D65 AD 17 20		 LDA F
   338 8D68 A2 07		 LDX# 7
   338 8D6A 20 77 81		 JSR @READFILE
   339 8D6D 68 AA			pla:tax
   340
   341 				; optimize OK (SYSTEM), line = 1167
   342
   343 8D6F AD 17 20			lda F
   344 8D72 8D 11 20			sta SEEK.F
   345 8D75 AD 18 20			lda F+1
   346 8D78 8D 12 20			sta SEEK.F+1
   347 8D7B AD 1A 20			lda I
   348 8D7E 8D 13 20			sta SEEK.A
   349 8D81 AD 1B 20			lda I+1
   350 8D84 8D 14 20			sta SEEK.A+1
   351 8D87 AD 1C 20			lda I+2
   352 8D8A 8D 15 20			sta SEEK.A+2
   353 8D8D AD 1D 20			lda I+3
   354 8D90 8D 16 20			sta SEEK.A+3
   355 8D93 20 BA 8C			jsr SEEK
   356
   357 				; -------------------  ASM Block 00000013  -------------------
   358
   359 8D96 AD 17 20 85 82 AD + 	mwa f :bp2
   360
   361 8DA0 A0 05			ldy #s@file.status
   362 8DA2 B1 82			lda (:bp2),y
   363 8DA4 29 01			and #e@file.eof
   364 8DA6 8D 19 20			sta Result
   365
   366 8DA9			@exit
   367
   368 				; ------------------------------------------------------------
   369
   370 = 2017			F	= DATAORIGIN+$0017
   371 = 2019			RESULT	= DATAORIGIN+$0019
   372 = 201A			I	= DATAORIGIN+$001A
   373 = 201E			adr.BF	= [DATAORIGIN+$001E] .array [256]
   374 8DA9			.var BF	= adr.BF .word
   375
   376 = 2017			@VarData	= F
   377 = 0106			@VarDataSize	= 262
   378
   379 8DA9 60				rts						; ret
   380 = 8DAA 1E 20		BF
   380 				.endl
   381
   382 8DAC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   383
   384 				; ------------------------------------------------------------
   385
   386 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   387 				; as Pointer
   388 8DAC B5 94			lda :STACKORIGIN,x
   389 8DAE 85 88			sta A
   390 8DB0 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   391 8DB2 85 89			sta A+1
   392 8DB4 CA				dex
   393 8DB5 10 03 4C BF 8D		jmi @main
   394
   395 				; ------------------------------------------------------------
   396
   397 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   398 				; as Pointer
   399 8DBA B5 94			lda :STACKORIGIN,x
   400 8DBC 85 8C			sta VALUE
   401 8DBE CA				dex
   402 8DBF			@main
   403
   404 				; -------------------  ASM Block 00000018  -------------------
   405
   406 8DBF A0 00			ldy #0
   407 8DC1 A5 8C 91 88			mva value (:edx),y
   408
   409 				; ------------------------------------------------------------
   410
   411 = 0088			A	= :EDX
   412 = 008C			VALUE	= :ECX
   413 8DC5			@exit
   414 					.ifdef @new
   415 					lda <@VarData
   416 					sta :ztmp
   417 					lda >@VarData
   418 					ldy #@VarDataSize-1
   419 					jmp @FreeMem
   420 					els
   421 8DC5 60				rts						; ret
   422 					eif
   423 				.endl
   424
   425 8DC6			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   426
   427 				; ------------------------------------------------------------
   428
   429 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   430 				; as Pointer
   431 8DC6 B5 94			lda :STACKORIGIN,x
   432 8DC8 85 88			sta A
   433 8DCA B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   434 8DCC 85 89			sta A+1
   435 8DCE CA				dex
   436 8DCF 30 09			jmi @main
   437
   438 				; ------------------------------------------------------------
   439
   440 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   441 				; as Pointer
   442 8DD1 B5 94			lda :STACKORIGIN,x
   443 8DD3 85 8C			sta VALUE
   444 8DD5 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   445 8DD7 85 8D			sta VALUE+1
   446 8DD9 CA				dex
   447 8DDA			@main
   448
   449 				; -------------------  ASM Block 00000019  -------------------
   450
   451 8DDA A0 00			ldy #0
   452 8DDC A5 8C 91 88			mva value (:edx),y
   453 8DE0 C8				iny
   454 8DE1 A5 8D 91 88			mva value+1 (:edx),y
   455
   456 				; ------------------------------------------------------------
   457
   458 = 0088			A	= :EDX
   459 = 008C			VALUE	= :ECX
   460 8DE5			@exit
   461 					.ifdef @new
   462 					lda <@VarData
   463 					sta :ztmp
   464 					lda >@VarData
   465 					ldy #@VarDataSize-1
   466 					jmp @FreeMem
   467 					els
   468 8DE5 60				rts						; ret
   469 					eif
   470 				.endl
   471
   472 8DE6			.local	FILLCHAR_0102					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   473
   474 					.MACRO m@INLINE
   475 				
   476 				; -------------------  ASM Block 00000021  -------------------
   477 				
   478 					jsr @fill
   479 				
   480 					.ENDM
   481
   482 				; ------------------------------------------------------------
   483
   484 = 0088			A	= :EDX
   485 = 008C			COUNT	= :ECX
   486 = 0084			VALUE	= :EAX
   487 8DE6			@exit
   488 				.endl
   489
   490 8DE6			.local	MOVE_0103					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   491
   492 					.MACRO m@INLINE
   493 				
   494 				; -------------------  ASM Block 00000028  -------------------
   495 				
   496 					jsr @move
   497 				
   498 					.ENDM
   499
   500 				; ------------------------------------------------------------
   501
   502 = 0088			SOURCE	= :EDX
   503 = 008C			DEST	= :ECX
   504 = 0084			COUNT	= :EAX
   505 8DE6			@exit
   506 				.endl
   507
   508 8DE6			.local	PARAMCOUNT					; FUNCTION | ASSEMBLER
   509
   510 				; -------------------  ASM Block 00000044  -------------------
   511
   512 					@cmdline #255
   512 				 LDA# 255\ JSR @CMDLINE
   512 8DE6 A9 FF		 LDA# 255
   512 8DE8 20 3F 82		 JSR @CMDLINE
   513 8DEB 8D 1E 21			sta Result
   514
   515 8DEE			@exit
   516
   517 				; ------------------------------------------------------------
   518
   519 = 211E			RESULT	= DATAORIGIN+$011E
   520 8DEE 60				rts						; ret
   521 				.endl
   522
   523 8DEF			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   524 8DEF 8D 1F 21			sta I
   525
   526 				; -------------------  ASM Block 00000045  -------------------
   527
   528 					@cmdline i
   528 				 LDA I\ JSR @CMDLINE
   528 8DF2 AD 1F 21		 LDA I
   528 8DF5 20 3F 82		 JSR @CMDLINE
   529
   530 				;	@move #@buf Result #33
   531 8DF8 A0 DF			ldy #256-33
   532 8DFA B9 21 03 99 41 20 + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   533
   534 8E03			@exit
   535
   536 				; ------------------------------------------------------------
   537
   538 = 211F			I	= DATAORIGIN+$011F
   539 = 2120			adr.RESULT	= [DATAORIGIN+$0120] .array [33]
   540 8E03			.var RESULT	= adr.RESULT .word
   541
   542 = 211F			@VarData	= I
   543 = 0022			@VarDataSize	= 34
   544
   545 8E03 60				rts						; ret
   546 = 8E04 20 21		RESULT
   546 				.endl
   547
   548 				; ------------------------------------------------------------
   549
   550 = 0101			__PORTB_BANKS	= $0101
   551 = 0648			M_PI_2	= $0648
   552 = 0192			D_PI_2	= $0192
   553 = 0004			D_PI_180	= $04
   554 = 0000			MGTIA	= $00
   555 = 0080			MVBXE	= $80
   556 = 0000			VBXE_XDLADR	= $00
   557 = 00E0			VBXE_BCBTMP	= $E0
   558 = 0100			VBXE_BCBADR	= $0100
   559 = 1000			VBXE_MAPADR	= $1000
   560 = 1000			VBXE_CHBASE	= $1000
   561 = 5000			VBXE_OVRADR	= $5000
   562 = B000			VBXE_WINDOW	= $B000
   563 = 0000			IDLI	= $00
   564 = 0001			IVBL	= $01
   565 = 0002			ITIM1	= $02
   566 = 0003			ITIM2	= $03
   567 = 0004			ITIM4	= $04
   568 = 00FE			CH_DELCHR	= $FE
   569 = 009B			CH_ENTER	= $9B
   570 = 001B			CH_ESC	= $1B
   571 = 001C			CH_CURS_UP	= $1C
   572 = 001D			CH_CURS_DOWN	= $1D
   573 = 001E			CH_CURS_LEFT	= $1E
   574 = 001F			CH_CURS_RIGHT	= $1F
   575 = 007F			CH_TAB	= $7F
   576 = 009B			CH_EOL	= $9B
   577 = 007D			CH_CLR	= $7D
   578 = 00FD			CH_BELL	= $FD
   579 = 007E			CH_DEL	= $7E
   580 = 009C			CH_DELLINE	= $9C
   581 = 009D			CH_INSLINE	= $9D
   582 = 0000			PAL_PMCOLOR0	= $00
   583 = 0001			PAL_PMCOLOR1	= $01
   584 = 0002			PAL_PMCOLOR2	= $02
   585 = 0003			PAL_PMCOLOR3	= $03
   586 = 0004			PAL_COLOR0	= $04
   587 = 0005			PAL_COLOR1	= $05
   588 = 0006			PAL_COLOR2	= $06
   589 = 0007			PAL_COLOR3	= $07
   590 = 0008			PAL_COLBAK	= $08
   591 = 0000			COLOR_BLACK	= $00
   592 = 000E			COLOR_WHITE	= $0E
   593 = 0032			COLOR_RED	= $32
   594 = 0096			COLOR_CYAN	= $96
   595 = 0068			COLOR_VIOLET	= $68
   596 = 00C4			COLOR_GREEN	= $C4
   597 = 0074			COLOR_BLUE	= $74
   598 = 00EE			COLOR_YELLOW	= $EE
   599 = 0028			COLOR_ORANGE	= $28
   600 = 00E4			COLOR_BROWN	= $E4
   601 = 003C			COLOR_LIGHTRED	= $3C
   602 = 0004			COLOR_GRAY1	= $04
   603 = 0006			COLOR_GRAY2	= $06
   604 = 000A			COLOR_GRAY3	= $0A
   605 = 00CC			COLOR_LIGHTGREEN	= $CC
   606 = 007C			COLOR_LIGHTBLUE	= $7C
   607 = 0004			FMOPENREAD	= $04
   608 = 0008			FMOPENWRITE	= $08
   609 = 0009			FMOPENAPPEND	= $09
   610 = 000C			FMOPENREADWRITE	= $0C
   611 = 2000			SCREENWIDTH	= DATAORIGIN+$0000
   612 = 2002			SCREENHEIGHT	= DATAORIGIN+$0002
   613 = 2004			DATESEPARATOR	= DATAORIGIN+$0004
   614 = D20A			RND	= $D20A
   615 = 02C0			adr.PALETTE	= $02C0
   616 8E06			.var PALETTE	= adr.PALETTE .word
   617 = D012			adr.HPALETTE	= $D012
   618 8E06			.var HPALETTE	= adr.HPALETTE .word
   619 = 2005			FILEMODE	= DATAORIGIN+$0005
   620 = 2006			GRAPHMODE	= DATAORIGIN+$0006
   621 = 2007			IORESULT	= DATAORIGIN+$0007
   622 = 2008			EOLN	= DATAORIGIN+$0008
   623 = 2009			RNDSEED	= DATAORIGIN+$0009
   624
   625 = 8E06 C0 02		PALETTE
   625 = 8E08 12 D0		HPALETTE
   625 				.endl							; UNIT SYSTEM
   626
   627 				; ------------------------------------------------------------
   628
   629 8E0A			.local	MC6850						; UNIT
   630
   631 8E0A			.local	MC6850_RESET					; PROCEDURE
   632
   633 				; optimize OK (MC6850), line = 70
   634
   635 8E0A A9 03			lda #$03
   636 8E0C 8D 00 D5			sta MC6850_CNTRREG
   637 8E0F			@exit
   638 					.ifdef @new
   639 					lda <@VarData
   640 					sta :ztmp
   641 					lda >@VarData
   642 					ldy #@VarDataSize-1
   643 					jmp @FreeMem
   644 					els
   645 8E0F 60				rts						; ret
   646 					eif
   647 				.endl
   648
   649 8E10			.local	MC6850_INIT					; PROCEDURE
   650 8E10 8D 41 21			sta SETUP
   651
   652 				; optimize OK (MC6850), line = 75
   653
   654 8E13 8D 00 D5			sta MC6850_CNTRREG
   655
   656 				; ------------------------------------------------------------
   657
   658 = 2141			SETUP	= DATAORIGIN+$0141
   659
   660 = 2141			@VarData	= SETUP
   661 = 0001			@VarDataSize	= 1
   662
   663 8E16			@exit
   664 					.ifdef @new
   665 					lda <@VarData
   666 					sta :ztmp
   667 					lda >@VarData
   668 					ldy #@VarDataSize-1
   669 					jmp @FreeMem
   670 					els
   671 8E16 60				rts						; ret
   672 					eif
   673 				.endl
   674
   675 				; ------------------------------------------------------------
   676
   677 = D500			MC6850_BASE	= $D500
   678 = D500			ADDR_MC6850_CNTRREG	= $D500
   679 = D501			ADDR_MC6850_BUFFER	= $D501
   680 = D500			ADDR_MC6850_STATREG	= $D500
   681 = 0001			CR0	= $01
   682 = 0002			CR1	= $02
   683 = 0004			CR2	= $04
   684 = 0008			CR3	= $08
   685 = 0010			CR4	= $10
   686 = 0020			CR5	= $20
   687 = 0040			CR6	= $40
   688 = 0080			CR7	= $80
   689 = 0000			CD_1	= $00
   690 = 0001			CD_16	= $01
   691 = 0002			CD_64	= $02
   692 = 0003			MASTERRESET	= $03
   693 = 0000			WS_7BITS	= $00
   694 = 0010			WS_8BITS	= $10
   695 = 0000			WS_2BITSTOP	= $00
   696 = 0008			WS_1BITSTOP	= $08
   697 = 0000			WS_EVENPARITY	= $00
   698 = 0004			WS_ODDPARITY	= $04
   699 = 0000			TC_RTSLOW_NOTIRQ	= $00
   700 = 0020			TC_RTSLOW_TIRQ	= $20
   701 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   702 = 0060			TC_BREAKLEVEL	= $60
   703 = 0000			NOIRQ_RECEIVE	= $00
   704 = 0080			IRQ_RECEIVE	= $80
   705 = 0001			RDRF	= $01
   706 = 0002			TDRE	= $02
   707 = 0004			DCD	= $04
   708 = 0008			CTS	= $08
   709 = 0010			FE	= $10
   710 = 0020			OVRN	= $20
   711 = 0040			PE	= $40
   712 = 0080			IRQ	= $80
   713 = D500			MC6850_CNTRREG	= $D500
   714 = D501			MC6850_BUFFER	= $D501
   715 = D500			MC6850_STATREG	= $D500
   716 = 00FF			MC_BYTE	= $FF
   717
   718 				.endl							; UNIT MC6850
   719
   720 				; ------------------------------------------------------------
   721
   722 8E17			.local	MIDI_FIFO					; UNIT
   723
   724 8E17			.local	FIFO_RESET					; PROCEDURE
   725
   726 				; optimize OK (MIDI_FIFO), line = 30
   727
   728 8E17 A9 00			lda #$00
   729 8E19 85 FD			sta FIFO_HEAD
   730
   731 				; optimize OK (MIDI_FIFO), line = 31
   732
   733 8E1B 85 FE			sta FIFO_TAIL
   734 8E1D			@exit
   735 					.ifdef @new
   736 					lda <@VarData
   737 					sta :ztmp
   738 					lda >@VarData
   739 					ldy #@VarDataSize-1
   740 					jmp @FreeMem
   741 					els
   742 8E1D 60				rts						; ret
   743 					eif
   744 				.endl
   745
   746 8E1E			.local	FIFO_PUSHDIRECT2MC6850				; PROCEDURE
   747
   748 				; optimize OK (MIDI_FIFO), line = 36
   749
   750 8E1E AD 00 D5			lda MC6850.MC6850_CNTRREG
   751 8E21 29 02			and #$02
   752 8E23 F0 0E			jeq l_0169
   753
   754 				; optimize OK (MIDI_FIFO), line = 37
   755
   756 8E25 A4 FE			ldy FIFO_TAIL
   757 8E27 C4 FD			cpy FIFO_HEAD
   758 8E29 F0 08			jeq l_017E
   759
   760 				; optimize OK (MIDI_FIFO), line = 39
   761
   762 8E2B B9 00 06			lda adr.FIFO_BUF,y
   763 8E2E 8D 01 D5			sta MC6850.MC6850_BUFFER
   764
   765 				; optimize FAIL (0, MIDI_FIFO), line = 40
   766
   767 8E31 E6 FE			inc FIFO_TAIL
   768 8E33			l_017E
   769 8E33			l_0169
   770 8E33			@exit
   771 					.ifdef @new
   772 					lda <@VarData
   773 					sta :ztmp
   774 					lda >@VarData
   775 					ldy #@VarDataSize-1
   776 					jmp @FreeMem
   777 					els
   778 8E33 60				rts						; ret
   779 					eif
   780 				.endl
   781
   782 8E34			.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER
   783
   784 				; -------------------  ASM Block 00000052  -------------------
   785
   786 8E34 A5 FD		  lda FIFO_Head
   787 8E36 18			  clc
   788 8E37 69 01		  adc #1
   789 8E39 C5 FE		  cmp FIFO_Tail
   790 8E3B D0 13		  bne storeInFIFO
   791
   792 8E3D AD 1A D0		  lda $d01a
   793 8E40 49 47		  eor #$47
   794 8E42 8D 1A D0		  sta $d01a
   795 8E45 20 90 8E		  jsr FIFO_Flush
   796 8E48 AD 1A D0		  lda $d01a
   797 8E4B 49 47		  eor #$47
   798 8E4D 8D 1A D0		  sta $d01a
   799
   800 8E50			storeInFIFO:
   801 8E50 A4 FD		  ldy FIFO_Head
   802 8E52 A5 FF		  lda FIFO_Byte
   803 8E54 99 00 06		  sta FIFO_ADDR,y
   804 8E57 E6 FD		  inc FIFO_Head
   805
   806 8E59 20 1E 8E		  jsr FIFO_PushDirect2MC6850
   807 8E5C			exitWrite:
   808
   809 8E5C			@exit
   810 					.ifdef @new
   811 					lda <@VarData
   812 					sta :ztmp
   813 					lda >@VarData
   814 					ldy #@VarDataSize-1
   815 					jmp @FreeMem
   816 					els
   817 8E5C 60				rts						; ret
   818 					eif
   819 				.endl
   820
   821 8E5D			.local	FIFO_SEND					; PROCEDURE
   822
   823 				; optimize OK (MIDI_FIFO), line = 85
   824
   825 8E5D AD 43 21			lda DATA
   826 8E60 8D 46 21			sta P
   827 8E63 AD 44 21			lda DATA+1
   828 8E66 8D 47 21			sta P+1
   829
   830 				; --- WhileProlog
   831 8E69 4C 8A 8E			jmp l_019D
   832 8E6C			l_019E
   833
   834 				; optimize OK (MIDI_FIFO), line = 88
   835
   836 8E6C AC 46 21 84 82 AC + 	mwy P :bp2
   837 8E76 A0 00			ldy #$00
   838 8E78 B1 82			lda (:bp2),y
   839 8E7A 85 FF			sta FIFO_BYTE
   840 8E7C 20 34 8E			jsr FIFO_WRITEBYTE
   841
   842 				; optimize FAIL (0, MIDI_FIFO), line = 89
   843
   844 8E7F EE 46 21			inc P
   845 8E82 D0 03			sne
   846 8E84 EE 47 21			inc P+1
   847 8E87 CE 45 21			dec LEN
   848 8E8A			l_019D
   849
   850 				; optimize OK (MIDI_FIFO), line = 86
   851
   852 8E8A AD 45 21			lda LEN
   853 8E8D D0 DD			jne l_019E
   854
   855 				; ------------------------------------------------------------
   856
   857 = 2143			DATA	= DATAORIGIN+$0143
   858 = 2145			LEN	= DATAORIGIN+$0145
   859 = 2146			P	= DATAORIGIN+$0146
   860
   861 = 2143			@VarData	= DATA
   862 = 0005			@VarDataSize	= 5
   863
   864 8E8F			@exit
   865 					.ifdef @new
   866 					lda <@VarData
   867 					sta :ztmp
   868 					lda >@VarData
   869 					ldy #@VarDataSize-1
   870 					jmp @FreeMem
   871 					els
   872 8E8F 60				rts						; ret
   873 					eif
   874 				.endl
   875
   876 8E90			.local	FIFO_FLUSH					; PROCEDURE
   877
   878 				; optimize OK (MIDI_FIFO), line = 126
   879
   880 8E90 A5 F5			lda _TIMERSTATUS
   881 8E92 49 80			eor #$80
   882 8E94 85 F5			sta _TIMERSTATUS
   883
   884 				; --- WhileProlog
   885 8E96 4C AA 8E			jmp l_01C9
   886 8E99			l_01CA
   887
   888 				; optimize OK (MIDI_FIFO), line = 129
   889
   890 8E99 AD 00 D5			lda MC6850.MC6850_CNTRREG
   891 8E9C 29 02			and #$02
   892 8E9E F0 0A			jeq l_01E0
   893
   894 				; optimize OK (MIDI_FIFO), line = 131
   895
   896 8EA0 A4 FE			ldy FIFO_TAIL
   897 8EA2 B9 00 06			lda adr.FIFO_BUF,y
   898 8EA5 8D 01 D5			sta MC6850.MC6850_BUFFER
   899
   900 				; optimize FAIL (0, MIDI_FIFO), line = 132
   901
   902 8EA8 E6 FE			inc FIFO_TAIL
   903 8EAA			l_01E0
   904 8EAA			l_01C9
   905
   906 				; optimize OK (MIDI_FIFO), line = 127
   907
   908 8EAA A5 FE			lda FIFO_TAIL
   909 8EAC C5 FD			cmp FIFO_HEAD
   910 8EAE D0 E9			jne l_01CA
   911
   912 				; optimize OK (MIDI_FIFO), line = 135
   913
   914 8EB0 A5 F5			lda _TIMERSTATUS
   915 8EB2 49 80			eor #$80
   916 8EB4 85 F5			sta _TIMERSTATUS
   917 8EB6			@exit
   918 					.ifdef @new
   919 					lda <@VarData
   920 					sta :ztmp
   921 					lda >@VarData
   922 					ldy #@VarDataSize-1
   923 					jmp @FreeMem
   924 					els
   925 8EB6 60				rts						; ret
   926 					eif
   927 				.endl
   928
   929 				; ------------------------------------------------------------
   930
   931 = 00FD			FIFO_HEAD	= $FD
   932 = 00FE			FIFO_TAIL	= $FE
   933 = 00FF			FIFO_BYTE	= $FF
   934 = 2142			FIFO2NULL	= DATAORIGIN+$0142
   935 = 0600			FIFO_ADDR	= $0600
   936 = 0600			adr.FIFO_BUF	= $0600
   937 8EB7			.var FIFO_BUF	= adr.FIFO_BUF .word
   938 = 00F5			_TIMERSTATUS	= $F5
   939
   940 = 8EB7 00 06		FIFO_BUF
   940 				.endl							; UNIT MIDI_FIFO
   941
   942 				; ------------------------------------------------------------
   943
   944 8EB9			.local	MIDFILES					; UNIT
   945
   946 8EB9			.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT
   947
   948 				; -------------------  ASM Block 00000053  -------------------
   949
   950 8EB9 A5 F5		    lda _timerStatus
   951 8EBB 30 1E		    bmi skip
   952
   953 8EBD			doSubTick:
   954 8EBD 29 0F		    and #f_ratio
   955 8EBF C5 F4		    cmp _subCnt
   956 8EC1 F0 04		    beq doMainTick
   957
   958 8EC3 E6 F4		    inc _subCnt
   959 8EC5 70 14		    bvs skip
   960
   961 8EC7			doMainTick:
   962 8EC7 A9 01		    lda #1
   963 8EC9 85 F4		    sta _subCnt
   964
   965 8ECB A5 F5		    lda _timerStatus
   966 8ECD 09 40		    ora #f_tick
   967 8ECF 85 F5		    sta _timerStatus
   968
   969 8ED1 E6 F0		    inc _totalTicks
   970 8ED3 D0 06		    bne skip
   971 8ED5 E6 F1		    inc _totalTicks+1
   972 8ED7 D0 02		    bne skip
   973 8ED9 E6 F2		    inc _totalTicks+2
   974 				    // bne skip
   975 				    // inc _totalTicks+3
   976
   977 8EDB			skip:
   978
   979 				//   sty regy
   980
   981 				//   ldy MIDI_FIFO.FIFO_Tail
   982 				//   cpy MIDI_FIFO.FIFO_Head
   983 				//   beq fifo_end
   984
   985 				//   lda MC6850.MC6850_CNTRREG
   986 				//   and #MC6850.TDRE
   987 				//   beq fifo_end
   988
   989 				//   lda MIDI_FIFO.FIFO_ADDR,y
   990 				//   sta MC6850.MC6850_BUFFER
   991
   992 				//   inc MIDI_FIFO.FIFO_Tail
   993
   994 				// fifo_end:
   995 				//   ldy regy:#$00
   996
   997 8EDB 68			  pla
   998
   999 8EDC 40				rti						; ret
  1000 				.endl
  1001
  1002 8EDD			.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER
  1003
  1004 				; -------------------  ASM Block 00000054  -------------------
  1005
  1006 8EDD A5 E2		  lda _adr            // get LSB of address
  1007 8EDF F0 01		  beq checkMemType    // zero means, we crossing the page. Check block bounds
  1008 8EE1 60			  rts
  1009
  1010 8EE2			checkMemType
  1011 8EE2 A5 E3		  lda _adr+1          // get MSB of address
  1012 8EE4 A4 E1		  ldy _bank           // get current bank index
  1013 8EE6 D0 17		  bne checkXMSBound   // zero, means we checking bounds in base memory
  1014 				                      // otherwise, we checking bound of extended memory
  1015
  1016 				// base memory bounds check
  1017 8EE8			check1Bound           // 1st boundary $8000..$a3ff - program area
  1018 8EE8 C9 80		  cmp #$80
  1019 8EEA D0 05		  bne check2Bound
  1020
  1021 8EEC A9 A4		  lda #$a4
  1022 8EEE 85 E3		  sta _adr+1
  1023 8EF0 60			  rts
  1024
  1025 8EF1			check2Bound:          // 2nd boundary $bc00..$bfff - DL $ Screen (BASIC OFF!)
  1026
  1027 				  // cmp #$bc
  1028 				  // bne check3Bound
  1029
  1030 				  // lda #$c0
  1031 				  // sta _adr+1
  1032 				  // rts
  1033
  1034 8EF1			check3Bound:          // 3rd boundary $d000..$d7ff - I/O area
  1035 8EF1 C9 D0		  cmp #$d0
  1036 8EF3 D0 05		  bne check4Bound
  1037
  1038 8EF5 A9 D8		  lda #$d8
  1039 8EF7 85 E3		  sta _adr+1
  1040 8EF9 60			  rts
  1041
  1042 8EFA			check4bound           // 4th boundary $ff00..$ffff
  1043 8EFA C9 FF		  cmp #$ff
  1044 8EFC F0 06		  beq switchXMSBank
  1045 8EFE 60			  rts
  1046
  1047 				// extended memory bound check
  1048
  1049 8EFF			checkXMSBound         // extender memory window $4000..$7fff
  1050 8EFF C9 80		  cmp #$80            // the bank's memory area ends at $7fff
  1051 8F01 F0 01		  beq switchXMSBank   // if MSB addres is out of this address, we need switch bank
  1052
  1053 8F03 60			  rts
  1054
  1055 8F04			switchXMSBank:
  1056 8F04 C8			  iny             // increase current bank index
  1057 8F05 B9 00 01		  lda $100,y      // get bank set
  1058 8F08 F0 0A		  beq outOfMem    // if zero, means Out Of Memory
  1059
  1060 8F0A 84 E1		  sty _bank       // store current bank index
  1061
  1062 8F0C 8D 01 D3		  sta PORTB       // set PORTB (switch bank)
  1063
  1064 8F0F A9 40		  lda #$40        // set MSB address to the begining of bank
  1065 8F11 85 E3		  sta _adr+1
  1066 8F13 60			  rts
  1067
  1068 8F14			outOfMem:
  1069 8F14 A9 65		  lda #ERR_NOT_ENOUGHT_MEMORY
  1070 8F16 8D 07 20		  sta SYSTEM.IOResult
  1071
  1072 8F19			@exit
  1073 					.ifdef @new
  1074 					lda <@VarData
  1075 					sta :ztmp
  1076 					lda >@VarData
  1077 					ldy #@VarDataSize-1
  1078 					jmp @FreeMem
  1079 					els
  1080 8F19 60				rts						; ret
  1081 					eif
  1082 				.endl
  1083
  1084 8F1A			.local	LOADMID						; FUNCTION
  1085
  1086 8F1A 4C A3 8F			jmp l_020E
  1087
  1088 8F1D			.local	READWORDBI					; FUNCTION
  1089
  1090 				; BlockRead
  1091
  1092 				; optimize OK (bigendian.inc), line = 3
  1093
  1094 8F1D AC 1B 93 84 82 AC + 	mwy F :bp2
  1095 8F27 A0 06			ldy #s@file.buffer
  1096 8F29 A9 8C			lda <RESULT
  1097 8F2B 91 82			sta (:bp2),y
  1098 8F2D C8				iny
  1099 8F2E A9 21			lda >RESULT
  1100 8F30 91 82			sta (:bp2),y
  1101 8F32 A0 08			ldy #s@file.nrecord
  1102 8F34 A9 02			lda #$02
  1103 8F36 91 82			sta (:bp2),y
  1104 8F38 C8				iny
  1105 8F39 A9 00			lda #$00
  1106 8F3B 91 82			sta (:bp2),y
  1107
  1108 8F3D 8A 48			txa:pha
  1109 8F3F 38				sec
  1110 					@readfile F, #7
  1110 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1110 8F40 AC 1C 93		 LDY F+1
  1110 8F43 AD 1B 93		 LDA F
  1110 8F46 A2 07		 LDX# 7
  1110 8F48 20 77 81		 JSR @READFILE
  1111 8F4B 68 AA			pla:tax
  1112
  1113 				; -------------------  ASM Block 00000055  -------------------
  1114
  1115 8F4D AE 8C 21		    ldx result
  1116 8F50 AC 8D 21		    ldy result+1
  1117 8F53 8E 8D 21		    stx result+1
  1118 8F56 8C 8C 21		    sty result
  1119 				  
  1120 8F59			@exit
  1121
  1122 				; ------------------------------------------------------------
  1123
  1124 = 218C			RESULT	= DATAORIGIN+$018C
  1125 8F59 60				rts						; ret
  1126 				.endl
  1127
  1128 8F5A			.local	READLONGBI					; FUNCTION
  1129
  1130 				; BlockRead
  1131
  1132 				; optimize OK (bigendian.inc), line = 15
  1133
  1134 8F5A AC 1B 93 84 82 AC + 	mwy F :bp2
  1135 8F64 A0 06			ldy #s@file.buffer
  1136 8F66 A9 8E			lda <RESULT
  1137 8F68 91 82			sta (:bp2),y
  1138 8F6A C8				iny
  1139 8F6B A9 21			lda >RESULT
  1140 8F6D 91 82			sta (:bp2),y
  1141 8F6F A0 08			ldy #s@file.nrecord
  1142 8F71 A9 04			lda #$04
  1143 8F73 91 82			sta (:bp2),y
  1144 8F75 C8				iny
  1145 8F76 A9 00			lda #$00
  1146 8F78 91 82			sta (:bp2),y
  1147
  1148 8F7A 8A 48			txa:pha
  1149 8F7C 38				sec
  1150 					@readfile F, #7
  1150 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1150 8F7D AC 1C 93		 LDY F+1
  1150 8F80 AD 1B 93		 LDA F
  1150 8F83 A2 07		 LDX# 7
  1150 8F85 20 77 81		 JSR @READFILE
  1151 8F88 68 AA			pla:tax
  1152
  1153 				; -------------------  ASM Block 00000056  -------------------
  1154
  1155 8F8A AE 8E 21		    ldx result
  1156 8F8D AC 91 21		    ldy result+3
  1157 8F90 8E 91 21		    stx result+3
  1158 8F93 8C 8E 21		    sty result
  1159
  1160 8F96 AE 8F 21		    ldx result+1
  1161 8F99 AC 90 21		    ldy result+2
  1162 8F9C 8E 90 21		    stx result+2
  1163 8F9F 8C 8F 21		    sty result+1
  1164 				  
  1165 8FA2			@exit
  1166
  1167 				; ------------------------------------------------------------
  1168
  1169 = 218E			RESULT	= DATAORIGIN+$018E
  1170 8FA2 60				rts						; ret
  1171 				.endl
  1172 8FA3			l_020E
  1173 				; AssignFile
  1174
  1175 				; optimize OK (loadmid.inc), line = 18
  1176
  1177 8FA3 AC 1B 93 84 82 AC + 	mwy F :bp2
  1178 8FAD A0 00			ldy #s@file.pfname
  1179 8FAF AD 6B 21			lda FN
  1180 8FB2 91 82			sta (:bp2),y
  1181 8FB4 C8				iny
  1182 8FB5 AD 6C 21			lda FN+1
  1183 8FB8 91 82			sta (:bp2),y
  1184 8FBA A0 05			ldy #s@file.status
  1185 8FBC A9 00			lda #$00
  1186 8FBE 91 82			sta (:bp2),y
  1187 				; Reset
  1188
  1189 				; optimize OK (loadmid.inc), line = 19
  1190
  1191 8FC0 A0 02			ldy #s@file.record
  1192 8FC2 A9 01			lda #$01
  1193 8FC4 91 82			sta (:bp2),y
  1194 8FC6 C8				iny
  1195 8FC7 A9 00			lda #$00
  1196 8FC9 91 82			sta (:bp2),y
  1197
  1198 8FCB 8A 48			txa:pha
  1199 8FCD 18				clc
  1200 					@openfile F, MAIN.SYSTEM.FileMode
  1200 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  1200 8FCE AC 1C 93		 LDY F+1
  1200 8FD1 AD 1B 93		 LDA F
  1200 8FD4 AE 05 20		 LDX MAIN.SYSTEM.FILEMODE
  1200 8FD7 20 A8 80		 JSR @OPENFILE
  1201 8FDA 68 AA			pla:tax
  1202
  1203 				; optimize OK (loadmid.inc), line = 20
  1204
  1205 8FDC AD 07 20			lda SYSTEM.IORESULT
  1206 8FDF 10 14			jpl l_0245
  1207
  1208 				; optimize OK (loadmid.inc), line = 22
  1209
  1210 8FE1 8D 6D 21			sta RESULT
  1211 				; CloseFile
  1212
  1213 8FE4 8A 48			txa:pha
  1214 8FE6 18				clc
  1215 					@closefile F
  1215 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1215 8FE7 AC 1C 93		 LDY F+1
  1215 8FEA AD 1B 93		 LDA F
  1215 8FED 20 44 81		 JSR @CLOSEFILE
  1216 8FF0 68 AA			pla:tax
  1217
  1218 8FF2 4C 1A 93			jmp @exit					; exit
  1219 8FF5			l_0245
  1220
  1221 				; optimize OK (loadmid.inc), line = 27
  1222
  1223 8FF5 A9 00			lda #$00
  1224 8FF7 85 E1			sta _BANK
  1225
  1226 				; optimize OK (loadmid.inc), line = 28
  1227
  1228 8FF9 AD 48 21			lda MIDDATA
  1229 8FFC 85 E2			sta _PTR
  1230 8FFE AD 49 21			lda MIDDATA+1
  1231 9001 85 E3			sta _PTR+1
  1232
  1233 				; optimize OK (loadmid.inc), line = 29
  1234
  1235 9003 AD 75 98			lda MIDTRACKS
  1236 9006 8D 8A 21			sta TRKDATA
  1237 9009 AD 76 98			lda MIDTRACKS+1
  1238 900C 8D 8B 21			sta TRKDATA+1
  1239
  1240 				; optimize OK (loadmid.inc), line = 30
  1241
  1242 900F A9 00			lda #$00
  1243 9011 8D 7A 21			sta TRACKCOUNT
  1244
  1245 				; optimize OK (loadmid.inc), line = 31
  1246
  1247 9014 A9 FF			lda #$FF
  1248 9016 8D 4C 21			sta TOTALTRACKS
  1249
  1250 				; --- WhileProlog
  1251 9019 4C C8 92			jmp l_0266
  1252 901C			l_0267
  1253 				; BlockRead
  1254
  1255 				; optimize OK (loadmid.inc), line = 35
  1256
  1257 901C AC 1B 93 84 82 AC + 	mwy F :bp2
  1258 9026 A0 06			ldy #s@file.buffer
  1259 9028 A9 7B			lda <CHUNKTAG
  1260 902A 91 82			sta (:bp2),y
  1261 902C C8				iny
  1262 902D A9 21			lda >CHUNKTAG
  1263 902F 91 82			sta (:bp2),y
  1264 9031 A0 08			ldy #s@file.nrecord
  1265 9033 A9 04			lda #$04
  1266 9035 91 82			sta (:bp2),y
  1267 9037 C8				iny
  1268 9038 A9 00			lda #$00
  1269 903A 91 82			sta (:bp2),y
  1270 903C A0 0A			ldy #s@file.numread
  1271 903E A9 7F			lda <V
  1272 9040 91 82			sta (:bp2),y
  1273 9042 C8				iny
  1274 9043 A9 21			lda >V
  1275 9045 91 82			sta (:bp2),y
  1276
  1277 9047 8A 48			txa:pha
  1278 9049 18				clc
  1279 					@readfile F, #135
  1279 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1279 904A AC 1C 93		 LDY F+1
  1279 904D AD 1B 93		 LDA F
  1279 9050 A2 87		 LDX# 135
  1279 9052 20 77 81		 JSR @READFILE
  1280 9055 68 AA			pla:tax
  1281
  1282 				; optimize OK (loadmid.inc), line = 36
  1283
  1284 9057 AD 80 21			lda V+1
  1285 905A D0 05			bne @+
  1286 905C AD 7F 21			lda V
  1287 905F C9 04			cmp #$04
  1288 				@
  1289 9061 F0 03			jeq l_0284
  1290 9063 4C 07 93			jmp b_0267					; break
  1291 9066			l_0284
  1292
  1293 				; optimize FAIL ('READLONGBI', loadmid.inc), line = 37
  1294
  1295 9066 20 5A 8F			jsr READLONGBI
  1296 9069 AD 8E 21			lda READLONGBI.RESULT
  1297 906C 8D 85 21			sta LEN
  1298 906F AD 8F 21			lda READLONGBI.RESULT+1
  1299 9072 8D 86 21			sta LEN+1
  1300 9075 AD 90 21			lda READLONGBI.RESULT+2
  1301 9078 8D 87 21			sta LEN+2
  1302 907B AD 91 21			lda READLONGBI.RESULT+3
  1303 907E 8D 88 21			sta LEN+3
  1304
  1305 				; optimize OK (loadmid.inc), line = 38
  1306
  1307 9081 AD 7E 21			lda CHUNKTAG+3
  1308 9084 49 64			eor #$64
  1309 9086 D0 55			jne l_029B
  1310 9088 AD 7D 21			lda CHUNKTAG+2
  1311 908B 49 68			eor #$68
  1312 908D D0 4E			jne l_029B
  1313 908F AD 7C 21			lda CHUNKTAG+1
  1314 9092 49 54			eor #$54
  1315 9094 D0 47			jne l_029B
  1316 9096 AD 7B 21			lda CHUNKTAG
  1317 9099 49 4D			eor #$4D
  1318 909B D0 40			jne l_029B
  1319
  1320 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 40
  1321
  1322 909D 20 1D 8F			jsr READWORDBI
  1323 90A0 AD 8C 21			lda READWORDBI.RESULT
  1324 90A3 8D 4B 21			sta FORMAT
  1325
  1326 				; optimize OK (loadmid.inc), line = 41
  1327
  1328 90A6 F0 0C			jeq l_02BE
  1329 90A8 C9 01			cmp #$01
  1330 90AA F0 08			jeq l_02BE
  1331 90AC A9 64			lda #$64
  1332 90AE 8D 6D 21			sta RESULT
  1333 90B1 4C 1A 93			jmp @exit					; exit
  1334 90B4			l_02BE
  1335
  1336 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 42
  1337
  1338 90B4 20 1D 8F			jsr READWORDBI
  1339 90B7 AD 8C 21			lda READWORDBI.RESULT
  1340 90BA 8D 4C 21			sta TOTALTRACKS
  1341
  1342 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 43
  1343
  1344 90BD 20 1D 8F			jsr READWORDBI
  1345 90C0 AD 8C 21			lda READWORDBI.RESULT
  1346 90C3 8D 7F 21			sta V
  1347 90C6 AD 8D 21			lda READWORDBI.RESULT+1
  1348 90C9 8D 80 21			sta V+1
  1349
  1350 				; optimize OK (loadmid.inc), line = 44
  1351
  1352 90CC 30 0C			jmi l_02E2
  1353
  1354 				; optimize OK (loadmid.inc), line = 45
  1355
  1356 90CE AD 7F 21			lda V
  1357 90D1 8D 4D 21			sta TICKDIV
  1358 90D4 AD 80 21			lda V+1
  1359 90D7 8D 4E 21			sta TICKDIV+1
  1360 90DA			l_02E2
  1361 90DA 4C C8 92			jmp l_02F3
  1362 90DD			l_029B
  1363
  1364 				; optimize OK (loadmid.inc), line = 60
  1365
  1366 90DD AD 7E 21			lda CHUNKTAG+3
  1367 90E0 49 6B			eor #$6B
  1368 90E2 F0 03 4C C8 92		jne l_0303
  1369 90E7 AD 7D 21			lda CHUNKTAG+2
  1370 90EA 49 72			eor #$72
  1371 90EC F0 03 4C C8 92		jne l_0303
  1372 90F1 AD 7C 21			lda CHUNKTAG+1
  1373 90F4 49 54			eor #$54
  1374 90F6 F0 03 4C C8 92		jne l_0303
  1375 90FB AD 7B 21			lda CHUNKTAG
  1376 90FE 49 4D			eor #$4D
  1377 9100 F0 03 4C C8 92		jne l_0303
  1378
  1379 				; optimize FAIL (0, loadmid.inc), line = 62
  1380
  1381 9105 EE 7A 21			inc TRACKCOUNT
  1382
  1383 				; optimize OK (loadmid.inc), line = 64
  1384
  1385 9108 AC 8A 21 84 82 AC + 	mwy TRKDATA :bp2
  1386 9112 A0 00			ldy #$00
  1387 9114 98				tya
  1388 9115 91 82			sta (:bp2),y
  1389
  1390 				; optimize OK (loadmid.inc), line = 65
  1391
  1392 9117 A0 01			ldy #$01
  1393 9119 A5 E1			lda _BANK
  1394 911B 91 82			sta (:bp2),y
  1395
  1396 				; optimize OK (loadmid.inc), line = 66
  1397
  1398 911D C8				iny
  1399 911E A5 E2			lda _ADR
  1400 9120 91 82			sta (:bp2),y
  1401 9122 C8				iny
  1402 9123 A5 E3			lda _ADR+1
  1403 9125 91 82			sta (:bp2),y
  1404
  1405 				; optimize OK (loadmid.inc), line = 67
  1406
  1407 9127 C8				iny
  1408 9128 A9 00			lda #$00
  1409 912A 91 82			sta (:bp2),y
  1410 912C C8				iny
  1411 912D 91 82			sta (:bp2),y
  1412 912F C8				iny
  1413 9130 91 82			sta (:bp2),y
  1414 9132 C8				iny
  1415 9133 91 82			sta (:bp2),y
  1416
  1417 				; --- WhileProlog
  1418 9135 4C A7 92			jmp l_031D
  1419 9138			l_031E
  1420
  1421 				; optimize FAIL (':TMP', loadmid.inc), line = 71
  1422
  1423 9138 AD 65 21			lda LOADPROCESS
  1424 913B 85 91			sta :TMP+1
  1425 913D AD 66 21			lda LOADPROCESS+1
  1426 9140 85 92			sta :TMP+2
  1427 9142 A9 4C			lda #$4C
  1428 9144 85 90			sta :TMP
  1429 9146 E8				inx
  1430 9147 AD 7A 21 95 94		mva TRACKCOUNT :STACKORIGIN,x
  1431 914C 20 90 00			jsr :TMP
  1432
  1433 				; optimize FAIL ('MEMBOUNDCHECK', loadmid.inc), line = 72
  1434
  1435 914F 20 DD 8E			jsr MEMBOUNDCHECK
  1436 9152 AD 07 20			lda SYSTEM.IORESULT
  1437 9155 C9 01			cmp #$01
  1438 9157 F0 08			jeq l_0335
  1439 9159 A9 65			lda #$65
  1440 915B 8D 6D 21			sta RESULT
  1441 915E 4C 1A 93			jmp @exit					; exit
  1442 9161			l_0335
  1443
  1444 				; optimize OK (loadmid.inc), line = 74
  1445
  1446 9161				.LOCAL
  1447 9161 AD 88 21			lda LEN+3
  1448 9164 38 E9 00			sub #$00
  1449 9167 D0 1F			bne L4
  1450 9169 AD 87 21			lda LEN+2
  1451 916C C9 00			cmp #$00
  1452 916E D0 0C			bne L1
  1453 9170 AD 86 21			lda LEN+1
  1454 9173 C9 00			cmp #$00
  1455 9175 D0 05			bne L1
  1456 9177 AD 85 21			lda LEN
  1457 917A C9 FF			cmp #$FF
  1458 917C F0 10		L1	beq L5
  1459 917E B0 04			bcs L3
  1460 9180 A9 FF			lda #$FF
  1461 9182 D0 0A			bne L5
  1462 9184 A9 01		L3	lda #$01
  1463 9186 D0 06			bne L5
  1464 9188 50 04		L4	bvc L5
  1465 918A 49 FF			eor #$FF
  1466 918C 09 01			ora #$01
  1467 918E			L5
  1468 					.ENDL
  1469 918E 30 0A			jmi l_034C
  1470 9190 F0 08			jeq l_034C
  1471 9192 A9 FF			lda #$FF
  1472 9194 8D 89 21			sta LOADSIZE
  1473 9197 4C A0 91			jmp l_035A
  1474 919A			l_034C
  1475 919A AD 85 21			lda LEN
  1476 919D 8D 89 21			sta LOADSIZE
  1477 91A0			l_035A
  1478
  1479 				; optimize OK (loadmid.inc), line = 75
  1480
  1481 91A0 A5 E2			lda _ADR
  1482 91A2 18 6D 89 21			add LOADSIZE
  1483 91A6 8D 83 21			sta ENDADR
  1484 91A9 A5 E3			lda _ADR+1
  1485 91AB 69 00			adc #$00
  1486 91AD 8D 84 21			sta ENDADR+1
  1487
  1488 				; optimize OK (loadmid.inc), line = 76
  1489
  1490 91B0 A5 E1			lda _BANK
  1491 91B2 D0 3C			jne l_037B
  1492
  1493 				; optimize OK (loadmid.inc), line = 78
  1494
  1495 91B4 AD 84 21			lda ENDADR+1
  1496 91B7 10 0F			jpl l_0398
  1497 91B9 C9 A4			cmp #$A4
  1498 91BB B0 0B			jcs l_0398
  1499
  1500 				; optimize OK (loadmid.inc), line = 79
  1501
  1502 91BD A9 00			lda #$00
  1503 91BF 38 E5 E2			sub _ADR
  1504 91C2 8D 89 21			sta LOADSIZE
  1505 91C5 4C ED 91			jmp l_03AB
  1506 91C8			l_0398
  1507
  1508 				; optimize OK (loadmid.inc), line = 80
  1509
  1510 91C8 AD 84 21			lda ENDADR+1
  1511 91CB C9 D0			cmp #$D0
  1512 91CD 90 0F			jcc l_03C7
  1513 91CF C9 D8			cmp #$D8
  1514 91D1 B0 0B			jcs l_03C7
  1515
  1516 				; optimize OK (loadmid.inc), line = 81
  1517
  1518 91D3 A9 00			lda #$00
  1519 91D5 38 E5 E2			sub _ADR
  1520 91D8 8D 89 21			sta LOADSIZE
  1521 91DB 4C ED 91			jmp l_03DA
  1522 91DE			l_03C7
  1523
  1524 				; optimize OK (loadmid.inc), line = 82
  1525
  1526 91DE AD 84 21			lda ENDADR+1
  1527 91E1 C9 FF			cmp #$FF
  1528 91E3 90 08			jcc l_03EB
  1529
  1530 				; optimize OK (loadmid.inc), line = 83
  1531
  1532 91E5 A9 00			lda #$00
  1533 91E7 38 E5 E2			sub _ADR
  1534 91EA 8D 89 21			sta LOADSIZE
  1535 91ED			l_03EB
  1536 91ED			l_03DA
  1537 91ED			l_03AB
  1538 91ED 4C FD 91			jmp l_0400
  1539 91F0			l_037B
  1540
  1541 				; optimize OK (loadmid.inc), line = 86
  1542
  1543 91F0 AD 84 21			lda ENDADR+1
  1544 91F3 10 08			jpl l_0411
  1545
  1546 				; optimize OK (loadmid.inc), line = 87
  1547
  1548 91F5 A9 00			lda #$00
  1549 91F7 38 E5 E2			sub _ADR
  1550 91FA 8D 89 21			sta LOADSIZE
  1551 91FD			l_0411
  1552 91FD			l_0400
  1553
  1554 				; optimize OK (loadmid.inc), line = 89
  1555
  1556 91FD AD 89 21			lda LOADSIZE
  1557 9200 D0 03			jne l_042F
  1558 9202 4C A7 92			jmp c_031E					; continue
  1559 9205			l_042F
  1560 				; BlockRead
  1561
  1562 				; optimize OK (loadmid.inc), line = 91
  1563
  1564 9205 AC 1B 93 84 82 AC + 	mwy F :bp2
  1565 920F A0 06			ldy #s@file.buffer
  1566 9211 AD 79 98			lda RBUF
  1567 9214 91 82			sta (:bp2),y
  1568 9216 C8				iny
  1569 9217 AD 7A 98			lda RBUF+1
  1570 921A 91 82			sta (:bp2),y
  1571 921C A0 08			ldy #s@file.nrecord
  1572 921E AD 89 21			lda LOADSIZE
  1573 9221 91 82			sta (:bp2),y
  1574 9223 C8				iny
  1575 9224 A9 00			lda #$00
  1576 9226 91 82			sta (:bp2),y
  1577 9228 A0 0A			ldy #s@file.numread
  1578 922A A9 7F			lda <V
  1579 922C 91 82			sta (:bp2),y
  1580 922E C8				iny
  1581 922F A9 21			lda >V
  1582 9231 91 82			sta (:bp2),y
  1583
  1584 9233 8A 48			txa:pha
  1585 9235 18				clc
  1586 					@readfile F, #135
  1586 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1586 9236 AC 1C 93		 LDY F+1
  1586 9239 AD 1B 93		 LDA F
  1586 923C A2 87		 LDX# 135
  1586 923E 20 77 81		 JSR @READFILE
  1587 9241 68 AA			pla:tax
  1588
  1589 				; optimize OK (loadmid.inc), line = 92
  1590
  1591 9243 AD 80 21			lda V+1
  1592 9246 D0 06			bne @+
  1593 9248 AD 7F 21			lda V
  1594 924B CD 89 21			cmp LOADSIZE
  1595 				@
  1596 924E F0 09			jeq l_0454
  1597 9250 AD 07 20			lda SYSTEM.IORESULT
  1598 9253 8D 6D 21			sta RESULT
  1599 9256 4C 1A 93			jmp @exit					; exit
  1600 9259			l_0454
  1601
  1602 				; optimize OK (loadmid.inc), line = 94
  1603
  1604 9259 A9 00			lda #$00
  1605 925B 85 88			sta SYSTEM.MOVE_0103.SOURCE
  1606 925D A9 06			lda #$06
  1607 925F 85 89			sta SYSTEM.MOVE_0103.SOURCE+1
  1608 9261 A5 E2			lda _PTR
  1609 9263 85 8C			sta SYSTEM.MOVE_0103.DEST
  1610 9265 A5 E3			lda _PTR+1
  1611 9267 85 8D			sta SYSTEM.MOVE_0103.DEST+1
  1612 9269 AD 89 21			lda LOADSIZE
  1613 926C 85 84			sta SYSTEM.MOVE_0103.COUNT
  1614 926E A9 00			lda #$00
  1615 9270 85 85			sta SYSTEM.MOVE_0103.COUNT+1
  1616 9272				.local +MAIN.SYSTEM.MOVE_0103
  1617 9272				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0103.M@INLINE [Source: MIDICar Player.a65]
     4 9272 20 4C 84			jsr @move
Source: MIDICar Player.a65
  1618 					.endl
  1619
  1620 				; optimize OK (loadmid.inc), line = 95
  1621
  1622 9275 A5 E2			lda _ADR
  1623 9277 18 6D 7F 21			add V
  1624 927B 85 E2			sta _ADR
  1625 927D A5 E3			lda _ADR+1
  1626 927F 6D 80 21			adc V+1
  1627 9282 85 E3			sta _ADR+1
  1628
  1629 				; optimize OK (loadmid.inc), line = 96
  1630
  1631 9284 AD 85 21			lda LEN
  1632 9287 38 ED 7F 21			sub V
  1633 928B 8D 85 21			sta LEN
  1634 928E AD 86 21			lda LEN+1
  1635 9291 ED 80 21			sbc V+1
  1636 9294 8D 86 21			sta LEN+1
  1637 9297 AD 87 21			lda LEN+2
  1638 929A E9 00			sbc #$00
  1639 929C 8D 87 21			sta LEN+2
  1640 929F AD 88 21			lda LEN+3
  1641 92A2 E9 00			sbc #$00
  1642 92A4 8D 88 21			sta LEN+3
  1643 92A7			c_031E
  1644 92A7			l_031D
  1645
  1646 				; optimize OK (loadmid.inc), line = 69
  1647
  1648 92A7 AD 88 21			lda LEN+3
  1649 92AA 30 0E			bmi @+
  1650 92AC 0D 87 21			ora LEN+2
  1651 92AF 0D 86 21			ora LEN+1
  1652 92B2 0D 85 21			ora LEN
  1653 92B5 F0 03 4C 38 91		jne l_031E
  1654 				@
  1655
  1656 				; optimize OK (loadmid.inc), line = 99
  1657
  1658 92BA AD 8A 21			lda TRKDATA
  1659 92BD 18 69 09			add #$09
  1660 92C0 8D 8A 21			sta TRKDATA
  1661 92C3 90 03			scc
  1662 92C5 EE 8B 21			inc TRKDATA+1
  1663 92C8			l_0303
  1664 92C8			l_02F3
  1665 92C8			l_0266
  1666
  1667 				; optimize FAIL (1, loadmid.inc), line = 33
  1668
  1669 92C8 E8				inx
  1670 92C9 A0 01			ldy #1
  1671 92CB AD 07 20			lda SYSTEM.IORESULT
  1672 92CE C9 01			cmp #$01
  1673 92D0 F0 01			beq @+
  1674 92D2 88				dey
  1675 				@
  1676 92D3 94 94			sty :STACKORIGIN,x
  1677 92D5 AD 1B 93			lda F
  1678 92D8 8D 17 20			sta SYSTEM.EOF.F
  1679 92DB AD 1C 93			lda F+1
  1680 92DE 8D 18 20			sta SYSTEM.EOF.F+1
  1681 92E1 20 16 8D			jsr SYSTEM.EOF
  1682 92E4 E8				inx
  1683 92E5 AD 19 20 95 94		mva SYSTEM.EOF.RESULT :STACKORIGIN,x
  1684 92EA 20 9C 83			jsr notBOOLEAN
  1685 92ED 20 D7 83			jsr andAL_CL
  1686 92F0 CA				dex
  1687 92F1 CA				dex
  1688 92F2 A0 01			ldy #1
  1689 92F4 AD 7A 21			lda TRACKCOUNT
  1690 92F7 CD 4C 21			cmp TOTALTRACKS
  1691 92FA 90 01			bcc @+
  1692 92FC 88				dey
  1693 				@
  1694 92FD 98				tya
  1695 92FE 35 95			and :STACKORIGIN+1,x
  1696 9300 95 95			sta :STACKORIGIN+1,x
  1697 9302 F0 03 4C 1C 90		jne l_0267
  1698 9307			b_0267
  1699 				; CloseFile
  1700
  1701 9307 8A 48			txa:pha
  1702 9309 18				clc
  1703 					@closefile F
  1703 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1703 930A AC 1C 93		 LDY F+1
  1703 930D AD 1B 93		 LDA F
  1703 9310 20 44 81		 JSR @CLOSEFILE
  1704 9313 68 AA			pla:tax
  1705
  1706 				; optimize OK (loadmid.inc), line = 103
  1707
  1708 9315 A9 00			lda #$00
  1709 9317 8D 6D 21			sta RESULT
  1710 931A			@exit
  1711
  1712 				; ------------------------------------------------------------
  1713
  1714 = 216B			FN	= DATAORIGIN+$016B
  1715 = 216D			RESULT	= DATAORIGIN+$016D
  1716 = 00FF			LOADBUF_SIZE	= $FF
  1717 931A			.var F	= DATAORIGIN+$016E .word
  1718 = 217A			TRACKCOUNT	= DATAORIGIN+$017A
  1719 = 217B			CHUNKTAG	= DATAORIGIN+$017B
  1720 = 217F			V	= DATAORIGIN+$017F
  1721 = 2181			TOP	= DATAORIGIN+$0181
  1722 = 2183			ENDADR	= DATAORIGIN+$0183
  1723 = 2185			LEN	= DATAORIGIN+$0185
  1724 = 2189			LOADSIZE	= DATAORIGIN+$0189
  1725 = 218A			TRKDATA	= DATAORIGIN+$018A
  1726 = 2000			TRKDATA.STATUS	= DATAORIGIN+$0000
  1727 = 2001			TRKDATA.BANK	= DATAORIGIN+$0001
  1728 = 2002			TRKDATA.PTR	= DATAORIGIN+$0002
  1729 = 2004			TRKDATA.TRACKTIME	= DATAORIGIN+$0004
  1730 = 2008			TRKDATA._EVENT	= DATAORIGIN+$0008
  1731
  1732 = 216B			@VarData	= FN
  1733 = 001E			@VarDataSize	= 30
  1734
  1735 931A 60				rts						; ret
  1736 = 931B 6E 21		F
  1736 				.endl
  1737
  1738 931D			.local	SETTEMPO					; PROCEDURE
  1739
  1740 				; optimize OK (settempo.inc), line = 10
  1741
  1742 931D A5 F5			lda _TIMERSTATUS
  1743 931F 49 80			eor #$80
  1744 9321 85 F5			sta _TIMERSTATUS
  1745
  1746 				; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 13
  1747
  1748 9323 E8				inx
  1749 9324 AD 4F 21 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  1750 9329 AD 50 21 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  1751 932E AD 51 21 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  1752 9333 AD 52 21 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  1753 9338 E8				inx
  1754 9339 AD 67 21 95 94		mva TEMPOSHIFT :STACKORIGIN,x
  1755 933E AD 68 21 95 A4		mva TEMPOSHIFT+1 :STACKORIGIN+STACKWIDTH,x
  1756 9343 AD 69 21 95 B4		mva TEMPOSHIFT+2 :STACKORIGIN+STACKWIDTH*2,x
  1757 9348 AD 6A 21 95 C4		mva TEMPOSHIFT+3 :STACKORIGIN+STACKWIDTH*3,x
  1758 934D 20 82 83			jsr addEAX_ECX
  1759 9350 AD 4D 21 95 94		mva TICKDIV :STACKORIGIN,x
  1760 9355 AD 4E 21 95 A4		mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
  1761 935A A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1762 935E A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1763 9362 20 FB 84			jsr divmulINT.DIV
  1764 9365 CA				dex
  1765 9366 B5 94			lda :STACKORIGIN,x
  1766 9368 8D 96 21			sta _FREQ
  1767 936B B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1768 936D 8D 97 21			sta _FREQ+1
  1769 9370 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1770 9372 8D 98 21			sta _FREQ+2
  1771 9375 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1772 9377 8D 99 21			sta _FREQ+3
  1773
  1774 				; optimize FAIL ('@I2F_m', settempo.inc), line = 14
  1775
  1776 937A AD 96 21 95 94		mva _FREQ :STACKORIGIN,x
  1777 937F AD 97 21 95 A4		mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1778 9384 AD 98 21 95 B4		mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1779 9389 AD 99 21 95 C4		mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1780 938E E8				inx
  1781 938F A9 00 95 94			mva #$00 :STACKORIGIN,x
  1782 9393 A9 24 95 A4			mva #$24 :STACKORIGIN+STACKWIDTH,x
  1783 9397 A9 74 95 B4			mva #$74 :STACKORIGIN+STACKWIDTH*2,x
  1784 939B A9 49 95 C4			mva #$49 :STACKORIGIN+STACKWIDTH*3,x
  1785 939F 20 AC 8A			jsr @I2F_m
  1786 93A2 20 6E 89			jsr @FDIV
  1787 93A5 CA				dex
  1788 93A6 B5 94			lda :STACKORIGIN,x
  1789 93A8 8D 92 21			sta FREQ
  1790 93AB B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1791 93AD 8D 93 21			sta FREQ+1
  1792 93B0 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1793 93B2 8D 94 21			sta FREQ+2
  1794 93B5 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1795 93B7 8D 95 21			sta FREQ+3
  1796
  1797 				; optimize FAIL ('@FDIV', settempo.inc), line = 15
  1798
  1799 93BA A9 00 95 94			mva #$00 :STACKORIGIN,x
  1800 93BE A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1801 93C2 A9 80 95 B4			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  1802 93C6 A9 3F 95 C4			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  1803 93CA E8				inx
  1804 93CB AD 92 21 95 94		mva FREQ :STACKORIGIN,x
  1805 93D0 AD 93 21 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1806 93D5 AD 94 21 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1807 93DA AD 95 21 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1808 93DF 20 6E 89			jsr @FDIV
  1809 93E2 CA				dex
  1810 93E3 B5 94			lda :STACKORIGIN,x
  1811 93E5 8D 92 21			sta FREQ
  1812 93E8 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1813 93EA 8D 93 21			sta FREQ+1
  1814 93ED B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1815 93EF 8D 94 21			sta FREQ+2
  1816 93F2 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1817 93F4 8D 95 21			sta FREQ+3
  1818
  1819 				; optimize FAIL ('@FDIV', settempo.inc), line = 24
  1820
  1821 93F7 A9 F5 95 94			mva #$F5 :STACKORIGIN,x
  1822 93FB A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1823 93FF A9 7A 95 B4			mva #$7A :STACKORIGIN+STACKWIDTH*2,x
  1824 9403 A9 43 95 C4			mva #$43 :STACKORIGIN+STACKWIDTH*3,x
  1825 9407 E8				inx
  1826 9408 AD 92 21 95 94		mva FREQ :STACKORIGIN,x
  1827 940D AD 93 21 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1828 9412 AD 94 21 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1829 9417 AD 95 21 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1830 941C 20 6E 89			jsr @FDIV
  1831 941F CA				dex
  1832 9420 B5 94			lda :STACKORIGIN,x
  1833 9422 8D 9B 21			sta RATIO
  1834 9425 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1835 9427 8D 9C 21			sta RATIO+1
  1836 942A B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1837 942C 8D 9D 21			sta RATIO+2
  1838 942F B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1839 9431 8D 9E 21			sta RATIO+3
  1840
  1841 				; optimize FAIL ('@F2I', settempo.inc), line = 25
  1842
  1843 9434 A9 01 95 94			mva #$01 :STACKORIGIN,x
  1844 9438 E8				inx
  1845 9439 AD 9B 21 95 94		mva RATIO :STACKORIGIN,x
  1846 943E AD 9C 21 95 A4		mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
  1847 9443 AD 9D 21 95 B4		mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
  1848 9448 AD 9E 21 95 C4		mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
  1849 944D 20 FD 89			jsr @F2I
  1850 9450 A9 00 95 A3			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  1851 9454 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1852 9458 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1853 945C B5 93			lda :STACKORIGIN-1,x
  1854 945E 18 75 94			add :STACKORIGIN,x
  1855 9461 8D 9F 21			sta _RATIO
  1856 9464 CA				dex
  1857 9465 CA				dex
  1858
  1859 				; optimize OK (settempo.inc), line = 26
  1860
  1861 9466 AD 9F 21			lda _RATIO
  1862 9469 C9 10			cmp #$10
  1863 946B 90 12			jcc l_04F4
  1864 946D A9 00			lda #$00
  1865 946F 8D 9B 21			sta RATIO
  1866 9472 8D 9C 21			sta RATIO+1
  1867 9475 A9 70			lda #$70
  1868 9477 8D 9D 21			sta RATIO+2
  1869 947A A9 41			lda #$41
  1870 947C 8D 9E 21			sta RATIO+3
  1871 947F			l_04F4
  1872
  1873 				; optimize OK (settempo.inc), line = 29
  1874
  1875 947F A5 F5			lda _TIMERSTATUS
  1876 9481 29 C0			and #$C0
  1877 9483 0D 9F 21			ora _RATIO
  1878 9486 85 F5			sta _TIMERSTATUS
  1879
  1880 				; optimize OK (settempo.inc), line = 30
  1881
  1882 9488 A9 01			lda #$01
  1883 948A 85 F4			sta _SUBCNT
  1884
  1885 				; optimize FAIL ('@I2F', settempo.inc), line = 32
  1886
  1887 948C E8				inx
  1888 948D A9 00 95 94			mva #$00 :STACKORIGIN,x
  1889 9491 A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1890 9495 E8				inx
  1891 9496 AD 92 21 95 94		mva FREQ :STACKORIGIN,x
  1892 949B AD 93 21 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1893 94A0 AD 94 21 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1894 94A5 AD 95 21 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1895 94AA E8				inx
  1896 94AB AD 9F 21 95 94		mva _RATIO :STACKORIGIN,x
  1897 94B0 A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1898 94B4 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1899 94B8 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1900 94BC 20 87 8A			jsr @I2F
  1901 94BF 20 B7 88			jsr @FMUL
  1902 94C2 CA				dex
  1903 94C3 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1904 94C7 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1905 94CB 20 AC 8A			jsr @I2F_m
  1906 94CE 20 6E 89			jsr @FDIV
  1907 94D1 CA				dex
  1908 94D2 20 D7 86			jsr @FROUND
  1909 94D5 20 FD 89			jsr @F2I
  1910 94D8 B5 94			lda :STACKORIGIN,x
  1911 94DA 8D 9A 21			sta FDIV
  1912 94DD CA				dex
  1913
  1914 				; optimize OK (settempo.inc), line = 39
  1915
  1916 94DE A5 F5			lda _TIMERSTATUS
  1917 94E0 49 80			eor #$80
  1918 94E2 85 F5			sta _TIMERSTATUS
  1919
  1920 				; -------------------  ASM Block 00000057  -------------------
  1921
  1922 94E4 78			    sei  // disable IRQ
  1923 				  // reset POKEY
  1924 94E5 A9 00		    lda #$00
  1925 94E7 A0 03		    ldy #$03
  1926 94E9 8D 08 D2		    sta AUDCTL
  1927 94EC 8D 01 D2		    sta AUDC1
  1928 94EF 8C 0F D2		    sty SKCTL
  1929 				  // setup TIMER1
  1930 94F2 8D 08 D2		    sta AUDCTL
  1931 94F5 AD 9A 21 8D 00 D2	    mva FDIV AUDF1
  1932 				  // initialize IRQ for TIMER1
  1933 				    // lda irqens
  1934 				    // ora #$01
  1935 				    // sta irqens
  1936 				    // sta irqen
  1937 				  // start timer strobe
  1938 94FB 8D 09 D2		    sta stimer
  1939
  1940 94FE 58			    cli  // enable IRQ
  1941 				  
  1942 				; ------------------------------------------------------------
  1943
  1944 = 2192			FREQ	= DATAORIGIN+$0192
  1945 = 2196			_FREQ	= DATAORIGIN+$0196
  1946 = 219A			FDIV	= DATAORIGIN+$019A
  1947 = 219B			RATIO	= DATAORIGIN+$019B
  1948 = 219F			_RATIO	= DATAORIGIN+$019F
  1949
  1950 = 2192			@VarData	= FREQ
  1951 = 000E			@VarDataSize	= 14
  1952
  1953 94FF			@exit
  1954 					.ifdef @new
  1955 					lda <@VarData
  1956 					sta :ztmp
  1957 					lda >@VarData
  1958 					ldy #@VarDataSize-1
  1959 					jmp @FreeMem
  1960 					els
  1961 94FF 60				rts						; ret
  1962 					eif
  1963 				.endl
  1964
  1965 9500			.local	PROCESSTRACK					; PROCEDURE | KEEP
  1966
  1967 9500 4C BD 96			jmp l_052E
  1968
  1969 9503			.local	READB						; PROCEDURE | INLINE
  1970
  1971 					.MACRO m@INLINE
  1972 				
  1973 				; optimize OK (processtrack.inc), line = 11
  1974 				
  1975 					ldy #$00
  1976 					lda (_PTR),y
  1977 					sta EVENT
  1978 				
  1979 				; optimize FAIL (0, processtrack.inc), line = 12
  1980 				
  1981 					inc _ADR
  1982 					sne
  1983 					inc _ADR+1
  1984 				
  1985 				; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 13
  1986 				
  1987 					jsr MEMBOUNDCHECK
  1988 					.ENDM
  1989 9503			@exit
  1990 				.endl
  1991
  1992 9503			.local	READVARL					; PROCEDURE | ASSEMBLER
  1993
  1994 				; -------------------  ASM Block 00000058  -------------------
  1995
  1996 9503			    icl 'midfile/asms/readvar.asm'
Source: readvar.asm
     1 = 00F6			A equ _delta;
     2 = 00F7			B equ _delta+1;
     3 = 00F8			C equ _delta+2;
     4 = 00F9			D equ _delta+3;
     5
     6 				  .MACRO m@read2A
     7 				    ldy #0
     8 				    lda (_PTR),y
     9 				    sta A
    10 				    inc _ADR
    11 				    sne
    12 				    inc _ADR+1
    13 				    jsr MEMBOUNDCHECK
    14 				    lda A
    15 				  .ENDM
    16
    17 9503 A0 00		  ldy #0
    18 9505 84 F6		  sty A
    19 9507 84 F7		  sty B
    20 9509 84 F8		  sty C
    21 950B 84 F9		  sty D
    22
    23 				// read block
    24
    25 				// read 1st byte to A
    26 950D			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 950D A0 00		    ldy #0
     2 950F B1 E2		    lda (_PTR),y
     3 9511 85 F6		    sta A
     4 9513 E6 E2		    inc _ADR
     5 9515 D0 02		    sne
     6 9517 E6 E3		    inc _ADR+1
     7 9519 20 DD 8E		    jsr MEMBOUNDCHECK
     8 951C A5 F6		    lda A
Source: readvar.asm
    27
    28 951E 10 53		  bpl endRead
    29
    30 				// move A to B and read 2nd byte to A
    31 				// B <- A = 4th readed byte
    32 9520 29 7F			and #$7F
    33 9522 85 F7			sta B
    34
    35 				// read 2nd byte
    36 9524			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 9524 A0 00		    ldy #0
     2 9526 B1 E2		    lda (_PTR),y
     3 9528 85 F6		    sta A
     4 952A E6 E2		    inc _ADR
     5 952C D0 02		    sne
     6 952E E6 E3		    inc _ADR+1
     7 9530 20 DD 8E		    jsr MEMBOUNDCHECK
     8 9533 A5 F6		    lda A
Source: readvar.asm
    37
    38 9535 10 3C		  bpl endRead
    39
    40 				// mova B to C, A to B and read 3rd byte to A
    41 				// C <- B <- A = 4th readed byte
    42 9537 A5 F7			lda B
    43 9539 85 F8			sta C
    44 953B A5 F6			lda A
    45 953D 29 7F			and #$7F
    46 953F 85 F7			sta B
    47
    48 				// read 3rd
    49 9541			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 9541 A0 00		    ldy #0
     2 9543 B1 E2		    lda (_PTR),y
     3 9545 85 F6		    sta A
     4 9547 E6 E2		    inc _ADR
     5 9549 D0 02		    sne
     6 954B E6 E3		    inc _ADR+1
     7 954D 20 DD 8E		    jsr MEMBOUNDCHECK
     8 9550 A5 F6		    lda A
Source: readvar.asm
    50
    51 9552 10 1F		  bpl endRead
    52
    53 				// move C to D, B to C, A to B and read 4th byte to A
    54 				// D <- C <- B <- A = 4th readed byte
    55 9554 A5 F8			lda C
    56 9556 85 F9			sta D
    57 9558 A5 F7			lda B
    58 955A 85 F8			sta C
    59 955C A5 F6			lda A
    60 955E 29 7F			and #$7F
    61 9560 85 F7			sta B
    62
    63 				// read 4th
    64 9562			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 9562 A0 00		    ldy #0
     2 9564 B1 E2		    lda (_PTR),y
     3 9566 85 F6		    sta A
     4 9568 E6 E2		    inc _ADR
     5 956A D0 02		    sne
     6 956C E6 E3		    inc _ADR+1
     7 956E 20 DD 8E		    jsr MEMBOUNDCHECK
     8 9571 A5 F6		    lda A
Source: readvar.asm
    65
    66 				// end read block
    67 9573			endRead:
    68
    69 				// decode block
    70 				// 'A' stays as it is
    71
    72 				// 'B' if geather than zero, lets decode
    73 9573 A5 F7		  lda B
    74 9575 F0 0A		  beq decodeC
    75
    76 				// 76543210
    77 				// 0bbbbbbb and %1
    78 				// 0000000b
    79 				//        |
    80 				// +------+ 7:asl
    81 				// v
    82 				// b0000000 ora A
    83 				// baaaaaaa
    84
    85 9577 46 F7		  lsr B
    86 9579 90 06		  bcc decodeC
    87
    88 957B A5 F6		  lda A
    89 957D 09 80		  ora #$80
    90 957F 85 F6		  sta A
    91
    92 9581			decodeC:
    93 				// 'C' if geather than zero, lets decode
    94 9581 A5 F8		  lda C
    95 9583 F0 12		  beq decodeD
    96
    97 				// 76543210
    98 				// 0ccccccc and %11
    99 				// 000000cc
   100 				//       ||
   101 				// +-----+| 6:asl
   102 				// |+-----+
   103 				// vv
   104 				// cc000000 ora B
   105 				// ccbbbbbb
   106 9585 29 03		  and #%11    // 2
   107 9587 F0 08		  beq noOrC   // 2**
   108 9589 A8			  tay         // 2
   109 958A B9 AF 95		  lda OrC,y   // 4*
   110 958D 05 F7		  ora B       // 3
   111 958F 85 F7		  sta B       // 3
   112
   113 9591			noOrC:
   114 9591 A5 F8		  lda C       // 3
   115 9593 4A			  lsr @       // 2
   116 9594 4A			  lsr @       // 2
   117 9595 85 F8		  sta C       // 3
   118 				              //=26*+**
   119
   120 9597			decodeD:
   121 				// 'D' if geather than zero, lets decode
   122 9597 A5 F9		  lda D
   123 9599 F0 13		  beq endDecode
   124
   125 				// 76543210
   126 				// 0ddddddd and %111
   127 				// 00000ddd
   128 				//      |||
   129 				// +----+||
   130 				// |+----+| 5:asl
   131 				// ||+----+
   132 				// vvv
   133 				// ddd00000 ora C
   134 				// dddccccc
   135
   136 959B 29 07		  and #%111   // 2
   137 959D F0 08		  beq noOrD   // 2**
   138 959F A8			  tay         // 2
   139 95A0 B9 B3 95		  lda OrD,y   // 4*
   140 95A3 05 F8		  ora C       // 3
   141 95A5 85 F8		  sta C       // 3
   142
   143 95A7			noOrD:
   144 95A7 A5 F9		  lda D       // 3
   145 95A9 4A			  lsr @       // 2
   146 95AA 4A			  lsr @       // 2
   147 95AB 4A			  lsr @       // 2
   148 95AC 85 F9		  sta D       // 3
   149 				              //=28*+**
   150 95AE			endDecode:
   151 95AE 60			  rts
   152
   153 95AF			OrC:
   154 95AF 00			  dta %00000000
   155 95B0 40			  dta %01000000
   156 95B1 80			  dta %10000000
   157 95B2 C0			  dta %11000000
   158
   159 95B3			OrD:
   160 95B3 00			  dta %00000000
   161 95B4 20			  dta %00100000
   162 95B5 40			  dta %01000000
   163 95B6 60			  dta %01100000
   164 95B7 80			  dta %10000000
   165 95B8 A0			  dta %10100000
   166 95B9 C0			  dta %11000000
   167 95BA E0			  dta %11100000
  1997 				  
  1998 95BB			@exit
  1999 					.ifdef @new
  2000 					lda <@VarData
  2001 					sta :ztmp
  2002 					lda >@VarData
  2003 					ldy #@VarDataSize-1
  2004 					jmp @FreeMem
  2005 					els
  2006 95BB 60				rts						; ret
  2007 					eif
  2008 				.endl
  2009
  2010 95BC			.local	READ24						; PROCEDURE | ASSEMBLER
  2011
  2012 				; -------------------  ASM Block 00000059  -------------------
  2013
  2014 95BC			    icl 'midfile/asms/read24bigendian.pas'
Source: read24bigendian.pas
     1 				  .MACRO m@readByte storeTo
     2 				    ldy #0
     3 				    lda (_PTR),y
     4 				    sta :storeTo
     5 				    inc _ADR
     6 				    sne
     7 				    inc _ADR+1
     8 				    jsr MEMBOUNDCHECK
     9 				  .ENDM
    10
    11 95BC			  m@readByte _delta+2
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 95BC A0 00		    ldy #0
     2 95BE B1 E2		    lda (_PTR),y
     3 95C0 85 F8		    sta _DELTA+2
     4 95C2 E6 E2		    inc _ADR
     5 95C4 D0 02		    sne
     6 95C6 E6 E3		    inc _ADR+1
     7 95C8 20 DD 8E		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    12 95CB			  m@readByte _delta+1
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 95CB A0 00		    ldy #0
     2 95CD B1 E2		    lda (_PTR),y
     3 95CF 85 F7		    sta _DELTA+1
     4 95D1 E6 E2		    inc _ADR
     5 95D3 D0 02		    sne
     6 95D5 E6 E3		    inc _ADR+1
     7 95D7 20 DD 8E		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    13 95DA			  m@readByte _delta+0
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 95DA A0 00		    ldy #0
     2 95DC B1 E2		    lda (_PTR),y
     3 95DE 85 F6		    sta _DELTA+0
     4 95E0 E6 E2		    inc _ADR
     5 95E2 D0 02		    sne
     6 95E4 E6 E3		    inc _ADR+1
     7 95E6 20 DD 8E		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    14 95E9 A9 00		  lda #0
    15 95EB 85 F9		  sta _delta+3
  2015 				  
  2016 95ED			@exit
  2017 					.ifdef @new
  2018 					lda <@VarData
  2019 					sta :ztmp
  2020 					lda >@VarData
  2021 					ldy #@VarDataSize-1
  2022 					jmp @FreeMem
  2023 					els
  2024 95ED 60				rts						; ret
  2025 					eif
  2026 				.endl
  2027
  2028 95EE			.local	EVENTMIDI3					; PROCEDURE
  2029
  2030 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 4
  2031
  2032 95EE 20 34 8E			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2033
  2034 				; optimize FAIL ('m@INLINE', events.inc), line = 5
  2035
  2036 95F1				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2037 95F1				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 95F1 A0 00			ldy #$00
     5 95F3 B1 E2			lda (_PTR),y
     6 95F5 85 FF			sta EVENT
    10 95F7 E6 E2			inc _ADR
    11 95F9 D0 02			sne
    12 95FB E6 E3			inc _ADR+1
    16 95FD 20 DD 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2038 					.endl
  2039 9600 20 34 8E			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2040
  2041 				; optimize FAIL ('m@INLINE', events.inc), line = 6
  2042
  2043 9603				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2044 9603				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9603 A0 00			ldy #$00
     5 9605 B1 E2			lda (_PTR),y
     6 9607 85 FF			sta EVENT
    10 9609 E6 E2			inc _ADR
    11 960B D0 02			sne
    12 960D E6 E3			inc _ADR+1
    16 960F 20 DD 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2045 					.endl
  2046 9612 20 34 8E			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2047
  2048 				; optimize OK (events.inc), line = 15
  2049
  2050 9615 A5 FF			lda EVENT
  2051 9617 F0 12			jeq l_0569
  2052 9619 A5 E8			lda _EVENT
  2053 961B 29 F0			and #$F0
  2054 961D C9 90			cmp #$90
  2055 961F D0 0A			jne l_0569
  2056
  2057 				; optimize OK (events.inc), line = 16
  2058
  2059 9621 A5 E8			lda _EVENT
  2060 9623 29 0F			and #$0F
  2061 9625 A8				tay
  2062 9626 A5 FF			lda MC6850.MC_BYTE
  2063 9628 99 53 21			sta adr.CHNVOLUME,y
  2064 962B			l_0569
  2065 962B			@exit
  2066 					.ifdef @new
  2067 					lda <@VarData
  2068 					sta :ztmp
  2069 					lda >@VarData
  2070 					ldy #@VarDataSize-1
  2071 					jmp @FreeMem
  2072 					els
  2073 962B 60				rts						; ret
  2074 					eif
  2075 				.endl
  2076
  2077 962C			.local	EVENTMIDI2					; PROCEDURE
  2078
  2079 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 22
  2080
  2081 962C 20 34 8E			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2082
  2083 				; optimize FAIL ('m@INLINE', events.inc), line = 23
  2084
  2085 962F				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2086 962F				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 962F A0 00			ldy #$00
     5 9631 B1 E2			lda (_PTR),y
     6 9633 85 FF			sta EVENT
    10 9635 E6 E2			inc _ADR
    11 9637 D0 02			sne
    12 9639 E6 E3			inc _ADR+1
    16 963B 20 DD 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2087 					.endl
  2088 963E 20 34 8E			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2089 9641			@exit
  2090 					.ifdef @new
  2091 					lda <@VarData
  2092 					sta :ztmp
  2093 					lda >@VarData
  2094 					ldy #@VarDataSize-1
  2095 					jmp @FreeMem
  2096 					els
  2097 9641 60				rts						; ret
  2098 					eif
  2099 				.endl
  2100
  2101 9642			.local	EVENTSYSEX					; PROCEDURE
  2102
  2103 				; optimize FAIL ('READVARL', events.inc), line = 32
  2104
  2105 9642 20 03 95			jsr READVARL
  2106
  2107 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 34
  2108
  2109 9645 20 34 8E			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2110
  2111 				; --- WhileProlog
  2112 9648 4C 5F 96			jmp l_0588
  2113 964B			l_0589
  2114
  2115 				; optimize FAIL ('m@INLINE', events.inc), line = 40
  2116
  2117 964B				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2118 964B				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 964B A0 00			ldy #$00
     5 964D B1 E2			lda (_PTR),y
     6 964F 85 FF			sta EVENT
    10 9651 E6 E2			inc _ADR
    11 9653 D0 02			sne
    12 9655 E6 E3			inc _ADR+1
    16 9657 20 DD 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2119 					.endl
  2120
  2121 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 42
  2122
  2123 965A 20 34 8E			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2124
  2125 				; optimize FAIL (0, events.inc), line = 46
  2126
  2127 965D C6 F6			dec _TMP
  2128 965F			l_0588
  2129
  2130 				; optimize OK (events.inc), line = 38
  2131
  2132 965F A5 F6			lda _TMP
  2133 9661 D0 E8			jne l_0589
  2134 9663			@exit
  2135 					.ifdef @new
  2136 					lda <@VarData
  2137 					sta :ztmp
  2138 					lda >@VarData
  2139 					ldy #@VarDataSize-1
  2140 					jmp @FreeMem
  2141 					els
  2142 9663 60				rts						; ret
  2143 					eif
  2144 				.endl
  2145
  2146 9664			.local	EVENTMETA					; PROCEDURE
  2147
  2148 				; optimize FAIL ('m@INLINE', events.inc), line = 58
  2149
  2150 9664				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2151 9664				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9664 A0 00			ldy #$00
     5 9666 B1 E2			lda (_PTR),y
     6 9668 85 FF			sta EVENT
    10 966A E6 E2			inc _ADR
    11 966C D0 02			sne
    12 966E E6 E3			inc _ADR+1
    16 9670 20 DD 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2152 					.endl
  2153
  2154 				; optimize FAIL ('READVARL', events.inc), line = 59
  2155
  2156 9673 20 03 95			jsr READVARL
  2157
  2158 				; optimize OK (events.inc), line = 61
  2159
  2160 9676 A5 FF			lda EVENT
  2161 9678 C9 2F			cmp #$2F
  2162 967A D0 0B			jne l_05B3
  2163
  2164 				; optimize FAIL (0, events.inc), line = 63
  2165
  2166 967C C6 DF			dec PLAYINGTRACKS
  2167
  2168 				; optimize OK (events.inc), line = 64
  2169
  2170 967E A5 E0			lda _STATUS
  2171 9680 09 40			ora #$40
  2172 9682 85 E0			sta _STATUS
  2173 9684 4C BC 96			jmp l_05CB
  2174 9687			l_05B3
  2175
  2176 				; optimize OK (events.inc), line = 66
  2177
  2178 9687 A5 FF			lda EVENT
  2179 9689 C9 51			cmp #$51
  2180 968B D0 1D			jne l_05DD
  2181
  2182 				; optimize FAIL ('READ24', events.inc), line = 68
  2183
  2184 968D 20 BC 95			jsr READ24
  2185
  2186 				; optimize OK (events.inc), line = 69
  2187
  2188 9690 A5 F6			lda _DELTA
  2189 9692 8D 4F 21			sta MS_PER_QNOTE
  2190 9695 A5 F7			lda _DELTA+1
  2191 9697 8D 50 21			sta MS_PER_QNOTE+1
  2192 969A A5 F8			lda _DELTA+2
  2193 969C 8D 51 21			sta MS_PER_QNOTE+2
  2194 969F A5 F9			lda _DELTA+3
  2195 96A1 8D 52 21			sta MS_PER_QNOTE+3
  2196
  2197 				; optimize FAIL ('SETTEMPO', events.inc), line = 70
  2198
  2199 96A4 20 1D 93			jsr SETTEMPO
  2200 96A7 4C BC 96			jmp l_05ED
  2201 96AA			l_05DD
  2202
  2203 				; --- WhileProlog
  2204 96AA 4C B8 96			jmp l_05EF
  2205 96AD			l_05F0
  2206
  2207 				; optimize FAIL (0, events.inc), line = 85
  2208
  2209 96AD C6 F6			dec _TMP
  2210
  2211 				; optimize FAIL (0, events.inc), line = 86
  2212
  2213 96AF E6 E2			inc _ADR
  2214 96B1 D0 02			sne
  2215 96B3 E6 E3			inc _ADR+1
  2216
  2217 				; optimize FAIL ('MEMBOUNDCHECK', events.inc), line = 87
  2218
  2219 96B5 20 DD 8E			jsr MEMBOUNDCHECK
  2220 96B8			l_05EF
  2221
  2222 				; optimize OK (events.inc), line = 83
  2223
  2224 96B8 A5 F6			lda _TMP
  2225 96BA D0 F1			jne l_05F0
  2226 96BC			l_05ED
  2227 96BC			l_05CB
  2228 96BC			@exit
  2229 					.ifdef @new
  2230 					lda <@VarData
  2231 					sta :ztmp
  2232 					lda >@VarData
  2233 					ldy #@VarDataSize-1
  2234 					jmp @FreeMem
  2235 					els
  2236 96BC 60				rts						; ret
  2237 					eif
  2238 				.endl
  2239 96BD			l_052E
  2240
  2241 				; -------------------  ASM Block 00000060  -------------------
  2242
  2243 				 ldy _bank \ lda $100,y \ sta PORTB 
  2243 96BD A4 E1		 LDY _BANK 
  2243 96BF B9 00 01		 LDA $100,Y 
  2243 96C2 8D 01 D3		 STA PORTB 
  2244 				; --- RepeatUntilProlog
  2245 96C5			l_0607
  2246
  2247 				; optimize OK (processtrack.inc), line = 33
  2248
  2249 96C5 A5 E0			lda _STATUS
  2250 96C7 30 2E			jmi l_061D
  2251
  2252 				; optimize FAIL ('READVARL', processtrack.inc), line = 35
  2253
  2254 96C9 20 03 95			jsr READVARL
  2255
  2256 				; optimize OK (processtrack.inc), line = 36
  2257
  2258 96CC A5 F9			lda _DELTA+3
  2259 96CE 30 24			jmi l_062F
  2260 96D0 05 F8			ora _DELTA+2
  2261 96D2 05 F7			ora _DELTA+1
  2262 96D4 05 F6			ora _DELTA
  2263 96D6 F0 1C			jeq l_062F
  2264
  2265 				; optimize OK (processtrack.inc), line = 38
  2266
  2267 96D8 A5 E4			lda _TRACKTIME
  2268 96DA 18 65 F6			add _DELTA
  2269 96DD 85 E4			sta _TRACKTIME
  2270 96DF A5 E5			lda _TRACKTIME+1
  2271 96E1 65 F7			adc _DELTA+1
  2272 96E3 85 E5			sta _TRACKTIME+1
  2273 96E5 A5 E6			lda _TRACKTIME+2
  2274 96E7 65 F8			adc _DELTA+2
  2275 96E9 85 E6			sta _TRACKTIME+2
  2276 96EB A5 E7			lda _TRACKTIME+3
  2277 96ED 65 F9			adc _DELTA+3
  2278 96EF 85 E7			sta _TRACKTIME+3
  2279 96F1 4C 5F 97			jmp b_0607					; break
  2280 96F4			l_062F
  2281 96F4 4C FD 96			jmp l_0643
  2282 96F7			l_061D
  2283
  2284 				; optimize OK (processtrack.inc), line = 43
  2285
  2286 96F7 A5 E0			lda _STATUS
  2287 96F9 29 7F			and #$7F
  2288 96FB 85 E0			sta _STATUS
  2289 96FD			l_0643
  2290
  2291 				; optimize OK (processtrack.inc), line = 45
  2292
  2293 96FD A0 00			ldy #$00
  2294 96FF B1 E2			lda (_PTR),y
  2295 9701 10 16			jpl l_0666
  2296
  2297 				; optimize FAIL ('m@INLINE', processtrack.inc), line = 47
  2298
  2299 9703				.local READB
  2300 9703				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9703 A0 00			ldy #$00
     5 9705 B1 E2			lda (_PTR),y
     6 9707 85 FF			sta EVENT
    10 9709 E6 E2			inc _ADR
    11 970B D0 02			sne
    12 970D E6 E3			inc _ADR+1
    16 970F 20 DD 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2301 					.endl
  2302 9712 A5 FF			lda EVENT
  2303 9714 85 E8			sta _EVENT
  2304 9716 4C 1D 97			jmp l_0677
  2305 9719			l_0666
  2306
  2307 				; optimize OK (processtrack.inc), line = 50
  2308
  2309 9719 A5 E8			lda _EVENT
  2310 971B 85 FF			sta EVENT
  2311 971D			l_0677
  2312
  2313 				; optimize OK (processtrack.inc), line = 52
  2314
  2315 971D A9 BF			lda #$BF
  2316 971F C5 E8			cmp _EVENT
  2317 9721 90 06			jcc l_068F
  2318
  2319 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 54
  2320
  2321 9723 20 EE 95			jsr EVENTMIDI3
  2322 9726 4C 56 97			jmp l_069A
  2323 9729			l_068F
  2324 9729 A9 DF			lda #$DF
  2325 972B C5 E8			cmp _EVENT
  2326 972D 90 06			jcc l_06AC
  2327
  2328 				; optimize FAIL ('EVENTMIDI2', processtrack.inc), line = 56
  2329
  2330 972F 20 2C 96			jsr EVENTMIDI2
  2331 9732 4C 56 97			jmp l_06B7
  2332 9735			l_06AC
  2333 9735 A9 EF			lda #$EF
  2334 9737 C5 E8			cmp _EVENT
  2335 9739 90 06			jcc l_06C9
  2336
  2337 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 58
  2338
  2339 973B 20 EE 95			jsr EVENTMIDI3
  2340 973E 4C 56 97			jmp l_06D4
  2341 9741			l_06C9
  2342 9741 A9 F7			lda #$F7
  2343 9743 C5 E8			cmp _EVENT
  2344 9745 90 06			jcc l_06E6
  2345
  2346 				; optimize FAIL ('EVENTSYSEX', processtrack.inc), line = 60
  2347
  2348 9747 20 42 96			jsr EVENTSYSEX
  2349 974A 4C 56 97			jmp l_06F1
  2350 974D			l_06E6
  2351 974D A5 E8			lda _EVENT
  2352 974F C9 FF			cmp #$FF
  2353 9751 D0 03			jne l_0703
  2354
  2355 				; optimize FAIL ('EVENTMETA', processtrack.inc), line = 61
  2356
  2357 9753 20 64 96			jsr EVENTMETA
  2358 9756			l_0703
  2359 9756			l_06F1
  2360 9756			l_06D4
  2361 9756			l_06B7
  2362 9756			l_069A
  2363
  2364 				; optimize OK (processtrack.inc), line = 63
  2365
  2366 9756 A5 E0			lda _STATUS
  2367 9758 29 40			and #$40
  2368 975A D0 03 4C C5 96		jeq l_0607
  2369 975F			b_0607
  2370
  2371 				; optimize OK (processtrack.inc), line = 65
  2372
  2373 975F A5 E0			lda _STATUS
  2374 9761 09 80			ora #$80
  2375 9763 85 E0			sta _STATUS
  2376
  2377 				; ------------------------------------------------------------
  2378
  2379 = 00FF			EVENT	= $FF
  2380 9765			@exit
  2381 					.ifdef @new
  2382 					lda <@VarData
  2383 					sta :ztmp
  2384 					lda >@VarData
  2385 					ldy #@VarDataSize-1
  2386 					jmp @FreeMem
  2387 					els
  2388 9765 60				rts						; ret
  2389 					eif
  2390 				.endl
  2391
  2392 9766			.local	PROCESSMIDI					; PROCEDURE
  2393
  2394 				; optimize FAIL ('MIDI_FIFO.FIFO_PUSHDIRECT2MC6850', processmidi.inc), line = 29
  2395
  2396 9766 20 1E 8E			jsr MIDI_FIFO.FIFO_PUSHDIRECT2MC6850
  2397
  2398 				; optimize OK (processmidi.inc), line = 31
  2399
  2400 9769 A5 F5			lda _TIMERSTATUS
  2401 976B 10 03			jpl l_073D
  2402 976D 4C E7 97			jmp @exit					; exit
  2403 9770			l_073D
  2404
  2405 				; optimize OK (processmidi.inc), line = 32
  2406
  2407 9770 A5 DE			lda CTRK
  2408 9772 CD 4C 21			cmp TOTALTRACKS
  2409 9775 D0 11			jne l_0754
  2410
  2411 				; optimize OK (processmidi.inc), line = 34
  2412
  2413 9777 A9 01			lda #$01
  2414 9779 85 DE			sta CTRK
  2415
  2416 				; optimize OK (processmidi.inc), line = 35
  2417
  2418 977B AD 75 98			lda MIDTRACKS
  2419 977E 85 DC			sta CURTRACKPTR
  2420 9780 AD 76 98			lda MIDTRACKS+1
  2421 9783 85 DD			sta CURTRACKPTR+1
  2422 9785 4C 95 97			jmp l_0767
  2423 9788			l_0754
  2424
  2425 				; optimize FAIL (0, processmidi.inc), line = 39
  2426
  2427 9788 E6 DE			inc CTRK
  2428
  2429 				; optimize OK (processmidi.inc), line = 40
  2430
  2431 978A A5 DC			lda CURTRACKPTR
  2432 978C 18 69 09			add #$09
  2433 978F 85 DC			sta CURTRACKPTR
  2434 9791 90 02			scc
  2435 9793 E6 DD			inc CURTRACKPTR+1
  2436 9795			l_0767
  2437
  2438 				; -------------------  ASM Block 00000061  -------------------
  2439
  2440 				// if _status and f_stop=0 then
  2441 9795 A0 00		    ldy #0
  2442 9797 B1 DC		    lda (curTrackPtr),y
  2443 9799 29 40		    and #f_stop
  2444 979B D0 4A		    bne skipProcessTrack
  2445
  2446 				// if _totalTicks>=_trackTime then ProcessTrack;
  2447 979D A0 07		    ldy #7
  2448 979F A5 F3		    lda _totalTicks+3
  2449 97A1 38 F1 DC		    sub (curTrackPtr),y
  2450 97A4 D0 22		    bne L4
  2451 97A6 A5 F2		    lda _totalTicks+2
  2452 97A8 88			    dey
  2453 97A9 38 F1 DC		    sub (curTrackPtr),y
  2454 97AC D0 0E		    bne L1
  2455 97AE A5 F1		    lda _totalTicks+1
  2456 97B0 88			    dey
  2457 97B1 38 F1 DC		    sub (curTrackPtr),y
  2458 97B4 D0 06		    bne L1
  2459 97B6 A5 F0		    lda _totalTicks
  2460 97B8 88			    dey
  2461 97B9 38 F1 DC		    sub (curTrackPtr),y
  2462 97BC			  L1:
  2463 97BC F0 10		    beq L5
  2464 97BE B0 04		    bcs L3
  2465 97C0 A9 FF		    lda #$ff
  2466 97C2 D0 0A		    bne L5
  2467 97C4			  L3:
  2468 97C4 A9 01		    lda #$01
  2469 97C6 D0 06		    bne L5
  2470 97C8			  L4:
  2471 97C8 50 04		    bvc L5
  2472 97CA 49 FF		    eor #$ff
  2473 97CC 09 01		    ora #$01
  2474 97CE			  L5:
  2475 97CE 30 17		    jmi skipProcessTrack
  2476
  2477 				  // copy current track data to work registers
  2478 97D0 A0 08		    ldy #sizeOf_TMIDTrack-1
  2479 97D2			  loop:
  2480 97D2 B1 DC		    lda (curTrackPtr),y
  2481 97D4 99 E0 00		    sta _trkRegs,y
  2482 97D7 88			    dey
  2483 97D8 10 F8		    bpl loop
  2484
  2485 				  
  2486 				; optimize FAIL ('PROCESSTRACK', processmidi.inc), line = 92
  2487
  2488 97DA 20 00 95			jsr PROCESSTRACK
  2489
  2490 				; -------------------  ASM Block 00000062  -------------------
  2491
  2492 				// store work registers in track data
  2493 97DD A0 08		    ldy #sizeOf_TMIDTrack-1
  2494 97DF			  loop2:
  2495 97DF B9 E0 00		    lda _trkRegs,y
  2496 97E2 91 DC		    sta (curTrackPtr),y
  2497 97E4 88			    dey
  2498 97E5 10 F8		    bpl loop2
  2499
  2500 97E7			  skipProcessTrack:
  2501 				  
  2502 97E7			@exit
  2503 					.ifdef @new
  2504 					lda <@VarData
  2505 					sta :ztmp
  2506 					lda >@VarData
  2507 					ldy #@VarDataSize-1
  2508 					jmp @FreeMem
  2509 					els
  2510 97E7 60				rts						; ret
  2511 					eif
  2512 				.endl
  2513
  2514 97E8			.local	INITTIMER					; PROCEDURE
  2515
  2516 				; optimize OK (MIDFILES), line = 77
  2517
  2518 97E8 A9 00			lda #$00
  2519 97EA 85 F0			sta _TOTALTICKS
  2520 97EC 85 F1			sta _TOTALTICKS+1
  2521 97EE 85 F2			sta _TOTALTICKS+2
  2522 97F0 85 F3			sta _TOTALTICKS+3
  2523
  2524 				; optimize OK (MIDFILES), line = 78
  2525
  2526 97F2 8D 67 21			sta TEMPOSHIFT
  2527 97F5 8D 68 21			sta TEMPOSHIFT+1
  2528 97F8 8D 69 21			sta TEMPOSHIFT+2
  2529 97FB 8D 6A 21			sta TEMPOSHIFT+3
  2530
  2531 				; optimize OK (MIDFILES), line = 79
  2532
  2533 97FE A9 01			lda #$01
  2534 9800 85 F5			sta _TIMERSTATUS
  2535
  2536 				; optimize OK (MIDFILES), line = 80
  2537
  2538 9802 AD 4C 21			lda TOTALTRACKS
  2539 9805 85 DE			sta CTRK
  2540
  2541 				; optimize OK (MIDFILES), line = 81
  2542
  2543 9807 85 DF			sta PLAYINGTRACKS
  2544
  2545 				; -------------------  ASM Block 00000063  -------------------
  2546
  2547 9809 78			    sei
  2548 980A A9 B9 8D 10 02	    mva <INT_TIMER VTIMR1
  2549 980F A9 8E 8D 11 02	    mva >INT_TIMER VTIMR1+1
  2550 				  // reset POKEY
  2551 9814 A9 00		    lda #$00
  2552 9816 A0 03		    ldy #$03
  2553 9818 8D 08 D2		    sta AUDCTL
  2554 981B 8D 01 D2		    sta AUDC1
  2555 981E 8C 0F D2		    sty SKCTL
  2556 				  // setup TIMER1
  2557 9821 8D 08 D2		    sta AUDCTL
  2558 9824 A5 53 8D 00 D2	    mva 83 AUDF1
  2559 				  // initialize IRQ for TIMER1
  2560 9829 A5 10		    lda irqens
  2561 982B 09 01		    ora #$01
  2562 982D 85 10		    sta irqens
  2563 982F 8D 0E D2		    sta irqen
  2564 				  // start timer strobe
  2565 9832 8D 09 D2		    sta stimer
  2566
  2567 9835 58			    cli  // enable IRQ
  2568 				  
  2569 9836			@exit
  2570 					.ifdef @new
  2571 					lda <@VarData
  2572 					sta :ztmp
  2573 					lda >@VarData
  2574 					ldy #@VarDataSize-1
  2575 					jmp @FreeMem
  2576 					els
  2577 9836 60				rts						; ret
  2578 					eif
  2579 				.endl
  2580
  2581 9837			.local	NULLLOADPRCS					; PROCEDURE
  2582
  2583 9837			@exit
  2584 					.ifdef @new
  2585 					lda <@VarData
  2586 					sta :ztmp
  2587 					lda >@VarData
  2588 					ldy #@VarDataSize-1
  2589 					jmp @FreeMem
  2590 					els
  2591 9837 60				rts						; ret
  2592 					eif
  2593 				.endl
  2594
  2595 				; ------------------------------------------------------------
  2596 				; ------------------------------------------------------------
  2597 9838			@UnitInit
  2598
  2599 				; optimize OK (MIDFILES), line = 114
  2600
  2601 9838 A9 00			lda #$00
  2602 983A 8D 63 21			sta OLDTIMERVEC
  2603 983D 8D 64 21			sta OLDTIMERVEC+1
  2604
  2605 				; optimize OK (MIDFILES), line = 115
  2606
  2607 9840 A9 37			lda <NULLLOADPRCS
  2608 9842 8D 65 21			sta LOADPROCESS
  2609 9845 A9 98			lda >NULLLOADPRCS
  2610 9847 8D 66 21			sta LOADPROCESS+1
  2611
  2612 				; optimize OK (MIDFILES), line = 116
  2613
  2614 984A A9 80			lda #$80
  2615 984C 8D 4D 21			sta TICKDIV
  2616 984F A9 01			lda #$01
  2617 9851 8D 4E 21			sta TICKDIV+1
  2618
  2619 				; optimize OK (MIDFILES), line = 117
  2620
  2621 9854 A9 20			lda #$20
  2622 9856 8D 4F 21			sta MS_PER_QNOTE
  2623 9859 A9 A1			lda #$A1
  2624 985B 8D 50 21			sta MS_PER_QNOTE+1
  2625 985E A9 07			lda #$07
  2626 9860 8D 51 21			sta MS_PER_QNOTE+2
  2627 9863 A9 00			lda #$00
  2628 9865 8D 52 21			sta MS_PER_QNOTE+3
  2629
  2630 9868 AD 10 02			lda VTIMR1
  2631 986B 8D 63 21			sta OLDTIMERVEC
  2632 986E AD 11 02			lda VTIMR1+1
  2633 9871 8D 64 21			sta OLDTIMERVEC+1
  2634
  2635 9874 60				rts
  2636
  2637 				; ------------------------------------------------------------
  2638
  2639 = 0080			F_COUNTER	= $80
  2640 = 0040			F_TICK	= $40
  2641 = 00C0			F_FLAGS	= $C0
  2642 = 000F			F_RATIO	= $0F
  2643 = 0080			F_SKIPDELTA	= $80
  2644 = 0040			F_STOP	= $40
  2645 = 00E0			_TRKREGS	= $E0
  2646 = 0000			MID_0	= $00
  2647 = 0001			MID_1	= $01
  2648 = 0064			ERR_UNSUPPORTED_FORMAT	= $64
  2649 = 0065			ERR_NOT_ENOUGHT_MEMORY	= $65
  2650 = 6468544D		TAG_MTHD	= $6468544D
  2651 = 6B72544D		TAG_MTRK	= $6B72544D
  2652 = 0009			SIZEOF_TMIDTRACK	= $09
  2653 = 00DC			CURTRACKPTR	= $DC
  2654 = 00DE			CTRK	= $DE
  2655 = 00DF			PLAYINGTRACKS	= $DF
  2656 = 00F0			_TOTALTICKS	= $F0
  2657 = 00F4			_SUBCNT	= $F4
  2658 = 00F5			_TIMERSTATUS	= $F5
  2659 = 00F6			_DELTA	= $F6
  2660 = 00F6			_TMP	= $F6
  2661 = 00E0			_STATUS	= $E0
  2662 = 00E1			_BANK	= $E1
  2663 = 00E2			_PTR	= $E2
  2664 = 00E2			_ADR	= $E2
  2665 = 00E4			_TRACKTIME	= $E4
  2666 = 00E8			_EVENT	= $E8
  2667 = 2148			MIDDATA	= DATAORIGIN+$0148
  2668 = 214A			adr.MIDTRACKS	= [DATAORIGIN+$014A] .array [1]
  2669 9875			.var MIDTRACKS	= adr.MIDTRACKS .word
  2670 = 214B			FORMAT	= DATAORIGIN+$014B
  2671 = 214C			TOTALTRACKS	= DATAORIGIN+$014C
  2672 = 214D			TICKDIV	= DATAORIGIN+$014D
  2673 = 214F			MS_PER_QNOTE	= DATAORIGIN+$014F
  2674 = 2153			adr.CHNVOLUME	= [DATAORIGIN+$0153] .array [16]
  2675 9875			.var CHNVOLUME	= adr.CHNVOLUME .word
  2676 = 2163			OLDTIMERVEC	= DATAORIGIN+$0163
  2677 = 2165			LOADPROCESS	= DATAORIGIN+$0165
  2678 = 2167			TEMPOSHIFT	= DATAORIGIN+$0167
  2679 = 0600			adr.RBUF	= $0600
  2680 9875			.var RBUF	= adr.RBUF .word
  2681
  2682 = 9875 4A 21		MIDTRACKS
  2682 = 9877 53 21		CHNVOLUME
  2682 = 9879 00 06		RBUF
  2682 				.endl							; UNIT MIDFILES
  2683
  2684 				; ------------------------------------------------------------
  2685
  2686 987B			.local	MISC						; UNIT
  2687
  2688 987B			.local	DETECTMEM					; FUNCTION | ASSEMBLER
  2689
  2690 				; -------------------  ASM Block 00000071  -------------------
  2691
  2692 987B 8A 48			txa:pha
  2693
  2694 = 0400			bsav	= @buf
  2695
  2696 = 4000			ext_b	= $4000		;cokolwiek z zakresu $4000-$7FFF
  2697
  2698 987D A0 00			ldy #0
  2699 987F B9 90 98 99 00 06	mov	mva copy,y detect,y
  2700 9885 C8				iny
  2701 9886 C0 8C			cpy #.sizeof(detect)
  2702 9888 D0 F5			bne mov
  2703
  2704 988A 20 00 06			jsr detect
  2705
  2706 988D 4C 1C 99			jmp stop
  2707
  2708 9890			copy
  2709
  2710 0600			.local	detect,$0600
  2711
  2712 0600 AD 01 D3			lda portb
  2713 0603 48				pha
  2714
  2715 0604 AD 0B D4 D0 FB		lda:rne vcount
  2716
  2717 				;	lda #$ff
  2718 				;	sta portb
  2719
  2720 0609 AD 00 40			lda ext_b
  2721 060C 48				pha
  2722
  2723 060D A2 0F			ldx #$0f	;zapamiętanie bajtów ext (z 16 bloków po 64k)
  2724 060F 20 7F 06		_p0	jsr setpb
  2725 0612 AD 00 40			lda ext_b
  2726 0615 9D 00 04			sta bsav,x
  2727 0618 CA				dex
  2728 0619 10 F4			bpl _p0
  2729
  2730 061B A2 0F			ldx #$0f	;wyzerowanie ich (w oddzielnej pętli, bo nie wiadomo
  2731 061D 20 7F 06		_p1	jsr setpb	;które kombinacje bitów PORTB wybierają te same banki)
  2732 0620 A9 00			lda #$00
  2733 0622 8D 00 40			sta ext_b
  2734 0625 CA				dex
  2735 0626 10 F5			bpl _p1
  2736
  2737 0628 8E 01 D3			stx portb	;eliminacja pamięci podstawowej
  2738 062B 8E 00 40			stx ext_b
  2739 062E 86 00			stx $00		;niezbędne dla niektórych rozszerzeń do 256k
  2740
  2741 0630 A0 00			ldy #$00	;pętla zliczająca bloki 64k
  2742 0632 A2 0F			ldx #$0f
  2743 0634 20 7F 06		_p2	jsr setpb
  2744 0637 AD 00 40			lda ext_b	;jeśli ext_b jest różne od zera, blok 64k już zliczony
  2745 063A D0 23			bne _n2
  2746
  2747 063C CE 00 40			dec ext_b	;w przeciwnym wypadku zaznacz jako zliczony
  2748
  2749 063F AD 00 40			lda ext_b	;sprawdz, czy sie zaznaczyl; jesli nie -> cos nie tak ze sprzetem
  2750 0642 10 1B			bpl _n2
  2751
  2752 0644 AD 01 D3			lda portb	;wpisz wartość PORTB do tablicy dla banku 0
  2753
  2754 0647 29 FE			and #$fe
  2755
  2756 0649 99 01 01			sta adr.banks,y
  2757 064C 49 04			eor #%00000100	;uzupełnij wartości dla banków 1, 2, 3
  2758 064E 99 02 01			sta adr.banks+1,y
  2759 0651 49 0C			eor #%00001100
  2760 0653 99 03 01			sta adr.banks+2,y
  2761 0656 49 04			eor #%00000100
  2762 0658 99 04 01			sta adr.banks+3,y
  2763 065B C8				iny
  2764 065C C8				iny
  2765 065D C8				iny
  2766 065E C8				iny
  2767
  2768 065F CA			_n2	dex
  2769 0660 10 D2			bpl _p2
  2770
  2771 0662 A2 0F			ldx #$0f	;przywrócenie zawartości ext
  2772 0664 20 7F 06		_p3	jsr setpb
  2773 0667 BD 00 04			lda bsav,x
  2774 066A 8D 00 40			sta ext_b
  2775 066D CA				dex
  2776 066E 10 F4			bpl _p3
  2777
  2778 0670 8E 01 D3			stx portb	;X=$FF
  2779
  2780 0673 68				pla
  2781 0674 8D 00 40			sta ext_b
  2782
  2783 0677 68				pla
  2784 0678 8D 01 D3			sta portb
  2785
  2786 067B 8C A0 21			sty Result
  2787
  2788 067E 60				rts
  2789
  2790 				; podprogramy
  2791 067F 8A			setpb	txa		;zmiana kolejności bitów: %0000dcba -> %cba000d0
  2792 0680 4A				lsr
  2793 0681 6A				ror
  2794 0682 6A				ror
  2795 0683 6A				ror
  2796 0684 69 01			adc #$01	;ustawienie bitu nr 1 w zaleznosci od stanu C
  2797 0686 09 01			ora #$01	;ustawienie bitu sterującego OS ROM na wartosc domyslna
  2798 0688 8D 01 D3			sta portb
  2799 068B 60				rts
  2800
  2801 				.endl
  2802
  2803 991C 68 AA		stop	pla:tax
  2804
  2805
  2806 991E			@exit
  2807
  2808 				; ------------------------------------------------------------
  2809
  2810 = 21A0			RESULT	= DATAORIGIN+$01A0
  2811 991E 60				rts						; ret
  2812 				.endl
  2813
  2814 				; ------------------------------------------------------------
  2815
  2816 = 0101			adr.BANKS	= $0101
  2817 991F			.var BANKS	= adr.BANKS .word
  2818 = FFF7			DETECTOS	= $FFF7
  2819
  2820 = 991F 01 01		BANKS
  2820 				.endl							; UNIT MISC
  2821
  2822 				; ------------------------------------------------------------
  2823
  2824 9921			.local	CIO						; UNIT
  2825
  2826 9921			.local	OPN						; PROCEDURE | ASSEMBLER
  2827
  2828 				; -------------------  ASM Block 00000074  -------------------
  2829
  2830 9921 8A 48			txa:pha
  2831
  2832 9923 AD A1 21			lda chn
  2833 9926 0A 0A 0A 0A			:4 asl @
  2834 992A AA				tax
  2835
  2836 992B A9 03			lda #$03		;komenda: OPEN
  2837 992D 9D 42 03			sta iccmd,x
  2838
  2839 9930 EE A4 21 D0 03 EE + 	inw device		;omin bajt z dlugoscia STRING-a
  2840
  2841 9938 AD A4 21			lda device		;adres nazwy pliku
  2842 993B 9D 44 03			sta icbufa,x
  2843 993E AD A5 21			lda device+1
  2844 9941 9D 45 03			sta icbufa+1,x
  2845
  2846 9944 AD A2 21			lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
  2847 9947 9D 4A 03			sta icax1,x
  2848
  2849 994A AD A3 21			lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
  2850 994D 9D 4B 03			sta icax2,x
  2851
  2852 9950				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 9950 EE 01 D3				inc portb
     6 9953 20 56 E4				jsr CIOV
     8 9956 CE 01 D3				dec portb
Source: MIDICar Player.a65
  2853
  2854 9959 8C 07 20			sty MAIN.SYSTEM.IOResult
  2855
  2856 995C 68 AA			pla:tax
  2857
  2858 				; ------------------------------------------------------------
  2859
  2860 = 21A1			CHN	= DATAORIGIN+$01A1
  2861 = 21A2			AX1	= DATAORIGIN+$01A2
  2862 = 21A3			AX2	= DATAORIGIN+$01A3
  2863 = 21A4			DEVICE	= DATAORIGIN+$01A4
  2864
  2865 = 21A1			@VarData	= CHN
  2866 = 0005			@VarDataSize	= 5
  2867
  2868 995E			@exit
  2869 					.ifdef @new
  2870 					lda <@VarData
  2871 					sta :ztmp
  2872 					lda >@VarData
  2873 					ldy #@VarDataSize-1
  2874 					jmp @FreeMem
  2875 					els
  2876 995E 60				rts						; ret
  2877 					eif
  2878 				.endl
  2879
  2880 995F			.local	CLS						; PROCEDURE | ASSEMBLER
  2881 995F 8D A6 21			sta CHN
  2882
  2883 				; -------------------  ASM Block 00000075  -------------------
  2884
  2885 9962 8A 48			txa:pha
  2886
  2887 9964 AD A6 21			lda chn
  2888 9967 0A 0A 0A 0A			:4 asl @
  2889 996B AA				tax
  2890
  2891 996C A9 0C			lda #$0c		;komenda: CLOSE
  2892 996E 9D 42 03			sta iccmd,x
  2893
  2894 9971				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 9971 EE 01 D3				inc portb
     6 9974 20 56 E4				jsr CIOV
     8 9977 CE 01 D3				dec portb
Source: MIDICar Player.a65
  2895
  2896 997A 8C 07 20			sty MAIN.SYSTEM.IOResult
  2897
  2898 997D 68 AA			pla:tax
  2899
  2900 				; ------------------------------------------------------------
  2901
  2902 = 21A6			CHN	= DATAORIGIN+$01A6
  2903
  2904 = 21A6			@VarData	= CHN
  2905 = 0001			@VarDataSize	= 1
  2906
  2907 997F			@exit
  2908 					.ifdef @new
  2909 					lda <@VarData
  2910 					sta :ztmp
  2911 					lda >@VarData
  2912 					ldy #@VarDataSize-1
  2913 					jmp @FreeMem
  2914 					els
  2915 997F 60				rts						; ret
  2916 					eif
  2917 				.endl
  2918
  2919 				; ------------------------------------------------------------
  2920
  2921 				.endl							; UNIT CIO
  2922
  2923 9980			.local	SETCOLORS					; PROCEDURE
  2924
  2925 				; optimize OK (helpers.inc), line = 35
  2926
  2927 9980 A5 4A			lda PLAYERSTATUS
  2928 9982 29 01			and #$01
  2929 9984 85 9D			sta :STACKORIGIN+9
  2930 9986 A0 01			ldy #1
  2931 9988 A5 9D			lda :STACKORIGIN+9
  2932 998A C9 01			cmp #$01
  2933 998C F0 01			beq @+
  2934 998E 88				dey
  2935 				@
  2936 998F 84 9D			sty :STACKORIGIN+9
  2937 9991 A9 05			lda #$05
  2938 9993 85 8C			sta :ecx
  2939 9995 A5 9D			lda :STACKORIGIN+9
  2940 9997 85 84			sta :eax
  2941 					.ifdef fmulinit
  2942 					fmulu_8
  2943 					els
  2944 9999 20 30 85			imulCL
  2945 					eif
  2946 999C A9 98			lda <adr.COLORS
  2947 999E 18 65 84			add :eax
  2948 99A1 8D D9 21			sta P
  2949 99A4 A9 80			lda >adr.COLORS
  2950 99A6 65 85			adc :eax+1
  2951 99A8 8D DA 21			sta P+1
  2952
  2953 				; optimize OK (helpers.inc), line = 36
  2954
  2955 99AB AD D9 21			lda P
  2956 99AE 85 82			sta :bp2
  2957 99B0 AD DA 21			lda P+1
  2958 99B3 85 83			sta :bp2+1
  2959 99B5 A0 04			ldy #$04
  2960 99B7 B1 82 99 16 D0 88 + 	mva:rpl (:bp2),y $D016,y-
  2961
  2962 				; optimize OK (helpers.inc), line = 37
  2963
  2964 99BF AD D9 21			lda P
  2965 99C2 85 82			sta :bp2
  2966 99C4 AD DA 21			lda P+1
  2967 99C7 85 83			sta :bp2+1
  2968 99C9 A0 04			ldy #$04
  2969 99CB B1 82 99 C4 02 88 + 	mva:rpl (:bp2),y $02C4,y-
  2970
  2971 				; ------------------------------------------------------------
  2972
  2973 = 21D9			P	= DATAORIGIN+$01D9
  2974
  2975 = 21D9			@VarData	= P
  2976 = 0002			@VarDataSize	= 2
  2977
  2978 99D3			@exit
  2979 					.ifdef @new
  2980 					lda <@VarData
  2981 					sta :ztmp
  2982 					lda >@VarData
  2983 					ldy #@VarDataSize-1
  2984 					jmp @FreeMem
  2985 					els
  2986 99D3 60				rts						; ret
  2987 					eif
  2988 				.endl
  2989
  2990 99D4			.local	PUTTEXT						; PROCEDURE
  2991
  2992 				; optimize OK (helpers.inc), line = 45
  2993
  2994 99D4 AC DB 21 84 82 AC + 	mwy S :bp2
  2995 99DE A0 00			ldy #$00
  2996 99E0 B1 82			lda (:bp2),y
  2997 99E2 8D DD 21			sta L
  2998
  2999 				; --- WhileProlog
  3000 99E5 4C 2F 9A			jmp l_07D6
  3001 99E8			l_07D7
  3002
  3003 				; optimize OK (helpers.inc), line = 48
  3004
  3005 99E8 EE DB 21			inc S
  3006 99EB D0 03			sne
  3007 99ED EE DC 21			inc S+1
  3008
  3009 				; optimize OK (helpers.inc), line = 49
  3010
  3011 99F0 AC DB 21 84 82 AC + 	mwy S :bp2
  3012 99FA A0 00			ldy #$00
  3013 99FC B1 82			lda (:bp2),y
  3014 99FE 8D DE 21			sta C
  3015
  3016 				; optimize OK (helpers.inc), line = 50
  3017
  3018 9A01 C9 20			cmp #$20
  3019 9A03 B0 09			jcs l_07F0
  3020 9A05 18 69 40			add #$40
  3021 9A08 8D DE 21			sta C
  3022 9A0B 4C 1B 9A			jmp l_07FB
  3023 9A0E			l_07F0
  3024
  3025 				; optimize OK (helpers.inc), line = 51
  3026
  3027 9A0E AD DE 21			lda C
  3028 9A11 C9 60			cmp #$60
  3029 9A13 B0 06			jcs l_080D
  3030 9A15 38 E9 20			sub #$20
  3031 9A18 8D DE 21			sta C
  3032 9A1B			l_080D
  3033 9A1B			l_07FB
  3034
  3035 				; optimize OK (helpers.inc), line = 52
  3036
  3037 9A1B A4 D5			ldy SCRADR+1
  3038 9A1D 84 81			sty :bp+1
  3039 9A1F A4 D4			ldy SCRADR
  3040 9A21 AD DE 21			lda C
  3041 9A24 91 80			sta (:bp),y
  3042
  3043 				; optimize FAIL (0, helpers.inc), line = 53
  3044
  3045 9A26 E6 D4			inc SCRADR
  3046 9A28 D0 02			sne
  3047 9A2A E6 D5			inc SCRADR+1
  3048
  3049 				; optimize FAIL (0, helpers.inc), line = 54
  3050
  3051 9A2C CE DD 21			dec L
  3052 9A2F			l_07D6
  3053
  3054 				; optimize OK (helpers.inc), line = 46
  3055
  3056 9A2F D0 B7			jne l_07D7
  3057
  3058 				; ------------------------------------------------------------
  3059
  3060 = 21DB			S	= DATAORIGIN+$01DB
  3061 = 21DD			L	= DATAORIGIN+$01DD
  3062 = 21DE			C	= DATAORIGIN+$01DE
  3063
  3064 = 21DB			@VarData	= S
  3065 = 0004			@VarDataSize	= 4
  3066
  3067 9A31			@exit
  3068 					.ifdef @new
  3069 					lda <@VarData
  3070 					sta :ztmp
  3071 					lda >@VarData
  3072 					ldy #@VarDataSize-1
  3073 					jmp @FreeMem
  3074 					els
  3075 9A31 60				rts						; ret
  3076 					eif
  3077 				.endl
  3078
  3079 9A32			.local	PUTHEX						; PROCEDURE | ASSEMBLER
  3080
  3081 				; -------------------  ASM Block 00000084  -------------------
  3082
  3083 9A32			  icl 'asms/puthex.a65'
Source: puthex.a65
     1 				// store `scradr` value as a operand of opcode
     2 9A32 A5 D4		  lda scradr
     3 9A34 8D 7B 9A		  sta screen
     4 9A37 A5 D5		  lda scradr+1
     5 9A39 8D 7C 9A		  sta screen+1
     6 9A3C AD DF 21		  lda v
     7 9A3F 8D 61 9A		  sta vadr1
     8 9A42 8D 69 9A		  sta vadr2
     9 9A45 AD E0 21		  lda v+1
    10 9A48 8D 62 9A		  sta vadr1+1
    11 9A4B 8D 6A 9A		  sta vadr2+1
    12
    13 9A4E A9 00		  lda #0
    14 9A50 8D 8E 9A		  sta _vofs
    15
    16 				// get nibbles to show, if =0 exit
    17 9A53 AC E1 21		  ldy n
    18 9A56 F0 35		  beq stop
    19
    20 9A58			hexLoop:
    21 9A58 AE 8E 9A		  ldx _vofs
    22 9A5B 98			  tya
    23 9A5C 29 01		  and #1
    24 9A5E D0 08		  bne HiNibble
    25 9A60 BD 00 F0		  lda vadr1:$f000,x
    26 9A63 29 0F		  and #$0f
    27 9A65 4C 72 9A		  jmp put2screen
    28 9A68			HiNibble:
    29 9A68 BD 00 F0		  lda vadr2:$f000,x
    30 9A6B 4A 4A 4A 4A		  :4 lsr @
    31 9A6F EE 8E 9A		  inc _vofs
    32
    33 9A72			put2screen:
    34 9A72 AA			  tax
    35 9A73 BD 8F 9A		  lda hexTab,x
    36 9A76 0D D7 21		  ora puttextinvert
    37 9A79 88			  dey
    38 9A7A 99 00 F0		  sta screen:$f000,y
    39
    40 9A7D C0 00		  cpy #0
    41 9A7F D0 D7		  bne hexLoop
    42
    43 9A81			calcEndAddr:
    44 9A81 A5 D4		  lda scradr
    45 9A83 18			  clc
    46 9A84 6D E1 21		  adc n
    47 9A87 85 D4		  sta scradr
    48 9A89 90 02		  bcc stop
    49 9A8B E6 D5		  inc scradr+1
    50
    51 9A8D			stop:
    52 9A8D 60			  rts
    53
    54 9A8E			_vofs
    55 9A8E 00			  .by 0
    56 9A8F			hexTab:
    57 9A8F 10 11 12 13 14 15 +   dta d'0123456789ABCDEF'
  3084
  3085 				; ------------------------------------------------------------
  3086
  3087 = 21DF			V	= DATAORIGIN+$01DF
  3088 = 21E1			N	= DATAORIGIN+$01E1
  3089
  3090 = 21DF			@VarData	= V
  3091 = 0003			@VarDataSize	= 3
  3092
  3093 9A9F			@exit
  3094 					.ifdef @new
  3095 					lda <@VarData
  3096 					sta :ztmp
  3097 					lda >@VarData
  3098 					ldy #@VarDataSize-1
  3099 					jmp @FreeMem
  3100 					els
  3101 9A9F 60				rts						; ret
  3102 					eif
  3103 				.endl
  3104
  3105 9AA0			.local	PUTINT						; PROCEDURE | ASSEMBLER
  3106
  3107 				; -------------------  ASM Block 00000085  -------------------
  3108
  3109 9AA0			  icl 'asms/int2str.a65'
Source: int2str.a65
     1 = 0000			EOL = 0
     2
     3 9AA0 A5 D4		    lda scradr
     4 9AA2 8D EC 9A		    sta screen1
     5 9AA5 8D 03 9B		    sta screen2
     6 9AA8 A5 D5		    lda scradr+1
     7 9AAA 8D ED 9A		    sta screen1+1
     8 9AAD 8D 04 9B		    sta screen2+1
     9
    10 9AB0			INT2STR:
    11 9AB0 A0 00		    ldy #0
    12 9AB2 8C 11 9B		    sty _cnt
    13 9AB5			ITSNEXT:
    14 9AB5 A2 00		    ldx #0
    15 9AB7			ITSSLP:
    16 9AB7 AD E2 21		    lda value
    17 9ABA 38			    sec
    18 9ABB F9 12 9B		    sbc Pow10Tab,Y
    19 9ABE 8D E2 21		    sta value
    20 9AC1 AD E3 21		    lda value+1
    21 9AC4 C8			    iny
    22 9AC5 F9 12 9B		    sbc Pow10Tab,Y
    23 9AC8 90 08		    bcc ITSADD
    24 9ACA 8D E3 21		    sta value+1
    25 9ACD E8			    inx
    26 9ACE 88			    dey
    27 9ACF 18			    clc
    28 9AD0 90 E5		    bcc ITSSLP
    29 9AD2			ITSADD:
    30 9AD2 88			    dey
    31 9AD3 AD E2 21		    lda value
    32 9AD6 79 12 9B		    adc Pow10Tab,Y
    33 9AD9 8D E2 21		    sta value
    34 9ADC 8A			    txa
    35 9ADD 09 10		    ora #$10
    36
    37 				; skip lead zeros
    38 9ADF AE 11 9B		    ldx _cnt
    39 9AE2 D0 04		    bne storeDigit
    40 9AE4 C9 10		    cmp #$10
    41 9AE6 F0 09		    beq skipDigit
    42
    43 9AE8			storeDigit:
    44 9AE8 0D D7 21		    ora puttextinvert
    45 9AEB 9D 00 F0		    sta screen1:$f000,X
    46 9AEE EE 11 9B		    inc _cnt
    47 9AF1			skipDigit:
    48 9AF1 C8			    iny
    49 9AF2 C8			    iny
    50 9AF3 C0 08		    cpy #8
    51 9AF5 90 BE		    bcc ITSNEXT
    52
    53 				; last digit
    54 9AF7 AD E2 21		    lda value
    55 9AFA 09 10		    ora #$10
    56 9AFC AE 11 9B		    ldx _cnt
    57 9AFF 0D D7 21		    ora puttextinvert
    58 9B02 9D 00 F0		    sta screen2:$f000,X
    59 9B05 E8			    inx
    60
    61 				; set screen addres to the end of value
    62 9B06 8A			    txa
    63 9B07 18			    clc
    64 9B08 65 D4		    adc scradr
    65 9B0A 85 D4		    sta scradr
    66 9B0C 90 02		    bcc stop
    67 9B0E E6 D5		    inc scradr+1
    68
    69 9B10			stop:
    70 9B10 60			    rts
    71
    72 9B11			_cnt
    73 9B11 00			    .by 0
    74 9B12			Pow10Tab
    75 9B12 10 27		    .wo 10000
    76 9B14 E8 03		    .wo 1000
    77 9B16 64 00		    .wo 100
    78 9B18 0A 00		    .wo 10
  3110
  3111 				; ------------------------------------------------------------
  3112
  3113 = 21E2			VALUE	= DATAORIGIN+$01E2
  3114
  3115 = 21E2			@VarData	= VALUE
  3116 = 0002			@VarDataSize	= 2
  3117
  3118 9B1A			@exit
  3119 					.ifdef @new
  3120 					lda <@VarData
  3121 					sta :ztmp
  3122 					lda >@VarData
  3123 					ldy #@VarDataSize-1
  3124 					jmp @FreeMem
  3125 					els
  3126 9B1A 60				rts						; ret
  3127 					eif
  3128 				.endl
  3129
  3130 9B1B			.local	RESET_MIDI					; PROCEDURE
  3131
  3132 				; optimize OK (helpers.inc), line = 77
  3133
  3134 9B1B AD C3 A1			lda GM_RESET
  3135 9B1E 8D 43 21			sta MIDI_FIFO.FIFO_SEND.DATA
  3136 9B21 AD C4 A1			lda GM_RESET+1
  3137 9B24 8D 44 21			sta MIDI_FIFO.FIFO_SEND.DATA+1
  3138 9B27 A9 06			lda #$06
  3139 9B29 8D 45 21			sta MIDI_FIFO.FIFO_SEND.LEN
  3140 9B2C 20 5D 8E			jsr MIDI_FIFO.FIFO_SEND
  3141 9B2F 20 90 8E			jsr MIDI_FIFO.FIFO_FLUSH
  3142 9B32			@exit
  3143 					.ifdef @new
  3144 					lda <@VarData
  3145 					sta :ztmp
  3146 					lda >@VarData
  3147 					ldy #@VarDataSize-1
  3148 					jmp @FreeMem
  3149 					els
  3150 9B32 60				rts						; ret
  3151 					eif
  3152 				.endl
  3153
  3154 9B33			.local	CLEARWORKAREA					; PROCEDURE
  3155
  3156 				; optimize OK (helpers.inc), line = 82
  3157
  3158 9B33 A9 72			lda #$72
  3159 9B35 85 88			sta SYSTEM.FILLCHAR_0102.A
  3160 9B37 A9 34			lda #$34
  3161 9B39 85 89			sta SYSTEM.FILLCHAR_0102.A+1
  3162 9B3B A9 48			lda #$48
  3163 9B3D 85 8C			sta SYSTEM.FILLCHAR_0102.COUNT
  3164 9B3F A9 03			lda #$03
  3165 9B41 85 8D			sta SYSTEM.FILLCHAR_0102.COUNT+1
  3166 9B43 A9 00			lda #$00
  3167 9B45 85 84			sta SYSTEM.FILLCHAR_0102.VALUE
  3168 9B47				.local +MAIN.SYSTEM.FILLCHAR_0102
  3169 9B47				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0102.M@INLINE [Source: MIDICar Player.a65]
     4 9B47 20 A1 84			jsr @fill
Source: MIDICar Player.a65
  3170 					.endl
  3171 9B4A			@exit
  3172 					.ifdef @new
  3173 					lda <@VarData
  3174 					sta :ztmp
  3175 					lda >@VarData
  3176 					ldy #@VarDataSize-1
  3177 					jmp @FreeMem
  3178 					els
  3179 9B4A 60				rts						; ret
  3180 					eif
  3181 				.endl
  3182
  3183 9B4B			.local	ISLOOPED					; PROCEDURE
  3184
  3185 				; optimize OK (helpers.inc), line = 87
  3186
  3187 9B4B A9 BA			lda #$BA
  3188 9B4D 85 D4			sta SCRADR
  3189 9B4F A9 37			lda #$37
  3190 9B51 85 D5			sta SCRADR+1
  3191
  3192 				; optimize OK (helpers.inc), line = 88
  3193
  3194 9B53 A5 4A			lda PLAYERSTATUS
  3195 9B55 29 04			and #$04
  3196 9B57 F0 10			jeq l_085C
  3197
  3198 				; optimize OK (helpers.inc), line = 89
  3199
  3200 9B59 A9 02			lda #$02
  3201 9B5B 8D DB 21			sta PUTTEXT.S
  3202 9B5E A9 80			lda #$80
  3203 9B60 8D DC 21			sta PUTTEXT.S+1
  3204 9B63 20 D4 99			jsr PUTTEXT
  3205 9B66 4C 76 9B			jmp l_0868
  3206 9B69			l_085C
  3207
  3208 				; optimize OK (helpers.inc), line = 91
  3209
  3210 9B69 A9 08			lda #$08
  3211 9B6B 8D DB 21			sta PUTTEXT.S
  3212 9B6E A9 80			lda #$80
  3213 9B70 8D DC 21			sta PUTTEXT.S+1
  3214 9B73 20 D4 99			jsr PUTTEXT
  3215 9B76			l_0868
  3216 9B76			@exit
  3217 					.ifdef @new
  3218 					lda <@VarData
  3219 					sta :ztmp
  3220 					lda >@VarData
  3221 					ldy #@VarDataSize-1
  3222 					jmp @FreeMem
  3223 					els
  3224 9B76 60				rts						; ret
  3225 					eif
  3226 				.endl
  3227
  3228 9B77			.local	CLEARSTATUS					; PROCEDURE
  3229
  3230 				; optimize OK (helpers.inc), line = 96
  3231
  3232 9B77 A9 00			lda #$00
  3233 9B79 A0 3B			ldy #$3B
  3234 9B7B 99 BA 37 88 10 FA		sta:rpl $37BA,y-
  3235
  3236 				; optimize FAIL ('ISLOOPED', helpers.inc), line = 97
  3237
  3238 9B81 20 4B 9B			jsr ISLOOPED
  3239
  3240 				; optimize OK (helpers.inc), line = 98
  3241
  3242 9B84 AC D4 21			ldy FN+1
  3243 9B87 84 81			sty :bp+1
  3244 9B89 AC D3 21			ldy FN
  3245 9B8C B1 80			lda (:bp),y
  3246 9B8E C9 11			cmp #$11
  3247 9B90 90 10			jcc l_0882
  3248 9B92 AC D3 21 84 82 AC + 	mwy FN :bp2
  3249 9B9C A0 00			ldy #$00
  3250 9B9E A9 10			lda #$10
  3251 9BA0 91 82			sta (:bp2),y
  3252 9BA2			l_0882
  3253
  3254 				; optimize OK (helpers.inc), line = 99
  3255
  3256 9BA2 AC D3 21 84 82 AC + 	mwy FN :bp2
  3257 9BAC A0 00			ldy #$00
  3258 9BAE A9 F6			lda #$F6
  3259 9BB0 38 F1 82			sub (:bp2),y
  3260 9BB3 85 D4			sta SCRADR
  3261 9BB5 A9 37			lda #$37
  3262 9BB7 E9 00			sbc #$00
  3263 9BB9 85 D5			sta SCRADR+1
  3264 9BBB AD D3 21			lda FN
  3265 9BBE 8D DB 21			sta PUTTEXT.S
  3266 9BC1 AD D4 21			lda FN+1
  3267 9BC4 8D DC 21			sta PUTTEXT.S+1
  3268 9BC7 20 D4 99			jsr PUTTEXT
  3269 9BCA			@exit
  3270 					.ifdef @new
  3271 					lda <@VarData
  3272 					sta :ztmp
  3273 					lda >@VarData
  3274 					ldy #@VarDataSize-1
  3275 					jmp @FreeMem
  3276 					els
  3277 9BCA 60				rts						; ret
  3278 					eif
  3279 				.endl
  3280
  3281 9BCB			.local	CLEARUVMETERS					; PROCEDURE
  3282
  3283 				; optimize OK (helpers.inc), line = 104
  3284
  3285 9BCB A5 4A			lda PLAYERSTATUS
  3286 9BCD 29 02			and #$02
  3287 9BCF F0 2F			jeq l_08B6
  3288
  3289 				; optimize OK (helpers.inc), line = 106
  3290
  3291 9BD1 A9 00			lda #$00
  3292 9BD3 8D C8 21			sta CHN
  3293
  3294 				; --- RepeatUntilProlog
  3295 9BD6			l_08BC
  3296
  3297 				; optimize OK (helpers.inc), line = 108
  3298
  3299 9BD6 AD C8 21			lda CHN
  3300 9BD9 0A				asl @
  3301 9BDA A8				tay
  3302 9BDB B9 A7 21			lda adr.CHANNELSCRADR,y
  3303 9BDE 85 D4			sta SCRADR
  3304 9BE0 B9 A8 21			lda adr.CHANNELSCRADR+1,y
  3305 9BE3 85 D5			sta SCRADR+1
  3306
  3307 				; optimize OK (helpers.inc), line = 109
  3308
  3309 9BE5 A5 D4			lda SCRADR
  3310 9BE7 85 82			sta :bp2
  3311 9BE9 A5 D5			lda SCRADR+1
  3312 9BEB 85 83			sta :bp2+1
  3313 9BED A9 40			lda #$40
  3314 9BEF A0 03			ldy #$03
  3315 9BF1 91 82 88 10 FB		sta:rpl (:bp2),y-
  3316
  3317 				; optimize FAIL (0, helpers.inc), line = 110
  3318
  3319 9BF6 EE C8 21			inc CHN
  3320
  3321 				; optimize OK (helpers.inc), line = 111
  3322
  3323 9BF9 AD C8 21			lda CHN
  3324 9BFC C9 10			cmp #$10
  3325 9BFE D0 D6			jne l_08BC
  3326 9C00			l_08B6
  3327 9C00			@exit
  3328 					.ifdef @new
  3329 					lda <@VarData
  3330 					sta :ztmp
  3331 					lda >@VarData
  3332 					ldy #@VarDataSize-1
  3333 					jmp @FreeMem
  3334 					els
  3335 9C00 60				rts						; ret
  3336 					eif
  3337 				.endl
  3338
  3339 9C01			.local	STATUSPLAYING					; PROCEDURE
  3340
  3341 				; optimize OK (helpers.inc), line = 117
  3342
  3343 9C01 A9 CF			lda #$CF
  3344 9C03 85 D4			sta SCRADR
  3345 9C05 A9 37			lda #$37
  3346 9C07 85 D5			sta SCRADR+1
  3347
  3348 				; optimize OK (helpers.inc), line = 118
  3349
  3350 9C09 A9 0E			lda #$0E
  3351 9C0B 8D DB 21			sta PUTTEXT.S
  3352 9C0E A9 80			lda #$80
  3353 9C10 8D DC 21			sta PUTTEXT.S+1
  3354 9C13 20 D4 99			jsr PUTTEXT
  3355
  3356 				; optimize OK (helpers.inc), line = 119
  3357
  3358 9C16 AD D2 21			lda ISSTOPPED
  3359 9C19 F0 0B			jeq l_08F2
  3360
  3361 				; optimize FAIL ('MIDFILES.INITTIMER', helpers.inc), line = 121
  3362
  3363 9C1B 20 E8 97			jsr MIDFILES.INITTIMER
  3364
  3365 				; optimize OK (helpers.inc), line = 122
  3366
  3367 9C1E A9 00			lda #$00
  3368 9C20 8D D2 21			sta ISSTOPPED
  3369 9C23 4C 2C 9C			jmp l_0901
  3370 9C26			l_08F2
  3371
  3372 				; optimize OK (helpers.inc), line = 125
  3373
  3374 9C26 A5 F5			lda MIDFILES._TIMERSTATUS
  3375 9C28 29 7F			and #$7F
  3376 9C2A 85 F5			sta MIDFILES._TIMERSTATUS
  3377 9C2C			l_0901
  3378 9C2C			@exit
  3379 					.ifdef @new
  3380 					lda <@VarData
  3381 					sta :ztmp
  3382 					lda >@VarData
  3383 					ldy #@VarDataSize-1
  3384 					jmp @FreeMem
  3385 					els
  3386 9C2C 60				rts						; ret
  3387 					eif
  3388 				.endl
  3389
  3390 9C2D			.local	STATUSPAUSE					; PROCEDURE
  3391
  3392 				; optimize OK (helpers.inc), line = 130
  3393
  3394 9C2D AD D2 21			lda ISSTOPPED
  3395 9C30 F0 03			jeq l_091E
  3396 9C32 4C 50 9C			jmp @exit					; exit
  3397 9C35			l_091E
  3398
  3399 				; optimize OK (helpers.inc), line = 131
  3400
  3401 9C35 A9 CF			lda #$CF
  3402 9C37 85 D4			sta SCRADR
  3403 9C39 A9 37			lda #$37
  3404 9C3B 85 D5			sta SCRADR+1
  3405
  3406 				; optimize OK (helpers.inc), line = 132
  3407
  3408 9C3D A9 17			lda #$17
  3409 9C3F 8D DB 21			sta PUTTEXT.S
  3410 9C42 A9 80			lda #$80
  3411 9C44 8D DC 21			sta PUTTEXT.S+1
  3412 9C47 20 D4 99			jsr PUTTEXT
  3413
  3414 				; optimize OK (helpers.inc), line = 133
  3415
  3416 9C4A A5 F5			lda MIDFILES._TIMERSTATUS
  3417 9C4C 09 80			ora #$80
  3418 9C4E 85 F5			sta MIDFILES._TIMERSTATUS
  3419 9C50			@exit
  3420 					.ifdef @new
  3421 					lda <@VarData
  3422 					sta :ztmp
  3423 					lda >@VarData
  3424 					ldy #@VarDataSize-1
  3425 					jmp @FreeMem
  3426 					els
  3427 9C50 60				rts						; ret
  3428 					eif
  3429 				.endl
  3430
  3431 9C51			.local	STATUSSTOPPED					; PROCEDURE
  3432
  3433 				; optimize OK (helpers.inc), line = 138
  3434
  3435 9C51 A9 01			lda #$01
  3436 9C53 8D D2 21			sta ISSTOPPED
  3437
  3438 				; optimize OK (helpers.inc), line = 139
  3439
  3440 9C56 A9 CF			lda #$CF
  3441 9C58 85 D4			sta SCRADR
  3442 9C5A A9 37			lda #$37
  3443 9C5C 85 D5			sta SCRADR+1
  3444
  3445 				; optimize OK (helpers.inc), line = 140
  3446
  3447 9C5E A9 20			lda #$20
  3448 9C60 8D DB 21			sta PUTTEXT.S
  3449 9C63 A9 80			lda #$80
  3450 9C65 8D DC 21			sta PUTTEXT.S+1
  3451 9C68 20 D4 99			jsr PUTTEXT
  3452
  3453 				; optimize OK (helpers.inc), line = 141
  3454
  3455 9C6B A5 F5			lda MIDFILES._TIMERSTATUS
  3456 9C6D 09 80			ora #$80
  3457 9C6F 85 F5			sta MIDFILES._TIMERSTATUS
  3458
  3459 				; optimize OK (helpers.inc), line = 142
  3460
  3461 9C71 A9 00			lda #$00
  3462 9C73 85 F0			sta MIDFILES._TOTALTICKS
  3463 9C75 85 F1			sta MIDFILES._TOTALTICKS+1
  3464 9C77 85 F2			sta MIDFILES._TOTALTICKS+2
  3465 9C79 85 F3			sta MIDFILES._TOTALTICKS+3
  3466 9C7B A9 01			lda #$01
  3467 9C7D 85 F4			sta MIDFILES._SUBCNT
  3468
  3469 				; optimize OK (helpers.inc), line = 143
  3470
  3471 9C7F 78				sei
  3472 9C80 AD 63 21 8D 10 02		mva MIDFILES.OLDTIMERVEC VTIMR1
  3473 9C86 AD 64 21 8D 11 02		mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
  3474 9C8C A5 10			lda irqens
  3475 9C8E 29 FE			and #$fe
  3476 9C90 85 10			sta irqens
  3477 9C92 8D 0E D2			sta irqen
  3478 9C95 58				cli
  3479
  3480 				; optimize FAIL ('RESET_MIDI', helpers.inc), line = 144
  3481
  3482 9C96 20 1B 9B			jsr RESET_MIDI
  3483
  3484 				; optimize OK (helpers.inc), line = 145
  3485
  3486 9C99 A9 00			lda #$00
  3487 9C9B 85 88			sta SYSTEM.MOVE_0103.SOURCE
  3488 9C9D A9 3C			lda #$3C
  3489 9C9F 85 89			sta SYSTEM.MOVE_0103.SOURCE+1
  3490 9CA1 A9 00			lda #$00
  3491 9CA3 85 8C			sta SYSTEM.MOVE_0103.DEST
  3492 9CA5 A9 3E			lda #$3E
  3493 9CA7 85 8D			sta SYSTEM.MOVE_0103.DEST+1
  3494 9CA9 A9 00			lda #$00
  3495 9CAB 85 84			sta SYSTEM.MOVE_0103.COUNT
  3496 9CAD A9 02			lda #$02
  3497 9CAF 85 85			sta SYSTEM.MOVE_0103.COUNT+1
  3498 9CB1				.local +MAIN.SYSTEM.MOVE_0103
  3499 9CB1				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0103.M@INLINE [Source: MIDICar Player.a65]
     4 9CB1 20 4C 84			jsr @move
Source: MIDICar Player.a65
  3500 					.endl
  3501
  3502 				; optimize OK (helpers.inc), line = 146
  3503
  3504 9CB4 A9 00			lda #$00
  3505 9CB6 8D C8 21			sta CHN
  3506
  3507 				; optimize FAIL ('CLEARUVMETERS', helpers.inc), line = 147
  3508
  3509 9CB9 20 CB 9B			jsr CLEARUVMETERS
  3510 9CBC			@exit
  3511 					.ifdef @new
  3512 					lda <@VarData
  3513 					sta :ztmp
  3514 					lda >@VarData
  3515 					ldy #@VarDataSize-1
  3516 					jmp @FreeMem
  3517 					els
  3518 9CBC 60				rts						; ret
  3519 					eif
  3520 				.endl
  3521
  3522 9CBD			.local	STATUSLOADING					; PROCEDURE
  3523
  3524 				; optimize OK (helpers.inc), line = 152
  3525
  3526 9CBD A9 D0			lda #$D0
  3527 9CBF 85 D4			sta SCRADR
  3528 9CC1 A9 37			lda #$37
  3529 9CC3 85 D5			sta SCRADR+1
  3530
  3531 				; optimize OK (helpers.inc), line = 153
  3532
  3533 9CC5 A9 29			lda #$29
  3534 9CC7 8D DB 21			sta PUTTEXT.S
  3535 9CCA A9 80			lda #$80
  3536 9CCC 8D DC 21			sta PUTTEXT.S+1
  3537 9CCF 20 D4 99			jsr PUTTEXT
  3538 9CD2			@exit
  3539 					.ifdef @new
  3540 					lda <@VarData
  3541 					sta :ztmp
  3542 					lda >@VarData
  3543 					ldy #@VarDataSize-1
  3544 					jmp @FreeMem
  3545 					els
  3546 9CD2 60				rts						; ret
  3547 					eif
  3548 				.endl
  3549
  3550 9CD3			.local	EXIT2DOS					; PROCEDURE
  3551
  3552 				; optimize OK (helpers.inc), line = 164
  3553
  3554 9CD3 A9 00			lda #$00
  3555 9CD5 20 5F 99			jsr CIO.CLS
  3556 9CD8 A9 00			lda #$00
  3557 9CDA 8D A1 21			sta CIO.OPN.CHN
  3558 9CDD A9 0C			lda #$0C
  3559 9CDF 8D A2 21			sta CIO.OPN.AX1
  3560 9CE2 A9 00			lda #$00
  3561 9CE4 8D A3 21			sta CIO.OPN.AX2
  3562 9CE7 A9 42			lda #$42
  3563 9CE9 8D A4 21			sta CIO.OPN.DEVICE
  3564 9CEC A9 80			lda #$80
  3565 9CEE 8D A5 21			sta CIO.OPN.DEVICE+1
  3566 9CF1 20 21 99			jsr CIO.OPN
  3567 9CF4 A9 01			lda #$01
  3568 9CF6 85 41			sta SOUNDR
  3569 9CF8 A9 00			lda #$00
  3570 9CFA 4C A6 A1			jmp @halt
  3571 9CFD			@exit
  3572 					.ifdef @new
  3573 					lda <@VarData
  3574 					sta :ztmp
  3575 					lda >@VarData
  3576 					ldy #@VarDataSize-1
  3577 					jmp @FreeMem
  3578 					els
  3579 9CFD 60				rts						; ret
  3580 					eif
  3581 				.endl
  3582
  3583 9CFE			.local	MYNMI						; PROCEDURE | ASSEMBLER | INTERRUPT
  3584
  3585 				; -------------------  ASM Block 00000086  -------------------
  3586
  3587 9CFE			  icl 'asms/nmi.a65'
Source: nmi.a65
     1 = 0012			RTCLOK = $12
     2 = D209			KBCODE = $d209
     3 = D20F			SKSTAT = $d20f
     4 = D40F			NMIRES = $d40f
     5
     6 = 022B			SRTIMR = $022b
     7 = 026D			KEYDIS = $026d
     8 = 02DA			KEYREP = $02da
     9 = 02F1			KEYDEL = $02f1
    10 = 02FC			CH     = $02fc
    11 = 02C0			PCOLR0 = $02c0
    12 = D012			COLPM0 = $d012
    13
    14 				// systemowa procedure obsługi RTClock ($C0E2)
    15 9CFE D8			    cld
    16 9CFF 8D 4A 9D		    sta rega
    17 9D02 8E 4C 9D		    stx regx
    18 9D05 8C 4E 9D		    sty regy
    19 9D08 8D 0F D4		    STA NMIRES
    20
    21 9D0B E6 14		    inc RTCLOK+2
    22 9D0D D0 06		    bne end_rtclk
    23 9D0F E6 13		    inc RTCLOK+1
    24 9D11 D0 02		    bne end_rtclk
    25 9D13 E6 12		    inc RTCLOK
    26
    27 9D15			end_rtclk:
    28
    29 				// fragment systemowej procedury kopiowania rejestrów kolorów
    30 				//    ldx #$08
    31 				//colloop:
    32 				//    lda PCOLR0,x
    33 				//    sta COLPM0,x
    34 				//    dex
    35 				//    bpl colloop
    36
    37 				// systemowa procedura obsługi klawiatry ($C1A1)
    38 9D15 AD 0F D2		    lda SKSTAT
    39 9D18 29 04		    and #$04
    40 9D1A F0 08		    beq skip_keyDelay
    41 9D1C AD F1 02		    lda KEYDEL
    42 9D1F F0 03		    beq skip_keyDelay
    43 9D21 CE F1 02		    dec KEYDEL
    44 9D24			skip_keyDelay:
    45 9D24 AD 2B 02		    lda SRTIMR
    46 9D27 F0 20		    beq end_key
    47
    48 9D29 AD 0F D2		    lda SKSTAT
    49 9D2C 29 04		    and #$04
    50 9D2E D0 14		    bne skip_key
    51
    52 9D30 CE 2B 02		    dec SRTIMR
    53 9D33 D0 14		    bne end_key
    54 9D35 AD DA 02		    lda KEYREP
    55 9D38 8D 2B 02		    sta SRTIMR
    56
    57 9D3B AD 09 D2		    lda KBCODE
    58 9D3E 8D FC 02		    sta CH
    59 9D41 4C 49 9D		    jmp end_key
    60
    61 9D44			skip_key:
    62 9D44 A9 00		    lda #$00
    63 9D46 8D 2B 02		    sta SRTIMR
    64
    65 9D49			end_key:
    66
    67 9D49 A9 00		    lda rega:#0
    68 9D4B A2 00		    ldx regx:#0
    69 9D4D A0 00		    ldy regy:#0
  3588
  3589 9D4F 40				rti						; ret
  3590 				.endl
  3591
  3592 9D50			.local	INIT						; PROCEDURE
  3593
  3594 				; optimize OK (init.inc), line = 12
  3595
  3596 9D50 A9 00			lda #$00
  3597 9D52 8D 00 D4			sta DMACTL
  3598
  3599 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', init.inc), line = 14
  3600
  3601 9D55 20 17 8E			jsr MIDI_FIFO.FIFO_RESET
  3602
  3603 				; optimize OK (init.inc), line = 16
  3604
  3605 9D58 A9 30			lda #$30
  3606 9D5A 8D F4 02			sta CHBASE
  3607
  3608 				; optimize FAIL ('CLEARWORKAREA', init.inc), line = 17
  3609
  3610 9D5D 20 33 9B			jsr CLEARWORKAREA
  3611
  3612 				; optimize OK (init.inc), line = 18
  3613
  3614 9D60 A9 00			lda #$00
  3615 9D62 8D 30 02			sta $0230
  3616 9D65 A9 34			lda #$34
  3617 9D67 8D 31 02			sta $0230+1
  3618
  3619 				; optimize OK (init.inc), line = 19
  3620
  3621 9D6A A9 00			lda #$00
  3622 9D6C 8D D3 21			sta FN
  3623 9D6F A9 80			lda #$80
  3624 9D71 8D D4 21			sta FN+1
  3625
  3626 				; optimize OK (init.inc), line = 21
  3627
  3628 9D74 A9 9E			lda #$9E
  3629 9D76 85 D4			sta SCRADR
  3630 9D78 A9 37			lda #$37
  3631 9D7A 85 D5			sta SCRADR+1
  3632 9D7C A9 46			lda #$46
  3633 9D7E 8D DB 21			sta PUTTEXT.S
  3634 9D81 A9 80			lda #$80
  3635 9D83 8D DC 21			sta PUTTEXT.S+1
  3636 9D86 20 D4 99			jsr PUTTEXT
  3637
  3638 				; optimize FAIL ('CLEARSTATUS', init.inc), line = 22
  3639
  3640 9D89 20 77 9B			jsr CLEARSTATUS
  3641
  3642 				; -------------------  ASM Block 00000087  -------------------
  3643
  3644 				 lda #$fe \ sta $100 
  3644 9D8C A9 FE		 LDA #$FE 
  3644 9D8E 8D 00 01		 STA $100 
  3645 				; optimize FAIL ('MISC.DETECTMEM', init.inc), line = 26
  3646
  3647 9D91 20 7B 98			jsr MISC.DETECTMEM
  3648 9D94 AD A0 21			lda MISC.DETECTMEM.RESULT
  3649 9D97 8D E4 21			sta TOTALXMS
  3650 9D9A A9 00			lda #$00
  3651 9D9C 8D E5 21			sta TOTALXMS+1
  3652
  3653 				; optimize OK (init.inc), line = 27
  3654
  3655 9D9F A9 10			lda #$10
  3656 9DA1 85 8C			sta :ecx
  3657 9DA3 A9 00			lda #$00
  3658 9DA5 85 8D			sta :ecx+1
  3659 9DA7 AD E4 21			lda TOTALXMS
  3660 9DAA 85 84			sta :eax
  3661 9DAC AD E5 21			lda TOTALXMS+1
  3662 9DAF 85 85			sta :eax+1
  3663 					.ifdef fmulinit
  3664 					fmulu_16
  3665 					els
  3666 9DB1 20 48 85			imulCX
  3667 					eif
  3668 9DB4 A5 84			lda :eax
  3669 9DB6 18 69 22			add #$22
  3670 9DB9 8D E4 21			sta TOTALXMS
  3671 9DBC A5 85			lda :eax+1
  3672 9DBE 69 00			adc #$00
  3673 9DC0 8D E5 21			sta TOTALXMS+1
  3674
  3675 				; optimize OK (init.inc), line = 28
  3676
  3677 9DC3 A9 EC			lda #$EC
  3678 9DC5 85 D4			sta SCRADR
  3679 9DC7 A9 37			lda #$37
  3680 9DC9 85 D5			sta SCRADR+1
  3681
  3682 				; optimize OK (init.inc), line = 29
  3683
  3684 9DCB A9 58			lda #$58
  3685 9DCD 8D DB 21			sta PUTTEXT.S
  3686 9DD0 A9 80			lda #$80
  3687 9DD2 8D DC 21			sta PUTTEXT.S+1
  3688 9DD5 20 D4 99			jsr PUTTEXT
  3689
  3690 				; optimize OK (init.inc), line = 30
  3691
  3692 9DD8 AD E4 21			lda TOTALXMS
  3693 9DDB 8D E2 21			sta PUTINT.VALUE
  3694 9DDE AD E5 21			lda TOTALXMS+1
  3695 9DE1 8D E3 21			sta PUTINT.VALUE+1
  3696 9DE4 20 A0 9A			jsr PUTINT
  3697
  3698 				; optimize OK (init.inc), line = 31
  3699
  3700 9DE7 A9 5F			lda #$5F
  3701 9DE9 8D DB 21			sta PUTTEXT.S
  3702 9DEC A9 80			lda #$80
  3703 9DEE 8D DC 21			sta PUTTEXT.S+1
  3704 9DF1 20 D4 99			jsr PUTTEXT
  3705
  3706 				; optimize OK (init.inc), line = 33
  3707
  3708 9DF4 A9 00			lda #$00
  3709 9DF6 8D 75 98			sta MIDFILES.MIDTRACKS
  3710 9DF9 A9 3E			lda #$3E
  3711 9DFB 8D 76 98			sta MIDFILES.MIDTRACKS+1
  3712
  3713 				; optimize OK (init.inc), line = 34
  3714
  3715 9DFE A9 00			lda #$00
  3716 9E00 8D 48 21			sta MIDFILES.MIDDATA
  3717 9E03 A9 40			lda #$40
  3718 9E05 8D 49 21			sta MIDFILES.MIDDATA+1
  3719
  3720 				; optimize OK (init.inc), line = 36
  3721
  3722 9E08 A9 00			lda #$00
  3723 9E0A 85 DE			sta MIDFILES.CTRK
  3724
  3725 9E0C			l_09C3
  3726 				; --- ForToDoCondition
  3727 9E0C A5 DE			lda MIDFILES.CTRK
  3728 9E0E C9 10			cmp #$10
  3729 9E10 B0 3B			jcs l_09D1
  3730
  3731 				; optimize OK (init.inc), line = 38
  3732
  3733 9E12 85 9D			sta :STACKORIGIN+9
  3734 9E14 A9 00			lda #$00
  3735 9E16 06 9D			asl :STACKORIGIN+9
  3736 9E18 2A				rol @
  3737 9E19 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3738 9E1B A9 9A			lda #$9A
  3739 9E1D 85 9E			sta :STACKORIGIN+10
  3740 9E1F A9 34			lda #$34
  3741 9E21 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3742 9E23 A5 DE			lda MIDFILES.CTRK
  3743 9E25 20 CE 8A			jsr @mul40
  3744 9E28 18 65 9E			add :STACKORIGIN+10
  3745 9E2B 85 9E			sta :STACKORIGIN+10
  3746 9E2D A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  3747 9E2F 65 85			adc :eax+1
  3748 9E31 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3749 9E33 A5 9D			lda :STACKORIGIN+9
  3750 9E35 18 69 00			add #$00
  3751 9E38 A8				tay
  3752 9E39 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  3753 9E3B 69 00			adc #$00
  3754 9E3D 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3755 9E3F A5 9E			lda :STACKORIGIN+10
  3756 9E41 99 A7 21			sta adr.CHANNELSCRADR,y
  3757 9E44 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  3758 9E46 99 A8 21			sta adr.CHANNELSCRADR+1,y
  3759
  3760 				; --- ForToDoEpilog
  3761 9E49 E6 DE			inc MIDFILES.CTRK
  3762 9E4B D0 BF			jne l_09C3
  3763 9E4D			l_09D1
  3764
  3765 				; optimize OK (init.inc), line = 40
  3766
  3767 9E4D AD FA FF			lda NMIVEC
  3768 9E50 8D D5 21			sta OLDNMIVEC
  3769 9E53 AD FB FF			lda NMIVEC+1
  3770 9E56 8D D6 21			sta OLDNMIVEC+1
  3771
  3772 				; optimize OK (init.inc), line = 42
  3773
  3774 9E59 A9 00			lda #$00
  3775 9E5B 8D 0E D4			sta NMIEN
  3776 9E5E A9 FE			lda <MYNMI
  3777 9E60 8D FA FF			sta NMIVEC
  3778 9E63 A9 9C			lda >MYNMI
  3779 9E65 8D FB FF			sta NMIVEC+1
  3780 9E68 A9 40			lda #$40
  3781 9E6A 8D 0E D4			sta NMIEN
  3782
  3783 				; optimize OK (init.inc), line = 44
  3784
  3785 9E6D A5 14			lda _TM
  3786 9E6F 8D C7 21			sta OTM
  3787
  3788 				; optimize FAIL ('SETCOLORS', init.inc), line = 45
  3789
  3790 9E72 20 80 99			jsr SETCOLORS
  3791
  3792 				; optimize OK (init.inc), line = 46
  3793
  3794 9E75 A9 22			lda #$22
  3795 9E77 8D 00 D4			sta DMACTL
  3796 9E7A A9 00			lda #$00
  3797 9E7C 85 41			sta SOUNDR
  3798
  3799 				; ------------------------------------------------------------
  3800
  3801 = 21E4			TOTALXMS	= DATAORIGIN+$01E4
  3802
  3803 = 21E4			@VarData	= TOTALXMS
  3804 = 0002			@VarDataSize	= 2
  3805
  3806 9E7E			@exit
  3807 					.ifdef @new
  3808 					lda <@VarData
  3809 					sta :ztmp
  3810 					lda >@VarData
  3811 					ldy #@VarDataSize-1
  3812 					jmp @FreeMem
  3813 					els
  3814 9E7E 60				rts						; ret
  3815 					eif
  3816 				.endl
  3817
  3818 9E7F			.local	LOADSONG					; PROCEDURE
  3819
  3820 9E7F 4C E2 9E			jmp l_0A0E
  3821
  3822 9E82			.local	LOADPRC						; PROCEDURE
  3823 9E82 8D E8 21			sta V
  3824
  3825 				; optimize OK (load.inc), line = 8
  3826
  3827 9E85 A9 59			lda #$59
  3828 9E87 18 6D E7 21			add T
  3829 9E8B 8D CE 37			sta $37CE
  3830
  3831 				; optimize FAIL (0, load.inc), line = 9
  3832
  3833 9E8E EE E7 21			inc T
  3834 9E91 AD E7 21			lda T
  3835 9E94 C9 04			cmp #$04
  3836 9E96 D0 05			jne l_0A30
  3837 9E98 A9 00			lda #$00
  3838 9E9A 8D E7 21			sta T
  3839 9E9D			l_0A30
  3840
  3841 				; optimize OK (load.inc), line = 10
  3842
  3843 9E9D AD E8 21			lda V
  3844 9EA0 F0 3F			jeq l_0A49
  3845
  3846 				; optimize OK (load.inc), line = 12
  3847
  3848 9EA2 A9 D8			lda #$D8
  3849 9EA4 85 D4			sta SCRADR
  3850 9EA6 A9 37			lda #$37
  3851 9EA8 85 D5			sta SCRADR+1
  3852
  3853 				; optimize OK (load.inc), line = 13
  3854
  3855 9EAA AD E8 21			lda V
  3856 9EAD 38 E9 01			sub #$01
  3857 9EB0 8D E2 21			sta PUTINT.VALUE
  3858 9EB3 A9 00			lda #$00
  3859 9EB5 E9 00			sbc #$00
  3860 9EB7 8D E3 21			sta PUTINT.VALUE+1
  3861 9EBA 20 A0 9A			jsr PUTINT
  3862 9EBD A4 D5			ldy SCRADR+1
  3863 9EBF 84 81			sty :bp+1
  3864 9EC1 A4 D4			ldy SCRADR
  3865 9EC3 A9 0F			lda #$0F
  3866 9EC5 91 80			sta (:bp),y
  3867 9EC7 E6 D4			inc SCRADR
  3868 9EC9 D0 02			sne
  3869 9ECB E6 D5			inc SCRADR+1
  3870
  3871 				; optimize OK (load.inc), line = 14
  3872
  3873 9ECD AD 4C 21			lda MIDFILES.TOTALTRACKS
  3874 9ED0 8D E2 21			sta PUTINT.VALUE
  3875 9ED3 A9 00			lda #$00
  3876 9ED5 8D E3 21			sta PUTINT.VALUE+1
  3877 9ED8 20 A0 9A			jsr PUTINT
  3878 9EDB E6 D4			inc SCRADR
  3879 9EDD D0 02			sne
  3880 9EDF E6 D5			inc SCRADR+1
  3881 9EE1			l_0A49
  3882
  3883 				; ------------------------------------------------------------
  3884
  3885 = 21E8			V	= DATAORIGIN+$01E8
  3886
  3887 = 21E8			@VarData	= V
  3888 = 0001			@VarDataSize	= 1
  3889
  3890 9EE1			@exit
  3891 					.ifdef @new
  3892 					lda <@VarData
  3893 					sta :ztmp
  3894 					lda >@VarData
  3895 					ldy #@VarDataSize-1
  3896 					jmp @FreeMem
  3897 					els
  3898 9EE1 60				rts						; ret
  3899 					eif
  3900 				.endl
  3901 9EE2			l_0A0E
  3902
  3903 				; optimize OK (load.inc), line = 19
  3904
  3905 9EE2 A9 BA			lda #$BA
  3906 9EE4 85 D4			sta SCRADR
  3907 9EE6 A9 37			lda #$37
  3908 9EE8 85 D5			sta SCRADR+1
  3909 9EEA AD D3 21			lda FN
  3910 9EED 8D DB 21			sta PUTTEXT.S
  3911 9EF0 AD D4 21			lda FN+1
  3912 9EF3 8D DC 21			sta PUTTEXT.S+1
  3913 9EF6 20 D4 99			jsr PUTTEXT
  3914
  3915 				; optimize FAIL ('STATUSLOADING', load.inc), line = 20
  3916
  3917 9EF9 20 BD 9C			jsr STATUSLOADING
  3918
  3919 				; optimize OK (load.inc), line = 21
  3920
  3921 9EFC A9 82			lda <LOADPRC
  3922 9EFE 8D 65 21			sta MIDFILES.LOADPROCESS
  3923 9F01 A9 9E			lda >LOADPRC
  3924 9F03 8D 66 21			sta MIDFILES.LOADPROCESS+1
  3925 9F06 A9 00			lda #$00
  3926 9F08 8D E7 21			sta T
  3927
  3928 				; optimize OK (load.inc), line = 22
  3929
  3930 9F0B AD D3 21			lda FN
  3931 9F0E 8D 6B 21			sta MIDFILES.LOADMID.FN
  3932 9F11 AD D4 21			lda FN+1
  3933 9F14 8D 6C 21			sta MIDFILES.LOADMID.FN+1
  3934 9F17 20 1A 8F			jsr MIDFILES.LOADMID
  3935 9F1A AD 6D 21			lda MIDFILES.LOADMID.RESULT
  3936 9F1D 8D E6 21			sta ERR
  3937
  3938 				; optimize OK (load.inc), line = 23
  3939
  3940 9F20 F0 62			jeq l_0A90
  3941
  3942 				; optimize OK (load.inc), line = 25
  3943
  3944 9F22 A9 CF			lda #$CF
  3945 9F24 85 D4			sta SCRADR
  3946 9F26 A9 37			lda #$37
  3947 9F28 85 D5			sta SCRADR+1
  3948
  3949 				; optimize OK (load.inc), line = 26
  3950
  3951 9F2A AD E6 21			lda ERR
  3952 9F2D 30 2B			jmi l_0AA7
  3953
  3954 				; optimize OK (load.inc), line = 27
  3955
  3956 9F2F 8D E9 21			sta @CASETMP_0003
  3957 9F32 C9 64			cmp #$64
  3958 9F34 D0 10			jne l_0AB3
  3959 				@
  3960
  3961 				; optimize OK (load.inc), line = 28
  3962
  3963 9F36 A9 63			lda #$63
  3964 9F38 8D DB 21			sta PUTTEXT.S
  3965 9F3B A9 80			lda #$80
  3966 9F3D 8D DC 21			sta PUTTEXT.S+1
  3967 9F40 20 D4 99			jsr PUTTEXT
  3968
  3969 9F43 4C 57 9F			jmp a_0003
  3970 9F46			l_0AB3
  3971 9F46 C9 65			cmp #$65
  3972 9F48 D0 0D			jne l_0ABE
  3973 				@
  3974
  3975 				; optimize OK (load.inc), line = 29
  3976
  3977 9F4A A9 77			lda #$77
  3978 9F4C 8D DB 21			sta PUTTEXT.S
  3979 9F4F A9 80			lda #$80
  3980 9F51 8D DC 21			sta PUTTEXT.S+1
  3981 9F54 20 D4 99			jsr PUTTEXT
  3982
  3983 9F57			l_0ABE
  3984 9F57			a_0003
  3985 9F57 4C 75 9F			jmp l_0ACF
  3986 9F5A			l_0AA7
  3987
  3988 				; optimize OK (load.inc), line = 33
  3989
  3990 9F5A A9 8B			lda #$8B
  3991 9F5C 8D DB 21			sta PUTTEXT.S
  3992 9F5F A9 80			lda #$80
  3993 9F61 8D DC 21			sta PUTTEXT.S+1
  3994 9F64 20 D4 99			jsr PUTTEXT
  3995 9F67 AD E6 21			lda ERR
  3996 9F6A 8D E2 21			sta PUTINT.VALUE
  3997 9F6D A9 00			lda #$00
  3998 9F6F 8D E3 21			sta PUTINT.VALUE+1
  3999 9F72 20 A0 9A			jsr PUTINT
  4000 9F75			l_0ACF
  4001
  4002 				; --- WhileProlog
  4003 9F75			l_0AD8
  4004
  4005 				; optimize OK (load.inc), line = 35
  4006
  4007 9F75 AD FC 02			lda KEYB
  4008 9F78 C9 FF			cmp #$FF
  4009 9F7A F0 F9			jeq l_0AD8
  4010
  4011 				; optimize OK (load.inc), line = 36
  4012
  4013 9F7C A9 FF			lda #$FF
  4014 9F7E 8D FC 02			sta KEYB
  4015
  4016 				; optimize FAIL ('EXIT2DOS', load.inc), line = 37
  4017
  4018 9F81 20 D3 9C			jsr EXIT2DOS
  4019 9F84			l_0A90
  4020
  4021 				; optimize OK (load.inc), line = 39
  4022
  4023 9F84 A9 00			lda #$00
  4024 9F86 85 88			sta SYSTEM.MOVE_0103.SOURCE
  4025 9F88 A9 3E			lda #$3E
  4026 9F8A 85 89			sta SYSTEM.MOVE_0103.SOURCE+1
  4027 9F8C A9 00			lda #$00
  4028 9F8E 85 8C			sta SYSTEM.MOVE_0103.DEST
  4029 9F90 A9 3C			lda #$3C
  4030 9F92 85 8D			sta SYSTEM.MOVE_0103.DEST+1
  4031 9F94 A9 00			lda #$00
  4032 9F96 85 84			sta SYSTEM.MOVE_0103.COUNT
  4033 9F98 A9 02			lda #$02
  4034 9F9A 85 85			sta SYSTEM.MOVE_0103.COUNT+1
  4035 9F9C				.local +MAIN.SYSTEM.MOVE_0103
  4036 9F9C				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0103.M@INLINE [Source: MIDICar Player.a65]
     4 9F9C 20 4C 84			jsr @move
Source: MIDICar Player.a65
  4037 					.endl
  4038
  4039 				; ------------------------------------------------------------
  4040
  4041 = 21E6			ERR	= DATAORIGIN+$01E6
  4042 = 21E7			T	= DATAORIGIN+$01E7
  4043 = 21E9			@CASETMP_0003	= DATAORIGIN+$01E9
  4044
  4045 = 21E6			@VarData	= ERR
  4046 = 0003			@VarDataSize	= 3
  4047
  4048 9F9F			@exit
  4049 					.ifdef @new
  4050 					lda <@VarData
  4051 					sta :ztmp
  4052 					lda >@VarData
  4053 					ldy #@VarDataSize-1
  4054 					jmp @FreeMem
  4055 					els
  4056 9F9F 60				rts						; ret
  4057 					eif
  4058 				.endl
  4059 9FA0			l_009F
  4060
  4061 				; optimize FAIL ('INIT', MIDICar Player.pas), line = 56
  4062
  4063 9FA0 20 50 9D			jsr INIT
  4064
  4065 				; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 58
  4066
  4067 9FA3 20 E6 8D			jsr SYSTEM.PARAMCOUNT
  4068 9FA6 AD 1E 21			lda SYSTEM.PARAMCOUNT.RESULT
  4069 9FA9 C9 01			cmp #$01
  4070 9FAB D0 1A			jne l_0B01
  4071 				@
  4072
  4073 				; optimize OK (MIDICar Player.pas), line = 60
  4074
  4075 9FAD A9 01			lda #$01
  4076 9FAF 20 EF 8D			jsr SYSTEM.PARAMSTR
  4077 9FB2 AD 04 8E			lda SYSTEM.PARAMSTR.RESULT
  4078 9FB5 8D D3 21			sta FN
  4079 9FB8 AD 05 8E			lda SYSTEM.PARAMSTR.RESULT+1
  4080 9FBB 8D D4 21			sta FN+1
  4081
  4082 				; optimize FAIL ('LOADSONG', MIDICar Player.pas), line = 61
  4083
  4084 9FBE 20 7F 9E			jsr LOADSONG
  4085
  4086 				; optimize FAIL ('CLEARSTATUS', MIDICar Player.pas), line = 62
  4087
  4088 9FC1 20 77 9B			jsr CLEARSTATUS
  4089 9FC4 4C CC 9F			jmp l_0B12
  4090 9FC7			l_0B01
  4091
  4092 				; optimize OK (MIDICar Player.pas), line = 67
  4093
  4094 9FC7 A9 00			lda #$00
  4095 9FC9 8D 4C 21			sta MIDFILES.TOTALTRACKS
  4096 9FCC			l_0B12
  4097
  4098 				; optimize FAIL ('CLEARUVMETERS', MIDICar Player.pas), line = 70
  4099
  4100 9FCC 20 CB 9B			jsr CLEARUVMETERS
  4101
  4102 				; optimize FAIL ('STATUSPLAYING', MIDICar Player.pas), line = 71
  4103
  4104 9FCF 20 01 9C			jsr STATUSPLAYING
  4105
  4106 				; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 74
  4107
  4108 9FD2 20 0A 8E			jsr MC6850.MC6850_RESET
  4109
  4110 				; optimize OK (MIDICar Player.pas), line = 75
  4111
  4112 9FD5 A9 96			lda #$96
  4113 9FD7 20 10 8E			jsr MC6850.MC6850_INIT
  4114
  4115 				; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 77
  4116
  4117 9FDA 20 1B 9B			jsr RESET_MIDI
  4118
  4119 				; optimize FAIL ('MIDFILES.INITTIMER', MIDICar Player.pas), line = 78
  4120
  4121 9FDD 20 E8 97			jsr MIDFILES.INITTIMER
  4122
  4123 				; --- RepeatUntilProlog
  4124 9FE0			l_0B1E
  4125
  4126 				; optimize FAIL ('MIDFILES.PROCESSMIDI', MIDICar Player.pas), line = 83
  4127
  4128 9FE0 20 66 97			jsr MIDFILES.PROCESSMIDI
  4129
  4130 				; optimize OK (MIDICar Player.pas), line = 84
  4131
  4132 9FE3 AD D2 21			lda ISSTOPPED
  4133 9FE6 D0 18			jne l_0B3A
  4134 9FE8 A5 DF			lda MIDFILES.PLAYINGTRACKS
  4135 9FEA D0 14			jne l_0B3A
  4136
  4137 				; optimize OK (MIDICar Player.pas), line = 86
  4138
  4139 9FEC A5 4A			lda PLAYERSTATUS
  4140 9FEE 29 04			and #$04
  4141 9FF0 F0 09			jeq l_0B51
  4142
  4143 				; optimize FAIL ('STATUSSTOPPED', MIDICar Player.pas), line = 88
  4144
  4145 9FF2 20 51 9C			jsr STATUSSTOPPED
  4146
  4147 				; optimize FAIL ('STATUSPLAYING', MIDICar Player.pas), line = 89
  4148
  4149 9FF5 20 01 9C			jsr STATUSPLAYING
  4150 9FF8 4C 00 A0			jmp l_0B5D
  4151 9FFB			l_0B51
  4152
  4153 				; optimize OK (MIDICar Player.pas), line = 92
  4154
  4155 9FFB A9 3E			lda #$3E
  4156 9FFD 8D FC 02			sta KEYB
  4157 A000			l_0B5D
  4158 A000			l_0B3A
  4159
  4160 				; optimize OK (MIDICar Player.pas), line = 95
  4161
  4162 A000 A5 14			lda _TM
  4163 A002 CD C7 21			cmp OTM
  4164 A005 D0 03 4C 8C A0		jeq l_0B77
  4165
  4166 				; optimize OK (MIDICar Player.pas), line = 97
  4167
  4168 A00A 8D C7 21			sta OTM
  4169
  4170 				; optimize OK (MIDICar Player.pas), line = 98
  4171
  4172 A00D A9 C0			lda #$C0
  4173 A00F 85 D4			sta SCRADR
  4174 A011 A9 37			lda #$37
  4175 A013 85 D5			sta SCRADR+1
  4176 A015 A9 F0			lda <MIDFILES._TOTALTICKS
  4177 A017 8D DF 21			sta PUTHEX.V
  4178 A01A A9 00			lda >MIDFILES._TOTALTICKS
  4179 A01C 8D E0 21			sta PUTHEX.V+1
  4180 A01F A9 08			lda #$08
  4181 A021 8D E1 21			sta PUTHEX.N
  4182 A024 20 32 9A			jsr PUTHEX
  4183
  4184 				; optimize OK (uvmeters.inc), line = 1
  4185
  4186 A027 A5 4A			lda PLAYERSTATUS
  4187 A029 29 02			and #$02
  4188 A02B F0 5F			jeq l_0B9B
  4189
  4190 				; optimize OK (uvmeters.inc), line = 3
  4191
  4192 A02D A9 00			lda #$00
  4193 A02F 8D C8 21			sta CHN
  4194
  4195 				; --- RepeatUntilProlog
  4196 A032			l_0BA1
  4197
  4198 				; optimize OK (uvmeters.inc), line = 5
  4199
  4200 A032 AD C8 21			lda CHN
  4201 A035 0A				asl @
  4202 A036 A8				tay
  4203 A037 B9 A7 21			lda adr.CHANNELSCRADR,y
  4204 A03A 85 D4			sta SCRADR
  4205 A03C B9 A8 21			lda adr.CHANNELSCRADR+1,y
  4206 A03F 85 D5			sta SCRADR+1
  4207
  4208 				; optimize OK (uvmeters.inc), line = 6
  4209
  4210 A041 AC C8 21			ldy CHN
  4211 A044 B9 53 21			lda MIDFILES.adr.CHNVOLUME,y
  4212 A047 8D D1 21			sta C
  4213
  4214 				; optimize OK (uvmeters.inc), line = 7
  4215
  4216 A04A F0 36			jeq l_0BC4
  4217
  4218 				; optimize OK (uvmeters.inc), line = 9
  4219
  4220 A04C C9 05			cmp #$05
  4221 A04E 90 09			jcc l_0BD7
  4222 A050 38 E9 04			sub #$04
  4223 A053 8D D1 21			sta C
  4224 A056 4C 5E A0			jmp l_0BE2
  4225 A059			l_0BD7
  4226 A059 A9 00			lda #$00
  4227 A05B 8D D1 21			sta C
  4228 A05E			l_0BE2
  4229
  4230 				; optimize OK (uvmeters.inc), line = 10
  4231
  4232 A05E AC C8 21			ldy CHN
  4233 A061 AD D1 21			lda C
  4234 A064 99 53 21			sta MIDFILES.adr.CHNVOLUME,y
  4235
  4236 				; optimize OK (uvmeters.inc), line = 11
  4237
  4238 A067 4A				lsr @
  4239 A068 29 3C			and #$3C
  4240 A06A 8D CF 21			sta V
  4241
  4242 				; -------------------  ASM Block 00000088  -------------------
  4243
  4244 A06D 18			        clc
  4245 A06E A9 80		        lda #<UVMETER_ADDR
  4246 A070 6D CF 21		        adc v
  4247 A073 85 D6		        sta $d6
  4248 A075 A9 38		        lda #>UVMETER_ADDR
  4249 A077 85 D7		        sta $d7
  4250 A079 A0 03		        ldy #3
  4251 A07B			      loop:
  4252 A07B B1 D6		        lda ($d6),y
  4253 A07D 91 D4		        sta ($d4),y
  4254 A07F 88			        dey
  4255 A080 10 F9		        bpl loop
  4256 				      
  4257 A082			l_0BC4
  4258
  4259 				; optimize FAIL (0, uvmeters.inc), line = 29
  4260
  4261 A082 EE C8 21			inc CHN
  4262
  4263 				; optimize OK (uvmeters.inc), line = 30
  4264
  4265 A085 AD C8 21			lda CHN
  4266 A088 C9 10			cmp #$10
  4267 A08A D0 A6			jne l_0BA1
  4268 A08C			l_0B9B
  4269 A08C			l_0B77
  4270
  4271 				; optimize OK (keyboard.inc), line = 1
  4272
  4273 A08C AD FC 02			lda KEYB
  4274 A08F C9 FF			cmp #$FF
  4275 A091 D0 03 4C 87 A1		jeq l_0C26
  4276
  4277 				; optimize OK (keyboard.inc), line = 3
  4278
  4279 A096 8D EA 21			sta @CASETMP_0004
  4280 A099 C9 1C			cmp #$1C
  4281 A09B D0 06			jne l_0C32
  4282 				@
  4283 A09D 4C 8A A1			jmp b_0B1E					; break
  4284
  4285 A0A0 4C 82 A1			jmp a_0004
  4286 A0A3			l_0C32
  4287 A0A3 C9 00			cmp #$00
  4288 A0A5 D0 0C			jne l_0C3B
  4289 				@
  4290
  4291 				; optimize OK (keyboard.inc), line = 7
  4292
  4293 A0A7 A5 4A			lda PLAYERSTATUS
  4294 A0A9 49 04			eor #$04
  4295 A0AB 85 4A			sta PLAYERSTATUS
  4296
  4297 				; optimize FAIL ('ISLOOPED', keyboard.inc), line = 8
  4298
  4299 A0AD 20 4B 9B			jsr ISLOOPED
  4300
  4301 A0B0 4C 82 A1			jmp a_0004
  4302 A0B3			l_0C3B
  4303 A0B3 C9 25			cmp #$25
  4304 A0B5 D0 29			jne l_0C4F
  4305 				@
  4306
  4307 				; optimize OK (keyboard.inc), line = 12
  4308
  4309 A0B7 A5 4A			lda PLAYERSTATUS
  4310 A0B9 49 02			eor #$02
  4311 A0BB 85 4A			sta PLAYERSTATUS
  4312
  4313 				; optimize OK (keyboard.inc), line = 13
  4314
  4315 A0BD A9 72			lda #$72
  4316 A0BF 85 88			sta SYSTEM.FILLCHAR_0102.A
  4317 A0C1 A9 34			lda #$34
  4318 A0C3 85 89			sta SYSTEM.FILLCHAR_0102.A+1
  4319 A0C5 A9 20			lda #$20
  4320 A0C7 85 8C			sta SYSTEM.FILLCHAR_0102.COUNT
  4321 A0C9 A9 03			lda #$03
  4322 A0CB 85 8D			sta SYSTEM.FILLCHAR_0102.COUNT+1
  4323 A0CD A9 00			lda #$00
  4324 A0CF 85 84			sta SYSTEM.FILLCHAR_0102.VALUE
  4325 A0D1				.local +MAIN.SYSTEM.FILLCHAR_0102
  4326 A0D1				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0102.M@INLINE [Source: MIDICar Player.a65]
     4 A0D1 20 A1 84			jsr @fill
Source: MIDICar Player.a65
  4327 					.endl
  4328
  4329 				; optimize OK (keyboard.inc), line = 14
  4330
  4331 A0D4 A5 4A			lda PLAYERSTATUS
  4332 A0D6 29 02			and #$02
  4333 A0D8 F0 03			jeq l_0C73
  4334
  4335 				; optimize FAIL ('CLEARUVMETERS', keyboard.inc), line = 15
  4336
  4337 A0DA 20 CB 9B			jsr CLEARUVMETERS
  4338 A0DD			l_0C73
  4339
  4340 A0DD 4C 82 A1			jmp a_0004
  4341 A0E0			l_0C4F
  4342 A0E0 C9 27			cmp #$27
  4343 A0E2 D0 0C			jne l_0C80
  4344 				@
  4345
  4346 				; optimize OK (keyboard.inc), line = 19
  4347
  4348 A0E4 A5 4A			lda PLAYERSTATUS
  4349 A0E6 49 01			eor #$01
  4350 A0E8 85 4A			sta PLAYERSTATUS
  4351
  4352 				; optimize FAIL ('SETCOLORS', keyboard.inc), line = 20
  4353
  4354 A0EA 20 80 99			jsr SETCOLORS
  4355
  4356 A0ED 4C 82 A1			jmp a_0004
  4357 A0F0			l_0C80
  4358 A0F0 C9 0A			cmp #$0A
  4359 A0F2 D0 10			jne l_0C94
  4360 				@
  4361
  4362 				; optimize OK (keyboard.inc), line = 24
  4363
  4364 A0F4 A5 F5			lda MIDFILES._TIMERSTATUS
  4365 A0F6 10 06			jpl l_0CAA
  4366
  4367 				; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 26
  4368
  4369 A0F8 20 01 9C			jsr STATUSPLAYING
  4370 A0FB 4C 01 A1			jmp l_0CB5
  4371 A0FE			l_0CAA
  4372
  4373 				; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 27
  4374
  4375 A0FE 20 2D 9C			jsr STATUSPAUSE
  4376 A101			l_0CB5
  4377
  4378 A101 4C 82 A1			jmp a_0004
  4379 A104			l_0C94
  4380 A104 C9 3E			cmp #$3E
  4381 A106 D0 06			jne l_0CBF
  4382 				@
  4383
  4384 				; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 29
  4385
  4386 A108 20 51 9C			jsr STATUSSTOPPED
  4387 A10B 4C 82 A1			jmp a_0004
  4388 A10E			l_0CBF
  4389 A10E C9 0E			cmp #$0E
  4390 A110 F0 08			beq @+
  4391 A112 C9 06			cmp #$06
  4392 A114 F0 04			beq @+
  4393 A116 C9 0F			cmp #$0F
  4394 A118 D0 68			jne l_0CCD
  4395 				@
  4396
  4397 				; optimize OK (keyboard.inc), line = 32
  4398
  4399 A11A AD FC 02			lda KEYB
  4400 A11D C9 0E			cmp #$0E
  4401 A11F D0 21			jne l_0CDF
  4402 A121 AD 67 21			lda MIDFILES.TEMPOSHIFT
  4403 A124 18 69 20			add #$20
  4404 A127 8D 67 21			sta MIDFILES.TEMPOSHIFT
  4405 A12A AD 68 21			lda MIDFILES.TEMPOSHIFT+1
  4406 A12D 69 4E			adc #$4E
  4407 A12F 8D 68 21			sta MIDFILES.TEMPOSHIFT+1
  4408 A132 AD 69 21			lda MIDFILES.TEMPOSHIFT+2
  4409 A135 69 00			adc #$00
  4410 A137 8D 69 21			sta MIDFILES.TEMPOSHIFT+2
  4411 A13A AD 6A 21			lda MIDFILES.TEMPOSHIFT+3
  4412 A13D 69 00			adc #$00
  4413 A13F 8D 6A 21			sta MIDFILES.TEMPOSHIFT+3
  4414 A142			l_0CDF
  4415
  4416 				; optimize OK (keyboard.inc), line = 33
  4417
  4418 A142 AD FC 02			lda KEYB
  4419 A145 C9 06			cmp #$06
  4420 A147 D0 21			jne l_0CF5
  4421 A149 AD 67 21			lda MIDFILES.TEMPOSHIFT
  4422 A14C 38 E9 20			sub #$20
  4423 A14F 8D 67 21			sta MIDFILES.TEMPOSHIFT
  4424 A152 AD 68 21			lda MIDFILES.TEMPOSHIFT+1
  4425 A155 E9 4E			sbc #$4E
  4426 A157 8D 68 21			sta MIDFILES.TEMPOSHIFT+1
  4427 A15A AD 69 21			lda MIDFILES.TEMPOSHIFT+2
  4428 A15D E9 00			sbc #$00
  4429 A15F 8D 69 21			sta MIDFILES.TEMPOSHIFT+2
  4430 A162 AD 6A 21			lda MIDFILES.TEMPOSHIFT+3
  4431 A165 E9 00			sbc #$00
  4432 A167 8D 6A 21			sta MIDFILES.TEMPOSHIFT+3
  4433 A16A			l_0CF5
  4434
  4435 				; optimize OK (keyboard.inc), line = 34
  4436
  4437 A16A AD FC 02			lda KEYB
  4438 A16D C9 0F			cmp #$0F
  4439 A16F D0 0E			jne l_0D0B
  4440 A171 A9 00			lda #$00
  4441 A173 8D 67 21			sta MIDFILES.TEMPOSHIFT
  4442 A176 8D 68 21			sta MIDFILES.TEMPOSHIFT+1
  4443 A179 8D 69 21			sta MIDFILES.TEMPOSHIFT+2
  4444 A17C 8D 6A 21			sta MIDFILES.TEMPOSHIFT+3
  4445 A17F			l_0D0B
  4446
  4447 				; optimize FAIL ('MIDFILES.SETTEMPO', keyboard.inc), line = 35
  4448
  4449 A17F 20 1D 93			jsr MIDFILES.SETTEMPO
  4450
  4451 A182			l_0CCD
  4452 A182			a_0004
  4453
  4454 				; optimize OK (keyboard.inc), line = 38
  4455
  4456 A182 A9 FF			lda #$FF
  4457 A184 8D FC 02			sta KEYB
  4458 A187			l_0C26
  4459
  4460 				; optimize OK (MIDICar Player.pas), line = 104
  4461
  4462 A187 4C E0 9F			jmp l_0B1E
  4463 A18A			b_0B1E
  4464
  4465 				; optimize FAIL ('STATUSSTOPPED', MIDICar Player.pas), line = 108
  4466
  4467 A18A 20 51 9C			jsr STATUSSTOPPED
  4468
  4469 				; optimize OK (MIDICar Player.pas), line = 109
  4470
  4471 A18D A9 00			lda #$00
  4472 A18F 8D 0E D4			sta NMIEN
  4473 A192 AD D5 21			lda OLDNMIVEC
  4474 A195 8D FA FF			sta NMIVEC
  4475 A198 AD D6 21			lda OLDNMIVEC+1
  4476 A19B 8D FB FF			sta NMIVEC+1
  4477 A19E A9 40			lda #$40
  4478 A1A0 8D 0E D4			sta NMIEN
  4479
  4480 				; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 110
  4481
  4482 A1A3 20 D3 9C			jsr EXIT2DOS
  4483
  4484 				; ------------------------------------------------------------
  4485
  4486 = 3000			CHARS_ADDR	= $3000
  4487 = 3400			DLIST_ADDR	= $3400
  4488 = 3422			SCREEN_ADDR	= $3422
  4489 = 37BA			SCREEN_TIME	= $37BA
  4490 = 37CE			SCREEN_STATUS	= $37CE
  4491 = 3880			UVMETER_ADDR	= $3880
  4492 = 3C00			START_INFO_ADDR	= $3C00
  4493 = 3E00			TRACK_DATA_ADDR	= $3E00
  4494 = 4000			MIDI_DATA_ADDR	= $4000
  4495 = 0022			FREE_MEM	= $22
  4496 = 0020			F_CLEAR	= $20
  4497 = 0001			PS_COLORSET	= $01
  4498 = 0002			PS_VIEW	= $02
  4499 = 0004			PS_LOOP	= $04
  4500 = 21A7			adr.CHANNELSCRADR	= [DATAORIGIN+$01A7] .array [16] .word
  4501 A1A6			.var CHANNELSCRADR	= adr.CHANNELSCRADR .word
  4502 = 00D4			SCRADR	= $D4
  4503 = 0014			_TM	= $14
  4504 = 21C7			OTM	= DATAORIGIN+$01C7
  4505 = 21C8			CHN	= DATAORIGIN+$01C8
  4506 = 21C9			TPTR	= DATAORIGIN+$01C9
  4507 = 21CB			TPS	= DATAORIGIN+$01CB
  4508 = 21CD			SEC	= DATAORIGIN+$01CD
  4509 = 21CE			TRKSTAT	= DATAORIGIN+$01CE
  4510 = 21CF			V	= DATAORIGIN+$01CF
  4511 = 21D0			I	= DATAORIGIN+$01D0
  4512 = 21D1			C	= DATAORIGIN+$01D1
  4513 = 21D2			ISSTOPPED	= DATAORIGIN+$01D2
  4514 = 21D3			FN	= DATAORIGIN+$01D3
  4515 = 21D5			OLDNMIVEC	= DATAORIGIN+$01D5
  4516 = 004A			PLAYERSTATUS	= $4A
  4517 = 8098			adr.COLORS	= CODEORIGIN+$0098
  4518 A1A6			.var COLORS	= adr.COLORS .word
  4519 = 80A2			adr.GM_RESET	= CODEORIGIN+$00A2
  4520 A1A6			.var GM_RESET	= adr.GM_RESET .word
  4521 = 0000			K_L	= $00
  4522 = 0006			K_PLUS	= $06
  4523 = 000A			K_P	= $0A
  4524 = 000E			K_MINUS	= $0E
  4525 = 000F			K_EQ	= $0F
  4526 = 001C			K_ESC	= $1C
  4527 = 0021			K_SPACE	= $21
  4528 = 0025			K_M	= $25
  4529 = 0027			K_INVERS	= $27
  4530 = 003E			K_S	= $3E
  4531 = 02FC			KEYB	= $02FC
  4532 = 21D7			PUTTEXTINVERT	= DATAORIGIN+$01D7
  4533 = D40E			NMIEN	= $D40E
  4534 = FFFA			NMIVEC	= $FFFA
  4535 = 21D8			SDMACTL	= DATAORIGIN+$01D8
  4536 = D400			DMACTL	= $D400
  4537 = 02F4			CHBASE	= $02F4
  4538 = 0041			SOUNDR	= $41
  4539 = 21EA			@CASETMP_0004	= DATAORIGIN+$01EA
  4540 A1A6			@exit
  4541
  4542 A1A6 A2 00		@halt	ldx #$00
  4543 A1A8 9A				txs
  4544 					.ifdef MAIN.@DEFINES.ROMOFF
  4545 A1A9 EE 01 D3			inc portb
  4546 					.fi
  4547
  4548 A1AC A0 01			ldy #$01
  4549
  4550 A1AE 60				rts
  4551
  4552 				; ------------------------------------------------------------
  4553
  4554 A1AF 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  4555
  4556 				; ------------------------------------------------------------
  4557
  4558 A1BF			.local	@DEFINES
  4559 A1BF			ATARI
  4560 A1BF			USE_FIFO
  4561 A1BF			ROMOFF
  4562 				.endl
  4563
  4564 A1BF			.local	@RESOURCE
  4565 				.endl
  4566
  4567 = A1BF A7 21		CHANNELSCRADR
  4567 = A1C1 98 80		COLORS
  4567 = A1C3 A2 80		GM_RESET
  4567 				.endl							; MAIN
  4568
  4569 				; ------------------------------------------------------------
  4570 				; ------------------------------------------------------------
  4571
  4572 				.macro	UNITINITIALIZATION
  4573 				
  4574 					.ifdef MAIN.SYSTEM.@UnitInit
  4575 					jsr MAIN.SYSTEM.@UnitInit
  4576 					.fi
  4577 				
  4578 					.ifdef MAIN.MC6850.@UnitInit
  4579 					jsr MAIN.MC6850.@UnitInit
  4580 					.fi
  4581 				
  4582 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  4583 					jsr MAIN.MIDI_FIFO.@UnitInit
  4584 					.fi
  4585 				
  4586 					.ifdef MAIN.MIDFILES.@UnitInit
  4587 					jsr MAIN.MIDFILES.@UnitInit
  4588 					.fi
  4589 				
  4590 					.ifdef MAIN.MISC.@UnitInit
  4591 					jsr MAIN.MISC.@UnitInit
  4592 					.fi
  4593 				
  4594 					.ifdef MAIN.CIO.@UnitInit
  4595 					jsr MAIN.CIO.@UnitInit
  4596 					.fi
  4597 				.endm
  4598
  4599 				; ------------------------------------------------------------
  4600
  4601 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4602 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4602 				SYSTEM: $8C5C..$8E09
  4603 					eif
  4604
  4605 					ift .SIZEOF(MAIN.MC6850) > 0
  4606 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  4606 				MC6850: $8E0A..$8E16
  4607 					eif
  4608
  4609 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  4610 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  4610 				MIDI_FIFO: $8E17..$8EB8
  4611 					eif
  4612
  4613 					ift .SIZEOF(MAIN.MIDFILES) > 0
  4614 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  4614 				MIDFILES: $8EB9..$987A
  4615 					eif
  4616
  4617 					ift .SIZEOF(MAIN.MISC) > 0
  4618 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  4618 				MISC: $987B..$9920
  4619 					eif
  4620
  4621 					ift .SIZEOF(MAIN.CIO) > 0
  4622 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  4622 				CIO: $9921..$997F
  4623 					eif
  4624
  4625 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4625 				CODE: $8000..$A1BE
  4626
  4627 				; ------------------------------------------------------------
  4628
  4629 					org $2000
  4630
  4631 2000			DATAORIGIN
  4632 2000-2005> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  4633
  4634 = 0006			VARINITSIZE	= *-DATAORIGIN
  4635 = 01EB			VARDATASIZE	= 491
  4636
  4637 = 21EB			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4638
  4639 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4639 				DATA: $2000..$21EB
  4640
  4641 02E0-02E1> B5 8B			run START
  4642
  4643 				; ------------------------------------------------------------
  4644
  4645 				.macro	STATICDATA
  4646 				.by  $00 $00 $04 $4C $4F $4F $50 $00  $04 $20 $20 $20 $20 $00 $07 $50  $6C $61 $79 $69 $6E $67 $00 $07
  4647 				.by  $50 $61 $75 $73 $65 $20 $20 $00  $07 $53 $74 $6F $70 $70 $65 $64  $00 $07 $4C $6F $61 $64 $69 $6E
  4648 				.by  $67 $00 $0E $43 $61 $6C $63 $75  $6C $61 $74 $69 $6E $67 $2E $2E  $2E $00 $02 $45 $3A $00 $10 $05
  4649 				.by  $12 $12 $12 $12 $12 $54 $49 $4D  $45 $12 $12 $12 $12 $12 $17 $00  $05 $4D $65 $6D $3A $20 $00 $02
  4650 				.by  $4B $42 $00 $12 $55 $6E $73 $75  $70 $70 $6F $72 $74 $65 $64 $20  $66 $6F $72 $6D $61 $74 $00 $12
  4651 				.by  $4E $6F $74 $20 $65 $6E $6F $75  $67 $68 $74 $20 $6D $65 $6D $6F  $72 $79 $00 $0B $49 $2F $4F $20
  4652 				.by  $45 $72 $72 $6F $72 $20 $23 $00  $00 $00 $0A $00 $0A $0A $0A $00  $00 $00 $F0 $7E $7F $09 $01 $F7
  4653 				.endm
  4654
  4655 					end
