mads 2.1.6
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 8000			CODEORIGIN	= $8000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				.local	RESOURCE
   105 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1142 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 8075				RCDATA 'resources/selftest.mti' TRACK_DATA_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0009			len = .filesize('resources/selftest.mti')-0
    28 8075				org main.TRACK_DATA_ADDR
    30 3E00-3E08> 00 00 40 00 + 	ins 'resources/selftest.mti',0
    32 					.print '$R RCDATA  ',main.TRACK_DATA_ADDR,'..',*-1," 'resources/selftest.mti'"
    32 				$R RCDATA  $3E00..$3E08 'resources/selftest.mti'
Source: MIDICar Player.a65
   110 3E09				RCDATA 'resources/selftest.rmd' MIDI_DATA_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 006A			len = .filesize('resources/selftest.rmd')-0
    28 3E09				org main.MIDI_DATA_ADDR
    30 4000-4069> 00 FF 21 01 + 	ins 'resources/selftest.rmd',0
    32 					.print '$R RCDATA  ',main.MIDI_DATA_ADDR,'..',*-1," 'resources/selftest.rmd'"
    32 				$R RCDATA  $4000..$4069 'resources/selftest.rmd'
Source: MIDICar Player.a65
   111 406A				RCASM 'resources/dlist.asm' DLIST_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 406A				org RESORIGIN
     4 = 0023			len = .sizeof(_DLIST_ADDR)
     6 				mcpy	ift main.DLIST_ADDR+len >= $bc20
    11 8075-80B8> 20 41 80		jsr sys.off
    13 8078 A9 96 85 88 A9 80 +  MWA #DATA EDX
    13 8080 A9 00 85 8C A9 34 +  MWA #MAIN.DLIST_ADDR ECX
    13 8088 A9 23 85 84 A9 00 +  MWA #LEN EAX
    13 8090 20 00 80		 JSR RESOURCE.MEMCPY
    15 8093 4C 65 80			jmp sys.on
    16 8096			data
Source: dlist.inc
     1 = 0000			DL_BLANK1 = 0; // 1 blank line
     2 = 0010			DL_BLANK2 = %00010000; // 2 blank lines
     3 = 0020			DL_BLANK3 = %00100000; // 3 blank lines
     4 = 0030			DL_BLANK4 = %00110000; // 4 blank lines
     5 = 0040			DL_BLANK5 = %01000000; // 5 blank lines
     6 = 0050			DL_BLANK6 = %01010000; // 6 blank lines
     7 = 0060			DL_BLANK7 = %01100000; // 7 blank lines
     8 = 0070			DL_BLANK8 = %01110000; // 8 blank lines
    10 = 0080			DL_DLI = %10000000; // Order to run DLI
    11 = 0040			DL_LMS = %01000000; // Order to set new memory address
    12 = 0020			DL_VSCROLL = %00100000; // Turn on vertical scroll on this line
    13 = 0010			DL_HSCROLL = %00010000; // Turn on horizontal scroll on this line
    15 = 0002			DL_MODE_40x24T2 = 2; // Antic Modes
    16 = 0004			DL_MODE_40x24T5 = 4;
    17 = 0005			DL_MODE_40x12T5 = 5;
    18 = 0006			DL_MODE_20x24T5 = 6;
    19 = 0007			DL_MODE_20x12T5 = 7;
    20 = 0008			DL_MODE_40x24G4 = 8;
    21 = 0009			DL_MODE_80x48G2 = 9;
    22 = 000A			DL_MODE_80x48G4 = $A;
    23 = 000B			DL_MODE_160x96G2 = $B;
    24 = 000C			DL_MODE_160x192G2 = $C;
    25 = 000D			DL_MODE_160x96G4 = $D;
    26 = 000E			DL_MODE_160x192G4 = $E;
    27 = 000F			DL_MODE_320x192G2 = $F;
    29 = 0001			DL_JMP = %00000001; // Order to jump
    30 = 0041			DL_JVB = %01000001; // Jump to begining
     3 3400			dl_start
     4 3400 70 70		    :2 dta DL_BLANK8
     6 3402 42 30 34		    dta DL_MODE_40x24T2 + DL_LMS, A(MAIN.SCREEN_ADDR)
     7 3405 00			    dta DL_BLANK1
     9 3406 02 02 02 02 02 02 +     :24 dta DL_MODE_40x24T2
    11 341E 00			    dta DL_BLANK1
    12 341F 02			    dta DL_MODE_40x24T2
    14 3420 41 00 34		    dta DL_JVB, A(dl_start)
    23 					.print '$R RCASM   ',main.DLIST_ADDR,'..',main.DLIST_ADDR+len-1," 'resources/dlist.asm'"
    23 				$R RCASM   $3400..$3422 'resources/dlist.asm'
    25 02E2-02E3> 75 80			ini mcpy
Source: MIDICar Player.a65
   112 				.endl
   113
   114 				; ------------------------------------------------------------
   115
   116 80B9				org CODEORIGIN
   117
   118 8000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 8000-9E2C> 04 54 52 55 + .by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $02  $45 $3A $00 $12 $AD $A9 $A4 $A9
     2 8018 A3 E1 F2 80 B0 EC + .by  $A3 $E1 $F2 $80 $B0 $EC $E1 $F9  $E5 $F2 $80 $B2 $A3 $91 $00 $08  $92 $90 $92 $92 $80 $A7 $B3 $A4
     3 8030 00 07 AC EF E1 E4 + .by  $00 $07 $AC $EF $E1 $E4 $E9 $EE  $E7 $00 $12 $B5 $EE $F3 $F5 $F0  $F0 $EF $F2 $F4 $E5 $E4 $80 $E6
     4 8048 EF F2 ED E1 F4 00 + .by  $EF $F2 $ED $E1 $F4 $00 $12 $AE  $EF $F4 $80 $E5 $EE $EF $F5 $E7  $E8 $F4 $80 $ED $E5 $ED $EF $F2
     5 8060 F9 00 0B A9 8F AF + .by  $F9 $00 $0B $A9 $8F $AF $80 $A5  $F2 $F2 $EF $F2 $80 $83 $00 $07  $B0 $EC $E1 $F9 $E9 $EE $E7 $00
     6 8078 07 B0 E1 F5 F3 E5 + .by  $07 $B0 $E1 $F5 $F3 $E5 $80 $80  $00 $F0 $7E $7F $09 $01 $F7 $10  $11 $12 $13 $14 $15 $16 $17 $18
     7 8090 19 61 62 63 64 65 + .by  $19 $61 $62 $63 $64 $65 $66
Source: MIDICar Player.a65
   119
   120 				; ------------------------------------------------------------
   121
   122 8097			RTLIB
   123 8097				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   124
   125 				.print 'ZPAGE: ',zpage,'..',zpend-1
   125 				ZPAGE: $0080..$00D3
   126
   127 				.print 'RTLIB: ',RTLIB,'..',*-1
   127 				RTLIB: $8097..$8BAA
   128
   129 				; ------------------------------------------------------------
   130
   131 8BAB			START
   132 8BAB BA				tsx
   133 8BAC 8E 0F 9E			stx MAIN.@halt+1
   134
   135 					.ifdef fmulinit
   136 					fmulinit
   137 					.fi
   138
   139 = 01F9			VLEN	= VARDATASIZE-VARINITSIZE
   140 = 9E36			VADR	= DATAORIGIN+VARINITSIZE
   141
   142 					ift VADR > $BFFF
   143 					ert 'Invalid memory address range ',VADR
   144 					eli (VLEN>0) && (VLEN<=256)
   145 					ldx #256-VLEN
   146 					lda #$00
   147 					sta:rne VADR+VLEN-256,x+
   148 					eli VLEN>256
   149 					@fill #VADR #VLEN #$00
   149 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   149 8BAF A9 36 85 88 A9 9E +  MWA #VADR @FILL.PTR1
   149 8BB7 A9 F9 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   149 8BBF A9 00 85 84		 MVA #$00 @FILL.PTR2
   149 8BC3 20 76 84		 JSR @FILL
   150 					eif
   151
   152 				.ifdef :psptr
   153 					mwa #PROGRAMSTACK :psptr
   154 				.fi
   155
   156 					.ifdef MAIN.@DEFINES.ROMOFF
   157 8BC6				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 8BC6			.local	rominit
     5
     6 8BC6 78			        sei
     7 8BC7 A9 00		        lda #%00000000
     8 8BC9 8D 0E D4		        sta NMIEN       ;$D40E
     9 8BCC A9 FE		        lda #%11111110
    10 8BCE 8D 01 D3		        sta PORTB       ;$D301
    11
    12 8BD1 A2 03			ldx #3
    13 8BD3 A0 00			ldy #0
    14 8BD5 EE 01 D3		mv	inc portb
    15 8BD8 B9 00 E0		afnt0	lda $e000,y
    16 8BDB CE 01 D3			dec portb
    17 8BDE 99 00 E0		afnt1	sta $e000,y
    18 8BE1 C8				iny
    19 8BE2 D0 F1			bne mv
    20 8BE4 EE DA 8B			inc afnt0+2
    21 8BE7 EE E0 8B			inc afnt1+2
    22 8BEA CA				dex
    23 8BEB 10 E8			bpl mv
    24
    25 8BED A2 0A		        ldx #<nmiint
    26 8BEF A0 8C		        ldy #>nmiint
    27 8BF1 8E FA FF		        stx NMIVEC      ;$FFFA
    28 8BF4 8C FB FF		        sty NMIVEC+1
    29
    30 8BF7 A2 14		        ldx #<irqint
    31 8BF9 A0 8C		        ldy #>irqint
    32 8BFB 8E FE FF		        stx IRQVEC      ;$FFFE
    33 8BFE 8C FF FF		        sty IRQVEC+1
    34
    35 8C01 A9 40		        lda #%01000000
    36 8C03 8D 0E D4		        sta NMIEN       ;$D40E
    37 8C06 58			        cli
    38
    39 8C07 4C 35 8C			jmp skp
    40
    41
    42
    43 8C0A 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 8C0D 10 03		        spl
    45 8C0F 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 8C12 38			        sec
    48 8C13 24			        .byte $24        ;BIT $18
    49
    50 8C14 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 8C15 EE 01 D3		        inc PORTB       ;$D301
    55
    56 8C18 48			        pha
    57 8C19 8A			        txa
    58 8C1A 48			        pha
    59 8C1B BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 8C1C A9 8C		        lda #>iret      ;adres procedury iret
    64 8C1E 48			        pha
    65 8C1F A9 2E		        lda #<iret
    66 8C21 48			        pha
    67 8C22 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 8C25 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 8C26 90 03		        scc
    73 8C28 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 8C2B 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 8C2E 68			iret	pla
    77 8C2F AA				tax
    78 8C30 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 8C31 CE 01 D3		        dec PORTB       ;$D301
    83 8C34 40			        rti
    84
    85 8C35			skp
    86
    87 				.endl
    88
   158 					.fi
   159
   160 8C35 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   161 8C37 BD 40 03 9D 17 9E + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   162
   163 8C40 E8				inx						; X = 0
   164 8C41 86 80			stx bp						; BP = 0
   165
   166 8C43 8E 0F D2			stx skctl					; reset POKEY
   167 8C46 A9 03			lda #3
   168 8C48 8D 0F D2			sta skctl
   169
   170 8C4B CA				dex						; X = 255
   171
   172 8C4C				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
    27 8C4C 20 94 98			jsr MAIN.MIDFILES.@UnitInit
Source: MIDICar Player.a65
   173
   174 8C4F			.local	MAIN						; PROCEDURE
   175
   176 8C4F 4C 48 9D			jmp l_0088
   177
   178 				; ------------------------------------------------------------
   179
   180 8C52			.local	SYSTEM						; UNIT
   181
   182 8C52			.local	FILEPOS						; FUNCTION | ASSEMBLER
   183
   184 				; -------------------  ASM Block 00000011  -------------------
   185
   186 8C52 8A 48			txa:pha
   187
   188 8C54 AD 3B 9E 85 82 AD + 	mwa f :bp2
   189
   190 8C5E A0 04			ldy #s@file.chanel
   191 8C60 B1 82			lda (:bp2),y
   192 8C62 AA				tax
   193 8C63 A9 26			lda #38
   194 8C65 9D 42 03			sta iccmd,x
   195
   196 8C68				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8C68 EE 01 D3				inc portb
     6 8C6B 20 56 E4				jsr CIOV
     8 8C6E CE 01 D3				dec portb
Source: MIDICar Player.a65
   197
   198 8C71 8C 37 9E			sty IOResult
   199
   200 8C74 BD 4C 03 85 84		mva icax3,x :eax
   201 8C79 BD 4D 03 85 85		mva icax4,x :eax+1
   202 8C7E BD 4E 03 85 86		mva icax5,x :eax+2
   203
   204 8C83 A9 00 85 87			mva #$00 :eax+3
   205 8C87 85 8E			sta :ecx+2
   206 8C89 85 8F			sta :ecx+3
   207
   208 8C8B A0 02			ldy #s@file.record
   209 8C8D B1 82			lda (:bp2),y
   210 8C8F 85 8C			sta :ecx
   211 8C91 C8				iny
   212 8C92 B1 82			lda (:bp2),y
   213 8C94 85 8D			sta :ecx+1
   214
   215 8C96 20 E5 85			jsr idivEAX_ECX.main
   216
   217 8C99 A5 84 8D 3D 9E		mva :eax Result
   218 8C9E A5 85 8D 3E 9E		mva :eax+1 Result+1
   219 8CA3 A5 86 8D 3F 9E		mva :eax+2 Result+2
   220 8CA8 A5 87 8D 40 9E		mva :eax+3 Result+3
   221
   222 8CAD 68 AA			pla:tax
   223
   224 8CAF			@exit
   225
   226 				; ------------------------------------------------------------
   227
   228 = 9E3B			F	= DATAORIGIN+$000B
   229 = 9E3D			RESULT	= DATAORIGIN+$000D
   230
   231 = 9E3B			@VarData	= F
   232 = 0002			@VarDataSize	= 2
   233
   234 8CAF 60				rts						; ret
   235 				.endl
   236
   237 8CB0			.local	SEEK						; PROCEDURE | ASSEMBLER
   238
   239 				; -------------------  ASM Block 00000012  -------------------
   240
   241 8CB0 8A 48			txa:pha
   242
   243 8CB2 AD 41 9E 85 82 AD + 	mwa f :bp2
   244
   245 8CBC A0 04			ldy #s@file.chanel
   246 8CBE B1 82			lda (:bp2),y
   247 8CC0 AA				tax
   248 8CC1 A9 25			lda #37
   249 8CC3 9D 42 03			sta iccmd,x
   250
   251 8CC6 A0 02			ldy #s@file.record
   252 8CC8 B1 82			lda (:bp2),y
   253 8CCA 85 84			sta :eax
   254 8CCC C8				iny
   255 8CCD B1 82			lda (:bp2),y
   256 8CCF 85 85			sta :eax+1
   257 8CD1 A9 00			lda #$00
   258 8CD3 85 86			sta :eax+2
   259 8CD5 85 87			sta :eax+3
   260
   261 8CD7 AD 43 9E 85 8C		mva a :ecx
   262 8CDC AD 44 9E 85 8D		mva a+1 :ecx+1
   263 8CE1 AD 45 9E 85 8E		mva a+2 :ecx+2
   264 8CE6 AD 46 9E 85 8F		mva a+3 :ecx+3
   265
   266 8CEB 20 99 85			jsr imulECX
   267
   268 8CEE A5 84 9D 4C 03		mva :eax icax3,x
   269 8CF3 A5 85 9D 4D 03		mva :eax+1 icax4,x
   270 8CF8 A5 86 9D 4E 03		mva :eax+2 icax5,x
   271
   272 8CFD				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8CFD EE 01 D3				inc portb
     6 8D00 20 56 E4				jsr CIOV
     8 8D03 CE 01 D3				dec portb
Source: MIDICar Player.a65
   273
   274 8D06 8C 37 9E			sty IOResult
   275
   276 8D09 68 AA			pla:tax
   277
   278 				; ------------------------------------------------------------
   279
   280 = 9E41			F	= DATAORIGIN+$0011
   281 = 9E43			A	= DATAORIGIN+$0013
   282
   283 = 9E41			@VarData	= F
   284 = 0006			@VarDataSize	= 6
   285
   286 8D0B			@exit
   287 					.ifdef @new
   288 					lda <@VarData
   289 					sta :ztmp
   290 					lda >@VarData
   291 					ldy #@VarDataSize-1
   292 					jmp @FreeMem
   293 					els
   294 8D0B 60				rts						; ret
   295 					eif
   296 				.endl
   297
   298 8D0C			.local	EOF						; FUNCTION
   299
   300 				; optimize OK (SYSTEM), line = 1163
   301
   302 8D0C AD 47 9E			lda F
   303 8D0F 8D 3B 9E			sta FILEPOS.F
   304 8D12 AD 48 9E			lda F+1
   305 8D15 8D 3C 9E			sta FILEPOS.F+1
   306 8D18 20 52 8C			jsr FILEPOS
   307 8D1B AD 3D 9E			lda FILEPOS.RESULT
   308 8D1E 8D 4A 9E			sta I
   309 8D21 AD 3E 9E			lda FILEPOS.RESULT+1
   310 8D24 8D 4B 9E			sta I+1
   311 8D27 AD 3F 9E			lda FILEPOS.RESULT+2
   312 8D2A 8D 4C 9E			sta I+2
   313 8D2D AD 40 9E			lda FILEPOS.RESULT+3
   314 8D30 8D 4D 9E			sta I+3
   315 				; BlockRead
   316
   317 				; optimize OK (SYSTEM), line = 1165
   318
   319 8D33 AC 47 9E 84 82 AC + 	mwy F :bp2
   320 8D3D A0 06			ldy #s@file.buffer
   321 8D3F AD A0 8D			lda BF
   322 8D42 91 82			sta (:bp2),y
   323 8D44 C8				iny
   324 8D45 AD A1 8D			lda BF+1
   325 8D48 91 82			sta (:bp2),y
   326 8D4A A0 08			ldy #s@file.nrecord
   327 8D4C A9 01			lda #$01
   328 8D4E 91 82			sta (:bp2),y
   329 8D50 C8				iny
   330 8D51 A9 00			lda #$00
   331 8D53 91 82			sta (:bp2),y
   332
   333 8D55 8A 48			txa:pha
   334 8D57 38				sec
   335 					@readfile F, #7
   335 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
   335 8D58 AC 48 9E		 LDY F+1
   335 8D5B AD 47 9E		 LDA F
   335 8D5E A2 07		 LDX# 7
   335 8D60 20 66 81		 JSR @READFILE
   336 8D63 68 AA			pla:tax
   337
   338 				; optimize OK (SYSTEM), line = 1167
   339
   340 8D65 AD 47 9E			lda F
   341 8D68 8D 41 9E			sta SEEK.F
   342 8D6B AD 48 9E			lda F+1
   343 8D6E 8D 42 9E			sta SEEK.F+1
   344 8D71 AD 4A 9E			lda I
   345 8D74 8D 43 9E			sta SEEK.A
   346 8D77 AD 4B 9E			lda I+1
   347 8D7A 8D 44 9E			sta SEEK.A+1
   348 8D7D AD 4C 9E			lda I+2
   349 8D80 8D 45 9E			sta SEEK.A+2
   350 8D83 AD 4D 9E			lda I+3
   351 8D86 8D 46 9E			sta SEEK.A+3
   352 8D89 20 B0 8C			jsr SEEK
   353
   354 				; -------------------  ASM Block 00000013  -------------------
   355
   356 8D8C AD 47 9E 85 82 AD + 	mwa f :bp2
   357
   358 8D96 A0 05			ldy #s@file.status
   359 8D98 B1 82			lda (:bp2),y
   360 8D9A 29 01			and #e@file.eof
   361 8D9C 8D 49 9E			sta Result
   362
   363 8D9F			@exit
   364
   365 				; ------------------------------------------------------------
   366
   367 = 9E47			F	= DATAORIGIN+$0017
   368 = 9E49			RESULT	= DATAORIGIN+$0019
   369 = 9E4A			I	= DATAORIGIN+$001A
   370 = 9E4E			adr.BF	= [DATAORIGIN+$001E] .array [256]
   371 8D9F			.var BF	= adr.BF .word
   372
   373 = 9E47			@VarData	= F
   374 = 0106			@VarDataSize	= 262
   375
   376 8D9F 60				rts						; ret
   377 = 8DA0 4E 9E		BF
   377 				.endl
   378
   379 8DA2			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   380
   381 				; ------------------------------------------------------------
   382
   383 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   384 				; as Pointer
   385 8DA2 B5 94			lda :STACKORIGIN,x
   386 8DA4 85 88			sta A
   387 8DA6 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   388 8DA8 85 89			sta A+1
   389 8DAA CA				dex
   390 8DAB 30 05			jmi @main
   391
   392 				; ------------------------------------------------------------
   393
   394 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   395 				; as Pointer
   396 8DAD B5 94			lda :STACKORIGIN,x
   397 8DAF 85 8C			sta VALUE
   398 8DB1 CA				dex
   399 8DB2			@main
   400
   401 				; -------------------  ASM Block 00000018  -------------------
   402
   403 8DB2 A0 00			ldy #0
   404 8DB4 A5 8C 91 88			mva value (:edx),y
   405
   406 				; ------------------------------------------------------------
   407
   408 = 0088			A	= :EDX
   409 = 008C			VALUE	= :ECX
   410 8DB8			@exit
   411 					.ifdef @new
   412 					lda <@VarData
   413 					sta :ztmp
   414 					lda >@VarData
   415 					ldy #@VarDataSize-1
   416 					jmp @FreeMem
   417 					els
   418 8DB8 60				rts						; ret
   419 					eif
   420 				.endl
   421
   422 8DB9			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   423
   424 				; ------------------------------------------------------------
   425
   426 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   427 				; as Pointer
   428 8DB9 B5 94			lda :STACKORIGIN,x
   429 8DBB 85 88			sta A
   430 8DBD B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   431 8DBF 85 89			sta A+1
   432 8DC1 CA				dex
   433 8DC2 30 09			jmi @main
   434
   435 				; ------------------------------------------------------------
   436
   437 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   438 				; as Pointer
   439 8DC4 B5 94			lda :STACKORIGIN,x
   440 8DC6 85 8C			sta VALUE
   441 8DC8 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   442 8DCA 85 8D			sta VALUE+1
   443 8DCC CA				dex
   444 8DCD			@main
   445
   446 				; -------------------  ASM Block 00000019  -------------------
   447
   448 8DCD A0 00			ldy #0
   449 8DCF A5 8C 91 88			mva value (:edx),y
   450 8DD3 C8				iny
   451 8DD4 A5 8D 91 88			mva value+1 (:edx),y
   452
   453 				; ------------------------------------------------------------
   454
   455 = 0088			A	= :EDX
   456 = 008C			VALUE	= :ECX
   457 8DD8			@exit
   458 					.ifdef @new
   459 					lda <@VarData
   460 					sta :ztmp
   461 					lda >@VarData
   462 					ldy #@VarDataSize-1
   463 					jmp @FreeMem
   464 					els
   465 8DD8 60				rts						; ret
   466 					eif
   467 				.endl
   468
   469 8DD9			.local	FILLCHAR_00EB					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   470
   471 					.MACRO m@INLINE
   472 				
   473 				; -------------------  ASM Block 00000021  -------------------
   474 				
   475 					jsr @fill
   476 				
   477 					.ENDM
   478
   479 				; ------------------------------------------------------------
   480
   481 = 0088			A	= :EDX
   482 = 008C			COUNT	= :ECX
   483 = 0084			VALUE	= :EAX
   484 8DD9			@exit
   485 				.endl
   486
   487 8DD9			.local	MOVE_00EC					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   488
   489 					.MACRO m@INLINE
   490 				
   491 				; -------------------  ASM Block 00000028  -------------------
   492 				
   493 					jsr @move
   494 				
   495 					.ENDM
   496
   497 				; ------------------------------------------------------------
   498
   499 = 0088			SOURCE	= :EDX
   500 = 008C			DEST	= :ECX
   501 = 0084			COUNT	= :EAX
   502 8DD9			@exit
   503 				.endl
   504
   505 8DD9			.local	MOVE_00ED					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   506
   507 					.MACRO m@INLINE
   508 				
   509 				; -------------------  ASM Block 00000030  -------------------
   510 				
   511 					jsr @move
   512 				
   513 					.ENDM
   514
   515 				; ------------------------------------------------------------
   516
   517 = 0088			SOURCE	= :EDX
   518 = 008C			DEST	= :ECX
   519 = 0084			COUNT	= :EAX
   520 8DD9			@exit
   521 				.endl
   522
   523 8DD9			.local	PARAMCOUNT					; FUNCTION | ASSEMBLER
   524
   525 				; -------------------  ASM Block 00000044  -------------------
   526
   527 					@cmdline #255
   527 				 LDA# 255\ JSR @CMDLINE
   527 8DD9 A9 FF		 LDA# 255
   527 8DDB 20 2E 82		 JSR @CMDLINE
   528 8DDE 8D 4E 9F			sta Result
   529
   530 8DE1			@exit
   531
   532 				; ------------------------------------------------------------
   533
   534 = 9F4E			RESULT	= DATAORIGIN+$011E
   535 8DE1 60				rts						; ret
   536 				.endl
   537
   538 8DE2			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   539 8DE2 8D 4F 9F			sta I
   540
   541 				; -------------------  ASM Block 00000045  -------------------
   542
   543 					@cmdline i
   543 				 LDA I\ JSR @CMDLINE
   543 8DE5 AD 4F 9F		 LDA I
   543 8DE8 20 2E 82		 JSR @CMDLINE
   544
   545 				;	@move #@buf Result #33
   546 8DEB A0 DF			ldy #256-33
   547 8DED B9 21 03 99 71 9E + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   548
   549 8DF6			@exit
   550
   551 				; ------------------------------------------------------------
   552
   553 = 9F4F			I	= DATAORIGIN+$011F
   554 = 9F50			adr.RESULT	= [DATAORIGIN+$0120] .array [33]
   555 8DF6			.var RESULT	= adr.RESULT .word
   556
   557 = 9F4F			@VarData	= I
   558 = 0022			@VarDataSize	= 34
   559
   560 8DF6 60				rts						; ret
   561 = 8DF7 50 9F		RESULT
   561 				.endl
   562
   563 				; ------------------------------------------------------------
   564
   565 = 0101			__PORTB_BANKS	= $0101
   566 = 0648			M_PI_2	= $0648
   567 = 0192			D_PI_2	= $0192
   568 = 0004			D_PI_180	= $04
   569 = 0000			MGTIA	= $00
   570 = 0080			MVBXE	= $80
   571 = 0000			VBXE_XDLADR	= $00
   572 = 00E0			VBXE_BCBTMP	= $E0
   573 = 0100			VBXE_BCBADR	= $0100
   574 = 1000			VBXE_MAPADR	= $1000
   575 = 1000			VBXE_CHBASE	= $1000
   576 = 5000			VBXE_OVRADR	= $5000
   577 = B000			VBXE_WINDOW	= $B000
   578 = 0000			IDLI	= $00
   579 = 0001			IVBL	= $01
   580 = 0002			ITIM1	= $02
   581 = 0003			ITIM2	= $03
   582 = 0004			ITIM4	= $04
   583 = 00FE			CH_DELCHR	= $FE
   584 = 009B			CH_ENTER	= $9B
   585 = 001B			CH_ESC	= $1B
   586 = 001C			CH_CURS_UP	= $1C
   587 = 001D			CH_CURS_DOWN	= $1D
   588 = 001E			CH_CURS_LEFT	= $1E
   589 = 001F			CH_CURS_RIGHT	= $1F
   590 = 007F			CH_TAB	= $7F
   591 = 009B			CH_EOL	= $9B
   592 = 007D			CH_CLR	= $7D
   593 = 00FD			CH_BELL	= $FD
   594 = 007E			CH_DEL	= $7E
   595 = 009C			CH_DELLINE	= $9C
   596 = 009D			CH_INSLINE	= $9D
   597 = 0000			PAL_PMCOLOR0	= $00
   598 = 0001			PAL_PMCOLOR1	= $01
   599 = 0002			PAL_PMCOLOR2	= $02
   600 = 0003			PAL_PMCOLOR3	= $03
   601 = 0004			PAL_COLOR0	= $04
   602 = 0005			PAL_COLOR1	= $05
   603 = 0006			PAL_COLOR2	= $06
   604 = 0007			PAL_COLOR3	= $07
   605 = 0008			PAL_COLBAK	= $08
   606 = 0000			COLOR_BLACK	= $00
   607 = 000E			COLOR_WHITE	= $0E
   608 = 0032			COLOR_RED	= $32
   609 = 0096			COLOR_CYAN	= $96
   610 = 0068			COLOR_VIOLET	= $68
   611 = 00C4			COLOR_GREEN	= $C4
   612 = 0074			COLOR_BLUE	= $74
   613 = 00EE			COLOR_YELLOW	= $EE
   614 = 0028			COLOR_ORANGE	= $28
   615 = 00E4			COLOR_BROWN	= $E4
   616 = 003C			COLOR_LIGHTRED	= $3C
   617 = 0004			COLOR_GRAY1	= $04
   618 = 0006			COLOR_GRAY2	= $06
   619 = 000A			COLOR_GRAY3	= $0A
   620 = 00CC			COLOR_LIGHTGREEN	= $CC
   621 = 007C			COLOR_LIGHTBLUE	= $7C
   622 = 0004			FMOPENREAD	= $04
   623 = 0008			FMOPENWRITE	= $08
   624 = 0009			FMOPENAPPEND	= $09
   625 = 000C			FMOPENREADWRITE	= $0C
   626 = 9E30			SCREENWIDTH	= DATAORIGIN+$0000
   627 = 9E32			SCREENHEIGHT	= DATAORIGIN+$0002
   628 = 9E34			DATESEPARATOR	= DATAORIGIN+$0004
   629 = D20A			RND	= $D20A
   630 = 02C0			adr.PALETTE	= $02C0
   631 8DF9			.var PALETTE	= adr.PALETTE .word
   632 = D012			adr.HPALETTE	= $D012
   633 8DF9			.var HPALETTE	= adr.HPALETTE .word
   634 = 9E35			FILEMODE	= DATAORIGIN+$0005
   635 = 9E36			GRAPHMODE	= DATAORIGIN+$0006
   636 = 9E37			IORESULT	= DATAORIGIN+$0007
   637 = 9E38			EOLN	= DATAORIGIN+$0008
   638 = 9E39			RNDSEED	= DATAORIGIN+$0009
   639
   640 = 8DF9 C0 02		PALETTE
   640 = 8DFB 12 D0		HPALETTE
   640 				.endl							; UNIT SYSTEM
   641
   642 				; ------------------------------------------------------------
   643
   644 8DFD			.local	MC6850						; UNIT
   645
   646 8DFD			.local	MC6850_RESET					; PROCEDURE
   647
   648 				; optimize OK (MC6850), line = 70
   649
   650 8DFD A9 03			lda #$03
   651 8DFF 8D 00 D5			sta MC6850_CNTRREG
   652 8E02			@exit
   653 					.ifdef @new
   654 					lda <@VarData
   655 					sta :ztmp
   656 					lda >@VarData
   657 					ldy #@VarDataSize-1
   658 					jmp @FreeMem
   659 					els
   660 8E02 60				rts						; ret
   661 					eif
   662 				.endl
   663
   664 8E03			.local	MC6850_INIT					; PROCEDURE
   665 8E03 8D 71 9F			sta SETUP
   666
   667 				; optimize OK (MC6850), line = 75
   668
   669 8E06 8D 00 D5			sta MC6850_CNTRREG
   670
   671 				; ------------------------------------------------------------
   672
   673 = 9F71			SETUP	= DATAORIGIN+$0141
   674
   675 = 9F71			@VarData	= SETUP
   676 = 0001			@VarDataSize	= 1
   677
   678 8E09			@exit
   679 					.ifdef @new
   680 					lda <@VarData
   681 					sta :ztmp
   682 					lda >@VarData
   683 					ldy #@VarDataSize-1
   684 					jmp @FreeMem
   685 					els
   686 8E09 60				rts						; ret
   687 					eif
   688 				.endl
   689
   690 				; ------------------------------------------------------------
   691
   692 = D500			MC6850_BASE	= $D500
   693 = D500			ADDR_MC6850_CNTRREG	= $D500
   694 = D501			ADDR_MC6850_BUFFER	= $D501
   695 = D500			ADDR_MC6850_STATREG	= $D500
   696 = 0001			CR0	= $01
   697 = 0002			CR1	= $02
   698 = 0004			CR2	= $04
   699 = 0008			CR3	= $08
   700 = 0010			CR4	= $10
   701 = 0020			CR5	= $20
   702 = 0040			CR6	= $40
   703 = 0080			CR7	= $80
   704 = 0000			CD_1	= $00
   705 = 0001			CD_16	= $01
   706 = 0002			CD_64	= $02
   707 = 0003			MASTERRESET	= $03
   708 = 0000			WS_7BITS	= $00
   709 = 0010			WS_8BITS	= $10
   710 = 0000			WS_2BITSTOP	= $00
   711 = 0008			WS_1BITSTOP	= $08
   712 = 0000			WS_EVENPARITY	= $00
   713 = 0004			WS_ODDPARITY	= $04
   714 = 0000			TC_RTSLOW_NOTIRQ	= $00
   715 = 0020			TC_RTSLOW_TIRQ	= $20
   716 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   717 = 0060			TC_BREAKLEVEL	= $60
   718 = 0000			NOIRQ_RECEIVE	= $00
   719 = 0080			IRQ_RECEIVE	= $80
   720 = 0001			RDRF	= $01
   721 = 0002			TDRE	= $02
   722 = 0004			DCD	= $04
   723 = 0008			CTS	= $08
   724 = 0010			FE	= $10
   725 = 0020			OVRN	= $20
   726 = 0040			PE	= $40
   727 = 0080			IRQ	= $80
   728 = D500			MC6850_CNTRREG	= $D500
   729 = D501			MC6850_BUFFER	= $D501
   730 = D500			MC6850_STATREG	= $D500
   731 = 00FF			MC_BYTE	= $FF
   732
   733 				.endl							; UNIT MC6850
   734
   735 				; ------------------------------------------------------------
   736
   737 8E0A			.local	DOS						; UNIT
   738
   739 				; ------------------------------------------------------------
   740
   741 = D014			PALNTSC	= $D014
   742
   743 				.endl							; UNIT DOS
   744
   745 				; ------------------------------------------------------------
   746
   747 8E0A			.local	STRUTILS					; UNIT
   748
   749 				; ------------------------------------------------------------
   750
   751 				.endl							; UNIT STRUTILS
   752
   753 				; ------------------------------------------------------------
   754
   755 8E0A			.local	SYSUTILS					; UNIT
   756
   757 				; ------------------------------------------------------------
   758
   759 = 0001			FAREADONLY	= $01
   760 = 0002			FAHIDDEN	= $02
   761 = 0004			FASYSFILE	= $04
   762 = 0008			FAVOLUMEID	= $08
   763 = 0010			FADIRECTORY	= $10
   764 = 0020			FAARCHIVE	= $20
   765 = 003F			FAANYFILE	= $3F
   766
   767 				.endl							; UNIT SYSUTILS
   768
   769 				; ------------------------------------------------------------
   770
   771 8E0A			.local	MIDI_FIFO					; UNIT
   772
   773 8E0A			.local	FIFO_RESET					; PROCEDURE
   774
   775 				; optimize OK (MIDI_FIFO), line = 28
   776
   777 8E0A A9 00			lda #$00
   778 8E0C 85 FD			sta FIFO_HEAD
   779
   780 				; optimize OK (MIDI_FIFO), line = 29
   781
   782 8E0E 85 FE			sta FIFO_TAIL
   783
   784 				; optimize OK (MIDI_FIFO), line = 30
   785
   786 8E10 85 88			sta SYSTEM.FILLCHAR_00EB.A
   787 8E12 A9 06			lda #$06
   788 8E14 85 89			sta SYSTEM.FILLCHAR_00EB.A+1
   789 8E16 A9 00			lda #$00
   790 8E18 85 8C			sta SYSTEM.FILLCHAR_00EB.COUNT
   791 8E1A A9 01			lda #$01
   792 8E1C 85 8D			sta SYSTEM.FILLCHAR_00EB.COUNT+1
   793 8E1E A9 00			lda #$00
   794 8E20 85 84			sta SYSTEM.FILLCHAR_00EB.VALUE
   795 8E22				.local +MAIN.SYSTEM.FILLCHAR_00EB
   796 8E22				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_00EB.M@INLINE [Source: MIDICar Player.a65]
     4 8E22 20 76 84			jsr @fill
Source: MIDICar Player.a65
   797 					.endl
   798 8E25			@exit
   799 					.ifdef @new
   800 					lda <@VarData
   801 					sta :ztmp
   802 					lda >@VarData
   803 					ldy #@VarDataSize-1
   804 					jmp @FreeMem
   805 					els
   806 8E25 60				rts						; ret
   807 					eif
   808 				.endl
   809
   810 8E26			.local	FIFO_PUSHDIRECT2MC6850				; PROCEDURE | INLINE
   811
   812 					.MACRO m@INLINE
   813 				
   814 				; optimize OK (MIDI_FIFO), line = 35
   815 				
   816 					lda MC6850.MC6850_CNTRREG
   817 					and #$02
   818 					jeq l_0189
   819 				
   820 				; optimize OK (MIDI_FIFO), line = 36
   821 				
   822 					ldy FIFO_TAIL
   823 					cpy FIFO_HEAD
   824 					jeq l_019E
   825 				
   826 				; optimize OK (MIDI_FIFO), line = 38
   827 				
   828 					lda adr.FIFO_BUF,y
   829 					sta MC6850.MC6850_BUFFER
   830 				
   831 				; optimize FAIL (0, MIDI_FIFO), line = 39
   832 				
   833 					inc FIFO_TAIL
   834 				l_019E
   835 				l_0189
   836 					.ENDM
   837 8E26			@exit
   838 				.endl
   839
   840 8E26			.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER | INLINE
   841
   842 					.MACRO m@INLINE
   843 				
   844 				; -------------------  ASM Block 00000070  -------------------
   845 				
   846 				  lda FIFO_Head
   847 				  clc
   848 				  adc #1
   849 				  cmp FIFO_Tail
   850 				  bne storeInFIFO
   851 				  jsr FIFO_Flush
   852 				
   853 				storeInFIFO:
   854 				  ldy FIFO_Head
   855 				  lda FIFO_Byte
   856 				  sta FIFO_ADDR,y
   857 				  inc FIFO_Head
   858 				exitWrite:
   859 				
   860 					.ENDM
   861 8E26			@exit
   862 				.endl
   863
   864 8E26			.local	FIFO_SEND					; PROCEDURE
   865
   866 				; optimize OK (MIDI_FIFO), line = 75
   867
   868 8E26 AD 72 9F			lda DATA
   869 8E29 8D 75 9F			sta P
   870 8E2C AD 73 9F			lda DATA+1
   871 8E2F 8D 76 9F			sta P+1
   872
   873 				; --- WhileProlog
   874 8E32 4C 65 8E			jmp l_01BD
   875 8E35			l_01BE
   876
   877 				; optimize OK (MIDI_FIFO), line = 78
   878
   879 8E35 AC 75 9F 84 82 AC + 	mwy P :bp2
   880 8E3F A0 00			ldy #$00
   881 8E41 B1 82			lda (:bp2),y
   882 8E43 85 FF			sta FIFO_BYTE
   883 8E45				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
   884 8E45				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 8E45 A5 FD		  lda FIFO_Head
     5 8E47 18			  clc
     6 8E48 69 01		  adc #1
     7 8E4A C5 FE		  cmp FIFO_Tail
     8 8E4C D0 03		  bne storeInFIFO
     9 8E4E 20 6B 8E		  jsr FIFO_Flush
    11 8E51			storeInFIFO:
    12 8E51 A4 FD		  ldy FIFO_Head
    13 8E53 A5 FF		  lda FIFO_Byte
    14 8E55 99 00 06		  sta FIFO_ADDR,y
    15 8E58 E6 FD		  inc FIFO_Head
    16 8E5A			exitWrite:
Source: MIDICar Player.a65
   885 					.endl
   886
   887 				; optimize FAIL (0, MIDI_FIFO), line = 79
   888
   889 8E5A EE 75 9F			inc P
   890 8E5D D0 03			sne
   891 8E5F EE 76 9F			inc P+1
   892 8E62 CE 74 9F			dec LEN
   893 8E65			l_01BD
   894
   895 				; optimize OK (MIDI_FIFO), line = 76
   896
   897 8E65 AD 74 9F			lda LEN
   898 8E68 D0 CB			jne l_01BE
   899
   900 				; ------------------------------------------------------------
   901
   902 = 9F72			DATA	= DATAORIGIN+$0142
   903 = 9F74			LEN	= DATAORIGIN+$0144
   904 = 9F75			P	= DATAORIGIN+$0145
   905
   906 = 9F72			@VarData	= DATA
   907 = 0005			@VarDataSize	= 5
   908
   909 8E6A			@exit
   910 					.ifdef @new
   911 					lda <@VarData
   912 					sta :ztmp
   913 					lda >@VarData
   914 					ldy #@VarDataSize-1
   915 					jmp @FreeMem
   916 					els
   917 8E6A 60				rts						; ret
   918 					eif
   919 				.endl
   920
   921 8E6B			.local	FIFO_FLUSH					; PROCEDURE
   922
   923 				; --- WhileProlog
   924 8E6B 4C 7F 8E			jmp l_01DF
   925 8E6E			l_01E0
   926
   927 				; optimize OK (MIDI_FIFO), line = 87
   928
   929 8E6E AD 00 D5			lda MC6850.MC6850_CNTRREG
   930 8E71 29 02			and #$02
   931 8E73 F0 0A			jeq l_01F6
   932
   933 				; optimize OK (MIDI_FIFO), line = 89
   934
   935 8E75 A4 FE			ldy FIFO_TAIL
   936 8E77 B9 00 06			lda adr.FIFO_BUF,y
   937 8E7A 8D 01 D5			sta MC6850.MC6850_BUFFER
   938
   939 				; optimize FAIL (0, MIDI_FIFO), line = 90
   940
   941 8E7D E6 FE			inc FIFO_TAIL
   942 8E7F			l_01F6
   943 8E7F			l_01DF
   944
   945 				; optimize OK (MIDI_FIFO), line = 85
   946
   947 8E7F A5 FE			lda FIFO_TAIL
   948 8E81 C5 FD			cmp FIFO_HEAD
   949 8E83 D0 E9			jne l_01E0
   950 8E85			@exit
   951 					.ifdef @new
   952 					lda <@VarData
   953 					sta :ztmp
   954 					lda >@VarData
   955 					ldy #@VarDataSize-1
   956 					jmp @FreeMem
   957 					els
   958 8E85 60				rts						; ret
   959 					eif
   960 				.endl
   961
   962 				; ------------------------------------------------------------
   963
   964 = 00FD			FIFO_HEAD	= $FD
   965 = 00FE			FIFO_TAIL	= $FE
   966 = 00FF			FIFO_BYTE	= $FF
   967 = 0600			FIFO_ADDR	= $0600
   968 = 0600			adr.FIFO_BUF	= $0600
   969 8E86			.var FIFO_BUF	= adr.FIFO_BUF .word
   970
   971 = 8E86 00 06		FIFO_BUF
   971 				.endl							; UNIT MIDI_FIFO
   972
   973 				; ------------------------------------------------------------
   974
   975 8E88			.local	MIDFILES					; UNIT
   976
   977 8E88			.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT
   978
   979 				; -------------------  ASM Block 00000071  -------------------
   980
   981 8E88 A5 F5		    lda _timerStatus
   982 8E8A 10 02		    bpl doSubTick
   983 8E8C 68			    pla
   984 8E8D 40			    rti
   985
   986 8E8E			doSubTick:
   987 8E8E 29 0F		    and #f_ratio
   988 8E90 C5 F4		    cmp _subCnt
   989 8E92 F0 04		    beq doMainTick
   990
   991 8E94 E6 F4		    inc _subCnt
   992 8E96 68			    pla
   993 8E97 40			    rti
   994
   995 8E98			doMainTick:
   996 8E98 A9 01		    lda #1
   997 8E9A 85 F4		    sta _subCnt
   998
   999 8E9C E6 F0		    inc _totalTicks
  1000 8E9E D0 0C		    bne skip
  1001 8EA0 E6 F1		    inc _totalTicks+1
  1002 8EA2 D0 08		    bne skip
  1003 8EA4 E6 F2		    inc _totalTicks+2
  1004 8EA6 D0 04		    bne skip
  1005 8EA8 E6 F3		    inc _totalTicks+3
  1006 8EAA D0 00		    bne skip
  1007
  1008 8EAC			skip:
  1009
  1010 8EAC 68			  pla
  1011
  1012 8EAD 40				rti						; ret
  1013 				.endl
  1014
  1015 8EAE			.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER
  1016
  1017 				; -------------------  ASM Block 00000072  -------------------
  1018
  1019 8EAE A5 E1		  lda _adr            // get LSB of address
  1020 8EB0 F0 01		  beq checkMemType    // zero means, we crossing the page. Check block bounds
  1021 8EB2 60			  rts
  1022
  1023 8EB3			checkMemType
  1024 8EB3 A5 E2		  lda _adr+1          // get MSB of address
  1025 8EB5 A4 E0		  ldy _bank           // get current bank index
  1026 8EB7 D0 17		  bne checkXMSBound   // zero, means we checking bounds in base memory
  1027 				                      // otherwise, we checking bound of extended memory
  1028
  1029 				// base memory bounds check
  1030 8EB9			check1Bound           // 1st boundary $8000..$a3ff - program area
  1031 8EB9 C9 80		  cmp #$80
  1032 8EBB D0 05		  bne check2Bound
  1033
  1034 8EBD A9 A4		  lda #$a4
  1035 8EBF 85 E2		  sta _adr+1
  1036 8EC1 60			  rts
  1037
  1038 8EC2			check2Bound:          // 2nd boundary $bc00..$bfff - DL $ Screen (BASIC OFF!)
  1039
  1040 				  // cmp #$bc
  1041 				  // bne check3Bound
  1042
  1043 				  // lda #$c0
  1044 				  // sta _adr+1
  1045 				  // rts
  1046
  1047 8EC2			check3Bound:          // 3rd boundary $d000..$d7ff - I/O area
  1048 8EC2 C9 D0		  cmp #$d0
  1049 8EC4 D0 05		  bne check4Bound
  1050
  1051 8EC6 A9 D8		  lda #$d8
  1052 8EC8 85 E2		  sta _adr+1
  1053 8ECA 60			  rts
  1054
  1055 8ECB			check4bound           // 4th boundary $ff00..$ffff
  1056 8ECB C9 FF		  cmp #$ff
  1057 8ECD F0 06		  beq switchXMSBank
  1058 8ECF 60			  rts
  1059
  1060 				// extended memory bound check
  1061
  1062 8ED0			checkXMSBound         // extender memory window $4000..$7fff
  1063 8ED0 C9 80		  cmp #$80            // the bank's memory area ends at $7fff
  1064 8ED2 F0 01		  beq switchXMSBank   // if MSB addres is out of this address, we need switch bank
  1065
  1066 8ED4 60			  rts
  1067
  1068 8ED5			switchXMSBank:
  1069 8ED5 C8			  iny             // increase current bank index
  1070 8ED6 B9 00 01		  lda $100,y      // get bank set
  1071 8ED9 F0 0A		  beq outOfMem    // if zero, means Out Of Memory
  1072
  1073 8EDB 84 E0		  sty _bank       // store current bank index
  1074
  1075 8EDD 8D 01 D3		  sta PORTB       // set PORTB (switch bank)
  1076
  1077 8EE0 A9 40		  lda #$40        // set MSB address to the begining of bank
  1078 8EE2 85 E2		  sta _adr+1
  1079 8EE4 60			  rts
  1080
  1081 8EE5			outOfMem:
  1082 8EE5 A9 65		  lda #ERR_NOT_ENOUGHT_MEMORY
  1083 8EE7 8D 37 9E		  sta SYSTEM.IOResult
  1084
  1085 8EEA			@exit
  1086 					.ifdef @new
  1087 					lda <@VarData
  1088 					sta :ztmp
  1089 					lda >@VarData
  1090 					ldy #@VarDataSize-1
  1091 					jmp @FreeMem
  1092 					els
  1093 8EEA 60				rts						; ret
  1094 					eif
  1095 				.endl
  1096
  1097 8EEB			.local	LOADMID						; FUNCTION
  1098
  1099 8EEB 4C 74 8F			jmp l_021A
  1100
  1101 8EEE			.local	READWORDBI					; FUNCTION
  1102
  1103 				; BlockRead
  1104
  1105 				; optimize OK (bigindian.inc), line = 3
  1106
  1107 8EEE AC EA 92 84 82 AC + 	mwy F :bp2
  1108 8EF8 A0 06			ldy #s@file.buffer
  1109 8EFA A9 B1			lda <RESULT
  1110 8EFC 91 82			sta (:bp2),y
  1111 8EFE C8				iny
  1112 8EFF A9 9F			lda >RESULT
  1113 8F01 91 82			sta (:bp2),y
  1114 8F03 A0 08			ldy #s@file.nrecord
  1115 8F05 A9 02			lda #$02
  1116 8F07 91 82			sta (:bp2),y
  1117 8F09 C8				iny
  1118 8F0A A9 00			lda #$00
  1119 8F0C 91 82			sta (:bp2),y
  1120
  1121 8F0E 8A 48			txa:pha
  1122 8F10 38				sec
  1123 					@readfile F, #7
  1123 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1123 8F11 AC EB 92		 LDY F+1
  1123 8F14 AD EA 92		 LDA F
  1123 8F17 A2 07		 LDX# 7
  1123 8F19 20 66 81		 JSR @READFILE
  1124 8F1C 68 AA			pla:tax
  1125
  1126 				; -------------------  ASM Block 00000073  -------------------
  1127
  1128 8F1E AE B1 9F		    ldx result
  1129 8F21 AC B2 9F		    ldy result+1
  1130 8F24 8E B2 9F		    stx result+1
  1131 8F27 8C B1 9F		    sty result
  1132 				  
  1133 8F2A			@exit
  1134
  1135 				; ------------------------------------------------------------
  1136
  1137 = 9FB1			RESULT	= DATAORIGIN+$0181
  1138 8F2A 60				rts						; ret
  1139 				.endl
  1140
  1141 8F2B			.local	READLONGBI					; FUNCTION
  1142
  1143 				; BlockRead
  1144
  1145 				; optimize OK (bigindian.inc), line = 15
  1146
  1147 8F2B AC EA 92 84 82 AC + 	mwy F :bp2
  1148 8F35 A0 06			ldy #s@file.buffer
  1149 8F37 A9 B3			lda <RESULT
  1150 8F39 91 82			sta (:bp2),y
  1151 8F3B C8				iny
  1152 8F3C A9 9F			lda >RESULT
  1153 8F3E 91 82			sta (:bp2),y
  1154 8F40 A0 08			ldy #s@file.nrecord
  1155 8F42 A9 04			lda #$04
  1156 8F44 91 82			sta (:bp2),y
  1157 8F46 C8				iny
  1158 8F47 A9 00			lda #$00
  1159 8F49 91 82			sta (:bp2),y
  1160
  1161 8F4B 8A 48			txa:pha
  1162 8F4D 38				sec
  1163 					@readfile F, #7
  1163 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1163 8F4E AC EB 92		 LDY F+1
  1163 8F51 AD EA 92		 LDA F
  1163 8F54 A2 07		 LDX# 7
  1163 8F56 20 66 81		 JSR @READFILE
  1164 8F59 68 AA			pla:tax
  1165
  1166 				; -------------------  ASM Block 00000074  -------------------
  1167
  1168 8F5B AE B3 9F		    ldx result
  1169 8F5E AC B6 9F		    ldy result+3
  1170 8F61 8E B6 9F		    stx result+3
  1171 8F64 8C B3 9F		    sty result
  1172
  1173 8F67 AE B4 9F		    ldx result+1
  1174 8F6A AC B5 9F		    ldy result+2
  1175 8F6D 8E B5 9F		    stx result+2
  1176 8F70 8C B4 9F		    sty result+1
  1177 				  
  1178 8F73			@exit
  1179
  1180 				; ------------------------------------------------------------
  1181
  1182 = 9FB3			RESULT	= DATAORIGIN+$0183
  1183 8F73 60				rts						; ret
  1184 				.endl
  1185 8F74			l_021A
  1186 				; AssignFile
  1187
  1188 				; optimize OK (loadmid.inc), line = 18
  1189
  1190 8F74 AC EA 92 84 82 AC + 	mwy F :bp2
  1191 8F7E A0 00			ldy #s@file.pfname
  1192 8F80 AD 90 9F			lda FN
  1193 8F83 91 82			sta (:bp2),y
  1194 8F85 C8				iny
  1195 8F86 AD 91 9F			lda FN+1
  1196 8F89 91 82			sta (:bp2),y
  1197 8F8B A0 05			ldy #s@file.status
  1198 8F8D A9 00			lda #$00
  1199 8F8F 91 82			sta (:bp2),y
  1200 				; Reset
  1201
  1202 				; optimize OK (loadmid.inc), line = 19
  1203
  1204 8F91 A0 02			ldy #s@file.record
  1205 8F93 A9 01			lda #$01
  1206 8F95 91 82			sta (:bp2),y
  1207 8F97 C8				iny
  1208 8F98 A9 00			lda #$00
  1209 8F9A 91 82			sta (:bp2),y
  1210
  1211 8F9C 8A 48			txa:pha
  1212 8F9E 18				clc
  1213 					@openfile F, MAIN.SYSTEM.FileMode
  1213 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  1213 8F9F AC EB 92		 LDY F+1
  1213 8FA2 AD EA 92		 LDA F
  1213 8FA5 AE 35 9E		 LDX MAIN.SYSTEM.FILEMODE
  1213 8FA8 20 97 80		 JSR @OPENFILE
  1214 8FAB 68 AA			pla:tax
  1215
  1216 				; optimize OK (loadmid.inc), line = 20
  1217
  1218 8FAD AD 37 9E			lda SYSTEM.IORESULT
  1219 8FB0 10 14			jpl l_0251
  1220
  1221 				; optimize OK (loadmid.inc), line = 22
  1222
  1223 8FB2 8D 92 9F			sta RESULT
  1224 				; CloseFile
  1225
  1226 8FB5 8A 48			txa:pha
  1227 8FB7 18				clc
  1228 					@closefile F
  1228 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1228 8FB8 AC EB 92		 LDY F+1
  1228 8FBB AD EA 92		 LDA F
  1228 8FBE 20 33 81		 JSR @CLOSEFILE
  1229 8FC1 68 AA			pla:tax
  1230
  1231 8FC3 4C E9 92			jmp @exit					; exit
  1232 8FC6			l_0251
  1233
  1234 				; optimize OK (loadmid.inc), line = 27
  1235
  1236 8FC6 A9 00			lda #$00
  1237 8FC8 85 E0			sta _BANK
  1238
  1239 				; optimize OK (loadmid.inc), line = 28
  1240
  1241 8FCA AD 77 9F			lda MIDDATA
  1242 8FCD 85 E1			sta _PTR
  1243 8FCF AD 78 9F			lda MIDDATA+1
  1244 8FD2 85 E2			sta _PTR+1
  1245
  1246 				; optimize OK (loadmid.inc), line = 29
  1247
  1248 8FD4 AD D3 98			lda MIDTRACKS
  1249 8FD7 8D AF 9F			sta TRKDATA
  1250 8FDA AD D4 98			lda MIDTRACKS+1
  1251 8FDD 8D B0 9F			sta TRKDATA+1
  1252
  1253 				; optimize OK (loadmid.inc), line = 30
  1254
  1255 8FE0 A9 00			lda #$00
  1256 8FE2 8D 9F 9F			sta TRACKCOUNT
  1257
  1258 				; optimize OK (loadmid.inc), line = 31
  1259
  1260 8FE5 A9 FF			lda #$FF
  1261 8FE7 8D 7B 9F			sta TOTALTRACKS
  1262
  1263 				; --- WhileProlog
  1264 8FEA 4C 97 92			jmp l_0272
  1265 8FED			l_0273
  1266 				; BlockRead
  1267
  1268 				; optimize OK (loadmid.inc), line = 35
  1269
  1270 8FED AC EA 92 84 82 AC + 	mwy F :bp2
  1271 8FF7 A0 06			ldy #s@file.buffer
  1272 8FF9 A9 A0			lda <CHUNKTAG
  1273 8FFB 91 82			sta (:bp2),y
  1274 8FFD C8				iny
  1275 8FFE A9 9F			lda >CHUNKTAG
  1276 9000 91 82			sta (:bp2),y
  1277 9002 A0 08			ldy #s@file.nrecord
  1278 9004 A9 04			lda #$04
  1279 9006 91 82			sta (:bp2),y
  1280 9008 C8				iny
  1281 9009 A9 00			lda #$00
  1282 900B 91 82			sta (:bp2),y
  1283 900D A0 0A			ldy #s@file.numread
  1284 900F A9 A4			lda <V
  1285 9011 91 82			sta (:bp2),y
  1286 9013 C8				iny
  1287 9014 A9 9F			lda >V
  1288 9016 91 82			sta (:bp2),y
  1289
  1290 9018 8A 48			txa:pha
  1291 901A 18				clc
  1292 					@readfile F, #135
  1292 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1292 901B AC EB 92		 LDY F+1
  1292 901E AD EA 92		 LDA F
  1292 9021 A2 87		 LDX# 135
  1292 9023 20 66 81		 JSR @READFILE
  1293 9026 68 AA			pla:tax
  1294
  1295 				; optimize OK (loadmid.inc), line = 36
  1296
  1297 9028 AD A5 9F			lda V+1
  1298 902B D0 05			bne @+
  1299 902D AD A4 9F			lda V
  1300 9030 C9 04			cmp #$04
  1301 				@
  1302 9032 F0 03			jeq l_0290
  1303 9034 4C D6 92			jmp b_0273					; break
  1304 9037			l_0290
  1305
  1306 				; optimize FAIL ('READLONGBI', loadmid.inc), line = 37
  1307
  1308 9037 20 2B 8F			jsr READLONGBI
  1309 903A AD B3 9F			lda READLONGBI.RESULT
  1310 903D 8D AA 9F			sta LEN
  1311 9040 AD B4 9F			lda READLONGBI.RESULT+1
  1312 9043 8D AB 9F			sta LEN+1
  1313 9046 AD B5 9F			lda READLONGBI.RESULT+2
  1314 9049 8D AC 9F			sta LEN+2
  1315 904C AD B6 9F			lda READLONGBI.RESULT+3
  1316 904F 8D AD 9F			sta LEN+3
  1317
  1318 				; optimize OK (loadmid.inc), line = 38
  1319
  1320 9052 AD A3 9F			lda CHUNKTAG+3
  1321 9055 49 64			eor #$64
  1322 9057 D0 55			jne l_02A7
  1323 9059 AD A2 9F			lda CHUNKTAG+2
  1324 905C 49 68			eor #$68
  1325 905E D0 4E			jne l_02A7
  1326 9060 AD A1 9F			lda CHUNKTAG+1
  1327 9063 49 54			eor #$54
  1328 9065 D0 47			jne l_02A7
  1329 9067 AD A0 9F			lda CHUNKTAG
  1330 906A 49 4D			eor #$4D
  1331 906C D0 40			jne l_02A7
  1332
  1333 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 40
  1334
  1335 906E 20 EE 8E			jsr READWORDBI
  1336 9071 AD B1 9F			lda READWORDBI.RESULT
  1337 9074 8D 7A 9F			sta FORMAT
  1338
  1339 				; optimize OK (loadmid.inc), line = 41
  1340
  1341 9077 F0 0C			jeq l_02CA
  1342 9079 C9 01			cmp #$01
  1343 907B F0 08			jeq l_02CA
  1344 907D A9 64			lda #$64
  1345 907F 8D 92 9F			sta RESULT
  1346 9082 4C E9 92			jmp @exit					; exit
  1347 9085			l_02CA
  1348
  1349 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 42
  1350
  1351 9085 20 EE 8E			jsr READWORDBI
  1352 9088 AD B1 9F			lda READWORDBI.RESULT
  1353 908B 8D 7B 9F			sta TOTALTRACKS
  1354
  1355 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 43
  1356
  1357 908E 20 EE 8E			jsr READWORDBI
  1358 9091 AD B1 9F			lda READWORDBI.RESULT
  1359 9094 8D A4 9F			sta V
  1360 9097 AD B2 9F			lda READWORDBI.RESULT+1
  1361 909A 8D A5 9F			sta V+1
  1362
  1363 				; optimize OK (loadmid.inc), line = 44
  1364
  1365 909D 30 0C			jmi l_02EE
  1366
  1367 				; optimize OK (loadmid.inc), line = 45
  1368
  1369 909F AD A4 9F			lda V
  1370 90A2 8D 7C 9F			sta TICKDIV
  1371 90A5 AD A5 9F			lda V+1
  1372 90A8 8D 7D 9F			sta TICKDIV+1
  1373 90AB			l_02EE
  1374 90AB 4C 97 92			jmp l_02FF
  1375 90AE			l_02A7
  1376
  1377 				; optimize OK (loadmid.inc), line = 60
  1378
  1379 90AE AD A3 9F			lda CHUNKTAG+3
  1380 90B1 49 6B			eor #$6B
  1381 90B3 F0 03 4C 97 92		jne l_030F
  1382 90B8 AD A2 9F			lda CHUNKTAG+2
  1383 90BB 49 72			eor #$72
  1384 90BD F0 03 4C 97 92		jne l_030F
  1385 90C2 AD A1 9F			lda CHUNKTAG+1
  1386 90C5 49 54			eor #$54
  1387 90C7 F0 03 4C 97 92		jne l_030F
  1388 90CC AD A0 9F			lda CHUNKTAG
  1389 90CF 49 4D			eor #$4D
  1390 90D1 F0 03 4C 97 92		jne l_030F
  1391
  1392 				; optimize FAIL (0, loadmid.inc), line = 62
  1393
  1394 90D6 EE 9F 9F			inc TRACKCOUNT
  1395
  1396 				; optimize FAIL (':TMP', loadmid.inc), line = 63
  1397
  1398 90D9 AD 8E 9F			lda LOADPROCESS
  1399 90DC 85 91			sta :TMP+1
  1400 90DE AD 8F 9F			lda LOADPROCESS+1
  1401 90E1 85 92			sta :TMP+2
  1402 90E3 A9 4C			lda #$4C
  1403 90E5 85 90			sta :TMP
  1404 90E7 E8				inx
  1405 90E8 AD 9F 9F 95 94		mva TRACKCOUNT :STACKORIGIN,x
  1406 90ED 20 90 00			jsr :TMP
  1407
  1408 				; optimize OK (loadmid.inc), line = 65
  1409
  1410 90F0 AC AF 9F 84 82 AC + 	mwy TRKDATA :bp2
  1411 90FA A0 00			ldy #$00
  1412 90FC A5 E0			lda _BANK
  1413 90FE 91 82			sta (:bp2),y
  1414
  1415 				; optimize OK (loadmid.inc), line = 66
  1416
  1417 9100 C8				iny
  1418 9101 A5 E1			lda _ADR
  1419 9103 91 82			sta (:bp2),y
  1420 9105 C8				iny
  1421 9106 A5 E2			lda _ADR+1
  1422 9108 91 82			sta (:bp2),y
  1423
  1424 				; optimize OK (loadmid.inc), line = 67
  1425
  1426 910A C8				iny
  1427 910B A9 00			lda #$00
  1428 910D 91 82			sta (:bp2),y
  1429 910F C8				iny
  1430 9110 91 82			sta (:bp2),y
  1431 9112 C8				iny
  1432 9113 91 82			sta (:bp2),y
  1433 9115 C8				iny
  1434 9116 91 82			sta (:bp2),y
  1435
  1436 				; optimize OK (loadmid.inc), line = 68
  1437
  1438 9118 C8				iny
  1439 9119 91 82			sta (:bp2),y
  1440
  1441 				; --- WhileProlog
  1442 911B 4C 76 92			jmp l_032D
  1443 911E			l_032E
  1444
  1445 				; optimize FAIL ('MEMBOUNDCHECK', loadmid.inc), line = 72
  1446
  1447 911E 20 AE 8E			jsr MEMBOUNDCHECK
  1448 9121 AD 37 9E			lda SYSTEM.IORESULT
  1449 9124 C9 01			cmp #$01
  1450 9126 F0 08			jeq l_0341
  1451 9128 A9 65			lda #$65
  1452 912A 8D 92 9F			sta RESULT
  1453 912D 4C E9 92			jmp @exit					; exit
  1454 9130			l_0341
  1455
  1456 				; optimize OK (loadmid.inc), line = 74
  1457
  1458 9130				.LOCAL
  1459 9130 AD AD 9F			lda LEN+3
  1460 9133 38 E9 00			sub #$00
  1461 9136 D0 1F			bne L4
  1462 9138 AD AC 9F			lda LEN+2
  1463 913B C9 00			cmp #$00
  1464 913D D0 0C			bne L1
  1465 913F AD AB 9F			lda LEN+1
  1466 9142 C9 00			cmp #$00
  1467 9144 D0 05			bne L1
  1468 9146 AD AA 9F			lda LEN
  1469 9149 C9 FF			cmp #$FF
  1470 914B F0 10		L1	beq L5
  1471 914D B0 04			bcs L3
  1472 914F A9 FF			lda #$FF
  1473 9151 D0 0A			bne L5
  1474 9153 A9 01		L3	lda #$01
  1475 9155 D0 06			bne L5
  1476 9157 50 04		L4	bvc L5
  1477 9159 49 FF			eor #$FF
  1478 915B 09 01			ora #$01
  1479 915D			L5
  1480 					.ENDL
  1481 915D 30 0A			jmi l_0358
  1482 915F F0 08			jeq l_0358
  1483 9161 A9 FF			lda #$FF
  1484 9163 8D AE 9F			sta LOADSIZE
  1485 9166 4C 6F 91			jmp l_0366
  1486 9169			l_0358
  1487 9169 AD AA 9F			lda LEN
  1488 916C 8D AE 9F			sta LOADSIZE
  1489 916F			l_0366
  1490
  1491 				; optimize OK (loadmid.inc), line = 75
  1492
  1493 916F A5 E1			lda _ADR
  1494 9171 18 6D AE 9F			add LOADSIZE
  1495 9175 8D A8 9F			sta ENDADR
  1496 9178 A5 E2			lda _ADR+1
  1497 917A 69 00			adc #$00
  1498 917C 8D A9 9F			sta ENDADR+1
  1499
  1500 				; optimize OK (loadmid.inc), line = 76
  1501
  1502 917F A5 E0			lda _BANK
  1503 9181 D0 3C			jne l_0387
  1504
  1505 				; optimize OK (loadmid.inc), line = 78
  1506
  1507 9183 AD A9 9F			lda ENDADR+1
  1508 9186 10 0F			jpl l_03A4
  1509 9188 C9 A4			cmp #$A4
  1510 918A B0 0B			jcs l_03A4
  1511
  1512 				; optimize OK (loadmid.inc), line = 79
  1513
  1514 918C A9 00			lda #$00
  1515 918E 38 E5 E1			sub _ADR
  1516 9191 8D AE 9F			sta LOADSIZE
  1517 9194 4C BC 91			jmp l_03B7
  1518 9197			l_03A4
  1519
  1520 				; optimize OK (loadmid.inc), line = 80
  1521
  1522 9197 AD A9 9F			lda ENDADR+1
  1523 919A C9 D0			cmp #$D0
  1524 919C 90 0F			jcc l_03D3
  1525 919E C9 D8			cmp #$D8
  1526 91A0 B0 0B			jcs l_03D3
  1527
  1528 				; optimize OK (loadmid.inc), line = 81
  1529
  1530 91A2 A9 00			lda #$00
  1531 91A4 38 E5 E1			sub _ADR
  1532 91A7 8D AE 9F			sta LOADSIZE
  1533 91AA 4C BC 91			jmp l_03E6
  1534 91AD			l_03D3
  1535
  1536 				; optimize OK (loadmid.inc), line = 82
  1537
  1538 91AD AD A9 9F			lda ENDADR+1
  1539 91B0 C9 FF			cmp #$FF
  1540 91B2 90 08			jcc l_03F7
  1541
  1542 				; optimize OK (loadmid.inc), line = 83
  1543
  1544 91B4 A9 00			lda #$00
  1545 91B6 38 E5 E1			sub _ADR
  1546 91B9 8D AE 9F			sta LOADSIZE
  1547 91BC			l_03F7
  1548 91BC			l_03E6
  1549 91BC			l_03B7
  1550 91BC 4C CC 91			jmp l_040C
  1551 91BF			l_0387
  1552
  1553 				; optimize OK (loadmid.inc), line = 86
  1554
  1555 91BF AD A9 9F			lda ENDADR+1
  1556 91C2 10 08			jpl l_041D
  1557
  1558 				; optimize OK (loadmid.inc), line = 87
  1559
  1560 91C4 A9 00			lda #$00
  1561 91C6 38 E5 E1			sub _ADR
  1562 91C9 8D AE 9F			sta LOADSIZE
  1563 91CC			l_041D
  1564 91CC			l_040C
  1565
  1566 				; optimize OK (loadmid.inc), line = 89
  1567
  1568 91CC AD AE 9F			lda LOADSIZE
  1569 91CF D0 03			jne l_043B
  1570 91D1 4C 76 92			jmp c_032E					; continue
  1571 91D4			l_043B
  1572 				; BlockRead
  1573
  1574 				; optimize OK (loadmid.inc), line = 91
  1575
  1576 91D4 AC EA 92 84 82 AC + 	mwy F :bp2
  1577 91DE A0 06			ldy #s@file.buffer
  1578 91E0 AD D5 98			lda RBUF
  1579 91E3 91 82			sta (:bp2),y
  1580 91E5 C8				iny
  1581 91E6 AD D6 98			lda RBUF+1
  1582 91E9 91 82			sta (:bp2),y
  1583 91EB A0 08			ldy #s@file.nrecord
  1584 91ED AD AE 9F			lda LOADSIZE
  1585 91F0 91 82			sta (:bp2),y
  1586 91F2 C8				iny
  1587 91F3 A9 00			lda #$00
  1588 91F5 91 82			sta (:bp2),y
  1589 91F7 A0 0A			ldy #s@file.numread
  1590 91F9 A9 A4			lda <V
  1591 91FB 91 82			sta (:bp2),y
  1592 91FD C8				iny
  1593 91FE A9 9F			lda >V
  1594 9200 91 82			sta (:bp2),y
  1595
  1596 9202 8A 48			txa:pha
  1597 9204 18				clc
  1598 					@readfile F, #135
  1598 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1598 9205 AC EB 92		 LDY F+1
  1598 9208 AD EA 92		 LDA F
  1598 920B A2 87		 LDX# 135
  1598 920D 20 66 81		 JSR @READFILE
  1599 9210 68 AA			pla:tax
  1600
  1601 				; optimize OK (loadmid.inc), line = 92
  1602
  1603 9212 AD A5 9F			lda V+1
  1604 9215 D0 06			bne @+
  1605 9217 AD A4 9F			lda V
  1606 921A CD AE 9F			cmp LOADSIZE
  1607 				@
  1608 921D F0 09			jeq l_0460
  1609 921F AD 37 9E			lda SYSTEM.IORESULT
  1610 9222 8D 92 9F			sta RESULT
  1611 9225 4C E9 92			jmp @exit					; exit
  1612 9228			l_0460
  1613
  1614 				; optimize OK (loadmid.inc), line = 94
  1615
  1616 9228 A9 00			lda #$00
  1617 922A 85 88			sta SYSTEM.MOVE_00EC.SOURCE
  1618 922C A9 06			lda #$06
  1619 922E 85 89			sta SYSTEM.MOVE_00EC.SOURCE+1
  1620 9230 A5 E1			lda _PTR
  1621 9232 85 8C			sta SYSTEM.MOVE_00EC.DEST
  1622 9234 A5 E2			lda _PTR+1
  1623 9236 85 8D			sta SYSTEM.MOVE_00EC.DEST+1
  1624 9238 AD AE 9F			lda LOADSIZE
  1625 923B 85 84			sta SYSTEM.MOVE_00EC.COUNT
  1626 923D A9 00			lda #$00
  1627 923F 85 85			sta SYSTEM.MOVE_00EC.COUNT+1
  1628 9241				.local +MAIN.SYSTEM.MOVE_00EC
  1629 9241				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00EC.M@INLINE [Source: MIDICar Player.a65]
     4 9241 20 21 84			jsr @move
Source: MIDICar Player.a65
  1630 					.endl
  1631
  1632 				; optimize OK (loadmid.inc), line = 95
  1633
  1634 9244 A5 E1			lda _ADR
  1635 9246 18 6D A4 9F			add V
  1636 924A 85 E1			sta _ADR
  1637 924C A5 E2			lda _ADR+1
  1638 924E 6D A5 9F			adc V+1
  1639 9251 85 E2			sta _ADR+1
  1640
  1641 				; optimize OK (loadmid.inc), line = 96
  1642
  1643 9253 AD AA 9F			lda LEN
  1644 9256 38 ED A4 9F			sub V
  1645 925A 8D AA 9F			sta LEN
  1646 925D AD AB 9F			lda LEN+1
  1647 9260 ED A5 9F			sbc V+1
  1648 9263 8D AB 9F			sta LEN+1
  1649 9266 AD AC 9F			lda LEN+2
  1650 9269 E9 00			sbc #$00
  1651 926B 8D AC 9F			sta LEN+2
  1652 926E AD AD 9F			lda LEN+3
  1653 9271 E9 00			sbc #$00
  1654 9273 8D AD 9F			sta LEN+3
  1655 9276			c_032E
  1656 9276			l_032D
  1657
  1658 				; optimize OK (loadmid.inc), line = 70
  1659
  1660 9276 AD AD 9F			lda LEN+3
  1661 9279 30 0E			bmi @+
  1662 927B 0D AC 9F			ora LEN+2
  1663 927E 0D AB 9F			ora LEN+1
  1664 9281 0D AA 9F			ora LEN
  1665 9284 F0 03 4C 1E 91		jne l_032E
  1666 				@
  1667
  1668 				; optimize OK (loadmid.inc), line = 99
  1669
  1670 9289 AD AF 9F			lda TRKDATA
  1671 928C 18 69 09			add #$09
  1672 928F 8D AF 9F			sta TRKDATA
  1673 9292 90 03			scc
  1674 9294 EE B0 9F			inc TRKDATA+1
  1675 9297			l_030F
  1676 9297			l_02FF
  1677 9297			l_0272
  1678
  1679 				; optimize FAIL (1, loadmid.inc), line = 33
  1680
  1681 9297 E8				inx
  1682 9298 A0 01			ldy #1
  1683 929A AD 37 9E			lda SYSTEM.IORESULT
  1684 929D C9 01			cmp #$01
  1685 929F F0 01			beq @+
  1686 92A1 88				dey
  1687 				@
  1688 92A2 94 94			sty :STACKORIGIN,x
  1689 92A4 AD EA 92			lda F
  1690 92A7 8D 47 9E			sta SYSTEM.EOF.F
  1691 92AA AD EB 92			lda F+1
  1692 92AD 8D 48 9E			sta SYSTEM.EOF.F+1
  1693 92B0 20 0C 8D			jsr SYSTEM.EOF
  1694 92B3 E8				inx
  1695 92B4 AD 49 9E 95 94		mva SYSTEM.EOF.RESULT :STACKORIGIN,x
  1696 92B9 20 71 83			jsr notBOOLEAN
  1697 92BC 20 AC 83			jsr andAL_CL
  1698 92BF CA				dex
  1699 92C0 CA				dex
  1700 92C1 A0 01			ldy #1
  1701 92C3 AD 9F 9F			lda TRACKCOUNT
  1702 92C6 CD 7B 9F			cmp TOTALTRACKS
  1703 92C9 90 01			bcc @+
  1704 92CB 88				dey
  1705 				@
  1706 92CC 98				tya
  1707 92CD 35 95			and :STACKORIGIN+1,x
  1708 92CF 95 95			sta :STACKORIGIN+1,x
  1709 92D1 F0 03 4C ED 8F		jne l_0273
  1710 92D6			b_0273
  1711 				; CloseFile
  1712
  1713 92D6 8A 48			txa:pha
  1714 92D8 18				clc
  1715 					@closefile F
  1715 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1715 92D9 AC EB 92		 LDY F+1
  1715 92DC AD EA 92		 LDA F
  1715 92DF 20 33 81		 JSR @CLOSEFILE
  1716 92E2 68 AA			pla:tax
  1717
  1718 				; optimize OK (loadmid.inc), line = 103
  1719
  1720 92E4 A9 00			lda #$00
  1721 92E6 8D 92 9F			sta RESULT
  1722 92E9			@exit
  1723
  1724 				; ------------------------------------------------------------
  1725
  1726 = 9F90			FN	= DATAORIGIN+$0160
  1727 = 9F92			RESULT	= DATAORIGIN+$0162
  1728 = 00FF			LOADBUF_SIZE	= $FF
  1729 92E9			.var F	= DATAORIGIN+$0163 .word
  1730 = 9F9F			TRACKCOUNT	= DATAORIGIN+$016F
  1731 = 9FA0			CHUNKTAG	= DATAORIGIN+$0170
  1732 = 9FA4			V	= DATAORIGIN+$0174
  1733 = 9FA6			TOP	= DATAORIGIN+$0176
  1734 = 9FA8			ENDADR	= DATAORIGIN+$0178
  1735 = 9FAA			LEN	= DATAORIGIN+$017A
  1736 = 9FAE			LOADSIZE	= DATAORIGIN+$017E
  1737 = 9FAF			TRKDATA	= DATAORIGIN+$017F
  1738 = 9E30			TRKDATA.BANK	= DATAORIGIN+$0000
  1739 = 9E31			TRKDATA.PTR	= DATAORIGIN+$0001
  1740 = 9E33			TRKDATA.TRACKTIME	= DATAORIGIN+$0003
  1741 = 9E37			TRKDATA.STATUS	= DATAORIGIN+$0007
  1742 = 9E38			TRKDATA._EVENT	= DATAORIGIN+$0008
  1743
  1744 = 9F90			@VarData	= FN
  1745 = 0020			@VarDataSize	= 32
  1746
  1747 92E9 60				rts						; ret
  1748 = 92EA 93 9F		F
  1748 				.endl
  1749
  1750 92EC			.local	PROCESSTRACK					; PROCEDURE
  1751
  1752 92EC 4C 43 95			jmp l_04AC
  1753
  1754 92EF			.local	READB						; PROCEDURE | INLINE
  1755
  1756 					.MACRO m@INLINE
  1757 				
  1758 				; optimize OK (processtrack.inc), line = 12
  1759 				
  1760 					ldy #$00
  1761 					lda (_PTR),y
  1762 					sta _TMP
  1763 				
  1764 				; optimize FAIL (0, processtrack.inc), line = 13
  1765 				
  1766 					inc _ADR
  1767 					sne
  1768 					inc _ADR+1
  1769 				
  1770 				; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 14
  1771 				
  1772 					jsr MEMBOUNDCHECK
  1773 					.ENDM
  1774 92EF			@exit
  1775 				.endl
  1776
  1777 92EF			.local	READB2FB					; PROCEDURE | INLINE
  1778
  1779 					.MACRO m@INLINE
  1780 				
  1781 				; optimize OK (processtrack.inc), line = 20
  1782 				
  1783 					ldy #$00
  1784 					lda (_PTR),y
  1785 					sta MIDI_FIFO.FIFO_BYTE
  1786 				
  1787 				; optimize FAIL (0, processtrack.inc), line = 24
  1788 				
  1789 					inc _ADR
  1790 					sne
  1791 					inc _ADR+1
  1792 				
  1793 				; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 25
  1794 				
  1795 					jsr MEMBOUNDCHECK
  1796 					.ENDM
  1797 92EF			@exit
  1798 				.endl
  1799
  1800 92EF			.local	READVARL					; PROCEDURE | ASSEMBLER
  1801
  1802 				; -------------------  ASM Block 00000075  -------------------
  1803
  1804 = 00F6			A equ _delta;
  1805 = 00F7			B equ _delta+1;
  1806 = 00F8			C equ _delta+2;
  1807 = 00F9			D equ _delta+3;
  1808
  1809 				  .MACRO m@read2A
  1810 				    ldy #0
  1811 				    lda (_PTR),y
  1812 				    sta A
  1813 				    inc _ADR
  1814 				    sne
  1815 				    inc _ADR+1
  1816 				    jsr MEMBOUNDCHECK
  1817 				    lda A
  1818 				  .ENDM
  1819
  1820 92EF A0 00		  ldy #0
  1821 92F1 84 F6		  sty A
  1822 92F3 84 F7		  sty B
  1823 92F5 84 F8		  sty C
  1824 92F7 84 F9		  sty D
  1825
  1826 				// read block
  1827
  1828 				// read 1st byte to A
  1829 92F9			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 92F9 A0 00		    ldy #0
     2 92FB B1 E1		    lda (_PTR),y
     3 92FD 85 F6		    sta A
     4 92FF E6 E1		    inc _ADR
     5 9301 D0 02		    sne
     6 9303 E6 E2		    inc _ADR+1
     7 9305 20 AE 8E		    jsr MEMBOUNDCHECK
     8 9308 A5 F6		    lda A
Source: MIDICar Player.a65
  1830
  1831 930A 10 53		  bpl endRead
  1832
  1833 				// move A to B and read 2nd byte to A
  1834 				// B <- A = 4th readed byte
  1835 930C 29 7F			and #$7F
  1836 930E 85 F7			sta B
  1837
  1838 				// read 2nd byte
  1839 9310			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 9310 A0 00		    ldy #0
     2 9312 B1 E1		    lda (_PTR),y
     3 9314 85 F6		    sta A
     4 9316 E6 E1		    inc _ADR
     5 9318 D0 02		    sne
     6 931A E6 E2		    inc _ADR+1
     7 931C 20 AE 8E		    jsr MEMBOUNDCHECK
     8 931F A5 F6		    lda A
Source: MIDICar Player.a65
  1840
  1841 9321 10 3C		  bpl endRead
  1842
  1843 				// mova B to C, A to B and read 3rd byte to A
  1844 				// C <- B <- A = 4th readed byte
  1845 9323 A5 F7			lda B
  1846 9325 85 F8			sta C
  1847 9327 A5 F6			lda A
  1848 9329 29 7F			and #$7F
  1849 932B 85 F7			sta B
  1850
  1851 				// read 3rd
  1852 932D			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 932D A0 00		    ldy #0
     2 932F B1 E1		    lda (_PTR),y
     3 9331 85 F6		    sta A
     4 9333 E6 E1		    inc _ADR
     5 9335 D0 02		    sne
     6 9337 E6 E2		    inc _ADR+1
     7 9339 20 AE 8E		    jsr MEMBOUNDCHECK
     8 933C A5 F6		    lda A
Source: MIDICar Player.a65
  1853
  1854 933E 10 1F		  bpl endRead
  1855
  1856 				// move C to D, B to C, A to B and read 4th byte to A
  1857 				// D <- C <- B <- A = 4th readed byte
  1858 9340 A5 F8			lda C
  1859 9342 85 F9			sta D
  1860 9344 A5 F7			lda B
  1861 9346 85 F8			sta C
  1862 9348 A5 F6			lda A
  1863 934A 29 7F			and #$7F
  1864 934C 85 F7			sta B
  1865
  1866 				// read 4th
  1867 934E			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 934E A0 00		    ldy #0
     2 9350 B1 E1		    lda (_PTR),y
     3 9352 85 F6		    sta A
     4 9354 E6 E1		    inc _ADR
     5 9356 D0 02		    sne
     6 9358 E6 E2		    inc _ADR+1
     7 935A 20 AE 8E		    jsr MEMBOUNDCHECK
     8 935D A5 F6		    lda A
Source: MIDICar Player.a65
  1868
  1869 				// end read block
  1870 935F			endRead:
  1871
  1872 				// decode block
  1873 				// 'A' stays as it is
  1874
  1875 				// 'B' if geather than zero, lets decode
  1876 935F A5 F7		  lda B
  1877 9361 F0 0A		  beq decodeC
  1878
  1879 				// 76543210
  1880 				// 0bbbbbbb and %1
  1881 				// 0000000b
  1882 				//        |
  1883 				// +------+ 7:asl
  1884 				// v
  1885 				// b0000000 ora A
  1886 				// baaaaaaa
  1887
  1888 9363 46 F7		  lsr B
  1889 9365 90 06		  bcc decodeC
  1890
  1891 9367 A5 F6		  lda A
  1892 9369 09 80		  ora #$80
  1893 936B 85 F6		  sta A
  1894
  1895 936D			decodeC:
  1896 				// 'C' if geather than zero, lets decode
  1897 936D A5 F8		  lda C
  1898 936F F0 12		  beq decodeD
  1899
  1900 				// 76543210
  1901 				// 0ccccccc and %11
  1902 				// 000000cc
  1903 				//       ||
  1904 				// +-----+| 6:asl
  1905 				// |+-----+
  1906 				// vv
  1907 				// cc000000 ora B
  1908 				// ccbbbbbb
  1909 9371 29 03		  and #%11    // 2
  1910 9373 F0 08		  beq noOrC   // 2**
  1911 9375 A8			  tay         // 2
  1912 9376 B9 9B 93		  lda OrC,y   // 4*
  1913 9379 05 F7		  ora B       // 3
  1914 937B 85 F7		  sta B       // 3
  1915
  1916 937D			noOrC:
  1917 937D A5 F8		  lda C       // 3
  1918 937F 4A			  lsr @       // 2
  1919 9380 4A			  lsr @       // 2
  1920 9381 85 F8		  sta C       // 3
  1921 				              //=26*+**
  1922
  1923 9383			decodeD:
  1924 				// 'D' if geather than zero, lets decode
  1925 9383 A5 F9		  lda D
  1926 9385 F0 13		  beq endDecode
  1927
  1928 				// 76543210
  1929 				// 0ddddddd and %111
  1930 				// 00000ddd
  1931 				//      |||
  1932 				// +----+||
  1933 				// |+----+| 5:asl
  1934 				// ||+----+
  1935 				// vvv
  1936 				// ddd00000 ora C
  1937 				// dddccccc
  1938
  1939 9387 29 07		  and #%111   // 2
  1940 9389 F0 08		  beq noOrD   // 2**
  1941 938B A8			  tay         // 2
  1942 938C B9 9F 93		  lda OrD,y   // 4*
  1943 938F 05 F8		  ora C       // 3
  1944 9391 85 F8		  sta C       // 3
  1945
  1946 9393			noOrD:
  1947 9393 A5 F9		  lda D       // 3
  1948 9395 4A			  lsr @       // 2
  1949 9396 4A			  lsr @       // 2
  1950 9397 4A			  lsr @       // 2
  1951 9398 85 F9		  sta D       // 3
  1952 				              //=28*+**
  1953 939A			endDecode:
  1954 939A 60			  rts
  1955
  1956 939B			OrC:
  1957 939B 00			  dta %00000000
  1958 939C 40			  dta %01000000
  1959 939D 80			  dta %10000000
  1960 939E C0			  dta %11000000
  1961
  1962 939F			OrD:
  1963 939F 00			  dta %00000000
  1964 93A0 20			  dta %00100000
  1965 93A1 40			  dta %01000000
  1966 93A2 60			  dta %01100000
  1967 93A3 80			  dta %10000000
  1968 93A4 A0			  dta %10100000
  1969 93A5 C0			  dta %11000000
  1970 93A6 E0			  dta %11100000
  1971
  1972 93A7			@exit
  1973 					.ifdef @new
  1974 					lda <@VarData
  1975 					sta :ztmp
  1976 					lda >@VarData
  1977 					ldy #@VarDataSize-1
  1978 					jmp @FreeMem
  1979 					els
  1980 93A7 60				rts						; ret
  1981 					eif
  1982 				.endl
  1983
  1984 93A8			.local	READ24						; PROCEDURE | ASSEMBLER
  1985
  1986 				; -------------------  ASM Block 00000076  -------------------
  1987
  1988 				  .MACRO m@readByte
  1989 				    ldy #0
  1990 				    lda (_PTR),y
  1991 				    sta _TMP
  1992 				    inc _ADR
  1993 				    sne
  1994 				    inc _ADR+1
  1995 				    jsr MEMBOUNDCHECK
  1996 				    lda _TMP
  1997 				  .ENDM
  1998
  1999 93A8			  m@readByte
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: MIDICar Player.a65]
     1 93A8 A0 00		    ldy #0
     2 93AA B1 E1		    lda (_PTR),y
     3 93AC 85 F6		    sta _TMP
     4 93AE E6 E1		    inc _ADR
     5 93B0 D0 02		    sne
     6 93B2 E6 E2		    inc _ADR+1
     7 93B4 20 AE 8E		    jsr MEMBOUNDCHECK
     8 93B7 A5 F6		    lda _TMP
Source: MIDICar Player.a65
  2000 93B9 85 F8		  sta _delta+2
  2001
  2002 93BB			  m@readByte
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: MIDICar Player.a65]
     1 93BB A0 00		    ldy #0
     2 93BD B1 E1		    lda (_PTR),y
     3 93BF 85 F6		    sta _TMP
     4 93C1 E6 E1		    inc _ADR
     5 93C3 D0 02		    sne
     6 93C5 E6 E2		    inc _ADR+1
     7 93C7 20 AE 8E		    jsr MEMBOUNDCHECK
     8 93CA A5 F6		    lda _TMP
Source: MIDICar Player.a65
  2003 93CC 85 F7		  sta _delta+1
  2004
  2005 93CE			  m@readByte
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: MIDICar Player.a65]
     1 93CE A0 00		    ldy #0
     2 93D0 B1 E1		    lda (_PTR),y
     3 93D2 85 F6		    sta _TMP
     4 93D4 E6 E1		    inc _ADR
     5 93D6 D0 02		    sne
     6 93D8 E6 E2		    inc _ADR+1
     7 93DA 20 AE 8E		    jsr MEMBOUNDCHECK
     8 93DD A5 F6		    lda _TMP
Source: MIDICar Player.a65
  2006 93DF 85 F6		  sta _delta+0
  2007
  2008 93E1 A9 00		  lda #0
  2009 93E3 85 F9		  sta _delta+3
  2010
  2011 93E5			@exit
  2012 					.ifdef @new
  2013 					lda <@VarData
  2014 					sta :ztmp
  2015 					lda >@VarData
  2016 					ldy #@VarDataSize-1
  2017 					jmp @FreeMem
  2018 					els
  2019 93E5 60				rts						; ret
  2020 					eif
  2021 				.endl
  2022
  2023 93E6			.local	EVENTMIDI3					; PROCEDURE
  2024
  2025 				; optimize OK (events.inc), line = 4
  2026
  2027 93E6 A5 E8			lda _EVENT
  2028 93E8 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2029 93EA				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2030 93EA				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 93EA A5 FD		  lda FIFO_Head
     5 93EC 18			  clc
     6 93ED 69 01		  adc #1
     7 93EF C5 FE		  cmp FIFO_Tail
     8 93F1 D0 03		  bne storeInFIFO
     9 93F3 20 6B 8E		  jsr FIFO_Flush
    11 93F6			storeInFIFO:
    12 93F6 A4 FD		  ldy FIFO_Head
    13 93F8 A5 FF		  lda FIFO_Byte
    14 93FA 99 00 06		  sta FIFO_ADDR,y
    15 93FD E6 FD		  inc FIFO_Head
    16 93FF			exitWrite:
Source: MIDICar Player.a65
  2031 					.endl
  2032
  2033 				; optimize FAIL ('m@INLINE', events.inc), line = 5
  2034
  2035 93FF				.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
  2036 93FF				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 93FF A0 00			ldy #$00
     5 9401 B1 E1			lda (_PTR),y
     6 9403 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 9405 E6 E1			inc _ADR
    11 9407 D0 02			sne
    12 9409 E6 E2			inc _ADR+1
    16 940B 20 AE 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2037 					.endl
  2038 940E				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2039 940E				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 940E A5 FD		  lda FIFO_Head
     5 9410 18			  clc
     6 9411 69 01		  adc #1
     7 9413 C5 FE		  cmp FIFO_Tail
     8 9415 D0 03		  bne storeInFIFO
     9 9417 20 6B 8E		  jsr FIFO_Flush
    11 941A			storeInFIFO:
    12 941A A4 FD		  ldy FIFO_Head
    13 941C A5 FF		  lda FIFO_Byte
    14 941E 99 00 06		  sta FIFO_ADDR,y
    15 9421 E6 FD		  inc FIFO_Head
    16 9423			exitWrite:
Source: MIDICar Player.a65
  2040 					.endl
  2041
  2042 				; optimize FAIL ('m@INLINE', events.inc), line = 6
  2043
  2044 9423				.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
  2045 9423				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 9423 A0 00			ldy #$00
     5 9425 B1 E1			lda (_PTR),y
     6 9427 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 9429 E6 E1			inc _ADR
    11 942B D0 02			sne
    12 942D E6 E2			inc _ADR+1
    16 942F 20 AE 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2046 					.endl
  2047 9432				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2048 9432				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 9432 A5 FD		  lda FIFO_Head
     5 9434 18			  clc
     6 9435 69 01		  adc #1
     7 9437 C5 FE		  cmp FIFO_Tail
     8 9439 D0 03		  bne storeInFIFO
     9 943B 20 6B 8E		  jsr FIFO_Flush
    11 943E			storeInFIFO:
    12 943E A4 FD		  ldy FIFO_Head
    13 9440 A5 FF		  lda FIFO_Byte
    14 9442 99 00 06		  sta FIFO_ADDR,y
    15 9445 E6 FD		  inc FIFO_Head
    16 9447			exitWrite:
Source: MIDICar Player.a65
  2049 					.endl
  2050 9447			@exit
  2051 					.ifdef @new
  2052 					lda <@VarData
  2053 					sta :ztmp
  2054 					lda >@VarData
  2055 					ldy #@VarDataSize-1
  2056 					jmp @FreeMem
  2057 					els
  2058 9447 60				rts						; ret
  2059 					eif
  2060 				.endl
  2061
  2062 9448			.local	EVENTMIDI2					; PROCEDURE
  2063
  2064 				; optimize OK (events.inc), line = 17
  2065
  2066 9448 A5 E8			lda _EVENT
  2067 944A 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2068 944C				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2069 944C				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 944C A5 FD		  lda FIFO_Head
     5 944E 18			  clc
     6 944F 69 01		  adc #1
     7 9451 C5 FE		  cmp FIFO_Tail
     8 9453 D0 03		  bne storeInFIFO
     9 9455 20 6B 8E		  jsr FIFO_Flush
    11 9458			storeInFIFO:
    12 9458 A4 FD		  ldy FIFO_Head
    13 945A A5 FF		  lda FIFO_Byte
    14 945C 99 00 06		  sta FIFO_ADDR,y
    15 945F E6 FD		  inc FIFO_Head
    16 9461			exitWrite:
Source: MIDICar Player.a65
  2070 					.endl
  2071
  2072 				; optimize FAIL ('m@INLINE', events.inc), line = 18
  2073
  2074 9461				.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
  2075 9461				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 9461 A0 00			ldy #$00
     5 9463 B1 E1			lda (_PTR),y
     6 9465 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 9467 E6 E1			inc _ADR
    11 9469 D0 02			sne
    12 946B E6 E2			inc _ADR+1
    16 946D 20 AE 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2076 					.endl
  2077 9470				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2078 9470				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 9470 A5 FD		  lda FIFO_Head
     5 9472 18			  clc
     6 9473 69 01		  adc #1
     7 9475 C5 FE		  cmp FIFO_Tail
     8 9477 D0 03		  bne storeInFIFO
     9 9479 20 6B 8E		  jsr FIFO_Flush
    11 947C			storeInFIFO:
    12 947C A4 FD		  ldy FIFO_Head
    13 947E A5 FF		  lda FIFO_Byte
    14 9480 99 00 06		  sta FIFO_ADDR,y
    15 9483 E6 FD		  inc FIFO_Head
    16 9485			exitWrite:
Source: MIDICar Player.a65
  2079 					.endl
  2080 9485			@exit
  2081 					.ifdef @new
  2082 					lda <@VarData
  2083 					sta :ztmp
  2084 					lda >@VarData
  2085 					ldy #@VarDataSize-1
  2086 					jmp @FreeMem
  2087 					els
  2088 9485 60				rts						; ret
  2089 					eif
  2090 				.endl
  2091
  2092 9486			.local	EVENTSYSEX					; PROCEDURE
  2093
  2094 				; optimize FAIL ('READVARL', events.inc), line = 27
  2095
  2096 9486 20 EF 92			jsr READVARL
  2097
  2098 				; optimize OK (events.inc), line = 29
  2099
  2100 9489 A5 E8			lda _EVENT
  2101 948B 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2102 948D				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2103 948D				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 948D A5 FD		  lda FIFO_Head
     5 948F 18			  clc
     6 9490 69 01		  adc #1
     7 9492 C5 FE		  cmp FIFO_Tail
     8 9494 D0 03		  bne storeInFIFO
     9 9496 20 6B 8E		  jsr FIFO_Flush
    11 9499			storeInFIFO:
    12 9499 A4 FD		  ldy FIFO_Head
    13 949B A5 FF		  lda FIFO_Byte
    14 949D 99 00 06		  sta FIFO_ADDR,y
    15 94A0 E6 FD		  inc FIFO_Head
    16 94A2			exitWrite:
Source: MIDICar Player.a65
  2104 					.endl
  2105
  2106 				; --- WhileProlog
  2107 94A2 4C CB 94			jmp l_04F5
  2108 94A5			l_04F6
  2109
  2110 				; optimize FAIL ('m@INLINE', events.inc), line = 35
  2111
  2112 94A5				.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
  2113 94A5				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 94A5 A0 00			ldy #$00
     5 94A7 B1 E1			lda (_PTR),y
     6 94A9 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 94AB E6 E1			inc _ADR
    11 94AD D0 02			sne
    12 94AF E6 E2			inc _ADR+1
    16 94B1 20 AE 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2114 					.endl
  2115
  2116 				; optimize FAIL ('m@INLINE', events.inc), line = 37
  2117
  2118 94B4				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2119 94B4				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 94B4 A5 FD		  lda FIFO_Head
     5 94B6 18			  clc
     6 94B7 69 01		  adc #1
     7 94B9 C5 FE		  cmp FIFO_Tail
     8 94BB D0 03		  bne storeInFIFO
     9 94BD 20 6B 8E		  jsr FIFO_Flush
    11 94C0			storeInFIFO:
    12 94C0 A4 FD		  ldy FIFO_Head
    13 94C2 A5 FF		  lda FIFO_Byte
    14 94C4 99 00 06		  sta FIFO_ADDR,y
    15 94C7 E6 FD		  inc FIFO_Head
    16 94C9			exitWrite:
Source: MIDICar Player.a65
  2120 					.endl
  2121
  2122 				; optimize FAIL (0, events.inc), line = 41
  2123
  2124 94C9 C6 F6			dec _TMP
  2125 94CB			l_04F5
  2126
  2127 				; optimize OK (events.inc), line = 33
  2128
  2129 94CB A5 F6			lda _TMP
  2130 94CD D0 D6			jne l_04F6
  2131 94CF			@exit
  2132 					.ifdef @new
  2133 					lda <@VarData
  2134 					sta :ztmp
  2135 					lda >@VarData
  2136 					ldy #@VarDataSize-1
  2137 					jmp @FreeMem
  2138 					els
  2139 94CF 60				rts						; ret
  2140 					eif
  2141 				.endl
  2142
  2143 94D0			.local	EVENTMETA					; PROCEDURE
  2144
  2145 				; optimize FAIL ('m@INLINE', events.inc), line = 53
  2146
  2147 94D0				.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
  2148 94D0				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 94D0 A0 00			ldy #$00
     5 94D2 B1 E1			lda (_PTR),y
     6 94D4 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 94D6 E6 E1			inc _ADR
    11 94D8 D0 02			sne
    12 94DA E6 E2			inc _ADR+1
    16 94DC 20 AE 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2149 					.endl
  2150
  2151 				; optimize FAIL ('READVARL', events.inc), line = 54
  2152
  2153 94DF 20 EF 92			jsr READVARL
  2154
  2155 				; optimize OK (events.inc), line = 59
  2156
  2157 94E2 A5 FF			lda MIDI_FIFO.FIFO_BYTE
  2158 94E4 C9 2F			cmp #$2F
  2159 94E6 D0 09			jne l_0520
  2160
  2161 				; optimize OK (events.inc), line = 61
  2162
  2163 94E8 A5 E7			lda _STATUS
  2164 94EA 09 40			ora #$40
  2165 94EC 85 E7			sta _STATUS
  2166 94EE 4C 42 95			jmp l_0534
  2167 94F1			l_0520
  2168
  2169 				; optimize OK (events.inc), line = 63
  2170
  2171 94F1 A5 FF			lda MIDI_FIFO.FIFO_BYTE
  2172 94F3 C9 51			cmp #$51
  2173 94F5 D0 39			jne l_0546
  2174
  2175 				; optimize FAIL ('READ24', events.inc), line = 65
  2176
  2177 94F7 20 A8 93			jsr READ24
  2178
  2179 				; optimize OK (events.inc), line = 66
  2180
  2181 94FA A5 F9			lda _DELTA+3
  2182 94FC CD 81 9F			cmp MS_PER_QNOTE+3
  2183 94FF D0 15			bne @+
  2184 9501 A5 F8			lda _DELTA+2
  2185 9503 CD 80 9F			cmp MS_PER_QNOTE+2
  2186 9506 D0 0E			bne @+
  2187 9508 A5 F7			lda _DELTA+1
  2188 950A CD 7F 9F			cmp MS_PER_QNOTE+1
  2189 950D D0 07			bne @+
  2190 950F A5 F6			lda _DELTA
  2191 9511 CD 7E 9F			cmp MS_PER_QNOTE
  2192 9514 F0 17			jeq l_0558
  2193 				@
  2194
  2195 				; optimize OK (events.inc), line = 68
  2196
  2197 9516 A5 F6			lda _DELTA
  2198 9518 8D 7E 9F			sta MS_PER_QNOTE
  2199 951B A5 F7			lda _DELTA+1
  2200 951D 8D 7F 9F			sta MS_PER_QNOTE+1
  2201 9520 A5 F8			lda _DELTA+2
  2202 9522 8D 80 9F			sta MS_PER_QNOTE+2
  2203 9525 A5 F9			lda _DELTA+3
  2204 9527 8D 81 9F			sta MS_PER_QNOTE+3
  2205
  2206 				; optimize FAIL ('SETTEMPO', events.inc), line = 69
  2207
  2208 952A 20 C4 96			jsr SETTEMPO
  2209 952D			l_0558
  2210 952D 4C 42 95			jmp l_0569
  2211 9530			l_0546
  2212
  2213 				; --- WhileProlog
  2214 9530 4C 3E 95			jmp l_056B
  2215 9533			l_056C
  2216
  2217 				; optimize FAIL (0, events.inc), line = 85
  2218
  2219 9533 C6 F6			dec _TMP
  2220
  2221 				; optimize FAIL (0, events.inc), line = 86
  2222
  2223 9535 E6 E1			inc _ADR
  2224 9537 D0 02			sne
  2225 9539 E6 E2			inc _ADR+1
  2226
  2227 				; optimize FAIL ('MEMBOUNDCHECK', events.inc), line = 87
  2228
  2229 953B 20 AE 8E			jsr MEMBOUNDCHECK
  2230 953E			l_056B
  2231
  2232 				; optimize OK (events.inc), line = 83
  2233
  2234 953E A5 F6			lda _TMP
  2235 9540 D0 F1			jne l_056C
  2236 9542			l_0569
  2237 9542			l_0534
  2238 9542			@exit
  2239 					.ifdef @new
  2240 					lda <@VarData
  2241 					sta :ztmp
  2242 					lda >@VarData
  2243 					ldy #@VarDataSize-1
  2244 					jmp @FreeMem
  2245 					els
  2246 9542 60				rts						; ret
  2247 					eif
  2248 				.endl
  2249 9543			l_04AC
  2250
  2251 				; optimize OK (processtrack.inc), line = 33
  2252
  2253 9543 A5 F5			lda _TIMERSTATUS
  2254 9545 49 80			eor #$80
  2255 9547 85 F5			sta _TIMERSTATUS
  2256
  2257 				; optimize OK (processtrack.inc), line = 34
  2258
  2259 9549 A5 F0			lda _TOTALTICKS
  2260 954B 38 E5 E3			sub _TRACKTIME
  2261 954E 8D 8A 9F			sta DTM
  2262 9551 A5 F1			lda _TOTALTICKS+1
  2263 9553 E5 E4			sbc _TRACKTIME+1
  2264 9555 8D 8B 9F			sta DTM+1
  2265
  2266 				; -------------------  ASM Block 00000077  -------------------
  2267
  2268 				 ldy _bank \ lda $100,y \ sta PORTB 
  2268 9558 A4 E0		 LDY _BANK 
  2268 955A B9 00 01		 LDA $100,Y 
  2268 955D 8D 01 D3		 STA PORTB 
  2269 				; optimize OK (processtrack.inc), line = 37
  2270
  2271 9560 A9 00			lda #$00
  2272 9562 85 F6			sta _DELTA
  2273 9564 85 F7			sta _DELTA+1
  2274 9566 85 F8			sta _DELTA+2
  2275 9568 85 F9			sta _DELTA+3
  2276
  2277 				; --- RepeatUntilProlog
  2278 956A			l_0599
  2279
  2280 				; optimize OK (processtrack.inc), line = 39
  2281
  2282 956A A5 E7			lda _STATUS
  2283 956C 30 49			jmi l_05AF
  2284
  2285 				; optimize FAIL ('READVARL', processtrack.inc), line = 41
  2286
  2287 956E 20 EF 92			jsr READVARL
  2288
  2289 				; optimize OK (processtrack.inc), line = 42
  2290
  2291 9571 A5 F9			lda _DELTA+3
  2292 9573 30 3F			jmi l_05C1
  2293 9575 05 F8			ora _DELTA+2
  2294 9577 05 F7			ora _DELTA+1
  2295 9579 05 F6			ora _DELTA
  2296 957B F0 37			jeq l_05C1
  2297
  2298 				; optimize OK (processtrack.inc), line = 44
  2299
  2300 957D A5 F0			lda _TOTALTICKS
  2301 957F 18 65 F6			add _DELTA
  2302 9582 85 9D			sta :STACKORIGIN+9
  2303 9584 A5 F1			lda _TOTALTICKS+1
  2304 9586 65 F7			adc _DELTA+1
  2305 9588 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2306 958A A5 F2			lda _TOTALTICKS+2
  2307 958C 65 F8			adc _DELTA+2
  2308 958E 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
  2309 9590 A5 F3			lda _TOTALTICKS+3
  2310 9592 65 F9			adc _DELTA+3
  2311 9594 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
  2312 9596 A5 9D			lda :STACKORIGIN+9
  2313 9598 38 ED 8A 9F			sub DTM
  2314 959C 85 E3			sta _TRACKTIME
  2315 959E A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2316 95A0 ED 8B 9F			sbc DTM+1
  2317 95A3 85 E4			sta _TRACKTIME+1
  2318 95A5 A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
  2319 95A7 E9 00			sbc #$00
  2320 95A9 85 E5			sta _TRACKTIME+2
  2321 95AB A5 CD			lda :STACKORIGIN+STACKWIDTH*3+9
  2322 95AD E9 00			sbc #$00
  2323 95AF 85 E6			sta _TRACKTIME+3
  2324 95B1 4C 18 96			jmp b_0599					; break
  2325 95B4			l_05C1
  2326 95B4 4C BD 95			jmp l_05DA
  2327 95B7			l_05AF
  2328
  2329 				; optimize OK (processtrack.inc), line = 49
  2330
  2331 95B7 A5 E7			lda _STATUS
  2332 95B9 29 7F			and #$7F
  2333 95BB 85 E7			sta _STATUS
  2334 95BD			l_05DA
  2335
  2336 				; optimize OK (processtrack.inc), line = 51
  2337
  2338 95BD A0 00			ldy #$00
  2339 95BF B1 E1			lda (_PTR),y
  2340 95C1 10 13			jpl l_05FD
  2341
  2342 				; optimize FAIL ('m@INLINE', processtrack.inc), line = 53
  2343
  2344 95C3				.local READB
  2345 95C3				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 95C3 A0 00			ldy #$00
     5 95C5 B1 E1			lda (_PTR),y
     6 95C7 85 F6			sta _TMP
    10 95C9 E6 E1			inc _ADR
    11 95CB D0 02			sne
    12 95CD E6 E2			inc _ADR+1
    16 95CF 20 AE 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2346 					.endl
  2347 95D2 A5 F6			lda _TMP
  2348 95D4 85 E8			sta _EVENT
  2349 95D6			l_05FD
  2350
  2351 				; optimize OK (processtrack.inc), line = 56
  2352
  2353 95D6 A9 BF			lda #$BF
  2354 95D8 C5 E8			cmp _EVENT
  2355 95DA 90 06			jcc l_0619
  2356
  2357 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 58
  2358
  2359 95DC 20 E6 93			jsr EVENTMIDI3
  2360 95DF 4C 0F 96			jmp l_0624
  2361 95E2			l_0619
  2362 95E2 A9 DF			lda #$DF
  2363 95E4 C5 E8			cmp _EVENT
  2364 95E6 90 06			jcc l_0636
  2365
  2366 				; optimize FAIL ('EVENTMIDI2', processtrack.inc), line = 60
  2367
  2368 95E8 20 48 94			jsr EVENTMIDI2
  2369 95EB 4C 0F 96			jmp l_0641
  2370 95EE			l_0636
  2371 95EE A9 EF			lda #$EF
  2372 95F0 C5 E8			cmp _EVENT
  2373 95F2 90 06			jcc l_0653
  2374
  2375 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 62
  2376
  2377 95F4 20 E6 93			jsr EVENTMIDI3
  2378 95F7 4C 0F 96			jmp l_065E
  2379 95FA			l_0653
  2380 95FA A9 F7			lda #$F7
  2381 95FC C5 E8			cmp _EVENT
  2382 95FE 90 06			jcc l_0670
  2383
  2384 				; optimize FAIL ('EVENTSYSEX', processtrack.inc), line = 64
  2385
  2386 9600 20 86 94			jsr EVENTSYSEX
  2387 9603 4C 0F 96			jmp l_067B
  2388 9606			l_0670
  2389 9606 A5 E8			lda _EVENT
  2390 9608 C9 FF			cmp #$FF
  2391 960A D0 03			jne l_068D
  2392
  2393 				; optimize FAIL ('EVENTMETA', processtrack.inc), line = 65
  2394
  2395 960C 20 D0 94			jsr EVENTMETA
  2396 960F			l_068D
  2397 960F			l_067B
  2398 960F			l_065E
  2399 960F			l_0641
  2400 960F			l_0624
  2401
  2402 				; optimize OK (processtrack.inc), line = 67
  2403
  2404 960F A5 E7			lda _STATUS
  2405 9611 29 40			and #$40
  2406 9613 D0 03 4C 6A 95		jeq l_0599
  2407 9618			b_0599
  2408
  2409 				; optimize OK (processtrack.inc), line = 69
  2410
  2411 9618 A5 E7			lda _STATUS
  2412 961A 09 80			ora #$80
  2413 961C 85 E7			sta _STATUS
  2414
  2415 				; optimize OK (processtrack.inc), line = 70
  2416
  2417 961E A5 F5			lda _TIMERSTATUS
  2418 9620 49 80			eor #$80
  2419 9622 85 F5			sta _TIMERSTATUS
  2420
  2421 				; ------------------------------------------------------------
  2422
  2423 9624			@exit
  2424 					.ifdef @new
  2425 					lda <@VarData
  2426 					sta :ztmp
  2427 					lda >@VarData
  2428 					ldy #@VarDataSize-1
  2429 					jmp @FreeMem
  2430 					els
  2431 9624 60				rts						; ret
  2432 					eif
  2433 				.endl
  2434
  2435 9625			.local	PROCESSMIDI					; PROCEDURE
  2436
  2437 				; optimize OK (processmidi.inc), line = 7
  2438
  2439 9625 AD 8C 9F			lda CTRK
  2440 9628 CD 7B 9F			cmp TOTALTRACKS
  2441 962B D0 1A			jne l_06CE
  2442
  2443 				; optimize OK (processmidi.inc), line = 9
  2444
  2445 962D A9 01			lda #$01
  2446 962F 8D 8C 9F			sta CTRK
  2447
  2448 				; optimize OK (processmidi.inc), line = 10
  2449
  2450 9632 AD D3 98			lda MIDTRACKS
  2451 9635 8D 84 9F			sta CURTRACKPTR
  2452 9638 AD D4 98			lda MIDTRACKS+1
  2453 963B 8D 85 9F			sta CURTRACKPTR+1
  2454
  2455 				; optimize OK (processmidi.inc), line = 11
  2456
  2457 963E AD 7B 9F			lda TOTALTRACKS
  2458 9641 8D 8D 9F			sta PLAYINGTRACKS
  2459 9644 4C 58 96			jmp l_06E7
  2460 9647			l_06CE
  2461
  2462 				; optimize FAIL (0, processmidi.inc), line = 15
  2463
  2464 9647 EE 8C 9F			inc CTRK
  2465
  2466 				; optimize OK (processmidi.inc), line = 16
  2467
  2468 964A AD 84 9F			lda CURTRACKPTR
  2469 964D 18 69 09			add #$09
  2470 9650 8D 84 9F			sta CURTRACKPTR
  2471 9653 90 03			scc
  2472 9655 EE 85 9F			inc CURTRACKPTR+1
  2473 9658			l_06E7
  2474
  2475 				; optimize OK (processmidi.inc), line = 19
  2476
  2477 9658 AD 84 9F			lda CURTRACKPTR
  2478 965B 85 82			sta :bp2
  2479 965D AD 85 9F			lda CURTRACKPTR+1
  2480 9660 85 83			sta :bp2+1
  2481 9662 A0 08			ldy #$08
  2482 9664 B1 82 99 E0 00 88 + 	mva:rpl (:bp2),y $00E0,y-
  2483
  2484 				; optimize OK (processmidi.inc), line = 21
  2485
  2486 966C A5 E7			lda _STATUS
  2487 966E 29 40			and #$40
  2488 9670 D0 31			jne l_0707
  2489
  2490 				; optimize OK (processmidi.inc), line = 23
  2491
  2492 9672				.LOCAL
  2493 9672 A5 F3			lda _TOTALTICKS+3
  2494 9674 38 E5 E6			sub _TRACKTIME+3
  2495 9677 D0 1C			bne L4
  2496 9679 A5 F2			lda _TOTALTICKS+2
  2497 967B C5 E5			cmp _TRACKTIME+2
  2498 967D D0 0A			bne L1
  2499 967F A5 F1			lda _TOTALTICKS+1
  2500 9681 C5 E4			cmp _TRACKTIME+1
  2501 9683 D0 04			bne L1
  2502 9685 A5 F0			lda _TOTALTICKS
  2503 9687 C5 E3			cmp _TRACKTIME
  2504 9689 F0 10		L1	beq L5
  2505 968B B0 04			bcs L3
  2506 968D A9 FF			lda #$FF
  2507 968F D0 0A			bne L5
  2508 9691 A9 01		L3	lda #$01
  2509 9693 D0 06			bne L5
  2510 9695 50 04		L4	bvc L5
  2511 9697 49 FF			eor #$FF
  2512 9699 09 01			ora #$01
  2513 969B			L5
  2514 					.ENDL
  2515 969B 30 03			jmi l_0718
  2516 969D 20 EC 92			jsr PROCESSTRACK
  2517 96A0			l_0718
  2518 96A0 4C A6 96			jmp l_0725
  2519 96A3			l_0707
  2520
  2521 				; optimize FAIL (0, processmidi.inc), line = 26
  2522
  2523 96A3 CE 8D 9F			dec PLAYINGTRACKS
  2524 96A6			l_0725
  2525
  2526 				; optimize OK (processmidi.inc), line = 28
  2527
  2528 96A6 A9 E0			lda #$E0
  2529 96A8 85 88			sta SYSTEM.MOVE_00EC.SOURCE
  2530 96AA A9 00			lda #$00
  2531 96AC 85 89			sta SYSTEM.MOVE_00EC.SOURCE+1
  2532 96AE AD 84 9F			lda CURTRACKPTR
  2533 96B1 85 8C			sta SYSTEM.MOVE_00EC.DEST
  2534 96B3 AD 85 9F			lda CURTRACKPTR+1
  2535 96B6 85 8D			sta SYSTEM.MOVE_00EC.DEST+1
  2536 96B8 A9 09			lda #$09
  2537 96BA 85 84			sta SYSTEM.MOVE_00EC.COUNT
  2538 96BC A9 00			lda #$00
  2539 96BE 85 85			sta SYSTEM.MOVE_00EC.COUNT+1
  2540 96C0				.local +MAIN.SYSTEM.MOVE_00EC
  2541 96C0				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00EC.M@INLINE [Source: MIDICar Player.a65]
     4 96C0 20 21 84			jsr @move
Source: MIDICar Player.a65
  2542 					.endl
  2543 96C3			@exit
  2544 					.ifdef @new
  2545 					lda <@VarData
  2546 					sta :ztmp
  2547 					lda >@VarData
  2548 					ldy #@VarDataSize-1
  2549 					jmp @FreeMem
  2550 					els
  2551 96C3 60				rts						; ret
  2552 					eif
  2553 				.endl
  2554
  2555 96C4			.local	SETTEMPO					; PROCEDURE
  2556
  2557 				; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 10
  2558
  2559 96C4 E8				inx
  2560 96C5 AD 7E 9F 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  2561 96CA AD 7F 9F 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  2562 96CF AD 80 9F 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  2563 96D4 AD 81 9F 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  2564 96D9 E8				inx
  2565 96DA AD 7C 9F 95 94		mva TICKDIV :STACKORIGIN,x
  2566 96DF AD 7D 9F 95 A4		mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
  2567 96E4 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  2568 96E8 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  2569 96EC 20 D0 84			jsr divmulINT.DIV
  2570 96EF CA				dex
  2571 96F0 B5 94			lda :STACKORIGIN,x
  2572 96F2 8D BB 9F			sta _FREQ
  2573 96F5 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2574 96F7 8D BC 9F			sta _FREQ+1
  2575 96FA B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2576 96FC 8D BD 9F			sta _FREQ+2
  2577 96FF B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2578 9701 8D BE 9F			sta _FREQ+3
  2579
  2580 				; optimize FAIL ('@I2F_m', settempo.inc), line = 11
  2581
  2582 9704 AD BB 9F 95 94		mva _FREQ :STACKORIGIN,x
  2583 9709 AD BC 9F 95 A4		mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2584 970E AD BD 9F 95 B4		mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2585 9713 AD BE 9F 95 C4		mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2586 9718 E8				inx
  2587 9719 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2588 971D A9 24 95 A4			mva #$24 :STACKORIGIN+STACKWIDTH,x
  2589 9721 A9 74 95 B4			mva #$74 :STACKORIGIN+STACKWIDTH*2,x
  2590 9725 A9 49 95 C4			mva #$49 :STACKORIGIN+STACKWIDTH*3,x
  2591 9729 20 A2 8A			jsr @I2F_m
  2592 972C 20 64 89			jsr @FDIV
  2593 972F CA				dex
  2594 9730 B5 94			lda :STACKORIGIN,x
  2595 9732 8D B7 9F			sta FREQ
  2596 9735 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2597 9737 8D B8 9F			sta FREQ+1
  2598 973A B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2599 973C 8D B9 9F			sta FREQ+2
  2600 973F B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2601 9741 8D BA 9F			sta FREQ+3
  2602
  2603 				; optimize FAIL ('@FDIV', settempo.inc), line = 12
  2604
  2605 9744 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2606 9748 A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2607 974C A9 80 95 B4			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  2608 9750 A9 3F 95 C4			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  2609 9754 E8				inx
  2610 9755 AD B7 9F 95 94		mva FREQ :STACKORIGIN,x
  2611 975A AD B8 9F 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2612 975F AD B9 9F 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2613 9764 AD BA 9F 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2614 9769 20 64 89			jsr @FDIV
  2615 976C CA				dex
  2616 976D B5 94			lda :STACKORIGIN,x
  2617 976F 8D B7 9F			sta FREQ
  2618 9772 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2619 9774 8D B8 9F			sta FREQ+1
  2620 9777 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2621 9779 8D B9 9F			sta FREQ+2
  2622 977C B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2623 977E 8D BA 9F			sta FREQ+3
  2624
  2625 				; optimize FAIL ('@FDIV', settempo.inc), line = 15
  2626
  2627 9781 A9 F5 95 94			mva #$F5 :STACKORIGIN,x
  2628 9785 A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  2629 9789 A9 7A 95 B4			mva #$7A :STACKORIGIN+STACKWIDTH*2,x
  2630 978D A9 43 95 C4			mva #$43 :STACKORIGIN+STACKWIDTH*3,x
  2631 9791 E8				inx
  2632 9792 AD B7 9F 95 94		mva FREQ :STACKORIGIN,x
  2633 9797 AD B8 9F 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2634 979C AD B9 9F 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2635 97A1 AD BA 9F 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2636 97A6 20 64 89			jsr @FDIV
  2637 97A9 CA				dex
  2638 97AA B5 94			lda :STACKORIGIN,x
  2639 97AC 8D C0 9F			sta RATIO
  2640 97AF B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2641 97B1 8D C1 9F			sta RATIO+1
  2642 97B4 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2643 97B6 8D C2 9F			sta RATIO+2
  2644 97B9 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2645 97BB 8D C3 9F			sta RATIO+3
  2646
  2647 				; optimize FAIL ('@F2I', settempo.inc), line = 16
  2648
  2649 97BE A9 01 95 94			mva #$01 :STACKORIGIN,x
  2650 97C2 E8				inx
  2651 97C3 AD C0 9F 95 94		mva RATIO :STACKORIGIN,x
  2652 97C8 AD C1 9F 95 A4		mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
  2653 97CD AD C2 9F 95 B4		mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
  2654 97D2 AD C3 9F 95 C4		mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
  2655 97D7 20 F3 89			jsr @F2I
  2656 97DA A9 00 95 A3			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  2657 97DE A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  2658 97E2 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  2659 97E6 B5 93			lda :STACKORIGIN-1,x
  2660 97E8 18 75 94			add :STACKORIGIN,x
  2661 97EB 8D C4 9F			sta _RATIO
  2662 97EE CA				dex
  2663 97EF CA				dex
  2664
  2665 				; optimize OK (settempo.inc), line = 17
  2666
  2667 97F0 AD C4 9F			lda _RATIO
  2668 97F3 C9 10			cmp #$10
  2669 97F5 90 12			jcc l_0778
  2670 97F7 A9 00			lda #$00
  2671 97F9 8D C0 9F			sta RATIO
  2672 97FC 8D C1 9F			sta RATIO+1
  2673 97FF A9 70			lda #$70
  2674 9801 8D C2 9F			sta RATIO+2
  2675 9804 A9 41			lda #$41
  2676 9806 8D C3 9F			sta RATIO+3
  2677 9809			l_0778
  2678
  2679 				; optimize OK (settempo.inc), line = 20
  2680
  2681 9809 A5 F5			lda _TIMERSTATUS
  2682 980B 29 C0			and #$C0
  2683 980D 0D C4 9F			ora _RATIO
  2684 9810 85 F5			sta _TIMERSTATUS
  2685
  2686 				; optimize FAIL ('@I2F', settempo.inc), line = 23
  2687
  2688 9812 E8				inx
  2689 9813 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2690 9817 A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  2691 981B E8				inx
  2692 981C AD B7 9F 95 94		mva FREQ :STACKORIGIN,x
  2693 9821 AD B8 9F 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2694 9826 AD B9 9F 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2695 982B AD BA 9F 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2696 9830 E8				inx
  2697 9831 AD C4 9F 95 94		mva _RATIO :STACKORIGIN,x
  2698 9836 A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2699 983A A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  2700 983E A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  2701 9842 20 7D 8A			jsr @I2F
  2702 9845 20 AD 88			jsr @FMUL
  2703 9848 CA				dex
  2704 9849 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  2705 984D A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  2706 9851 20 A2 8A			jsr @I2F_m
  2707 9854 20 64 89			jsr @FDIV
  2708 9857 CA				dex
  2709 9858 20 CD 86			jsr @FROUND
  2710 985B 20 F3 89			jsr @F2I
  2711 985E B5 94			lda :STACKORIGIN,x
  2712 9860 8D BF 9F			sta FDIV
  2713 9863 CA				dex
  2714
  2715 				; optimize OK (settempo.inc), line = 29
  2716
  2717 9864 78				sei
  2718 9865 A9 88 8D 10 02		mva <INT_TIMER VTIMR1
  2719 986A A9 8E 8D 11 02		mva >INT_TIMER VTIMR1+1
  2720 986F A9 00			lda #$00
  2721 9871 A0 03			ldy #$03
  2722 9873 8D 08 D2			sta AUDCTL
  2723 9876 8D 01 D2			sta AUDC1
  2724 9879 8C 0F D2			sty SKCTL
  2725 987C 8D 08 D2			sta AUDCTL
  2726 987F AD BF 9F 8D 00 D2		mva FDIV AUDF1
  2727 9885 A5 10			lda irqens
  2728 9887 09 01			ora #$01
  2729 9889 85 10			sta irqens
  2730 988B 8D 0E D2			sta irqen
  2731 988E 8D 09 D2			sta stimer
  2732 9891 58				cli
  2733
  2734 				; ------------------------------------------------------------
  2735
  2736 = 9FB7			FREQ	= DATAORIGIN+$0187
  2737 = 9FBB			_FREQ	= DATAORIGIN+$018B
  2738 = 9FBF			FDIV	= DATAORIGIN+$018F
  2739 = 9FC0			RATIO	= DATAORIGIN+$0190
  2740 = 9FC4			_RATIO	= DATAORIGIN+$0194
  2741
  2742 = 9FB7			@VarData	= FREQ
  2743 = 000E			@VarDataSize	= 14
  2744
  2745 9892			@exit
  2746 					.ifdef @new
  2747 					lda <@VarData
  2748 					sta :ztmp
  2749 					lda >@VarData
  2750 					ldy #@VarDataSize-1
  2751 					jmp @FreeMem
  2752 					els
  2753 9892 60				rts						; ret
  2754 					eif
  2755 				.endl
  2756
  2757 9893			.local	NULLLOADPRCS					; PROCEDURE
  2758
  2759 9893			@exit
  2760 					.ifdef @new
  2761 					lda <@VarData
  2762 					sta :ztmp
  2763 					lda >@VarData
  2764 					ldy #@VarDataSize-1
  2765 					jmp @FreeMem
  2766 					els
  2767 9893 60				rts						; ret
  2768 					eif
  2769 				.endl
  2770
  2771 				; ------------------------------------------------------------
  2772 				; ------------------------------------------------------------
  2773 9894			@UnitInit
  2774
  2775 				; optimize OK (MIDFILES), line = 79
  2776
  2777 9894 A9 00			lda #$00
  2778 9896 8D 82 9F			sta OLDTIMERVEC
  2779 9899 8D 83 9F			sta OLDTIMERVEC+1
  2780
  2781 				; optimize OK (MIDFILES), line = 80
  2782
  2783 989C A9 93			lda <NULLLOADPRCS
  2784 989E 8D 8E 9F			sta LOADPROCESS
  2785 98A1 A9 98			lda >NULLLOADPRCS
  2786 98A3 8D 8F 9F			sta LOADPROCESS+1
  2787
  2788 				; optimize OK (MIDFILES), line = 81
  2789
  2790 98A6 A9 80			lda #$80
  2791 98A8 8D 7C 9F			sta TICKDIV
  2792 98AB A9 01			lda #$01
  2793 98AD 8D 7D 9F			sta TICKDIV+1
  2794
  2795 				; optimize OK (MIDFILES), line = 82
  2796
  2797 98B0 A9 20			lda #$20
  2798 98B2 8D 7E 9F			sta MS_PER_QNOTE
  2799 98B5 A9 A1			lda #$A1
  2800 98B7 8D 7F 9F			sta MS_PER_QNOTE+1
  2801 98BA A9 07			lda #$07
  2802 98BC 8D 80 9F			sta MS_PER_QNOTE+2
  2803 98BF A9 00			lda #$00
  2804 98C1 8D 81 9F			sta MS_PER_QNOTE+3
  2805
  2806 				; optimize OK (MIDFILES), line = 89
  2807
  2808 98C4 85 F5			sta _TIMERSTATUS
  2809
  2810 98C6 AD 10 02			lda VTIMR1
  2811 98C9 8D 82 9F			sta OLDTIMERVEC
  2812 98CC AD 11 02			lda VTIMR1+1
  2813 98CF 8D 83 9F			sta OLDTIMERVEC+1
  2814
  2815 98D2 60				rts
  2816
  2817 				; ------------------------------------------------------------
  2818
  2819 = 0080			F_COUNTER	= $80
  2820 = 0040			F_TICK	= $40
  2821 = 00C0			F_FLAGS	= $C0
  2822 = 000F			F_RATIO	= $0F
  2823 = 0080			F_SKIPDELTA	= $80
  2824 = 0040			F_STOP	= $40
  2825 = 00E0			_TRKREGS	= $E0
  2826 = 0000			MID_0	= $00
  2827 = 0001			MID_1	= $01
  2828 = 0064			ERR_UNSUPPORTED_FORMAT	= $64
  2829 = 0065			ERR_NOT_ENOUGHT_MEMORY	= $65
  2830 = 6468544D		TAG_MTHD	= $6468544D
  2831 = 6B72544D		TAG_MTRK	= $6B72544D
  2832 = 00F0			_TOTALTICKS	= $F0
  2833 = 00F4			_SUBCNT	= $F4
  2834 = 00F5			_TIMERSTATUS	= $F5
  2835 = 00F6			_DELTA	= $F6
  2836 = 00F6			_TMP	= $F6
  2837 = 00E0			_BANK	= $E0
  2838 = 00E1			_PTR	= $E1
  2839 = 00E1			_ADR	= $E1
  2840 = 00E3			_TRACKTIME	= $E3
  2841 = 00E7			_STATUS	= $E7
  2842 = 00E8			_EVENT	= $E8
  2843 = 9F77			MIDDATA	= DATAORIGIN+$0147
  2844 = 9F79			adr.MIDTRACKS	= [DATAORIGIN+$0149] .array [1]
  2845 98D3			.var MIDTRACKS	= adr.MIDTRACKS .word
  2846 = 9F7A			FORMAT	= DATAORIGIN+$014A
  2847 = 9F7B			TOTALTRACKS	= DATAORIGIN+$014B
  2848 = 9F7C			TICKDIV	= DATAORIGIN+$014C
  2849 = 9F7E			MS_PER_QNOTE	= DATAORIGIN+$014E
  2850 = 9F82			OLDTIMERVEC	= DATAORIGIN+$0152
  2851 = 9F84			CURTRACKPTR	= DATAORIGIN+$0154
  2852 = 9F86			DELTATIME	= DATAORIGIN+$0156
  2853 = 9F8A			DTM	= DATAORIGIN+$015A
  2854 = 9F8C			CTRK	= DATAORIGIN+$015C
  2855 = 9F8D			PLAYINGTRACKS	= DATAORIGIN+$015D
  2856 = 9F8E			LOADPROCESS	= DATAORIGIN+$015E
  2857 = 0600			adr.RBUF	= $0600
  2858 98D3			.var RBUF	= adr.RBUF .word
  2859
  2860 = 98D3 79 9F		MIDTRACKS
  2860 = 98D5 00 06		RBUF
  2860 				.endl							; UNIT MIDFILES
  2861
  2862 				; ------------------------------------------------------------
  2863
  2864 98D7			.local	MISC						; UNIT
  2865
  2866 98D7			.local	DETECTMEM					; FUNCTION | ASSEMBLER
  2867
  2868 				; -------------------  ASM Block 00000085  -------------------
  2869
  2870 98D7 8A 48			txa:pha
  2871
  2872 = 0400			bsav	= @buf
  2873
  2874 = 4000			ext_b	= $4000		;cokolwiek z zakresu $4000-$7FFF
  2875
  2876 98D9 A0 00			ldy #0
  2877 98DB B9 EC 98 99 00 06	mov	mva copy,y detect,y
  2878 98E1 C8				iny
  2879 98E2 C0 8C			cpy #.sizeof(detect)
  2880 98E4 D0 F5			bne mov
  2881
  2882 98E6 20 00 06			jsr detect
  2883
  2884 98E9 4C 78 99			jmp stop
  2885
  2886 98EC			copy
  2887
  2888 0600			.local	detect,$0600
  2889
  2890 0600 AD 01 D3			lda portb
  2891 0603 48				pha
  2892
  2893 0604 AD 0B D4 D0 FB		lda:rne vcount
  2894
  2895 				;	lda #$ff
  2896 				;	sta portb
  2897
  2898 0609 AD 00 40			lda ext_b
  2899 060C 48				pha
  2900
  2901 060D A2 0F			ldx #$0f	;zapamiętanie bajtów ext (z 16 bloków po 64k)
  2902 060F 20 7F 06		_p0	jsr setpb
  2903 0612 AD 00 40			lda ext_b
  2904 0615 9D 00 04			sta bsav,x
  2905 0618 CA				dex
  2906 0619 10 F4			bpl _p0
  2907
  2908 061B A2 0F			ldx #$0f	;wyzerowanie ich (w oddzielnej pętli, bo nie wiadomo
  2909 061D 20 7F 06		_p1	jsr setpb	;które kombinacje bitów PORTB wybierają te same banki)
  2910 0620 A9 00			lda #$00
  2911 0622 8D 00 40			sta ext_b
  2912 0625 CA				dex
  2913 0626 10 F5			bpl _p1
  2914
  2915 0628 8E 01 D3			stx portb	;eliminacja pamięci podstawowej
  2916 062B 8E 00 40			stx ext_b
  2917 062E 86 00			stx $00		;niezbędne dla niektórych rozszerzeń do 256k
  2918
  2919 0630 A0 00			ldy #$00	;pętla zliczająca bloki 64k
  2920 0632 A2 0F			ldx #$0f
  2921 0634 20 7F 06		_p2	jsr setpb
  2922 0637 AD 00 40			lda ext_b	;jeśli ext_b jest różne od zera, blok 64k już zliczony
  2923 063A D0 23			bne _n2
  2924
  2925 063C CE 00 40			dec ext_b	;w przeciwnym wypadku zaznacz jako zliczony
  2926
  2927 063F AD 00 40			lda ext_b	;sprawdz, czy sie zaznaczyl; jesli nie -> cos nie tak ze sprzetem
  2928 0642 10 1B			bpl _n2
  2929
  2930 0644 AD 01 D3			lda portb	;wpisz wartość PORTB do tablicy dla banku 0
  2931
  2932 0647 29 FE			and #$fe
  2933
  2934 0649 99 01 01			sta adr.banks,y
  2935 064C 49 04			eor #%00000100	;uzupełnij wartości dla banków 1, 2, 3
  2936 064E 99 02 01			sta adr.banks+1,y
  2937 0651 49 0C			eor #%00001100
  2938 0653 99 03 01			sta adr.banks+2,y
  2939 0656 49 04			eor #%00000100
  2940 0658 99 04 01			sta adr.banks+3,y
  2941 065B C8				iny
  2942 065C C8				iny
  2943 065D C8				iny
  2944 065E C8				iny
  2945
  2946 065F CA			_n2	dex
  2947 0660 10 D2			bpl _p2
  2948
  2949 0662 A2 0F			ldx #$0f	;przywrócenie zawartości ext
  2950 0664 20 7F 06		_p3	jsr setpb
  2951 0667 BD 00 04			lda bsav,x
  2952 066A 8D 00 40			sta ext_b
  2953 066D CA				dex
  2954 066E 10 F4			bpl _p3
  2955
  2956 0670 8E 01 D3			stx portb	;X=$FF
  2957
  2958 0673 68				pla
  2959 0674 8D 00 40			sta ext_b
  2960
  2961 0677 68				pla
  2962 0678 8D 01 D3			sta portb
  2963
  2964 067B 8C C5 9F			sty Result
  2965
  2966 067E 60				rts
  2967
  2968 				; podprogramy
  2969 067F 8A			setpb	txa		;zmiana kolejności bitów: %0000dcba -> %cba000d0
  2970 0680 4A				lsr
  2971 0681 6A				ror
  2972 0682 6A				ror
  2973 0683 6A				ror
  2974 0684 69 01			adc #$01	;ustawienie bitu nr 1 w zaleznosci od stanu C
  2975 0686 09 01			ora #$01	;ustawienie bitu sterującego OS ROM na wartosc domyslna
  2976 0688 8D 01 D3			sta portb
  2977 068B 60				rts
  2978
  2979 				.endl
  2980
  2981 9978 68 AA		stop	pla:tax
  2982
  2983
  2984 997A			@exit
  2985
  2986 				; ------------------------------------------------------------
  2987
  2988 = 9FC5			RESULT	= DATAORIGIN+$0195
  2989 997A 60				rts						; ret
  2990 				.endl
  2991
  2992 				; ------------------------------------------------------------
  2993
  2994 = 0101			adr.BANKS	= $0101
  2995 997B			.var BANKS	= adr.BANKS .word
  2996 = FFF7			DETECTOS	= $FFF7
  2997
  2998 = 997B 01 01		BANKS
  2998 				.endl							; UNIT MISC
  2999
  3000 				; ------------------------------------------------------------
  3001
  3002 997D			.local	CIO						; UNIT
  3003
  3004 997D			.local	OPN						; PROCEDURE | ASSEMBLER
  3005
  3006 				; -------------------  ASM Block 00000088  -------------------
  3007
  3008 997D 8A 48			txa:pha
  3009
  3010 997F AD C6 9F			lda chn
  3011 9982 0A 0A 0A 0A			:4 asl @
  3012 9986 AA				tax
  3013
  3014 9987 A9 03			lda #$03		;komenda: OPEN
  3015 9989 9D 42 03			sta iccmd,x
  3016
  3017 998C EE C9 9F D0 03 EE + 	inw device		;omin bajt z dlugoscia STRING-a
  3018
  3019 9994 AD C9 9F			lda device		;adres nazwy pliku
  3020 9997 9D 44 03			sta icbufa,x
  3021 999A AD CA 9F			lda device+1
  3022 999D 9D 45 03			sta icbufa+1,x
  3023
  3024 99A0 AD C7 9F			lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
  3025 99A3 9D 4A 03			sta icax1,x
  3026
  3027 99A6 AD C8 9F			lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
  3028 99A9 9D 4B 03			sta icax2,x
  3029
  3030 99AC				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 99AC EE 01 D3				inc portb
     6 99AF 20 56 E4				jsr CIOV
     8 99B2 CE 01 D3				dec portb
Source: MIDICar Player.a65
  3031
  3032 99B5 8C 37 9E			sty MAIN.SYSTEM.IOResult
  3033
  3034 99B8 68 AA			pla:tax
  3035
  3036 				; ------------------------------------------------------------
  3037
  3038 = 9FC6			CHN	= DATAORIGIN+$0196
  3039 = 9FC7			AX1	= DATAORIGIN+$0197
  3040 = 9FC8			AX2	= DATAORIGIN+$0198
  3041 = 9FC9			DEVICE	= DATAORIGIN+$0199
  3042
  3043 = 9FC6			@VarData	= CHN
  3044 = 0005			@VarDataSize	= 5
  3045
  3046 99BA			@exit
  3047 					.ifdef @new
  3048 					lda <@VarData
  3049 					sta :ztmp
  3050 					lda >@VarData
  3051 					ldy #@VarDataSize-1
  3052 					jmp @FreeMem
  3053 					els
  3054 99BA 60				rts						; ret
  3055 					eif
  3056 				.endl
  3057
  3058 99BB			.local	CLS						; PROCEDURE | ASSEMBLER
  3059 99BB 8D CB 9F			sta CHN
  3060
  3061 				; -------------------  ASM Block 00000089  -------------------
  3062
  3063 99BE 8A 48			txa:pha
  3064
  3065 99C0 AD CB 9F			lda chn
  3066 99C3 0A 0A 0A 0A			:4 asl @
  3067 99C7 AA				tax
  3068
  3069 99C8 A9 0C			lda #$0c		;komenda: CLOSE
  3070 99CA 9D 42 03			sta iccmd,x
  3071
  3072 99CD				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 99CD EE 01 D3				inc portb
     6 99D0 20 56 E4				jsr CIOV
     8 99D3 CE 01 D3				dec portb
Source: MIDICar Player.a65
  3073
  3074 99D6 8C 37 9E			sty MAIN.SYSTEM.IOResult
  3075
  3076 99D9 68 AA			pla:tax
  3077
  3078 				; ------------------------------------------------------------
  3079
  3080 = 9FCB			CHN	= DATAORIGIN+$019B
  3081
  3082 = 9FCB			@VarData	= CHN
  3083 = 0001			@VarDataSize	= 1
  3084
  3085 99DB			@exit
  3086 					.ifdef @new
  3087 					lda <@VarData
  3088 					sta :ztmp
  3089 					lda >@VarData
  3090 					ldy #@VarDataSize-1
  3091 					jmp @FreeMem
  3092 					els
  3093 99DB 60				rts						; ret
  3094 					eif
  3095 				.endl
  3096
  3097 				; ------------------------------------------------------------
  3098
  3099 				.endl							; UNIT CIO
  3100
  3101 99DC			.local	PUTTEXT						; PROCEDURE
  3102
  3103 				; optimize OK (helpers.inc), line = 21
  3104
  3105 99DC AC 1F A0 84 82 AC + 	mwy S :bp2
  3106 99E6 A0 00			ldy #$00
  3107 99E8 B1 82			lda (:bp2),y
  3108 99EA 8D 21 A0			sta L
  3109 99ED EE 1F A0			inc S
  3110 99F0 D0 03			sne
  3111 99F2 EE 20 A0			inc S+1
  3112
  3113 				; optimize OK (helpers.inc), line = 22
  3114
  3115 99F5 AD 1F A0			lda S
  3116 99F8 85 88			sta SYSTEM.MOVE_00ED.SOURCE
  3117 99FA AD 20 A0			lda S+1
  3118 99FD 85 89			sta SYSTEM.MOVE_00ED.SOURCE+1
  3119 99FF AD 1C A0			lda SCRADR
  3120 9A02 85 8C			sta SYSTEM.MOVE_00ED.DEST
  3121 9A04 AD 1D A0			lda SCRADR+1
  3122 9A07 85 8D			sta SYSTEM.MOVE_00ED.DEST+1
  3123 9A09 AD 21 A0			lda L
  3124 9A0C 85 84			sta SYSTEM.MOVE_00ED.COUNT
  3125 9A0E A9 00			lda #$00
  3126 9A10 85 85			sta SYSTEM.MOVE_00ED.COUNT+1
  3127 9A12				.local +MAIN.SYSTEM.MOVE_00ED
  3128 9A12				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00ED.M@INLINE [Source: MIDICar Player.a65]
     4 9A12 20 21 84			jsr @move
Source: MIDICar Player.a65
  3129 					.endl
  3130
  3131 				; optimize OK (helpers.inc), line = 23
  3132
  3133 9A15 AD 1C A0			lda SCRADR
  3134 9A18 18 6D 21 A0			add L
  3135 9A1C 8D 1C A0			sta SCRADR
  3136 9A1F 90 03			scc
  3137 9A21 EE 1D A0			inc SCRADR+1
  3138
  3139 				; ------------------------------------------------------------
  3140
  3141 = A01F			S	= DATAORIGIN+$01EF
  3142 = A021			L	= DATAORIGIN+$01F1
  3143
  3144 = A01F			@VarData	= S
  3145 = 0003			@VarDataSize	= 3
  3146
  3147 9A24			@exit
  3148 					.ifdef @new
  3149 					lda <@VarData
  3150 					sta :ztmp
  3151 					lda >@VarData
  3152 					ldy #@VarDataSize-1
  3153 					jmp @FreeMem
  3154 					els
  3155 9A24 60				rts						; ret
  3156 					eif
  3157 				.endl
  3158
  3159 9A25			.local	PUTINT						; PROCEDURE | ASSEMBLER
  3160
  3161 				; -------------------  ASM Block 00000098  -------------------
  3162
  3163 = 0000			EOL = 0
  3164
  3165 9A25 AD 1C A0		    lda scradr
  3166 9A28 8D 73 9A		    sta screen1
  3167 9A2B 8D 8A 9A		    sta screen2
  3168 9A2E AD 1D A0		    lda scradr+1
  3169 9A31 8D 74 9A		    sta screen1+1
  3170 9A34 8D 8B 9A		    sta screen2+1
  3171
  3172 9A37			INT2STR:
  3173 9A37 A0 00		    ldy #0
  3174 9A39 8C 9B 9A		    sty _cnt
  3175 9A3C			ITSNEXT:
  3176 9A3C A2 00		    ldx #0
  3177 9A3E			ITSSLP:
  3178 9A3E AD 22 A0		    lda value
  3179 9A41 38			    sec
  3180 9A42 F9 9C 9A		    sbc Pow10Tab,Y
  3181 9A45 8D 22 A0		    sta value
  3182 9A48 AD 23 A0		    lda value+1
  3183 9A4B C8			    iny
  3184 9A4C F9 9C 9A		    sbc Pow10Tab,Y
  3185 9A4F 90 08		    bcc ITSADD
  3186 9A51 8D 23 A0		    sta value+1
  3187 9A54 E8			    inx
  3188 9A55 88			    dey
  3189 9A56 18			    clc
  3190 9A57 90 E5		    bcc ITSSLP
  3191 9A59			ITSADD:
  3192 9A59 88			    dey
  3193 9A5A AD 22 A0		    lda value
  3194 9A5D 79 9C 9A		    adc Pow10Tab,Y
  3195 9A60 8D 22 A0		    sta value
  3196 9A63 8A			    txa
  3197 9A64 09 10		    ora #$10
  3198 9A66 AE 9B 9A		    ldx _cnt
  3199 9A69 D0 04		    bne storeDigit
  3200 9A6B C9 10		    cmp #$10
  3201 9A6D F0 09		    beq skipDigit
  3202 9A6F			storeDigit:
  3203 9A6F 0D 1E A0		    ora puttextinvert
  3204 9A72 9D 00 F0		    sta screen1:$f000,X
  3205 9A75 EE 9B 9A		    inc _cnt
  3206 9A78			skipDigit:
  3207 9A78 C8			    iny
  3208 9A79 C8			    iny
  3209 9A7A C0 08		    cpy #8
  3210 9A7C 90 BE		    bcc ITSNEXT
  3211 9A7E AD 22 A0		    lda value
  3212 9A81 09 10		    ora #$10
  3213 9A83 AE 9B 9A		    ldx _cnt
  3214 9A86 0D 1E A0		    ora puttextinvert
  3215 9A89 9D 00 F0		    sta screen2:$f000,X
  3216 9A8C E8			    inx
  3217
  3218 				// set screen addres to the end of value
  3219 9A8D 8A			    txa
  3220 9A8E 18			    clc
  3221 9A8F 6D 1C A0		    adc scradr
  3222 9A92 8D 1C A0		    sta scradr
  3223 9A95 90 03		    bcc stop
  3224 9A97 EE 1D A0		    inc scradr+1
  3225
  3226 9A9A			stop:
  3227 9A9A 60			    rts
  3228
  3229 9A9B			_cnt
  3230 9A9B 00			    .by 0
  3231 9A9C			Pow10Tab
  3232 9A9C 10 27		    .wo 10000
  3233 9A9E E8 03		    .wo 1000
  3234 9AA0 64 00		    .wo 100
  3235 9AA2 0A 00		    .wo 10
  3236
  3237 				; ------------------------------------------------------------
  3238
  3239 = A022			VALUE	= DATAORIGIN+$01F2
  3240
  3241 = A022			@VarData	= VALUE
  3242 = 0002			@VarDataSize	= 2
  3243
  3244 9AA4			@exit
  3245 					.ifdef @new
  3246 					lda <@VarData
  3247 					sta :ztmp
  3248 					lda >@VarData
  3249 					ldy #@VarDataSize-1
  3250 					jmp @FreeMem
  3251 					els
  3252 9AA4 60				rts						; ret
  3253 					eif
  3254 				.endl
  3255
  3256 9AA5			.local	RESET_MIDI					; PROCEDURE
  3257
  3258 				; optimize OK (helpers.inc), line = 168
  3259
  3260 9AA5 AD 29 9E			lda GM_RESET
  3261 9AA8 8D 72 9F			sta MIDI_FIFO.FIFO_SEND.DATA
  3262 9AAB AD 2A 9E			lda GM_RESET+1
  3263 9AAE 8D 73 9F			sta MIDI_FIFO.FIFO_SEND.DATA+1
  3264 9AB1 A9 06			lda #$06
  3265 9AB3 8D 74 9F			sta MIDI_FIFO.FIFO_SEND.LEN
  3266 9AB6 20 26 8E			jsr MIDI_FIFO.FIFO_SEND
  3267 9AB9 20 6B 8E			jsr MIDI_FIFO.FIFO_FLUSH
  3268 9ABC			@exit
  3269 					.ifdef @new
  3270 					lda <@VarData
  3271 					sta :ztmp
  3272 					lda >@VarData
  3273 					ldy #@VarDataSize-1
  3274 					jmp @FreeMem
  3275 					els
  3276 9ABC 60				rts						; ret
  3277 					eif
  3278 				.endl
  3279
  3280 9ABD			.local	EXIT2DOS					; PROCEDURE
  3281
  3282 				; optimize OK (helpers.inc), line = 173
  3283
  3284 9ABD A9 00			lda #$00
  3285 9ABF 20 BB 99			jsr CIO.CLS
  3286 9AC2 A9 00			lda #$00
  3287 9AC4 8D C6 9F			sta CIO.OPN.CHN
  3288 9AC7 A9 0C			lda #$0C
  3289 9AC9 8D C7 9F			sta CIO.OPN.AX1
  3290 9ACC A9 00			lda #$00
  3291 9ACE 8D C8 9F			sta CIO.OPN.AX2
  3292 9AD1 A9 0F			lda #$0F
  3293 9AD3 8D C9 9F			sta CIO.OPN.DEVICE
  3294 9AD6 A9 80			lda #$80
  3295 9AD8 8D CA 9F			sta CIO.OPN.DEVICE+1
  3296 9ADB 20 7D 99			jsr CIO.OPN
  3297 9ADE A9 00			lda #$00
  3298 9AE0 4C 0E 9E			jmp @halt
  3299 9AE3			@exit
  3300 					.ifdef @new
  3301 					lda <@VarData
  3302 					sta :ztmp
  3303 					lda >@VarData
  3304 					ldy #@VarDataSize-1
  3305 					jmp @FreeMem
  3306 					els
  3307 9AE3 60				rts						; ret
  3308 					eif
  3309 				.endl
  3310
  3311 9AE4			.local	CLEARSTATUS					; PROCEDURE
  3312
  3313 				; optimize OK (MIDICar Player.pas), line = 31
  3314
  3315 9AE4 A9 80			lda #$80
  3316 9AE6 A0 27			ldy #$27
  3317 9AE8 99 18 38 88 10 FA		sta:rpl $3818,y-
  3318 9AEE			@exit
  3319 					.ifdef @new
  3320 					lda <@VarData
  3321 					sta :ztmp
  3322 					lda >@VarData
  3323 					ldy #@VarDataSize-1
  3324 					jmp @FreeMem
  3325 					els
  3326 9AEE 60				rts						; ret
  3327 					eif
  3328 				.endl
  3329
  3330 9AEF			.local	INIT						; PROCEDURE
  3331
  3332 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', MIDICar Player.pas), line = 41
  3333
  3334 9AEF 20 0A 8E			jsr MIDI_FIFO.FIFO_RESET
  3335
  3336 				; optimize OK (MIDICar Player.pas), line = 44
  3337
  3338 9AF2 A9 00			lda #$00
  3339 9AF4 85 88			sta SYSTEM.MOVE_00EC.SOURCE
  3340 9AF6 A9 E0			lda #$E0
  3341 9AF8 85 89			sta SYSTEM.MOVE_00EC.SOURCE+1
  3342 9AFA A9 00			lda #$00
  3343 9AFC 85 8C			sta SYSTEM.MOVE_00EC.DEST
  3344 9AFE A9 30			lda #$30
  3345 9B00 85 8D			sta SYSTEM.MOVE_00EC.DEST+1
  3346 9B02 A9 00			lda #$00
  3347 9B04 85 84			sta SYSTEM.MOVE_00EC.COUNT
  3348 9B06 A9 04			lda #$04
  3349 9B08 85 85			sta SYSTEM.MOVE_00EC.COUNT+1
  3350 9B0A				.local +MAIN.SYSTEM.MOVE_00EC
  3351 9B0A				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00EC.M@INLINE [Source: MIDICar Player.a65]
     4 9B0A 20 21 84			jsr @move
Source: MIDICar Player.a65
  3352 					.endl
  3353
  3354 				; optimize OK (MIDICar Player.pas), line = 45
  3355
  3356 9B0D A9 0F			lda #$0F
  3357 9B0F 8D C5 02			sta $02C5
  3358 9B12 A9 00			lda #$00
  3359 9B14 8D C6 02			sta $02C6
  3360
  3361 				; optimize OK (MIDICar Player.pas), line = 46
  3362
  3363 9B17 A9 30			lda #$30
  3364 9B19 8D F4 02			sta $02F4
  3365
  3366 				; optimize OK (MIDICar Player.pas), line = 47
  3367
  3368 9B1C 85 88			sta SYSTEM.FILLCHAR_00EB.A
  3369 9B1E A9 34			lda #$34
  3370 9B20 85 89			sta SYSTEM.FILLCHAR_00EB.A+1
  3371 9B22 A9 10			lda #$10
  3372 9B24 85 8C			sta SYSTEM.FILLCHAR_00EB.COUNT
  3373 9B26 A9 04			lda #$04
  3374 9B28 85 8D			sta SYSTEM.FILLCHAR_00EB.COUNT+1
  3375 9B2A A9 00			lda #$00
  3376 9B2C 85 84			sta SYSTEM.FILLCHAR_00EB.VALUE
  3377 9B2E				.local +MAIN.SYSTEM.FILLCHAR_00EB
  3378 9B2E				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_00EB.M@INLINE [Source: MIDICar Player.a65]
     4 9B2E 20 76 84			jsr @fill
Source: MIDICar Player.a65
  3379 					.endl
  3380
  3381 				; optimize OK (MIDICar Player.pas), line = 48
  3382
  3383 9B31 A9 00			lda #$00
  3384 9B33 8D 30 02			sta $0230
  3385 9B36 A9 34			lda #$34
  3386 9B38 8D 31 02			sta $0230+1
  3387
  3388 				; optimize OK (MIDICar Player.pas), line = 50
  3389
  3390 9B3B A9 80			lda #$80
  3391 9B3D A0 27			ldy #$27
  3392 9B3F 99 30 34 88 10 FA		sta:rpl $3430,y-
  3393
  3394 				; optimize OK (MIDICar Player.pas), line = 51
  3395
  3396 9B45 A9 31			lda #$31
  3397 9B47 8D 1C A0			sta SCRADR
  3398 9B4A A9 34			lda #$34
  3399 9B4C 8D 1D A0			sta SCRADR+1
  3400 9B4F A9 13			lda #$13
  3401 9B51 8D 1F A0			sta PUTTEXT.S
  3402 9B54 A9 80			lda #$80
  3403 9B56 8D 20 A0			sta PUTTEXT.S+1
  3404 9B59 20 DC 99			jsr PUTTEXT
  3405
  3406 				; optimize OK (MIDICar Player.pas), line = 52
  3407
  3408 9B5C A9 4F			lda #$4F
  3409 9B5E 8D 1C A0			sta SCRADR
  3410 9B61 A9 34			lda #$34
  3411 9B63 8D 1D A0			sta SCRADR+1
  3412 9B66 A9 27			lda #$27
  3413 9B68 8D 1F A0			sta PUTTEXT.S
  3414 9B6B A9 80			lda #$80
  3415 9B6D 8D 20 A0			sta PUTTEXT.S+1
  3416 9B70 20 DC 99			jsr PUTTEXT
  3417
  3418 				; optimize FAIL ('CLEARSTATUS', MIDICar Player.pas), line = 53
  3419
  3420 9B73 20 E4 9A			jsr CLEARSTATUS
  3421
  3422 				; optimize FAIL ('MISC.DETECTMEM', MIDICar Player.pas), line = 56
  3423
  3424 9B76 20 D7 98			jsr MISC.DETECTMEM
  3425 9B79 E8				inx
  3426 9B7A AD C5 9F			lda MISC.DETECTMEM.RESULT
  3427 9B7D 0A 0A 0A 0A			:4 asl @
  3428 9B81 8D 24 A0			sta TOTALXMS
  3429 9B84 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  3430 9B86 8D 25 A0			sta TOTALXMS+1
  3431 9B89 CA				dex
  3432
  3433 				; -------------------  ASM Block 00000099  -------------------
  3434
  3435 				 lda #$fe \ sta $100 
  3435 9B8A A9 FE		 LDA #$FE 
  3435 9B8C 8D 00 01		 STA $100 
  3436 				; optimize OK (MIDICar Player.pas), line = 60
  3437
  3438 9B8F A9 00			lda #$00
  3439 9B91 8D D3 98			sta MIDFILES.MIDTRACKS
  3440 9B94 A9 3E			lda #$3E
  3441 9B96 8D D4 98			sta MIDFILES.MIDTRACKS+1
  3442
  3443 				; optimize OK (MIDICar Player.pas), line = 61
  3444
  3445 9B99 A9 00			lda #$00
  3446 9B9B 8D 77 9F			sta MIDFILES.MIDDATA
  3447 9B9E A9 40			lda #$40
  3448 9BA0 8D 78 9F			sta MIDFILES.MIDDATA+1
  3449
  3450 				; optimize OK (MIDICar Player.pas), line = 63
  3451
  3452 9BA3 A9 00			lda #$00
  3453 9BA5 8D 8C 9F			sta MIDFILES.CTRK
  3454
  3455 9BA8			l_083F
  3456 				; --- ForToDoCondition
  3457 9BA8 AD 8C 9F			lda MIDFILES.CTRK
  3458 9BAB C9 28			cmp #$28
  3459 9BAD 90 03 4C 34 9C		jcs l_084D
  3460
  3461 				; optimize OK (MIDICar Player.pas), line = 65
  3462
  3463 9BB2 4A				lsr @
  3464 9BB3 4A				lsr @
  3465 9BB4 85 84			sta :eax
  3466 9BB6 4A				lsr @
  3467 9BB7 65 84			adc :eax
  3468 9BB9 6A				ror @
  3469 9BBA 4A				lsr @
  3470 9BBB 4A				lsr @
  3471 9BBC 65 84			adc :eax
  3472 9BBE 6A				ror @
  3473 9BBF 65 84			adc :eax
  3474 9BC1 6A				ror @
  3475 9BC2 4A				lsr @
  3476 9BC3 4A				lsr @
  3477 9BC4 8D 26 A0			sta X
  3478 9BC7 AD 8C 9F			lda MIDFILES.CTRK
  3479 9BCA 85 84			sta :al
  3480 9BCC A9 14			lda #$14
  3481 9BCE 85 8C			sta :cl
  3482 9BD0 20 1D 85			jsr idivAL_CL.MOD
  3483 9BD3 A5 90			lda :ztmp8
  3484 9BD5 8D 27 A0			sta Y
  3485
  3486 				; optimize OK (MIDICar Player.pas), line = 66
  3487
  3488 9BD8 AD 8C 9F			lda MIDFILES.CTRK
  3489 9BDB 85 9D			sta :STACKORIGIN+9
  3490 9BDD A9 00			lda #$00
  3491 9BDF 06 9D			asl :STACKORIGIN+9
  3492 9BE1 2A				rol @
  3493 9BE2 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3494 9BE4 A9 D0			lda #$D0
  3495 9BE6 85 9E			sta :STACKORIGIN+10
  3496 9BE8 A9 34			lda #$34
  3497 9BEA 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3498 9BEC A9 14			lda #$14
  3499 9BEE 85 8C			sta :ecx
  3500 9BF0 AD 26 A0			lda X
  3501 9BF3 85 84			sta :eax
  3502 					.ifdef fmulinit
  3503 					fmulu_8
  3504 					els
  3505 9BF5 20 05 85			imulCL
  3506 					eif
  3507 9BF8 A5 9E			lda :STACKORIGIN+10
  3508 9BFA 18 65 84			add :eax
  3509 9BFD 85 9E			sta :STACKORIGIN+10
  3510 9BFF A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  3511 9C01 65 85			adc :eax+1
  3512 9C03 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3513 9C05 AD 27 A0			lda Y
  3514 9C08 20 C4 8A			jsr @mul40
  3515 9C0B 18 65 9E			add :STACKORIGIN+10
  3516 9C0E 85 9E			sta :STACKORIGIN+10
  3517 9C10 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  3518 9C12 65 85			adc :eax+1
  3519 9C14 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3520 9C16 A5 9D			lda :STACKORIGIN+9
  3521 9C18 18 69 00			add #$00
  3522 9C1B A8				tay
  3523 9C1C A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  3524 9C1E 69 00			adc #$00
  3525 9C20 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3526 9C22 A5 9E			lda :STACKORIGIN+10
  3527 9C24 99 CC 9F			sta adr.CHPTR,y
  3528 9C27 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  3529 9C29 99 CD 9F			sta adr.CHPTR+1,y
  3530
  3531 				; --- ForToDoEpilog
  3532 9C2C EE 8C 9F			inc MIDFILES.CTRK
  3533 9C2F F0 03 4C A8 9B		jne l_083F
  3534 9C34			l_084D
  3535
  3536 				; ------------------------------------------------------------
  3537
  3538 = A024			TOTALXMS	= DATAORIGIN+$01F4
  3539 = A026			X	= DATAORIGIN+$01F6
  3540 = A027			Y	= DATAORIGIN+$01F7
  3541
  3542 = A024			@VarData	= TOTALXMS
  3543 = 0004			@VarDataSize	= 4
  3544
  3545 9C34			@exit
  3546 					.ifdef @new
  3547 					lda <@VarData
  3548 					sta :ztmp
  3549 					lda >@VarData
  3550 					ldy #@VarDataSize-1
  3551 					jmp @FreeMem
  3552 					els
  3553 9C34 60				rts						; ret
  3554 					eif
  3555 				.endl
  3556
  3557 9C35			.local	LOADPRC						; PROCEDURE
  3558 9C35 8D 28 A0			sta V
  3559
  3560 				; optimize OK (MIDICar Player.pas), line = 75
  3561
  3562 9C38 A9 22			lda #$22
  3563 9C3A 8D 1C A0			sta SCRADR
  3564 9C3D A9 38			lda #$38
  3565 9C3F 8D 1D A0			sta SCRADR+1
  3566
  3567 				; optimize OK (MIDICar Player.pas), line = 76
  3568
  3569 9C42 AD 28 A0			lda V
  3570 9C45 38 E9 01			sub #$01
  3571 9C48 8D 22 A0			sta PUTINT.VALUE
  3572 9C4B A9 00			lda #$00
  3573 9C4D E9 00			sbc #$00
  3574 9C4F 8D 23 A0			sta PUTINT.VALUE+1
  3575 9C52 20 25 9A			jsr PUTINT
  3576 9C55 AC 1D A0			ldy SCRADR+1
  3577 9C58 84 81			sty :bp+1
  3578 9C5A AC 1C A0			ldy SCRADR
  3579 9C5D A9 8F			lda #$8F
  3580 9C5F 91 80			sta (:bp),y
  3581 9C61 EE 1C A0			inc SCRADR
  3582 9C64 D0 03			sne
  3583 9C66 EE 1D A0			inc SCRADR+1
  3584
  3585 				; optimize OK (MIDICar Player.pas), line = 77
  3586
  3587 9C69 AD 7B 9F			lda MIDFILES.TOTALTRACKS
  3588 9C6C 8D 22 A0			sta PUTINT.VALUE
  3589 9C6F A9 00			lda #$00
  3590 9C71 8D 23 A0			sta PUTINT.VALUE+1
  3591 9C74 20 25 9A			jsr PUTINT
  3592
  3593 				; ------------------------------------------------------------
  3594
  3595 = A028			V	= DATAORIGIN+$01F8
  3596 = A029			I	= DATAORIGIN+$01F9
  3597
  3598 = A028			@VarData	= V
  3599 = 0002			@VarDataSize	= 2
  3600
  3601 9C77			@exit
  3602 					.ifdef @new
  3603 					lda <@VarData
  3604 					sta :ztmp
  3605 					lda >@VarData
  3606 					ldy #@VarDataSize-1
  3607 					jmp @FreeMem
  3608 					els
  3609 9C77 60				rts						; ret
  3610 					eif
  3611 				.endl
  3612
  3613 9C78			.local	CHECKPARAMS					; PROCEDURE
  3614
  3615 				; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 86
  3616
  3617 9C78 20 D9 8D			jsr SYSTEM.PARAMCOUNT
  3618 9C7B AD 4E 9F			lda SYSTEM.PARAMCOUNT.RESULT
  3619 9C7E C9 01			cmp #$01
  3620 9C80 F0 03 4C 42 9D		jne l_08C0
  3621 				@
  3622
  3623 				; optimize OK (MIDICar Player.pas), line = 88
  3624
  3625 9C85 A9 01			lda #$01
  3626 9C87 20 E2 8D			jsr SYSTEM.PARAMSTR
  3627 9C8A AD F7 8D			lda SYSTEM.PARAMSTR.RESULT
  3628 9C8D 8D 2A A0			sta FN
  3629 9C90 AD F8 8D			lda SYSTEM.PARAMSTR.RESULT+1
  3630 9C93 8D 2B A0			sta FN+1
  3631
  3632 				; optimize OK (MIDICar Player.pas), line = 89
  3633
  3634 9C96 A9 19			lda #$19
  3635 9C98 8D 1C A0			sta SCRADR
  3636 9C9B A9 38			lda #$38
  3637 9C9D 8D 1D A0			sta SCRADR+1
  3638 9CA0 A9 31			lda #$31
  3639 9CA2 8D 1F A0			sta PUTTEXT.S
  3640 9CA5 A9 80			lda #$80
  3641 9CA7 8D 20 A0			sta PUTTEXT.S+1
  3642 9CAA 20 DC 99			jsr PUTTEXT
  3643
  3644 				; optimize OK (MIDICar Player.pas), line = 90
  3645
  3646 9CAD A9 80			lda #$80
  3647 9CAF 8D 1E A0			sta PUTTEXTINVERT
  3648
  3649 				; optimize OK (MIDICar Player.pas), line = 91
  3650
  3651 9CB2 A9 35			lda <LOADPRC
  3652 9CB4 8D 8E 9F			sta MIDFILES.LOADPROCESS
  3653 9CB7 A9 9C			lda >LOADPRC
  3654 9CB9 8D 8F 9F			sta MIDFILES.LOADPROCESS+1
  3655
  3656 				; optimize OK (MIDICar Player.pas), line = 92
  3657
  3658 9CBC AD 2A A0			lda FN
  3659 9CBF 8D 90 9F			sta MIDFILES.LOADMID.FN
  3660 9CC2 AD 2B A0			lda FN+1
  3661 9CC5 8D 91 9F			sta MIDFILES.LOADMID.FN+1
  3662 9CC8 20 EB 8E			jsr MIDFILES.LOADMID
  3663 9CCB AD 92 9F			lda MIDFILES.LOADMID.RESULT
  3664 9CCE 8D 2C A0			sta ERR
  3665
  3666 				; optimize OK (MIDICar Player.pas), line = 93
  3667
  3668 9CD1 F0 6C			jeq l_08EB
  3669
  3670 				; optimize OK (MIDICar Player.pas), line = 95
  3671
  3672 9CD3 A9 19			lda #$19
  3673 9CD5 8D 1C A0			sta SCRADR
  3674 9CD8 A9 38			lda #$38
  3675 9CDA 8D 1D A0			sta SCRADR+1
  3676
  3677 				; optimize OK (MIDICar Player.pas), line = 96
  3678
  3679 9CDD AD 2C A0			lda ERR
  3680 9CE0 30 30			jmi l_0902
  3681 9CE2 F0 2E			jeq l_0902
  3682
  3683 				; optimize OK (MIDICar Player.pas), line = 97
  3684
  3685 9CE4 AD 2C A0			lda ERR
  3686 9CE7 8D 2D A0			sta @CASETMP_0005
  3687 9CEA C9 64			cmp #$64
  3688 9CEC D0 10			jne l_090E
  3689 				@
  3690
  3691 				; optimize OK (MIDICar Player.pas), line = 98
  3692
  3693 9CEE A9 3A			lda #$3A
  3694 9CF0 8D 1F A0			sta PUTTEXT.S
  3695 9CF3 A9 80			lda #$80
  3696 9CF5 8D 20 A0			sta PUTTEXT.S+1
  3697 9CF8 20 DC 99			jsr PUTTEXT
  3698
  3699 9CFB 4C 0F 9D			jmp a_0005
  3700 9CFE			l_090E
  3701 9CFE C9 65			cmp #$65
  3702 9D00 D0 0D			jne l_0919
  3703 				@
  3704
  3705 				; optimize OK (MIDICar Player.pas), line = 99
  3706
  3707 9D02 A9 4E			lda #$4E
  3708 9D04 8D 1F A0			sta PUTTEXT.S
  3709 9D07 A9 80			lda #$80
  3710 9D09 8D 20 A0			sta PUTTEXT.S+1
  3711 9D0C 20 DC 99			jsr PUTTEXT
  3712
  3713 9D0F			l_0919
  3714 9D0F			a_0005
  3715 9D0F 4C 30 9D			jmp l_092A
  3716 9D12			l_0902
  3717
  3718 				; optimize OK (MIDICar Player.pas), line = 103
  3719
  3720 9D12 A9 62			lda #$62
  3721 9D14 8D 1F A0			sta PUTTEXT.S
  3722 9D17 A9 80			lda #$80
  3723 9D19 8D 20 A0			sta PUTTEXT.S+1
  3724 9D1C 20 DC 99			jsr PUTTEXT
  3725 9D1F A0 00			ldy #$00
  3726 9D21 AD 2C A0			lda ERR
  3727 9D24 10 01			spl
  3728 9D26 88				dey
  3729 9D27 8C 23 A0			sty PUTINT.VALUE+1
  3730 9D2A 8D 22 A0			sta PUTINT.VALUE
  3731 9D2D 20 25 9A			jsr PUTINT
  3732 9D30			l_092A
  3733
  3734 				; --- WhileProlog
  3735 9D30			l_0933
  3736
  3737 				; optimize OK (MIDICar Player.pas), line = 105
  3738
  3739 9D30 AD FC 02			lda KEYB
  3740 9D33 C9 FF			cmp #$FF
  3741 9D35 F0 F9			jeq l_0933
  3742
  3743 				; optimize OK (MIDICar Player.pas), line = 106
  3744
  3745 9D37 A9 FF			lda #$FF
  3746 9D39 8D FC 02			sta KEYB
  3747
  3748 				; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 107
  3749
  3750 9D3C 20 BD 9A			jsr EXIT2DOS
  3751 9D3F			l_08EB
  3752 9D3F 4C 47 9D			jmp l_094F
  3753 9D42			l_08C0
  3754
  3755 				; optimize OK (MIDICar Player.pas), line = 112
  3756
  3757 9D42 A9 01			lda #$01
  3758 9D44 8D 7B 9F			sta MIDFILES.TOTALTRACKS
  3759 9D47			l_094F
  3760
  3761 				; ------------------------------------------------------------
  3762
  3763 = A02A			FN	= DATAORIGIN+$01FA
  3764 = A02C			ERR	= DATAORIGIN+$01FC
  3765 = A02D			@CASETMP_0005	= DATAORIGIN+$01FD
  3766
  3767 = A02A			@VarData	= FN
  3768 = 0004			@VarDataSize	= 4
  3769
  3770 9D47			@exit
  3771 					.ifdef @new
  3772 					lda <@VarData
  3773 					sta :ztmp
  3774 					lda >@VarData
  3775 					ldy #@VarDataSize-1
  3776 					jmp @FreeMem
  3777 					els
  3778 9D47 60				rts						; ret
  3779 					eif
  3780 				.endl
  3781 9D48			l_0088
  3782
  3783 				; optimize FAIL ('INIT', MIDICar Player.pas), line = 117
  3784
  3785 9D48 20 EF 9A			jsr INIT
  3786
  3787 				; optimize FAIL ('CHECKPARAMS', MIDICar Player.pas), line = 118
  3788
  3789 9D4B 20 78 9C			jsr CHECKPARAMS
  3790
  3791 				; optimize FAIL ('CLEARSTATUS', MIDICar Player.pas), line = 121
  3792
  3793 9D4E 20 E4 9A			jsr CLEARSTATUS
  3794
  3795 				; optimize OK (MIDICar Player.pas), line = 122
  3796
  3797 9D51 A9 19			lda #$19
  3798 9D53 8D 1C A0			sta SCRADR
  3799 9D56 A9 38			lda #$38
  3800 9D58 8D 1D A0			sta SCRADR+1
  3801 9D5B A9 6F			lda #$6F
  3802 9D5D 8D 1F A0			sta PUTTEXT.S
  3803 9D60 A9 80			lda #$80
  3804 9D62 8D 20 A0			sta PUTTEXT.S+1
  3805 9D65 20 DC 99			jsr PUTTEXT
  3806
  3807 				; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 125
  3808
  3809 9D68 20 FD 8D			jsr MC6850.MC6850_RESET
  3810
  3811 				; optimize OK (MIDICar Player.pas), line = 126
  3812
  3813 9D6B A9 96			lda #$96
  3814 9D6D 20 03 8E			jsr MC6850.MC6850_INIT
  3815
  3816 				; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 131
  3817
  3818 9D70 20 A5 9A			jsr RESET_MIDI
  3819
  3820 				; optimize OK (MIDICar Player.pas), line = 132
  3821
  3822 9D73 A9 00			lda #$00
  3823 9D75 85 F0			sta MIDFILES._TOTALTICKS
  3824 9D77 85 F1			sta MIDFILES._TOTALTICKS+1
  3825 9D79 85 F2			sta MIDFILES._TOTALTICKS+2
  3826 9D7B 85 F3			sta MIDFILES._TOTALTICKS+3
  3827
  3828 				; optimize FAIL ('MIDFILES.SETTEMPO', MIDICar Player.pas), line = 133
  3829
  3830 9D7D 20 C4 96			jsr MIDFILES.SETTEMPO
  3831
  3832 				; optimize OK (MIDICar Player.pas), line = 137
  3833
  3834 9D80 AD 7B 9F			lda MIDFILES.TOTALTRACKS
  3835 9D83 8D 8C 9F			sta MIDFILES.CTRK
  3836
  3837 				; --- RepeatUntilProlog
  3838 9D86			l_096D
  3839
  3840 				; optimize FAIL ('MIDFILES.PROCESSMIDI', MIDICar Player.pas), line = 140
  3841
  3842 9D86 20 25 96			jsr MIDFILES.PROCESSMIDI
  3843
  3844 				; optimize FAIL ('m@INLINE', MIDICar Player.pas), line = 148
  3845
  3846 9D89				.local +MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850
  3847 9D89				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.M@INLINE [Source: MIDICar Player.a65]
     4 9D89 AD 00 D5			lda MC6850.MC6850_CNTRREG
     5 9D8C 29 02			and #$02
     6 9D8E F0 0E			jeq l_0189
    10 9D90 A4 FE			ldy FIFO_TAIL
    11 9D92 C4 FD			cpy FIFO_HEAD
    12 9D94 F0 08			jeq l_019E
    16 9D96 B9 00 06			lda adr.FIFO_BUF,y
    17 9D99 8D 01 D5			sta MC6850.MC6850_BUFFER
    21 9D9C E6 FE			inc FIFO_TAIL
    22 9D9E			l_019E
    23 9D9E			l_0189
Source: MIDICar Player.a65
  3848 					.endl
  3849
  3850 				; optimize OK (MIDICar Player.pas), line = 151
  3851
  3852 9D9E AD FC 02			lda KEYB
  3853 9DA1 C9 FF			cmp #$FF
  3854 9DA3 F0 47			jeq l_0981
  3855
  3856 				; optimize OK (MIDICar Player.pas), line = 153
  3857
  3858 9DA5 8D 2E A0			sta @CASETMP_0006
  3859 9DA8 C9 1C			cmp #$1C
  3860 9DAA D0 06			jne l_098D
  3861 				@
  3862 9DAC 4C F1 9D			jmp b_096D					; break
  3863
  3864 9DAF 4C E7 9D			jmp a_0006
  3865 9DB2			l_098D
  3866 9DB2 C9 0A			cmp #$0A
  3867 9DB4 D0 31			jne l_0996
  3868 				@
  3869
  3870 				; optimize OK (MIDICar Player.pas), line = 157
  3871
  3872 9DB6 A5 F5			lda MIDFILES._TIMERSTATUS
  3873 9DB8 49 80			eor #$80
  3874 9DBA 85 F5			sta MIDFILES._TIMERSTATUS
  3875
  3876 				; optimize OK (MIDICar Player.pas), line = 158
  3877
  3878 9DBC A9 19			lda #$19
  3879 9DBE 8D 1C A0			sta SCRADR
  3880 9DC1 A9 38			lda #$38
  3881 9DC3 8D 1D A0			sta SCRADR+1
  3882
  3883 				; optimize OK (MIDICar Player.pas), line = 159
  3884
  3885 9DC6 A5 F5			lda MIDFILES._TIMERSTATUS
  3886 9DC8 30 10			jmi l_09BA
  3887
  3888 				; optimize OK (MIDICar Player.pas), line = 160
  3889
  3890 9DCA A9 6F			lda #$6F
  3891 9DCC 8D 1F A0			sta PUTTEXT.S
  3892 9DCF A9 80			lda #$80
  3893 9DD1 8D 20 A0			sta PUTTEXT.S+1
  3894 9DD4 20 DC 99			jsr PUTTEXT
  3895 9DD7 4C E7 9D			jmp l_09C6
  3896 9DDA			l_09BA
  3897
  3898 				; optimize OK (MIDICar Player.pas), line = 162
  3899
  3900 9DDA A9 78			lda #$78
  3901 9DDC 8D 1F A0			sta PUTTEXT.S
  3902 9DDF A9 80			lda #$80
  3903 9DE1 8D 20 A0			sta PUTTEXT.S+1
  3904 9DE4 20 DC 99			jsr PUTTEXT
  3905 9DE7			l_09C6
  3906
  3907 9DE7			l_0996
  3908 9DE7			a_0006
  3909
  3910 				; optimize OK (MIDICar Player.pas), line = 165
  3911
  3912 9DE7 A9 FF			lda #$FF
  3913 9DE9 8D FC 02			sta KEYB
  3914 9DEC			l_0981
  3915
  3916 				; optimize OK (MIDICar Player.pas), line = 167
  3917
  3918 9DEC AD 8D 9F			lda MIDFILES.PLAYINGTRACKS
  3919 9DEF D0 95			jne l_096D
  3920 9DF1			b_096D
  3921
  3922 				; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 176
  3923
  3924 9DF1 20 A5 9A			jsr RESET_MIDI
  3925
  3926 				; optimize OK (MIDICar Player.pas), line = 182
  3927
  3928 9DF4 78				sei
  3929 9DF5 AD 82 9F 8D 10 02		mva MIDFILES.OLDTIMERVEC VTIMR1
  3930 9DFB AD 83 9F 8D 11 02		mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
  3931 9E01 A5 10			lda irqens
  3932 9E03 29 FE			and #$fe
  3933 9E05 85 10			sta irqens
  3934 9E07 8D 0E D2			sta irqen
  3935 9E0A 58				cli
  3936
  3937 				; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 183
  3938
  3939 9E0B 20 BD 9A			jsr EXIT2DOS
  3940
  3941 				; ------------------------------------------------------------
  3942
  3943 = 3400			DLIST_ADDR	= $3400
  3944 = 3430			SCREEN_ADDR	= $3430
  3945 = 3818			SCREEN_STATUS	= $3818
  3946 = 3E00			TRACK_DATA_ADDR	= $3E00
  3947 = 4000			MIDI_DATA_ADDR	= $4000
  3948 = 0023			FREE_MEM	= $23
  3949 = 9FCC			adr.CHPTR	= [DATAORIGIN+$019C] .array [40] .word
  3950 9E0E			.var CHPTR	= adr.CHPTR .word
  3951 = A01C			SCRADR	= DATAORIGIN+$01EC
  3952 = 8081			adr.GM_RESET	= CODEORIGIN+$0081
  3953 9E0E			.var GM_RESET	= adr.GM_RESET .word
  3954 = 8087			adr.HEX	= CODEORIGIN+$0087
  3955 9E0E			.var HEX	= adr.HEX .word
  3956 = 001C			K_ESC	= $1C
  3957 = 0021			K_SPACE	= $21
  3958 = 000A			K_P	= $0A
  3959 = 02FC			KEYB	= $02FC
  3960 = A01E			PUTTEXTINVERT	= DATAORIGIN+$01EE
  3961 = A02E			@CASETMP_0006	= DATAORIGIN+$01FE
  3962 9E0E			@exit
  3963
  3964 9E0E A2 00		@halt	ldx #$00
  3965 9E10 9A				txs
  3966 					.ifdef MAIN.@DEFINES.ROMOFF
  3967 9E11 EE 01 D3			inc portb
  3968 					.fi
  3969
  3970 9E14 A0 01			ldy #$01
  3971
  3972 9E16 60				rts
  3973
  3974 				; ------------------------------------------------------------
  3975
  3976 9E17 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  3977
  3978 				; ------------------------------------------------------------
  3979
  3980 9E27			.local	@DEFINES
  3981 9E27			ATARI
  3982 9E27			USE_FIFO
  3983 9E27			ROMOFF
  3984 				.endl
  3985
  3986 9E27			.local	@RESOURCE
  3987 				.endl
  3988
  3989 = 9E27 CC 9F		CHPTR
  3989 = 9E29 81 80		GM_RESET
  3989 = 9E2B 87 80		HEX
  3989 				.endl							; MAIN
  3990
  3991 				; ------------------------------------------------------------
  3992 				; ------------------------------------------------------------
  3993
  3994 				.macro	UNITINITIALIZATION
  3995 				
  3996 					.ifdef MAIN.SYSTEM.@UnitInit
  3997 					jsr MAIN.SYSTEM.@UnitInit
  3998 					.fi
  3999 				
  4000 					.ifdef MAIN.MC6850.@UnitInit
  4001 					jsr MAIN.MC6850.@UnitInit
  4002 					.fi
  4003 				
  4004 					.ifdef MAIN.DOS.@UnitInit
  4005 					jsr MAIN.DOS.@UnitInit
  4006 					.fi
  4007 				
  4008 					.ifdef MAIN.STRUTILS.@UnitInit
  4009 					jsr MAIN.STRUTILS.@UnitInit
  4010 					.fi
  4011 				
  4012 					.ifdef MAIN.SYSUTILS.@UnitInit
  4013 					jsr MAIN.SYSUTILS.@UnitInit
  4014 					.fi
  4015 				
  4016 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  4017 					jsr MAIN.MIDI_FIFO.@UnitInit
  4018 					.fi
  4019 				
  4020 					.ifdef MAIN.MIDFILES.@UnitInit
  4021 					jsr MAIN.MIDFILES.@UnitInit
  4022 					.fi
  4023 				
  4024 					.ifdef MAIN.MISC.@UnitInit
  4025 					jsr MAIN.MISC.@UnitInit
  4026 					.fi
  4027 				
  4028 					.ifdef MAIN.CIO.@UnitInit
  4029 					jsr MAIN.CIO.@UnitInit
  4030 					.fi
  4031 				.endm
  4032
  4033 				; ------------------------------------------------------------
  4034
  4035 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4036 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4036 				SYSTEM: $8C52..$8DFC
  4037 					eif
  4038
  4039 					ift .SIZEOF(MAIN.MC6850) > 0
  4040 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  4040 				MC6850: $8DFD..$8E09
  4041 					eif
  4042
  4043 					ift .SIZEOF(MAIN.DOS) > 0
  4044 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  4045 					eif
  4046
  4047 					ift .SIZEOF(MAIN.STRUTILS) > 0
  4048 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  4049 					eif
  4050
  4051 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  4052 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  4053 					eif
  4054
  4055 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  4056 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  4056 				MIDI_FIFO: $8E0A..$8E87
  4057 					eif
  4058
  4059 					ift .SIZEOF(MAIN.MIDFILES) > 0
  4060 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  4060 				MIDFILES: $8E88..$98D6
  4061 					eif
  4062
  4063 					ift .SIZEOF(MAIN.MISC) > 0
  4064 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  4064 				MISC: $98D7..$997C
  4065 					eif
  4066
  4067 					ift .SIZEOF(MAIN.CIO) > 0
  4068 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  4068 				CIO: $997D..$99DB
  4069 					eif
  4070
  4071 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4071 				CODE: $8000..$9E26
  4072
  4073 				; ------------------------------------------------------------
  4074
  4075 9E2D				.align $0004
  4076
  4077 9E30			DATAORIGIN
  4078 9E30-9E35> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  4079
  4080 = 0006			VARINITSIZE	= *-DATAORIGIN
  4081 = 01FF			VARDATASIZE	= 511
  4082
  4083 = A02F			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4084
  4085 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4085 				DATA: $9E30..$A02F
  4086
  4087 02E0-02E1> AB 8B			run START
  4088
  4089 				; ------------------------------------------------------------
  4090
  4091 				.macro	STATICDATA
  4092 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $02  $45 $3A $00 $12 $AD $A9 $A4 $A9
  4093 				.by  $A3 $E1 $F2 $80 $B0 $EC $E1 $F9  $E5 $F2 $80 $B2 $A3 $91 $00 $08  $92 $90 $92 $92 $80 $A7 $B3 $A4
  4094 				.by  $00 $07 $AC $EF $E1 $E4 $E9 $EE  $E7 $00 $12 $B5 $EE $F3 $F5 $F0  $F0 $EF $F2 $F4 $E5 $E4 $80 $E6
  4095 				.by  $EF $F2 $ED $E1 $F4 $00 $12 $AE  $EF $F4 $80 $E5 $EE $EF $F5 $E7  $E8 $F4 $80 $ED $E5 $ED $EF $F2
  4096 				.by  $F9 $00 $0B $A9 $8F $AF $80 $A5  $F2 $F2 $EF $F2 $80 $83 $00 $07  $B0 $EC $E1 $F9 $E9 $EE $E7 $00
  4097 				.by  $07 $B0 $E1 $F5 $F3 $E5 $80 $80  $00 $F0 $7E $7F $09 $01 $F7 $10  $11 $12 $13 $14 $15 $16 $17 $18
  4098 				.by  $19 $61 $62 $63 $64 $65 $66
  4099 				.endm
  4100
  4101 					end
