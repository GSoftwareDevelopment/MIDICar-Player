mads 2.1.6
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 8000			CODEORIGIN	= $8000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				.local	RESOURCE
   105 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1142 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 8075				RCDATA 'resources/font_s.fnt' CHARS_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('resources/font_s.fnt')-0
    28 8075				org main.CHARS_ADDR
    30 3000-33FF> 00 00 00 00 + 	ins 'resources/font_s.fnt',0
    32 					.print '$R RCDATA  ',main.CHARS_ADDR,'..',*-1," 'resources/font_s.fnt'"
    32 				$R RCDATA  $3000..$33FF 'resources/font_s.fnt'
Source: MIDICar Player.a65
   110 3400				RCASM 'resources/dlist.asm' DLIST_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 3400				org RESORIGIN
     4 = 0044			len = .sizeof(_DLIST_ADDR)
     6 				mcpy	ift main.DLIST_ADDR+len >= $bc20
    11 8075-80D9> 20 41 80		jsr sys.off
    13 8078 A9 96 85 88 A9 80 +  MWA #DATA EDX
    13 8080 A9 00 85 8C A9 34 +  MWA #MAIN.DLIST_ADDR ECX
    13 8088 A9 44 85 84 A9 00 +  MWA #LEN EAX
    13 8090 20 00 80		 JSR RESOURCE.MEMCPY
    15 8093 4C 65 80			jmp sys.on
    16 8096			data
Source: dlist.inc
     1 = 0000			DL_BLANK1 = 0; // 1 blank line
     2 = 0010			DL_BLANK2 = %00010000; // 2 blank lines
     3 = 0020			DL_BLANK3 = %00100000; // 3 blank lines
     4 = 0030			DL_BLANK4 = %00110000; // 4 blank lines
     5 = 0040			DL_BLANK5 = %01000000; // 5 blank lines
     6 = 0050			DL_BLANK6 = %01010000; // 6 blank lines
     7 = 0060			DL_BLANK7 = %01100000; // 7 blank lines
     8 = 0070			DL_BLANK8 = %01110000; // 8 blank lines
    10 = 0080			DL_DLI = %10000000; // Order to run DLI
    11 = 0040			DL_LMS = %01000000; // Order to set new memory address
    12 = 0020			DL_VSCROLL = %00100000; // Turn on vertical scroll on this line
    13 = 0010			DL_HSCROLL = %00010000; // Turn on horizontal scroll on this line
    15 = 0002			DL_MODE_40x24T2 = 2; // Antic Modes
    16 = 0004			DL_MODE_40x24T5 = 4;
    17 = 0005			DL_MODE_40x12T5 = 5;
    18 = 0006			DL_MODE_20x24T5 = 6;
    19 = 0007			DL_MODE_20x12T5 = 7;
    20 = 0008			DL_MODE_40x24G4 = 8;
    21 = 0009			DL_MODE_80x48G2 = 9;
    22 = 000A			DL_MODE_80x48G4 = $A;
    23 = 000B			DL_MODE_160x96G2 = $B;
    24 = 000C			DL_MODE_160x192G2 = $C;
    25 = 000D			DL_MODE_160x96G4 = $D;
    26 = 000E			DL_MODE_160x192G4 = $E;
    27 = 000F			DL_MODE_320x192G2 = $F;
    29 = 0001			DL_JMP = %00000001; // Order to jump
    30 = 0041			DL_JVB = %01000001; // Jump to begining
     3 3400			dl_start
     4 3400 70 70		    :2  dta DL_BLANK8
     6 3402 4F 48 34		        dta DL_MODE_320x192G2 + DL_LMS, A(MAIN.SCREEN_ADDR);
     7 3405 0F 0F 0F 0F 0F 0F +     :18 dta DL_MODE_320x192G2
     9 3417 00			        dta DL_BLANK1
    11 3418 02 02 02 02 02 02 +     :17 dta DL_MODE_40x24T2
    13 3429 07			        dta DL_MODE_20x12T5
    14 342A 00			        dta DL_BLANK1
    15 342B 02			        dta DL_MODE_40x24T2
    17 342C 00			        dta DL_BLANK1
    18 342D 0F 0F 0F 0F 0F 0F +     :20 dta DL_MODE_320x192G2
    20 3441 41 00 34		        dta DL_JVB, A(dl_start)
    23 					.print '$R RCASM   ',main.DLIST_ADDR,'..',main.DLIST_ADDR+len-1," 'resources/dlist.asm'"
    23 				$R RCASM   $3400..$3443 'resources/dlist.asm'
    25 02E2-02E3> 75 80			ini mcpy
Source: MIDICar Player.a65
   111 80DA				RCDATA 'resources/header-gr8.obj' SCREEN_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 02F8			len = .filesize('resources/header-gr8.obj')-0
    28 80DA				org main.SCREEN_ADDR
    30 3448-373F> 07 FF FF FF + 	ins 'resources/header-gr8.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_ADDR,'..',*-1," 'resources/header-gr8.obj'"
    32 				$R RCDATA  $3448..$373F 'resources/header-gr8.obj'
Source: MIDICar Player.a65
   112 3740				RCDATA 'resources/footer-gr8-2.obj' SCREEN_FOOT 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0320			len = .filesize('resources/footer-gr8-2.obj')-0
    28 3740				org main.SCREEN_FOOT
    30 3A24-3D43> 00 00 00 00 + 	ins 'resources/footer-gr8-2.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_FOOT,'..',*-1," 'resources/footer-gr8-2.obj'"
    32 				$R RCDATA  $3A24..$3D43 'resources/footer-gr8-2.obj'
Source: MIDICar Player.a65
   113 3D44				RCDATA 'resources/uvmeter.obj' UVMETER_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0040			len = .filesize('resources/uvmeter.obj')-0
    28 3D44				org main.UVMETER_ADDR
    30 2BC0-2BFF> 41 41 41 41 + 	ins 'resources/uvmeter.obj',0
    32 					.print '$R RCDATA  ',main.UVMETER_ADDR,'..',*-1," 'resources/uvmeter.obj'"
    32 				$R RCDATA  $2BC0..$2BFF 'resources/uvmeter.obj'
Source: MIDICar Player.a65
   114 				.endl
   115
   116 				; ------------------------------------------------------------
   117
   118 2C00				org CODEORIGIN
   119
   120 8000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 8000-9E58> 00 00 02 3E + .by  $00 $00 $02 $3E $3F $00 $02 $00  $00 $00 $02 $45 $3A $00 $03 $3B  $00 $00 $00 $09 $80 $B0 $EC $E1
     2 8018 F9 E9 EE E7 80 00 + .by  $F9 $E9 $EE $E7 $80 $00 $03 $00  $00 $00 $00 $09 $80 $AE $EF $80  $F3 $EF $EE $E7 $80 $00 $03 $00
     3 8030 3C 00 00 09 80 80 + .by  $3C $00 $00 $09 $80 $80 $B0 $E1  $F5 $F3 $E5 $80 $80 $00 $03 $00  $00 $3D $00 $09 $80 $B3 $F4 $EF
     4 8048 F0 F0 E5 E4 80 00 + .by  $F0 $F0 $E5 $E4 $80 $00 $09 $80  $AC $EF $E1 $E4 $E9 $EE $E7 $80  $00 $12 $46 $4A $4A $4A $4A $4A
     5 8060 C8 B4 A9 AD A5 C7 + .by  $C8 $B4 $A9 $AD $A5 $C7 $4A $4A  $4A $4A $4A $49 $00 $04 $2D $65  $6D $1A $00 $02 $2B $22 $00 $14
     6 8078 80 B5 EE F3 F5 F0 + .by  $80 $B5 $EE $F3 $F5 $F0 $F0 $EF  $F2 $F4 $E5 $E4 $80 $E6 $EF $F2  $ED $E1 $F4 $80 $00 $14 $80 $AE
     7 8090 EF F4 80 E5 EE EF + .by  $EF $F4 $80 $E5 $EE $EF $F5 $E7  $E8 $F4 $80 $ED $E5 $ED $EF $F2  $F9 $80 $00 $0C $80 $A9 $8F $AF
     8 80A8 80 A5 F2 F2 EF F2 + .by  $80 $A5 $F2 $F2 $EF $F2 $80 $83  $00 $00 $00 $0A $00 $0A $0A $0A  $00 $00 $00 $F0 $7E $7F $09 $01
     9 80C0 F7			.by  $F7
Source: MIDICar Player.a65
   121
   122 				; ------------------------------------------------------------
   123
   124 80C1			RTLIB
   125 80C1				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   126
   127 				.print 'ZPAGE: ',zpage,'..',zpend-1
   127 				ZPAGE: $0080..$00D3
   128
   129 				.print 'RTLIB: ',RTLIB,'..',*-1
   129 				RTLIB: $80C1..$8893
   130
   131 				; ------------------------------------------------------------
   132
   133 8894			START
   134 8894 BA				tsx
   135 8895 8E 3B 9E			stx MAIN.@halt+1
   136
   137 					.ifdef fmulinit
   138 					fmulinit
   139 					.fi
   140
   141 = 00D2			VLEN	= VARDATASIZE-VARINITSIZE
   142 = 2006			VADR	= DATAORIGIN+VARINITSIZE
   143
   144 					ift VADR > $BFFF
   145 					ert 'Invalid memory address range ',VADR
   146 					eli (VLEN>0) && (VLEN<=256)
   147 8898 A2 2E			ldx #256-VLEN
   148 889A A9 00			lda #$00
   149 889C 9D D8 1F E8 D0 FA		sta:rne VADR+VLEN-256,x+
   150 					eli VLEN>256
   151 					@fill #VADR #VLEN #$00
   152 					eif
   153
   154 				.ifdef :psptr
   155 					mwa #PROGRAMSTACK :psptr
   156 				.fi
   157
   158 					.ifdef MAIN.@DEFINES.ROMOFF
   159 88A2				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 88A2			.local	rominit
     5
     6 88A2 78			        sei
     7 88A3 A9 00		        lda #%00000000
     8 88A5 8D 0E D4		        sta NMIEN       ;$D40E
     9 88A8 A9 FE		        lda #%11111110
    10 88AA 8D 01 D3		        sta PORTB       ;$D301
    11
    12 88AD A2 03			ldx #3
    13 88AF A0 00			ldy #0
    14 88B1 EE 01 D3		mv	inc portb
    15 88B4 B9 00 E0		afnt0	lda $e000,y
    16 88B7 CE 01 D3			dec portb
    17 88BA 99 00 E0		afnt1	sta $e000,y
    18 88BD C8				iny
    19 88BE D0 F1			bne mv
    20 88C0 EE B6 88			inc afnt0+2
    21 88C3 EE BC 88			inc afnt1+2
    22 88C6 CA				dex
    23 88C7 10 E8			bpl mv
    24
    25 88C9 A2 E6		        ldx #<nmiint
    26 88CB A0 88		        ldy #>nmiint
    27 88CD 8E FA FF		        stx NMIVEC      ;$FFFA
    28 88D0 8C FB FF		        sty NMIVEC+1
    29
    30 88D3 A2 F0		        ldx #<irqint
    31 88D5 A0 88		        ldy #>irqint
    32 88D7 8E FE FF		        stx IRQVEC      ;$FFFE
    33 88DA 8C FF FF		        sty IRQVEC+1
    34
    35 88DD A9 40		        lda #%01000000
    36 88DF 8D 0E D4		        sta NMIEN       ;$D40E
    37 88E2 58			        cli
    38
    39 88E3 4C 11 89			jmp skp
    40
    41
    42
    43 88E6 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 88E9 10 03		        spl
    45 88EB 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 88EE 38			        sec
    48 88EF 24			        .byte $24        ;BIT $18
    49
    50 88F0 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 88F1 EE 01 D3		        inc PORTB       ;$D301
    55
    56 88F4 48			        pha
    57 88F5 8A			        txa
    58 88F6 48			        pha
    59 88F7 BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 88F8 A9 89		        lda #>iret      ;adres procedury iret
    64 88FA 48			        pha
    65 88FB A9 0A		        lda #<iret
    66 88FD 48			        pha
    67 88FE BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 8901 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 8902 90 03		        scc
    73 8904 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 8907 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 890A 68			iret	pla
    77 890B AA				tax
    78 890C 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 890D CE 01 D3		        dec PORTB       ;$D301
    83 8910 40			        rti
    84
    85 8911			skp
    86
    87 				.endl
    88
   160 					.fi
   161
   162 8911 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   163 8913 BD 40 03 9D 43 9E + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   164
   165 891C E8				inx						; X = 0
   166 891D 86 80			stx bp						; BP = 0
   167
   168 891F 8E 0F D2			stx skctl					; reset POKEY
   169 8922 A9 03			lda #3
   170 8924 8D 0F D2			sta skctl
   171
   172 8927 CA				dex						; X = 255
   173
   174 8928				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
    19 8928 20 21 94			jsr MAIN.MIDFILES.@UnitInit
   175
   176 892B			.local	MAIN						; PROCEDURE
   177
   178 892B 4C 6F 9C			jmp l_00B8
   179
   180 				; ------------------------------------------------------------
   181
   182 892E			.local	SYSTEM						; UNIT
   183
   184 892E			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   185
   186 				; ------------------------------------------------------------
   187
   188 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   189 				; as Pointer
   190 892E B5 94			lda :STACKORIGIN,x
   191 8930 85 88			sta A
   192 8932 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   193 8934 85 89			sta A+1
   194 8936 CA				dex
   195 8937 10 03 4C 41 89		jmi @main
   196
   197 				; ------------------------------------------------------------
   198
   199 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   200 				; as Pointer
   201 893C B5 94			lda :STACKORIGIN,x
   202 893E 85 8C			sta VALUE
   203 8940 CA				dex
   204 8941			@main
   205
   206 				; -------------------  ASM Block 00000018  -------------------
   207
   208 8941 A0 00			ldy #0
   209 8943 A5 8C 91 88			mva value (:edx),y
   210
   211 				; ------------------------------------------------------------
   212
   213 = 0088			A	= :EDX
   214 = 008C			VALUE	= :ECX
   215 8947			@exit
   216 					.ifdef @new
   217 					lda <@VarData
   218 					sta :ztmp
   219 					lda >@VarData
   220 					ldy #@VarDataSize-1
   221 					jmp @FreeMem
   222 					els
   223 8947 60				rts						; ret
   224 					eif
   225 				.endl
   226
   227 8948			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   228
   229 				; ------------------------------------------------------------
   230
   231 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   232 				; as Pointer
   233 8948 B5 94			lda :STACKORIGIN,x
   234 894A 85 88			sta A
   235 894C B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   236 894E 85 89			sta A+1
   237 8950 CA				dex
   238 8951 30 09			jmi @main
   239
   240 				; ------------------------------------------------------------
   241
   242 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   243 				; as Pointer
   244 8953 B5 94			lda :STACKORIGIN,x
   245 8955 85 8C			sta VALUE
   246 8957 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   247 8959 85 8D			sta VALUE+1
   248 895B CA				dex
   249 895C			@main
   250
   251 				; -------------------  ASM Block 00000019  -------------------
   252
   253 895C A0 00			ldy #0
   254 895E A5 8C 91 88			mva value (:edx),y
   255 8962 C8				iny
   256 8963 A5 8D 91 88			mva value+1 (:edx),y
   257
   258 				; ------------------------------------------------------------
   259
   260 = 0088			A	= :EDX
   261 = 008C			VALUE	= :ECX
   262 8967			@exit
   263 					.ifdef @new
   264 					lda <@VarData
   265 					sta :ztmp
   266 					lda >@VarData
   267 					ldy #@VarDataSize-1
   268 					jmp @FreeMem
   269 					els
   270 8967 60				rts						; ret
   271 					eif
   272 				.endl
   273
   274 8968			.local	FILLCHAR_0102					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   275
   276 					.MACRO m@INLINE
   277 				
   278 				; -------------------  ASM Block 00000021  -------------------
   279 				
   280 					jsr @fill
   281 				
   282 					.ENDM
   283
   284 				; ------------------------------------------------------------
   285
   286 = 0088			A	= :EDX
   287 = 008C			COUNT	= :ECX
   288 = 0084			VALUE	= :EAX
   289 8968			@exit
   290 				.endl
   291
   292 8968			.local	MOVE_0103					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   293
   294 					.MACRO m@INLINE
   295 				
   296 				; -------------------  ASM Block 00000028  -------------------
   297 				
   298 					jsr @move
   299 				
   300 					.ENDM
   301
   302 				; ------------------------------------------------------------
   303
   304 = 0088			SOURCE	= :EDX
   305 = 008C			DEST	= :ECX
   306 = 0084			COUNT	= :EAX
   307 8968			@exit
   308 				.endl
   309
   310 8968			.local	PARAMCOUNT					; FUNCTION | ASSEMBLER
   311
   312 				; -------------------  ASM Block 00000044  -------------------
   313
   314 					@cmdline #255
   314 				 LDA# 255\ JSR @CMDLINE
   314 8968 A9 FF		 LDA# 255
   314 896A 20 C1 80		 JSR @CMDLINE
   315 896D 8D 0B 20			sta Result
   316
   317 8970			@exit
   318
   319 				; ------------------------------------------------------------
   320
   321 = 200B			RESULT	= DATAORIGIN+$000B
   322 8970 60				rts						; ret
   323 				.endl
   324
   325 8971			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   326 8971 8D 0C 20			sta I
   327
   328 				; -------------------  ASM Block 00000045  -------------------
   329
   330 					@cmdline i
   330 				 LDA I\ JSR @CMDLINE
   330 8974 AD 0C 20		 LDA I
   330 8977 20 C1 80		 JSR @CMDLINE
   331
   332 				;	@move #@buf Result #33
   333 897A A0 DF			ldy #256-33
   334 897C B9 21 03 99 2E 1F + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   335
   336 8985			@exit
   337
   338 				; ------------------------------------------------------------
   339
   340 = 200C			I	= DATAORIGIN+$000C
   341 = 200D			adr.RESULT	= [DATAORIGIN+$000D] .array [33]
   342 8985			.var RESULT	= adr.RESULT .word
   343
   344 = 200C			@VarData	= I
   345 = 0022			@VarDataSize	= 34
   346
   347 8985 60				rts						; ret
   348 = 8986 0D 20		RESULT
   348 				.endl
   349
   350 				; ------------------------------------------------------------
   351
   352 = 0101			__PORTB_BANKS	= $0101
   353 = 0648			M_PI_2	= $0648
   354 = 0192			D_PI_2	= $0192
   355 = 0004			D_PI_180	= $04
   356 = 0000			MGTIA	= $00
   357 = 0080			MVBXE	= $80
   358 = 0000			VBXE_XDLADR	= $00
   359 = 00E0			VBXE_BCBTMP	= $E0
   360 = 0100			VBXE_BCBADR	= $0100
   361 = 1000			VBXE_MAPADR	= $1000
   362 = 1000			VBXE_CHBASE	= $1000
   363 = 5000			VBXE_OVRADR	= $5000
   364 = B000			VBXE_WINDOW	= $B000
   365 = 0000			IDLI	= $00
   366 = 0001			IVBL	= $01
   367 = 0002			ITIM1	= $02
   368 = 0003			ITIM2	= $03
   369 = 0004			ITIM4	= $04
   370 = 00FE			CH_DELCHR	= $FE
   371 = 009B			CH_ENTER	= $9B
   372 = 001B			CH_ESC	= $1B
   373 = 001C			CH_CURS_UP	= $1C
   374 = 001D			CH_CURS_DOWN	= $1D
   375 = 001E			CH_CURS_LEFT	= $1E
   376 = 001F			CH_CURS_RIGHT	= $1F
   377 = 007F			CH_TAB	= $7F
   378 = 009B			CH_EOL	= $9B
   379 = 007D			CH_CLR	= $7D
   380 = 00FD			CH_BELL	= $FD
   381 = 007E			CH_DEL	= $7E
   382 = 009C			CH_DELLINE	= $9C
   383 = 009D			CH_INSLINE	= $9D
   384 = 0000			PAL_PMCOLOR0	= $00
   385 = 0001			PAL_PMCOLOR1	= $01
   386 = 0002			PAL_PMCOLOR2	= $02
   387 = 0003			PAL_PMCOLOR3	= $03
   388 = 0004			PAL_COLOR0	= $04
   389 = 0005			PAL_COLOR1	= $05
   390 = 0006			PAL_COLOR2	= $06
   391 = 0007			PAL_COLOR3	= $07
   392 = 0008			PAL_COLBAK	= $08
   393 = 0000			COLOR_BLACK	= $00
   394 = 000E			COLOR_WHITE	= $0E
   395 = 0032			COLOR_RED	= $32
   396 = 0096			COLOR_CYAN	= $96
   397 = 0068			COLOR_VIOLET	= $68
   398 = 00C4			COLOR_GREEN	= $C4
   399 = 0074			COLOR_BLUE	= $74
   400 = 00EE			COLOR_YELLOW	= $EE
   401 = 0028			COLOR_ORANGE	= $28
   402 = 00E4			COLOR_BROWN	= $E4
   403 = 003C			COLOR_LIGHTRED	= $3C
   404 = 0004			COLOR_GRAY1	= $04
   405 = 0006			COLOR_GRAY2	= $06
   406 = 000A			COLOR_GRAY3	= $0A
   407 = 00CC			COLOR_LIGHTGREEN	= $CC
   408 = 007C			COLOR_LIGHTBLUE	= $7C
   409 = 0004			FMOPENREAD	= $04
   410 = 0008			FMOPENWRITE	= $08
   411 = 0009			FMOPENAPPEND	= $09
   412 = 000C			FMOPENREADWRITE	= $0C
   413 = 2000			SCREENWIDTH	= DATAORIGIN+$0000
   414 = 2002			SCREENHEIGHT	= DATAORIGIN+$0002
   415 = 2004			DATESEPARATOR	= DATAORIGIN+$0004
   416 = D20A			RND	= $D20A
   417 = 02C0			adr.PALETTE	= $02C0
   418 8988			.var PALETTE	= adr.PALETTE .word
   419 = D012			adr.HPALETTE	= $D012
   420 8988			.var HPALETTE	= adr.HPALETTE .word
   421 = 2005			FILEMODE	= DATAORIGIN+$0005
   422 = 2006			GRAPHMODE	= DATAORIGIN+$0006
   423 = 2007			IORESULT	= DATAORIGIN+$0007
   424 = 2008			EOLN	= DATAORIGIN+$0008
   425 = 2009			RNDSEED	= DATAORIGIN+$0009
   426
   427 = 8988 C0 02		PALETTE
   427 = 898A 12 D0		HPALETTE
   427 				.endl							; UNIT SYSTEM
   428
   429 				; ------------------------------------------------------------
   430
   431 898C			.local	MC6850						; UNIT
   432
   433 898C			.local	MC6850_INIT					; PROCEDURE | ASSEMBLER | KEEP
   434 898C 8D 2E 20			sta SETUP
   435
   436 				; -------------------  ASM Block 00000052  -------------------
   437
   438 898F AD 2E 20		    lda setup
   439 8992 8D 00 D5		    sta MCBaseState:$d500
   440
   441 				; ------------------------------------------------------------
   442
   443 = 202E			SETUP	= DATAORIGIN+$002E
   444
   445 = 202E			@VarData	= SETUP
   446 = 0001			@VarDataSize	= 1
   447
   448 8995			@exit
   449 					.ifdef @new
   450 					lda <@VarData
   451 					sta :ztmp
   452 					lda >@VarData
   453 					ldy #@VarDataSize-1
   454 					jmp @FreeMem
   455 					els
   456 8995 60				rts						; ret
   457 					eif
   458 				.endl
   459
   460 8996			.local	MC6850_SEND2					; PROCEDURE | ASSEMBLER | KEEP
   461
   462 				; -------------------  ASM Block 00000053  -------------------
   463
   464 8996			wait:
   465 8996 AD 00 D5		    lda MCBaseState:$d500
   466 8999 29 02		    and #TDRE
   467 899B D0 F9		    bne wait
   468
   469 899D A5 FF		    lda MC_Byte
   470 899F 8D 00 D5		    sta MCBaseBuf:$d500
   471
   472 89A2			@exit
   473 					.ifdef @new
   474 					lda <@VarData
   475 					sta :ztmp
   476 					lda >@VarData
   477 					ldy #@VarDataSize-1
   478 					jmp @FreeMem
   479 					els
   480 89A2 60				rts						; ret
   481 					eif
   482 				.endl
   483
   484 				; ------------------------------------------------------------
   485
   486 = 0001			CR0	= $01
   487 = 0002			CR1	= $02
   488 = 0004			CR2	= $04
   489 = 0008			CR3	= $08
   490 = 0010			CR4	= $10
   491 = 0020			CR5	= $20
   492 = 0040			CR6	= $40
   493 = 0080			CR7	= $80
   494 = 0000			CD_1	= $00
   495 = 0001			CD_16	= $01
   496 = 0002			CD_64	= $02
   497 = 0003			MASTERRESET	= $03
   498 = 0000			WS_7BITS	= $00
   499 = 0010			WS_8BITS	= $10
   500 = 0000			WS_2BITSTOP	= $00
   501 = 0008			WS_1BITSTOP	= $08
   502 = 0000			WS_EVENPARITY	= $00
   503 = 0004			WS_ODDPARITY	= $04
   504 = 0000			TC_RTSLOW_NOTIRQ	= $00
   505 = 0020			TC_RTSLOW_TIRQ	= $20
   506 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   507 = 0060			TC_BREAKLEVEL	= $60
   508 = 0000			NOIRQ_RECEIVE	= $00
   509 = 0080			IRQ_RECEIVE	= $80
   510 = 0001			RDRF	= $01
   511 = 0002			TDRE	= $02
   512 = 0004			DCD	= $04
   513 = 0008			CTS	= $08
   514 = 0010			FE	= $10
   515 = 0020			OVRN	= $20
   516 = 0040			PE	= $40
   517 = 0080			IRQ	= $80
   518 = 00FF			MC_BYTE	= $FF
   519
   520 				.endl							; UNIT MC6850
   521
   522 				; ------------------------------------------------------------
   523
   524 89A3			.local	MIDI_FIFO					; UNIT
   525
   526 89A3			.local	FIFO_RESET					; PROCEDURE
   527
   528 				; optimize OK (MIDI_FIFO), line = 30
   529
   530 89A3 A9 00			lda #$00
   531 89A5 85 FD			sta FIFO_HEAD
   532
   533 				; optimize OK (MIDI_FIFO), line = 31
   534
   535 89A7 85 FE			sta FIFO_TAIL
   536 89A9			@exit
   537 					.ifdef @new
   538 					lda <@VarData
   539 					sta :ztmp
   540 					lda >@VarData
   541 					ldy #@VarDataSize-1
   542 					jmp @FreeMem
   543 					els
   544 89A9 60				rts						; ret
   545 					eif
   546 				.endl
   547
   548 89AA			.local	FIFO_PUSHDIRECT2MC6850				; PROCEDURE | ASSEMBLER
   549
   550 				; -------------------  ASM Block 00000054  -------------------
   551
   552 89AA AD 00 D5		  lda MCBaseState:$d500 // MC6850.MC6850_CNTRREG
   553 89AD 29 02		  and #MC6850.TDRE
   554 89AF F0 0E		  beq exitPush
   555
   556 89B1 A4 FE		  ldy FIFO_Tail
   557 89B3 C4 FD		  cpy FIFO_Head
   558 89B5 F0 08		  beq exitPush
   559
   560 89B7 B9 00 06		  lda FIFO_ADDR,y
   561 89BA 8D 00 D5		  sta MCBaseBuf:$d500  //MC6850.MC6850_BUFFER
   562 89BD E6 FE		  inc FIFO_Tail
   563
   564 89BF			exitPush:
   565
   566 89BF			@exit
   567 					.ifdef @new
   568 					lda <@VarData
   569 					sta :ztmp
   570 					lda >@VarData
   571 					ldy #@VarDataSize-1
   572 					jmp @FreeMem
   573 					els
   574 89BF 60				rts						; ret
   575 					eif
   576 				.endl
   577
   578 89C0			.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER
   579
   580 				; -------------------  ASM Block 00000055  -------------------
   581
   582 89C0 A5 FD		  lda FIFO_Head
   583 89C2 18			  clc
   584 89C3 69 01		  adc #1
   585 89C5 C5 FE		  cmp FIFO_Tail
   586 89C7 D0 03		  bne storeInFIFO
   587
   588 89C9 20 D9 89		  jsr FIFO_Flush
   589
   590 89CC			storeInFIFO:
   591 89CC A4 FD		  ldy FIFO_Head
   592 89CE A5 FF		  lda FIFO_Byte
   593 89D0 99 00 06		  sta FIFO_ADDR,y
   594 89D3 E6 FD		  inc FIFO_Head
   595
   596 89D5 20 AA 89		  jsr FIFO_PushDirect2MC6850
   597 89D8			exitWrite:
   598
   599 89D8			@exit
   600 					.ifdef @new
   601 					lda <@VarData
   602 					sta :ztmp
   603 					lda >@VarData
   604 					ldy #@VarDataSize-1
   605 					jmp @FreeMem
   606 					els
   607 89D8 60				rts						; ret
   608 					eif
   609 				.endl
   610
   611 89D9			.local	FIFO_FLUSH					; PROCEDURE | ASSEMBLER | KEEP
   612
   613 				; -------------------  ASM Block 00000056  -------------------
   614
   615 89D9 78			  sei
   616 				  // lda _timerStatus
   617 				  // eor #$80
   618 				  // sta _timerStatus
   619
   620 89DA A4 FE		  ldy FIFO_Tail
   621 89DC			flushLoop:
   622 89DC C4 FD		  cpy FIFO_Head
   623 89DE F0 11		  beq endFlush
   624
   625 89E0			waitOnMC:
   626 89E0 AD 00 D5		  lda MCBaseState:$d500 // MC6850.MC6850_CNTRReg
   627 89E3 29 02		  and #MC6850.TDRE
   628 89E5 F0 F9		  beq waitOnMc
   629
   630 89E7 B9 00 06		  lda FIFO_ADDR,y
   631 89EA 8D 00 D5		  sta MCBaseBuf:$d500   // MC6850.MC6850_BUFFER
   632
   633 89ED C8			  iny
   634 89EE 4C DC 89		  jmp flushLoop
   635
   636 89F1			endFlush:
   637 89F1 84 FE		  sty FIFO_Tail
   638
   639 89F3 58			  cli
   640 				  // lda _timerStatus
   641 				  // eor #$80
   642 				  // sta _timerStatus
   643
   644 89F4			@exit
   645 					.ifdef @new
   646 					lda <@VarData
   647 					sta :ztmp
   648 					lda >@VarData
   649 					ldy #@VarDataSize-1
   650 					jmp @FreeMem
   651 					els
   652 89F4 60				rts						; ret
   653 					eif
   654 				.endl
   655
   656 				; ------------------------------------------------------------
   657
   658 = 00FD			FIFO_HEAD	= $FD
   659 = 00FE			FIFO_TAIL	= $FE
   660 = 00FF			FIFO_BYTE	= $FF
   661 = 202F			FIFO2NULL	= DATAORIGIN+$002F
   662 = 0600			FIFO_ADDR	= $0600
   663 = 0600			adr.FIFO_BUF	= $0600
   664 89F5			.var FIFO_BUF	= adr.FIFO_BUF .word
   665 = 00F5			_TIMERSTATUS	= $F5
   666
   667 = 89F5 00 06		FIFO_BUF
   667 				.endl							; UNIT MIDI_FIFO
   668
   669 				; ------------------------------------------------------------
   670
   671 89F7			.local	CIO						; UNIT
   672
   673 89F7			.local	OPN						; PROCEDURE | ASSEMBLER
   674
   675 				; -------------------  ASM Block 00000057  -------------------
   676
   677 89F7 8A 48			txa:pha
   678
   679 89F9 AD 30 20			lda chn
   680 89FC 0A 0A 0A 0A			:4 asl @
   681 8A00 AA				tax
   682
   683 8A01 A9 03			lda #$03		;komenda: OPEN
   684 8A03 9D 42 03			sta iccmd,x
   685
   686 8A06 EE 33 20 D0 03 EE + 	inw device		;omin bajt z dlugoscia STRING-a
   687
   688 8A0E AD 33 20			lda device		;adres nazwy pliku
   689 8A11 9D 44 03			sta icbufa,x
   690 8A14 AD 34 20			lda device+1
   691 8A17 9D 45 03			sta icbufa+1,x
   692
   693 8A1A AD 31 20			lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
   694 8A1D 9D 4A 03			sta icax1,x
   695
   696 8A20 AD 32 20			lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
   697 8A23 9D 4B 03			sta icax2,x
   698
   699 8A26				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8A26 EE 01 D3				inc portb
     6 8A29 20 56 E4				jsr CIOV
     8 8A2C CE 01 D3				dec portb
Source: MIDICar Player.a65
   700
   701 8A2F 8C 07 20			sty MAIN.SYSTEM.IOResult
   702
   703 8A32 68 AA			pla:tax
   704
   705 				; ------------------------------------------------------------
   706
   707 = 2030			CHN	= DATAORIGIN+$0030
   708 = 2031			AX1	= DATAORIGIN+$0031
   709 = 2032			AX2	= DATAORIGIN+$0032
   710 = 2033			DEVICE	= DATAORIGIN+$0033
   711
   712 = 2030			@VarData	= CHN
   713 = 0005			@VarDataSize	= 5
   714
   715 8A34			@exit
   716 					.ifdef @new
   717 					lda <@VarData
   718 					sta :ztmp
   719 					lda >@VarData
   720 					ldy #@VarDataSize-1
   721 					jmp @FreeMem
   722 					els
   723 8A34 60				rts						; ret
   724 					eif
   725 				.endl
   726
   727 8A35			.local	CLS						; PROCEDURE | ASSEMBLER
   728 8A35 8D 35 20			sta CHN
   729
   730 				; -------------------  ASM Block 00000058  -------------------
   731
   732 8A38 8A 48			txa:pha
   733
   734 8A3A AD 35 20			lda chn
   735 8A3D 0A 0A 0A 0A			:4 asl @
   736 8A41 AA				tax
   737
   738 8A42 A9 0C			lda #$0c		;komenda: CLOSE
   739 8A44 9D 42 03			sta iccmd,x
   740
   741 8A47				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8A47 EE 01 D3				inc portb
     6 8A4A 20 56 E4				jsr CIOV
     8 8A4D CE 01 D3				dec portb
Source: MIDICar Player.a65
   742
   743 8A50 8C 07 20			sty MAIN.SYSTEM.IOResult
   744
   745 8A53 68 AA			pla:tax
   746
   747 				; ------------------------------------------------------------
   748
   749 = 2035			CHN	= DATAORIGIN+$0035
   750
   751 = 2035			@VarData	= CHN
   752 = 0001			@VarDataSize	= 1
   753
   754 8A55			@exit
   755 					.ifdef @new
   756 					lda <@VarData
   757 					sta :ztmp
   758 					lda >@VarData
   759 					ldy #@VarDataSize-1
   760 					jmp @FreeMem
   761 					els
   762 8A55 60				rts						; ret
   763 					eif
   764 				.endl
   765
   766 8A56			.local	BGET						; PROCEDURE | ASSEMBLER | REGISTER
   767
   768 				; -------------------  ASM Block 00000060  -------------------
   769
   770 8A56 8A 48			txa:pha
   771
   772 8A58 A5 88			lda chn
   773 8A5A 0A 0A 0A 0A			:4 asl @
   774 8A5E AA				tax
   775
   776 8A5F A9 07			lda #7		;get char/s command
   777 8A61 9D 42 03			sta iccmd,x
   778
   779 8A64 A5 8C			lda buf
   780 8A66 9D 44 03			sta icbufa,x
   781 8A69 A5 8D			lda buf+1
   782 8A6B 9D 45 03			sta icbufa+1,x
   783
   784 8A6E A5 84			lda cnt
   785 8A70 9D 48 03			sta icbufl,x
   786 8A73 A5 85			lda cnt+1
   787 8A75 9D 49 03			sta icbufh,x
   788
   789 8A78				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8A78 EE 01 D3				inc portb
     6 8A7B 20 56 E4				jsr CIOV
     8 8A7E CE 01 D3				dec portb
Source: MIDICar Player.a65
   790
   791 8A81 8C 07 20			sty MAIN.SYSTEM.IOResult
   792
   793 8A84 68 AA			pla:tax
   794
   795 				; ------------------------------------------------------------
   796
   797 = 0088			CHN	= :EDX
   798 = 008C			BUF	= :ECX
   799 = 0084			CNT	= :EAX
   800 8A86			@exit
   801 					.ifdef @new
   802 					lda <@VarData
   803 					sta :ztmp
   804 					lda >@VarData
   805 					ldy #@VarDataSize-1
   806 					jmp @FreeMem
   807 					els
   808 8A86 60				rts						; ret
   809 					eif
   810 				.endl
   811
   812 				; ------------------------------------------------------------
   813
   814 				.endl							; UNIT CIO
   815
   816 				; ------------------------------------------------------------
   817
   818 8A87			.local	MIDFILES					; UNIT
   819
   820 8A87			.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT
   821
   822 				; -------------------  ASM Block 00000067  -------------------
   823
   824 8A87 A5 F5		    lda _timerStatus
   825 8A89 30 1E		    bmi skip
   826
   827 8A8B			doSubTick:
   828 8A8B 29 0F		    and #f_ratio
   829 8A8D C5 F4		    cmp _subCnt
   830 8A8F F0 04		    beq doMainTick
   831
   832 8A91 E6 F4		    inc _subCnt
   833 8A93 70 14		    bvs skip
   834
   835 8A95			doMainTick:
   836 8A95 A9 01		    lda #1
   837 8A97 85 F4		    sta _subCnt
   838
   839 8A99 A5 F5		    lda _timerStatus
   840 8A9B 09 40		    ora #f_tick
   841 8A9D 85 F5		    sta _timerStatus
   842
   843 8A9F E6 F0		    inc _totalTicks
   844 8AA1 D0 06		    bne skip
   845 8AA3 E6 F1		    inc _totalTicks+1
   846 8AA5 D0 02		    bne skip
   847 8AA7 E6 F2		    inc _totalTicks+2
   848 				    // bne skip
   849 				    // inc _totalTicks+3
   850
   851 8AA9			skip:
   852
   853 				//   sty regy
   854
   855 				//   ldy MIDI_FIFO.FIFO_Tail
   856 				//   cpy MIDI_FIFO.FIFO_Head
   857 				//   beq fifo_end
   858
   859 				//   lda MC6850.MC6850_CNTRREG
   860 				//   and #MC6850.TDRE
   861 				//   beq fifo_end
   862
   863 				//   lda MIDI_FIFO.FIFO_ADDR,y
   864 				//   sta MC6850.MC6850_BUFFER
   865
   866 				//   inc MIDI_FIFO.FIFO_Tail
   867
   868 				// fifo_end:
   869 				//   ldy regy:#$00
   870
   871 8AA9 68			  pla
   872
   873 8AAA 40				rti						; ret
   874 				.endl
   875
   876 8AAB			.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER
   877
   878 				; -------------------  ASM Block 00000068  -------------------
   879
   880 8AAB A5 E2		  lda _adr            // get LSB of address
   881 8AAD F0 01		  beq checkMemType    // zero means, we crossing the page. Check block bounds
   882 8AAF 60			  rts
   883
   884 8AB0			checkMemType
   885 8AB0 A5 E3		  lda _adr+1          // get MSB of address
   886 8AB2 A4 E1		  ldy _bank           // get current bank index
   887 8AB4 D0 17		  bne checkXMSBound   // zero, means we checking bounds in base memory
   888 				                      // otherwise, we checking bound of extended memory
   889
   890 				// base memory bounds check
   891 				// 1st, memory under ROM
   892 8AB6			check1Bound:
   893 8AB6 C9 D0		  cmp #$d0
   894 8AB8 D0 05		  bne check2Bound
   895
   896 8ABA A9 D8		  lda #$d8
   897 8ABC 85 E3		  sta _adr+1
   898 8ABE 60			  rts
   899
   900 8ABF			check2bound
   901 8ABF C9 FF		  cmp #$ff
   902 8AC1 D0 05		  bne check3Bound
   903
   904 8AC3 A9 40		  lda #$40
   905 8AC5 85 E3		  sta _adr+1
   906 8AC7 60			  rts
   907
   908 				// 2nd, $4000..$8000
   909 8AC8			check3Bound
   910 8AC8 C9 80		  cmp #$80
   911 8ACA F0 22		  beq outOfMem
   912 8ACC 60			  rts
   913
   914 				// extended memory bound check
   915
   916 8ACD			checkXMSBound         // extender memory window $4000..$7fff
   917 8ACD C9 80		  cmp #$80            // the bank's memory area ends at $7fff
   918 8ACF F0 01		  beq switchXMSBank   // if MSB addres is out of this address, we need switch bank
   919
   920 8AD1 60			  rts
   921
   922 8AD2			switchXMSBank:
   923 8AD2 88			  dey             // decrement current bank index
   924 8AD3 F0 0D		  beq switch2Conv // if zero, meand we back to conventional memory
   925
   926 8AD5 B9 00 01		  lda $100,y      // get bank set
   927 8AD8 84 E1		  sty _bank       // store current bank index
   928 8ADA 8D 01 D3		  sta PORTB       // set PORTB (switch bank)
   929 8ADD A9 40		  lda #$40        // set MSB address to the begining of bank
   930 8ADF 85 E3		  sta _adr+1
   931 8AE1 60			  rts
   932
   933 8AE2			switch2Conv:
   934 8AE2 A9 FE		  lda #$fe        // switch to conventional memory and turn off ROM
   935 8AE4 84 E1		  sty _bank
   936 8AE6 8D 01 D3		  sta PORTB
   937 8AE9 A9 A8		  lda #$a8        // set MSB address
   938 8AEB 85 E3		  sta _adr+1
   939 8AED 60			  rts
   940
   941 8AEE			outOfMem:
   942 8AEE A9 65		  lda #ERR_NOT_ENOUGHT_MEMORY
   943 8AF0 8D 07 20		  sta SYSTEM.IOResult
   944
   945 8AF3			@exit
   946 					.ifdef @new
   947 					lda <@VarData
   948 					sta :ztmp
   949 					lda >@VarData
   950 					ldy #@VarDataSize-1
   951 					jmp @FreeMem
   952 					els
   953 8AF3 60				rts						; ret
   954 					eif
   955 				.endl
   956
   957 8AF4			.local	LOADMID						; FUNCTION
   958
   959 8AF4 4C 67 8B			jmp l_014B
   960
   961 8AF7			.local	READWORDBI					; FUNCTION
   962
   963 				; optimize OK (bigendian.inc), line = 6
   964
   965 8AF7 A9 01			lda #$01
   966 8AF9 85 88			sta CIO.BGET.CHN
   967 8AFB A9 77			lda <RESULT
   968 8AFD 85 8C			sta CIO.BGET.BUF
   969 8AFF A9 20			lda >RESULT
   970 8B01 85 8D			sta CIO.BGET.BUF+1
   971 8B03 A9 02			lda #$02
   972 8B05 85 84			sta CIO.BGET.CNT
   973 8B07 A9 00			lda #$00
   974 8B09 85 85			sta CIO.BGET.CNT+1
   975 8B0B 20 56 8A			jsr CIO.BGET
   976
   977 				; -------------------  ASM Block 00000069  -------------------
   978
   979 8B0E AE 77 20		    ldx result
   980 8B11 AC 78 20		    ldy result+1
   981 8B14 8E 78 20		    stx result+1
   982 8B17 8C 77 20		    sty result
   983 				  
   984 8B1A			@exit
   985
   986 				; ------------------------------------------------------------
   987
   988 = 2077			RESULT	= DATAORIGIN+$0077
   989 8B1A 60				rts						; ret
   990 				.endl
   991
   992 8B1B			.local	READLONGBI					; FUNCTION
   993
   994 				; optimize OK (bigendian.inc), line = 22
   995
   996 8B1B A9 01			lda #$01
   997 8B1D 85 88			sta CIO.BGET.CHN
   998 8B1F A9 79			lda <RESULT
   999 8B21 85 8C			sta CIO.BGET.BUF
  1000 8B23 A9 20			lda >RESULT
  1001 8B25 85 8D			sta CIO.BGET.BUF+1
  1002 8B27 A9 04			lda #$04
  1003 8B29 85 84			sta CIO.BGET.CNT
  1004 8B2B A9 00			lda #$00
  1005 8B2D 85 85			sta CIO.BGET.CNT+1
  1006 8B2F 20 56 8A			jsr CIO.BGET
  1007
  1008 				; -------------------  ASM Block 00000070  -------------------
  1009
  1010 8B32 AE 79 20		    ldx result
  1011 8B35 AC 7C 20		    ldy result+3
  1012 8B38 8E 7C 20		    stx result+3
  1013 8B3B 8C 79 20		    sty result
  1014
  1015 8B3E AE 7A 20		    ldx result+1
  1016 8B41 AC 7B 20		    ldy result+2
  1017 8B44 8E 7B 20		    stx result+2
  1018 8B47 8C 7A 20		    sty result+1
  1019 				  
  1020 8B4A			@exit
  1021
  1022 				; ------------------------------------------------------------
  1023
  1024 = 2079			RESULT	= DATAORIGIN+$0079
  1025 8B4A 60				rts						; ret
  1026 				.endl
  1027
  1028 8B4B			.local	_BGET						; PROCEDURE
  1029
  1030 				; optimize OK (loadmid.inc), line = 24
  1031
  1032 8B4B A9 01			lda #$01
  1033 8B4D 85 88			sta CIO.BGET.CHN
  1034 8B4F AD 7D 20			lda DEST
  1035 8B52 85 8C			sta CIO.BGET.BUF
  1036 8B54 AD 7E 20			lda DEST+1
  1037 8B57 85 8D			sta CIO.BGET.BUF+1
  1038 8B59 AD 6F 20			lda LOADSIZE
  1039 8B5C 85 84			sta CIO.BGET.CNT
  1040 8B5E AD 70 20			lda LOADSIZE+1
  1041 8B61 85 85			sta CIO.BGET.CNT+1
  1042 8B63 20 56 8A			jsr CIO.BGET
  1043
  1044 				; ------------------------------------------------------------
  1045
  1046 = 207D			DEST	= DATAORIGIN+$007D
  1047
  1048 = 207D			@VarData	= DEST
  1049 = 0002			@VarDataSize	= 2
  1050
  1051 8B66			@exit
  1052 					.ifdef @new
  1053 					lda <@VarData
  1054 					sta :ztmp
  1055 					lda >@VarData
  1056 					ldy #@VarDataSize-1
  1057 					jmp @FreeMem
  1058 					els
  1059 8B66 60				rts						; ret
  1060 					eif
  1061 				.endl
  1062 8B67			l_014B
  1063
  1064 				; optimize OK (loadmid.inc), line = 34
  1065
  1066 8B67 A9 01			lda #$01
  1067 8B69 8D 30 20			sta CIO.OPN.CHN
  1068 8B6C A9 04			lda #$04
  1069 8B6E 8D 31 20			sta CIO.OPN.AX1
  1070 8B71 A9 00			lda #$00
  1071 8B73 8D 32 20			sta CIO.OPN.AX2
  1072 8B76 AD 61 20			lda FN
  1073 8B79 8D 33 20			sta CIO.OPN.DEVICE
  1074 8B7C AD 62 20			lda FN+1
  1075 8B7F 8D 34 20			sta CIO.OPN.DEVICE+1
  1076 8B82 20 F7 89			jsr CIO.OPN
  1077
  1078 				; optimize OK (loadmid.inc), line = 36
  1079
  1080 8B85 AD 07 20			lda SYSTEM.IORESULT
  1081 8B88 10 0B			jpl l_017D
  1082
  1083 				; optimize OK (loadmid.inc), line = 38
  1084
  1085 8B8A 8D 63 20			sta RESULT
  1086
  1087 				; optimize OK (loadmid.inc), line = 42
  1088
  1089 8B8D A9 01			lda #$01
  1090 8B8F 20 35 8A			jsr CIO.CLS
  1091 8B92 4C 77 8E			jmp @exit					; exit
  1092 8B95			l_017D
  1093
  1094 				; optimize OK (loadmid.inc), line = 47
  1095
  1096 8B95 AD 79 94			lda MIDTRACKS
  1097 8B98 8D 75 20			sta TRKDATA
  1098 8B9B AD 7A 94			lda MIDTRACKS+1
  1099 8B9E 8D 76 20			sta TRKDATA+1
  1100
  1101 				; optimize OK (loadmid.inc), line = 48
  1102
  1103 8BA1 A9 00			lda #$00
  1104 8BA3 8D 64 20			sta TRACKCOUNT
  1105
  1106 				; optimize OK (loadmid.inc), line = 49
  1107
  1108 8BA6 A9 FF			lda #$FF
  1109 8BA8 8D 3A 20			sta TOTALTRACKS
  1110
  1111 				; --- WhileProlog
  1112 8BAB 4C 54 8E			jmp l_0197
  1113 8BAE			l_0198
  1114
  1115 				; optimize OK (loadmid.inc), line = 57
  1116
  1117 8BAE A9 01			lda #$01
  1118 8BB0 85 88			sta CIO.BGET.CHN
  1119 8BB2 A9 65			lda <CHUNKTAG
  1120 8BB4 85 8C			sta CIO.BGET.BUF
  1121 8BB6 A9 20			lda >CHUNKTAG
  1122 8BB8 85 8D			sta CIO.BGET.BUF+1
  1123 8BBA A9 04			lda #$04
  1124 8BBC 85 84			sta CIO.BGET.CNT
  1125 8BBE A9 00			lda #$00
  1126 8BC0 85 85			sta CIO.BGET.CNT+1
  1127 8BC2 20 56 8A			jsr CIO.BGET
  1128
  1129 				; optimize FAIL ('READLONGBI', loadmid.inc), line = 59
  1130
  1131 8BC5 20 1B 8B			jsr READLONGBI
  1132 8BC8 AD 79 20			lda READLONGBI.RESULT
  1133 8BCB 8D 71 20			sta LEN
  1134 8BCE AD 7A 20			lda READLONGBI.RESULT+1
  1135 8BD1 8D 72 20			sta LEN+1
  1136 8BD4 AD 7B 20			lda READLONGBI.RESULT+2
  1137 8BD7 8D 73 20			sta LEN+2
  1138 8BDA AD 7C 20			lda READLONGBI.RESULT+3
  1139 8BDD 8D 74 20			sta LEN+3
  1140
  1141 				; optimize OK (loadmid.inc), line = 60
  1142
  1143 8BE0 AD 68 20			lda CHUNKTAG+3
  1144 8BE3 49 64			eor #$64
  1145 8BE5 F0 03 4C 89 8C		jne l_01B0
  1146 8BEA AD 67 20			lda CHUNKTAG+2
  1147 8BED 49 68			eor #$68
  1148 8BEF F0 03 4C 89 8C		jne l_01B0
  1149 8BF4 AD 66 20			lda CHUNKTAG+1
  1150 8BF7 49 54			eor #$54
  1151 8BF9 F0 03 4C 89 8C		jne l_01B0
  1152 8BFE AD 65 20			lda CHUNKTAG
  1153 8C01 49 4D			eor #$4D
  1154 8C03 F0 03 4C 89 8C		jne l_01B0
  1155
  1156 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 62
  1157
  1158 8C08 20 F7 8A			jsr READWORDBI
  1159 8C0B AD 77 20			lda READWORDBI.RESULT
  1160 8C0E 8D 39 20			sta FORMAT
  1161
  1162 				; optimize OK (loadmid.inc), line = 63
  1163
  1164 8C11 F0 0C			jeq l_01D3
  1165 8C13 C9 01			cmp #$01
  1166 8C15 F0 08			jeq l_01D3
  1167 8C17 A9 64			lda #$64
  1168 8C19 8D 63 20			sta RESULT
  1169 8C1C 4C 77 8E			jmp @exit					; exit
  1170 8C1F			l_01D3
  1171
  1172 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 64
  1173
  1174 8C1F 20 F7 8A			jsr READWORDBI
  1175 8C22 AD 77 20			lda READWORDBI.RESULT
  1176 8C25 8D 3A 20			sta TOTALTRACKS
  1177
  1178 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 65
  1179
  1180 8C28 20 F7 8A			jsr READWORDBI
  1181 8C2B AD 77 20			lda READWORDBI.RESULT
  1182 8C2E 8D 69 20			sta V
  1183 8C31 AD 78 20			lda READWORDBI.RESULT+1
  1184 8C34 8D 6A 20			sta V+1
  1185
  1186 				; optimize OK (loadmid.inc), line = 66
  1187
  1188 8C37 30 0F			jmi l_01F7
  1189
  1190 				; optimize OK (loadmid.inc), line = 67
  1191
  1192 8C39 AD 69 20			lda V
  1193 8C3C 8D 3B 20			sta TICKDIV
  1194 8C3F AD 6A 20			lda V+1
  1195 8C42 8D 3C 20			sta TICKDIV+1
  1196 8C45 4C 86 8C			jmp l_0206
  1197 8C48			l_01F7
  1198
  1199 				; optimize OK (loadmid.inc), line = 71
  1200
  1201 8C48 AD 6A 20			lda V+1
  1202 8C4B 29 7F			and #$7F
  1203 8C4D 8D 41 20			sta FPS
  1204
  1205 				; optimize OK (loadmid.inc), line = 72
  1206
  1207 8C50 8D 7F 20			sta @CASETMP_0003
  1208 8C53 C9 E8			cmp #$E8
  1209 8C55 D0 08			jne l_021E
  1210 				@
  1211
  1212 				; optimize OK (loadmid.inc), line = 73
  1213
  1214 8C57 A9 18			lda #$18
  1215 8C59 8D 41 20			sta FPS
  1216
  1217 8C5C 4C 80 8C			jmp a_0003
  1218 8C5F			l_021E
  1219 8C5F C9 E7			cmp #$E7
  1220 8C61 D0 08			jne l_022B
  1221 				@
  1222
  1223 				; optimize OK (loadmid.inc), line = 74
  1224
  1225 8C63 A9 19			lda #$19
  1226 8C65 8D 41 20			sta FPS
  1227
  1228 8C68 4C 80 8C			jmp a_0003
  1229 8C6B			l_022B
  1230 8C6B C9 E3			cmp #$E3
  1231 8C6D D0 08			jne l_0238
  1232 				@
  1233
  1234 				; optimize OK (loadmid.inc), line = 75
  1235
  1236 8C6F A9 1D			lda #$1D
  1237 8C71 8D 41 20			sta FPS
  1238
  1239 8C74 4C 80 8C			jmp a_0003
  1240 8C77			l_0238
  1241 8C77 C9 E2			cmp #$E2
  1242 8C79 D0 05			jne l_0245
  1243 				@
  1244
  1245 				; optimize OK (loadmid.inc), line = 76
  1246
  1247 8C7B A9 1E			lda #$1E
  1248 8C7D 8D 41 20			sta FPS
  1249
  1250 8C80			l_0245
  1251 8C80			a_0003
  1252
  1253 				; optimize OK (loadmid.inc), line = 78
  1254
  1255 8C80 AD 69 20			lda V
  1256 8C83 8D 42 20			sta FSD
  1257 8C86			l_0206
  1258 8C86 4C 54 8E			jmp l_0263
  1259 8C89			l_01B0
  1260
  1261 				; optimize OK (loadmid.inc), line = 82
  1262
  1263 8C89 AD 68 20			lda CHUNKTAG+3
  1264 8C8C 49 6B			eor #$6B
  1265 8C8E F0 03 4C 54 8E		jne l_0273
  1266 8C93 AD 67 20			lda CHUNKTAG+2
  1267 8C96 49 72			eor #$72
  1268 8C98 F0 03 4C 54 8E		jne l_0273
  1269 8C9D AD 66 20			lda CHUNKTAG+1
  1270 8CA0 49 54			eor #$54
  1271 8CA2 F0 03 4C 54 8E		jne l_0273
  1272 8CA7 AD 65 20			lda CHUNKTAG
  1273 8CAA 49 4D			eor #$4D
  1274 8CAC F0 03 4C 54 8E		jne l_0273
  1275
  1276 				; optimize FAIL (0, loadmid.inc), line = 84
  1277
  1278 8CB1 EE 64 20			inc TRACKCOUNT
  1279
  1280 				; optimize OK (loadmid.inc), line = 86
  1281
  1282 8CB4 AC 75 20 84 82 AC + 	mwy TRKDATA :bp2
  1283 8CBE A0 00			ldy #$00
  1284 8CC0 98				tya
  1285 8CC1 91 82			sta (:bp2),y
  1286
  1287 				; optimize OK (loadmid.inc), line = 87
  1288
  1289 8CC3 A0 04			ldy #$04
  1290 8CC5 91 82			sta (:bp2),y
  1291 8CC7 C8				iny
  1292 8CC8 91 82			sta (:bp2),y
  1293 8CCA C8				iny
  1294 8CCB 91 82			sta (:bp2),y
  1295 8CCD C8				iny
  1296 8CCE 91 82			sta (:bp2),y
  1297
  1298 				; optimize OK (loadmid.inc), line = 88
  1299
  1300 8CD0 A0 01			ldy #$01
  1301 8CD2 A5 E1			lda _BANK
  1302 8CD4 91 82			sta (:bp2),y
  1303
  1304 				; optimize OK (loadmid.inc), line = 89
  1305
  1306 8CD6 C8				iny
  1307 8CD7 A5 E2			lda _ADR
  1308 8CD9 91 82			sta (:bp2),y
  1309 8CDB C8				iny
  1310 8CDC A5 E3			lda _ADR+1
  1311 8CDE 91 82			sta (:bp2),y
  1312
  1313 				; -------------------  ASM Block 00000071  -------------------
  1314
  1315 				 ldy _bank \ lda $100,y \ sta PORTB 
  1315 8CE0 A4 E1		 LDY _BANK 
  1315 8CE2 B9 00 01		 LDA $100,Y 
  1315 8CE5 8D 01 D3		 STA PORTB 
  1316 				; --- WhileProlog
  1317 8CE8 4C 33 8E			jmp l_028D
  1318 8CEB			l_028E
  1319
  1320 				; optimize FAIL (':TMP', loadmid.inc), line = 95
  1321
  1322 8CEB AD 5B 20			lda LOADPROCESS
  1323 8CEE 85 91			sta :TMP+1
  1324 8CF0 AD 5C 20			lda LOADPROCESS+1
  1325 8CF3 85 92			sta :TMP+2
  1326 8CF5 A9 4C			lda #$4C
  1327 8CF7 85 90			sta :TMP
  1328 8CF9 E8				inx
  1329 8CFA AD 64 20 95 94		mva TRACKCOUNT :STACKORIGIN,x
  1330 8CFF 20 90 00			jsr :TMP
  1331
  1332 				; optimize FAIL ('MEMBOUNDCHECK', loadmid.inc), line = 96
  1333
  1334 8D02 20 AB 8A			jsr MEMBOUNDCHECK
  1335
  1336 				; optimize OK (loadmid.inc), line = 97
  1337
  1338 8D05 AD 07 20			lda SYSTEM.IORESULT
  1339 8D08 C9 01			cmp #$01
  1340 8D0A F0 08			jeq l_02A5
  1341
  1342 				; optimize OK (loadmid.inc), line = 99
  1343
  1344 8D0C A9 65			lda #$65
  1345 8D0E 8D 07 20			sta SYSTEM.IORESULT
  1346 8D11 4C 46 8E			jmp b_028E					; break
  1347 8D14			l_02A5
  1348
  1349 				; optimize OK (loadmid.inc), line = 103
  1350
  1351 8D14 A5 E3			lda _ADR+1
  1352 8D16 C9 D8			cmp #$D8
  1353 8D18 90 0D			jcc l_02BD
  1354 8D1A A9 00			lda #$00
  1355 8D1C 8D 6F 20			sta LOADSIZE
  1356 8D1F A9 FF			lda #$FF
  1357 8D21 8D 70 20			sta LOADSIZE+1
  1358 8D24 4C 5D 8D			jmp l_02CB
  1359 8D27			l_02BD
  1360
  1361 				; optimize OK (loadmid.inc), line = 104
  1362
  1363 8D27 A5 E3			lda _ADR+1
  1364 8D29 C9 C0			cmp #$C0
  1365 8D2B 90 0D			jcc l_02DC
  1366 8D2D A9 00			lda #$00
  1367 8D2F 8D 6F 20			sta LOADSIZE
  1368 8D32 A9 D0			lda #$D0
  1369 8D34 8D 70 20			sta LOADSIZE+1
  1370 8D37 4C 5D 8D			jmp l_02EA
  1371 8D3A			l_02DC
  1372
  1373 				; optimize OK (loadmid.inc), line = 105
  1374
  1375 8D3A A5 E3			lda _ADR+1
  1376 8D3C C9 A8			cmp #$A8
  1377 8D3E 90 0D			jcc l_02FB
  1378 8D40 A9 00			lda #$00
  1379 8D42 8D 6F 20			sta LOADSIZE
  1380 8D45 A9 C0			lda #$C0
  1381 8D47 8D 70 20			sta LOADSIZE+1
  1382 8D4A 4C 5D 8D			jmp l_0309
  1383 8D4D			l_02FB
  1384
  1385 				; optimize OK (loadmid.inc), line = 106
  1386
  1387 8D4D A5 E3			lda _ADR+1
  1388 8D4F C9 40			cmp #$40
  1389 8D51 90 0A			jcc l_031A
  1390 8D53 A9 00			lda #$00
  1391 8D55 8D 6F 20			sta LOADSIZE
  1392 8D58 A9 80			lda #$80
  1393 8D5A 8D 70 20			sta LOADSIZE+1
  1394 8D5D			l_031A
  1395 8D5D			l_0309
  1396 8D5D			l_02EA
  1397 8D5D			l_02CB
  1398
  1399 				; optimize OK (loadmid.inc), line = 107
  1400
  1401 8D5D AD 6F 20			lda LOADSIZE
  1402 8D60 38 E5 E2			sub _ADR
  1403 8D63 8D 6F 20			sta LOADSIZE
  1404 8D66 AD 70 20			lda LOADSIZE+1
  1405 8D69 E5 E3			sbc _ADR+1
  1406 8D6B 8D 70 20			sta LOADSIZE+1
  1407
  1408 				; optimize OK (loadmid.inc), line = 108
  1409
  1410 8D6E 0D 6F 20			ora LOADSIZE
  1411 8D71 D0 03			jne l_0334
  1412 8D73 4C 33 8E			jmp c_028E					; continue
  1413 8D76			l_0334
  1414
  1415 				; optimize OK (loadmid.inc), line = 109
  1416
  1417 8D76				.LOCAL
  1418 8D76 A9 00			lda #$00
  1419 8D78 38 ED 74 20			sub LEN+3
  1420 8D7C D0 21			bne L4
  1421 8D7E A9 00			lda #$00
  1422 8D80 CD 73 20			cmp LEN+2
  1423 8D83 D0 0E			bne L1
  1424 8D85 AD 70 20			lda LOADSIZE+1
  1425 8D88 CD 72 20			cmp LEN+1
  1426 8D8B D0 06			bne L1
  1427 8D8D AD 6F 20			lda LOADSIZE
  1428 8D90 CD 71 20			cmp LEN
  1429 8D93 F0 10		L1	beq L5
  1430 8D95 B0 04			bcs L3
  1431 8D97 A9 FF			lda #$FF
  1432 8D99 D0 0A			bne L5
  1433 8D9B A9 01		L3	lda #$01
  1434 8D9D D0 06			bne L5
  1435 8D9F 50 04		L4	bvc L5
  1436 8DA1 49 FF			eor #$FF
  1437 8DA3 09 01			ora #$01
  1438 8DA5			L5
  1439 					.ENDL
  1440 8DA5 30 0E			jmi l_0348
  1441 8DA7 F0 0C			jeq l_0348
  1442 8DA9 AD 71 20			lda LEN
  1443 8DAC 8D 6F 20			sta LOADSIZE
  1444 8DAF AD 72 20			lda LEN+1
  1445 8DB2 8D 70 20			sta LOADSIZE+1
  1446 8DB5			l_0348
  1447
  1448 				; optimize OK (loadmid.inc), line = 111
  1449
  1450 8DB5 A5 E3			lda _ADR+1
  1451 8DB7 C9 C0			cmp #$C0
  1452 8DB9 90 2F			jcc l_0360
  1453
  1454 				; optimize OK (loadmid.inc), line = 113
  1455
  1456 8DBB A9 00			lda #$00
  1457 8DBD 8D 7D 20			sta _BGET.DEST
  1458 8DC0 A9 40			lda #$40
  1459 8DC2 8D 7E 20			sta _BGET.DEST+1
  1460 8DC5 20 4B 8B			jsr _BGET
  1461
  1462 				; optimize OK (loadmid.inc), line = 114
  1463
  1464 8DC8 AD 78 8E			lda RBUF
  1465 8DCB 85 88			sta SYSTEM.MOVE_0103.SOURCE
  1466 8DCD AD 79 8E			lda RBUF+1
  1467 8DD0 85 89			sta SYSTEM.MOVE_0103.SOURCE+1
  1468 8DD2 A5 E2			lda _PTR
  1469 8DD4 85 8C			sta SYSTEM.MOVE_0103.DEST
  1470 8DD6 A5 E3			lda _PTR+1
  1471 8DD8 85 8D			sta SYSTEM.MOVE_0103.DEST+1
  1472 8DDA AD 6F 20			lda LOADSIZE
  1473 8DDD 85 84			sta SYSTEM.MOVE_0103.COUNT
  1474 8DDF AD 70 20			lda LOADSIZE+1
  1475 8DE2 85 85			sta SYSTEM.MOVE_0103.COUNT+1
  1476 8DE4				.local +MAIN.SYSTEM.MOVE_0103
  1477 8DE4				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0103.M@INLINE [Source: MIDICar Player.a65]
     4 8DE4 20 7E 82			jsr @move
Source: MIDICar Player.a65
  1478 					.endl
  1479 8DE7 4C F7 8D			jmp l_0373
  1480 8DEA			l_0360
  1481
  1482 				; optimize OK (loadmid.inc), line = 117
  1483
  1484 8DEA A5 E2			lda _PTR
  1485 8DEC 8D 7D 20			sta _BGET.DEST
  1486 8DEF A5 E3			lda _PTR+1
  1487 8DF1 8D 7E 20			sta _BGET.DEST+1
  1488 8DF4 20 4B 8B			jsr _BGET
  1489 8DF7			l_0373
  1490
  1491 				; optimize OK (loadmid.inc), line = 122
  1492
  1493 8DF7 AD 07 20			lda SYSTEM.IORESULT
  1494 8DFA C9 01			cmp #$01
  1495 8DFC F0 03			jeq l_0388
  1496 8DFE 4C 46 8E			jmp b_028E					; break
  1497 8E01			l_0388
  1498
  1499 				; optimize OK (loadmid.inc), line = 125
  1500
  1501 8E01 A5 E2			lda _ADR
  1502 8E03 18 6D 6F 20			add LOADSIZE
  1503 8E07 85 E2			sta _ADR
  1504 8E09 A5 E3			lda _ADR+1
  1505 8E0B 6D 70 20			adc LOADSIZE+1
  1506 8E0E 85 E3			sta _ADR+1
  1507
  1508 				; optimize OK (loadmid.inc), line = 126
  1509
  1510 8E10 AD 71 20			lda LEN
  1511 8E13 38 ED 6F 20			sub LOADSIZE
  1512 8E17 8D 71 20			sta LEN
  1513 8E1A AD 72 20			lda LEN+1
  1514 8E1D ED 70 20			sbc LOADSIZE+1
  1515 8E20 8D 72 20			sta LEN+1
  1516 8E23 AD 73 20			lda LEN+2
  1517 8E26 E9 00			sbc #$00
  1518 8E28 8D 73 20			sta LEN+2
  1519 8E2B AD 74 20			lda LEN+3
  1520 8E2E E9 00			sbc #$00
  1521 8E30 8D 74 20			sta LEN+3
  1522 8E33			c_028E
  1523 8E33			l_028D
  1524
  1525 				; optimize OK (loadmid.inc), line = 93
  1526
  1527 8E33 AD 74 20			lda LEN+3
  1528 8E36 30 0E			bmi @+
  1529 8E38 0D 73 20			ora LEN+2
  1530 8E3B 0D 72 20			ora LEN+1
  1531 8E3E 0D 71 20			ora LEN
  1532 8E41 F0 03 4C EB 8C		jne l_028E
  1533 				@
  1534 8E46			b_028E
  1535
  1536 				; optimize OK (loadmid.inc), line = 129
  1537
  1538 8E46 AD 75 20			lda TRKDATA
  1539 8E49 18 69 09			add #$09
  1540 8E4C 8D 75 20			sta TRKDATA
  1541 8E4F 90 03			scc
  1542 8E51 EE 76 20			inc TRKDATA+1
  1543 8E54			l_0273
  1544 8E54			l_0263
  1545 8E54			l_0197
  1546
  1547 				; optimize OK (loadmid.inc), line = 51
  1548
  1549 8E54 AD 07 20			lda SYSTEM.IORESULT
  1550 8E57 C9 01			cmp #$01
  1551 8E59 D0 0B			jne l_0198w
  1552 8E5B AD 64 20			lda TRACKCOUNT
  1553 8E5E CD 3A 20			cmp TOTALTRACKS
  1554 8E61 B0 03 4C AE 8B		jcc l_0198
  1555 8E66			l_0198w
  1556
  1557 				; optimize OK (loadmid.inc), line = 135
  1558
  1559 8E66 A9 01			lda #$01
  1560 8E68 20 35 8A			jsr CIO.CLS
  1561
  1562 				; optimize OK (loadmid.inc), line = 137
  1563
  1564 8E6B AD 07 20			lda SYSTEM.IORESULT
  1565 8E6E C9 01			cmp #$01
  1566 8E70 F0 05			jeq l_03CA
  1567 8E72 A9 00			lda #$00
  1568 8E74 8D 63 20			sta RESULT
  1569 8E77			l_03CA
  1570 8E77			@exit
  1571
  1572 				; ------------------------------------------------------------
  1573
  1574 = 2061			FN	= DATAORIGIN+$0061
  1575 = 2063			RESULT	= DATAORIGIN+$0063
  1576 = 4000			LOADBUF_SIZE	= $4000
  1577 = 0001			CIO_CHN	= $01
  1578 = 2064			TRACKCOUNT	= DATAORIGIN+$0064
  1579 = 2065			CHUNKTAG	= DATAORIGIN+$0065
  1580 = 2069			V	= DATAORIGIN+$0069
  1581 = 206B			TOP	= DATAORIGIN+$006B
  1582 = 206D			ENDADR	= DATAORIGIN+$006D
  1583 = 206F			LOADSIZE	= DATAORIGIN+$006F
  1584 = 2071			LEN	= DATAORIGIN+$0071
  1585 = 2075			TRKDATA	= DATAORIGIN+$0075
  1586 = 2000			TRKDATA.STATUS	= DATAORIGIN+$0000
  1587 = 2001			TRKDATA.BANK	= DATAORIGIN+$0001
  1588 = 2002			TRKDATA.PTR	= DATAORIGIN+$0002
  1589 = 2004			TRKDATA.TRACKTIME	= DATAORIGIN+$0004
  1590 = 2008			TRKDATA._EVENT	= DATAORIGIN+$0008
  1591 = 4000			adr.RBUF	= $4000
  1592 8E77			.var RBUF	= adr.RBUF .word
  1593 = 207F			@CASETMP_0003	= DATAORIGIN+$007F
  1594
  1595 = 2061			@VarData	= FN
  1596 = 0021			@VarDataSize	= 33
  1597
  1598 8E77 60				rts						; ret
  1599 = 8E78 00 40		RBUF
  1599 				.endl
  1600
  1601 8E7A			.local	SETTEMPO					; PROCEDURE
  1602
  1603 				; optimize OK (settempo.inc), line = 10
  1604
  1605 8E7A A5 F5			lda _TIMERSTATUS
  1606 8E7C 49 80			eor #$80
  1607 8E7E 85 F5			sta _TIMERSTATUS
  1608
  1609 				; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 13
  1610
  1611 8E80 E8				inx
  1612 8E81 AD 3D 20 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  1613 8E86 AD 3E 20 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  1614 8E8B AD 3F 20 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  1615 8E90 AD 40 20 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  1616 8E95 E8				inx
  1617 8E96 AD 5D 20 95 94		mva TEMPOSHIFT :STACKORIGIN,x
  1618 8E9B AD 5E 20 95 A4		mva TEMPOSHIFT+1 :STACKORIGIN+STACKWIDTH,x
  1619 8EA0 AD 5F 20 95 B4		mva TEMPOSHIFT+2 :STACKORIGIN+STACKWIDTH*2,x
  1620 8EA5 AD 60 20 95 C4		mva TEMPOSHIFT+3 :STACKORIGIN+STACKWIDTH*3,x
  1621 8EAA 20 C2 81			jsr addEAX_ECX
  1622 8EAD AD 3B 20 95 94		mva TICKDIV :STACKORIGIN,x
  1623 8EB2 AD 3C 20 95 A4		mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
  1624 8EB7 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1625 8EBB A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1626 8EBF 20 2D 83			jsr divmulINT.DIV
  1627 8EC2 CA				dex
  1628 8EC3 B5 94			lda :STACKORIGIN,x
  1629 8EC5 8D 84 20			sta _FREQ
  1630 8EC8 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1631 8ECA 8D 85 20			sta _FREQ+1
  1632 8ECD B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1633 8ECF 8D 86 20			sta _FREQ+2
  1634 8ED2 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1635 8ED4 8D 87 20			sta _FREQ+3
  1636
  1637 				; optimize FAIL ('@I2F_m', settempo.inc), line = 14
  1638
  1639 8ED7 AD 84 20 95 94		mva _FREQ :STACKORIGIN,x
  1640 8EDC AD 85 20 95 A4		mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1641 8EE1 AD 86 20 95 B4		mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1642 8EE6 AD 87 20 95 C4		mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1643 8EEB E8				inx
  1644 8EEC A9 00 95 94			mva #$00 :STACKORIGIN,x
  1645 8EF0 A9 24 95 A4			mva #$24 :STACKORIGIN+STACKWIDTH,x
  1646 8EF4 A9 74 95 B4			mva #$74 :STACKORIGIN+STACKWIDTH*2,x
  1647 8EF8 A9 49 95 C4			mva #$49 :STACKORIGIN+STACKWIDTH*3,x
  1648 8EFC 20 4D 88			jsr @I2F_m
  1649 8EFF 20 0F 87			jsr @FDIV
  1650 8F02 CA				dex
  1651 8F03 B5 94			lda :STACKORIGIN,x
  1652 8F05 8D 80 20			sta FREQ
  1653 8F08 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1654 8F0A 8D 81 20			sta FREQ+1
  1655 8F0D B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1656 8F0F 8D 82 20			sta FREQ+2
  1657 8F12 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1658 8F14 8D 83 20			sta FREQ+3
  1659
  1660 				; optimize FAIL ('@FDIV', settempo.inc), line = 15
  1661
  1662 8F17 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1663 8F1B A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1664 8F1F A9 80 95 B4			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  1665 8F23 A9 3F 95 C4			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  1666 8F27 E8				inx
  1667 8F28 AD 80 20 95 94		mva FREQ :STACKORIGIN,x
  1668 8F2D AD 81 20 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1669 8F32 AD 82 20 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1670 8F37 AD 83 20 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1671 8F3C 20 0F 87			jsr @FDIV
  1672 8F3F CA				dex
  1673 8F40 B5 94			lda :STACKORIGIN,x
  1674 8F42 8D 80 20			sta FREQ
  1675 8F45 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1676 8F47 8D 81 20			sta FREQ+1
  1677 8F4A B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1678 8F4C 8D 82 20			sta FREQ+2
  1679 8F4F B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1680 8F51 8D 83 20			sta FREQ+3
  1681
  1682 				; optimize FAIL ('@FDIV', settempo.inc), line = 24
  1683
  1684 8F54 A9 F5 95 94			mva #$F5 :STACKORIGIN,x
  1685 8F58 A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1686 8F5C A9 7A 95 B4			mva #$7A :STACKORIGIN+STACKWIDTH*2,x
  1687 8F60 A9 43 95 C4			mva #$43 :STACKORIGIN+STACKWIDTH*3,x
  1688 8F64 E8				inx
  1689 8F65 AD 80 20 95 94		mva FREQ :STACKORIGIN,x
  1690 8F6A AD 81 20 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1691 8F6F AD 82 20 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1692 8F74 AD 83 20 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1693 8F79 20 0F 87			jsr @FDIV
  1694 8F7C CA				dex
  1695 8F7D B5 94			lda :STACKORIGIN,x
  1696 8F7F 8D 89 20			sta RATIO
  1697 8F82 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1698 8F84 8D 8A 20			sta RATIO+1
  1699 8F87 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1700 8F89 8D 8B 20			sta RATIO+2
  1701 8F8C B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1702 8F8E 8D 8C 20			sta RATIO+3
  1703
  1704 				; optimize FAIL ('@F2I', settempo.inc), line = 25
  1705
  1706 8F91 A9 01 95 94			mva #$01 :STACKORIGIN,x
  1707 8F95 E8				inx
  1708 8F96 AD 89 20 95 94		mva RATIO :STACKORIGIN,x
  1709 8F9B AD 8A 20 95 A4		mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
  1710 8FA0 AD 8B 20 95 B4		mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
  1711 8FA5 AD 8C 20 95 C4		mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
  1712 8FAA 20 9E 87			jsr @F2I
  1713 8FAD A9 00 95 A3			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  1714 8FB1 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1715 8FB5 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1716 8FB9 B5 93			lda :STACKORIGIN-1,x
  1717 8FBB 18 75 94			add :STACKORIGIN,x
  1718 8FBE 8D 8D 20			sta _RATIO
  1719 8FC1 CA				dex
  1720 8FC2 CA				dex
  1721
  1722 				; optimize OK (settempo.inc), line = 26
  1723
  1724 8FC3 AD 8D 20			lda _RATIO
  1725 8FC6 C9 10			cmp #$10
  1726 8FC8 90 12			jcc l_0429
  1727 8FCA A9 00			lda #$00
  1728 8FCC 8D 89 20			sta RATIO
  1729 8FCF 8D 8A 20			sta RATIO+1
  1730 8FD2 A9 70			lda #$70
  1731 8FD4 8D 8B 20			sta RATIO+2
  1732 8FD7 A9 41			lda #$41
  1733 8FD9 8D 8C 20			sta RATIO+3
  1734 8FDC			l_0429
  1735
  1736 				; optimize OK (settempo.inc), line = 29
  1737
  1738 8FDC A5 F5			lda _TIMERSTATUS
  1739 8FDE 29 C0			and #$C0
  1740 8FE0 0D 8D 20			ora _RATIO
  1741 8FE3 85 F5			sta _TIMERSTATUS
  1742
  1743 				; optimize OK (settempo.inc), line = 30
  1744
  1745 8FE5 A9 01			lda #$01
  1746 8FE7 85 F4			sta _SUBCNT
  1747
  1748 				; optimize FAIL ('@I2F', settempo.inc), line = 32
  1749
  1750 8FE9 E8				inx
  1751 8FEA A9 00 95 94			mva #$00 :STACKORIGIN,x
  1752 8FEE A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1753 8FF2 E8				inx
  1754 8FF3 AD 80 20 95 94		mva FREQ :STACKORIGIN,x
  1755 8FF8 AD 81 20 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1756 8FFD AD 82 20 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1757 9002 AD 83 20 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1758 9007 E8				inx
  1759 9008 AD 8D 20 95 94		mva _RATIO :STACKORIGIN,x
  1760 900D A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1761 9011 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1762 9015 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1763 9019 20 28 88			jsr @I2F
  1764 901C 20 58 86			jsr @FMUL
  1765 901F CA				dex
  1766 9020 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1767 9024 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1768 9028 20 4D 88			jsr @I2F_m
  1769 902B 20 0F 87			jsr @FDIV
  1770 902E CA				dex
  1771 902F 20 78 84			jsr @FROUND
  1772 9032 20 9E 87			jsr @F2I
  1773 9035 B5 94			lda :STACKORIGIN,x
  1774 9037 8D 88 20			sta FDIV
  1775
  1776 				; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 36
  1777
  1778 903A A9 00 95 94			mva #$00 :STACKORIGIN,x
  1779 903E A9 87 95 A4			mva #$87 :STACKORIGIN+STACKWIDTH,x
  1780 9042 A9 93 95 B4			mva #$93 :STACKORIGIN+STACKWIDTH*2,x
  1781 9046 A9 03 95 C4			mva #$03 :STACKORIGIN+STACKWIDTH*3,x
  1782 904A E8				inx
  1783 904B AD 3D 20 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  1784 9050 AD 3E 20 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  1785 9055 AD 3F 20 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  1786 905A AD 40 20 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  1787 905F 20 2D 83			jsr divmulINT.DIV
  1788 9062 CA				dex
  1789 9063 B5 94			lda :STACKORIGIN,x
  1790 9065 8D 47 20			sta BPM
  1791 9068 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1792 906A 8D 48 20			sta BPM+1
  1793 906D CA				dex
  1794
  1795 				; optimize OK (settempo.inc), line = 39
  1796
  1797 906E A5 F5			lda _TIMERSTATUS
  1798 9070 49 80			eor #$80
  1799 9072 85 F5			sta _TIMERSTATUS
  1800
  1801 				; -------------------  ASM Block 00000072  -------------------
  1802
  1803 9074 78			    sei  // disable IRQ
  1804 				  // reset POKEY
  1805 9075 A9 00		    lda #$00
  1806 9077 A0 03		    ldy #$03
  1807 9079 8D 08 D2		    sta AUDCTL
  1808 907C 8D 01 D2		    sta AUDC1
  1809 907F 8C 0F D2		    sty SKCTL
  1810 				  // setup TIMER1
  1811 9082 8D 08 D2		    sta AUDCTL
  1812 9085 AD 88 20 8D 00 D2	    mva FDIV AUDF1
  1813 				  // initialize IRQ for TIMER1
  1814 				    // lda irqens
  1815 				    // ora #$01
  1816 				    // sta irqens
  1817 				    // sta irqen
  1818 				  // start timer strobe
  1819 908B 8D 09 D2		    sta stimer
  1820
  1821 908E 58			    cli  // enable IRQ
  1822 				  
  1823 				; ------------------------------------------------------------
  1824
  1825 = 2080			FREQ	= DATAORIGIN+$0080
  1826 = 2084			_FREQ	= DATAORIGIN+$0084
  1827 = 2088			FDIV	= DATAORIGIN+$0088
  1828 = 2089			RATIO	= DATAORIGIN+$0089
  1829 = 208D			_RATIO	= DATAORIGIN+$008D
  1830
  1831 = 2080			@VarData	= FREQ
  1832 = 000E			@VarDataSize	= 14
  1833
  1834 908F			@exit
  1835 					.ifdef @new
  1836 					lda <@VarData
  1837 					sta :ztmp
  1838 					lda >@VarData
  1839 					ldy #@VarDataSize-1
  1840 					jmp @FreeMem
  1841 					els
  1842 908F 60				rts						; ret
  1843 					eif
  1844 				.endl
  1845
  1846 9090			.local	PROCESSTRACK					; PROCEDURE | KEEP
  1847
  1848 9090 4C A6 92			jmp l_046D
  1849
  1850 9093			.local	READB						; PROCEDURE | INLINE
  1851
  1852 					.MACRO m@INLINE
  1853 				
  1854 				; optimize OK (processtrack.inc), line = 11
  1855 				
  1856 					ldy #$00
  1857 					lda (_PTR),y
  1858 					sta EVENT
  1859 				
  1860 				; optimize FAIL (0, processtrack.inc), line = 12
  1861 				
  1862 					inc _ADR
  1863 					sne
  1864 					inc _ADR+1
  1865 				
  1866 				; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 13
  1867 				
  1868 					jsr MEMBOUNDCHECK
  1869 					.ENDM
  1870 9093			@exit
  1871 				.endl
  1872
  1873 9093			.local	READVARL					; PROCEDURE | ASSEMBLER
  1874
  1875 				; -------------------  ASM Block 00000073  -------------------
  1876
  1877 9093			    icl 'midfile/asms/readvar.asm'
Source: readvar.asm
     1 = 00F6			A equ _delta;
     2 = 00F7			B equ _delta+1;
     3 = 00F8			C equ _delta+2;
     4 = 00F9			D equ _delta+3;
     5
     6 				  .MACRO m@read2A
     7 				    ldy #0
     8 				    lda (_PTR),y
     9 				    sta A
    10 				    inc _ADR
    11 				    sne
    12 				    inc _ADR+1
    13 				    jsr MEMBOUNDCHECK
    14 				    lda A
    15 				  .ENDM
    16
    17 9093 A0 00		  ldy #0
    18 9095 84 F6		  sty A
    19 9097 84 F7		  sty B
    20 9099 84 F8		  sty C
    21 909B 84 F9		  sty D
    22
    23 				// read block
    24
    25 				// read 1st byte to A
    26 909D			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 909D A0 00		    ldy #0
     2 909F B1 E2		    lda (_PTR),y
     3 90A1 85 F6		    sta A
     4 90A3 E6 E2		    inc _ADR
     5 90A5 D0 02		    sne
     6 90A7 E6 E3		    inc _ADR+1
     7 90A9 20 AB 8A		    jsr MEMBOUNDCHECK
     8 90AC A5 F6		    lda A
Source: readvar.asm
    27
    28 90AE 10 53		  bpl endRead
    29
    30 				// move A to B and read 2nd byte to A
    31 				// B <- A = 4th readed byte
    32 90B0 29 7F			and #$7F
    33 90B2 85 F7			sta B
    34
    35 				// read 2nd byte
    36 90B4			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 90B4 A0 00		    ldy #0
     2 90B6 B1 E2		    lda (_PTR),y
     3 90B8 85 F6		    sta A
     4 90BA E6 E2		    inc _ADR
     5 90BC D0 02		    sne
     6 90BE E6 E3		    inc _ADR+1
     7 90C0 20 AB 8A		    jsr MEMBOUNDCHECK
     8 90C3 A5 F6		    lda A
Source: readvar.asm
    37
    38 90C5 10 3C		  bpl endRead
    39
    40 				// mova B to C, A to B and read 3rd byte to A
    41 				// C <- B <- A = 4th readed byte
    42 90C7 A5 F7			lda B
    43 90C9 85 F8			sta C
    44 90CB A5 F6			lda A
    45 90CD 29 7F			and #$7F
    46 90CF 85 F7			sta B
    47
    48 				// read 3rd
    49 90D1			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 90D1 A0 00		    ldy #0
     2 90D3 B1 E2		    lda (_PTR),y
     3 90D5 85 F6		    sta A
     4 90D7 E6 E2		    inc _ADR
     5 90D9 D0 02		    sne
     6 90DB E6 E3		    inc _ADR+1
     7 90DD 20 AB 8A		    jsr MEMBOUNDCHECK
     8 90E0 A5 F6		    lda A
Source: readvar.asm
    50
    51 90E2 10 1F		  bpl endRead
    52
    53 				// move C to D, B to C, A to B and read 4th byte to A
    54 				// D <- C <- B <- A = 4th readed byte
    55 90E4 A5 F8			lda C
    56 90E6 85 F9			sta D
    57 90E8 A5 F7			lda B
    58 90EA 85 F8			sta C
    59 90EC A5 F6			lda A
    60 90EE 29 7F			and #$7F
    61 90F0 85 F7			sta B
    62
    63 				// read 4th
    64 90F2			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 90F2 A0 00		    ldy #0
     2 90F4 B1 E2		    lda (_PTR),y
     3 90F6 85 F6		    sta A
     4 90F8 E6 E2		    inc _ADR
     5 90FA D0 02		    sne
     6 90FC E6 E3		    inc _ADR+1
     7 90FE 20 AB 8A		    jsr MEMBOUNDCHECK
     8 9101 A5 F6		    lda A
Source: readvar.asm
    65
    66 				// end read block
    67 9103			endRead:
    68
    69 				// decode block
    70 				// 'A' stays as it is
    71
    72 				// 'B' if geather than zero, lets decode
    73 9103 A5 F7		  lda B
    74 9105 F0 0A		  beq decodeC
    75
    76 				// 76543210
    77 				// 0bbbbbbb and %1
    78 				// 0000000b
    79 				//        |
    80 				// +------+ 7:asl
    81 				// v
    82 				// b0000000 ora A
    83 				// baaaaaaa
    84
    85 9107 46 F7		  lsr B
    86 9109 90 06		  bcc decodeC
    87
    88 910B A5 F6		  lda A
    89 910D 09 80		  ora #$80
    90 910F 85 F6		  sta A
    91
    92 9111			decodeC:
    93 				// 'C' if geather than zero, lets decode
    94 9111 A5 F8		  lda C
    95 9113 F0 12		  beq decodeD
    96
    97 				// 76543210
    98 				// 0ccccccc and %11
    99 				// 000000cc
   100 				//       ||
   101 				// +-----+| 6:asl
   102 				// |+-----+
   103 				// vv
   104 				// cc000000 ora B
   105 				// ccbbbbbb
   106 9115 29 03		  and #%11    // 2
   107 9117 F0 08		  beq noOrC   // 2**
   108 9119 A8			  tay         // 2
   109 911A B9 3F 91		  lda OrC,y   // 4*
   110 911D 05 F7		  ora B       // 3
   111 911F 85 F7		  sta B       // 3
   112
   113 9121			noOrC:
   114 9121 A5 F8		  lda C       // 3
   115 9123 4A			  lsr @       // 2
   116 9124 4A			  lsr @       // 2
   117 9125 85 F8		  sta C       // 3
   118 				              //=26*+**
   119
   120 9127			decodeD:
   121 				// 'D' if geather than zero, lets decode
   122 9127 A5 F9		  lda D
   123 9129 F0 13		  beq endDecode
   124
   125 				// 76543210
   126 				// 0ddddddd and %111
   127 				// 00000ddd
   128 				//      |||
   129 				// +----+||
   130 				// |+----+| 5:asl
   131 				// ||+----+
   132 				// vvv
   133 				// ddd00000 ora C
   134 				// dddccccc
   135
   136 912B 29 07		  and #%111   // 2
   137 912D F0 08		  beq noOrD   // 2**
   138 912F A8			  tay         // 2
   139 9130 B9 43 91		  lda OrD,y   // 4*
   140 9133 05 F8		  ora C       // 3
   141 9135 85 F8		  sta C       // 3
   142
   143 9137			noOrD:
   144 9137 A5 F9		  lda D       // 3
   145 9139 4A			  lsr @       // 2
   146 913A 4A			  lsr @       // 2
   147 913B 4A			  lsr @       // 2
   148 913C 85 F9		  sta D       // 3
   149 				              //=28*+**
   150 913E			endDecode:
   151 913E 60			  rts
   152
   153 913F			OrC:
   154 913F 00			  dta %00000000
   155 9140 40			  dta %01000000
   156 9141 80			  dta %10000000
   157 9142 C0			  dta %11000000
   158
   159 9143			OrD:
   160 9143 00			  dta %00000000
   161 9144 20			  dta %00100000
   162 9145 40			  dta %01000000
   163 9146 60			  dta %01100000
   164 9147 80			  dta %10000000
   165 9148 A0			  dta %10100000
   166 9149 C0			  dta %11000000
   167 914A E0			  dta %11100000
  1878 				  
  1879 914B			@exit
  1880 					.ifdef @new
  1881 					lda <@VarData
  1882 					sta :ztmp
  1883 					lda >@VarData
  1884 					ldy #@VarDataSize-1
  1885 					jmp @FreeMem
  1886 					els
  1887 914B 60				rts						; ret
  1888 					eif
  1889 				.endl
  1890
  1891 914C			.local	READ24						; PROCEDURE | ASSEMBLER
  1892
  1893 				; -------------------  ASM Block 00000074  -------------------
  1894
  1895 914C			    icl 'midfile/asms/read24bigendian.pas'
Source: read24bigendian.pas
     1 				  .MACRO m@readByte storeTo
     2 				    ldy #0
     3 				    lda (_PTR),y
     4 				    sta :storeTo
     5 				    inc _ADR
     6 				    sne
     7 				    inc _ADR+1
     8 				    jsr MEMBOUNDCHECK
     9 				  .ENDM
    10
    11 914C			  m@readByte _delta+2
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 914C A0 00		    ldy #0
     2 914E B1 E2		    lda (_PTR),y
     3 9150 85 F8		    sta _DELTA+2
     4 9152 E6 E2		    inc _ADR
     5 9154 D0 02		    sne
     6 9156 E6 E3		    inc _ADR+1
     7 9158 20 AB 8A		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    12 915B			  m@readByte _delta+1
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 915B A0 00		    ldy #0
     2 915D B1 E2		    lda (_PTR),y
     3 915F 85 F7		    sta _DELTA+1
     4 9161 E6 E2		    inc _ADR
     5 9163 D0 02		    sne
     6 9165 E6 E3		    inc _ADR+1
     7 9167 20 AB 8A		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    13 916A			  m@readByte _delta+0
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 916A A0 00		    ldy #0
     2 916C B1 E2		    lda (_PTR),y
     3 916E 85 F6		    sta _DELTA+0
     4 9170 E6 E2		    inc _ADR
     5 9172 D0 02		    sne
     6 9174 E6 E3		    inc _ADR+1
     7 9176 20 AB 8A		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    14 9179 A9 00		  lda #0
    15 917B 85 F9		  sta _delta+3
  1896 				  
  1897 917D			@exit
  1898 					.ifdef @new
  1899 					lda <@VarData
  1900 					sta :ztmp
  1901 					lda >@VarData
  1902 					ldy #@VarDataSize-1
  1903 					jmp @FreeMem
  1904 					els
  1905 917D 60				rts						; ret
  1906 					eif
  1907 				.endl
  1908
  1909 917E			.local	EVENTMIDI3					; PROCEDURE
  1910
  1911 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 4
  1912
  1913 917E 20 C0 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1914
  1915 				; optimize FAIL ('m@INLINE', events.inc), line = 5
  1916
  1917 9181				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1918 9181				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9181 A0 00			ldy #$00
     5 9183 B1 E2			lda (_PTR),y
     6 9185 85 FF			sta EVENT
    10 9187 E6 E2			inc _ADR
    11 9189 D0 02			sne
    12 918B E6 E3			inc _ADR+1
    16 918D 20 AB 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1919 					.endl
  1920 9190 20 C0 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1921
  1922 				; optimize FAIL ('m@INLINE', events.inc), line = 6
  1923
  1924 9193				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1925 9193				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9193 A0 00			ldy #$00
     5 9195 B1 E2			lda (_PTR),y
     6 9197 85 FF			sta EVENT
    10 9199 E6 E2			inc _ADR
    11 919B D0 02			sne
    12 919D E6 E3			inc _ADR+1
    16 919F 20 AB 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1926 					.endl
  1927 91A2 20 C0 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1928
  1929 				; optimize OK (events.inc), line = 15
  1930
  1931 91A5 A5 FF			lda EVENT
  1932 91A7 F0 12			jeq l_04A8
  1933 91A9 A5 E8			lda _EVENT
  1934 91AB 29 F0			and #$F0
  1935 91AD C9 90			cmp #$90
  1936 91AF D0 0A			jne l_04A8
  1937
  1938 				; optimize OK (events.inc), line = 16
  1939
  1940 91B1 A5 E8			lda _EVENT
  1941 91B3 29 0F			and #$0F
  1942 91B5 A8				tay
  1943 91B6 A5 FF			lda MC6850.MC_BYTE
  1944 91B8 99 49 20			sta adr.CHNVOLUME,y
  1945 91BB			l_04A8
  1946 91BB			@exit
  1947 					.ifdef @new
  1948 					lda <@VarData
  1949 					sta :ztmp
  1950 					lda >@VarData
  1951 					ldy #@VarDataSize-1
  1952 					jmp @FreeMem
  1953 					els
  1954 91BB 60				rts						; ret
  1955 					eif
  1956 				.endl
  1957
  1958 91BC			.local	EVENTMIDI2					; PROCEDURE
  1959
  1960 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 22
  1961
  1962 91BC 20 C0 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1963
  1964 				; optimize FAIL ('m@INLINE', events.inc), line = 23
  1965
  1966 91BF				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1967 91BF				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 91BF A0 00			ldy #$00
     5 91C1 B1 E2			lda (_PTR),y
     6 91C3 85 FF			sta EVENT
    10 91C5 E6 E2			inc _ADR
    11 91C7 D0 02			sne
    12 91C9 E6 E3			inc _ADR+1
    16 91CB 20 AB 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1968 					.endl
  1969 91CE 20 C0 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1970 91D1			@exit
  1971 					.ifdef @new
  1972 					lda <@VarData
  1973 					sta :ztmp
  1974 					lda >@VarData
  1975 					ldy #@VarDataSize-1
  1976 					jmp @FreeMem
  1977 					els
  1978 91D1 60				rts						; ret
  1979 					eif
  1980 				.endl
  1981
  1982 91D2			.local	EVENTSYSEX					; PROCEDURE
  1983
  1984 				; optimize FAIL ('READVARL', events.inc), line = 32
  1985
  1986 91D2 20 93 90			jsr READVARL
  1987
  1988 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 34
  1989
  1990 91D5 20 C0 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1991
  1992 				; --- WhileProlog
  1993 91D8 4C EF 91			jmp l_04C7
  1994 91DB			l_04C8
  1995
  1996 				; optimize FAIL ('m@INLINE', events.inc), line = 40
  1997
  1998 91DB				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1999 91DB				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 91DB A0 00			ldy #$00
     5 91DD B1 E2			lda (_PTR),y
     6 91DF 85 FF			sta EVENT
    10 91E1 E6 E2			inc _ADR
    11 91E3 D0 02			sne
    12 91E5 E6 E3			inc _ADR+1
    16 91E7 20 AB 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2000 					.endl
  2001
  2002 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 42
  2003
  2004 91EA 20 C0 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2005
  2006 				; optimize FAIL (0, events.inc), line = 46
  2007
  2008 91ED C6 F6			dec _TMP
  2009 91EF			l_04C7
  2010
  2011 				; optimize OK (events.inc), line = 38
  2012
  2013 91EF A5 F6			lda _TMP
  2014 91F1 D0 E8			jne l_04C8
  2015 91F3			@exit
  2016 					.ifdef @new
  2017 					lda <@VarData
  2018 					sta :ztmp
  2019 					lda >@VarData
  2020 					ldy #@VarDataSize-1
  2021 					jmp @FreeMem
  2022 					els
  2023 91F3 60				rts						; ret
  2024 					eif
  2025 				.endl
  2026
  2027 91F4			.local	EVENTMETA					; PROCEDURE
  2028
  2029 				; optimize FAIL ('m@INLINE', events.inc), line = 58
  2030
  2031 91F4				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2032 91F4				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 91F4 A0 00			ldy #$00
     5 91F6 B1 E2			lda (_PTR),y
     6 91F8 85 FF			sta EVENT
    10 91FA E6 E2			inc _ADR
    11 91FC D0 02			sne
    12 91FE E6 E3			inc _ADR+1
    16 9200 20 AB 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2033 					.endl
  2034
  2035 				; optimize FAIL ('READVARL', events.inc), line = 59
  2036
  2037 9203 20 93 90			jsr READVARL
  2038
  2039 				; optimize OK (events.inc), line = 61
  2040
  2041 9206 A5 FF			lda EVENT
  2042 9208 C9 2F			cmp #$2F
  2043 920A D0 0B			jne l_04F2
  2044
  2045 				; optimize FAIL (0, events.inc), line = 63
  2046
  2047 920C C6 DF			dec PLAYINGTRACKS
  2048
  2049 				; optimize OK (events.inc), line = 64
  2050
  2051 920E A5 E0			lda _STATUS
  2052 9210 09 40			ora #$40
  2053 9212 85 E0			sta _STATUS
  2054 9214 4C A5 92			jmp l_050A
  2055 9217			l_04F2
  2056
  2057 				; optimize OK (events.inc), line = 66
  2058
  2059 9217 A5 FF			lda EVENT
  2060 9219 C9 51			cmp #$51
  2061 921B D0 1D			jne l_051C
  2062
  2063 				; optimize FAIL ('READ24', events.inc), line = 68
  2064
  2065 921D 20 4C 91			jsr READ24
  2066
  2067 				; optimize OK (events.inc), line = 69
  2068
  2069 9220 A5 F6			lda _DELTA
  2070 9222 8D 3D 20			sta MS_PER_QNOTE
  2071 9225 A5 F7			lda _DELTA+1
  2072 9227 8D 3E 20			sta MS_PER_QNOTE+1
  2073 922A A5 F8			lda _DELTA+2
  2074 922C 8D 3F 20			sta MS_PER_QNOTE+2
  2075 922F A5 F9			lda _DELTA+3
  2076 9231 8D 40 20			sta MS_PER_QNOTE+3
  2077
  2078 				; optimize FAIL ('SETTEMPO', events.inc), line = 70
  2079
  2080 9234 20 7A 8E			jsr SETTEMPO
  2081 9237 4C A5 92			jmp l_052C
  2082 923A			l_051C
  2083
  2084 				; optimize OK (events.inc), line = 73
  2085
  2086 923A A5 FF			lda EVENT
  2087 923C C9 58			cmp #$58
  2088 923E D0 53			jne l_053E
  2089
  2090 				; optimize FAIL ('m@INLINE', events.inc), line = 75
  2091
  2092 9240				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2093 9240				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9240 A0 00			ldy #$00
     5 9242 B1 E2			lda (_PTR),y
     6 9244 85 FF			sta EVENT
    10 9246 E6 E2			inc _ADR
    11 9248 D0 02			sne
    12 924A E6 E3			inc _ADR+1
    16 924C 20 AB 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2094 					.endl
  2095 924F A5 FF			lda EVENT
  2096 9251 8D 43 20			sta TACTNUM
  2097
  2098 				; optimize FAIL ('m@INLINE', events.inc), line = 76
  2099
  2100 9254				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2101 9254				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9254 A0 00			ldy #$00
     5 9256 B1 E2			lda (_PTR),y
     6 9258 85 FF			sta EVENT
    10 925A E6 E2			inc _ADR
    11 925C D0 02			sne
    12 925E E6 E3			inc _ADR+1
    16 9260 20 AB 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2102 					.endl
  2103 9263 A5 FF			lda EVENT
  2104 9265 8D 44 20			sta TACTDENUM
  2105
  2106 				; optimize FAIL ('m@INLINE', events.inc), line = 77
  2107
  2108 9268				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2109 9268				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9268 A0 00			ldy #$00
     5 926A B1 E2			lda (_PTR),y
     6 926C 85 FF			sta EVENT
    10 926E E6 E2			inc _ADR
    11 9270 D0 02			sne
    12 9272 E6 E3			inc _ADR+1
    16 9274 20 AB 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2110 					.endl
  2111 9277 A5 FF			lda EVENT
  2112 9279 8D 45 20			sta TICKS_PER_QNOTE
  2113
  2114 				; optimize FAIL ('m@INLINE', events.inc), line = 78
  2115
  2116 927C				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2117 927C				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 927C A0 00			ldy #$00
     5 927E B1 E2			lda (_PTR),y
     6 9280 85 FF			sta EVENT
    10 9282 E6 E2			inc _ADR
    11 9284 D0 02			sne
    12 9286 E6 E3			inc _ADR+1
    16 9288 20 AB 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2118 					.endl
  2119 928B A5 FF			lda EVENT
  2120 928D 8D 46 20			sta TICKS_PER_32ND
  2121 9290 4C A5 92			jmp l_0564
  2122 9293			l_053E
  2123
  2124 				; --- WhileProlog
  2125 9293 4C A1 92			jmp l_0566
  2126 9296			l_0567
  2127
  2128 				; optimize FAIL (0, events.inc), line = 85
  2129
  2130 9296 C6 F6			dec _TMP
  2131
  2132 				; optimize FAIL (0, events.inc), line = 86
  2133
  2134 9298 E6 E2			inc _ADR
  2135 929A D0 02			sne
  2136 929C E6 E3			inc _ADR+1
  2137
  2138 				; optimize FAIL ('MEMBOUNDCHECK', events.inc), line = 87
  2139
  2140 929E 20 AB 8A			jsr MEMBOUNDCHECK
  2141 92A1			l_0566
  2142
  2143 				; optimize OK (events.inc), line = 83
  2144
  2145 92A1 A5 F6			lda _TMP
  2146 92A3 D0 F1			jne l_0567
  2147 92A5			l_0564
  2148 92A5			l_052C
  2149 92A5			l_050A
  2150 92A5			@exit
  2151 					.ifdef @new
  2152 					lda <@VarData
  2153 					sta :ztmp
  2154 					lda >@VarData
  2155 					ldy #@VarDataSize-1
  2156 					jmp @FreeMem
  2157 					els
  2158 92A5 60				rts						; ret
  2159 					eif
  2160 				.endl
  2161 92A6			l_046D
  2162
  2163 				; -------------------  ASM Block 00000075  -------------------
  2164
  2165 				 ldy _bank \ lda $100,y \ sta PORTB 
  2165 92A6 A4 E1		 LDY _BANK 
  2165 92A8 B9 00 01		 LDA $100,Y 
  2165 92AB 8D 01 D3		 STA PORTB 
  2166 				; --- RepeatUntilProlog
  2167 92AE			l_057E
  2168
  2169 				; optimize OK (processtrack.inc), line = 33
  2170
  2171 92AE A5 E0			lda _STATUS
  2172 92B0 30 2E			jmi l_0594
  2173
  2174 				; optimize FAIL ('READVARL', processtrack.inc), line = 35
  2175
  2176 92B2 20 93 90			jsr READVARL
  2177
  2178 				; optimize OK (processtrack.inc), line = 36
  2179
  2180 92B5 A5 F9			lda _DELTA+3
  2181 92B7 30 24			jmi l_05A6
  2182 92B9 05 F8			ora _DELTA+2
  2183 92BB 05 F7			ora _DELTA+1
  2184 92BD 05 F6			ora _DELTA
  2185 92BF F0 1C			jeq l_05A6
  2186
  2187 				; optimize OK (processtrack.inc), line = 38
  2188
  2189 92C1 A5 E4			lda _TRACKTIME
  2190 92C3 18 65 F6			add _DELTA
  2191 92C6 85 E4			sta _TRACKTIME
  2192 92C8 A5 E5			lda _TRACKTIME+1
  2193 92CA 65 F7			adc _DELTA+1
  2194 92CC 85 E5			sta _TRACKTIME+1
  2195 92CE A5 E6			lda _TRACKTIME+2
  2196 92D0 65 F8			adc _DELTA+2
  2197 92D2 85 E6			sta _TRACKTIME+2
  2198 92D4 A5 E7			lda _TRACKTIME+3
  2199 92D6 65 F9			adc _DELTA+3
  2200 92D8 85 E7			sta _TRACKTIME+3
  2201 92DA 4C 48 93			jmp b_057E					; break
  2202 92DD			l_05A6
  2203 92DD 4C E6 92			jmp l_05BA
  2204 92E0			l_0594
  2205
  2206 				; optimize OK (processtrack.inc), line = 43
  2207
  2208 92E0 A5 E0			lda _STATUS
  2209 92E2 29 7F			and #$7F
  2210 92E4 85 E0			sta _STATUS
  2211 92E6			l_05BA
  2212
  2213 				; optimize OK (processtrack.inc), line = 45
  2214
  2215 92E6 A0 00			ldy #$00
  2216 92E8 B1 E2			lda (_PTR),y
  2217 92EA 10 16			jpl l_05DD
  2218
  2219 				; optimize FAIL ('m@INLINE', processtrack.inc), line = 47
  2220
  2221 92EC				.local READB
  2222 92EC				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 92EC A0 00			ldy #$00
     5 92EE B1 E2			lda (_PTR),y
     6 92F0 85 FF			sta EVENT
    10 92F2 E6 E2			inc _ADR
    11 92F4 D0 02			sne
    12 92F6 E6 E3			inc _ADR+1
    16 92F8 20 AB 8A			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2223 					.endl
  2224 92FB A5 FF			lda EVENT
  2225 92FD 85 E8			sta _EVENT
  2226 92FF 4C 06 93			jmp l_05EE
  2227 9302			l_05DD
  2228
  2229 				; optimize OK (processtrack.inc), line = 50
  2230
  2231 9302 A5 E8			lda _EVENT
  2232 9304 85 FF			sta EVENT
  2233 9306			l_05EE
  2234
  2235 				; optimize OK (processtrack.inc), line = 52
  2236
  2237 9306 A9 BF			lda #$BF
  2238 9308 C5 E8			cmp _EVENT
  2239 930A 90 06			jcc l_0606
  2240
  2241 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 54
  2242
  2243 930C 20 7E 91			jsr EVENTMIDI3
  2244 930F 4C 3F 93			jmp l_0611
  2245 9312			l_0606
  2246 9312 A9 DF			lda #$DF
  2247 9314 C5 E8			cmp _EVENT
  2248 9316 90 06			jcc l_0623
  2249
  2250 				; optimize FAIL ('EVENTMIDI2', processtrack.inc), line = 56
  2251
  2252 9318 20 BC 91			jsr EVENTMIDI2
  2253 931B 4C 3F 93			jmp l_062E
  2254 931E			l_0623
  2255 931E A9 EF			lda #$EF
  2256 9320 C5 E8			cmp _EVENT
  2257 9322 90 06			jcc l_0640
  2258
  2259 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 58
  2260
  2261 9324 20 7E 91			jsr EVENTMIDI3
  2262 9327 4C 3F 93			jmp l_064B
  2263 932A			l_0640
  2264 932A A9 F7			lda #$F7
  2265 932C C5 E8			cmp _EVENT
  2266 932E 90 06			jcc l_065D
  2267
  2268 				; optimize FAIL ('EVENTSYSEX', processtrack.inc), line = 60
  2269
  2270 9330 20 D2 91			jsr EVENTSYSEX
  2271 9333 4C 3F 93			jmp l_0668
  2272 9336			l_065D
  2273 9336 A5 E8			lda _EVENT
  2274 9338 C9 FF			cmp #$FF
  2275 933A D0 03			jne l_067A
  2276
  2277 				; optimize FAIL ('EVENTMETA', processtrack.inc), line = 61
  2278
  2279 933C 20 F4 91			jsr EVENTMETA
  2280 933F			l_067A
  2281 933F			l_0668
  2282 933F			l_064B
  2283 933F			l_062E
  2284 933F			l_0611
  2285
  2286 				; optimize OK (processtrack.inc), line = 63
  2287
  2288 933F A5 E0			lda _STATUS
  2289 9341 29 40			and #$40
  2290 9343 D0 03 4C AE 92		jeq l_057E
  2291 9348			b_057E
  2292
  2293 				; optimize OK (processtrack.inc), line = 65
  2294
  2295 9348 A5 E0			lda _STATUS
  2296 934A 09 80			ora #$80
  2297 934C 85 E0			sta _STATUS
  2298
  2299 				; ------------------------------------------------------------
  2300
  2301 = 00FF			EVENT	= $FF
  2302 934E			@exit
  2303 					.ifdef @new
  2304 					lda <@VarData
  2305 					sta :ztmp
  2306 					lda >@VarData
  2307 					ldy #@VarDataSize-1
  2308 					jmp @FreeMem
  2309 					els
  2310 934E 60				rts						; ret
  2311 					eif
  2312 				.endl
  2313
  2314 934F			.local	PROCESSMIDI					; PROCEDURE
  2315
  2316 				; optimize FAIL ('MIDI_FIFO.FIFO_PUSHDIRECT2MC6850', processmidi.inc), line = 29
  2317
  2318 934F 20 AA 89			jsr MIDI_FIFO.FIFO_PUSHDIRECT2MC6850
  2319
  2320 				; optimize OK (processmidi.inc), line = 31
  2321
  2322 9352 A5 F5			lda _TIMERSTATUS
  2323 9354 10 03			jpl l_06B4
  2324 9356 4C D0 93			jmp @exit					; exit
  2325 9359			l_06B4
  2326
  2327 				; optimize OK (processmidi.inc), line = 32
  2328
  2329 9359 A5 DE			lda CTRK
  2330 935B CD 3A 20			cmp TOTALTRACKS
  2331 935E D0 11			jne l_06CB
  2332
  2333 				; optimize OK (processmidi.inc), line = 34
  2334
  2335 9360 A9 01			lda #$01
  2336 9362 85 DE			sta CTRK
  2337
  2338 				; optimize OK (processmidi.inc), line = 35
  2339
  2340 9364 AD 79 94			lda MIDTRACKS
  2341 9367 85 DC			sta CURTRACKPTR
  2342 9369 AD 7A 94			lda MIDTRACKS+1
  2343 936C 85 DD			sta CURTRACKPTR+1
  2344 936E 4C 7E 93			jmp l_06DE
  2345 9371			l_06CB
  2346
  2347 				; optimize FAIL (0, processmidi.inc), line = 39
  2348
  2349 9371 E6 DE			inc CTRK
  2350
  2351 				; optimize OK (processmidi.inc), line = 40
  2352
  2353 9373 A5 DC			lda CURTRACKPTR
  2354 9375 18 69 09			add #$09
  2355 9378 85 DC			sta CURTRACKPTR
  2356 937A 90 02			scc
  2357 937C E6 DD			inc CURTRACKPTR+1
  2358 937E			l_06DE
  2359
  2360 				; -------------------  ASM Block 00000076  -------------------
  2361
  2362 				// if _status and f_stop=0 then
  2363 937E A0 00		    ldy #0
  2364 9380 B1 DC		    lda (curTrackPtr),y
  2365 9382 29 40		    and #f_stop
  2366 9384 D0 4A		    bne skipProcessTrack
  2367
  2368 				// if _totalTicks>=_trackTime then ProcessTrack;
  2369 9386 A0 07		    ldy #7
  2370 9388 A5 F3		    lda _totalTicks+3
  2371 938A 38 F1 DC		    sub (curTrackPtr),y
  2372 938D D0 22		    bne L4
  2373 938F A5 F2		    lda _totalTicks+2
  2374 9391 88			    dey
  2375 9392 38 F1 DC		    sub (curTrackPtr),y
  2376 9395 D0 0E		    bne L1
  2377 9397 A5 F1		    lda _totalTicks+1
  2378 9399 88			    dey
  2379 939A 38 F1 DC		    sub (curTrackPtr),y
  2380 939D D0 06		    bne L1
  2381 939F A5 F0		    lda _totalTicks
  2382 93A1 88			    dey
  2383 93A2 38 F1 DC		    sub (curTrackPtr),y
  2384 93A5			  L1:
  2385 93A5 F0 10		    beq L5
  2386 93A7 B0 04		    bcs L3
  2387 93A9 A9 FF		    lda #$ff
  2388 93AB D0 0A		    bne L5
  2389 93AD			  L3:
  2390 93AD A9 01		    lda #$01
  2391 93AF D0 06		    bne L5
  2392 93B1			  L4:
  2393 93B1 50 04		    bvc L5
  2394 93B3 49 FF		    eor #$ff
  2395 93B5 09 01		    ora #$01
  2396 93B7			  L5:
  2397 93B7 30 17		    jmi skipProcessTrack
  2398
  2399 				  // copy current track data to work registers
  2400 93B9 A0 08		    ldy #sizeOf_TMIDTrack-1
  2401 93BB			  loop:
  2402 93BB B1 DC		    lda (curTrackPtr),y
  2403 93BD 99 E0 00		    sta _trkRegs,y
  2404 93C0 88			    dey
  2405 93C1 10 F8		    bpl loop
  2406
  2407 				  
  2408 				; optimize FAIL ('PROCESSTRACK', processmidi.inc), line = 92
  2409
  2410 93C3 20 90 90			jsr PROCESSTRACK
  2411
  2412 				; -------------------  ASM Block 00000077  -------------------
  2413
  2414 				// store work registers in track data
  2415 93C6 A0 08		    ldy #sizeOf_TMIDTrack-1
  2416 93C8			  loop2:
  2417 93C8 B9 E0 00		    lda _trkRegs,y
  2418 93CB 91 DC		    sta (curTrackPtr),y
  2419 93CD 88			    dey
  2420 93CE 10 F8		    bpl loop2
  2421
  2422 93D0			  skipProcessTrack:
  2423 				  
  2424 93D0			@exit
  2425 					.ifdef @new
  2426 					lda <@VarData
  2427 					sta :ztmp
  2428 					lda >@VarData
  2429 					ldy #@VarDataSize-1
  2430 					jmp @FreeMem
  2431 					els
  2432 93D0 60				rts						; ret
  2433 					eif
  2434 				.endl
  2435
  2436 93D1			.local	INITTIMER					; PROCEDURE
  2437
  2438 				; optimize OK (MIDFILES), line = 75
  2439
  2440 93D1 A9 00			lda #$00
  2441 93D3 85 F0			sta _TOTALTICKS
  2442 93D5 85 F1			sta _TOTALTICKS+1
  2443 93D7 85 F2			sta _TOTALTICKS+2
  2444 93D9 85 F3			sta _TOTALTICKS+3
  2445
  2446 				; optimize OK (MIDFILES), line = 76
  2447
  2448 93DB 8D 5D 20			sta TEMPOSHIFT
  2449 93DE 8D 5E 20			sta TEMPOSHIFT+1
  2450 93E1 8D 5F 20			sta TEMPOSHIFT+2
  2451 93E4 8D 60 20			sta TEMPOSHIFT+3
  2452
  2453 				; optimize OK (MIDFILES), line = 77
  2454
  2455 93E7 A9 01			lda #$01
  2456 93E9 85 F5			sta _TIMERSTATUS
  2457
  2458 				; optimize OK (MIDFILES), line = 78
  2459
  2460 93EB AD 3A 20			lda TOTALTRACKS
  2461 93EE 85 DE			sta CTRK
  2462
  2463 				; optimize OK (MIDFILES), line = 79
  2464
  2465 93F0 85 DF			sta PLAYINGTRACKS
  2466
  2467 				; -------------------  ASM Block 00000078  -------------------
  2468
  2469 93F2 78			    sei
  2470 93F3 A9 87 8D 10 02	    mva <INT_TIMER VTIMR1
  2471 93F8 A9 8A 8D 11 02	    mva >INT_TIMER VTIMR1+1
  2472 				  // reset POKEY
  2473 93FD A9 00		    lda #$00
  2474 93FF A0 03		    ldy #$03
  2475 9401 8D 08 D2		    sta AUDCTL
  2476 9404 8D 01 D2		    sta AUDC1
  2477 9407 8C 0F D2		    sty SKCTL
  2478 				  // setup TIMER1
  2479 940A 8D 08 D2		    sta AUDCTL
  2480 940D A5 53 8D 00 D2	    mva 83 AUDF1
  2481 				  // initialize IRQ for TIMER1
  2482 9412 A5 10		    lda irqens
  2483 9414 09 01		    ora #$01
  2484 9416 85 10		    sta irqens
  2485 9418 8D 0E D2		    sta irqen
  2486 				  // start timer strobe
  2487 941B 8D 09 D2		    sta stimer
  2488
  2489 941E 58			    cli  // enable IRQ
  2490 				  
  2491 941F			@exit
  2492 					.ifdef @new
  2493 					lda <@VarData
  2494 					sta :ztmp
  2495 					lda >@VarData
  2496 					ldy #@VarDataSize-1
  2497 					jmp @FreeMem
  2498 					els
  2499 941F 60				rts						; ret
  2500 					eif
  2501 				.endl
  2502
  2503 9420			.local	NULLLOADPRCS					; PROCEDURE
  2504
  2505 9420			@exit
  2506 					.ifdef @new
  2507 					lda <@VarData
  2508 					sta :ztmp
  2509 					lda >@VarData
  2510 					ldy #@VarDataSize-1
  2511 					jmp @FreeMem
  2512 					els
  2513 9420 60				rts						; ret
  2514 					eif
  2515 				.endl
  2516
  2517 				; ------------------------------------------------------------
  2518 				; ------------------------------------------------------------
  2519 9421			@UnitInit
  2520
  2521 				; optimize OK (MIDFILES), line = 112
  2522
  2523 9421 A9 00			lda #$00
  2524 9423 8D 59 20			sta OLDTIMERVEC
  2525 9426 8D 5A 20			sta OLDTIMERVEC+1
  2526
  2527 				; optimize OK (MIDFILES), line = 113
  2528
  2529 9429 A9 20			lda <NULLLOADPRCS
  2530 942B 8D 5B 20			sta LOADPROCESS
  2531 942E A9 94			lda >NULLLOADPRCS
  2532 9430 8D 5C 20			sta LOADPROCESS+1
  2533
  2534 				; optimize OK (MIDFILES), line = 114
  2535
  2536 9433 A9 80			lda #$80
  2537 9435 8D 3B 20			sta TICKDIV
  2538 9438 A9 01			lda #$01
  2539 943A 8D 3C 20			sta TICKDIV+1
  2540
  2541 				; optimize OK (MIDFILES), line = 115
  2542
  2543 943D A9 20			lda #$20
  2544 943F 8D 3D 20			sta MS_PER_QNOTE
  2545 9442 A9 A1			lda #$A1
  2546 9444 8D 3E 20			sta MS_PER_QNOTE+1
  2547 9447 A9 07			lda #$07
  2548 9449 8D 3F 20			sta MS_PER_QNOTE+2
  2549 944C A9 00			lda #$00
  2550 944E 8D 40 20			sta MS_PER_QNOTE+3
  2551
  2552 				; optimize OK (MIDFILES), line = 116
  2553
  2554 9451 8D 3A 20			sta TOTALTRACKS
  2555
  2556 				; optimize OK (MIDFILES), line = 117
  2557
  2558 9454 85 DE			sta CTRK
  2559
  2560 				; optimize OK (MIDFILES), line = 118
  2561
  2562 9456 A9 80			lda #$80
  2563 9458 85 F5			sta _TIMERSTATUS
  2564
  2565 				; optimize OK (MIDFILES), line = 120
  2566
  2567 945A A9 04			lda #$04
  2568 945C 8D 43 20			sta TACTNUM
  2569
  2570 				; optimize OK (MIDFILES), line = 121
  2571
  2572 945F 8D 44 20			sta TACTDENUM
  2573
  2574 				; optimize OK (MIDFILES), line = 122
  2575
  2576 9462 A9 18			lda #$18
  2577 9464 8D 45 20			sta TICKS_PER_QNOTE
  2578
  2579 				; optimize OK (MIDFILES), line = 123
  2580
  2581 9467 A9 08			lda #$08
  2582 9469 8D 46 20			sta TICKS_PER_32ND
  2583
  2584 946C AD 10 02			lda VTIMR1
  2585 946F 8D 59 20			sta OLDTIMERVEC
  2586 9472 AD 11 02			lda VTIMR1+1
  2587 9475 8D 5A 20			sta OLDTIMERVEC+1
  2588
  2589 9478 60				rts
  2590
  2591 				; ------------------------------------------------------------
  2592
  2593 = 0080			F_COUNTER	= $80
  2594 = 0040			F_TICK	= $40
  2595 = 00C0			F_FLAGS	= $C0
  2596 = 000F			F_RATIO	= $0F
  2597 = 0080			F_SKIPDELTA	= $80
  2598 = 0040			F_STOP	= $40
  2599 = 00E0			_TRKREGS	= $E0
  2600 = 0000			MID_0	= $00
  2601 = 0001			MID_1	= $01
  2602 = 0064			ERR_UNSUPPORTED_FORMAT	= $64
  2603 = 0065			ERR_NOT_ENOUGHT_MEMORY	= $65
  2604 = 6468544D		TAG_MTHD	= $6468544D
  2605 = 6B72544D		TAG_MTRK	= $6B72544D
  2606 = 0009			SIZEOF_TMIDTRACK	= $09
  2607 = 00DC			CURTRACKPTR	= $DC
  2608 = 00DE			CTRK	= $DE
  2609 = 00DF			PLAYINGTRACKS	= $DF
  2610 = 00F0			_TOTALTICKS	= $F0
  2611 = 00F4			_SUBCNT	= $F4
  2612 = 00F5			_TIMERSTATUS	= $F5
  2613 = 00F6			_DELTA	= $F6
  2614 = 00F6			_TMP	= $F6
  2615 = 00E0			_STATUS	= $E0
  2616 = 00E1			_BANK	= $E1
  2617 = 00E2			_PTR	= $E2
  2618 = 00E2			_ADR	= $E2
  2619 = 00E4			_TRACKTIME	= $E4
  2620 = 00E8			_EVENT	= $E8
  2621 = 2036			MIDDATA	= DATAORIGIN+$0036
  2622 = 2038			adr.MIDTRACKS	= [DATAORIGIN+$0038] .array [1]
  2623 9479			.var MIDTRACKS	= adr.MIDTRACKS .word
  2624 = 2039			FORMAT	= DATAORIGIN+$0039
  2625 = 203A			TOTALTRACKS	= DATAORIGIN+$003A
  2626 = 203B			TICKDIV	= DATAORIGIN+$003B
  2627 = 203D			MS_PER_QNOTE	= DATAORIGIN+$003D
  2628 = 2041			FPS	= DATAORIGIN+$0041
  2629 = 2042			FSD	= DATAORIGIN+$0042
  2630 = 2043			TACTNUM	= DATAORIGIN+$0043
  2631 = 2044			TACTDENUM	= DATAORIGIN+$0044
  2632 = 2045			TICKS_PER_QNOTE	= DATAORIGIN+$0045
  2633 = 2046			TICKS_PER_32ND	= DATAORIGIN+$0046
  2634 = 2047			BPM	= DATAORIGIN+$0047
  2635 = 2049			adr.CHNVOLUME	= [DATAORIGIN+$0049] .array [16]
  2636 9479			.var CHNVOLUME	= adr.CHNVOLUME .word
  2637 = 2059			OLDTIMERVEC	= DATAORIGIN+$0059
  2638 = 205B			LOADPROCESS	= DATAORIGIN+$005B
  2639 = 205D			TEMPOSHIFT	= DATAORIGIN+$005D
  2640
  2641 = 9479 38 20		MIDTRACKS
  2641 = 947B 49 20		CHNVOLUME
  2641 				.endl							; UNIT MIDFILES
  2642
  2643 				; ------------------------------------------------------------
  2644
  2645 947D			.local	MISC						; UNIT
  2646
  2647 947D			.local	DETECTMEM					; FUNCTION | ASSEMBLER
  2648
  2649 				; -------------------  ASM Block 00000086  -------------------
  2650
  2651 947D 8A 48			txa:pha
  2652
  2653 = 0400			bsav	= @buf
  2654
  2655 = 4000			ext_b	= $4000		;cokolwiek z zakresu $4000-$7FFF
  2656
  2657 947F A0 00			ldy #0
  2658 9481 B9 92 94 99 00 06	mov	mva copy,y detect,y
  2659 9487 C8				iny
  2660 9488 C0 8C			cpy #.sizeof(detect)
  2661 948A D0 F5			bne mov
  2662
  2663 948C 20 00 06			jsr detect
  2664
  2665 948F 4C 1E 95			jmp stop
  2666
  2667 9492			copy
  2668
  2669 0600			.local	detect,$0600
  2670
  2671 0600 AD 01 D3			lda portb
  2672 0603 48				pha
  2673
  2674 0604 AD 0B D4 D0 FB		lda:rne vcount
  2675
  2676 				;	lda #$ff
  2677 				;	sta portb
  2678
  2679 0609 AD 00 40			lda ext_b
  2680 060C 48				pha
  2681
  2682 060D A2 0F			ldx #$0f	;zapamiętanie bajtów ext (z 16 bloków po 64k)
  2683 060F 20 7F 06		_p0	jsr setpb
  2684 0612 AD 00 40			lda ext_b
  2685 0615 9D 00 04			sta bsav,x
  2686 0618 CA				dex
  2687 0619 10 F4			bpl _p0
  2688
  2689 061B A2 0F			ldx #$0f	;wyzerowanie ich (w oddzielnej pętli, bo nie wiadomo
  2690 061D 20 7F 06		_p1	jsr setpb	;które kombinacje bitów PORTB wybierają te same banki)
  2691 0620 A9 00			lda #$00
  2692 0622 8D 00 40			sta ext_b
  2693 0625 CA				dex
  2694 0626 10 F5			bpl _p1
  2695
  2696 0628 8E 01 D3			stx portb	;eliminacja pamięci podstawowej
  2697 062B 8E 00 40			stx ext_b
  2698 062E 86 00			stx $00		;niezbędne dla niektórych rozszerzeń do 256k
  2699
  2700 0630 A0 00			ldy #$00	;pętla zliczająca bloki 64k
  2701 0632 A2 0F			ldx #$0f
  2702 0634 20 7F 06		_p2	jsr setpb
  2703 0637 AD 00 40			lda ext_b	;jeśli ext_b jest różne od zera, blok 64k już zliczony
  2704 063A D0 23			bne _n2
  2705
  2706 063C CE 00 40			dec ext_b	;w przeciwnym wypadku zaznacz jako zliczony
  2707
  2708 063F AD 00 40			lda ext_b	;sprawdz, czy sie zaznaczyl; jesli nie -> cos nie tak ze sprzetem
  2709 0642 10 1B			bpl _n2
  2710
  2711 0644 AD 01 D3			lda portb	;wpisz wartość PORTB do tablicy dla banku 0
  2712
  2713 0647 29 FE			and #$fe
  2714
  2715 0649 99 01 01			sta adr.banks,y
  2716 064C 49 04			eor #%00000100	;uzupełnij wartości dla banków 1, 2, 3
  2717 064E 99 02 01			sta adr.banks+1,y
  2718 0651 49 0C			eor #%00001100
  2719 0653 99 03 01			sta adr.banks+2,y
  2720 0656 49 04			eor #%00000100
  2721 0658 99 04 01			sta adr.banks+3,y
  2722 065B C8				iny
  2723 065C C8				iny
  2724 065D C8				iny
  2725 065E C8				iny
  2726
  2727 065F CA			_n2	dex
  2728 0660 10 D2			bpl _p2
  2729
  2730 0662 A2 0F			ldx #$0f	;przywrócenie zawartości ext
  2731 0664 20 7F 06		_p3	jsr setpb
  2732 0667 BD 00 04			lda bsav,x
  2733 066A 8D 00 40			sta ext_b
  2734 066D CA				dex
  2735 066E 10 F4			bpl _p3
  2736
  2737 0670 8E 01 D3			stx portb	;X=$FF
  2738
  2739 0673 68				pla
  2740 0674 8D 00 40			sta ext_b
  2741
  2742 0677 68				pla
  2743 0678 8D 01 D3			sta portb
  2744
  2745 067B 8C 8E 20			sty Result
  2746
  2747 067E 60				rts
  2748
  2749 				; podprogramy
  2750 067F 8A			setpb	txa		;zmiana kolejności bitów: %0000dcba -> %cba000d0
  2751 0680 4A				lsr
  2752 0681 6A				ror
  2753 0682 6A				ror
  2754 0683 6A				ror
  2755 0684 69 01			adc #$01	;ustawienie bitu nr 1 w zaleznosci od stanu C
  2756 0686 09 01			ora #$01	;ustawienie bitu sterującego OS ROM na wartosc domyslna
  2757 0688 8D 01 D3			sta portb
  2758 068B 60				rts
  2759
  2760 				.endl
  2761
  2762 951E 68 AA		stop	pla:tax
  2763
  2764
  2765 9520			@exit
  2766
  2767 				; ------------------------------------------------------------
  2768
  2769 = 208E			RESULT	= DATAORIGIN+$008E
  2770 9520 60				rts						; ret
  2771 				.endl
  2772
  2773 				; ------------------------------------------------------------
  2774
  2775 = 0101			adr.BANKS	= $0101
  2776 9521			.var BANKS	= adr.BANKS .word
  2777 = FFF7			DETECTOS	= $FFF7
  2778
  2779 = 9521 01 01		BANKS
  2779 				.endl							; UNIT MISC
  2780
  2781 9523			.local	MYNMI						; PROCEDURE | ASSEMBLER | INTERRUPT
  2782
  2783 				; -------------------  ASM Block 00000089  -------------------
  2784
  2785 9523			  icl 'asms/nmi.a65'
Source: nmi.a65
     1 = 0012			RTCLOK = $12
     2 = D209			KBCODE = $d209
     3 = D20F			SKSTAT = $d20f
     4 = D40F			NMIRES = $d40f
     5
     6 = 022B			SRTIMR = $022b
     7 = 026D			KEYDIS = $026d
     8 = 02DA			KEYREP = $02da
     9 = 02F1			KEYDEL = $02f1
    10 = 02FC			CH     = $02fc
    11 = 02C0			PCOLR0 = $02c0
    12 = D012			COLPM0 = $d012
    13
    14 				// systemowa procedure obsługi RTClock ($C0E2)
    15 9523 D8			    cld
    16 9524 8D 6F 95		    sta rega
    17 9527 8E 71 95		    stx regx
    18 952A 8C 73 95		    sty regy
    19 952D 8D 0F D4		    STA NMIRES
    20
    21 9530 E6 14		    inc RTCLOK+2
    22 9532 D0 06		    bne end_rtclk
    23 9534 E6 13		    inc RTCLOK+1
    24 9536 D0 02		    bne end_rtclk
    25 9538 E6 12		    inc RTCLOK
    26
    27 953A			end_rtclk:
    28
    29 				// fragment systemowej procedury kopiowania rejestrów kolorów
    30 				//    ldx #$08
    31 				//colloop:
    32 				//    lda PCOLR0,x
    33 				//    sta COLPM0,x
    34 				//    dex
    35 				//    bpl colloop
    36
    37 				// systemowa procedura obsługi klawiatry ($C1A1)
    38 953A AD 0F D2		    lda SKSTAT
    39 953D 29 04		    and #$04
    40 953F F0 08		    beq skip_keyDelay
    41 9541 AD F1 02		    lda KEYDEL
    42 9544 F0 03		    beq skip_keyDelay
    43 9546 CE F1 02		    dec KEYDEL
    44 9549			skip_keyDelay:
    45 9549 AD 2B 02		    lda SRTIMR
    46 954C F0 20		    beq end_key
    47
    48 954E AD 0F D2		    lda SKSTAT
    49 9551 29 04		    and #$04
    50 9553 D0 14		    bne skip_key
    51
    52 9555 CE 2B 02		    dec SRTIMR
    53 9558 D0 14		    bne end_key
    54 955A AD DA 02		    lda KEYREP
    55 955D 8D 2B 02		    sta SRTIMR
    56
    57 9560 AD 09 D2		    lda KBCODE
    58 9563 8D FC 02		    sta CH
    59 9566 4C 6E 95		    jmp end_key
    60
    61 9569			skip_key:
    62 9569 A9 00		    lda #$00
    63 956B 8D 2B 02		    sta SRTIMR
    64
    65 956E			end_key:
    66
    67 956E A9 00		    lda rega:#0
    68 9570 A2 00		    ldx regx:#0
    69 9572 A0 00		    ldy regy:#0
  2786
  2787 9574 40				rti						; ret
  2788 				.endl
  2789
  2790 9575			.local	SETNMI						; PROCEDURE
  2791
  2792 				; optimize OK (helpers.inc), line = 39
  2793
  2794 9575 AD FA FF			lda NMIVEC
  2795 9578 8D BD 20			sta OLDNMIVEC
  2796 957B AD FB FF			lda NMIVEC+1
  2797 957E 8D BE 20			sta OLDNMIVEC+1
  2798
  2799 				; optimize OK (helpers.inc), line = 40
  2800
  2801 9581 A9 00			lda #$00
  2802 9583 8D 0E D4			sta NMIEN
  2803 9586 A9 23			lda <MYNMI
  2804 9588 8D FA FF			sta NMIVEC
  2805 958B A9 95			lda >MYNMI
  2806 958D 8D FB FF			sta NMIVEC+1
  2807 9590 A9 40			lda #$40
  2808 9592 8D 0E D4			sta NMIEN
  2809 9595			@exit
  2810 					.ifdef @new
  2811 					lda <@VarData
  2812 					sta :ztmp
  2813 					lda >@VarData
  2814 					ldy #@VarDataSize-1
  2815 					jmp @FreeMem
  2816 					els
  2817 9595 60				rts						; ret
  2818 					eif
  2819 				.endl
  2820
  2821 9596			.local	UNSETNMI					; PROCEDURE
  2822
  2823 				; optimize OK (helpers.inc), line = 45
  2824
  2825 9596 A9 00			lda #$00
  2826 9598 8D 0E D4			sta NMIEN
  2827 959B AD BD 20			lda OLDNMIVEC
  2828 959E 8D FA FF			sta NMIVEC
  2829 95A1 AD BE 20			lda OLDNMIVEC+1
  2830 95A4 8D FB FF			sta NMIVEC+1
  2831 95A7 A9 40			lda #$40
  2832 95A9 8D 0E D4			sta NMIEN
  2833 95AC			@exit
  2834 					.ifdef @new
  2835 					lda <@VarData
  2836 					sta :ztmp
  2837 					lda >@VarData
  2838 					ldy #@VarDataSize-1
  2839 					jmp @FreeMem
  2840 					els
  2841 95AC 60				rts						; ret
  2842 					eif
  2843 				.endl
  2844
  2845 95AD			.local	SETCOLORS					; PROCEDURE
  2846
  2847 				; optimize OK (helpers.inc), line = 52
  2848
  2849 95AD A5 4A			lda PLAYERSTATUS
  2850 95AF 29 01			and #$01
  2851 95B1 85 9D			sta :STACKORIGIN+9
  2852 95B3 A0 01			ldy #1
  2853 95B5 A5 9D			lda :STACKORIGIN+9
  2854 95B7 C9 01			cmp #$01
  2855 95B9 F0 01			beq @+
  2856 95BB 88				dey
  2857 				@
  2858 95BC 84 9D			sty :STACKORIGIN+9
  2859 95BE A9 05			lda #$05
  2860 95C0 85 8C			sta :ecx
  2861 95C2 A5 9D			lda :STACKORIGIN+9
  2862 95C4 85 84			sta :eax
  2863 					.ifdef fmulinit
  2864 					fmulu_8
  2865 					els
  2866 95C6 20 62 83			imulCL
  2867 					eif
  2868 95C9 A9 B1			lda <adr.COLORS
  2869 95CB 18 65 84			add :eax
  2870 95CE 8D C2 20			sta P
  2871 95D1 A9 80			lda >adr.COLORS
  2872 95D3 65 85			adc :eax+1
  2873 95D5 8D C3 20			sta P+1
  2874
  2875 				; optimize OK (helpers.inc), line = 53
  2876
  2877 95D8 AD C2 20			lda P
  2878 95DB 85 82			sta :bp2
  2879 95DD AD C3 20			lda P+1
  2880 95E0 85 83			sta :bp2+1
  2881 95E2 A0 04			ldy #$04
  2882 95E4 B1 82 99 16 D0 88 + 	mva:rpl (:bp2),y $D016,y-
  2883
  2884 				; optimize OK (helpers.inc), line = 54
  2885
  2886 95EC AD C2 20			lda P
  2887 95EF 85 82			sta :bp2
  2888 95F1 AD C3 20			lda P+1
  2889 95F4 85 83			sta :bp2+1
  2890 95F6 A0 04			ldy #$04
  2891 95F8 B1 82 99 C4 02 88 + 	mva:rpl (:bp2),y $02C4,y-
  2892
  2893 				; ------------------------------------------------------------
  2894
  2895 = 20C2			P	= DATAORIGIN+$00C2
  2896
  2897 = 20C2			@VarData	= P
  2898 = 0002			@VarDataSize	= 2
  2899
  2900 9600			@exit
  2901 					.ifdef @new
  2902 					lda <@VarData
  2903 					sta :ztmp
  2904 					lda >@VarData
  2905 					ldy #@VarDataSize-1
  2906 					jmp @FreeMem
  2907 					els
  2908 9600 60				rts						; ret
  2909 					eif
  2910 				.endl
  2911
  2912 9601			.local	PUTINTTEXT					; PROCEDURE | ASSEMBLER
  2913
  2914 				; -------------------  ASM Block 00000090  -------------------
  2915
  2916 9601			  icl 'asms/putinttext.a65'
Source: putinttext.a65
     1 9601 AD C5 20		  lda s+1
     2 9604 85 D7		  sta $d7
     3 9606 AD C4 20		  lda s
     4 9609 85 D6		  sta $d6
     5
     6 960B A0 00		  ldy #0
     7 960D B1 D6		  lda ($d6),y
     8 960F F0 19		  beq exitPutText
     9
    10 9611 48			  pha
    11 9612 A8			  tay
    12
    13 9613 E6 D6		  inc $d6
    14 9615 D0 02		  bne putText
    15 9617 E6 D7		  inc $d7
    16
    17 9619			putText:
    18 9619 B1 D6		  lda ($d6),y   // get string character
    19 961B 91 D4		  sta ($d4),y   // put on screen
    20 961D 88			  dey
    21 961E 10 F9		  bpl putText
    22
    23 9620 68			  pla
    24 9621 18			  clc
    25 9622 65 D4		  adc $d4
    26 9624 85 D4		  sta $d4
    27 9626 90 02		  bcc exitPutText
    28 9628 E6 D5		  inc $d5
    29
    30 962A			exitPutText:
  2917
  2918 				; ------------------------------------------------------------
  2919
  2920 = 20C4			S	= DATAORIGIN+$00C4
  2921
  2922 = 20C4			@VarData	= S
  2923 = 0002			@VarDataSize	= 2
  2924
  2925 962A			@exit
  2926 					.ifdef @new
  2927 					lda <@VarData
  2928 					sta :ztmp
  2929 					lda >@VarData
  2930 					ldy #@VarDataSize-1
  2931 					jmp @FreeMem
  2932 					els
  2933 962A 60				rts						; ret
  2934 					eif
  2935 				.endl
  2936
  2937 962B			.local	PUTASCTEXT					; PROCEDURE
  2938
  2939 				; optimize OK (helpers.inc), line = 68
  2940
  2941 962B AC C6 20 84 82 AC + 	mwy S :bp2
  2942 9635 A0 00			ldy #$00
  2943 9637 B1 82			lda (:bp2),y
  2944 9639 8D C8 20			sta L
  2945
  2946 				; --- WhileProlog
  2947 963C 4C 89 96			jmp l_078B
  2948 963F			l_078C
  2949
  2950 				; optimize OK (helpers.inc), line = 71
  2951
  2952 963F EE C6 20			inc S
  2953 9642 D0 03			sne
  2954 9644 EE C7 20			inc S+1
  2955
  2956 				; optimize OK (helpers.inc), line = 72
  2957
  2958 9647 AC C6 20 84 82 AC + 	mwy S :bp2
  2959 9651 A0 00			ldy #$00
  2960 9653 B1 82			lda (:bp2),y
  2961 9655 8D C9 20			sta C
  2962
  2963 				; optimize OK (helpers.inc), line = 73
  2964
  2965 9658 C9 20			cmp #$20
  2966 965A B0 09			jcs l_07A5
  2967 965C 18 69 40			add #$40
  2968 965F 8D C9 20			sta C
  2969 9662 4C 72 96			jmp l_07B0
  2970 9665			l_07A5
  2971
  2972 				; optimize OK (helpers.inc), line = 74
  2973
  2974 9665 AD C9 20			lda C
  2975 9668 C9 60			cmp #$60
  2976 966A B0 06			jcs l_07C2
  2977 966C 38 E9 20			sub #$20
  2978 966F 8D C9 20			sta C
  2979 9672			l_07C2
  2980 9672			l_07B0
  2981
  2982 				; optimize OK (helpers.inc), line = 75
  2983
  2984 9672 AD C9 20			lda C
  2985 9675 0D C0 20			ora PUTTEXTINVERT
  2986 9678 A4 D5			ldy SCRADR+1
  2987 967A 84 81			sty :bp+1
  2988 967C A4 D4			ldy SCRADR
  2989 967E 91 80			sta (:bp),y
  2990
  2991 				; optimize FAIL (0, helpers.inc), line = 76
  2992
  2993 9680 E6 D4			inc SCRADR
  2994 9682 D0 02			sne
  2995 9684 E6 D5			inc SCRADR+1
  2996
  2997 				; optimize FAIL (0, helpers.inc), line = 77
  2998
  2999 9686 CE C8 20			dec L
  3000 9689			l_078B
  3001
  3002 				; optimize OK (helpers.inc), line = 69
  3003
  3004 9689 D0 B4			jne l_078C
  3005
  3006 				; ------------------------------------------------------------
  3007
  3008 = 20C6			S	= DATAORIGIN+$00C6
  3009 = 20C8			L	= DATAORIGIN+$00C8
  3010 = 20C9			C	= DATAORIGIN+$00C9
  3011
  3012 = 20C6			@VarData	= S
  3013 = 0004			@VarDataSize	= 4
  3014
  3015 968B			@exit
  3016 					.ifdef @new
  3017 					lda <@VarData
  3018 					sta :ztmp
  3019 					lda >@VarData
  3020 					ldy #@VarDataSize-1
  3021 					jmp @FreeMem
  3022 					els
  3023 968B 60				rts						; ret
  3024 					eif
  3025 				.endl
  3026
  3027 968C			.local	PUTHEX						; PROCEDURE | ASSEMBLER
  3028
  3029 				; -------------------  ASM Block 00000091  -------------------
  3030
  3031 968C			  icl 'asms/puthex.a65'
Source: puthex.a65
     1 				// store `scradr` value as a operand of opcode
     2 968C A5 D4		  lda scradr
     3 968E 8D D2 96		  sta screen
     4 9691 A5 D5		  lda scradr+1
     5 9693 8D D3 96		  sta screen+1
     6 9696 AD CA 20		  lda v
     7 9699 8D BB 96		  sta vadr1
     8 969C 8D C3 96		  sta vadr2
     9 969F AD CB 20		  lda v+1
    10 96A2 8D BC 96		  sta vadr1+1
    11 96A5 8D C4 96		  sta vadr2+1
    12
    13 96A8 A9 00		  lda #0
    14 96AA 8D E5 96		  sta _vofs
    15
    16 				// get nibbles to show, if =0 exit
    17 96AD AC CC 20		  ldy n
    18 96B0 F0 32		  beq stop
    19
    20 96B2			hexLoop:
    21 96B2 AE E5 96		  ldx _vofs
    22 96B5 98			  tya
    23 96B6 29 01		  and #1
    24 96B8 D0 08		  bne HiNibble
    25 96BA BD 00 F0		  lda vadr1:$f000,x
    26 96BD 29 0F		  and #$0f
    27 96BF 4C CC 96		  jmp put2screen
    28 96C2			HiNibble:
    29 96C2 BD 00 F0		  lda vadr2:$f000,x
    30 96C5 4A 4A 4A 4A		  :4 lsr @
    31 96C9 EE E5 96		  inc _vofs
    32
    33 96CC			put2screen:
    34 96CC AA			  tax
    35 96CD BD E6 96		  lda hexTab,x
    36 				//  ora puttextinvert
    37 96D0 88			  dey
    38 96D1 99 00 F0		  sta screen:$f000,y
    39
    40 96D4 C0 00		  cpy #0
    41 96D6 D0 DA		  bne hexLoop
    42
    43 96D8			calcEndAddr:
    44 96D8 A5 D4		  lda scradr
    45 96DA 18			  clc
    46 96DB 6D CC 20		  adc n
    47 96DE 85 D4		  sta scradr
    48 96E0 90 02		  bcc stop
    49 96E2 E6 D5		  inc scradr+1
    50
    51 96E4			stop:
    52 96E4 60			  rts
    53
    54 96E5			_vofs
    55 96E5 00			  .by 0
    56 96E6			hexTab:
    57 96E6 10 11 12 13 14 15 +   dta d'0123456789ABCDEF'
  3032
  3033 				; ------------------------------------------------------------
  3034
  3035 = 20CA			V	= DATAORIGIN+$00CA
  3036 = 20CC			N	= DATAORIGIN+$00CC
  3037
  3038 = 20CA			@VarData	= V
  3039 = 0003			@VarDataSize	= 3
  3040
  3041 96F6			@exit
  3042 					.ifdef @new
  3043 					lda <@VarData
  3044 					sta :ztmp
  3045 					lda >@VarData
  3046 					ldy #@VarDataSize-1
  3047 					jmp @FreeMem
  3048 					els
  3049 96F6 60				rts						; ret
  3050 					eif
  3051 				.endl
  3052
  3053 96F7			.local	PUTINT						; PROCEDURE | ASSEMBLER
  3054
  3055 				; -------------------  ASM Block 00000092  -------------------
  3056
  3057 96F7			  icl 'asms/int2str.a65'
Source: int2str.a65
     1 = 0000			EOL = 0
     2
     3 96F7 A5 D4		    lda scradr
     4 96F9 8D 43 97		    sta screen1
     5 96FC 8D 5A 97		    sta screen2
     6 96FF A5 D5		    lda scradr+1
     7 9701 8D 44 97		    sta screen1+1
     8 9704 8D 5B 97		    sta screen2+1
     9
    10 9707			INT2STR:
    11 9707 A0 00		    ldy #0
    12 9709 8C 68 97		    sty _cnt
    13 970C			ITSNEXT:
    14 970C A2 00		    ldx #0
    15 970E			ITSSLP:
    16 970E AD CD 20		    lda value
    17 9711 38			    sec
    18 9712 F9 69 97		    sbc Pow10Tab,Y
    19 9715 8D CD 20		    sta value
    20 9718 AD CE 20		    lda value+1
    21 971B C8			    iny
    22 971C F9 69 97		    sbc Pow10Tab,Y
    23 971F 90 08		    bcc ITSADD
    24 9721 8D CE 20		    sta value+1
    25 9724 E8			    inx
    26 9725 88			    dey
    27 9726 18			    clc
    28 9727 90 E5		    bcc ITSSLP
    29 9729			ITSADD:
    30 9729 88			    dey
    31 972A AD CD 20		    lda value
    32 972D 79 69 97		    adc Pow10Tab,Y
    33 9730 8D CD 20		    sta value
    34 9733 8A			    txa
    35 9734 09 10		    ora #$10
    36
    37 				; skip lead zeros
    38 9736 AE 68 97		    ldx _cnt
    39 9739 D0 04		    bne storeDigit
    40 973B C9 10		    cmp #$10
    41 973D F0 09		    beq skipDigit
    42
    43 973F			storeDigit:
    44 973F 0D C0 20		    ora puttextinvert
    45 9742 9D 00 F0		    sta screen1:$f000,X
    46 9745 EE 68 97		    inc _cnt
    47 9748			skipDigit:
    48 9748 C8			    iny
    49 9749 C8			    iny
    50 974A C0 08		    cpy #8
    51 974C 90 BE		    bcc ITSNEXT
    52
    53 				; last digit
    54 974E AD CD 20		    lda value
    55 9751 09 10		    ora #$10
    56 9753 AE 68 97		    ldx _cnt
    57 9756 0D C0 20		    ora puttextinvert
    58 9759 9D 00 F0		    sta screen2:$f000,X
    59 975C E8			    inx
    60
    61 				; set screen addres to the end of value
    62 975D 8A			    txa
    63 975E 18			    clc
    64 975F 65 D4		    adc scradr
    65 9761 85 D4		    sta scradr
    66 9763 90 02		    bcc stop
    67 9765 E6 D5		    inc scradr+1
    68
    69 9767			stop:
    70 9767 60			    rts
    71
    72 9768			_cnt
    73 9768 00			    .by 0
    74 9769			Pow10Tab
    75 9769 10 27		    .wo 10000
    76 976B E8 03		    .wo 1000
    77 976D 64 00		    .wo 100
    78 976F 0A 00		    .wo 10
  3058
  3059 				; ------------------------------------------------------------
  3060
  3061 = 20CD			VALUE	= DATAORIGIN+$00CD
  3062
  3063 = 20CD			@VarData	= VALUE
  3064 = 0002			@VarDataSize	= 2
  3065
  3066 9771			@exit
  3067 					.ifdef @new
  3068 					lda <@VarData
  3069 					sta :ztmp
  3070 					lda >@VarData
  3071 					ldy #@VarDataSize-1
  3072 					jmp @FreeMem
  3073 					els
  3074 9771 60				rts						; ret
  3075 					eif
  3076 				.endl
  3077
  3078 9772			.local	RESET_MIDI					; PROCEDURE
  3079
  3080 				; optimize OK (helpers.inc), line = 103
  3081
  3082 9772 A9 00			lda #$00
  3083 9774 8D CF 20			sta I
  3084
  3085 				; --- WhileProlog
  3086 9777 4C 88 97			jmp l_07F2
  3087 977A			l_07F3
  3088
  3089 				; optimize OK (helpers.inc), line = 106
  3090
  3091 977A AC CF 20			ldy I
  3092 977D B9 BB 80			lda adr.GM_RESET,y
  3093 9780 85 FF			sta MIDI_FIFO.FIFO_BYTE
  3094 9782 20 C0 89			jsr MIDI_FIFO.FIFO_WRITEBYTE
  3095
  3096 				; optimize FAIL (0, helpers.inc), line = 107
  3097
  3098 9785 EE CF 20			inc I
  3099 9788			l_07F2
  3100
  3101 				; optimize OK (helpers.inc), line = 104
  3102
  3103 9788 AD CF 20			lda I
  3104 978B C9 06			cmp #$06
  3105 978D 90 EB			jcc l_07F3
  3106
  3107 				; optimize FAIL ('MIDI_FIFO.FIFO_FLUSH', helpers.inc), line = 109
  3108
  3109 978F 20 D9 89			jsr MIDI_FIFO.FIFO_FLUSH
  3110
  3111 				; ------------------------------------------------------------
  3112
  3113 = 20CF			I	= DATAORIGIN+$00CF
  3114
  3115 = 20CF			@VarData	= I
  3116 = 0001			@VarDataSize	= 1
  3117
  3118 9792			@exit
  3119 					.ifdef @new
  3120 					lda <@VarData
  3121 					sta :ztmp
  3122 					lda >@VarData
  3123 					ldy #@VarDataSize-1
  3124 					jmp @FreeMem
  3125 					els
  3126 9792 60				rts						; ret
  3127 					eif
  3128 				.endl
  3129
  3130 9793			.local	STOPMIDI					; PROCEDURE
  3131
  3132 				; optimize OK (helpers.inc), line = 114
  3133
  3134 9793 A5 F5			lda MIDFILES._TIMERSTATUS
  3135 9795 09 80			ora #$80
  3136 9797 85 F5			sta MIDFILES._TIMERSTATUS
  3137
  3138 				; optimize OK (helpers.inc), line = 115
  3139
  3140 9799 A9 00			lda #$00
  3141 979B 85 F0			sta MIDFILES._TOTALTICKS
  3142 979D 85 F1			sta MIDFILES._TOTALTICKS+1
  3143 979F 85 F2			sta MIDFILES._TOTALTICKS+2
  3144 97A1 85 F3			sta MIDFILES._TOTALTICKS+3
  3145 97A3 A9 01			lda #$01
  3146 97A5 85 F4			sta MIDFILES._SUBCNT
  3147
  3148 				; optimize OK (helpers.inc), line = 116
  3149
  3150 97A7 78				sei
  3151 97A8 AD 59 20 8D 10 02		mva MIDFILES.OLDTIMERVEC VTIMR1
  3152 97AE AD 5A 20 8D 11 02		mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
  3153 97B4 A5 10			lda irqens
  3154 97B6 29 FE			and #$fe
  3155 97B8 85 10			sta irqens
  3156 97BA 8D 0E D2			sta irqen
  3157 97BD 58				cli
  3158
  3159 				; optimize FAIL ('RESET_MIDI', helpers.inc), line = 117
  3160
  3161 97BE 20 72 97			jsr RESET_MIDI
  3162 97C1			@exit
  3163 					.ifdef @new
  3164 					lda <@VarData
  3165 					sta :ztmp
  3166 					lda >@VarData
  3167 					ldy #@VarDataSize-1
  3168 					jmp @FreeMem
  3169 					els
  3170 97C1 60				rts						; ret
  3171 					eif
  3172 				.endl
  3173
  3174 97C2			.local	CLEARWORKAREA					; PROCEDURE
  3175
  3176 				; optimize OK (helpers.inc), line = 122
  3177
  3178 97C2 A9 40			lda #$40
  3179 97C4 85 88			sta SYSTEM.FILLCHAR_0102.A
  3180 97C6 A9 37			lda #$37
  3181 97C8 85 89			sta SYSTEM.FILLCHAR_0102.A+1
  3182 97CA A9 80			lda #$80
  3183 97CC 85 8C			sta SYSTEM.FILLCHAR_0102.COUNT
  3184 97CE A9 02			lda #$02
  3185 97D0 85 8D			sta SYSTEM.FILLCHAR_0102.COUNT+1
  3186 97D2 A9 00			lda #$00
  3187 97D4 85 84			sta SYSTEM.FILLCHAR_0102.VALUE
  3188 97D6				.local +MAIN.SYSTEM.FILLCHAR_0102
  3189 97D6				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0102.M@INLINE [Source: MIDICar Player.a65]
     4 97D6 20 D3 82			jsr @fill
Source: MIDICar Player.a65
  3190 					.endl
  3191 97D9			@exit
  3192 					.ifdef @new
  3193 					lda <@VarData
  3194 					sta :ztmp
  3195 					lda >@VarData
  3196 					ldy #@VarDataSize-1
  3197 					jmp @FreeMem
  3198 					els
  3199 97D9 60				rts						; ret
  3200 					eif
  3201 				.endl
  3202
  3203 97DA			.local	ISLOOPED					; PROCEDURE
  3204
  3205 				; optimize OK (helpers.inc), line = 127
  3206
  3207 97DA A9 EC			lda #$EC
  3208 97DC 85 D4			sta SCRADR
  3209 97DE A9 39			lda #$39
  3210 97E0 85 D5			sta SCRADR+1
  3211
  3212 				; optimize OK (helpers.inc), line = 128
  3213
  3214 97E2 A5 4A			lda PLAYERSTATUS
  3215 97E4 29 04			and #$04
  3216 97E6 F0 10			jeq l_084D
  3217
  3218 				; optimize OK (helpers.inc), line = 129
  3219
  3220 97E8 A9 02			lda #$02
  3221 97EA 8D C4 20			sta PUTINTTEXT.S
  3222 97ED A9 80			lda #$80
  3223 97EF 8D C5 20			sta PUTINTTEXT.S+1
  3224 97F2 20 01 96			jsr PUTINTTEXT
  3225 97F5 4C 05 98			jmp l_0859
  3226 97F8			l_084D
  3227
  3228 				; optimize OK (helpers.inc), line = 131
  3229
  3230 97F8 A9 06			lda #$06
  3231 97FA 8D C4 20			sta PUTINTTEXT.S
  3232 97FD A9 80			lda #$80
  3233 97FF 8D C5 20			sta PUTINTTEXT.S+1
  3234 9802 20 01 96			jsr PUTINTTEXT
  3235 9805			l_0859
  3236 9805			@exit
  3237 					.ifdef @new
  3238 					lda <@VarData
  3239 					sta :ztmp
  3240 					lda >@VarData
  3241 					ldy #@VarDataSize-1
  3242 					jmp @FreeMem
  3243 					els
  3244 9805 60				rts						; ret
  3245 					eif
  3246 				.endl
  3247
  3248 9806			.local	CLEARSTATUS					; PROCEDURE
  3249
  3250 				; optimize OK (helpers.inc), line = 139
  3251
  3252 9806 A9 00			lda #$00
  3253 9808 A0 3B			ldy #$3B
  3254 980A 99 E8 39 88 10 FA		sta:rpl $39E8,y-
  3255
  3256 				; optimize FAIL ('ISLOOPED', helpers.inc), line = 140
  3257
  3258 9810 20 DA 97			jsr ISLOOPED
  3259
  3260 				; optimize OK (helpers.inc), line = 141
  3261
  3262 9813 AC BC 20			ldy FN+1
  3263 9816 84 81			sty :bp+1
  3264 9818 AC BB 20			ldy FN
  3265 981B B1 80			lda (:bp),y
  3266 981D 8D D0 20			sta L
  3267
  3268 				; optimize OK (helpers.inc), line = 142
  3269
  3270 9820 D0 03			jne l_0879
  3271 9822 4C 66 98			jmp @exit					; exit
  3272 9825			l_0879
  3273
  3274 				; optimize OK (helpers.inc), line = 143
  3275
  3276 9825 AD D0 20			lda L
  3277 9828 C9 11			cmp #$11
  3278 982A 90 10			jcc l_088E
  3279 982C AC BB 20 84 82 AC + 	mwy FN :bp2
  3280 9836 A0 00			ldy #$00
  3281 9838 A9 10			lda #$10
  3282 983A 91 82			sta (:bp2),y
  3283 983C			l_088E
  3284
  3285 				; optimize OK (helpers.inc), line = 144
  3286
  3287 983C A9 27			lda #$27
  3288 983E 38 ED D0 20			sub L
  3289 9842 85 9E			sta :STACKORIGIN+10
  3290 9844 A9 00			lda #$00
  3291 9846 E9 00			sbc #$00
  3292 9848 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3293 984A A9 FC			lda #$FC
  3294 984C 18 65 9E			add :STACKORIGIN+10
  3295 984F 85 D4			sta SCRADR
  3296 9851 A9 39			lda #$39
  3297 9853 65 AE			adc :STACKORIGIN+STACKWIDTH+10
  3298 9855 85 D5			sta SCRADR+1
  3299 9857 AD BB 20			lda FN
  3300 985A 8D C6 20			sta PUTASCTEXT.S
  3301 985D AD BC 20			lda FN+1
  3302 9860 8D C7 20			sta PUTASCTEXT.S+1
  3303 9863 20 2B 96			jsr PUTASCTEXT
  3304
  3305 				; ------------------------------------------------------------
  3306
  3307 = 20D0			L	= DATAORIGIN+$00D0
  3308
  3309 = 20D0			@VarData	= L
  3310 = 0001			@VarDataSize	= 1
  3311
  3312 9866			@exit
  3313 					.ifdef @new
  3314 					lda <@VarData
  3315 					sta :ztmp
  3316 					lda >@VarData
  3317 					ldy #@VarDataSize-1
  3318 					jmp @FreeMem
  3319 					els
  3320 9866 60				rts						; ret
  3321 					eif
  3322 				.endl
  3323
  3324 9867			.local	CLEARUVMETERS					; PROCEDURE
  3325
  3326 				; optimize OK (helpers.inc), line = 149
  3327
  3328 9867 A5 4A			lda PLAYERSTATUS
  3329 9869 29 02			and #$02
  3330 986B F0 2F			jeq l_08C1
  3331
  3332 				; optimize OK (helpers.inc), line = 151
  3333
  3334 986D A9 00			lda #$00
  3335 986F 8D B0 20			sta CHN
  3336
  3337 				; --- RepeatUntilProlog
  3338 9872			l_08C7
  3339
  3340 				; optimize OK (helpers.inc), line = 153
  3341
  3342 9872 AD B0 20			lda CHN
  3343 9875 0A				asl @
  3344 9876 A8				tay
  3345 9877 B9 8F 20			lda adr.CHANNELSCRADR,y
  3346 987A 85 D4			sta SCRADR
  3347 987C B9 90 20			lda adr.CHANNELSCRADR+1,y
  3348 987F 85 D5			sta SCRADR+1
  3349
  3350 				; optimize OK (helpers.inc), line = 154
  3351
  3352 9881 A5 D4			lda SCRADR
  3353 9883 85 82			sta :bp2
  3354 9885 A5 D5			lda SCRADR+1
  3355 9887 85 83			sta :bp2+1
  3356 9889 A9 41			lda #$41
  3357 988B A0 03			ldy #$03
  3358 988D 91 82 88 10 FB		sta:rpl (:bp2),y-
  3359
  3360 				; optimize FAIL (0, helpers.inc), line = 155
  3361
  3362 9892 EE B0 20			inc CHN
  3363
  3364 				; optimize OK (helpers.inc), line = 156
  3365
  3366 9895 AD B0 20			lda CHN
  3367 9898 C9 10			cmp #$10
  3368 989A D0 D6			jne l_08C7
  3369 989C			l_08C1
  3370 989C			@exit
  3371 					.ifdef @new
  3372 					lda <@VarData
  3373 					sta :ztmp
  3374 					lda >@VarData
  3375 					ldy #@VarDataSize-1
  3376 					jmp @FreeMem
  3377 					els
  3378 989C 60				rts						; ret
  3379 					eif
  3380 				.endl
  3381
  3382 989D			.local	EXIT2DOS					; PROCEDURE
  3383
  3384 				; optimize FAIL ('STOPMIDI', helpers.inc), line = 162
  3385
  3386 989D 20 93 97			jsr STOPMIDI
  3387
  3388 				; optimize OK (helpers.inc), line = 163
  3389
  3390 98A0 A9 00			lda #$00
  3391 98A2 20 35 8A			jsr CIO.CLS
  3392 98A5 A9 00			lda #$00
  3393 98A7 8D 30 20			sta CIO.OPN.CHN
  3394 98AA A9 0C			lda #$0C
  3395 98AC 8D 31 20			sta CIO.OPN.AX1
  3396 98AF A9 00			lda #$00
  3397 98B1 8D 32 20			sta CIO.OPN.AX2
  3398 98B4 A9 0A			lda #$0A
  3399 98B6 8D 33 20			sta CIO.OPN.DEVICE
  3400 98B9 A9 80			lda #$80
  3401 98BB 8D 34 20			sta CIO.OPN.DEVICE+1
  3402 98BE 20 F7 89			jsr CIO.OPN
  3403 98C1 A9 01			lda #$01
  3404 98C3 85 41			sta SOUNDR
  3405 98C5 A9 00			lda #$00
  3406 98C7 4C 3A 9E			jmp @halt
  3407 98CA			@exit
  3408 					.ifdef @new
  3409 					lda <@VarData
  3410 					sta :ztmp
  3411 					lda >@VarData
  3412 					ldy #@VarDataSize-1
  3413 					jmp @FreeMem
  3414 					els
  3415 98CA 60				rts						; ret
  3416 					eif
  3417 				.endl
  3418
  3419 98CB			.local	STATUSPLAYING					; PROCEDURE
  3420
  3421 				; optimize OK (status.inc), line = 3
  3422
  3423 98CB AD 3A 20			lda MIDFILES.TOTALTRACKS
  3424 98CE F0 43			jeq l_090F
  3425
  3426 				; optimize OK (status.inc), line = 5
  3427
  3428 98D0 A9 E9			lda #$E9
  3429 98D2 85 D4			sta SCRADR
  3430 98D4 A9 39			lda #$39
  3431 98D6 85 D5			sta SCRADR+1
  3432 98D8 A9 0E			lda #$0E
  3433 98DA 8D C4 20			sta PUTINTTEXT.S
  3434 98DD A9 80			lda #$80
  3435 98DF 8D C5 20			sta PUTINTTEXT.S+1
  3436 98E2 20 01 96			jsr PUTINTTEXT
  3437
  3438 				; optimize OK (status.inc), line = 6
  3439
  3440 98E5 A9 FC			lda #$FC
  3441 98E7 85 D4			sta SCRADR
  3442 98E9 A9 39			lda #$39
  3443 98EB 85 D5			sta SCRADR+1
  3444 98ED A9 13			lda #$13
  3445 98EF 8D C4 20			sta PUTINTTEXT.S
  3446 98F2 A9 80			lda #$80
  3447 98F4 8D C5 20			sta PUTINTTEXT.S+1
  3448 98F7 20 01 96			jsr PUTINTTEXT
  3449
  3450 				; optimize OK (status.inc), line = 7
  3451
  3452 98FA AD BA 20			lda ISSTOPPED
  3453 98FD F0 0B			jeq l_0928
  3454
  3455 				; optimize FAIL ('MIDFILES.INITTIMER', status.inc), line = 9
  3456
  3457 98FF 20 D1 93			jsr MIDFILES.INITTIMER
  3458
  3459 				; optimize OK (status.inc), line = 10
  3460
  3461 9902 A9 00			lda #$00
  3462 9904 8D BA 20			sta ISSTOPPED
  3463 9907 4C 10 99			jmp l_0937
  3464 990A			l_0928
  3465
  3466 				; optimize OK (status.inc), line = 13
  3467
  3468 990A A5 F5			lda MIDFILES._TIMERSTATUS
  3469 990C 29 7F			and #$7F
  3470 990E 85 F5			sta MIDFILES._TIMERSTATUS
  3471 9910			l_0937
  3472 9910 4C 3D 99			jmp l_094D
  3473 9913			l_090F
  3474
  3475 				; optimize OK (status.inc), line = 17
  3476
  3477 9913 A9 E9			lda #$E9
  3478 9915 85 D4			sta SCRADR
  3479 9917 A9 39			lda #$39
  3480 9919 85 D5			sta SCRADR+1
  3481 991B A9 1E			lda #$1E
  3482 991D 8D C4 20			sta PUTINTTEXT.S
  3483 9920 A9 80			lda #$80
  3484 9922 8D C5 20			sta PUTINTTEXT.S+1
  3485 9925 20 01 96			jsr PUTINTTEXT
  3486
  3487 				; optimize OK (status.inc), line = 18
  3488
  3489 9928 A9 FC			lda #$FC
  3490 992A 85 D4			sta SCRADR
  3491 992C A9 39			lda #$39
  3492 992E 85 D5			sta SCRADR+1
  3493 9930 A9 23			lda #$23
  3494 9932 8D C4 20			sta PUTINTTEXT.S
  3495 9935 A9 80			lda #$80
  3496 9937 8D C5 20			sta PUTINTTEXT.S+1
  3497 993A 20 01 96			jsr PUTINTTEXT
  3498 993D			l_094D
  3499 993D			@exit
  3500 					.ifdef @new
  3501 					lda <@VarData
  3502 					sta :ztmp
  3503 					lda >@VarData
  3504 					ldy #@VarDataSize-1
  3505 					jmp @FreeMem
  3506 					els
  3507 993D 60				rts						; ret
  3508 					eif
  3509 				.endl
  3510
  3511 993E			.local	STATUSPAUSE					; PROCEDURE
  3512
  3513 				; optimize OK (status.inc), line = 24
  3514
  3515 993E AD BA 20			lda ISSTOPPED
  3516 9941 F0 03			jeq l_0969
  3517 9943 4C 76 99			jmp @exit					; exit
  3518 9946			l_0969
  3519
  3520 				; optimize OK (status.inc), line = 25
  3521
  3522 9946 A9 E9			lda #$E9
  3523 9948 85 D4			sta SCRADR
  3524 994A A9 39			lda #$39
  3525 994C 85 D5			sta SCRADR+1
  3526 994E A9 2E			lda #$2E
  3527 9950 8D C4 20			sta PUTINTTEXT.S
  3528 9953 A9 80			lda #$80
  3529 9955 8D C5 20			sta PUTINTTEXT.S+1
  3530 9958 20 01 96			jsr PUTINTTEXT
  3531
  3532 				; optimize OK (status.inc), line = 26
  3533
  3534 995B A9 FC			lda #$FC
  3535 995D 85 D4			sta SCRADR
  3536 995F A9 39			lda #$39
  3537 9961 85 D5			sta SCRADR+1
  3538 9963 A9 33			lda #$33
  3539 9965 8D C4 20			sta PUTINTTEXT.S
  3540 9968 A9 80			lda #$80
  3541 996A 8D C5 20			sta PUTINTTEXT.S+1
  3542 996D 20 01 96			jsr PUTINTTEXT
  3543
  3544 				; optimize OK (status.inc), line = 27
  3545
  3546 9970 A5 F5			lda MIDFILES._TIMERSTATUS
  3547 9972 09 80			ora #$80
  3548 9974 85 F5			sta MIDFILES._TIMERSTATUS
  3549 9976			@exit
  3550 					.ifdef @new
  3551 					lda <@VarData
  3552 					sta :ztmp
  3553 					lda >@VarData
  3554 					ldy #@VarDataSize-1
  3555 					jmp @FreeMem
  3556 					els
  3557 9976 60				rts						; ret
  3558 					eif
  3559 				.endl
  3560
  3561 9977			.local	STATUSSTOPPED					; PROCEDURE
  3562
  3563 				; optimize OK (status.inc), line = 32
  3564
  3565 9977 AD 3A 20			lda MIDFILES.TOTALTRACKS
  3566 997A D0 03			jne l_0998
  3567 997C 4C DC 99			jmp @exit					; exit
  3568 997F			l_0998
  3569
  3570 				; optimize OK (status.inc), line = 33
  3571
  3572 997F AD BA 20			lda ISSTOPPED
  3573 9982 F0 03			jeq l_09A7
  3574 9984 4C DC 99			jmp @exit					; exit
  3575 9987			l_09A7
  3576
  3577 				; optimize OK (status.inc), line = 34
  3578
  3579 9987 A9 01			lda #$01
  3580 9989 8D BA 20			sta ISSTOPPED
  3581
  3582 				; optimize OK (status.inc), line = 35
  3583
  3584 998C A9 E9			lda #$E9
  3585 998E 85 D4			sta SCRADR
  3586 9990 A9 39			lda #$39
  3587 9992 85 D5			sta SCRADR+1
  3588 9994 A9 3E			lda #$3E
  3589 9996 8D C4 20			sta PUTINTTEXT.S
  3590 9999 A9 80			lda #$80
  3591 999B 8D C5 20			sta PUTINTTEXT.S+1
  3592 999E 20 01 96			jsr PUTINTTEXT
  3593
  3594 				; optimize OK (status.inc), line = 36
  3595
  3596 99A1 A9 FC			lda #$FC
  3597 99A3 85 D4			sta SCRADR
  3598 99A5 A9 39			lda #$39
  3599 99A7 85 D5			sta SCRADR+1
  3600 99A9 A9 43			lda #$43
  3601 99AB 8D C4 20			sta PUTINTTEXT.S
  3602 99AE A9 80			lda #$80
  3603 99B0 8D C5 20			sta PUTINTTEXT.S+1
  3604 99B3 20 01 96			jsr PUTINTTEXT
  3605
  3606 				; optimize FAIL ('STOPMIDI', status.inc), line = 37
  3607
  3608 99B6 20 93 97			jsr STOPMIDI
  3609
  3610 				; optimize OK (status.inc), line = 38
  3611
  3612 99B9 A9 00			lda #$00
  3613 99BB 85 88			sta SYSTEM.MOVE_0103.SOURCE
  3614 99BD A9 2C			lda #$2C
  3615 99BF 85 89			sta SYSTEM.MOVE_0103.SOURCE+1
  3616 99C1 A9 00			lda #$00
  3617 99C3 85 8C			sta SYSTEM.MOVE_0103.DEST
  3618 99C5 A9 2E			lda #$2E
  3619 99C7 85 8D			sta SYSTEM.MOVE_0103.DEST+1
  3620 99C9 A9 00			lda #$00
  3621 99CB 85 84			sta SYSTEM.MOVE_0103.COUNT
  3622 99CD A9 02			lda #$02
  3623 99CF 85 85			sta SYSTEM.MOVE_0103.COUNT+1
  3624 99D1				.local +MAIN.SYSTEM.MOVE_0103
  3625 99D1				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0103.M@INLINE [Source: MIDICar Player.a65]
     4 99D1 20 7E 82			jsr @move
Source: MIDICar Player.a65
  3626 					.endl
  3627
  3628 				; optimize OK (status.inc), line = 39
  3629
  3630 99D4 A9 00			lda #$00
  3631 99D6 8D B0 20			sta CHN
  3632
  3633 				; optimize FAIL ('CLEARUVMETERS', status.inc), line = 40
  3634
  3635 99D9 20 67 98			jsr CLEARUVMETERS
  3636 99DC			@exit
  3637 					.ifdef @new
  3638 					lda <@VarData
  3639 					sta :ztmp
  3640 					lda >@VarData
  3641 					ldy #@VarDataSize-1
  3642 					jmp @FreeMem
  3643 					els
  3644 99DC 60				rts						; ret
  3645 					eif
  3646 				.endl
  3647
  3648 99DD			.local	STATUSLOADING					; PROCEDURE
  3649
  3650 				; optimize OK (status.inc), line = 45
  3651
  3652 99DD A9 FE			lda #$FE
  3653 99DF 85 D4			sta SCRADR
  3654 99E1 A9 39			lda #$39
  3655 99E3 85 D5			sta SCRADR+1
  3656 99E5 A9 4E			lda #$4E
  3657 99E7 8D C4 20			sta PUTINTTEXT.S
  3658 99EA A9 80			lda #$80
  3659 99EC 8D C5 20			sta PUTINTTEXT.S+1
  3660 99EF 20 01 96			jsr PUTINTTEXT
  3661 99F2			@exit
  3662 					.ifdef @new
  3663 					lda <@VarData
  3664 					sta :ztmp
  3665 					lda >@VarData
  3666 					ldy #@VarDataSize-1
  3667 					jmp @FreeMem
  3668 					els
  3669 99F2 60				rts						; ret
  3670 					eif
  3671 				.endl
  3672
  3673 99F3			.local	INIT						; PROCEDURE
  3674
  3675 99F3 4C 26 9A			jmp l_09D2
  3676
  3677 99F6			.local	SETMCBASEADDRESS				; PROCEDURE | ASSEMBLER
  3678
  3679 				; -------------------  ASM Block 00000093  -------------------
  3680
  3681 				    .macro m@setMCBase name
  3682 				      sty :name
  3683 				      stx :name+1
  3684 				    .endm
  3685
  3686 99F6 A4 D8		    ldy $d8
  3687 99F8 A6 D9		    ldx $d9
  3688
  3689 99FA			    m@setMCBase MAIN.MC6850.MC6850_INIT.MCBASESTATE
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: MIDICar Player.a65]
     1 99FA 8C 93 89		      sty MAIN.MC6850.MC6850_INIT.MCBASESTATE
     2 99FD 8E 94 89		      stx MAIN.MC6850.MC6850_INIT.MCBASESTATE+1
Source: MIDICar Player.a65
  3690 9A00			    m@setMCBase MAIN.MC6850.MC6850_Send2.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: MIDICar Player.a65]
     1 9A00 8C 97 89		      sty MAIN.MC6850.MC6850_SEND2.MCBASESTATE
     2 9A03 8E 98 89		      stx MAIN.MC6850.MC6850_SEND2.MCBASESTATE+1
Source: MIDICar Player.a65
  3691 9A06			    m@setMCBase MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: MIDICar Player.a65]
     1 9A06 8C AB 89		      sty MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASESTATE
     2 9A09 8E AC 89		      stx MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASESTATE+1
Source: MIDICar Player.a65
  3692 9A0C			    m@setMCBase MAIN.MIDI_FIFO.FIFO_FLUSH.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: MIDICar Player.a65]
     1 9A0C 8C E1 89		      sty MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASESTATE
     2 9A0F 8E E2 89		      stx MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASESTATE+1
Source: MIDICar Player.a65
  3693
  3694 9A12 C8			    iny
  3695 9A13			    m@setMCBase MAIN.MC6850.MC6850_Send2.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: MIDICar Player.a65]
     1 9A13 8C A0 89		      sty MAIN.MC6850.MC6850_SEND2.MCBASEBUF
     2 9A16 8E A1 89		      stx MAIN.MC6850.MC6850_SEND2.MCBASEBUF+1
Source: MIDICar Player.a65
  3696 9A19			    m@setMCBase MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: MIDICar Player.a65]
     1 9A19 8C BB 89		      sty MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASEBUF
     2 9A1C 8E BC 89		      stx MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASEBUF+1
Source: MIDICar Player.a65
  3697 9A1F			    m@setMCBase MAIN.MIDI_FIFO.FIFO_FLUSH.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: MIDICar Player.a65]
     1 9A1F 8C EB 89		      sty MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASEBUF
     2 9A22 8E EC 89		      stx MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASEBUF+1
Source: MIDICar Player.a65
  3698 				  
  3699 9A25			@exit
  3700 					.ifdef @new
  3701 					lda <@VarData
  3702 					sta :ztmp
  3703 					lda >@VarData
  3704 					ldy #@VarDataSize-1
  3705 					jmp @FreeMem
  3706 					els
  3707 9A25 60				rts						; ret
  3708 					eif
  3709 				.endl
  3710 9A26			l_09D2
  3711
  3712 				; optimize FAIL ('SETMCBASEADDRESS', init.inc), line = 28
  3713
  3714 9A26 20 F6 99			jsr SETMCBASEADDRESS
  3715
  3716 				; optimize OK (init.inc), line = 31
  3717
  3718 9A29 A9 03			lda #$03
  3719 9A2B 20 8C 89			jsr MC6850.MC6850_INIT
  3720
  3721 				; optimize OK (init.inc), line = 32
  3722
  3723 9A2E A9 16			lda #$16
  3724 9A30 20 8C 89			jsr MC6850.MC6850_INIT
  3725
  3726 				; optimize OK (init.inc), line = 34
  3727
  3728 9A33 A9 00			lda #$00
  3729 9A35 8D 00 D4			sta DMACTL
  3730
  3731 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', init.inc), line = 36
  3732
  3733 9A38 20 A3 89			jsr MIDI_FIFO.FIFO_RESET
  3734
  3735 				; optimize OK (init.inc), line = 39
  3736
  3737 9A3B A9 32			lda #$32
  3738 9A3D 8D F4 02			sta CHBASE
  3739
  3740 				; optimize OK (init.inc), line = 40
  3741
  3742 9A40 A9 40			lda #$40
  3743 9A42 85 88			sta SYSTEM.FILLCHAR_0102.A
  3744 9A44 A9 37			lda #$37
  3745 9A46 85 89			sta SYSTEM.FILLCHAR_0102.A+1
  3746 9A48 A9 A8			lda #$A8
  3747 9A4A 85 8C			sta SYSTEM.FILLCHAR_0102.COUNT
  3748 9A4C A9 02			lda #$02
  3749 9A4E 85 8D			sta SYSTEM.FILLCHAR_0102.COUNT+1
  3750 9A50 A9 00			lda #$00
  3751 9A52 85 84			sta SYSTEM.FILLCHAR_0102.VALUE
  3752 9A54				.local +MAIN.SYSTEM.FILLCHAR_0102
  3753 9A54				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0102.M@INLINE [Source: MIDICar Player.a65]
     4 9A54 20 D3 82			jsr @fill
Source: MIDICar Player.a65
  3754 					.endl
  3755
  3756 				; optimize OK (init.inc), line = 41
  3757
  3758 9A57 A9 00			lda #$00
  3759 9A59 8D 30 02			sta $0230
  3760 9A5C A9 34			lda #$34
  3761 9A5E 8D 31 02			sta $0230+1
  3762
  3763 				; optimize OK (init.inc), line = 42
  3764
  3765 9A61 A9 00			lda #$00
  3766 9A63 8D BB 20			sta FN
  3767 9A66 A9 80			lda #$80
  3768 9A68 8D BC 20			sta FN+1
  3769
  3770 				; optimize OK (init.inc), line = 44
  3771
  3772 9A6B A9 CB			lda #$CB
  3773 9A6D 85 D4			sta SCRADR
  3774 9A6F A9 39			lda #$39
  3775 9A71 85 D5			sta SCRADR+1
  3776 9A73 A9 59			lda #$59
  3777 9A75 8D C4 20			sta PUTINTTEXT.S
  3778 9A78 A9 80			lda #$80
  3779 9A7A 8D C5 20			sta PUTINTTEXT.S+1
  3780 9A7D 20 01 96			jsr PUTINTTEXT
  3781
  3782 				; optimize FAIL ('CLEARSTATUS', init.inc), line = 45
  3783
  3784 9A80 20 06 98			jsr CLEARSTATUS
  3785
  3786 				; -------------------  ASM Block 00000094  -------------------
  3787
  3788 				 lda #$fe \ sta $100 
  3788 9A83 A9 FE		 LDA #$FE 
  3788 9A85 8D 00 01		 STA $100 
  3789 				; optimize FAIL ('MISC.DETECTMEM', init.inc), line = 49
  3790
  3791 9A88 20 7D 94			jsr MISC.DETECTMEM
  3792 9A8B AD 8E 20			lda MISC.DETECTMEM.RESULT
  3793 9A8E 8D BF 20			sta TOTALXMS
  3794
  3795 				; optimize OK (init.inc), line = 50
  3796
  3797 9A91 A9 10			lda #$10
  3798 9A93 85 8C			sta :ecx
  3799 9A95 AD BF 20			lda TOTALXMS
  3800 9A98 85 84			sta :eax
  3801 					.ifdef fmulinit
  3802 					fmulu_8
  3803 					els
  3804 9A9A 20 62 83			imulCL
  3805 					eif
  3806 9A9D A5 84			lda :eax
  3807 9A9F 18 69 21			add #$21
  3808 9AA2 8D D1 20			sta MEMAVAILABLE
  3809 9AA5 A5 85			lda :eax+1
  3810 9AA7 69 00			adc #$00
  3811 9AA9 8D D2 20			sta MEMAVAILABLE+1
  3812
  3813 				; optimize OK (init.inc), line = 51
  3814
  3815 9AAC A9 1A			lda #$1A
  3816 9AAE 85 D4			sta SCRADR
  3817 9AB0 A9 3A			lda #$3A
  3818 9AB2 85 D5			sta SCRADR+1
  3819
  3820 				; optimize OK (init.inc), line = 52
  3821
  3822 9AB4 A9 6D			lda #$6D
  3823 9AB6 8D C4 20			sta PUTINTTEXT.S
  3824 9AB9 A9 80			lda #$80
  3825 9ABB 8D C5 20			sta PUTINTTEXT.S+1
  3826 9ABE 20 01 96			jsr PUTINTTEXT
  3827
  3828 				; optimize OK (init.inc), line = 53
  3829
  3830 9AC1 AD D1 20			lda MEMAVAILABLE
  3831 9AC4 8D CD 20			sta PUTINT.VALUE
  3832 9AC7 AD D2 20			lda MEMAVAILABLE+1
  3833 9ACA 8D CE 20			sta PUTINT.VALUE+1
  3834 9ACD 20 F7 96			jsr PUTINT
  3835
  3836 				; optimize OK (init.inc), line = 54
  3837
  3838 9AD0 A9 73			lda #$73
  3839 9AD2 8D C4 20			sta PUTINTTEXT.S
  3840 9AD5 A9 80			lda #$80
  3841 9AD7 8D C5 20			sta PUTINTTEXT.S+1
  3842 9ADA 20 01 96			jsr PUTINTTEXT
  3843
  3844 				; optimize OK (init.inc), line = 56
  3845
  3846 9ADD A9 00			lda #$00
  3847 9ADF 8D 79 94			sta MIDFILES.MIDTRACKS
  3848 9AE2 A9 2E			lda #$2E
  3849 9AE4 8D 7A 94			sta MIDFILES.MIDTRACKS+1
  3850
  3851 				; optimize OK (init.inc), line = 57
  3852
  3853 9AE7 A9 00			lda #$00
  3854 9AE9 8D 36 20			sta MIDFILES.MIDDATA
  3855 9AEC A9 40			lda #$40
  3856 9AEE 8D 37 20			sta MIDFILES.MIDDATA+1
  3857
  3858 				; optimize OK (init.inc), line = 59
  3859
  3860 9AF1 A9 00			lda #$00
  3861 9AF3 85 DE			sta MIDFILES.CTRK
  3862
  3863 9AF5			l_0A22
  3864 				; --- ForToDoCondition
  3865 9AF5 A5 DE			lda MIDFILES.CTRK
  3866 9AF7 C9 10			cmp #$10
  3867 9AF9 B0 33			jcs l_0A30
  3868
  3869 				; optimize OK (init.inc), line = 60
  3870
  3871 9AFB 85 9D			sta :STACKORIGIN+9
  3872 9AFD A9 00			lda #$00
  3873 9AFF 06 9D			asl :STACKORIGIN+9
  3874 9B01 2A				rol @
  3875 9B02 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3876 9B04 A5 DE			lda MIDFILES.CTRK
  3877 9B06 20 6F 88			jsr @mul40
  3878 9B09 18 69 40			add #$40
  3879 9B0C 85 9E			sta :STACKORIGIN+10
  3880 9B0E A9 37			lda #$37
  3881 9B10 65 85			adc :eax+1
  3882 9B12 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3883 9B14 A5 9D			lda :STACKORIGIN+9
  3884 9B16 18 69 00			add #$00
  3885 9B19 A8				tay
  3886 9B1A A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  3887 9B1C 69 00			adc #$00
  3888 9B1E 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3889 9B20 A5 9E			lda :STACKORIGIN+10
  3890 9B22 99 8F 20			sta adr.CHANNELSCRADR,y
  3891 9B25 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  3892 9B27 99 90 20			sta adr.CHANNELSCRADR+1,y
  3893
  3894 				; --- ForToDoEpilog
  3895 9B2A E6 DE			inc MIDFILES.CTRK
  3896 9B2C D0 C7			jne l_0A22
  3897 9B2E			l_0A30
  3898
  3899 				; -------------------  ASM Block 00000095  -------------------
  3900
  3901 9B2E A5 14		    lda $14
  3902 9B30 C5 14		    cmp $14
  3903 9B32 F0 FC		    beq *-2
  3904 				  
  3905 				; optimize OK (init.inc), line = 69
  3906
  3907 9B34 A5 14			lda _TM
  3908 9B36 8D AF 20			sta OTM
  3909
  3910 				; optimize FAIL ('SETCOLORS', init.inc), line = 70
  3911
  3912 9B39 20 AD 95			jsr SETCOLORS
  3913 9B3C A9 22			lda #$22
  3914 9B3E 8D 00 D4			sta DMACTL
  3915
  3916 				; optimize OK (init.inc), line = 71
  3917
  3918 9B41 A9 01			lda #$01
  3919 9B43 8D BA 20			sta ISSTOPPED
  3920
  3921 				; ------------------------------------------------------------
  3922
  3923 = 20D1			MEMAVAILABLE	= DATAORIGIN+$00D1
  3924
  3925 = 20D1			@VarData	= MEMAVAILABLE
  3926 = 0002			@VarDataSize	= 2
  3927
  3928 9B46			@exit
  3929 					.ifdef @new
  3930 					lda <@VarData
  3931 					sta :ztmp
  3932 					lda >@VarData
  3933 					ldy #@VarDataSize-1
  3934 					jmp @FreeMem
  3935 					els
  3936 9B46 60				rts						; ret
  3937 					eif
  3938 				.endl
  3939
  3940 9B47			.local	LOADSONG					; PROCEDURE
  3941
  3942 9B47 4C AE 9B			jmp l_0A59
  3943
  3944 9B4A			.local	LOADPRC						; PROCEDURE
  3945 9B4A 8D D5 20			sta V
  3946
  3947 				; optimize OK (load.inc), line = 8
  3948
  3949 9B4D A9 5C			lda #$5C
  3950 9B4F 18 6D D4 20			add T
  3951 9B53 8D FC 39			sta $39FC
  3952
  3953 				; optimize FAIL (0, load.inc), line = 9
  3954
  3955 9B56 EE D4 20			inc T
  3956 9B59 AD D4 20			lda T
  3957 9B5C C9 04			cmp #$04
  3958 9B5E D0 05			jne l_0A7B
  3959 9B60 A9 00			lda #$00
  3960 9B62 8D D4 20			sta T
  3961 9B65			l_0A7B
  3962
  3963 				; optimize OK (load.inc), line = 10
  3964
  3965 9B65 AD D5 20			lda V
  3966 9B68 F0 43			jeq l_0A94
  3967
  3968 				; optimize OK (load.inc), line = 12
  3969
  3970 9B6A A9 07			lda #$07
  3971 9B6C 85 D4			sta SCRADR
  3972 9B6E A9 3A			lda #$3A
  3973 9B70 85 D5			sta SCRADR+1
  3974
  3975 				; optimize OK (load.inc), line = 13
  3976
  3977 9B72 AD D5 20			lda V
  3978 9B75 38 E9 01			sub #$01
  3979 9B78 8D CD 20			sta PUTINT.VALUE
  3980 9B7B A9 00			lda #$00
  3981 9B7D E9 00			sbc #$00
  3982 9B7F 8D CE 20			sta PUTINT.VALUE+1
  3983 9B82 20 F7 96			jsr PUTINT
  3984 9B85 A4 D5			ldy SCRADR+1
  3985 9B87 84 81			sty :bp+1
  3986 9B89 A4 D4			ldy SCRADR
  3987 9B8B A9 8F			lda #$8F
  3988 9B8D 91 80			sta (:bp),y
  3989 9B8F E6 D4			inc SCRADR
  3990 9B91 D0 02			sne
  3991 9B93 E6 D5			inc SCRADR+1
  3992
  3993 				; optimize OK (load.inc), line = 14
  3994
  3995 9B95 AD 3A 20			lda MIDFILES.TOTALTRACKS
  3996 9B98 8D CD 20			sta PUTINT.VALUE
  3997 9B9B A9 00			lda #$00
  3998 9B9D 8D CE 20			sta PUTINT.VALUE+1
  3999 9BA0 20 F7 96			jsr PUTINT
  4000
  4001 				; optimize OK (load.inc), line = 15
  4002
  4003 9BA3 A4 D5			ldy SCRADR+1
  4004 9BA5 84 81			sty :bp+1
  4005 9BA7 A4 D4			ldy SCRADR
  4006 9BA9 A9 80			lda #$80
  4007 9BAB 91 80			sta (:bp),y
  4008 9BAD			l_0A94
  4009
  4010 				; ------------------------------------------------------------
  4011
  4012 = 20D5			V	= DATAORIGIN+$00D5
  4013
  4014 = 20D5			@VarData	= V
  4015 = 0001			@VarDataSize	= 1
  4016
  4017 9BAD			@exit
  4018 					.ifdef @new
  4019 					lda <@VarData
  4020 					sta :ztmp
  4021 					lda >@VarData
  4022 					ldy #@VarDataSize-1
  4023 					jmp @FreeMem
  4024 					els
  4025 9BAD 60				rts						; ret
  4026 					eif
  4027 				.endl
  4028 9BAE			l_0A59
  4029
  4030 				; optimize FAIL ('CLEARSTATUS', load.inc), line = 21
  4031
  4032 9BAE 20 06 98			jsr CLEARSTATUS
  4033
  4034 				; optimize FAIL ('STATUSLOADING', load.inc), line = 22
  4035
  4036 9BB1 20 DD 99			jsr STATUSLOADING
  4037 9BB4 A9 80			lda #$80
  4038 9BB6 8D C0 20			sta PUTTEXTINVERT
  4039
  4040 				; optimize OK (load.inc), line = 23
  4041
  4042 9BB9 A9 4A			lda <LOADPRC
  4043 9BBB 8D 5B 20			sta MIDFILES.LOADPROCESS
  4044 9BBE A9 9B			lda >LOADPRC
  4045 9BC0 8D 5C 20			sta MIDFILES.LOADPROCESS+1
  4046 9BC3 A9 00			lda #$00
  4047 9BC5 8D D4 20			sta T
  4048
  4049 				; optimize OK (load.inc), line = 24
  4050
  4051 9BC8 AD BB 20			lda FN
  4052 9BCB 8D 61 20			sta MIDFILES.LOADMID.FN
  4053 9BCE AD BC 20			lda FN+1
  4054 9BD1 8D 62 20			sta MIDFILES.LOADMID.FN+1
  4055 9BD4 20 F4 8A			jsr MIDFILES.LOADMID
  4056 9BD7 AD 63 20			lda MIDFILES.LOADMID.RESULT
  4057 9BDA 8D D3 20			sta ERR
  4058
  4059 				; optimize OK (load.inc), line = 25
  4060
  4061 9BDD F0 6F			jeq l_0AD9
  4062
  4063 				; optimize OK (load.inc), line = 27
  4064
  4065 9BDF A9 FC			lda #$FC
  4066 9BE1 85 D4			sta SCRADR
  4067 9BE3 A9 39			lda #$39
  4068 9BE5 85 D5			sta SCRADR+1
  4069
  4070 				; optimize OK (load.inc), line = 28
  4071
  4072 9BE7 AD D3 20			lda ERR
  4073 9BEA 30 2B			jmi l_0AF0
  4074
  4075 				; optimize OK (load.inc), line = 29
  4076
  4077 9BEC 8D D6 20			sta @CASETMP_0004
  4078 9BEF C9 64			cmp #$64
  4079 9BF1 D0 10			jne l_0AFC
  4080 				@
  4081
  4082 				; optimize OK (load.inc), line = 30
  4083
  4084 9BF3 A9 77			lda #$77
  4085 9BF5 8D C4 20			sta PUTINTTEXT.S
  4086 9BF8 A9 80			lda #$80
  4087 9BFA 8D C5 20			sta PUTINTTEXT.S+1
  4088 9BFD 20 01 96			jsr PUTINTTEXT
  4089
  4090 9C00 4C 14 9C			jmp a_0004
  4091 9C03			l_0AFC
  4092 9C03 C9 65			cmp #$65
  4093 9C05 D0 0D			jne l_0B07
  4094 				@
  4095
  4096 				; optimize OK (load.inc), line = 31
  4097
  4098 9C07 A9 8D			lda #$8D
  4099 9C09 8D C4 20			sta PUTINTTEXT.S
  4100 9C0C A9 80			lda #$80
  4101 9C0E 8D C5 20			sta PUTINTTEXT.S+1
  4102 9C11 20 01 96			jsr PUTINTTEXT
  4103
  4104 9C14			l_0B07
  4105 9C14			a_0004
  4106 9C14 4C 3C 9C			jmp l_0B18
  4107 9C17			l_0AF0
  4108
  4109 				; optimize OK (load.inc), line = 35
  4110
  4111 9C17 A9 A3			lda #$A3
  4112 9C19 8D C4 20			sta PUTINTTEXT.S
  4113 9C1C A9 80			lda #$80
  4114 9C1E 8D C5 20			sta PUTINTTEXT.S+1
  4115 9C21 20 01 96			jsr PUTINTTEXT
  4116 9C24 AD D3 20			lda ERR
  4117 9C27 8D CD 20			sta PUTINT.VALUE
  4118 9C2A A9 00			lda #$00
  4119 9C2C 8D CE 20			sta PUTINT.VALUE+1
  4120 9C2F 20 F7 96			jsr PUTINT
  4121 9C32 A4 D5			ldy SCRADR+1
  4122 9C34 84 81			sty :bp+1
  4123 9C36 A4 D4			ldy SCRADR
  4124 9C38 A9 80			lda #$80
  4125 9C3A 91 80			sta (:bp),y
  4126 9C3C			l_0B18
  4127
  4128 				; --- WhileProlog
  4129 9C3C			l_0B25
  4130
  4131 				; optimize OK (load.inc), line = 37
  4132
  4133 9C3C AD FC 02			lda KEYB
  4134 9C3F C9 FF			cmp #$FF
  4135 9C41 F0 F9			jeq l_0B25
  4136
  4137 				; optimize OK (load.inc), line = 38
  4138
  4139 9C43 A9 00			lda #$00
  4140 9C45 8D C0 20			sta PUTTEXTINVERT
  4141
  4142 				; optimize OK (load.inc), line = 39
  4143
  4144 9C48 8D 3A 20			sta MIDFILES.TOTALTRACKS
  4145 9C4B 4C 6E 9C			jmp @exit					; exit
  4146 9C4E			l_0AD9
  4147
  4148 				; optimize OK (load.inc), line = 41
  4149
  4150 9C4E A9 00			lda #$00
  4151 9C50 85 88			sta SYSTEM.MOVE_0103.SOURCE
  4152 9C52 A9 2E			lda #$2E
  4153 9C54 85 89			sta SYSTEM.MOVE_0103.SOURCE+1
  4154 9C56 A9 00			lda #$00
  4155 9C58 85 8C			sta SYSTEM.MOVE_0103.DEST
  4156 9C5A A9 2C			lda #$2C
  4157 9C5C 85 8D			sta SYSTEM.MOVE_0103.DEST+1
  4158 9C5E A9 00			lda #$00
  4159 9C60 85 84			sta SYSTEM.MOVE_0103.COUNT
  4160 9C62 A9 02			lda #$02
  4161 9C64 85 85			sta SYSTEM.MOVE_0103.COUNT+1
  4162 9C66				.local +MAIN.SYSTEM.MOVE_0103
  4163 9C66				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0103.M@INLINE [Source: MIDICar Player.a65]
     4 9C66 20 7E 82			jsr @move
Source: MIDICar Player.a65
  4164 					.endl
  4165
  4166 				; optimize OK (load.inc), line = 42
  4167
  4168 9C69 A9 00			lda #$00
  4169 9C6B 8D C0 20			sta PUTTEXTINVERT
  4170
  4171 				; ------------------------------------------------------------
  4172
  4173 = 20D3			ERR	= DATAORIGIN+$00D3
  4174 = 20D4			T	= DATAORIGIN+$00D4
  4175 = 20D6			@CASETMP_0004	= DATAORIGIN+$00D6
  4176
  4177 = 20D3			@VarData	= ERR
  4178 = 0003			@VarDataSize	= 3
  4179
  4180 9C6E			@exit
  4181 					.ifdef @new
  4182 					lda <@VarData
  4183 					sta :ztmp
  4184 					lda >@VarData
  4185 					ldy #@VarDataSize-1
  4186 					jmp @FreeMem
  4187 					els
  4188 9C6E 60				rts						; ret
  4189 					eif
  4190 				.endl
  4191 9C6F			l_00B8
  4192
  4193 				; optimize FAIL ('INIT', MIDICar Player.pas), line = 58
  4194
  4195 9C6F 20 F3 99			jsr INIT
  4196
  4197 				; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 60
  4198
  4199 9C72 20 68 89			jsr SYSTEM.PARAMCOUNT
  4200 9C75 A9 00			lda #$00
  4201 9C77 CD 0B 20			cmp SYSTEM.PARAMCOUNT.RESULT
  4202 9C7A B0 21			jcs l_0B55
  4203 				@
  4204
  4205 				; optimize OK (MIDICar Player.pas), line = 62
  4206
  4207 9C7C A9 01			lda #$01
  4208 9C7E 20 71 89			jsr SYSTEM.PARAMSTR
  4209 9C81 AD 86 89			lda SYSTEM.PARAMSTR.RESULT
  4210 9C84 8D BB 20			sta FN
  4211 9C87 AD 87 89			lda SYSTEM.PARAMSTR.RESULT+1
  4212 9C8A 8D BC 20			sta FN+1
  4213
  4214 				; optimize OK (MIDICar Player.pas), line = 63
  4215
  4216 9C8D AD BF 20			lda TOTALXMS
  4217 9C90 85 E1			sta MIDFILES._BANK
  4218
  4219 				; optimize OK (MIDICar Player.pas), line = 64
  4220
  4221 9C92 A9 00			lda #$00
  4222 9C94 85 E2			sta MIDFILES._ADR
  4223 9C96 A9 40			lda #$40
  4224 9C98 85 E3			sta MIDFILES._ADR+1
  4225
  4226 				; optimize FAIL ('LOADSONG', MIDICar Player.pas), line = 65
  4227
  4228 9C9A 20 47 9B			jsr LOADSONG
  4229 9C9D			l_0B55
  4230
  4231 				; optimize FAIL ('SETNMI', MIDICar Player.pas), line = 68
  4232
  4233 9C9D 20 75 95			jsr SETNMI
  4234
  4235 				; optimize FAIL ('CLEARSTATUS', MIDICar Player.pas), line = 70
  4236
  4237 9CA0 20 06 98			jsr CLEARSTATUS
  4238
  4239 				; optimize FAIL ('CLEARUVMETERS', MIDICar Player.pas), line = 71
  4240
  4241 9CA3 20 67 98			jsr CLEARUVMETERS
  4242
  4243 				; --- RepeatUntilProlog
  4244 9CA6			l_0B6C
  4245
  4246 				; optimize FAIL ('MIDFILES.PROCESSMIDI', MIDICar Player.pas), line = 75
  4247
  4248 9CA6 20 4F 93			jsr MIDFILES.PROCESSMIDI
  4249
  4250 				; optimize OK (MIDICar Player.pas), line = 76
  4251
  4252 9CA9 AD BA 20			lda ISSTOPPED
  4253 9CAC D0 10			jne l_0B88
  4254 9CAE A5 DF			lda MIDFILES.PLAYINGTRACKS
  4255 9CB0 D0 0C			jne l_0B88
  4256
  4257 				; optimize FAIL ('STATUSSTOPPED', MIDICar Player.pas), line = 78
  4258
  4259 9CB2 20 77 99			jsr STATUSSTOPPED
  4260
  4261 				; optimize OK (MIDICar Player.pas), line = 79
  4262
  4263 9CB5 A5 4A			lda PLAYERSTATUS
  4264 9CB7 29 04			and #$04
  4265 9CB9 F0 03			jeq l_0BA0
  4266
  4267 				; optimize FAIL ('STATUSPLAYING', MIDICar Player.pas), line = 80
  4268
  4269 9CBB 20 CB 98			jsr STATUSPLAYING
  4270 9CBE			l_0BA0
  4271 9CBE			l_0B88
  4272
  4273 				; optimize OK (MIDICar Player.pas), line = 83
  4274
  4275 9CBE A5 14			lda _TM
  4276 9CC0 CD AF 20			cmp OTM
  4277 9CC3 D0 03 4C 4A 9D		jeq l_0BBA
  4278
  4279 				; optimize OK (MIDICar Player.pas), line = 85
  4280
  4281 9CC8 8D AF 20			sta OTM
  4282
  4283 				; optimize OK (MIDICar Player.pas), line = 86
  4284
  4285 9CCB A9 EE			lda #$EE
  4286 9CCD 85 D4			sta SCRADR
  4287 9CCF A9 39			lda #$39
  4288 9CD1 85 D5			sta SCRADR+1
  4289 9CD3 A9 F0			lda <MIDFILES._TOTALTICKS
  4290 9CD5 8D CA 20			sta PUTHEX.V
  4291 9CD8 A9 00			lda >MIDFILES._TOTALTICKS
  4292 9CDA 8D CB 20			sta PUTHEX.V+1
  4293 9CDD A9 08			lda #$08
  4294 9CDF 8D CC 20			sta PUTHEX.N
  4295 9CE2 20 8C 96			jsr PUTHEX
  4296
  4297 				; optimize OK (uvmeters.inc), line = 1
  4298
  4299 9CE5 A5 4A			lda PLAYERSTATUS
  4300 9CE7 29 02			and #$02
  4301 9CE9 F0 5F			jeq l_0BDE
  4302
  4303 				; optimize OK (uvmeters.inc), line = 3
  4304
  4305 9CEB A9 00			lda #$00
  4306 9CED 8D B0 20			sta CHN
  4307
  4308 				; --- RepeatUntilProlog
  4309 9CF0			l_0BE4
  4310
  4311 				; optimize OK (uvmeters.inc), line = 5
  4312
  4313 9CF0 AD B0 20			lda CHN
  4314 9CF3 0A				asl @
  4315 9CF4 A8				tay
  4316 9CF5 B9 8F 20			lda adr.CHANNELSCRADR,y
  4317 9CF8 85 D4			sta SCRADR
  4318 9CFA B9 90 20			lda adr.CHANNELSCRADR+1,y
  4319 9CFD 85 D5			sta SCRADR+1
  4320
  4321 				; optimize OK (uvmeters.inc), line = 6
  4322
  4323 9CFF AC B0 20			ldy CHN
  4324 9D02 B9 49 20			lda MIDFILES.adr.CHNVOLUME,y
  4325 9D05 8D B9 20			sta C
  4326
  4327 				; optimize OK (uvmeters.inc), line = 7
  4328
  4329 9D08 F0 36			jeq l_0C07
  4330
  4331 				; optimize OK (uvmeters.inc), line = 9
  4332
  4333 9D0A C9 05			cmp #$05
  4334 9D0C 90 09			jcc l_0C1A
  4335 9D0E 38 E9 04			sub #$04
  4336 9D11 8D B9 20			sta C
  4337 9D14 4C 1C 9D			jmp l_0C25
  4338 9D17			l_0C1A
  4339 9D17 A9 00			lda #$00
  4340 9D19 8D B9 20			sta C
  4341 9D1C			l_0C25
  4342
  4343 				; optimize OK (uvmeters.inc), line = 10
  4344
  4345 9D1C AC B0 20			ldy CHN
  4346 9D1F AD B9 20			lda C
  4347 9D22 99 49 20			sta MIDFILES.adr.CHNVOLUME,y
  4348
  4349 				; optimize OK (uvmeters.inc), line = 11
  4350
  4351 9D25 4A				lsr @
  4352 9D26 29 3C			and #$3C
  4353 9D28 8D B7 20			sta V
  4354
  4355 				; -------------------  ASM Block 00000096  -------------------
  4356
  4357 9D2B 18			        clc
  4358 9D2C A9 C0		        lda #<UVMETER_ADDR
  4359 9D2E 6D B7 20		        adc v
  4360 9D31 85 D6		        sta $d6
  4361 9D33 A9 2B		        lda #>UVMETER_ADDR
  4362 9D35 85 D7		        sta $d7
  4363 9D37 A0 03		        ldy #3
  4364 9D39			      loop:
  4365 9D39 B1 D6		        lda ($d6),y
  4366 9D3B 91 D4		        sta ($d4),y
  4367 9D3D 88			        dey
  4368 9D3E 10 F9		        bpl loop
  4369 				      
  4370 9D40			l_0C07
  4371
  4372 				; optimize FAIL (0, uvmeters.inc), line = 29
  4373
  4374 9D40 EE B0 20			inc CHN
  4375
  4376 				; optimize OK (uvmeters.inc), line = 30
  4377
  4378 9D43 AD B0 20			lda CHN
  4379 9D46 C9 10			cmp #$10
  4380 9D48 D0 A6			jne l_0BE4
  4381 9D4A			l_0BDE
  4382 9D4A			l_0BBA
  4383
  4384 				; optimize OK (keyboard.inc), line = 1
  4385
  4386 9D4A AD FC 02			lda KEYB
  4387 9D4D C9 FF			cmp #$FF
  4388 9D4F D0 03 4C 31 9E		jeq l_0C69
  4389
  4390 				; optimize OK (keyboard.inc), line = 3
  4391
  4392 9D54 8D D7 20			sta @CASETMP_0005
  4393 9D57 C9 1C			cmp #$1C
  4394 9D59 D0 06			jne l_0C75
  4395 				@
  4396 9D5B 4C 34 9E			jmp b_0B6C					; break
  4397
  4398 9D5E 4C 2C 9E			jmp a_0005
  4399 9D61			l_0C75
  4400 9D61 C9 00			cmp #$00
  4401 9D63 D0 0C			jne l_0C7E
  4402 				@
  4403
  4404 				; optimize OK (keyboard.inc), line = 7
  4405
  4406 9D65 A5 4A			lda PLAYERSTATUS
  4407 9D67 49 04			eor #$04
  4408 9D69 85 4A			sta PLAYERSTATUS
  4409
  4410 				; optimize FAIL ('ISLOOPED', keyboard.inc), line = 8
  4411
  4412 9D6B 20 DA 97			jsr ISLOOPED
  4413
  4414 9D6E 4C 2C 9E			jmp a_0005
  4415 9D71			l_0C7E
  4416 9D71 C9 25			cmp #$25
  4417 9D73 D0 15			jne l_0C92
  4418 				@
  4419
  4420 				; optimize OK (keyboard.inc), line = 12
  4421
  4422 9D75 A5 4A			lda PLAYERSTATUS
  4423 9D77 49 02			eor #$02
  4424 9D79 85 4A			sta PLAYERSTATUS
  4425
  4426 				; optimize FAIL ('CLEARWORKAREA', keyboard.inc), line = 13
  4427
  4428 9D7B 20 C2 97			jsr CLEARWORKAREA
  4429
  4430 				; optimize OK (keyboard.inc), line = 14
  4431
  4432 9D7E A5 4A			lda PLAYERSTATUS
  4433 9D80 29 02			and #$02
  4434 9D82 F0 03			jeq l_0CB3
  4435
  4436 				; optimize FAIL ('CLEARUVMETERS', keyboard.inc), line = 15
  4437
  4438 9D84 20 67 98			jsr CLEARUVMETERS
  4439 9D87			l_0CB3
  4440
  4441 9D87 4C 2C 9E			jmp a_0005
  4442 9D8A			l_0C92
  4443 9D8A C9 27			cmp #$27
  4444 9D8C D0 0C			jne l_0CC0
  4445 				@
  4446
  4447 				; optimize OK (keyboard.inc), line = 19
  4448
  4449 9D8E A5 4A			lda PLAYERSTATUS
  4450 9D90 49 01			eor #$01
  4451 9D92 85 4A			sta PLAYERSTATUS
  4452
  4453 				; optimize FAIL ('SETCOLORS', keyboard.inc), line = 20
  4454
  4455 9D94 20 AD 95			jsr SETCOLORS
  4456
  4457 9D97 4C 2C 9E			jmp a_0005
  4458 9D9A			l_0CC0
  4459 9D9A C9 0A			cmp #$0A
  4460 9D9C D0 10			jne l_0CD4
  4461 				@
  4462
  4463 				; optimize OK (keyboard.inc), line = 24
  4464
  4465 9D9E A5 F5			lda MIDFILES._TIMERSTATUS
  4466 9DA0 10 06			jpl l_0CEA
  4467
  4468 				; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 26
  4469
  4470 9DA2 20 CB 98			jsr STATUSPLAYING
  4471 9DA5 4C AB 9D			jmp l_0CF5
  4472 9DA8			l_0CEA
  4473
  4474 				; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 27
  4475
  4476 9DA8 20 3E 99			jsr STATUSPAUSE
  4477 9DAB			l_0CF5
  4478
  4479 9DAB 4C 2C 9E			jmp a_0005
  4480 9DAE			l_0CD4
  4481 9DAE C9 3E			cmp #$3E
  4482 9DB0 D0 06			jne l_0CFF
  4483 				@
  4484
  4485 				; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 29
  4486
  4487 9DB2 20 77 99			jsr STATUSSTOPPED
  4488 9DB5 4C 2C 9E			jmp a_0005
  4489 9DB8			l_0CFF
  4490 9DB8 C9 0E			cmp #$0E
  4491 9DBA F0 08			beq @+
  4492 9DBC C9 06			cmp #$06
  4493 9DBE F0 04			beq @+
  4494 9DC0 C9 0F			cmp #$0F
  4495 9DC2 D0 68			jne l_0D0D
  4496 				@
  4497
  4498 				; optimize OK (keyboard.inc), line = 32
  4499
  4500 9DC4 AD FC 02			lda KEYB
  4501 9DC7 C9 0E			cmp #$0E
  4502 9DC9 D0 21			jne l_0D1F
  4503 9DCB AD 5D 20			lda MIDFILES.TEMPOSHIFT
  4504 9DCE 18 69 20			add #$20
  4505 9DD1 8D 5D 20			sta MIDFILES.TEMPOSHIFT
  4506 9DD4 AD 5E 20			lda MIDFILES.TEMPOSHIFT+1
  4507 9DD7 69 4E			adc #$4E
  4508 9DD9 8D 5E 20			sta MIDFILES.TEMPOSHIFT+1
  4509 9DDC AD 5F 20			lda MIDFILES.TEMPOSHIFT+2
  4510 9DDF 69 00			adc #$00
  4511 9DE1 8D 5F 20			sta MIDFILES.TEMPOSHIFT+2
  4512 9DE4 AD 60 20			lda MIDFILES.TEMPOSHIFT+3
  4513 9DE7 69 00			adc #$00
  4514 9DE9 8D 60 20			sta MIDFILES.TEMPOSHIFT+3
  4515 9DEC			l_0D1F
  4516
  4517 				; optimize OK (keyboard.inc), line = 33
  4518
  4519 9DEC AD FC 02			lda KEYB
  4520 9DEF C9 06			cmp #$06
  4521 9DF1 D0 21			jne l_0D35
  4522 9DF3 AD 5D 20			lda MIDFILES.TEMPOSHIFT
  4523 9DF6 38 E9 20			sub #$20
  4524 9DF9 8D 5D 20			sta MIDFILES.TEMPOSHIFT
  4525 9DFC AD 5E 20			lda MIDFILES.TEMPOSHIFT+1
  4526 9DFF E9 4E			sbc #$4E
  4527 9E01 8D 5E 20			sta MIDFILES.TEMPOSHIFT+1
  4528 9E04 AD 5F 20			lda MIDFILES.TEMPOSHIFT+2
  4529 9E07 E9 00			sbc #$00
  4530 9E09 8D 5F 20			sta MIDFILES.TEMPOSHIFT+2
  4531 9E0C AD 60 20			lda MIDFILES.TEMPOSHIFT+3
  4532 9E0F E9 00			sbc #$00
  4533 9E11 8D 60 20			sta MIDFILES.TEMPOSHIFT+3
  4534 9E14			l_0D35
  4535
  4536 				; optimize OK (keyboard.inc), line = 34
  4537
  4538 9E14 AD FC 02			lda KEYB
  4539 9E17 C9 0F			cmp #$0F
  4540 9E19 D0 0E			jne l_0D4B
  4541 9E1B A9 00			lda #$00
  4542 9E1D 8D 5D 20			sta MIDFILES.TEMPOSHIFT
  4543 9E20 8D 5E 20			sta MIDFILES.TEMPOSHIFT+1
  4544 9E23 8D 5F 20			sta MIDFILES.TEMPOSHIFT+2
  4545 9E26 8D 60 20			sta MIDFILES.TEMPOSHIFT+3
  4546 9E29			l_0D4B
  4547
  4548 				; optimize FAIL ('MIDFILES.SETTEMPO', keyboard.inc), line = 35
  4549
  4550 9E29 20 7A 8E			jsr MIDFILES.SETTEMPO
  4551
  4552 9E2C			l_0D0D
  4553 9E2C			a_0005
  4554
  4555 				; optimize OK (keyboard.inc), line = 38
  4556
  4557 9E2C A9 FF			lda #$FF
  4558 9E2E 8D FC 02			sta KEYB
  4559 9E31			l_0C69
  4560
  4561 				; optimize OK (MIDICar Player.pas), line = 92
  4562
  4563 9E31 4C A6 9C			jmp l_0B6C
  4564 9E34			b_0B6C
  4565
  4566 				; optimize FAIL ('UNSETNMI', MIDICar Player.pas), line = 95
  4567
  4568 9E34 20 96 95			jsr UNSETNMI
  4569
  4570 				; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 97
  4571
  4572 9E37 20 9D 98			jsr EXIT2DOS
  4573
  4574 				; ------------------------------------------------------------
  4575
  4576 = 3000			CHARS_ADDR	= $3000
  4577 = 3400			DLIST_ADDR	= $3400
  4578 = 3448			SCREEN_ADDR	= $3448
  4579 = 3740			SCREEN_WORK	= $3740
  4580 = 39E8			SCREEN_TIME	= $39E8
  4581 = 39FC			SCREEN_STATUS	= $39FC
  4582 = 3A24			SCREEN_FOOT	= $3A24
  4583 = 2BC0			UVMETER_ADDR	= $2BC0
  4584 = 2C00			START_INFO_ADDR	= $2C00
  4585 = 2E00			TRACK_DATA_ADDR	= $2E00
  4586 = 4000			MIDI_DATA_ADDR	= $4000
  4587 = 0021			FREE_MEM	= $21
  4588 = 0020			F_CLEAR	= $20
  4589 = 0001			PS_COLORSET	= $01
  4590 = 0002			PS_VIEW	= $02
  4591 = 0004			PS_LOOP	= $04
  4592 = 208F			adr.CHANNELSCRADR	= [DATAORIGIN+$008F] .array [16] .word
  4593 9E3A			.var CHANNELSCRADR	= adr.CHANNELSCRADR .word
  4594 = 00D4			SCRADR	= $D4
  4595 = 0014			_TM	= $14
  4596 = 20AF			OTM	= DATAORIGIN+$00AF
  4597 = 20B0			CHN	= DATAORIGIN+$00B0
  4598 = 20B1			TPTR	= DATAORIGIN+$00B1
  4599 = 20B3			TPS	= DATAORIGIN+$00B3
  4600 = 20B5			SEC	= DATAORIGIN+$00B5
  4601 = 20B6			TRKSTAT	= DATAORIGIN+$00B6
  4602 = 20B7			V	= DATAORIGIN+$00B7
  4603 = 20B8			I	= DATAORIGIN+$00B8
  4604 = 20B9			C	= DATAORIGIN+$00B9
  4605 = 20BA			ISSTOPPED	= DATAORIGIN+$00BA
  4606 = 20BB			FN	= DATAORIGIN+$00BB
  4607 = 20BD			OLDNMIVEC	= DATAORIGIN+$00BD
  4608 = 004A			PLAYERSTATUS	= $4A
  4609 = 20BF			TOTALXMS	= DATAORIGIN+$00BF
  4610 = 80B1			adr.COLORS	= CODEORIGIN+$00B1
  4611 9E3A			.var COLORS	= adr.COLORS .word
  4612 = 80BB			adr.GM_RESET	= CODEORIGIN+$00BB
  4613 9E3A			.var GM_RESET	= adr.GM_RESET .word
  4614 = 0000			K_L	= $00
  4615 = 0006			K_PLUS	= $06
  4616 = 000A			K_P	= $0A
  4617 = 000E			K_MINUS	= $0E
  4618 = 000F			K_EQ	= $0F
  4619 = 001C			K_ESC	= $1C
  4620 = 0021			K_SPACE	= $21
  4621 = 0025			K_M	= $25
  4622 = 0027			K_INVERS	= $27
  4623 = 003E			K_S	= $3E
  4624 = 02FC			KEYB	= $02FC
  4625 = 20C0			PUTTEXTINVERT	= DATAORIGIN+$00C0
  4626 = D40E			NMIEN	= $D40E
  4627 = FFFA			NMIVEC	= $FFFA
  4628 = 20C1			SDMACTL	= DATAORIGIN+$00C1
  4629 = D400			DMACTL	= $D400
  4630 = 02F4			CHBASE	= $02F4
  4631 = 0041			SOUNDR	= $41
  4632 = 20D7			@CASETMP_0005	= DATAORIGIN+$00D7
  4633 9E3A			@exit
  4634
  4635 9E3A A2 00		@halt	ldx #$00
  4636 9E3C 9A				txs
  4637 					.ifdef MAIN.@DEFINES.ROMOFF
  4638 9E3D EE 01 D3			inc portb
  4639 					.fi
  4640
  4641 9E40 A0 01			ldy #$01
  4642
  4643 9E42 60				rts
  4644
  4645 				; ------------------------------------------------------------
  4646
  4647 9E43 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  4648
  4649 				; ------------------------------------------------------------
  4650
  4651 9E53			.local	@DEFINES
  4652 9E53			ATARI
  4653 9E53			USE_FIFO
  4654 9E53			USE_CIO
  4655 9E53			USE_SUPPORT_VARS
  4656 9E53			ROMOFF
  4657 				.endl
  4658
  4659 9E53			.local	@RESOURCE
  4660 				.endl
  4661
  4662 = 9E53 8F 20		CHANNELSCRADR
  4662 = 9E55 B1 80		COLORS
  4662 = 9E57 BB 80		GM_RESET
  4662 				.endl							; MAIN
  4663
  4664 				; ------------------------------------------------------------
  4665 				; ------------------------------------------------------------
  4666
  4667 				.macro	UNITINITIALIZATION
  4668 				
  4669 					.ifdef MAIN.SYSTEM.@UnitInit
  4670 					jsr MAIN.SYSTEM.@UnitInit
  4671 					.fi
  4672 				
  4673 					.ifdef MAIN.MC6850.@UnitInit
  4674 					jsr MAIN.MC6850.@UnitInit
  4675 					.fi
  4676 				
  4677 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  4678 					jsr MAIN.MIDI_FIFO.@UnitInit
  4679 					.fi
  4680 				
  4681 					.ifdef MAIN.CIO.@UnitInit
  4682 					jsr MAIN.CIO.@UnitInit
  4683 					.fi
  4684 				
  4685 					.ifdef MAIN.MIDFILES.@UnitInit
  4686 					jsr MAIN.MIDFILES.@UnitInit
  4687 					.fi
  4688 				
  4689 					.ifdef MAIN.MISC.@UnitInit
  4690 					jsr MAIN.MISC.@UnitInit
  4691 					.fi
  4692 				.endm
  4693
  4694 				; ------------------------------------------------------------
  4695
  4696 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4697 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4697 				SYSTEM: $892E..$898B
  4698 					eif
  4699
  4700 					ift .SIZEOF(MAIN.MC6850) > 0
  4701 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  4701 				MC6850: $898C..$89A2
  4702 					eif
  4703
  4704 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  4705 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  4705 				MIDI_FIFO: $89A3..$89F6
  4706 					eif
  4707
  4708 					ift .SIZEOF(MAIN.CIO) > 0
  4709 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  4709 				CIO: $89F7..$8A86
  4710 					eif
  4711
  4712 					ift .SIZEOF(MAIN.MIDFILES) > 0
  4713 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  4713 				MIDFILES: $8A87..$947C
  4714 					eif
  4715
  4716 					ift .SIZEOF(MAIN.MISC) > 0
  4717 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  4717 				MISC: $947D..$9522
  4718 					eif
  4719
  4720 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4720 				CODE: $8000..$9E52
  4721
  4722 				; ------------------------------------------------------------
  4723
  4724 					org $2000
  4725
  4726 2000			DATAORIGIN
  4727 2000-2005> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  4728
  4729 = 0006			VARINITSIZE	= *-DATAORIGIN
  4730 = 00D8			VARDATASIZE	= 216
  4731
  4732 = 20D8			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4733
  4734 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4734 				DATA: $2000..$20D8
  4735
  4736 02E0-02E1> 94 88			run START
  4737
  4738 				; ------------------------------------------------------------
  4739
  4740 				.macro	STATICDATA
  4741 				.by  $00 $00 $02 $3E $3F $00 $02 $00  $00 $00 $02 $45 $3A $00 $03 $3B  $00 $00 $00 $09 $80 $B0 $EC $E1
  4742 				.by  $F9 $E9 $EE $E7 $80 $00 $03 $00  $00 $00 $00 $09 $80 $AE $EF $80  $F3 $EF $EE $E7 $80 $00 $03 $00
  4743 				.by  $3C $00 $00 $09 $80 $80 $B0 $E1  $F5 $F3 $E5 $80 $80 $00 $03 $00  $00 $3D $00 $09 $80 $B3 $F4 $EF
  4744 				.by  $F0 $F0 $E5 $E4 $80 $00 $09 $80  $AC $EF $E1 $E4 $E9 $EE $E7 $80  $00 $12 $46 $4A $4A $4A $4A $4A
  4745 				.by  $C8 $B4 $A9 $AD $A5 $C7 $4A $4A  $4A $4A $4A $49 $00 $04 $2D $65  $6D $1A $00 $02 $2B $22 $00 $14
  4746 				.by  $80 $B5 $EE $F3 $F5 $F0 $F0 $EF  $F2 $F4 $E5 $E4 $80 $E6 $EF $F2  $ED $E1 $F4 $80 $00 $14 $80 $AE
  4747 				.by  $EF $F4 $80 $E5 $EE $EF $F5 $E7  $E8 $F4 $80 $ED $E5 $ED $EF $F2  $F9 $80 $00 $0C $80 $A9 $8F $AF
  4748 				.by  $80 $A5 $F2 $F2 $EF $F2 $80 $83  $00 $00 $00 $0A $00 $0A $0A $0A  $00 $00 $00 $F0 $7E $7F $09 $01
  4749 				.by  $F7
  4750 				.endm
  4751
  4752 					end
