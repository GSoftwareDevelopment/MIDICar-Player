mads 2.1.5
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/05/02] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 1E00			CODEORIGIN	= $1E00
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 1E00				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 FFFF> 1E00-3A76> 04 54 + .by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $13 $4E $6F  $74 $20 $65 $6E $6F $75 $67 $68
     2 1E18 74 20 6D 65 6D 6F + .by  $74 $20 $6D $65 $6D $6F $72 $79  $2E $00 $0A $4F $70 $65 $6E $20  $66 $69 $6C $65 $20 $00 $0B $49
     3 1E30 2F 4F 20 45 72 72 + .by  $2F $4F $20 $45 $72 $72 $6F $72  $20 $23 $00 $07 $54 $72 $61 $63  $6B $3A $20 $00 $03 $2E $2E $2E
     4 1E48 00 0F 44 32 3A 53 + .by  $00 $0F $44 $32 $3A $53 $45 $4C  $46 $54 $45 $53 $54 $2E $4D $49  $44 $00 $0A $50 $6C $61 $79 $69
     5 1E60 6E 67 2E 2E 2E 00 + .by  $6E $67 $2E $2E $2E $00 $F0 $7E  $7F $09 $01 $F7
Source: MIDICar Player.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 1E6C			RTLIB
   113 1E6C				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D3
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $1E6C..$2975
   118
   119 				; ------------------------------------------------------------
   120
   121 2976			START
   122 2976 BA				tsx
   123 2977 8E 5D 3A			stx MAIN.@halt+1
   124
   125 					.ifdef fmulinit
   126 					fmulinit
   127 					.fi
   128
   129 = 01DD			VLEN	= VARDATASIZE-VARINITSIZE
   130 = 3A7E			VADR	= DATAORIGIN+VARINITSIZE
   131
   132 					ift VADR > $BFFF
   133 					ert 'Invalid memory address range ',VADR
   134 					eli (VLEN>0) && (VLEN<=256)
   135 					ldx #256-VLEN
   136 					lda #$00
   137 					sta:rne VADR+VLEN-256,x+
   138 					eli VLEN>256
   139 					@fill #VADR #VLEN #$00
   139 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   139 297A A9 7E 85 88 A9 3A +  MWA #VADR @FILL.PTR1
   139 2982 A9 DD 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   139 298A A9 00 85 84		 MVA #$00 @FILL.PTR2
   139 298E 20 62 22		 JSR @FILL
   140 					eif
   141
   142 				.ifdef :psptr
   143 					mwa #PROGRAMSTACK :psptr
   144 				.fi
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 2991				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 2991			.local	rominit
     5
     6 2991 78			        sei
     7 2992 A9 00		        lda #%00000000
     8 2994 8D 0E D4		        sta NMIEN       ;$D40E
     9 2997 A9 FE		        lda #%11111110
    10 2999 8D 01 D3		        sta PORTB       ;$D301
    11
    12 299C A2 03			ldx #3
    13 299E A0 00			ldy #0
    14 29A0 EE 01 D3		mv	inc portb
    15 29A3 B9 00 E0		afnt0	lda $e000,y
    16 29A6 CE 01 D3			dec portb
    17 29A9 99 00 E0		afnt1	sta $e000,y
    18 29AC C8				iny
    19 29AD D0 F1			bne mv
    20 29AF EE A5 29			inc afnt0+2
    21 29B2 EE AB 29			inc afnt1+2
    22 29B5 CA				dex
    23 29B6 10 E8			bpl mv
    24
    25 29B8 A2 D5		        ldx #<nmiint
    26 29BA A0 29		        ldy #>nmiint
    27 29BC 8E FA FF		        stx NMIVEC      ;$FFFA
    28 29BF 8C FB FF		        sty NMIVEC+1
    29
    30 29C2 A2 DF		        ldx #<irqint
    31 29C4 A0 29		        ldy #>irqint
    32 29C6 8E FE FF		        stx IRQVEC      ;$FFFE
    33 29C9 8C FF FF		        sty IRQVEC+1
    34
    35 29CC A9 40		        lda #%01000000
    36 29CE 8D 0E D4		        sta NMIEN       ;$D40E
    37 29D1 58			        cli
    38
    39 29D2 4C 00 2A			jmp skp
    40
    41
    42
    43 29D5 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 29D8 10 03		        spl
    45 29DA 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 29DD 38			        sec
    48 29DE 24			        .byte $24        ;BIT $18
    49
    50 29DF 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 29E0 EE 01 D3		        inc PORTB       ;$D301
    55
    56 29E3 48			        pha
    57 29E4 8A			        txa
    58 29E5 48			        pha
    59 29E6 BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 29E7 A9 29		        lda #>iret      ;adres procedury iret
    64 29E9 48			        pha
    65 29EA A9 F9		        lda #<iret
    66 29EC 48			        pha
    67 29ED BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 29F0 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 29F1 90 03		        scc
    73 29F3 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 29F6 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 29F9 68			iret	pla
    77 29FA AA				tax
    78 29FB 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 29FC CE 01 D3		        dec PORTB       ;$D301
    83 29FF 40			        rti
    84
    85 2A00			skp
    86
    87 				.endl
    88
   148 					.fi
   149
   150 2A00 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 2A02 BD 40 03 9D 65 3A + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 2A0B E8				inx						; X = 0
   154 2A0C 86 80			stx bp						; BP = 0
   155
   156 2A0E 8E 0F D2			stx skctl					; reset POKEY
   157 2A11 A9 03			lda #3
   158 2A13 8D 0F D2			sta skctl
   159
   160 2A16 CA				dex						; X = 255
   161
   162 2A17				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
    27 2A17 20 44 38			jsr MAIN.MIDFILES.@UnitInit
Source: MIDICar Player.a65
   163
   164 2A1A			.local	MAIN						; PROCEDURE
   165
   166 2A1A 4C AE 38			jmp l_006D
   167
   168 				; ------------------------------------------------------------
   169
   170 2A1D			.local	SYSTEM						; UNIT
   171
   172 2A1D			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   173
   174 				; ------------------------------------------------------------
   175
   176 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   177 				; as Pointer
   178 2A1D B5 94			lda :STACKORIGIN,x
   179 2A1F 85 88			sta A
   180 2A21 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   181 2A23 85 89			sta A+1
   182 2A25 CA				dex
   183 2A26			@main
   184
   185 				; -------------------  ASM Block 00000002  -------------------
   186
   187 2A26 A0 00			ldy #0
   188 2A28 B1 88 85 90			mva (:edx),y Result
   189
   190 2A2C			@exit
   191
   192 				; ------------------------------------------------------------
   193
   194 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   195 				; as Pointer
   196
   197 2A2C E8				inx
   198 2A2D A5 90 95 94			mva RESULT :STACKORIGIN,x
   199
   200 					.ifdef @new
   201 					lda <@VarData
   202 					sta :ztmp
   203 					lda >@VarData
   204 					ldy #@VarDataSize-1
   205 					jmp @FreeMem
   206 					eif
   207
   208 				; ------------------------------------------------------------
   209
   210 = 0088			A	= :EDX
   211 = 0090			RESULT	= :STACKORIGIN-4
   212 2A31 60				rts						; ret
   213 				.endl
   214
   215 2A32			.local	FILEPOS						; FUNCTION | ASSEMBLER
   216
   217 				; -------------------  ASM Block 00000011  -------------------
   218
   219 2A32 8A 48			txa:pha
   220
   221 2A34 AD 83 3A 85 82 AD + 	mwa f :bp2
   222
   223 2A3E A0 04			ldy #s@file.chanel
   224 2A40 B1 82			lda (:bp2),y
   225 2A42 AA				tax
   226 2A43 A9 26			lda #38
   227 2A45 9D 42 03			sta iccmd,x
   228
   229 2A48				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 2A48 EE 01 D3				inc portb
     6 2A4B 20 56 E4				jsr CIOV
     8 2A4E CE 01 D3				dec portb
Source: MIDICar Player.a65
   230
   231 2A51 8C 7F 3A			sty IOResult
   232
   233 2A54 BD 4C 03 85 84		mva icax3,x :eax
   234 2A59 BD 4D 03 85 85		mva icax4,x :eax+1
   235 2A5E BD 4E 03 85 86		mva icax5,x :eax+2
   236
   237 2A63 A9 00 85 87			mva #$00 :eax+3
   238 2A67 85 8E			sta :ecx+2
   239 2A69 85 8F			sta :ecx+3
   240
   241 2A6B A0 02			ldy #s@file.record
   242 2A6D B1 82			lda (:bp2),y
   243 2A6F 85 8C			sta :ecx
   244 2A71 C8				iny
   245 2A72 B1 82			lda (:bp2),y
   246 2A74 85 8D			sta :ecx+1
   247
   248 2A76 20 B0 23			jsr idivEAX_ECX.main
   249
   250 2A79 A5 84 8D 85 3A		mva :eax Result
   251 2A7E A5 85 8D 86 3A		mva :eax+1 Result+1
   252 2A83 A5 86 8D 87 3A		mva :eax+2 Result+2
   253 2A88 A5 87 8D 88 3A		mva :eax+3 Result+3
   254
   255 2A8D 68 AA			pla:tax
   256
   257 2A8F			@exit
   258
   259 				; ------------------------------------------------------------
   260
   261 = 3A83			F	= DATAORIGIN+$000B
   262 = 3A85			RESULT	= DATAORIGIN+$000D
   263
   264 = 3A83			@VarData	= F
   265 = 0002			@VarDataSize	= 2
   266
   267 2A8F 60				rts						; ret
   268 				.endl
   269
   270 2A90			.local	SEEK						; PROCEDURE | ASSEMBLER
   271
   272 				; -------------------  ASM Block 00000012  -------------------
   273
   274 2A90 8A 48			txa:pha
   275
   276 2A92 AD 89 3A 85 82 AD + 	mwa f :bp2
   277
   278 2A9C A0 04			ldy #s@file.chanel
   279 2A9E B1 82			lda (:bp2),y
   280 2AA0 AA				tax
   281 2AA1 A9 25			lda #37
   282 2AA3 9D 42 03			sta iccmd,x
   283
   284 2AA6 A0 02			ldy #s@file.record
   285 2AA8 B1 82			lda (:bp2),y
   286 2AAA 85 84			sta :eax
   287 2AAC C8				iny
   288 2AAD B1 82			lda (:bp2),y
   289 2AAF 85 85			sta :eax+1
   290 2AB1 A9 00			lda #$00
   291 2AB3 85 86			sta :eax+2
   292 2AB5 85 87			sta :eax+3
   293
   294 2AB7 AD 8B 3A 85 8C		mva a :ecx
   295 2ABC AD 8C 3A 85 8D		mva a+1 :ecx+1
   296 2AC1 AD 8D 3A 85 8E		mva a+2 :ecx+2
   297 2AC6 AD 8E 3A 85 8F		mva a+3 :ecx+3
   298
   299 2ACB 20 64 23			jsr imulECX
   300
   301 2ACE A5 84 9D 4C 03		mva :eax icax3,x
   302 2AD3 A5 85 9D 4D 03		mva :eax+1 icax4,x
   303 2AD8 A5 86 9D 4E 03		mva :eax+2 icax5,x
   304
   305 2ADD				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 2ADD EE 01 D3				inc portb
     6 2AE0 20 56 E4				jsr CIOV
     8 2AE3 CE 01 D3				dec portb
Source: MIDICar Player.a65
   306
   307 2AE6 8C 7F 3A			sty IOResult
   308
   309 2AE9 68 AA			pla:tax
   310
   311 				; ------------------------------------------------------------
   312
   313 = 3A89			F	= DATAORIGIN+$0011
   314 = 3A8B			A	= DATAORIGIN+$0013
   315
   316 = 3A89			@VarData	= F
   317 = 0006			@VarDataSize	= 6
   318
   319 2AEB			@exit
   320 					.ifdef @new
   321 					lda <@VarData
   322 					sta :ztmp
   323 					lda >@VarData
   324 					ldy #@VarDataSize-1
   325 					jmp @FreeMem
   326 					els
   327 2AEB 60				rts						; ret
   328 					eif
   329 				.endl
   330
   331 2AEC			.local	EOF						; FUNCTION
   332
   333 				; optimize OK (SYSTEM), line = 1163
   334
   335 2AEC AD 8F 3A			lda F
   336 2AEF 8D 83 3A			sta FILEPOS.F
   337 2AF2 AD 90 3A			lda F+1
   338 2AF5 8D 84 3A			sta FILEPOS.F+1
   339 2AF8 20 32 2A			jsr FILEPOS
   340 2AFB AD 85 3A			lda FILEPOS.RESULT
   341 2AFE 8D 92 3A			sta I
   342 2B01 AD 86 3A			lda FILEPOS.RESULT+1
   343 2B04 8D 93 3A			sta I+1
   344 2B07 AD 87 3A			lda FILEPOS.RESULT+2
   345 2B0A 8D 94 3A			sta I+2
   346 2B0D AD 88 3A			lda FILEPOS.RESULT+3
   347 2B10 8D 95 3A			sta I+3
   348 				; BlockRead
   349
   350 				; optimize OK (SYSTEM), line = 1165
   351
   352 2B13 AC 8F 3A 84 82 AC + 	mwy F :bp2
   353 2B1D A0 06			ldy #s@file.buffer
   354 2B1F AD 80 2B			lda BF
   355 2B22 91 82			sta (:bp2),y
   356 2B24 C8				iny
   357 2B25 AD 81 2B			lda BF+1
   358 2B28 91 82			sta (:bp2),y
   359 2B2A A0 08			ldy #s@file.nrecord
   360 2B2C A9 01			lda #$01
   361 2B2E 91 82			sta (:bp2),y
   362 2B30 C8				iny
   363 2B31 A9 00			lda #$00
   364 2B33 91 82			sta (:bp2),y
   365
   366 2B35 8A 48			txa:pha
   367 2B37 38				sec
   368 					@readfile F, #7
   368 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
   368 2B38 AC 90 3A		 LDY F+1
   368 2B3B AD 8F 3A		 LDA F
   368 2B3E A2 07		 LDX# 7
   368 2B40 20 3B 1F		 JSR @READFILE
   369 2B43 68 AA			pla:tax
   370
   371 				; optimize OK (SYSTEM), line = 1167
   372
   373 2B45 AD 8F 3A			lda F
   374 2B48 8D 89 3A			sta SEEK.F
   375 2B4B AD 90 3A			lda F+1
   376 2B4E 8D 8A 3A			sta SEEK.F+1
   377 2B51 AD 92 3A			lda I
   378 2B54 8D 8B 3A			sta SEEK.A
   379 2B57 AD 93 3A			lda I+1
   380 2B5A 8D 8C 3A			sta SEEK.A+1
   381 2B5D AD 94 3A			lda I+2
   382 2B60 8D 8D 3A			sta SEEK.A+2
   383 2B63 AD 95 3A			lda I+3
   384 2B66 8D 8E 3A			sta SEEK.A+3
   385 2B69 20 90 2A			jsr SEEK
   386
   387 				; -------------------  ASM Block 00000013  -------------------
   388
   389 2B6C AD 8F 3A 85 82 AD + 	mwa f :bp2
   390
   391 2B76 A0 05			ldy #s@file.status
   392 2B78 B1 82			lda (:bp2),y
   393 2B7A 29 01			and #e@file.eof
   394 2B7C 8D 91 3A			sta Result
   395
   396 2B7F			@exit
   397
   398 				; ------------------------------------------------------------
   399
   400 = 3A8F			F	= DATAORIGIN+$0017
   401 = 3A91			RESULT	= DATAORIGIN+$0019
   402 = 3A92			I	= DATAORIGIN+$001A
   403 = 3A96			adr.BF	= [DATAORIGIN+$001E] .array [256]
   404 2B7F			.var BF	= adr.BF .word
   405
   406 = 3A8F			@VarData	= F
   407 = 0106			@VarDataSize	= 262
   408
   409 2B7F 60				rts						; ret
   410 = 2B80 96 3A		BF
   410 				.endl
   411
   412 2B82			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   413
   414 				; ------------------------------------------------------------
   415
   416 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   417 				; as Pointer
   418 2B82 B5 94			lda :STACKORIGIN,x
   419 2B84 85 88			sta A
   420 2B86 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   421 2B88 85 89			sta A+1
   422 2B8A CA				dex
   423 2B8B 30 05			jmi @main
   424
   425 				; ------------------------------------------------------------
   426
   427 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   428 				; as Pointer
   429 2B8D B5 94			lda :STACKORIGIN,x
   430 2B8F 85 8C			sta VALUE
   431 2B91 CA				dex
   432 2B92			@main
   433
   434 				; -------------------  ASM Block 00000018  -------------------
   435
   436 2B92 A0 00			ldy #0
   437 2B94 A5 8C 91 88			mva value (:edx),y
   438
   439 				; ------------------------------------------------------------
   440
   441 = 0088			A	= :EDX
   442 = 008C			VALUE	= :ECX
   443 2B98			@exit
   444 					.ifdef @new
   445 					lda <@VarData
   446 					sta :ztmp
   447 					lda >@VarData
   448 					ldy #@VarDataSize-1
   449 					jmp @FreeMem
   450 					els
   451 2B98 60				rts						; ret
   452 					eif
   453 				.endl
   454
   455 2B99			.local	MOVE_00D0					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   456
   457 					.MACRO m@INLINE
   458 				
   459 				; -------------------  ASM Block 00000028  -------------------
   460 				
   461 					jsr @move
   462 				
   463 					.ENDM
   464
   465 				; ------------------------------------------------------------
   466
   467 = 0088			SOURCE	= :EDX
   468 = 008C			DEST	= :ECX
   469 = 0084			COUNT	= :EAX
   470 2B99			@exit
   471 				.endl
   472
   473 2B99			.local	PARAMCOUNT					; FUNCTION | ASSEMBLER
   474
   475 				; -------------------  ASM Block 00000044  -------------------
   476
   477 					@cmdline #255
   477 				 LDA# 255\ JSR @CMDLINE
   477 2B99 A9 FF		 LDA# 255
   477 2B9B 20 03 20		 JSR @CMDLINE
   478 2B9E 8D 96 3B			sta Result
   479
   480 2BA1			@exit
   481
   482 				; ------------------------------------------------------------
   483
   484 = 3B96			RESULT	= DATAORIGIN+$011E
   485 2BA1 60				rts						; ret
   486 				.endl
   487
   488 2BA2			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   489 2BA2 8D 97 3B			sta I
   490
   491 				; -------------------  ASM Block 00000045  -------------------
   492
   493 					@cmdline i
   493 				 LDA I\ JSR @CMDLINE
   493 2BA5 AD 97 3B		 LDA I
   493 2BA8 20 03 20		 JSR @CMDLINE
   494
   495 				;	@move #@buf Result #33
   496 2BAB A0 DF			ldy #256-33
   497 2BAD B9 21 03 99 B9 3A + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   498
   499 2BB6			@exit
   500
   501 				; ------------------------------------------------------------
   502
   503 = 3B97			I	= DATAORIGIN+$011F
   504 = 3B98			adr.RESULT	= [DATAORIGIN+$0120] .array [33]
   505 2BB6			.var RESULT	= adr.RESULT .word
   506
   507 = 3B97			@VarData	= I
   508 = 0022			@VarDataSize	= 34
   509
   510 2BB6 60				rts						; ret
   511 = 2BB7 98 3B		RESULT
   511 				.endl
   512
   513 				; ------------------------------------------------------------
   514
   515 = 0101			__PORTB_BANKS	= $0101
   516 = 0648			M_PI_2	= $0648
   517 = 0192			D_PI_2	= $0192
   518 = 0004			D_PI_180	= $04
   519 = 0000			MGTIA	= $00
   520 = 0080			MVBXE	= $80
   521 = 0000			VBXE_XDLADR	= $00
   522 = 00E0			VBXE_BCBTMP	= $E0
   523 = 0100			VBXE_BCBADR	= $0100
   524 = 1000			VBXE_MAPADR	= $1000
   525 = 1000			VBXE_CHBASE	= $1000
   526 = 5000			VBXE_OVRADR	= $5000
   527 = B000			VBXE_WINDOW	= $B000
   528 = 0000			IDLI	= $00
   529 = 0001			IVBL	= $01
   530 = 0002			ITIM1	= $02
   531 = 0003			ITIM2	= $03
   532 = 0004			ITIM4	= $04
   533 = 00FE			CH_DELCHR	= $FE
   534 = 009B			CH_ENTER	= $9B
   535 = 001B			CH_ESC	= $1B
   536 = 001C			CH_CURS_UP	= $1C
   537 = 001D			CH_CURS_DOWN	= $1D
   538 = 001E			CH_CURS_LEFT	= $1E
   539 = 001F			CH_CURS_RIGHT	= $1F
   540 = 007F			CH_TAB	= $7F
   541 = 009B			CH_EOL	= $9B
   542 = 007D			CH_CLR	= $7D
   543 = 00FD			CH_BELL	= $FD
   544 = 007E			CH_DEL	= $7E
   545 = 009C			CH_DELLINE	= $9C
   546 = 009D			CH_INSLINE	= $9D
   547 = 0000			PAL_PMCOLOR0	= $00
   548 = 0001			PAL_PMCOLOR1	= $01
   549 = 0002			PAL_PMCOLOR2	= $02
   550 = 0003			PAL_PMCOLOR3	= $03
   551 = 0004			PAL_COLOR0	= $04
   552 = 0005			PAL_COLOR1	= $05
   553 = 0006			PAL_COLOR2	= $06
   554 = 0007			PAL_COLOR3	= $07
   555 = 0008			PAL_COLBAK	= $08
   556 = 0000			COLOR_BLACK	= $00
   557 = 000E			COLOR_WHITE	= $0E
   558 = 0032			COLOR_RED	= $32
   559 = 0096			COLOR_CYAN	= $96
   560 = 0068			COLOR_VIOLET	= $68
   561 = 00C4			COLOR_GREEN	= $C4
   562 = 0074			COLOR_BLUE	= $74
   563 = 00EE			COLOR_YELLOW	= $EE
   564 = 0028			COLOR_ORANGE	= $28
   565 = 00E4			COLOR_BROWN	= $E4
   566 = 003C			COLOR_LIGHTRED	= $3C
   567 = 0004			COLOR_GRAY1	= $04
   568 = 0006			COLOR_GRAY2	= $06
   569 = 000A			COLOR_GRAY3	= $0A
   570 = 00CC			COLOR_LIGHTGREEN	= $CC
   571 = 007C			COLOR_LIGHTBLUE	= $7C
   572 = 0004			FMOPENREAD	= $04
   573 = 0008			FMOPENWRITE	= $08
   574 = 0009			FMOPENAPPEND	= $09
   575 = 000C			FMOPENREADWRITE	= $0C
   576 = 3A78			SCREENWIDTH	= DATAORIGIN+$0000
   577 = 3A7A			SCREENHEIGHT	= DATAORIGIN+$0002
   578 = 3A7C			DATESEPARATOR	= DATAORIGIN+$0004
   579 = D20A			RND	= $D20A
   580 = 02C0			adr.PALETTE	= $02C0
   581 2BB9			.var PALETTE	= adr.PALETTE .word
   582 = D012			adr.HPALETTE	= $D012
   583 2BB9			.var HPALETTE	= adr.HPALETTE .word
   584 = 3A7D			FILEMODE	= DATAORIGIN+$0005
   585 = 3A7E			GRAPHMODE	= DATAORIGIN+$0006
   586 = 3A7F			IORESULT	= DATAORIGIN+$0007
   587 = 3A80			EOLN	= DATAORIGIN+$0008
   588 = 3A81			RNDSEED	= DATAORIGIN+$0009
   589
   590 = 2BB9 C0 02		PALETTE
   590 = 2BBB 12 D0		HPALETTE
   590 				.endl							; UNIT SYSTEM
   591
   592 				; ------------------------------------------------------------
   593
   594 2BBD			.local	MC6850						; UNIT
   595
   596 2BBD			.local	MC6850_RESET					; PROCEDURE
   597
   598 				; optimize OK (MC6850), line = 68
   599
   600 2BBD A9 03			lda #$03
   601 2BBF 8D 00 D5			sta MC6850_CNTRREG
   602 2BC2			@exit
   603 					.ifdef @new
   604 					lda <@VarData
   605 					sta :ztmp
   606 					lda >@VarData
   607 					ldy #@VarDataSize-1
   608 					jmp @FreeMem
   609 					els
   610 2BC2 60				rts						; ret
   611 					eif
   612 				.endl
   613
   614 2BC3			.local	MC6850_INIT					; PROCEDURE
   615 2BC3 8D B9 3B			sta SETUP
   616
   617 				; optimize OK (MC6850), line = 73
   618
   619 2BC6 8D 00 D5			sta MC6850_CNTRREG
   620
   621 				; ------------------------------------------------------------
   622
   623 = 3BB9			SETUP	= DATAORIGIN+$0141
   624
   625 = 3BB9			@VarData	= SETUP
   626 = 0001			@VarDataSize	= 1
   627
   628 2BC9			@exit
   629 					.ifdef @new
   630 					lda <@VarData
   631 					sta :ztmp
   632 					lda >@VarData
   633 					ldy #@VarDataSize-1
   634 					jmp @FreeMem
   635 					els
   636 2BC9 60				rts						; ret
   637 					eif
   638 				.endl
   639
   640 2BCA			.local	MC6850_SEND					; PROCEDURE
   641 2BCA 8D BA 3B			sta DATA
   642
   643 				; --- RepeatUntilProlog
   644 2BCD			l_0113
   645
   646 				; optimize OK (MC6850), line = 85
   647
   648 2BCD AD 00 D5			lda MC6850_CNTRREG
   649 2BD0 29 02			and #$02
   650 2BD2 F0 F9			jeq l_0113
   651
   652 				; optimize OK (MC6850), line = 86
   653
   654 2BD4 AD BA 3B			lda DATA
   655 2BD7 8D 01 D5			sta MC6850_BUFFER
   656
   657 				; ------------------------------------------------------------
   658
   659 = 3BBA			DATA	= DATAORIGIN+$0142
   660
   661 = 3BBA			@VarData	= DATA
   662 = 0001			@VarDataSize	= 1
   663
   664 2BDA			@exit
   665 					.ifdef @new
   666 					lda <@VarData
   667 					sta :ztmp
   668 					lda >@VarData
   669 					ldy #@VarDataSize-1
   670 					jmp @FreeMem
   671 					els
   672 2BDA 60				rts						; ret
   673 					eif
   674 				.endl
   675
   676 				; ------------------------------------------------------------
   677
   678 = D500			MC6850_BASE	= $D500
   679 = D500			ADDR_MC6850_CNTRREG	= $D500
   680 = D501			ADDR_MC6850_BUFFER	= $D501
   681 = D500			ADDR_MC6850_STATREG	= $D500
   682 = 0001			CR0	= $01
   683 = 0002			CR1	= $02
   684 = 0004			CR2	= $04
   685 = 0008			CR3	= $08
   686 = 0010			CR4	= $10
   687 = 0020			CR5	= $20
   688 = 0040			CR6	= $40
   689 = 0080			CR7	= $80
   690 = 0000			CD_1	= $00
   691 = 0001			CD_16	= $01
   692 = 0002			CD_64	= $02
   693 = 0003			MASTERRESET	= $03
   694 = 0000			WS_7BITS	= $00
   695 = 0010			WS_8BITS	= $10
   696 = 0000			WS_2BITSTOP	= $00
   697 = 0008			WS_1BITSTOP	= $08
   698 = 0000			WS_EVENPARITY	= $00
   699 = 0004			WS_ODDPARITY	= $04
   700 = 0000			TC_RTSLOW_NOTIRQ	= $00
   701 = 0020			TC_RTSLOW_TIRQ	= $20
   702 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   703 = 0060			TC_BREAKLEVEL	= $60
   704 = 0000			NOIRQ_RECEIVE	= $00
   705 = 0080			IRQ_RECEIVE	= $80
   706 = 0001			RDRF	= $01
   707 = 0002			TDRE	= $02
   708 = 0004			DCD	= $04
   709 = 0008			CTS	= $08
   710 = 0010			FE	= $10
   711 = 0020			OVRN	= $20
   712 = 0040			PE	= $40
   713 = 0080			IRQ	= $80
   714 = D500			MC6850_CNTRREG	= $D500
   715 = D501			MC6850_BUFFER	= $D501
   716 = D500			MC6850_STATREG	= $D500
   717
   718 				.endl							; UNIT MC6850
   719
   720 				; ------------------------------------------------------------
   721
   722 2BDB			.local	DOS						; UNIT
   723
   724 				; ------------------------------------------------------------
   725
   726 = D014			PALNTSC	= $D014
   727
   728 				.endl							; UNIT DOS
   729
   730 				; ------------------------------------------------------------
   731
   732 2BDB			.local	STRUTILS					; UNIT
   733
   734 				; ------------------------------------------------------------
   735
   736 				.endl							; UNIT STRUTILS
   737
   738 				; ------------------------------------------------------------
   739
   740 2BDB			.local	SYSUTILS					; UNIT
   741
   742 				; ------------------------------------------------------------
   743
   744 = 0001			FAREADONLY	= $01
   745 = 0002			FAHIDDEN	= $02
   746 = 0004			FASYSFILE	= $04
   747 = 0008			FAVOLUMEID	= $08
   748 = 0010			FADIRECTORY	= $10
   749 = 0020			FAARCHIVE	= $20
   750 = 003F			FAANYFILE	= $3F
   751
   752 				.endl							; UNIT SYSUTILS
   753
   754 				; ------------------------------------------------------------
   755
   756 2BDB			.local	MIDI_FIFO					; UNIT
   757
   758 2BDB			.local	FIFO_READBYTE					; FUNCTION
   759
   760 				; optimize OK (MIDI_FIFO), line = 39
   761
   762 2BDB A4 F1			ldy FIFO_TAIL
   763 2BDD C4 F0			cpy FIFO_HEAD
   764 2BDF F0 21			jeq l_0174
   765
   766 				; optimize OK (MIDI_FIFO), line = 41
   767
   768 2BE1 B9 00 06			lda adr.FIFO_BUF,y
   769 2BE4 AC BC 3B 84 81		mvy DATA+1 :bp+1
   770 2BE9 AC BB 3B			ldy DATA
   771 2BEC 91 80			sta (:bp),y
   772
   773 				; optimize FAIL (0, MIDI_FIFO), line = 42
   774
   775 2BEE E6 F1			inc FIFO_TAIL
   776
   777 				; optimize OK (MIDI_FIFO), line = 43
   778
   779 2BF0 A5 F1			lda FIFO_TAIL
   780 2BF2 C9 FF			cmp #$FF
   781 2BF4 D0 04			jne l_0194
   782 2BF6 A9 00			lda #$00
   783 2BF8 85 F1			sta FIFO_TAIL
   784 2BFA			l_0194
   785
   786 				; optimize OK (MIDI_FIFO), line = 44
   787
   788 2BFA A9 01			lda #$01
   789 2BFC 8D BD 3B			sta RESULT
   790 2BFF 4C 07 2C			jmp l_01A8
   791 2C02			l_0174
   792
   793 				; optimize OK (MIDI_FIFO), line = 47
   794
   795 2C02 A9 00			lda #$00
   796 2C04 8D BD 3B			sta RESULT
   797 2C07			l_01A8
   798 2C07			@exit
   799
   800 				; ------------------------------------------------------------
   801
   802 = 3BBB			DATA	= DATAORIGIN+$0143
   803 = 3BBD			RESULT	= DATAORIGIN+$0145
   804
   805 = 3BBB			@VarData	= DATA
   806 = 0002			@VarDataSize	= 2
   807
   808 2C07 60				rts						; ret
   809 				.endl
   810
   811 2C08			.local	FIFO_WRITEBYTE					; FUNCTION
   812 2C08 8D BE 3B			sta DATA
   813
   814 				; optimize OK (MIDI_FIFO), line = 52
   815
   816 2C0B A5 F0			lda FIFO_HEAD
   817 2C0D 18 69 01			add #$01
   818 2C10 85 9D			sta :STACKORIGIN+9
   819 2C12 A9 00			lda #$00
   820 2C14 69 00			adc #$00
   821 2C16 85 AD			sta :STACKORIGIN+STACKWIDTH+9
   822 2C18 A9 00			lda #$00
   823 2C1A 69 00			adc #$00
   824 2C1C 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
   825 2C1E A9 00			lda #$00
   826 2C20 69 00			adc #$00
   827 2C22 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
   828 2C24 A0 01			ldy #1
   829 2C26 A5 CD			lda :STACKORIGIN+STACKWIDTH*3+9
   830 2C28 C9 00			cmp #$00
   831 2C2A D0 10			bne @+
   832 2C2C A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
   833 2C2E C9 00			cmp #$00
   834 2C30 D0 0A			bne @+
   835 2C32 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
   836 2C34 C9 00			cmp #$00
   837 2C36 D0 04			bne @+
   838 2C38 A5 9D			lda :STACKORIGIN+9
   839 2C3A C5 F1			cmp FIFO_TAIL
   840 				@
   841 2C3C F0 01			beq @+
   842 2C3E 88				dey
   843 				@
   844 2C3F 84 9D			sty :STACKORIGIN+9
   845 2C41 A5 F0			lda FIFO_HEAD
   846 2C43 18 69 01			add #$01
   847 2C46 85 9E			sta :STACKORIGIN+10
   848 2C48 A9 00			lda #$00
   849 2C4A 69 00			adc #$00
   850 2C4C 85 AE			sta :STACKORIGIN+STACKWIDTH+10
   851 2C4E A9 00			lda #$00
   852 2C50 69 00			adc #$00
   853 2C52 85 BE			sta :STACKORIGIN+STACKWIDTH*2+10
   854 2C54 A9 00			lda #$00
   855 2C56 69 00			adc #$00
   856 2C58 85 CE			sta :STACKORIGIN+STACKWIDTH*3+10
   857 2C5A A0 01			ldy #1
   858 2C5C A5 CE			lda :STACKORIGIN+STACKWIDTH*3+10
   859 2C5E C9 00			cmp #$00
   860 2C60 D0 10			bne @+
   861 2C62 A5 BE			lda :STACKORIGIN+STACKWIDTH*2+10
   862 2C64 C9 00			cmp #$00
   863 2C66 D0 0A			bne @+
   864 2C68 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
   865 2C6A C9 00			cmp #$00
   866 2C6C D0 04			bne @+
   867 2C6E A5 9E			lda :STACKORIGIN+10
   868 2C70 C9 FF			cmp #$FF
   869 				@
   870 2C72 F0 01			beq @+
   871 2C74 88				dey
   872 				@
   873 2C75 84 9E			sty :STACKORIGIN+10
   874 2C77 A0 01			ldy #1
   875 2C79 A5 F1			lda FIFO_TAIL
   876 2C7B F0 01			beq @+
   877 2C7D 88				dey
   878 				@
   879 2C7E 98				tya
   880 2C7F 25 9E			and :STACKORIGIN+10
   881 2C81 05 9D			ora :STACKORIGIN+9
   882 2C83 F0 08			jeq l_01E4
   883
   884 				; optimize OK (MIDI_FIFO), line = 54
   885
   886 2C85 A9 00			lda #$00
   887 2C87 8D BF 3B			sta RESULT
   888 2C8A 4C A6 2C			jmp @exit					; exit
   889 2C8D			l_01E4
   890
   891 				; optimize OK (MIDI_FIFO), line = 57
   892
   893 2C8D A4 F0			ldy FIFO_HEAD
   894 2C8F AD BE 3B			lda DATA
   895 2C92 99 00 06			sta adr.FIFO_BUF,y
   896
   897 				; optimize FAIL (0, MIDI_FIFO), line = 61
   898
   899 2C95 E6 F0			inc FIFO_HEAD
   900
   901 				; optimize OK (MIDI_FIFO), line = 62
   902
   903 2C97 A5 F0			lda FIFO_HEAD
   904 2C99 C9 FF			cmp #$FF
   905 2C9B D0 04			jne l_0211
   906 2C9D A9 00			lda #$00
   907 2C9F 85 F0			sta FIFO_HEAD
   908 2CA1			l_0211
   909 2CA1			l_01F2
   910
   911 				; optimize OK (MIDI_FIFO), line = 64
   912
   913 2CA1 A9 01			lda #$01
   914 2CA3 8D BF 3B			sta RESULT
   915 2CA6			@exit
   916
   917 				; ------------------------------------------------------------
   918
   919 = 3BBE			DATA	= DATAORIGIN+$0146
   920 = 3BBF			RESULT	= DATAORIGIN+$0147
   921
   922 = 3BBE			@VarData	= DATA
   923 = 0001			@VarDataSize	= 1
   924
   925 2CA6 60				rts						; ret
   926 				.endl
   927
   928 2CA7			.local	FIFO_SEND					; FUNCTION
   929
   930 				; optimize OK (MIDI_FIFO), line = 72
   931
   932 2CA7 AD C0 3B			lda DATA
   933 2CAA 8D C4 3B			sta P
   934 2CAD AD C1 3B			lda DATA+1
   935 2CB0 8D C5 3B			sta P+1
   936
   937 				; --- WhileProlog
   938 2CB3 4C DF 2C			jmp l_0227
   939 2CB6			l_0228
   940
   941 				; optimize OK (MIDI_FIFO), line = 75
   942
   943 2CB6 AC C4 3B 84 82 AC + 	mwy P :bp2
   944 2CC0 A0 00			ldy #$00
   945 2CC2 B1 82			lda (:bp2),y
   946 2CC4 20 08 2C			jsr FIFO_WRITEBYTE
   947 2CC7 AD BF 3B			lda FIFO_WRITEBYTE.RESULT
   948 2CCA D0 08			jne l_0238
   949 2CCC A9 00			lda #$00
   950 2CCE 8D C3 3B			sta RESULT
   951 2CD1 4C E9 2C			jmp @exit					; exit
   952 2CD4			l_0238
   953
   954 				; optimize FAIL (0, MIDI_FIFO), line = 76
   955
   956 2CD4 EE C4 3B			inc P
   957 2CD7 D0 03			sne
   958 2CD9 EE C5 3B			inc P+1
   959 2CDC CE C2 3B			dec LEN
   960 2CDF			l_0227
   961
   962 				; optimize OK (MIDI_FIFO), line = 73
   963
   964 2CDF AD C2 3B			lda LEN
   965 2CE2 D0 D2			jne l_0228
   966
   967 				; optimize OK (MIDI_FIFO), line = 78
   968
   969 2CE4 A9 01			lda #$01
   970 2CE6 8D C3 3B			sta RESULT
   971 2CE9			@exit
   972
   973 				; ------------------------------------------------------------
   974
   975 = 3BC0			DATA	= DATAORIGIN+$0148
   976 = 3BC2			LEN	= DATAORIGIN+$014A
   977 = 3BC3			RESULT	= DATAORIGIN+$014B
   978 = 3BC4			P	= DATAORIGIN+$014C
   979
   980 = 3BC0			@VarData	= DATA
   981 = 0005			@VarDataSize	= 5
   982
   983 2CE9 60				rts						; ret
   984 				.endl
   985
   986 2CEA			.local	FIFO_FLUSH					; PROCEDURE
   987
   988 				; --- WhileProlog
   989 2CEA 4C F5 2C			jmp l_025D
   990 2CED			l_025E
   991
   992 				; optimize OK (MIDI_FIFO), line = 85
   993
   994 2CED A5 FF			lda ZP_DATA
   995 2CEF 8D 1A D0			sta $D01A
   996
   997 				; optimize OK (MIDI_FIFO), line = 86
   998
   999 2CF2 20 CA 2B			jsr MC6850.MC6850_SEND
  1000 2CF5			l_025D
  1001
  1002 				; optimize OK (MIDI_FIFO), line = 83
  1003
  1004 2CF5 A9 FF			lda <ZP_DATA
  1005 2CF7 8D BB 3B			sta FIFO_READBYTE.DATA
  1006 2CFA A9 00			lda >ZP_DATA
  1007 2CFC 8D BC 3B			sta FIFO_READBYTE.DATA+1
  1008 2CFF 20 DB 2B			jsr FIFO_READBYTE
  1009 2D02 AD BD 3B			lda FIFO_READBYTE.RESULT
  1010 2D05 D0 E6			jne l_025E
  1011
  1012 				; optimize OK (MIDI_FIFO), line = 88
  1013
  1014 2D07 A9 00			lda #$00
  1015 2D09 8D 1A D0			sta $D01A
  1016 2D0C			@exit
  1017 					.ifdef @new
  1018 					lda <@VarData
  1019 					sta :ztmp
  1020 					lda >@VarData
  1021 					ldy #@VarDataSize-1
  1022 					jmp @FreeMem
  1023 					els
  1024 2D0C 60				rts						; ret
  1025 					eif
  1026 				.endl
  1027
  1028 				; ------------------------------------------------------------
  1029
  1030 = 00FF			ZP_DATA	= $FF
  1031 = 00F0			FIFO_HEAD	= $F0
  1032 = 00F1			FIFO_TAIL	= $F1
  1033 = 00FF			FIFO_SIZE	= $FF
  1034 = 0600			FIFO_ADDR	= $0600
  1035 = 0600			adr.FIFO_BUF	= $0600
  1036 2D0D			.var FIFO_BUF	= adr.FIFO_BUF .word
  1037
  1038 = 2D0D 00 06		FIFO_BUF
  1038 				.endl							; UNIT MIDI_FIFO
  1039
  1040 				; ------------------------------------------------------------
  1041
  1042 2D0F			.local	MIDFILES					; UNIT
  1043
  1044 2D0F			.local	WORDBI						; FUNCTION
  1045
  1046 				; optimize OK (MIDFILES), line = 80
  1047
  1048 2D0F A9 E3			lda <RESULT
  1049 2D11 8D E5 3B			sta RESULTPTR
  1050 2D14 A9 3B			lda >RESULT
  1051 2D16 8D E6 3B			sta RESULTPTR+1
  1052
  1053 				; optimize OK (MIDFILES), line = 81
  1054
  1055 2D19 AC E1 3B 84 82 AC + 	mwy BI :bp2
  1056 2D23 A0 01			ldy #$01
  1057 2D25 B1 82			lda (:bp2),y
  1058 2D27 AC E6 3B 84 81		mvy RESULTPTR+1 :bp+1
  1059 2D2C AC E5 3B			ldy RESULTPTR
  1060 2D2F 91 80			sta (:bp),y
  1061 2D31 EE E5 3B			inc RESULTPTR
  1062 2D34 D0 03			sne
  1063 2D36 EE E6 3B			inc RESULTPTR+1
  1064
  1065 				; optimize OK (MIDFILES), line = 82
  1066
  1067 2D39 A0 00			ldy #$00
  1068 2D3B B1 82			lda (:bp2),y
  1069 2D3D AC E6 3B 84 81		mvy RESULTPTR+1 :bp+1
  1070 2D42 AC E5 3B			ldy RESULTPTR
  1071 2D45 91 80			sta (:bp),y
  1072 2D47			@exit
  1073
  1074 				; ------------------------------------------------------------
  1075
  1076 = 3BE1			BI	= DATAORIGIN+$0169
  1077 = 3BE3			RESULT	= DATAORIGIN+$016B
  1078 = 3BE5			RESULTPTR	= DATAORIGIN+$016D
  1079
  1080 = 3BE1			@VarData	= BI
  1081 = 0004			@VarDataSize	= 4
  1082
  1083 2D47 60				rts						; ret
  1084 				.endl
  1085
  1086 2D48			.local	LONGBI						; FUNCTION
  1087
  1088 				; optimize OK (MIDFILES), line = 91
  1089
  1090 2D48 A9 E9			lda <RESULT
  1091 2D4A 8D ED 3B			sta RESULTPTR
  1092 2D4D A9 3B			lda >RESULT
  1093 2D4F 8D EE 3B			sta RESULTPTR+1
  1094
  1095 				; optimize OK (MIDFILES), line = 92
  1096
  1097 2D52 A9 03			lda #$03
  1098 2D54 8D EF 3B			sta I
  1099
  1100 2D57			l_029A
  1101 				; --- ForToDoCondition
  1102
  1103 				; optimize OK (MIDFILES), line = 94
  1104
  1105 2D57 AC E7 3B 84 82 AC + 	mwy BI :bp2
  1106 2D61 AC EF 3B			ldy I
  1107 2D64 B1 82			lda (:bp2),y
  1108 2D66 AC EE 3B 84 81		mvy RESULTPTR+1 :bp+1
  1109 2D6B AC ED 3B			ldy RESULTPTR
  1110 2D6E 91 80			sta (:bp),y
  1111
  1112 				; optimize FAIL (0, MIDFILES), line = 95
  1113
  1114 2D70 EE ED 3B			inc RESULTPTR
  1115 2D73 D0 03			sne
  1116 2D75 EE EE 3B			inc RESULTPTR+1
  1117
  1118 				; --- ForToDoEpilog
  1119 2D78 CE EF 3B			dec I
  1120 2D7B 10 DA			jpl l_029A
  1121 2D7D			l_02A8
  1122 2D7D			@exit
  1123
  1124 				; ------------------------------------------------------------
  1125
  1126 = 3BE7			BI	= DATAORIGIN+$016F
  1127 = 3BE9			RESULT	= DATAORIGIN+$0171
  1128 = 3BED			RESULTPTR	= DATAORIGIN+$0175
  1129 = 3BEF			I	= DATAORIGIN+$0177
  1130
  1131 = 3BE7			@VarData	= BI
  1132 = 0005			@VarDataSize	= 5
  1133
  1134 2D7D 60				rts						; ret
  1135 				.endl
  1136
  1137 2D7E			.local	MEMBOUNDCHECK					; PROCEDURE
  1138
  1139 				; optimize OK (MIDFILES), line = 125
  1140
  1141 2D7E AC F0 3B 84 82 AC + 	mwy ADR :bp2
  1142 2D88 A0 01			ldy #$00+$01
  1143 2D8A B1 82			lda (:bp2),y
  1144 2D8C C9 9C			cmp #$9C
  1145 2D8E D0 03			bne @+
  1146 2D90 88				dey
  1147 2D91 B1 82			lda (:bp2),y
  1148 				@
  1149 2D93 D0 0D			jne l_02CF
  1150
  1151 				; optimize OK (MIDFILES), line = 126
  1152
  1153 2D95 A0 00			ldy #$00
  1154 2D97 98				tya
  1155 2D98 91 82			sta (:bp2),y
  1156 2D9A C8				iny
  1157 2D9B A9 A0			lda #$A0
  1158 2D9D 91 82			sta (:bp2),y
  1159 2D9F 4C 10 2E			jmp l_02DD
  1160 2DA2			l_02CF
  1161
  1162 				; optimize OK (MIDFILES), line = 127
  1163
  1164 2DA2 AC F0 3B 84 82 AC + 	mwy ADR :bp2
  1165 2DAC A0 01			ldy #$00+$01
  1166 2DAE B1 82			lda (:bp2),y
  1167 2DB0 C9 D0			cmp #$D0
  1168 2DB2 D0 03			bne @+
  1169 2DB4 88				dey
  1170 2DB5 B1 82			lda (:bp2),y
  1171 				@
  1172 2DB7 D0 0D			jne l_02EE
  1173
  1174 				; optimize OK (MIDFILES), line = 128
  1175
  1176 2DB9 A0 00			ldy #$00
  1177 2DBB 98				tya
  1178 2DBC 91 82			sta (:bp2),y
  1179 2DBE C8				iny
  1180 2DBF A9 D8			lda #$D8
  1181 2DC1 91 82			sta (:bp2),y
  1182 2DC3 4C 10 2E			jmp l_02FC
  1183 2DC6			l_02EE
  1184
  1185 				; optimize OK (MIDFILES), line = 129
  1186
  1187 2DC6 AC F0 3B 84 82 AC + 	mwy ADR :bp2
  1188 2DD0 A0 01			ldy #$00+$01
  1189 2DD2 B1 82			lda (:bp2),y
  1190 2DD4 C9 E0			cmp #$E0
  1191 2DD6 D0 03			bne @+
  1192 2DD8 88				dey
  1193 2DD9 B1 82			lda (:bp2),y
  1194 				@
  1195 2DDB D0 0D			jne l_030D
  1196
  1197 				; optimize OK (MIDFILES), line = 130
  1198
  1199 2DDD A0 00			ldy #$00
  1200 2DDF 98				tya
  1201 2DE0 91 82			sta (:bp2),y
  1202 2DE2 C8				iny
  1203 2DE3 A9 E4			lda #$E4
  1204 2DE5 91 82			sta (:bp2),y
  1205 2DE7 4C 10 2E			jmp l_031B
  1206 2DEA			l_030D
  1207
  1208 				; optimize OK (MIDFILES), line = 131
  1209
  1210 2DEA AC F0 3B 84 82 AC + 	mwy ADR :bp2
  1211 2DF4 A0 01			ldy #$00+$01
  1212 2DF6 B1 82			lda (:bp2),y
  1213 2DF8 C9 FF			cmp #$FF
  1214 2DFA D0 03			bne @+
  1215 2DFC 88				dey
  1216 2DFD B1 82			lda (:bp2),y
  1217 				@
  1218 2DFF D0 0F			jne l_032C
  1219
  1220 				; optimize FAIL ('@print', MIDFILES), line = 133
  1221
  1222 					@printSTRING #CODEORIGIN+$000D
  1222 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
  1222 2E01 A0 1E		 LDY> CODEORIGIN+$000D
  1222 2E03 A9 0D		 LDA< CODEORIGIN+$000D
  1222 2E05 20 A3 28		 JSR @PRINTSTRING
  1223 2E08 20 8F 28			@printEOL
  1224 2E0B A9 02			lda #$02
  1225 2E0D 4C 5C 3A			jmp @halt
  1226 2E10			l_032C
  1227 2E10			l_031B
  1228 2E10			l_02FC
  1229 2E10			l_02DD
  1230
  1231 				; ------------------------------------------------------------
  1232
  1233 = 3BF0			ADR	= DATAORIGIN+$0178
  1234
  1235 = 3BF0			@VarData	= ADR
  1236 = 0002			@VarDataSize	= 2
  1237
  1238 2E10			@exit
  1239 					.ifdef @new
  1240 					lda <@VarData
  1241 					sta :ztmp
  1242 					lda >@VarData
  1243 					ldy #@VarDataSize-1
  1244 					jmp @FreeMem
  1245 					els
  1246 2E10 60				rts						; ret
  1247 					eif
  1248 				.endl
  1249
  1250 2E11			.local	LOADMID						; FUNCTION
  1251
  1252 2E11 4C BC 2E			jmp l_0338
  1253
  1254 2E14			.local	READWORDBI					; FUNCTION
  1255
  1256 				; BlockRead
  1257
  1258 				; optimize OK (MIDFILES), line = 154
  1259
  1260 2E14 AC 23 33 84 82 AC + 	mwy F :bp2
  1261 2E1E A0 06			ldy #s@file.buffer
  1262 2E20 AD 8D 38			lda BI
  1263 2E23 91 82			sta (:bp2),y
  1264 2E25 C8				iny
  1265 2E26 AD 8E 38			lda BI+1
  1266 2E29 91 82			sta (:bp2),y
  1267 2E2B A0 08			ldy #s@file.nrecord
  1268 2E2D A9 02			lda #$02
  1269 2E2F 91 82			sta (:bp2),y
  1270 2E31 C8				iny
  1271 2E32 A9 00			lda #$00
  1272 2E34 91 82			sta (:bp2),y
  1273
  1274 2E36 8A 48			txa:pha
  1275 2E38 38				sec
  1276 					@readfile F, #7
  1276 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1276 2E39 AC 24 33		 LDY F+1
  1276 2E3C AD 23 33		 LDA F
  1276 2E3F A2 07		 LDX# 7
  1276 2E41 20 3B 1F		 JSR @READFILE
  1277 2E44 68 AA			pla:tax
  1278
  1279 				; optimize OK (MIDFILES), line = 155
  1280
  1281 2E46 AD 8D 38			lda BI
  1282 2E49 8D E1 3B			sta WORDBI.BI
  1283 2E4C AD 8E 38			lda BI+1
  1284 2E4F 8D E2 3B			sta WORDBI.BI+1
  1285 2E52 20 0F 2D			jsr WORDBI
  1286 2E55 AD E3 3B			lda WORDBI.RESULT
  1287 2E58 8D 16 3C			sta RESULT
  1288 2E5B AD E4 3B			lda WORDBI.RESULT+1
  1289 2E5E 8D 17 3C			sta RESULT+1
  1290 2E61			@exit
  1291
  1292 				; ------------------------------------------------------------
  1293
  1294 = 3C16			RESULT	= DATAORIGIN+$019E
  1295 2E61 60				rts						; ret
  1296 				.endl
  1297
  1298 2E62			.local	READLONGBI					; FUNCTION
  1299
  1300 				; BlockRead
  1301
  1302 				; optimize OK (MIDFILES), line = 160
  1303
  1304 2E62 AC 23 33 84 82 AC + 	mwy F :bp2
  1305 2E6C A0 06			ldy #s@file.buffer
  1306 2E6E AD 8D 38			lda BI
  1307 2E71 91 82			sta (:bp2),y
  1308 2E73 C8				iny
  1309 2E74 AD 8E 38			lda BI+1
  1310 2E77 91 82			sta (:bp2),y
  1311 2E79 A0 08			ldy #s@file.nrecord
  1312 2E7B A9 04			lda #$04
  1313 2E7D 91 82			sta (:bp2),y
  1314 2E7F C8				iny
  1315 2E80 A9 00			lda #$00
  1316 2E82 91 82			sta (:bp2),y
  1317
  1318 2E84 8A 48			txa:pha
  1319 2E86 38				sec
  1320 					@readfile F, #7
  1320 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1320 2E87 AC 24 33		 LDY F+1
  1320 2E8A AD 23 33		 LDA F
  1320 2E8D A2 07		 LDX# 7
  1320 2E8F 20 3B 1F		 JSR @READFILE
  1321 2E92 68 AA			pla:tax
  1322
  1323 				; optimize OK (MIDFILES), line = 161
  1324
  1325 2E94 AD 8D 38			lda BI
  1326 2E97 8D E7 3B			sta LONGBI.BI
  1327 2E9A AD 8E 38			lda BI+1
  1328 2E9D 8D E8 3B			sta LONGBI.BI+1
  1329 2EA0 20 48 2D			jsr LONGBI
  1330 2EA3 AD E9 3B			lda LONGBI.RESULT
  1331 2EA6 8D 18 3C			sta RESULT
  1332 2EA9 AD EA 3B			lda LONGBI.RESULT+1
  1333 2EAC 8D 19 3C			sta RESULT+1
  1334 2EAF AD EB 3B			lda LONGBI.RESULT+2
  1335 2EB2 8D 1A 3C			sta RESULT+2
  1336 2EB5 AD EC 3B			lda LONGBI.RESULT+3
  1337 2EB8 8D 1B 3C			sta RESULT+3
  1338 2EBB			@exit
  1339
  1340 				; ------------------------------------------------------------
  1341
  1342 = 3C18			RESULT	= DATAORIGIN+$01A0
  1343 2EBB 60				rts						; ret
  1344 				.endl
  1345 2EBC			l_0338
  1346
  1347 				; optimize OK (MIDFILES), line = 165
  1348
  1349 2EBC AD 8B 38			lda MIDTRACKS
  1350 2EBF 8D 14 3C			sta NTRKREC
  1351 2EC2 AD 8C 38			lda MIDTRACKS+1
  1352 2EC5 8D 15 3C			sta NTRKREC+1
  1353
  1354 				; optimize FAIL ('@print', MIDFILES), line = 166
  1355
  1356 					@printSTRING #CODEORIGIN+$0022
  1356 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
  1356 2EC8 A0 1E		 LDY> CODEORIGIN+$0022
  1356 2ECA A9 22		 LDA< CODEORIGIN+$0022
  1356 2ECC 20 A3 28		 JSR @PRINTSTRING
  1357 					@printSTRING FN
  1357 				 LDY FN+1\ LDA FN\ JSR @PRINTSTRING
  1357 2ECF AC F3 3B		 LDY FN+1
  1357 2ED2 AD F2 3B		 LDA FN
  1357 2ED5 20 A3 28		 JSR @PRINTSTRING
  1358 2ED8 20 8F 28			@printEOL
  1359 				; AssignFile
  1360
  1361 				; optimize OK (MIDFILES), line = 168
  1362
  1363 2EDB AC 23 33 84 82 AC + 	mwy F :bp2
  1364 2EE5 A0 00			ldy #s@file.pfname
  1365 2EE7 AD F2 3B			lda FN
  1366 2EEA 91 82			sta (:bp2),y
  1367 2EEC C8				iny
  1368 2EED AD F3 3B			lda FN+1
  1369 2EF0 91 82			sta (:bp2),y
  1370 2EF2 A0 05			ldy #s@file.status
  1371 2EF4 A9 00			lda #$00
  1372 2EF6 91 82			sta (:bp2),y
  1373 				; Reset
  1374
  1375 				; optimize OK (MIDFILES), line = 169
  1376
  1377 2EF8 A0 02			ldy #s@file.record
  1378 2EFA A9 01			lda #$01
  1379 2EFC 91 82			sta (:bp2),y
  1380 2EFE C8				iny
  1381 2EFF A9 00			lda #$00
  1382 2F01 91 82			sta (:bp2),y
  1383
  1384 2F03 8A 48			txa:pha
  1385 2F05 18				clc
  1386 					@openfile F, MAIN.SYSTEM.FileMode
  1386 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  1386 2F06 AC 24 33		 LDY F+1
  1386 2F09 AD 23 33		 LDA F
  1386 2F0C AE 7D 3A		 LDX MAIN.SYSTEM.FILEMODE
  1386 2F0F 20 6C 1E		 JSR @OPENFILE
  1387 2F12 68 AA			pla:tax
  1388
  1389 				; optimize OK (MIDFILES), line = 170
  1390
  1391 2F14 AD 7F 3A			lda SYSTEM.IORESULT
  1392 2F17 10 2B			jpl l_038B
  1393
  1394 				; optimize FAIL ('@print', MIDFILES), line = 172
  1395
  1396 					@print #$9B
  1396 				 LDY# $9B\ JSR @PRINT
  1396 2F19 A0 9B		 LDY# $9B
  1396 2F1B 20 94 28		 JSR @PRINT
  1397 					@printSTRING #CODEORIGIN+$002E
  1397 				 LDY> CODEORIGIN+$002E\ LDA< CODEORIGIN+$002E\ JSR @PRINTSTRING
  1397 2F1E A0 1E		 LDY> CODEORIGIN+$002E
  1397 2F20 A9 2E		 LDA< CODEORIGIN+$002E
  1397 2F22 20 A3 28		 JSR @PRINTSTRING
  1398 2F25 AD 7F 3A			lda SYSTEM.IORESULT
  1399 2F28 20 DA 28			jsr @printBYTE._a
  1400 2F2B 20 8F 28			@printEOL
  1401 				; CloseFile
  1402
  1403 2F2E 8A 48			txa:pha
  1404 2F30 18				clc
  1405 					@closefile F
  1405 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1405 2F31 AC 24 33		 LDY F+1
  1405 2F34 AD 23 33		 LDA F
  1405 2F37 20 08 1F		 JSR @CLOSEFILE
  1406 2F3A 68 AA			pla:tax
  1407
  1408 				; optimize OK (MIDFILES), line = 174
  1409
  1410 2F3C A9 00			lda #$00
  1411 2F3E 8D F4 3B			sta RESULT
  1412 2F41 4C 22 33			jmp @exit					; exit
  1413 2F44			l_038B
  1414
  1415 				; optimize OK (MIDFILES), line = 176
  1416
  1417 2F44 A9 00			lda #$00
  1418 2F46 8D 01 3C			sta TRACKCOUNT
  1419 2F49 8D 02 3C			sta TRACKCOUNT+1
  1420 2F4C A9 FF			lda #$FF
  1421 2F4E 8D CB 3B			sta NTRACKS
  1422 2F51 A9 00			lda #$00
  1423 2F53 8D CC 3B			sta NTRACKS+1
  1424
  1425 				; --- WhileProlog
  1426 2F56 4C BB 32			jmp l_03A7
  1427 2F59			l_03A8
  1428 				; BlockRead
  1429
  1430 				; optimize OK (MIDFILES), line = 179
  1431
  1432 2F59 AC 23 33 84 82 AC + 	mwy F :bp2
  1433 2F63 A0 06			ldy #s@file.buffer
  1434 2F65 A9 03			lda <CHUNKTAG
  1435 2F67 91 82			sta (:bp2),y
  1436 2F69 C8				iny
  1437 2F6A A9 3C			lda >CHUNKTAG
  1438 2F6C 91 82			sta (:bp2),y
  1439 2F6E A0 08			ldy #s@file.nrecord
  1440 2F70 A9 04			lda #$04
  1441 2F72 91 82			sta (:bp2),y
  1442 2F74 C8				iny
  1443 2F75 A9 00			lda #$00
  1444 2F77 91 82			sta (:bp2),y
  1445 2F79 A0 0A			ldy #s@file.numread
  1446 2F7B A9 07			lda <V
  1447 2F7D 91 82			sta (:bp2),y
  1448 2F7F C8				iny
  1449 2F80 A9 3C			lda >V
  1450 2F82 91 82			sta (:bp2),y
  1451
  1452 2F84 8A 48			txa:pha
  1453 2F86 18				clc
  1454 					@readfile F, #135
  1454 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1454 2F87 AC 24 33		 LDY F+1
  1454 2F8A AD 23 33		 LDA F
  1454 2F8D A2 87		 LDX# 135
  1454 2F8F 20 3B 1F		 JSR @READFILE
  1455 2F92 68 AA			pla:tax
  1456
  1457 				; optimize OK (MIDFILES), line = 180
  1458
  1459 2F94 AD 08 3C			lda V+1
  1460 2F97 D0 05			bne @+
  1461 2F99 AD 07 3C			lda V
  1462 2F9C C9 04			cmp #$04
  1463 				@
  1464 2F9E F0 03			jeq l_03C5
  1465 2FA0 4C 0F 33			jmp b_03A8					; break
  1466 2FA3			l_03C5
  1467
  1468 				; optimize FAIL ('READLONGBI', MIDFILES), line = 181
  1469
  1470 2FA3 20 62 2E			jsr READLONGBI
  1471 2FA6 AD 18 3C			lda READLONGBI.RESULT
  1472 2FA9 8D 0F 3C			sta LEN
  1473 2FAC AD 19 3C			lda READLONGBI.RESULT+1
  1474 2FAF 8D 10 3C			sta LEN+1
  1475 2FB2 AD 1A 3C			lda READLONGBI.RESULT+2
  1476 2FB5 8D 11 3C			sta LEN+2
  1477 2FB8 AD 1B 3C			lda READLONGBI.RESULT+3
  1478 2FBB 8D 12 3C			sta LEN+3
  1479
  1480 				; optimize OK (MIDFILES), line = 182
  1481
  1482 2FBE AD 06 3C			lda CHUNKTAG+3
  1483 2FC1 49 64			eor #$64
  1484 2FC3 F0 03 4C 64 30		jne l_03DC
  1485 2FC8 AD 05 3C			lda CHUNKTAG+2
  1486 2FCB 49 68			eor #$68
  1487 2FCD F0 03 4C 64 30		jne l_03DC
  1488 2FD2 AD 04 3C			lda CHUNKTAG+1
  1489 2FD5 49 54			eor #$54
  1490 2FD7 F0 03 4C 64 30		jne l_03DC
  1491 2FDC AD 03 3C			lda CHUNKTAG
  1492 2FDF 49 4D			eor #$4D
  1493 2FE1 F0 03 4C 64 30		jne l_03DC
  1494
  1495 				; optimize FAIL ('READWORDBI', MIDFILES), line = 184
  1496
  1497 2FE6 20 14 2E			jsr READWORDBI
  1498 2FE9 AD 16 3C			lda READWORDBI.RESULT
  1499 2FEC 8D C9 3B			sta FORMAT
  1500 2FEF AD 17 3C			lda READWORDBI.RESULT+1
  1501 2FF2 8D CA 3B			sta FORMAT+1
  1502
  1503 				; optimize FAIL ('READWORDBI', MIDFILES), line = 185
  1504
  1505 2FF5 20 14 2E			jsr READWORDBI
  1506 2FF8 AD 16 3C			lda READWORDBI.RESULT
  1507 2FFB 8D CB 3B			sta NTRACKS
  1508 2FFE AD 17 3C			lda READWORDBI.RESULT+1
  1509 3001 8D CC 3B			sta NTRACKS+1
  1510
  1511 				; optimize FAIL ('READWORDBI', MIDFILES), line = 186
  1512
  1513 3004 20 14 2E			jsr READWORDBI
  1514 3007 AD 16 3C			lda READWORDBI.RESULT
  1515 300A 8D 07 3C			sta V
  1516 300D AD 17 3C			lda READWORDBI.RESULT+1
  1517 3010 8D 08 3C			sta V+1
  1518
  1519 				; optimize OK (MIDFILES), line = 187
  1520
  1521 3013 10 3E			jpl l_03FE
  1522
  1523 				; optimize OK (MIDFILES), line = 189
  1524
  1525 3015 29 7F			and #$7F
  1526 3017 8D CD 3B			sta FPS
  1527
  1528 				; optimize OK (MIDFILES), line = 190
  1529
  1530 301A 8D 1C 3C			sta @CASETMP_0005
  1531 301D C9 E8			cmp #$E8
  1532 301F D0 08			jne l_0417
  1533 				@
  1534
  1535 				; optimize OK (MIDFILES), line = 191
  1536
  1537 3021 A9 18			lda #$18
  1538 3023 8D CD 3B			sta FPS
  1539
  1540 3026 4C 4A 30			jmp a_0005
  1541 3029			l_0417
  1542 3029 C9 E7			cmp #$E7
  1543 302B D0 08			jne l_0424
  1544 				@
  1545
  1546 				; optimize OK (MIDFILES), line = 192
  1547
  1548 302D A9 19			lda #$19
  1549 302F 8D CD 3B			sta FPS
  1550
  1551 3032 4C 4A 30			jmp a_0005
  1552 3035			l_0424
  1553 3035 C9 E3			cmp #$E3
  1554 3037 D0 08			jne l_0431
  1555 				@
  1556
  1557 				; optimize OK (MIDFILES), line = 193
  1558
  1559 3039 A9 1D			lda #$1D
  1560 303B 8D CD 3B			sta FPS
  1561
  1562 303E 4C 4A 30			jmp a_0005
  1563 3041			l_0431
  1564 3041 C9 E2			cmp #$E2
  1565 3043 D0 05			jne l_043E
  1566 				@
  1567
  1568 				; optimize OK (MIDFILES), line = 194
  1569
  1570 3045 A9 1E			lda #$1E
  1571 3047 8D CD 3B			sta FPS
  1572
  1573 304A			l_043E
  1574 304A			a_0005
  1575
  1576 				; optimize OK (MIDFILES), line = 196
  1577
  1578 304A AD 07 3C			lda V
  1579 304D 8D CE 3B			sta FSD
  1580 3050 4C 61 30			jmp l_045C
  1581 3053			l_03FE
  1582
  1583 				; optimize OK (MIDFILES), line = 204
  1584
  1585 3053 AD 07 3C			lda V
  1586 3056 8D CF 3B			sta TICKDIV
  1587 3059 AD 08 3C			lda V+1
  1588 305C 29 7F			and #$7F
  1589 305E 8D D0 3B			sta TICKDIV+1
  1590 3061			l_045C
  1591 3061 4C B6 32			jmp l_046E
  1592 3064			l_03DC
  1593
  1594 				; optimize OK (MIDFILES), line = 210
  1595
  1596 3064 AD 06 3C			lda CHUNKTAG+3
  1597 3067 49 6B			eor #$6B
  1598 3069 F0 03 4C B6 32		jne l_047E
  1599 306E AD 05 3C			lda CHUNKTAG+2
  1600 3071 49 72			eor #$72
  1601 3073 F0 03 4C B6 32		jne l_047E
  1602 3078 AD 04 3C			lda CHUNKTAG+1
  1603 307B 49 54			eor #$54
  1604 307D F0 03 4C B6 32		jne l_047E
  1605 3082 AD 03 3C			lda CHUNKTAG
  1606 3085 49 4D			eor #$4D
  1607 3087 F0 03 4C B6 32		jne l_047E
  1608
  1609 				; optimize FAIL (0, MIDFILES), line = 212
  1610
  1611 308C EE 01 3C			inc TRACKCOUNT
  1612 308F D0 03			sne
  1613 3091 EE 02 3C			inc TRACKCOUNT+1
  1614
  1615 				; optimize FAIL ('@print', MIDFILES), line = 213
  1616
  1617 					@printSTRING #CODEORIGIN+$003B
  1617 				 LDY> CODEORIGIN+$003B\ LDA< CODEORIGIN+$003B\ JSR @PRINTSTRING
  1617 3094 A0 1E		 LDY> CODEORIGIN+$003B
  1617 3096 A9 3B		 LDA< CODEORIGIN+$003B
  1617 3098 20 A3 28		 JSR @PRINTSTRING
  1618 309B AD 01 3C			lda TRACKCOUNT
  1619 309E AC 02 3C			ldy TRACKCOUNT+1
  1620 30A1 20 EB 28			jsr @printWORD._ay
  1621 					@print #$2F
  1621 				 LDY# $2F\ JSR @PRINT
  1621 30A4 A0 2F		 LDY# $2F
  1621 30A6 20 94 28		 JSR @PRINT
  1622 30A9 AD CB 3B			lda NTRACKS
  1623 30AC AC CC 3B			ldy NTRACKS+1
  1624 30AF 20 EB 28			jsr @printWORD._ay
  1625 					@printSTRING #CODEORIGIN+$0044
  1625 				 LDY> CODEORIGIN+$0044\ LDA< CODEORIGIN+$0044\ JSR @PRINTSTRING
  1625 30B2 A0 1E		 LDY> CODEORIGIN+$0044
  1625 30B4 A9 44		 LDA< CODEORIGIN+$0044
  1625 30B6 20 A3 28		 JSR @PRINTSTRING
  1626
  1627 				; optimize OK (MIDFILES), line = 215
  1628
  1629 30B9 AC 14 3C 84 82 AC + 	mwy NTRKREC :bp2
  1630 30C3 A0 00			ldy #$00
  1631 30C5 AD C6 3B			lda MIDDATA
  1632 30C8 91 82			sta (:bp2),y
  1633 30CA C8				iny
  1634 30CB AD C7 3B			lda MIDDATA+1
  1635 30CE 91 82			sta (:bp2),y
  1636
  1637 				; optimize OK (MIDFILES), line = 216
  1638
  1639 30D0 C8				iny
  1640 30D1 A9 00			lda #$00
  1641 30D3 91 82			sta (:bp2),y
  1642 30D5 C8				iny
  1643 30D6 91 82			sta (:bp2),y
  1644
  1645 				; optimize OK (MIDFILES), line = 217
  1646
  1647 30D8 C8				iny
  1648 30D9 91 82			sta (:bp2),y
  1649
  1650 				; optimize OK (MIDFILES), line = 218
  1651
  1652 30DB C8				iny
  1653 30DC 91 82			sta (:bp2),y
  1654
  1655 				; --- WhileProlog
  1656 30DE 4C 95 32			jmp l_04AA
  1657 30E1			l_04AB
  1658
  1659 				; optimize OK (MIDFILES), line = 222
  1660
  1661 30E1 AD C6 3B			lda MIDDATA
  1662 30E4 8D 0B 3C			sta LOADADR
  1663 30E7 AD C7 3B			lda MIDDATA+1
  1664 30EA 8D 0C 3C			sta LOADADR+1
  1665
  1666 				; optimize OK (MIDFILES), line = 223
  1667
  1668 30ED A9 0B			lda <LOADADR
  1669 30EF 8D F0 3B			sta MEMBOUNDCHECK.ADR
  1670 30F2 A9 3C			lda >LOADADR
  1671 30F4 8D F1 3B			sta MEMBOUNDCHECK.ADR+1
  1672 30F7 20 7E 2D			jsr MEMBOUNDCHECK
  1673
  1674 				; optimize OK (MIDFILES), line = 224
  1675
  1676 30FA AD 0B 3C			lda LOADADR
  1677 30FD 8D C6 3B			sta MIDDATA
  1678 3100 AD 0C 3C			lda LOADADR+1
  1679 3103 8D C7 3B			sta MIDDATA+1
  1680
  1681 				; optimize OK (MIDFILES), line = 225
  1682
  1683 3106				.LOCAL
  1684 3106 AD 12 3C			lda LEN+3
  1685 3109 38 E9 00			sub #$00
  1686 310C D0 1F			bne L4
  1687 310E AD 11 3C			lda LEN+2
  1688 3111 C9 00			cmp #$00
  1689 3113 D0 0C			bne L1
  1690 3115 AD 10 3C			lda LEN+1
  1691 3118 C9 00			cmp #$00
  1692 311A D0 05			bne L1
  1693 311C AD 0F 3C			lda LEN
  1694 311F C9 80			cmp #$80
  1695 3121 F0 10		L1	beq L5
  1696 3123 B0 04			bcs L3
  1697 3125 A9 FF			lda #$FF
  1698 3127 D0 0A			bne L5
  1699 3129 A9 01		L3	lda #$01
  1700 312B D0 06			bne L5
  1701 312D 50 04		L4	bvc L5
  1702 312F 49 FF			eor #$FF
  1703 3131 09 01			ora #$01
  1704 3133			L5
  1705 					.ENDL
  1706 3133 30 0A			jmi l_04C7
  1707 3135 F0 08			jeq l_04C7
  1708 3137 A9 80			lda #$80
  1709 3139 8D 13 3C			sta LOADSIZE
  1710 313C 4C 45 31			jmp l_04D5
  1711 313F			l_04C7
  1712 313F AD 0F 3C			lda LEN
  1713 3142 8D 13 3C			sta LOADSIZE
  1714 3145			l_04D5
  1715
  1716 				; optimize OK (MIDFILES), line = 226
  1717
  1718 3145 AD 0B 3C			lda LOADADR
  1719 3148 18 6D 13 3C			add LOADSIZE
  1720 314C 8D 0D 3C			sta ENDADR
  1721 314F AD 0C 3C			lda LOADADR+1
  1722 3152 69 00			adc #$00
  1723 3154 8D 0E 3C			sta ENDADR+1
  1724
  1725 				; optimize OK (MIDFILES), line = 227
  1726
  1727 3157 C9 9C			cmp #$9C
  1728 3159 90 22			jcc l_0500
  1729 315B D0 05			bne @+
  1730 315D AD 0D 3C			lda ENDADR
  1731 3160 90 1B			jcc l_0500
  1732 				@
  1733 3162 AD 0E 3C			lda ENDADR+1
  1734 3165 C9 A0			cmp #$A0
  1735 3167 D0 05			bne @+
  1736 3169 AD 0D 3C			lda ENDADR
  1737 316C C9 00			cmp #$00
  1738 				@
  1739 316E B0 0D			jcs l_0500
  1740
  1741 				; optimize OK (MIDFILES), line = 228
  1742
  1743 3170 A9 00			lda #$00
  1744 3172 8D 09 3C			sta TOP
  1745 3175 A9 9C			lda #$9C
  1746 3177 8D 0A 3C			sta TOP+1
  1747 317A 4C D7 31			jmp l_050E
  1748 317D			l_0500
  1749
  1750 				; optimize OK (MIDFILES), line = 229
  1751
  1752 317D AD 0E 3C			lda ENDADR+1
  1753 3180 C9 D0			cmp #$D0
  1754 3182 90 22			jcc l_052A
  1755 3184 D0 05			bne @+
  1756 3186 AD 0D 3C			lda ENDADR
  1757 3189 90 1B			jcc l_052A
  1758 				@
  1759 318B AD 0E 3C			lda ENDADR+1
  1760 318E C9 D8			cmp #$D8
  1761 3190 D0 05			bne @+
  1762 3192 AD 0D 3C			lda ENDADR
  1763 3195 C9 00			cmp #$00
  1764 				@
  1765 3197 B0 0D			jcs l_052A
  1766
  1767 				; optimize OK (MIDFILES), line = 230
  1768
  1769 3199 A9 00			lda #$00
  1770 319B 8D 09 3C			sta TOP
  1771 319E A9 D0			lda #$D0
  1772 31A0 8D 0A 3C			sta TOP+1
  1773 31A3 4C D7 31			jmp l_0538
  1774 31A6			l_052A
  1775
  1776 				; optimize OK (MIDFILES), line = 231
  1777
  1778 31A6 AD 0E 3C			lda ENDADR+1
  1779 31A9 C9 E0			cmp #$E0
  1780 31AB 90 22			jcc l_0554
  1781 31AD D0 05			bne @+
  1782 31AF AD 0D 3C			lda ENDADR
  1783 31B2 90 1B			jcc l_0554
  1784 				@
  1785 31B4 AD 0E 3C			lda ENDADR+1
  1786 31B7 C9 E4			cmp #$E4
  1787 31B9 D0 05			bne @+
  1788 31BB AD 0D 3C			lda ENDADR
  1789 31BE C9 00			cmp #$00
  1790 				@
  1791 31C0 B0 0D			jcs l_0554
  1792
  1793 				; optimize OK (MIDFILES), line = 232
  1794
  1795 31C2 A9 00			lda #$00
  1796 31C4 8D 09 3C			sta TOP
  1797 31C7 A9 E0			lda #$E0
  1798 31C9 8D 0A 3C			sta TOP+1
  1799 31CC 4C D7 31			jmp l_0562
  1800 31CF			l_0554
  1801
  1802 				; optimize OK (MIDFILES), line = 233
  1803
  1804 31CF A9 00			lda #$00
  1805 31D1 8D 09 3C			sta TOP
  1806 31D4 8D 0A 3C			sta TOP+1
  1807 31D7			l_0562
  1808 31D7			l_0538
  1809 31D7			l_050E
  1810
  1811 				; optimize OK (MIDFILES), line = 234
  1812
  1813 31D7 AD 0A 3C			lda TOP+1
  1814 31DA 0D 09 3C			ora TOP
  1815 31DD F0 0A			jeq l_0577
  1816
  1817 				; optimize OK (MIDFILES), line = 235
  1818
  1819 31DF AD 09 3C			lda TOP
  1820 31E2 38 ED 0B 3C			sub LOADADR
  1821 31E6 8D 13 3C			sta LOADSIZE
  1822 31E9			l_0577
  1823
  1824 				; optimize OK (MIDFILES), line = 236
  1825
  1826 31E9 AD 13 3C			lda LOADSIZE
  1827 31EC D0 03			jne l_0596
  1828 31EE 4C 95 32			jmp c_04AB					; continue
  1829 31F1			l_0596
  1830 				; BlockRead
  1831
  1832 				; optimize OK (MIDFILES), line = 239
  1833
  1834 31F1 AC 23 33 84 82 AC + 	mwy F :bp2
  1835 31FB A0 06			ldy #s@file.buffer
  1836 31FD AD 8F 38			lda RBUF
  1837 3200 91 82			sta (:bp2),y
  1838 3202 C8				iny
  1839 3203 AD 90 38			lda RBUF+1
  1840 3206 91 82			sta (:bp2),y
  1841 3208 A0 08			ldy #s@file.nrecord
  1842 320A AD 13 3C			lda LOADSIZE
  1843 320D 91 82			sta (:bp2),y
  1844 320F C8				iny
  1845 3210 A9 00			lda #$00
  1846 3212 91 82			sta (:bp2),y
  1847 3214 A0 0A			ldy #s@file.numread
  1848 3216 A9 07			lda <V
  1849 3218 91 82			sta (:bp2),y
  1850 321A C8				iny
  1851 321B A9 3C			lda >V
  1852 321D 91 82			sta (:bp2),y
  1853
  1854 321F 8A 48			txa:pha
  1855 3221 18				clc
  1856 					@readfile F, #135
  1856 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1856 3222 AC 24 33		 LDY F+1
  1856 3225 AD 23 33		 LDA F
  1856 3228 A2 87		 LDX# 135
  1856 322A 20 3B 1F		 JSR @READFILE
  1857 322D 68 AA			pla:tax
  1858
  1859 				; optimize OK (MIDFILES), line = 240
  1860
  1861 322F AD 08 3C			lda V+1
  1862 3232 D0 06			bne @+
  1863 3234 AD 07 3C			lda V
  1864 3237 CD 13 3C			cmp LOADSIZE
  1865 				@
  1866 323A F0 05			jeq l_05BB
  1867 323C A9 01			lda #$01
  1868 323E 4C 5C 3A			jmp @halt
  1869 3241			l_05BB
  1870
  1871 				; optimize OK (MIDFILES), line = 241
  1872
  1873 3241 A9 00			lda #$00
  1874 3243 85 88			sta SYSTEM.MOVE_00D0.SOURCE
  1875 3245 A9 06			lda #$06
  1876 3247 85 89			sta SYSTEM.MOVE_00D0.SOURCE+1
  1877 3249 AD C6 3B			lda MIDDATA
  1878 324C 85 8C			sta SYSTEM.MOVE_00D0.DEST
  1879 324E AD C7 3B			lda MIDDATA+1
  1880 3251 85 8D			sta SYSTEM.MOVE_00D0.DEST+1
  1881 3253 AD 13 3C			lda LOADSIZE
  1882 3256 85 84			sta SYSTEM.MOVE_00D0.COUNT
  1883 3258 A9 00			lda #$00
  1884 325A 85 85			sta SYSTEM.MOVE_00D0.COUNT+1
  1885 325C				.local +MAIN.SYSTEM.MOVE_00D0
  1886 325C				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00D0.M@INLINE [Source: MIDICar Player.a65]
     4 325C 20 0D 22			jsr @move
Source: MIDICar Player.a65
  1887 					.endl
  1888
  1889 				; optimize OK (MIDFILES), line = 242
  1890
  1891 325F AD C6 3B			lda MIDDATA
  1892 3262 18 6D 07 3C			add V
  1893 3266 8D C6 3B			sta MIDDATA
  1894 3269 AD C7 3B			lda MIDDATA+1
  1895 326C 6D 08 3C			adc V+1
  1896 326F 8D C7 3B			sta MIDDATA+1
  1897
  1898 				; optimize OK (MIDFILES), line = 243
  1899
  1900 3272 AD 0F 3C			lda LEN
  1901 3275 38 ED 07 3C			sub V
  1902 3279 8D 0F 3C			sta LEN
  1903 327C AD 10 3C			lda LEN+1
  1904 327F ED 08 3C			sbc V+1
  1905 3282 8D 10 3C			sta LEN+1
  1906 3285 AD 11 3C			lda LEN+2
  1907 3288 E9 00			sbc #$00
  1908 328A 8D 11 3C			sta LEN+2
  1909 328D AD 12 3C			lda LEN+3
  1910 3290 E9 00			sbc #$00
  1911 3292 8D 12 3C			sta LEN+3
  1912 3295			c_04AB
  1913 3295			l_04AA
  1914
  1915 				; optimize OK (MIDFILES), line = 220
  1916
  1917 3295 AD 12 3C			lda LEN+3
  1918 3298 30 0E			bmi @+
  1919 329A 0D 11 3C			ora LEN+2
  1920 329D 0D 10 3C			ora LEN+1
  1921 32A0 0D 0F 3C			ora LEN
  1922 32A3 F0 03 4C E1 30		jne l_04AB
  1923 				@
  1924
  1925 				; optimize OK (MIDFILES), line = 246
  1926
  1927 32A8 AD 14 3C			lda NTRKREC
  1928 32AB 18 69 07			add #$07
  1929 32AE 8D 14 3C			sta NTRKREC
  1930 32B1 90 03			scc
  1931 32B3 EE 15 3C			inc NTRKREC+1
  1932 32B6			l_047E
  1933 32B6			l_046E
  1934
  1935 				; optimize FAIL ('@print', MIDFILES), line = 248
  1936
  1937 					@print #$9C
  1937 				 LDY# $9C\ JSR @PRINT
  1937 32B6 A0 9C		 LDY# $9C
  1937 32B8 20 94 28		 JSR @PRINT
  1938 32BB			l_03A7
  1939
  1940 				; optimize FAIL (1, MIDFILES), line = 177
  1941
  1942 32BB E8				inx
  1943 32BC A0 01			ldy #1
  1944 32BE AD 7F 3A			lda SYSTEM.IORESULT
  1945 32C1 C9 80			cmp #$80
  1946 32C3 90 01			bcc @+
  1947 32C5 88				dey
  1948 				@
  1949 32C6 94 94			sty :STACKORIGIN,x
  1950 32C8 AD 23 33			lda F
  1951 32CB 8D 8F 3A			sta SYSTEM.EOF.F
  1952 32CE AD 24 33			lda F+1
  1953 32D1 8D 90 3A			sta SYSTEM.EOF.F+1
  1954 32D4 20 EC 2A			jsr SYSTEM.EOF
  1955 32D7 E8				inx
  1956 32D8 AD 91 3A 95 94		mva SYSTEM.EOF.RESULT :STACKORIGIN,x
  1957 32DD 20 5D 21			jsr notBOOLEAN
  1958 32E0 20 98 21			jsr andAL_CL
  1959 32E3 AD 01 3C 95 94		mva TRACKCOUNT :STACKORIGIN,x
  1960 32E8 AD 02 3C 95 A4		mva TRACKCOUNT+1 :STACKORIGIN+STACKWIDTH,x
  1961 32ED E8				inx
  1962 32EE AD CB 3B 95 94		mva NTRACKS :STACKORIGIN,x
  1963 32F3 AD CC 3B 95 A4		mva NTRACKS+1 :STACKORIGIN+STACKWIDTH,x
  1964 32F8 A0 01			ldy #1
  1965 32FA 20 52 21			jsr cmpEAX_ECX.AX_CX
  1966 32FD 90 01			bcc @+
  1967 32FF 88				dey
  1968 				@
  1969 3300 94 93			sty :STACKORIGIN-1,x
  1970 3302 CA				dex
  1971 3303 20 98 21			jsr andAL_CL
  1972 3306 CA				dex
  1973 3307 CA				dex
  1974 3308 B5 95			lda :STACKORIGIN+1,x
  1975 330A F0 03 4C 59 2F		jne l_03A8
  1976 330F			b_03A8
  1977 				; CloseFile
  1978
  1979 330F 8A 48			txa:pha
  1980 3311 18				clc
  1981 					@closefile F
  1981 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1981 3312 AC 24 33		 LDY F+1
  1981 3315 AD 23 33		 LDA F
  1981 3318 20 08 1F		 JSR @CLOSEFILE
  1982 331B 68 AA			pla:tax
  1983
  1984 				; optimize OK (MIDFILES), line = 251
  1985
  1986 331D A9 01			lda #$01
  1987 331F 8D F4 3B			sta RESULT
  1988 3322			@exit
  1989
  1990 				; ------------------------------------------------------------
  1991
  1992 = 3BF2			FN	= DATAORIGIN+$017A
  1993 = 3BF4			RESULT	= DATAORIGIN+$017C
  1994 3322			.var F	= DATAORIGIN+$017D .word
  1995 = 3C01			TRACKCOUNT	= DATAORIGIN+$0189
  1996 = 3C03			CHUNKTAG	= DATAORIGIN+$018B
  1997 = 3C07			V	= DATAORIGIN+$018F
  1998 = 3C09			TOP	= DATAORIGIN+$0191
  1999 = 3C0B			LOADADR	= DATAORIGIN+$0193
  2000 = 3C0D			ENDADR	= DATAORIGIN+$0195
  2001 = 3C0F			LEN	= DATAORIGIN+$0197
  2002 = 3C13			LOADSIZE	= DATAORIGIN+$019B
  2003 = 3C14			NTRKREC	= DATAORIGIN+$019C
  2004 = 3A78			NTRKREC.PTR	= DATAORIGIN+$0000
  2005 = 3A7A			NTRKREC.DELTATIME	= DATAORIGIN+$0002
  2006 = 3A7C			NTRKREC.SKIPDELTA	= DATAORIGIN+$0004
  2007 = 3A7D			NTRKREC.EOT	= DATAORIGIN+$0005
  2008 = 3A7E			NTRKREC._EVENT	= DATAORIGIN+$0006
  2009 = 3C1C			@CASETMP_0005	= DATAORIGIN+$01A4
  2010
  2011 = 3BF2			@VarData	= FN
  2012 = 0024			@VarDataSize	= 36
  2013
  2014 3322 60				rts						; ret
  2015 = 3323 F5 3B		F
  2015 				.endl
  2016
  2017 3325			.local	GETTRACKDATA					; FUNCTION
  2018
  2019 				; ------------------------------------------------------------
  2020
  2021 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2022 				; as Pointer
  2023 3325 B5 94			lda :STACKORIGIN,x
  2024 3327 8D 1D 3C			sta TRACK
  2025 332A B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2026 332C 8D 1E 3C			sta TRACK+1
  2027 332F CA				dex
  2028 3330			@main
  2029
  2030 3330 4C 83 34			jmp l_0604
  2031
  2032 3333			.local	READB						; FUNCTION
  2033
  2034 				; optimize OK (MIDFILES), line = 264
  2035
  2036 3333 A5 F7			lda TRACKDATA
  2037 3335 8D 35 3C			sta ADR
  2038 3338 A5 F8			lda TRACKDATA+1
  2039 333A 8D 36 3C			sta ADR+1
  2040
  2041 				; optimize OK (MIDFILES), line = 265
  2042
  2043 333D A9 35			lda <ADR
  2044 333F 8D F0 3B			sta MEMBOUNDCHECK.ADR
  2045 3342 A9 3C			lda >ADR
  2046 3344 8D F1 3B			sta MEMBOUNDCHECK.ADR+1
  2047 3347 20 7E 2D			jsr MEMBOUNDCHECK
  2048
  2049 				; optimize OK (MIDFILES), line = 266
  2050
  2051 334A AD 35 3C			lda ADR
  2052 334D 85 F7			sta TRACKDATA
  2053 334F AD 36 3C			lda ADR+1
  2054 3352 85 F8			sta TRACKDATA+1
  2055
  2056 				; optimize OK (MIDFILES), line = 267
  2057
  2058 3354 A0 00			ldy #$00
  2059 3356 B1 F7			lda (TRACKDATA),y
  2060 3358 8D 37 3C			sta RESULT
  2061
  2062 				; optimize FAIL (0, MIDFILES), line = 268
  2063
  2064 335B E6 F7			inc TRACKDATA
  2065 335D D0 02			sne
  2066 335F E6 F8			inc TRACKDATA+1
  2067 3361			@exit
  2068
  2069 				; ------------------------------------------------------------
  2070
  2071 = 3C37			RESULT	= DATAORIGIN+$01BF
  2072 3361 60				rts						; ret
  2073 				.endl
  2074
  2075 3362			.local	GETDATA						; PROCEDURE
  2076
  2077 				; optimize OK (MIDFILES), line = 276
  2078
  2079 3362 A9 00			lda #$00
  2080 3364 8D 3B 3C			sta I
  2081
  2082 				; --- WhileProlog
  2083 3367 4C AA 33			jmp l_0627
  2084 336A			l_0628
  2085
  2086 				; optimize OK (MIDFILES), line = 279
  2087
  2088 336A A5 F7			lda TRACKDATA
  2089 336C 8D 35 3C			sta ADR
  2090 336F A5 F8			lda TRACKDATA+1
  2091 3371 8D 36 3C			sta ADR+1
  2092
  2093 				; optimize OK (MIDFILES), line = 280
  2094
  2095 3374 A9 35			lda <ADR
  2096 3376 8D F0 3B			sta MEMBOUNDCHECK.ADR
  2097 3379 A9 3C			lda >ADR
  2098 337B 8D F1 3B			sta MEMBOUNDCHECK.ADR+1
  2099 337E 20 7E 2D			jsr MEMBOUNDCHECK
  2100
  2101 				; optimize OK (MIDFILES), line = 281
  2102
  2103 3381 AD 35 3C			lda ADR
  2104 3384 85 F7			sta TRACKDATA
  2105 3386 AD 36 3C			lda ADR+1
  2106 3389 85 F8			sta TRACKDATA+1
  2107
  2108 				; optimize OK (MIDFILES), line = 282
  2109
  2110 338B A0 00			ldy #$00
  2111 338D B1 F7			lda (TRACKDATA),y
  2112 338F AC 38 3C 84 82 AC + 	mwy BUF :bp2
  2113 3399 AC 3B 3C			ldy I
  2114 339C 91 82			sta (:bp2),y
  2115
  2116 				; optimize FAIL (0, MIDFILES), line = 283
  2117
  2118 339E E6 F7			inc TRACKDATA
  2119 33A0 D0 02			sne
  2120 33A2 E6 F8			inc TRACKDATA+1
  2121
  2122 				; optimize FAIL (0, MIDFILES), line = 284
  2123
  2124 33A4 EE 3B 3C			inc I
  2125
  2126 				; optimize FAIL (0, MIDFILES), line = 285
  2127
  2128 33A7 CE 3A 3C			dec SIZE
  2129 33AA			l_0627
  2130
  2131 				; optimize OK (MIDFILES), line = 277
  2132
  2133 33AA AD 3A 3C			lda SIZE
  2134 33AD D0 BB			jne l_0628
  2135
  2136 				; ------------------------------------------------------------
  2137
  2138 = 3C38			BUF	= DATAORIGIN+$01C0
  2139 = 3C3A			SIZE	= DATAORIGIN+$01C2
  2140 = 3C3B			I	= DATAORIGIN+$01C3
  2141
  2142 = 3C38			@VarData	= BUF
  2143 = 0004			@VarDataSize	= 4
  2144
  2145 33AF			@exit
  2146 					.ifdef @new
  2147 					lda <@VarData
  2148 					sta :ztmp
  2149 					lda >@VarData
  2150 					ldy #@VarDataSize-1
  2151 					jmp @FreeMem
  2152 					els
  2153 33AF 60				rts						; ret
  2154 					eif
  2155 				.endl
  2156
  2157 33B0			.local	SKIP						; PROCEDURE
  2158 33B0 8D 3C 3C			sta N
  2159
  2160 				; --- WhileProlog
  2161 33B3 4C E0 33			jmp l_065B
  2162 33B6			l_065C
  2163
  2164 				; optimize OK (MIDFILES), line = 293
  2165
  2166 33B6 A5 F7			lda TRACKDATA
  2167 33B8 8D 35 3C			sta ADR
  2168 33BB A5 F8			lda TRACKDATA+1
  2169 33BD 8D 36 3C			sta ADR+1
  2170
  2171 				; optimize OK (MIDFILES), line = 294
  2172
  2173 33C0 A9 35			lda <ADR
  2174 33C2 8D F0 3B			sta MEMBOUNDCHECK.ADR
  2175 33C5 A9 3C			lda >ADR
  2176 33C7 8D F1 3B			sta MEMBOUNDCHECK.ADR+1
  2177 33CA 20 7E 2D			jsr MEMBOUNDCHECK
  2178
  2179 				; optimize OK (MIDFILES), line = 295
  2180
  2181 33CD AD 35 3C			lda ADR
  2182 33D0 85 F7			sta TRACKDATA
  2183 33D2 AD 36 3C			lda ADR+1
  2184 33D5 85 F8			sta TRACKDATA+1
  2185
  2186 				; optimize FAIL (0, MIDFILES), line = 296
  2187
  2188 33D7 CE 3C 3C			dec N
  2189
  2190 				; optimize FAIL (0, MIDFILES), line = 297
  2191
  2192 33DA E6 F7			inc TRACKDATA
  2193 33DC D0 02			sne
  2194 33DE E6 F8			inc TRACKDATA+1
  2195 33E0			l_065B
  2196
  2197 				; optimize OK (MIDFILES), line = 291
  2198
  2199 33E0 AD 3C 3C			lda N
  2200 33E3 D0 D1			jne l_065C
  2201
  2202 				; ------------------------------------------------------------
  2203
  2204 = 3C3C			N	= DATAORIGIN+$01C4
  2205
  2206 = 3C3C			@VarData	= N
  2207 = 0001			@VarDataSize	= 1
  2208
  2209 33E5			@exit
  2210 					.ifdef @new
  2211 					lda <@VarData
  2212 					sta :ztmp
  2213 					lda >@VarData
  2214 					ldy #@VarDataSize-1
  2215 					jmp @FreeMem
  2216 					els
  2217 33E5 60				rts						; ret
  2218 					eif
  2219 				.endl
  2220
  2221 33E6			.local	GETVARLONG					; FUNCTION
  2222
  2223 				; optimize OK (MIDFILES), line = 306
  2224
  2225 33E6 A9 00			lda #$00
  2226 33E8 8D 3D 3C			sta RESULT
  2227 33EB 8D 3E 3C			sta RESULT+1
  2228
  2229 				; --- RepeatUntilProlog
  2230 33EE			l_0685
  2231
  2232 				; optimize FAIL ('READB', MIDFILES), line = 308
  2233
  2234 33EE 20 33 33			jsr READB
  2235 33F1 AD 37 3C			lda READB.RESULT
  2236 33F4 8D 32 3C			sta V
  2237
  2238 				; optimize OK (MIDFILES), line = 309
  2239
  2240 33F7 AD 3E 3C			lda RESULT+1
  2241 33FA 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2242 33FC AD 3D 3C			lda RESULT
  2243 33FF 0A				asl @
  2244 3400 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  2245 3402 0A				asl @
  2246 3403 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  2247 3405 0A				asl @
  2248 3406 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  2249 3408 0A				asl @
  2250 3409 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  2251 340B 0A				asl @
  2252 340C 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  2253 340E 0A				asl @
  2254 340F 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  2255 3411 0A				asl @
  2256 3412 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  2257 3414 8D 3D 3C			sta RESULT
  2258 3417 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2259 3419 8D 3E 3C			sta RESULT+1
  2260
  2261 				; optimize OK (MIDFILES), line = 310
  2262
  2263 341C AD 32 3C			lda V
  2264 341F 29 7F			and #$7F
  2265 3421 0D 3D 3C			ora RESULT
  2266 3424 8D 3D 3C			sta RESULT
  2267
  2268 				; optimize OK (MIDFILES), line = 311
  2269
  2270 3427 AD 32 3C			lda V
  2271 342A 30 C2			jmi l_0685
  2272 342C			@exit
  2273
  2274 				; ------------------------------------------------------------
  2275
  2276 = 3C3D			RESULT	= DATAORIGIN+$01C5
  2277 342C 60				rts						; ret
  2278 				.endl
  2279
  2280 342D			.local	GET24BITVAL					; FUNCTION
  2281
  2282 				; optimize OK (MIDFILES), line = 320
  2283
  2284 342D A9 3F			lda <RESULT
  2285 342F 8D 43 3C			sta RESULTPTR
  2286 3432 A9 3C			lda >RESULT
  2287 3434 8D 44 3C			sta RESULTPTR+1
  2288
  2289 				; optimize OK (MIDFILES), line = 321
  2290
  2291 3437 AD 8D 38			lda BI
  2292 343A 8D 38 3C			sta GETDATA.BUF
  2293 343D AD 8E 38			lda BI+1
  2294 3440 8D 39 3C			sta GETDATA.BUF+1
  2295 3443 A9 03			lda #$03
  2296 3445 8D 3A 3C			sta GETDATA.SIZE
  2297 3448 20 62 33			jsr GETDATA
  2298
  2299 				; optimize OK (MIDFILES), line = 322
  2300
  2301 344B AD DF 3B			lda adr.BI+$02
  2302 344E AC 44 3C 84 81		mvy RESULTPTR+1 :bp+1
  2303 3453 AC 43 3C			ldy RESULTPTR
  2304 3456 91 80			sta (:bp),y
  2305 3458 EE 43 3C			inc RESULTPTR
  2306 345B D0 03			sne
  2307 345D EE 44 3C			inc RESULTPTR+1
  2308
  2309 				; optimize OK (MIDFILES), line = 323
  2310
  2311 3460 AD DE 3B			lda adr.BI+$01
  2312 3463 AC 44 3C 84 81		mvy RESULTPTR+1 :bp+1
  2313 3468 AC 43 3C			ldy RESULTPTR
  2314 346B 91 80			sta (:bp),y
  2315 346D EE 43 3C			inc RESULTPTR
  2316 3470 D0 03			sne
  2317 3472 EE 44 3C			inc RESULTPTR+1
  2318
  2319 				; optimize OK (MIDFILES), line = 324
  2320
  2321 3475 AD DD 3B			lda adr.BI+$00
  2322 3478 AC 44 3C 84 81		mvy RESULTPTR+1 :bp+1
  2323 347D AC 43 3C			ldy RESULTPTR
  2324 3480 91 80			sta (:bp),y
  2325 3482			@exit
  2326
  2327 				; ------------------------------------------------------------
  2328
  2329 = 3C3F			RESULT	= DATAORIGIN+$01C7
  2330 = 3C43			RESULTPTR	= DATAORIGIN+$01CB
  2331
  2332 = 3C43			@VarData	= RESULTPTR
  2333 = 0002			@VarDataSize	= 2
  2334
  2335 3482 60				rts						; ret
  2336 				.endl
  2337 3483			l_0604
  2338
  2339 				; optimize OK (MIDFILES), line = 334
  2340
  2341 3483 AC 1D 3C 84 82 AC + 	mwy TRACK :bp2
  2342 348D A0 00			ldy #$00
  2343 348F B1 82			lda (:bp2),y
  2344 3491 85 F7			sta TRACKDATA
  2345 3493 C8				iny
  2346 3494 B1 82			lda (:bp2),y
  2347 3496 85 F8			sta TRACKDATA+1
  2348
  2349 				; optimize OK (MIDFILES), line = 335
  2350
  2351 3498 A0 06			ldy #$06
  2352 349A B1 82			lda (:bp2),y
  2353 349C 8D 33 3C			sta EVENT
  2354
  2355 				; --- RepeatUntilProlog
  2356 349F			l_06E8
  2357
  2358 				; optimize OK (MIDFILES), line = 337
  2359
  2360 349F AC 1D 3C 84 82 AC + 	mwy TRACK :bp2
  2361 34A9 A0 04			ldy #$04
  2362 34AB B1 82			lda (:bp2),y
  2363 34AD D0 1A			jne l_06F7
  2364
  2365 				; optimize FAIL ('GETVARLONG', MIDFILES), line = 339
  2366
  2367 34AF 20 E6 33			jsr GETVARLONG
  2368 34B2 AD 3D 3C			lda GETVARLONG.RESULT
  2369 34B5 8D 2E 3C			sta DELTATIME
  2370 34B8 AD 3E 3C			lda GETVARLONG.RESULT+1
  2371 34BB 8D 2F 3C			sta DELTATIME+1
  2372
  2373 				; optimize OK (MIDFILES), line = 340
  2374
  2375 34BE 0D 2E 3C			ora DELTATIME
  2376 34C1 F0 03			jeq l_070D
  2377 34C3 4C 69 36			jmp b_06E8					; break
  2378 34C6			l_070D
  2379 34C6 4C D9 34			jmp l_0719
  2380 34C9			l_06F7
  2381
  2382 				; optimize OK (MIDFILES), line = 344
  2383
  2384 34C9 AC 1D 3C 84 82 AC + 	mwy TRACK :bp2
  2385 34D3 A0 04			ldy #$04
  2386 34D5 A9 00			lda #$00
  2387 34D7 91 82			sta (:bp2),y
  2388 34D9			l_0719
  2389
  2390 				; optimize OK (MIDFILES), line = 346
  2391
  2392 34D9 A0 00			ldy #$00
  2393 34DB B1 F7			lda (TRACKDATA),y
  2394 34DD 10 09			jpl l_0733
  2395
  2396 				; optimize FAIL ('READB', MIDFILES), line = 347
  2397
  2398 34DF 20 33 33			jsr READB
  2399 34E2 AD 37 3C			lda READB.RESULT
  2400 34E5 8D 33 3C			sta EVENT
  2401 34E8			l_0733
  2402
  2403 				; optimize OK (MIDFILES), line = 349
  2404
  2405 34E8 AD 33 3C			lda EVENT
  2406 34EB 8D 45 3C			sta @CASETMP_0006
  2407 34EE 18				clc						; clear carry for add
  2408 34EF 69 40			adc #$FF-$BF					; make m = $FF
  2409 34F1 69 40			adc #$BF-$80+1					; carry set if in range n to m
  2410 34F3 B0 0A			bcs @+
  2411 34F5 AD 45 3C			lda @CASETMP_0006
  2412 34F8 18				clc						; clear carry for add
  2413 34F9 69 10			adc #$FF-$EF					; make m = $FF
  2414 34FB 69 10			adc #$EF-$E0+1					; carry set if in range n to m
  2415 34FD 90 1B			jcc l_0747
  2416 				@
  2417
  2418 				; optimize OK (MIDFILES), line = 358
  2419
  2420 34FF AD 33 3C			lda EVENT
  2421 3502 20 CA 2B			jsr MC6850.MC6850_SEND
  2422
  2423 				; optimize FAIL ('READB', MIDFILES), line = 359
  2424
  2425 3505 20 33 33			jsr READB
  2426 3508 AD 37 3C			lda READB.RESULT
  2427 350B 20 CA 2B			jsr MC6850.MC6850_SEND
  2428
  2429 				; optimize FAIL ('READB', MIDFILES), line = 360
  2430
  2431 350E 20 33 33			jsr READB
  2432 3511 AD 37 3C			lda READB.RESULT
  2433 3514 20 CA 2B			jsr MC6850.MC6850_SEND
  2434
  2435 3517 4C 56 36			jmp a_0006
  2436 351A			l_0747
  2437 351A AD 45 3C			lda @CASETMP_0006
  2438 351D 18				clc						; clear carry for add
  2439 351E 69 20			adc #$FF-$DF					; make m = $FF
  2440 3520 69 20			adc #$DF-$C0+1					; carry set if in range n to m
  2441 3522 90 12			jcc l_0758
  2442 				@
  2443
  2444 				; optimize OK (MIDFILES), line = 369
  2445
  2446 3524 AD 33 3C			lda EVENT
  2447 3527 20 CA 2B			jsr MC6850.MC6850_SEND
  2448
  2449 				; optimize FAIL ('READB', MIDFILES), line = 370
  2450
  2451 352A 20 33 33			jsr READB
  2452 352D AD 37 3C			lda READB.RESULT
  2453 3530 20 CA 2B			jsr MC6850.MC6850_SEND
  2454
  2455 3533 4C 56 36			jmp a_0006
  2456 3536			l_0758
  2457 3536 AD 45 3C			lda @CASETMP_0006
  2458 3539 18				clc						; clear carry for add
  2459 353A 69 08			adc #$FF-$F7					; make m = $FF
  2460 353C 69 08			adc #$F7-$F0+1					; carry set if in range n to m
  2461 353E 90 4E			jcc l_0767
  2462 				@
  2463
  2464 				; optimize FAIL ('GETVARLONG', MIDFILES), line = 375
  2465
  2466 3540 20 E6 33			jsr GETVARLONG
  2467 3543 AD 3D 3C			lda GETVARLONG.RESULT
  2468 3546 8D 30 3C			sta MSGLEN
  2469 3549 AD 3E 3C			lda GETVARLONG.RESULT+1
  2470 354C 8D 31 3C			sta MSGLEN+1
  2471
  2472 				; optimize OK (MIDFILES), line = 379
  2473
  2474 354F AD 33 3C			lda EVENT
  2475 3552 20 CA 2B			jsr MC6850.MC6850_SEND
  2476
  2477 				; --- WhileProlog
  2478 3555 4C 6F 35			jmp l_0771
  2479 3558			l_0772
  2480
  2481 				; optimize FAIL ('READB', MIDFILES), line = 383
  2482
  2483 3558 20 33 33			jsr READB
  2484 355B AD 37 3C			lda READB.RESULT
  2485 355E 8D 32 3C			sta V
  2486
  2487 				; optimize OK (MIDFILES), line = 387
  2488
  2489 3561 20 CA 2B			jsr MC6850.MC6850_SEND
  2490
  2491 				; optimize FAIL (0, MIDFILES), line = 389
  2492
  2493 3564 AD 30 3C			lda MSGLEN
  2494 3567 D0 03			bne @+
  2495 3569 CE 31 3C			dec MSGLEN+1
  2496 				@
  2497 356C CE 30 3C			dec MSGLEN
  2498 356F			l_0771
  2499
  2500 				; optimize OK (MIDFILES), line = 381
  2501
  2502 356F AD 31 3C			lda MSGLEN+1
  2503 3572 0D 30 3C			ora MSGLEN
  2504 3575 D0 E1			jne l_0772
  2505
  2506 				; optimize OK (MIDFILES), line = 391
  2507
  2508 3577 AD 32 3C			lda V
  2509 357A C9 F7			cmp #$F7
  2510 357C D0 08			jne l_079B
  2511 357E A9 00			lda #$00
  2512 3580 8D 2D 3C			sta FLAGSYSEX
  2513 3583 4C 8B 35			jmp l_07A9
  2514 3586			l_079B
  2515 3586 A9 01			lda #$01
  2516 3588 8D 2D 3C			sta FLAGSYSEX
  2517 358B			l_07A9
  2518
  2519 358B 4C 56 36			jmp a_0006
  2520 358E			l_0767
  2521 358E AD 45 3C			lda @CASETMP_0006
  2522 3591 C9 FF			cmp #$FF
  2523 3593 F0 03 4C 56 36		jne l_07B6
  2524 				@
  2525
  2526 				; optimize FAIL ('READB', MIDFILES), line = 395
  2527
  2528 3598 20 33 33			jsr READB
  2529 359B AD 37 3C			lda READB.RESULT
  2530 359E 8D 34 3C			sta META
  2531
  2532 				; optimize FAIL ('GETVARLONG', MIDFILES), line = 396
  2533
  2534 35A1 20 E6 33			jsr GETVARLONG
  2535 35A4 AD 3D 3C			lda GETVARLONG.RESULT
  2536 35A7 8D 30 3C			sta MSGLEN
  2537 35AA AD 3E 3C			lda GETVARLONG.RESULT+1
  2538 35AD 8D 31 3C			sta MSGLEN+1
  2539
  2540 				; optimize OK (MIDFILES), line = 397
  2541
  2542 35B0 AD 34 3C			lda META
  2543 35B3 8D 46 3C			sta @CASETMP_0007
  2544 35B6 C9 2F			cmp #$2F
  2545 35B8 D0 13			jne l_07C9
  2546 				@
  2547
  2548 				; optimize OK (MIDFILES), line = 400
  2549
  2550 35BA AC 1D 3C 84 82 AC + 	mwy TRACK :bp2
  2551 35C4 A0 05			ldy #$05
  2552 35C6 A9 01			lda #$01
  2553 35C8 91 82			sta (:bp2),y
  2554
  2555 35CA 4C 56 36			jmp a_0007
  2556 35CD			l_07C9
  2557 35CD C9 51			cmp #$51
  2558 35CF D0 39			jne l_07D6
  2559 				@
  2560
  2561 				; optimize FAIL ('GET24BITVAL', MIDFILES), line = 404
  2562
  2563 35D1 20 2D 34			jsr GET24BITVAL
  2564 35D4 AD 3F 3C			lda GET24BITVAL.RESULT
  2565 35D7 8D D1 3B			sta MS_PER_QNOTE
  2566 35DA AD 40 3C			lda GET24BITVAL.RESULT+1
  2567 35DD 8D D2 3B			sta MS_PER_QNOTE+1
  2568 35E0 AD 41 3C			lda GET24BITVAL.RESULT+2
  2569 35E3 8D D3 3B			sta MS_PER_QNOTE+2
  2570 35E6 AD 42 3C			lda GET24BITVAL.RESULT+3
  2571 35E9 8D D4 3B			sta MS_PER_QNOTE+3
  2572
  2573 				; optimize OK (MIDFILES), line = 405
  2574
  2575 35EC AD D1 3B			lda MS_PER_QNOTE
  2576 35EF 8D 47 3C			sta SETTEMPO.NTEMPO
  2577 35F2 AD D2 3B			lda MS_PER_QNOTE+1
  2578 35F5 8D 48 3C			sta SETTEMPO.NTEMPO+1
  2579 35F8 AD D3 3B			lda MS_PER_QNOTE+2
  2580 35FB 8D 49 3C			sta SETTEMPO.NTEMPO+2
  2581 35FE AD D4 3B			lda MS_PER_QNOTE+3
  2582 3601 8D 4A 3C			sta SETTEMPO.NTEMPO+3
  2583 3604 20 BE 36			jsr SETTEMPO
  2584
  2585 3607 4C 56 36			jmp a_0007
  2586 360A			l_07D6
  2587 360A C9 58			cmp #$58
  2588 360C D0 42			jne l_07E5
  2589 				@
  2590
  2591 				; optimize FAIL ('READB', MIDFILES), line = 409
  2592
  2593 360E 20 33 33			jsr READB
  2594 3611 AD 37 3C			lda READB.RESULT
  2595 3614 8D D5 3B			sta TACTNUM
  2596
  2597 				; optimize FAIL ('READB', MIDFILES), line = 410
  2598
  2599 3617 20 33 33			jsr READB
  2600 361A AD 37 3C			lda READB.RESULT
  2601 361D 8D D6 3B			sta TACTDENUM
  2602
  2603 				; optimize FAIL ('READB', MIDFILES), line = 411
  2604
  2605 3620 20 33 33			jsr READB
  2606 3623 AD 37 3C			lda READB.RESULT
  2607 3626 8D D7 3B			sta TICKS_PER_QNOTE
  2608
  2609 				; optimize FAIL ('READB', MIDFILES), line = 412
  2610
  2611 3629 20 33 33			jsr READB
  2612 362C AD 37 3C			lda READB.RESULT
  2613 362F 8D D8 3B			sta TICKS_PER_32ND
  2614
  2615 				; optimize OK (MIDFILES), line = 413
  2616
  2617 3632 AD D1 3B			lda MS_PER_QNOTE
  2618 3635 8D 47 3C			sta SETTEMPO.NTEMPO
  2619 3638 AD D2 3B			lda MS_PER_QNOTE+1
  2620 363B 8D 48 3C			sta SETTEMPO.NTEMPO+1
  2621 363E AD D3 3B			lda MS_PER_QNOTE+2
  2622 3641 8D 49 3C			sta SETTEMPO.NTEMPO+2
  2623 3644 AD D4 3B			lda MS_PER_QNOTE+3
  2624 3647 8D 4A 3C			sta SETTEMPO.NTEMPO+3
  2625 364A 20 BE 36			jsr SETTEMPO
  2626
  2627 364D 4C 56 36			jmp a_0007
  2628 3650			l_07E5
  2629
  2630 				; optimize OK (MIDFILES), line = 416
  2631
  2632 3650 AD 30 3C			lda MSGLEN
  2633 3653 20 B0 33			jsr SKIP
  2634 3656			a_0007
  2635
  2636 3656			l_07B6
  2637 3656			a_0006
  2638
  2639 				; optimize OK (MIDFILES), line = 420
  2640
  2641 3656 AC 1D 3C 84 82 AC + 	mwy TRACK :bp2
  2642 3660 A0 05			ldy #$05
  2643 3662 B1 82			lda (:bp2),y
  2644 3664 D0 03 4C 9F 34		jeq l_06E8
  2645 3669			b_06E8
  2646
  2647 				; optimize OK (MIDFILES), line = 421
  2648
  2649 3669 AC 1D 3C 84 82 AC + 	mwy TRACK :bp2
  2650 3673 A0 00			ldy #$00
  2651 3675 A5 F7			lda TRACKDATA
  2652 3677 91 82			sta (:bp2),y
  2653 3679 C8				iny
  2654 367A A5 F8			lda TRACKDATA+1
  2655 367C 91 82			sta (:bp2),y
  2656
  2657 				; optimize OK (MIDFILES), line = 422
  2658
  2659 367E A0 04			ldy #$04
  2660 3680 A9 01			lda #$01
  2661 3682 91 82			sta (:bp2),y
  2662
  2663 				; optimize OK (MIDFILES), line = 423
  2664
  2665 3684 A0 06			ldy #$06
  2666 3686 AD 33 3C			lda EVENT
  2667 3689 91 82			sta (:bp2),y
  2668
  2669 				; optimize OK (MIDFILES), line = 424
  2670
  2671 368B AD 2E 3C			lda DELTATIME
  2672 368E 8D 2B 3C			sta RESULT
  2673 3691 AD 2F 3C			lda DELTATIME+1
  2674 3694 8D 2C 3C			sta RESULT+1
  2675 3697			@exit
  2676
  2677 				; ------------------------------------------------------------
  2678
  2679 = 3C1D			TRACK	= DATAORIGIN+$01A5
  2680 = 3A78			TRACK.PTR	= DATAORIGIN+$0000
  2681 = 3A7A			TRACK.DELTATIME	= DATAORIGIN+$0002
  2682 = 3A7C			TRACK.SKIPDELTA	= DATAORIGIN+$0004
  2683 = 3A7D			TRACK.EOT	= DATAORIGIN+$0005
  2684 = 3A7E			TRACK._EVENT	= DATAORIGIN+$0006
  2685 = 3C2B			RESULT	= DATAORIGIN+$01B3
  2686 = 3C2D			FLAGSYSEX	= DATAORIGIN+$01B5
  2687 = 3C2E			DELTATIME	= DATAORIGIN+$01B6
  2688 = 3C30			MSGLEN	= DATAORIGIN+$01B8
  2689 = 3C32			V	= DATAORIGIN+$01BA
  2690 = 3C33			EVENT	= DATAORIGIN+$01BB
  2691 = 3C34			META	= DATAORIGIN+$01BC
  2692 = 3C35			ADR	= DATAORIGIN+$01BD
  2693 = 3C45			@CASETMP_0006	= DATAORIGIN+$01CD
  2694 = 3C46			@CASETMP_0007	= DATAORIGIN+$01CE
  2695
  2696 = 3C1D			@VarData	= TRACK
  2697 = 001A			@VarDataSize	= 26
  2698
  2699 3697 60				rts						; ret
  2700 				.endl
  2701
  2702 3698			.local	INT_PLAY					; PROCEDURE | INTERRUPT
  2703
  2704 				; optimize OK (MIDFILES), line = 430
  2705
  2706 3698 A5 DF			lda _TIMERSTATUS
  2707 369A 30 20			jmi l_083E
  2708
  2709 				; optimize FAIL (0, MIDFILES), line = 432
  2710
  2711 369C E6 F2			inc _SUBCNT
  2712
  2713 				; optimize OK (MIDFILES), line = 433
  2714
  2715 369E A5 F2			lda _SUBCNT
  2716 36A0 C9 02			cmp #$02
  2717 36A2 90 18			jcc l_0855
  2718
  2719 				; optimize OK (MIDFILES), line = 435
  2720
  2721 36A4 A9 00			lda #$00
  2722 36A6 85 F2			sta _SUBCNT
  2723
  2724 				; optimize FAIL (0, MIDFILES), line = 436
  2725
  2726 36A8 E6 F3 D0 0A E6 F4 + 	ind TOTALTICKS
  2727
  2728 				; optimize OK (MIDFILES), line = 437
  2729
  2730 36B6 A5 DF			lda _TIMERSTATUS
  2731 36B8 09 40			ora #$40
  2732 36BA 85 DF			sta _TIMERSTATUS
  2733 36BC			l_0855
  2734 36BC			l_083E
  2735
  2736 				; -------------------  ASM Block 00000070  -------------------
  2737
  2738 36BC 68			    pla
  2739 				  
  2740 36BD 40				rti						; ret
  2741 				.endl
  2742
  2743 36BE			.local	SETTEMPO					; PROCEDURE
  2744
  2745 				; optimize OK (MIDFILES), line = 452
  2746
  2747 36BE 78				sei
  2748 36BF AD DB 3B 8D 10 02		mva OLDTIMERVEC VTIMR1
  2749 36C5 AD DC 3B 8D 11 02		mva OLDTIMERVEC+1 VTIMR1+1
  2750 36CB A5 10			lda irqens
  2751 36CD 29 FE			and #$fe
  2752 36CF 85 10			sta irqens
  2753 36D1 8D 0E D2			sta irqen
  2754 36D4 58				cli
  2755
  2756 				; optimize FAIL ('@I2F_m', MIDFILES), line = 453
  2757
  2758 36D5 E8				inx
  2759 36D6 AD 47 3C 95 94		mva NTEMPO :STACKORIGIN,x
  2760 36DB AD 48 3C 95 A4		mva NTEMPO+1 :STACKORIGIN+STACKWIDTH,x
  2761 36E0 AD 49 3C 95 B4		mva NTEMPO+2 :STACKORIGIN+STACKWIDTH*2,x
  2762 36E5 AD 4A 3C 95 C4		mva NTEMPO+3 :STACKORIGIN+STACKWIDTH*3,x
  2763 36EA E8				inx
  2764 36EB A9 00 95 94			mva #$00 :STACKORIGIN,x
  2765 36EF A9 24 95 A4			mva #$24 :STACKORIGIN+STACKWIDTH,x
  2766 36F3 A9 74 95 B4			mva #$74 :STACKORIGIN+STACKWIDTH*2,x
  2767 36F7 A9 49 95 C4			mva #$49 :STACKORIGIN+STACKWIDTH*3,x
  2768 36FB 20 6D 28			jsr @I2F_m
  2769 36FE 20 2F 27			jsr @FDIV
  2770 3701 CA				dex
  2771 3702 B5 94			lda :STACKORIGIN,x
  2772 3704 8D 4B 3C			sta FREQ
  2773 3707 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2774 3709 8D 4C 3C			sta FREQ+1
  2775 370C B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2776 370E 8D 4D 3C			sta FREQ+2
  2777 3711 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2778 3713 8D 4E 3C			sta FREQ+3
  2779
  2780 				; optimize FAIL ('@I2F', MIDFILES), line = 454
  2781
  2782 3716 AD 4B 3C 95 94		mva FREQ :STACKORIGIN,x
  2783 371B AD 4C 3C 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2784 3720 AD 4D 3C 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2785 3725 AD 4E 3C 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2786 372A E8				inx
  2787 372B AD CF 3B 95 94		mva TICKDIV :STACKORIGIN,x
  2788 3730 AD D0 3B 95 A4		mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
  2789 3735 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  2790 3739 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  2791 373D 20 48 28			jsr @I2F
  2792 3740 20 2F 27			jsr @FDIV
  2793 3743 CA				dex
  2794 3744 B5 94			lda :STACKORIGIN,x
  2795 3746 8D 4B 3C			sta FREQ
  2796 3749 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2797 374B 8D 4C 3C			sta FREQ+1
  2798 374E B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2799 3750 8D 4D 3C			sta FREQ+2
  2800 3753 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2801 3755 8D 4E 3C			sta FREQ+3
  2802
  2803 				; optimize FAIL ('@FDIV', MIDFILES), line = 455
  2804
  2805 3758 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2806 375C A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2807 3760 A9 80 95 B4			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  2808 3764 A9 3F 95 C4			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  2809 3768 E8				inx
  2810 3769 AD 4B 3C 95 94		mva FREQ :STACKORIGIN,x
  2811 376E AD 4C 3C 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2812 3773 AD 4D 3C 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2813 3778 AD 4E 3C 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2814 377D 20 2F 27			jsr @FDIV
  2815 3780 CA				dex
  2816 3781 B5 94			lda :STACKORIGIN,x
  2817 3783 8D 4B 3C			sta FREQ
  2818 3786 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2819 3788 8D 4C 3C			sta FREQ+1
  2820 378B B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2821 378D 8D 4D 3C			sta FREQ+2
  2822 3790 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2823 3792 8D 4E 3C			sta FREQ+3
  2824
  2825 				; optimize FAIL ('@FMUL', MIDFILES), line = 457
  2826
  2827 3795 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2828 3799 A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  2829 379D E8				inx
  2830 379E AD 4B 3C 95 94		mva FREQ :STACKORIGIN,x
  2831 37A3 AD 4C 3C 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2832 37A8 AD 4D 3C 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2833 37AD AD 4E 3C 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2834 37B2 E8				inx
  2835 37B3 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2836 37B7 A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2837 37BB A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  2838 37BF A9 40 95 C4			mva #$40 :STACKORIGIN+STACKWIDTH*3,x
  2839 37C3 20 78 26			jsr @FMUL
  2840 37C6 CA				dex
  2841 37C7 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  2842 37CB A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  2843 37CF 20 6D 28			jsr @I2F_m
  2844 37D2 20 2F 27			jsr @FDIV
  2845 37D5 CA				dex
  2846 37D6 20 98 24			jsr @FROUND
  2847 37D9 20 BE 27			jsr @F2I
  2848 37DC B5 94			lda :STACKORIGIN,x
  2849 37DE 8D 4F 3C			sta FDIV
  2850
  2851 				; optimize FAIL ('divmulINT.DIV', MIDFILES), line = 458
  2852
  2853 37E1 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2854 37E5 A9 87 95 A4			mva #$87 :STACKORIGIN+STACKWIDTH,x
  2855 37E9 A9 93 95 B4			mva #$93 :STACKORIGIN+STACKWIDTH*2,x
  2856 37ED A9 03 95 C4			mva #$03 :STACKORIGIN+STACKWIDTH*3,x
  2857 37F1 E8				inx
  2858 37F2 AD 47 3C 95 94		mva NTEMPO :STACKORIGIN,x
  2859 37F7 AD 48 3C 95 A4		mva NTEMPO+1 :STACKORIGIN+STACKWIDTH,x
  2860 37FC AD 49 3C 95 B4		mva NTEMPO+2 :STACKORIGIN+STACKWIDTH*2,x
  2861 3801 AD 4A 3C 95 C4		mva NTEMPO+3 :STACKORIGIN+STACKWIDTH*3,x
  2862 3806 20 BC 22			jsr divmulINT.DIV
  2863 3809 CA				dex
  2864 380A B5 94			lda :STACKORIGIN,x
  2865 380C 8D D9 3B			sta BPM
  2866 380F B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2867 3811 8D DA 3B			sta BPM+1
  2868 3814 CA				dex
  2869
  2870 				; optimize OK (MIDFILES), line = 460
  2871
  2872 3815 78				sei
  2873 3816 A9 98 8D 10 02		mva <INT_PLAY VTIMR1
  2874 381B A9 36 8D 11 02		mva >INT_PLAY VTIMR1+1
  2875 3820 A9 00			lda #$00
  2876 3822 A0 03			ldy #$03
  2877 3824 8D 08 D2			sta AUDCTL
  2878 3827 8D 01 D2			sta AUDC1
  2879 382A 8C 0F D2			sty SKCTL
  2880 382D 8D 08 D2			sta AUDCTL
  2881 3830 AD 4F 3C 8D 00 D2		mva FDIV AUDF1
  2882 3836 A5 10			lda irqens
  2883 3838 09 01			ora #$01
  2884 383A 85 10			sta irqens
  2885 383C 8D 0E D2			sta irqen
  2886 383F 8D 09 D2			sta stimer
  2887 3842 58				cli
  2888
  2889 				; ------------------------------------------------------------
  2890
  2891 = 3C47			NTEMPO	= DATAORIGIN+$01CF
  2892 = 3C4B			FREQ	= DATAORIGIN+$01D3
  2893 = 3C4F			FDIV	= DATAORIGIN+$01D7
  2894
  2895 = 3C47			@VarData	= NTEMPO
  2896 = 0009			@VarDataSize	= 9
  2897
  2898 3843			@exit
  2899 					.ifdef @new
  2900 					lda <@VarData
  2901 					sta :ztmp
  2902 					lda >@VarData
  2903 					ldy #@VarDataSize-1
  2904 					jmp @FreeMem
  2905 					els
  2906 3843 60				rts						; ret
  2907 					eif
  2908 				.endl
  2909
  2910 				; ------------------------------------------------------------
  2911 				; ------------------------------------------------------------
  2912 3844			@UnitInit
  2913
  2914 				; optimize OK (MIDFILES), line = 464
  2915
  2916 3844 A9 00			lda #$00
  2917 3846 8D DB 3B			sta OLDTIMERVEC
  2918 3849 8D DC 3B			sta OLDTIMERVEC+1
  2919
  2920 				; optimize OK (MIDFILES), line = 465
  2921
  2922 384C A9 80			lda #$80
  2923 384E 8D CF 3B			sta TICKDIV
  2924 3851 A9 01			lda #$01
  2925 3853 8D D0 3B			sta TICKDIV+1
  2926
  2927 				; optimize OK (MIDFILES), line = 466
  2928
  2929 3856 A9 04			lda #$04
  2930 3858 8D D5 3B			sta TACTNUM
  2931
  2932 				; optimize OK (MIDFILES), line = 467
  2933
  2934 385B 8D D6 3B			sta TACTDENUM
  2935
  2936 				; optimize OK (MIDFILES), line = 468
  2937
  2938 385E A9 18			lda #$18
  2939 3860 8D D7 3B			sta TICKS_PER_QNOTE
  2940
  2941 				; optimize OK (MIDFILES), line = 469
  2942
  2943 3863 A9 08			lda #$08
  2944 3865 8D D8 3B			sta TICKS_PER_32ND
  2945
  2946 				; optimize OK (MIDFILES), line = 470
  2947
  2948 3868 A9 20			lda #$20
  2949 386A 8D D1 3B			sta MS_PER_QNOTE
  2950 386D A9 A1			lda #$A1
  2951 386F 8D D2 3B			sta MS_PER_QNOTE+1
  2952 3872 A9 07			lda #$07
  2953 3874 8D D3 3B			sta MS_PER_QNOTE+2
  2954 3877 A9 00			lda #$00
  2955 3879 8D D4 3B			sta MS_PER_QNOTE+3
  2956
  2957 				; optimize OK (MIDFILES), line = 471
  2958
  2959 387C 85 DF			sta _TIMERSTATUS
  2960
  2961 387E AD 10 02			lda VTIMR1
  2962 3881 8D DB 3B			sta OLDTIMERVEC
  2963 3884 AD 11 02			lda VTIMR1+1
  2964 3887 8D DC 3B			sta OLDTIMERVEC+1
  2965
  2966 388A 60				rts
  2967
  2968 				; ------------------------------------------------------------
  2969
  2970 = 0002			FREQ_RATIO	= $02
  2971 = 0080			F_COUNTER	= $80
  2972 = 0040			F_TICK	= $40
  2973 = 3BC6			MIDDATA	= DATAORIGIN+$014E
  2974 = 3BC8			adr.MIDTRACKS	= [DATAORIGIN+$0150] .array [1]
  2975 388B			.var MIDTRACKS	= adr.MIDTRACKS .word
  2976 = 3BC9			FORMAT	= DATAORIGIN+$0151
  2977 = 3BCB			NTRACKS	= DATAORIGIN+$0153
  2978 = 3BCD			FPS	= DATAORIGIN+$0155
  2979 = 3BCE			FSD	= DATAORIGIN+$0156
  2980 = 3BCF			TICKDIV	= DATAORIGIN+$0157
  2981 = 3BD1			MS_PER_QNOTE	= DATAORIGIN+$0159
  2982 = 3BD5			TACTNUM	= DATAORIGIN+$015D
  2983 = 3BD6			TACTDENUM	= DATAORIGIN+$015E
  2984 = 3BD7			TICKS_PER_QNOTE	= DATAORIGIN+$015F
  2985 = 3BD8			TICKS_PER_32ND	= DATAORIGIN+$0160
  2986 = 3BD9			BPM	= DATAORIGIN+$0161
  2987 = 3BDB			OLDTIMERVEC	= DATAORIGIN+$0163
  2988 = 00DF			_TIMERSTATUS	= $DF
  2989 = 00F2			_SUBCNT	= $F2
  2990 = 00F3			TOTALTICKS	= $F3
  2991 = 6468544D		TAG_MTHD	= $6468544D
  2992 = 6B72544D		TAG_MTRK	= $6B72544D
  2993 = 3BDD			adr.BI	= [DATAORIGIN+$0165] .array [4]
  2994 388B			.var BI	= adr.BI .word
  2995 = 0600			adr.RBUF	= $0600
  2996 388B			.var RBUF	= adr.RBUF .word
  2997 = 00F7			TRACKDATA	= $F7
  2998
  2999 = 388B C8 3B		MIDTRACKS
  2999 = 388D DD 3B		BI
  2999 = 388F 00 06		RBUF
  2999 				.endl							; UNIT MIDFILES
  3000
  3001 3891			.local	RESET_MIDI					; PROCEDURE
  3002
  3003 				; optimize OK (MIDICar Player.pas), line = 25
  3004
  3005 3891 AD 75 3A			lda GM_RESET
  3006 3894 8D C0 3B			sta MIDI_FIFO.FIFO_SEND.DATA
  3007 3897 AD 76 3A			lda GM_RESET+1
  3008 389A 8D C1 3B			sta MIDI_FIFO.FIFO_SEND.DATA+1
  3009 389D A9 06			lda #$06
  3010 389F 8D C2 3B			sta MIDI_FIFO.FIFO_SEND.LEN
  3011 38A2 20 A7 2C			jsr MIDI_FIFO.FIFO_SEND
  3012 38A5 AD C3 3B 95 95		mva MIDI_FIFO.FIFO_SEND.RESULT :STACKORIGIN+1,x
  3013 38AA 20 EA 2C			jsr MIDI_FIFO.FIFO_FLUSH
  3014 38AD			@exit
  3015 					.ifdef @new
  3016 					lda <@VarData
  3017 					sta :ztmp
  3018 					lda >@VarData
  3019 					ldy #@VarDataSize-1
  3020 					jmp @FreeMem
  3021 					els
  3022 38AD 60				rts						; ret
  3023 					eif
  3024 				.endl
  3025 38AE			l_006D
  3026
  3027 				; optimize OK (MIDICar Player.pas), line = 33
  3028
  3029 38AE A9 00			lda #$00
  3030 38B0 8D 8B 38			sta MIDFILES.MIDTRACKS
  3031 38B3 A9 42			lda #$42
  3032 38B5 8D 8C 38			sta MIDFILES.MIDTRACKS+1
  3033
  3034 				; optimize OK (MIDICar Player.pas), line = 34
  3035
  3036 38B8 A9 00			lda #$00
  3037 38BA 8D C6 3B			sta MIDFILES.MIDDATA
  3038 38BD A9 43			lda #$43
  3039 38BF 8D C7 3B			sta MIDFILES.MIDDATA+1
  3040
  3041 				; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 36
  3042
  3043 38C2 20 99 2B			jsr SYSTEM.PARAMCOUNT
  3044 38C5 AD 96 3B			lda SYSTEM.PARAMCOUNT.RESULT
  3045 38C8 C9 01			cmp #$01
  3046 38CA D0 14			jne l_08F4
  3047 				@
  3048
  3049 				; optimize OK (MIDICar Player.pas), line = 37
  3050
  3051 38CC A9 01			lda #$01
  3052 38CE 20 A2 2B			jsr SYSTEM.PARAMSTR
  3053 38D1 AD B7 2B			lda SYSTEM.PARAMSTR.RESULT
  3054 38D4 8D 50 3C			sta FN
  3055 38D7 AD B8 2B			lda SYSTEM.PARAMSTR.RESULT+1
  3056 38DA 8D 51 3C			sta FN+1
  3057 38DD 4C EA 38			jmp l_0903
  3058 38E0			l_08F4
  3059
  3060 				; optimize OK (MIDICar Player.pas), line = 42
  3061
  3062 38E0 A9 49			lda #$49
  3063 38E2 8D 50 3C			sta FN
  3064 38E5 A9 1E			lda #$1E
  3065 38E7 8D 51 3C			sta FN+1
  3066 38EA			l_0903
  3067
  3068 				; optimize OK (MIDICar Player.pas), line = 45
  3069
  3070 38EA AD 50 3C			lda FN
  3071 38ED 8D F2 3B			sta MIDFILES.LOADMID.FN
  3072 38F0 AD 51 3C			lda FN+1
  3073 38F3 8D F3 3B			sta MIDFILES.LOADMID.FN+1
  3074 38F6 20 11 2E			jsr MIDFILES.LOADMID
  3075 38F9 AD F4 3B			lda MIDFILES.LOADMID.RESULT
  3076 38FC D0 05			jne l_0916
  3077 38FE A9 01			lda #$01
  3078 3900 4C 5C 3A			jmp @halt
  3079 3903			l_0916
  3080
  3081 				; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 50
  3082
  3083 3903 20 BD 2B			jsr MC6850.MC6850_RESET
  3084
  3085 				; optimize OK (MIDICar Player.pas), line = 51
  3086
  3087 3906 A9 96			lda #$96
  3088 3908 20 C3 2B			jsr MC6850.MC6850_INIT
  3089
  3090 				; optimize OK (MIDICar Player.pas), line = 56
  3091
  3092 390B A9 00			lda #$00
  3093 390D 85 F3			sta MIDFILES.TOTALTICKS
  3094 390F 85 F4			sta MIDFILES.TOTALTICKS+1
  3095 3911 85 F5			sta MIDFILES.TOTALTICKS+2
  3096 3913 85 F6			sta MIDFILES.TOTALTICKS+3
  3097
  3098 				; optimize OK (MIDICar Player.pas), line = 57
  3099
  3100 3915 A9 20			lda #$20
  3101 3917 8D 47 3C			sta MIDFILES.SETTEMPO.NTEMPO
  3102 391A A9 A1			lda #$A1
  3103 391C 8D 48 3C			sta MIDFILES.SETTEMPO.NTEMPO+1
  3104 391F A9 07			lda #$07
  3105 3921 8D 49 3C			sta MIDFILES.SETTEMPO.NTEMPO+2
  3106 3924 A9 00			lda #$00
  3107 3926 8D 4A 3C			sta MIDFILES.SETTEMPO.NTEMPO+3
  3108 3929 20 BE 36			jsr MIDFILES.SETTEMPO
  3109
  3110 				; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 58
  3111
  3112 392C 20 91 38			jsr RESET_MIDI
  3113
  3114 				; optimize FAIL ('@print', MIDICar Player.pas), line = 61
  3115
  3116 					@printSTRING #CODEORIGIN+$005A
  3116 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
  3116 392F A0 1E		 LDY> CODEORIGIN+$005A
  3116 3931 A9 5A		 LDA< CODEORIGIN+$005A
  3116 3933 20 A3 28		 JSR @PRINTSTRING
  3117
  3118 				; --- RepeatUntilProlog
  3119 3936			l_0929
  3120
  3121 				; optimize OK (MIDICar Player.pas), line = 64
  3122
  3123 3936 AD CB 3B			lda MIDFILES.NTRACKS
  3124 3939 8D 5A 3C			sta PLAYINGTRACKS
  3125
  3126 				; optimize OK (MIDICar Player.pas), line = 65
  3127
  3128 393C A9 00			lda #$00
  3129 393E 8D 54 3C			sta CURTRACKOFS
  3130
  3131 				; optimize OK (MIDICar Player.pas), line = 66
  3132
  3133 3941 A9 01			lda #$01
  3134 3943 8D 59 3C			sta CTRK
  3135
  3136 3946			l_093C
  3137 				; --- ForToDoCondition
  3138 3946 AD 59 3C			lda CTRK
  3139 3949 CD CB 3B			cmp MIDFILES.NTRACKS
  3140 394C 90 05			scc
  3141 394E F0 03 4C 2E 3A		jne l_0949
  3142
  3143 				; optimize OK (MIDICar Player.pas), line = 68
  3144
  3145 3953 AD 8B 38			lda MIDFILES.MIDTRACKS
  3146 3956 18 6D 54 3C			add CURTRACKOFS
  3147 395A 8D 52 3C			sta TRACK
  3148 395D AD 8C 38			lda MIDFILES.MIDTRACKS+1
  3149 3960 69 00			adc #$00
  3150 3962 8D 53 3C			sta TRACK+1
  3151
  3152 				; optimize OK (MIDICar Player.pas), line = 69
  3153
  3154 3965 AD 54 3C			lda CURTRACKOFS
  3155 3968 18 69 07			add #$07
  3156 396B 8D 54 3C			sta CURTRACKOFS
  3157
  3158 				; optimize OK (MIDICar Player.pas), line = 70
  3159
  3160 396E AC 52 3C 84 82 AC + 	mwy TRACK :bp2
  3161 3978 A0 05			ldy #$05
  3162 397A B1 82			lda (:bp2),y
  3163 397C F0 03 4C 20 3A		jne l_095F
  3164
  3165 				; optimize OK (MIDICar Player.pas), line = 72
  3166
  3167 3981 A0 02			ldy #$02
  3168 3983 B1 82			lda (:bp2),y
  3169 3985 8D 55 3C			sta TRACKTIME
  3170 3988 C8				iny
  3171 3989 B1 82			lda (:bp2),y
  3172 398B 8D 56 3C			sta TRACKTIME+1
  3173
  3174 				; optimize OK (MIDICar Player.pas), line = 73
  3175
  3176 398E				.LOCAL
  3177 398E A5 F6			lda MIDFILES.TOTALTICKS+3
  3178 3990 38 E9 00			sub #$00
  3179 3993 D0 1E			bne L4
  3180 3995 A5 F5			lda MIDFILES.TOTALTICKS+2
  3181 3997 C9 00			cmp #$00
  3182 3999 D0 0C			bne L1
  3183 399B A5 F4			lda MIDFILES.TOTALTICKS+1
  3184 399D CD 56 3C			cmp TRACKTIME+1
  3185 39A0 D0 05			bne L1
  3186 39A2 A5 F3			lda MIDFILES.TOTALTICKS
  3187 39A4 CD 55 3C			cmp TRACKTIME
  3188 39A7 F0 10		L1	beq L5
  3189 39A9 B0 04			bcs L3
  3190 39AB A9 FF			lda #$FF
  3191 39AD D0 0A			bne L5
  3192 39AF A9 01		L3	lda #$01
  3193 39B1 D0 06			bne L5
  3194 39B3 50 04		L4	bvc L5
  3195 39B5 49 FF			eor #$FF
  3196 39B7 09 01			ora #$01
  3197 39B9			L5
  3198 					.ENDL
  3199 39B9 30 62			jmi l_0976
  3200
  3201 				; optimize OK (MIDICar Player.pas), line = 75
  3202
  3203 39BB A5 DF			lda MIDFILES._TIMERSTATUS
  3204 39BD 09 80			ora #$80
  3205 39BF 85 DF			sta MIDFILES._TIMERSTATUS
  3206
  3207 				; optimize OK (MIDICar Player.pas), line = 77
  3208
  3209 39C1 A5 F3			lda MIDFILES.TOTALTICKS
  3210 39C3 38 ED 55 3C			sub TRACKTIME
  3211 39C7 8D 57 3C			sta DTM
  3212 39CA A5 F4			lda MIDFILES.TOTALTICKS+1
  3213 39CC ED 56 3C			sbc TRACKTIME+1
  3214 39CF 8D 58 3C			sta DTM+1
  3215
  3216 				; optimize FAIL ('MIDFILES.GETTRACKDATA', MIDICar Player.pas), line = 78
  3217
  3218 39D2 E8				inx
  3219 39D3 AD 52 3C 95 94		mva TRACK :STACKORIGIN,x
  3220 39D8 AD 53 3C 95 A4		mva TRACK+1 :STACKORIGIN+STACKWIDTH,x
  3221 39DD 20 25 33			jsr MIDFILES.GETTRACKDATA
  3222 39E0 AD 2B 3C			lda MIDFILES.GETTRACKDATA.RESULT
  3223 39E3 8D 55 3C			sta TRACKTIME
  3224 39E6 AD 2C 3C			lda MIDFILES.GETTRACKDATA.RESULT+1
  3225 39E9 8D 56 3C			sta TRACKTIME+1
  3226
  3227 				; optimize OK (MIDICar Player.pas), line = 79
  3228
  3229 39EC A5 F3			lda MIDFILES.TOTALTICKS
  3230 39EE 18 6D 55 3C			add TRACKTIME
  3231 39F2 85 9D			sta :STACKORIGIN+9
  3232 39F4 A5 F4			lda MIDFILES.TOTALTICKS+1
  3233 39F6 6D 56 3C			adc TRACKTIME+1
  3234 39F9 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3235 39FB AC 52 3C 84 82 AC + 	mwy TRACK :bp2
  3236 3A05 A0 02			ldy #$02
  3237 3A07 A5 9D			lda :STACKORIGIN+9
  3238 3A09 38 ED 57 3C			sub DTM
  3239 3A0D 91 82			sta (:bp2),y
  3240 3A0F C8				iny
  3241 3A10 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  3242 3A12 ED 58 3C			sbc DTM+1
  3243 3A15 91 82			sta (:bp2),y
  3244
  3245 				; optimize OK (MIDICar Player.pas), line = 81
  3246
  3247 3A17 A5 DF			lda MIDFILES._TIMERSTATUS
  3248 3A19 29 7F			and #$7F
  3249 3A1B 85 DF			sta MIDFILES._TIMERSTATUS
  3250 3A1D			l_0976
  3251 3A1D 4C 26 3A			jmp l_09B3
  3252 3A20			l_095F
  3253
  3254 				; optimize FAIL (0, MIDICar Player.pas), line = 86
  3255
  3256 3A20 CE 5A 3C			dec PLAYINGTRACKS
  3257 3A23 4C 26 3A			jmp c_093C					; continue
  3258 3A26			l_09B3
  3259
  3260 				; --- ForToDoEpilog
  3261 3A26			c_093C
  3262 3A26 EE 59 3C			inc CTRK
  3263 3A29 F0 03 4C 46 39		jne l_093C
  3264 3A2E			l_0949
  3265
  3266 				; optimize OK (MIDICar Player.pas), line = 103
  3267
  3268 3A2E AD 5A 3C			lda PLAYINGTRACKS
  3269 3A31 F0 0A			jeq l_0929x
  3270 3A33 AD FC 02			lda $02FC
  3271 3A36 C9 FF			cmp #$FF
  3272 3A38 D0 03 4C 36 39		jeq l_0929
  3273 3A3D			l_0929x
  3274
  3275 				; optimize FAIL ('@print', MIDICar Player.pas), line = 105
  3276
  3277 					@print #$9C
  3277 				 LDY# $9C\ JSR @PRINT
  3277 3A3D A0 9C		 LDY# $9C
  3277 3A3F 20 94 28		 JSR @PRINT
  3278
  3279 				; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 112
  3280
  3281 3A42 20 91 38			jsr RESET_MIDI
  3282
  3283 				; optimize OK (MIDICar Player.pas), line = 118
  3284
  3285 3A45 78				sei
  3286 3A46 AD DB 3B 8D 10 02		mva MIDFILES.OLDTIMERVEC VTIMR1
  3287 3A4C AD DC 3B 8D 11 02		mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
  3288 3A52 A5 10			lda irqens
  3289 3A54 29 FE			and #$fe
  3290 3A56 85 10			sta irqens
  3291 3A58 8D 0E D2			sta irqen
  3292 3A5B 58				cli
  3293
  3294 				; ------------------------------------------------------------
  3295
  3296 = 1E66			adr.GM_RESET	= CODEORIGIN+$0066
  3297 3A5C			.var GM_RESET	= adr.GM_RESET .word
  3298 = 3C50			FN	= DATAORIGIN+$01D8
  3299 = 3C52			TRACK	= DATAORIGIN+$01DA
  3300 = 3A78			TRACK.PTR	= DATAORIGIN+$0000
  3301 = 3A7A			TRACK.DELTATIME	= DATAORIGIN+$0002
  3302 = 3A7C			TRACK.SKIPDELTA	= DATAORIGIN+$0004
  3303 = 3A7D			TRACK.EOT	= DATAORIGIN+$0005
  3304 = 3A7E			TRACK._EVENT	= DATAORIGIN+$0006
  3305 = 3C54			CURTRACKOFS	= DATAORIGIN+$01DC
  3306 = 3C55			TRACKTIME	= DATAORIGIN+$01DD
  3307 = 3C57			DTM	= DATAORIGIN+$01DF
  3308 = 3C59			CTRK	= DATAORIGIN+$01E1
  3309 = 3C5A			PLAYINGTRACKS	= DATAORIGIN+$01E2
  3310 3A5C			@exit
  3311
  3312 3A5C A2 00		@halt	ldx #$00
  3313 3A5E 9A				txs
  3314 					.ifdef MAIN.@DEFINES.ROMOFF
  3315 3A5F EE 01 D3			inc portb
  3316 					.fi
  3317
  3318 3A62 A0 01			ldy #$01
  3319
  3320 3A64 60				rts
  3321
  3322 				; ------------------------------------------------------------
  3323
  3324 3A65 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  3325
  3326 				; ------------------------------------------------------------
  3327
  3328 3A75			.local	@DEFINES
  3329 3A75			ATARI
  3330 3A75			ROMOFF
  3331 				.endl
  3332
  3333 3A75			.local	@RESOURCE
  3334 				.endl
  3335
  3336 = 3A75 66 1E		GM_RESET
  3336 				.endl							; MAIN
  3337
  3338 				; ------------------------------------------------------------
  3339 				; ------------------------------------------------------------
  3340
  3341 				.macro	UNITINITIALIZATION
  3342 				
  3343 					.ifdef MAIN.SYSTEM.@UnitInit
  3344 					jsr MAIN.SYSTEM.@UnitInit
  3345 					.fi
  3346 				
  3347 					.ifdef MAIN.MC6850.@UnitInit
  3348 					jsr MAIN.MC6850.@UnitInit
  3349 					.fi
  3350 				
  3351 					.ifdef MAIN.DOS.@UnitInit
  3352 					jsr MAIN.DOS.@UnitInit
  3353 					.fi
  3354 				
  3355 					.ifdef MAIN.STRUTILS.@UnitInit
  3356 					jsr MAIN.STRUTILS.@UnitInit
  3357 					.fi
  3358 				
  3359 					.ifdef MAIN.SYSUTILS.@UnitInit
  3360 					jsr MAIN.SYSUTILS.@UnitInit
  3361 					.fi
  3362 				
  3363 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  3364 					jsr MAIN.MIDI_FIFO.@UnitInit
  3365 					.fi
  3366 				
  3367 					.ifdef MAIN.MIDFILES.@UnitInit
  3368 					jsr MAIN.MIDFILES.@UnitInit
  3369 					.fi
  3370 				.endm
  3371
  3372 				; ------------------------------------------------------------
  3373
  3374 					ift .SIZEOF(MAIN.SYSTEM) > 0
  3375 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  3375 				SYSTEM: $2A1D..$2BBC
  3376 					eif
  3377
  3378 					ift .SIZEOF(MAIN.MC6850) > 0
  3379 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  3379 				MC6850: $2BBD..$2BDA
  3380 					eif
  3381
  3382 					ift .SIZEOF(MAIN.DOS) > 0
  3383 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  3384 					eif
  3385
  3386 					ift .SIZEOF(MAIN.STRUTILS) > 0
  3387 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  3388 					eif
  3389
  3390 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  3391 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  3392 					eif
  3393
  3394 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  3395 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  3395 				MIDI_FIFO: $2BDB..$2D0E
  3396 					eif
  3397
  3398 					ift .SIZEOF(MAIN.MIDFILES) > 0
  3399 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  3399 				MIDFILES: $2D0F..$3890
  3400 					eif
  3401
  3402 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  3402 				CODE: $1E00..$3A74
  3403
  3404 				; ------------------------------------------------------------
  3405
  3406 3A77				.align $0004
  3407
  3408 3A78			DATAORIGIN
  3409 3A78-3A7D> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  3410
  3411 = 0006			VARINITSIZE	= *-DATAORIGIN
  3412 = 01E3			VARDATASIZE	= 483
  3413
  3414 = 3C5B			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  3415
  3416 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  3416 				DATA: $3A78..$3C5B
  3417
  3418 02E0-02E1> 76 29			run START
  3419
  3420 				; ------------------------------------------------------------
  3421
  3422 				.macro	STATICDATA
  3423 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $13 $4E $6F  $74 $20 $65 $6E $6F $75 $67 $68
  3424 				.by  $74 $20 $6D $65 $6D $6F $72 $79  $2E $00 $0A $4F $70 $65 $6E $20  $66 $69 $6C $65 $20 $00 $0B $49
  3425 				.by  $2F $4F $20 $45 $72 $72 $6F $72  $20 $23 $00 $07 $54 $72 $61 $63  $6B $3A $20 $00 $03 $2E $2E $2E
  3426 				.by  $00 $0F $44 $32 $3A $53 $45 $4C  $46 $54 $45 $53 $54 $2E $4D $49  $44 $00 $0A $50 $6C $61 $79 $69
  3427 				.by  $6E $67 $2E $2E $2E $00 $F0 $7E  $7F $09 $01 $F7
  3428 				.endm
  3429
  3430 					end
