mads 2.1.6
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 8000			CODEORIGIN	= $8000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				.local	RESOURCE
   105 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1142 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 8075				RCDATA 'resources/screen_addresses.obj' SCREEN_ADRSES 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0020			len = .filesize('resources/screen_addresses.obj')-0
    28 8075				org main.SCREEN_ADRSES
    30 3B40-3B5F> 18 38 40 38 + 	ins 'resources/screen_addresses.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_ADRSES,'..',*-1," 'resources/screen_addresses.obj'"
    32 				$R RCDATA  $3B40..$3B5F 'resources/screen_addresses.obj'
Source: MIDICar Player.a65
   110 3B60				RCDATA 'resources/font_blk.fnt' CHARS_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('resources/font_blk.fnt')-0
    28 3B60				org main.CHARS_ADDR
    30 3000-33FF> 00 00 00 00 + 	ins 'resources/font_blk.fnt',0
    32 					.print '$R RCDATA  ',main.CHARS_ADDR,'..',*-1," 'resources/font_blk.fnt'"
    32 				$R RCDATA  $3000..$33FF 'resources/font_blk.fnt'
Source: MIDICar Player.a65
   111 3400				RCASM 'resources/dlist.asm' DLIST_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 3400				org RESORIGIN
     4 = 004F			len = .sizeof(_DLIST_ADDR)
     6 				mcpy	ift main.DLIST_ADDR+len >= $bc20
    11 8075-80E4> 20 41 80		jsr sys.off
    13 8078 A9 96 85 88 A9 80 +  MWA #DATA EDX
    13 8080 A9 B1 85 8C A9 3F +  MWA #MAIN.DLIST_ADDR ECX
    13 8088 A9 4F 85 84 A9 00 +  MWA #LEN EAX
    13 8090 20 00 80		 JSR RESOURCE.MEMCPY
    15 8093 4C 65 80			jmp sys.on
    16 8096			data
Source: dlist.inc
     1 = 0000			DL_BLANK1 = 0; // 1 blank line
     2 = 0010			DL_BLANK2 = %00010000; // 2 blank lines
     3 = 0020			DL_BLANK3 = %00100000; // 3 blank lines
     4 = 0030			DL_BLANK4 = %00110000; // 4 blank lines
     5 = 0040			DL_BLANK5 = %01000000; // 5 blank lines
     6 = 0050			DL_BLANK6 = %01010000; // 6 blank lines
     7 = 0060			DL_BLANK7 = %01100000; // 7 blank lines
     8 = 0070			DL_BLANK8 = %01110000; // 8 blank lines
    10 = 0080			DL_DLI = %10000000; // Order to run DLI
    11 = 0040			DL_LMS = %01000000; // Order to set new memory address
    12 = 0020			DL_VSCROLL = %00100000; // Turn on vertical scroll on this line
    13 = 0010			DL_HSCROLL = %00010000; // Turn on horizontal scroll on this line
    15 = 0002			DL_MODE_40x24T2 = 2; // Antic Modes
    16 = 0004			DL_MODE_40x24T5 = 4;
    17 = 0005			DL_MODE_40x12T5 = 5;
    18 = 0006			DL_MODE_20x24T5 = 6;
    19 = 0007			DL_MODE_20x12T5 = 7;
    20 = 0008			DL_MODE_40x24G4 = 8;
    21 = 0009			DL_MODE_80x48G2 = 9;
    22 = 000A			DL_MODE_80x48G4 = $A;
    23 = 000B			DL_MODE_160x96G2 = $B;
    24 = 000C			DL_MODE_160x192G2 = $C;
    25 = 000D			DL_MODE_160x96G4 = $D;
    26 = 000E			DL_MODE_160x192G4 = $E;
    27 = 000F			DL_MODE_320x192G2 = $F;
    29 = 0001			DL_JMP = %00000001; // Order to jump
    30 = 0041			DL_JVB = %01000001; // Jump to begining
     3 3FB1			dl_start
     4 3FB1 70 70		    :2  dta DL_BLANK8
     6 3FB3 4F 00 34		        dta DL_MODE_320x192G2 + DL_LMS, A(MAIN.SCREEN_HEAD)
     7 3FB6 0F 0F 0F 0F 0F 0F +     :18 dta DL_MODE_320x192G2
     9 3FC8 00			        dta DL_BLANK1
    11 3FC9 42 E8 37 00		        dta DL_MODE_40x24T2 + DL_LMS, A(MAIN.SCREEN_WORK), DL_BLANK1
    12 3FCD 02 00 02 00 02 00 +     :17 dta DL_MODE_40x24T2, DL_BLANK1
    14 3FEF 47 B8 3A 00		        dta DL_MODE_20x12T5 + DL_LMS, A(MAIN.SCREEN_TIME), DL_BLANK1
    15 3FF3 02			        dta DL_MODE_40x24T2
    17 3FF4 00			        dta DL_BLANK1
    18 3FF5 4F F8 36		        dta DL_MODE_320x192G2 + DL_LMS, A(MAIN.SCREEN_FOOT)
    19 3FF8 0F 0F 0F 0F 0F	    :5  dta DL_MODE_320x192G2
    21 3FFD 41 B1 3F		        dta DL_JVB, A(dl_start)
    23 					.print '$R RCASM   ',main.DLIST_ADDR,'..',main.DLIST_ADDR+len-1," 'resources/dlist.asm'"
    23 				$R RCASM   $3FB1..$3FFF 'resources/dlist.asm'
    25 02E2-02E3> 75 80			ini mcpy
Source: MIDICar Player.a65
   112 80E5				RCDATA 'resources/graph.obj' SCREEN_HEAD 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 03E8			len = .filesize('resources/graph.obj')-0
    28 80E5				org main.SCREEN_HEAD
    30 3400-37E7> 07 FF FF FF + 	ins 'resources/graph.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_HEAD,'..',*-1," 'resources/graph.obj'"
    32 				$R RCDATA  $3400..$37E7 'resources/graph.obj'
Source: MIDICar Player.a65
   113 37E8				RCDATA 'resources/uvmeter.obj' UVMETER_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0040			len = .filesize('resources/uvmeter.obj')-0
    28 37E8				org main.UVMETER_ADDR
    30 3B00-3B3F> 41 41 41 41 + 	ins 'resources/uvmeter.obj',0
    32 					.print '$R RCDATA  ',main.UVMETER_ADDR,'..',*-1," 'resources/uvmeter.obj'"
    32 				$R RCDATA  $3B00..$3B3F 'resources/uvmeter.obj'
Source: MIDICar Player.a65
   114 3B40				RCDATA 'resources/help.obj' HELPSCR_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 02D0			len = .filesize('resources/help.obj')-0
    28 3B40				org main.HELPSCR_ADDR
    30 3B60-3E2F> 4A 4E A3 AF + 	ins 'resources/help.obj',0
    32 					.print '$R RCDATA  ',main.HELPSCR_ADDR,'..',*-1," 'resources/help.obj'"
    32 				$R RCDATA  $3B60..$3E2F 'resources/help.obj'
Source: MIDICar Player.a65
   115 				.endl
   116
   117 				; ------------------------------------------------------------
   118
   119 3E30				org CODEORIGIN
   120
   121 8000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 8000-A67C> 00 00 05 FB + .by  $00 $00 $05 $FB $00 $FC $00 $FD  $00 $04 $2D $65 $6D $1A $00 $02  $2B $22 $00 $02 $45 $3A $00 $02
     2 8018 00 00 00 02 7E 7F + .by  $00 $00 $00 $02 $7E $7F $00 $02  $5C $5D $00 $02 $5E $5F $00 $05  $3B $00 $FC $00 $FD $00 $09 $4E
     3 8030 B0 EC E1 F9 E9 EE + .by  $B0 $EC $E1 $F9 $E9 $EE $E7 $CE  $00 $09 $4E $AE $EF $80 $F3 $EF  $EE $E7 $CE $00 $05 $FB $00 $3C
     4 8048 00 FD 00 09 4E 80 + .by  $00 $FD $00 $09 $4E $80 $B0 $E1  $F5 $F3 $E5 $80 $CE $00 $05 $FB  $00 $FC $00 $3D $00 $09 $4E $B3
     5 8060 F4 EF F0 F0 E5 E4 + .by  $F4 $EF $F0 $F0 $E5 $E4 $CE $00  $09 $4E $AC $EF $E1 $E4 $E9 $EE  $E7 $80 $00 $13 $4E $B2 $E5 $E1
     6 8078 E4 E9 EE E7 80 E4 + .by  $E4 $E9 $EE $E7 $80 $E4 $E9 $F2  $E5 $E3 $F4 $EF $F2 $F9 $80 $00  $14 $4E $B5 $EE $F3 $F5 $F0 $F0
     7 8090 EF F2 F4 E5 E4 80 + .by  $EF $F2 $F4 $E5 $E4 $80 $E6 $EF  $F2 $ED $E1 $F4 $CE $00 $14 $4E  $AE $EF $F4 $80 $E5 $EE $EF $F5
     8 80A8 E7 E8 F4 80 ED E5 + .by  $E7 $E8 $F4 $80 $ED $E5 $ED $EF  $F2 $F9 $CE $00 $11 $4E $AE $EF  $F4 $80 $E1 $80 $AD $A9 $A4 $A9
     9 80C0 80 E6 E9 EC E5 CE + .by  $80 $E6 $E9 $EC $E5 $CE $00 $0C  $4E $A9 $8F $AF $80 $A5 $F2 $F2  $EF $F2 $80 $83 $00 $0B $4E $A4
    10 80D8 E9 F2 E5 E3 F4 EF + .by  $E9 $F2 $E5 $E3 $F4 $EF $F2 $F9  $CE $00 $02 $44 $3A $00 $08 $4E  $B3 $F4 $E1 $F4 $F5 $F3 $CE $00
    11 80F0 09 4E A3 EF F5 EE + .by  $09 $4E $A3 $EF $F5 $EE $F4 $E5  $F2 $CE $00 $03 $2A $2E $2A $00  $A8 $00 $0A $08 $0A $A8 $0A $00
    12 8108 02 00 17 80 1B 80 + .by  $02 $00 $17 $80 $1B $80 $1F $80  $23 $80
Source: MIDICar Player.a65
   122
   123 				; ------------------------------------------------------------
   124
   125 8112			RTLIB
   126 8112				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   127
   128 				.print 'ZPAGE: ',zpage,'..',zpend-1
   128 				ZPAGE: $0080..$00D3
   129
   130 				.print 'RTLIB: ',RTLIB,'..',*-1
   130 				RTLIB: $8112..$87CE
   131
   132 				; ------------------------------------------------------------
   133
   134 87CF			START
   135 87CF BA				tsx
   136 87D0 8E 5B A6			stx MAIN.@halt+1
   137
   138 					.ifdef fmulinit
   139 					fmulinit
   140 					.fi
   141
   142 = 0099			VLEN	= VARDATASIZE-VARINITSIZE
   143 = 0406			VADR	= DATAORIGIN+VARINITSIZE
   144
   145 					ift VADR > $BFFF
   146 					ert 'Invalid memory address range ',VADR
   147 					eli (VLEN>0) && (VLEN<=256)
   148 87D3 A2 67			ldx #256-VLEN
   149 87D5 A9 00			lda #$00
   150 87D7 9D 9F 03 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   151 					eli VLEN>256
   152 					@fill #VADR #VLEN #$00
   153 					eif
   154
   155 				.ifdef :psptr
   156 					mwa #PROGRAMSTACK :psptr
   157 				.fi
   158
   159 					.ifdef MAIN.@DEFINES.ROMOFF
   160 87DD				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 87DD			.local	rominit
     5
     6 87DD 78			        sei
     7 87DE A9 00		        lda #%00000000
     8 87E0 8D 0E D4		        sta NMIEN       ;$D40E
     9 87E3 A9 FE		        lda #%11111110
    10 87E5 8D 01 D3		        sta PORTB       ;$D301
    11
    12 87E8 A2 03			ldx #3
    13 87EA A0 00			ldy #0
    14 87EC EE 01 D3		mv	inc portb
    15 87EF B9 00 E0		afnt0	lda $e000,y
    16 87F2 CE 01 D3			dec portb
    17 87F5 99 00 E0		afnt1	sta $e000,y
    18 87F8 C8				iny
    19 87F9 D0 F1			bne mv
    20 87FB EE F1 87			inc afnt0+2
    21 87FE EE F7 87			inc afnt1+2
    22 8801 CA				dex
    23 8802 10 E8			bpl mv
    24
    25 8804 A2 21		        ldx #<nmiint
    26 8806 A0 88		        ldy #>nmiint
    27 8808 8E FA FF		        stx NMIVEC      ;$FFFA
    28 880B 8C FB FF		        sty NMIVEC+1
    29
    30 880E A2 2B		        ldx #<irqint
    31 8810 A0 88		        ldy #>irqint
    32 8812 8E FE FF		        stx IRQVEC      ;$FFFE
    33 8815 8C FF FF		        sty IRQVEC+1
    34
    35 8818 A9 40		        lda #%01000000
    36 881A 8D 0E D4		        sta NMIEN       ;$D40E
    37 881D 58			        cli
    38
    39 881E 4C 4C 88			jmp skp
    40
    41
    42
    43 8821 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 8824 10 03		        spl
    45 8826 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 8829 38			        sec
    48 882A 24			        .byte $24        ;BIT $18
    49
    50 882B 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 882C EE 01 D3		        inc PORTB       ;$D301
    55
    56 882F 48			        pha
    57 8830 8A			        txa
    58 8831 48			        pha
    59 8832 BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 8833 A9 88		        lda #>iret      ;adres procedury iret
    64 8835 48			        pha
    65 8836 A9 45		        lda #<iret
    66 8838 48			        pha
    67 8839 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 883C 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 883D 90 03		        scc
    73 883F 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 8842 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 8845 68			iret	pla
    77 8846 AA				tax
    78 8847 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 8848 CE 01 D3		        dec PORTB       ;$D301
    83 884B 40			        rti
    84
    85 884C			skp
    86
    87 				.endl
    88
   161 					.fi
   162
   163 884C A2 0F			ldx #$0F					; DOS II+/D ParamStr
   164 884E BD 40 03 9D 63 A6 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   165
   166 8857 E8				inx						; X = 0
   167 8858 86 80			stx bp						; BP = 0
   168
   169 885A 8E 0F D2			stx skctl					; reset POKEY
   170 885D A9 03			lda #3
   171 885F 8D 0F D2			sta skctl
   172
   173 8862 CA				dex						; X = 255
   174
   175 8863				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
    19 8863 20 90 92			jsr MAIN.MIDFILES.@UnitInit
   176
   177 8866			.local	MAIN						; PROCEDURE
   178
   179 8866 4C 06 A1			jmp l_0107
   180
   181 				; ------------------------------------------------------------
   182
   183 8869			.local	SYSTEM						; UNIT
   184
   185 8869			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   186
   187 				; ------------------------------------------------------------
   188
   189 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   190 				; as Pointer
   191 8869 B5 94			lda :STACKORIGIN,x
   192 886B 85 88			sta A
   193 886D B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   194 886F 85 89			sta A+1
   195 8871 CA				dex
   196 8872 10 03 4C 7C 88		jmi @main
   197
   198 				; ------------------------------------------------------------
   199
   200 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   201 				; as Pointer
   202 8877 B5 94			lda :STACKORIGIN,x
   203 8879 85 8C			sta VALUE
   204 887B CA				dex
   205 887C			@main
   206
   207 				; -------------------  ASM Block 00000018  -------------------
   208
   209 887C A0 00			ldy #0
   210 887E A5 8C 91 88			mva value (:edx),y
   211
   212 				; ------------------------------------------------------------
   213
   214 = 0088			A	= :EDX
   215 = 008C			VALUE	= :ECX
   216 8882			@exit
   217 					.ifdef @new
   218 					lda <@VarData
   219 					sta :ztmp
   220 					lda >@VarData
   221 					ldy #@VarDataSize-1
   222 					jmp @FreeMem
   223 					els
   224 8882 60				rts						; ret
   225 					eif
   226 				.endl
   227
   228 8883			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   229
   230 				; ------------------------------------------------------------
   231
   232 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   233 				; as Pointer
   234 8883 B5 94			lda :STACKORIGIN,x
   235 8885 85 88			sta A
   236 8887 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   237 8889 85 89			sta A+1
   238 888B CA				dex
   239 888C 30 09			jmi @main
   240
   241 				; ------------------------------------------------------------
   242
   243 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   244 				; as Pointer
   245 888E B5 94			lda :STACKORIGIN,x
   246 8890 85 8C			sta VALUE
   247 8892 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   248 8894 85 8D			sta VALUE+1
   249 8896 CA				dex
   250 8897			@main
   251
   252 				; -------------------  ASM Block 00000019  -------------------
   253
   254 8897 A0 00			ldy #0
   255 8899 A5 8C 91 88			mva value (:edx),y
   256 889D C8				iny
   257 889E A5 8D 91 88			mva value+1 (:edx),y
   258
   259 				; ------------------------------------------------------------
   260
   261 = 0088			A	= :EDX
   262 = 008C			VALUE	= :ECX
   263 88A2			@exit
   264 					.ifdef @new
   265 					lda <@VarData
   266 					sta :ztmp
   267 					lda >@VarData
   268 					ldy #@VarDataSize-1
   269 					jmp @FreeMem
   270 					els
   271 88A2 60				rts						; ret
   272 					eif
   273 				.endl
   274
   275 88A3			.local	FILLCHAR_0151					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   276
   277 					.MACRO m@INLINE
   278 				
   279 				; -------------------  ASM Block 00000021  -------------------
   280 				
   281 					jsr @fill
   282 				
   283 					.ENDM
   284
   285 				; ------------------------------------------------------------
   286
   287 = 0088			A	= :EDX
   288 = 008C			COUNT	= :ECX
   289 = 0084			VALUE	= :EAX
   290 88A3			@exit
   291 				.endl
   292
   293 88A3			.local	FILLCHAR_0152					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   294
   295 					.MACRO m@INLINE
   296 				
   297 				; -------------------  ASM Block 00000024  -------------------
   298 				
   299 					jsr @fill
   300 				
   301 					.ENDM
   302
   303 				; ------------------------------------------------------------
   304
   305 = 0088			X	= :EDX
   306 = 008C			COUNT	= :ECX
   307 = 0084			VALUE	= :EAX
   308 88A3			@exit
   309 				.endl
   310
   311 88A3			.local	MOVE_0153					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   312
   313 					.MACRO m@INLINE
   314 				
   315 				; -------------------  ASM Block 00000028  -------------------
   316 				
   317 					jsr @move
   318 				
   319 					.ENDM
   320
   321 				; ------------------------------------------------------------
   322
   323 = 0088			SOURCE	= :EDX
   324 = 008C			DEST	= :ECX
   325 = 0084			COUNT	= :EAX
   326 88A3			@exit
   327 				.endl
   328
   329 88A3			.local	RANDOM_0172					; FUNCTION | ASSEMBLER | OVERLOAD
   330 88A3 8D 0B 04			sta RANGE
   331
   332 				; -------------------  ASM Block 00000042  -------------------
   333
   334
   335 				;BYTE FUNC Rand(BYTE range)
   336 				; returns random number between 0 and
   337 				; range-1.  If range=0, then a random
   338 				; number between 0 and 255 is returned
   339
   340 88A6 AC 0A D2		  ldy $d20a   ; RANDOM
   341
   342 88A9 AD 0B 04		  lda range
   343 88AC F0 08		  beq stop
   344
   345 88AE 85 8C		  sta :ecx
   346 88B0 84 84		  sty :eax
   347
   348 88B2 20 C2 82		  jsr imulCL
   349 88B5 A8			  tay
   350
   351 88B6 8C 0C 04		stop  sty Result
   352
   353
   354 88B9			@exit
   355
   356 				; ------------------------------------------------------------
   357
   358 = 040B			RANGE	= DATAORIGIN+$000B
   359 = 040C			RESULT	= DATAORIGIN+$000C
   360
   361 = 040B			@VarData	= RANGE
   362 = 0001			@VarDataSize	= 1
   363
   364 88B9 60				rts						; ret
   365 				.endl
   366
   367 				; ------------------------------------------------------------
   368
   369 = 0101			__PORTB_BANKS	= $0101
   370 = 0648			M_PI_2	= $0648
   371 = 0192			D_PI_2	= $0192
   372 = 0004			D_PI_180	= $04
   373 = 0000			MGTIA	= $00
   374 = 0080			MVBXE	= $80
   375 = 0000			VBXE_XDLADR	= $00
   376 = 00E0			VBXE_BCBTMP	= $E0
   377 = 0100			VBXE_BCBADR	= $0100
   378 = 1000			VBXE_MAPADR	= $1000
   379 = 1000			VBXE_CHBASE	= $1000
   380 = 5000			VBXE_OVRADR	= $5000
   381 = B000			VBXE_WINDOW	= $B000
   382 = 0000			IDLI	= $00
   383 = 0001			IVBL	= $01
   384 = 0002			ITIM1	= $02
   385 = 0003			ITIM2	= $03
   386 = 0004			ITIM4	= $04
   387 = 00FE			CH_DELCHR	= $FE
   388 = 009B			CH_ENTER	= $9B
   389 = 001B			CH_ESC	= $1B
   390 = 001C			CH_CURS_UP	= $1C
   391 = 001D			CH_CURS_DOWN	= $1D
   392 = 001E			CH_CURS_LEFT	= $1E
   393 = 001F			CH_CURS_RIGHT	= $1F
   394 = 007F			CH_TAB	= $7F
   395 = 009B			CH_EOL	= $9B
   396 = 007D			CH_CLR	= $7D
   397 = 00FD			CH_BELL	= $FD
   398 = 007E			CH_DEL	= $7E
   399 = 009C			CH_DELLINE	= $9C
   400 = 009D			CH_INSLINE	= $9D
   401 = 0000			PAL_PMCOLOR0	= $00
   402 = 0001			PAL_PMCOLOR1	= $01
   403 = 0002			PAL_PMCOLOR2	= $02
   404 = 0003			PAL_PMCOLOR3	= $03
   405 = 0004			PAL_COLOR0	= $04
   406 = 0005			PAL_COLOR1	= $05
   407 = 0006			PAL_COLOR2	= $06
   408 = 0007			PAL_COLOR3	= $07
   409 = 0008			PAL_COLBAK	= $08
   410 = 0000			COLOR_BLACK	= $00
   411 = 000E			COLOR_WHITE	= $0E
   412 = 0032			COLOR_RED	= $32
   413 = 0096			COLOR_CYAN	= $96
   414 = 0068			COLOR_VIOLET	= $68
   415 = 00C4			COLOR_GREEN	= $C4
   416 = 0074			COLOR_BLUE	= $74
   417 = 00EE			COLOR_YELLOW	= $EE
   418 = 0028			COLOR_ORANGE	= $28
   419 = 00E4			COLOR_BROWN	= $E4
   420 = 003C			COLOR_LIGHTRED	= $3C
   421 = 0004			COLOR_GRAY1	= $04
   422 = 0006			COLOR_GRAY2	= $06
   423 = 000A			COLOR_GRAY3	= $0A
   424 = 00CC			COLOR_LIGHTGREEN	= $CC
   425 = 007C			COLOR_LIGHTBLUE	= $7C
   426 = 0004			FMOPENREAD	= $04
   427 = 0008			FMOPENWRITE	= $08
   428 = 0009			FMOPENAPPEND	= $09
   429 = 000C			FMOPENREADWRITE	= $0C
   430 = 0400			SCREENWIDTH	= DATAORIGIN+$0000
   431 = 0402			SCREENHEIGHT	= DATAORIGIN+$0002
   432 = 0404			DATESEPARATOR	= DATAORIGIN+$0004
   433 = D20A			RND	= $D20A
   434 = 02C0			adr.PALETTE	= $02C0
   435 88BA			.var PALETTE	= adr.PALETTE .word
   436 = D012			adr.HPALETTE	= $D012
   437 88BA			.var HPALETTE	= adr.HPALETTE .word
   438 = 0405			FILEMODE	= DATAORIGIN+$0005
   439 = 0406			GRAPHMODE	= DATAORIGIN+$0006
   440 = 0407			IORESULT	= DATAORIGIN+$0007
   441 = 0408			EOLN	= DATAORIGIN+$0008
   442 = 0409			RNDSEED	= DATAORIGIN+$0009
   443
   444 = 88BA C0 02		PALETTE
   444 = 88BC 12 D0		HPALETTE
   444 				.endl							; UNIT SYSTEM
   445
   446 				; ------------------------------------------------------------
   447
   448 88BE			.local	MC6850						; UNIT
   449
   450 88BE			.local	MC6850_INIT					; PROCEDURE | ASSEMBLER | KEEP
   451 88BE 8D 0D 04			sta SETUP
   452
   453 				; -------------------  ASM Block 00000052  -------------------
   454
   455 88C1 AD 0D 04		    lda setup
   456 88C4 8D 00 D5		    sta MCBaseState:$d500
   457
   458 				; ------------------------------------------------------------
   459
   460 = 040D			SETUP	= DATAORIGIN+$000D
   461
   462 = 040D			@VarData	= SETUP
   463 = 0001			@VarDataSize	= 1
   464
   465 88C7			@exit
   466 					.ifdef @new
   467 					lda <@VarData
   468 					sta :ztmp
   469 					lda >@VarData
   470 					ldy #@VarDataSize-1
   471 					jmp @FreeMem
   472 					els
   473 88C7 60				rts						; ret
   474 					eif
   475 				.endl
   476
   477 88C8			.local	MC6850_SEND2					; PROCEDURE | ASSEMBLER | KEEP
   478
   479 				; -------------------  ASM Block 00000053  -------------------
   480
   481 88C8			wait:
   482 88C8 AD 00 D5		    lda MCBaseState:$d500
   483 88CB 29 02		    and #TDRE
   484 88CD D0 F9		    bne wait
   485
   486 88CF A5 FF		    lda MC_Byte
   487 88D1 8D 00 D5		    sta MCBaseBuf:$d500
   488
   489 88D4			@exit
   490 					.ifdef @new
   491 					lda <@VarData
   492 					sta :ztmp
   493 					lda >@VarData
   494 					ldy #@VarDataSize-1
   495 					jmp @FreeMem
   496 					els
   497 88D4 60				rts						; ret
   498 					eif
   499 				.endl
   500
   501 				; ------------------------------------------------------------
   502
   503 = 0001			CR0	= $01
   504 = 0002			CR1	= $02
   505 = 0004			CR2	= $04
   506 = 0008			CR3	= $08
   507 = 0010			CR4	= $10
   508 = 0020			CR5	= $20
   509 = 0040			CR6	= $40
   510 = 0080			CR7	= $80
   511 = 0000			CD_1	= $00
   512 = 0001			CD_16	= $01
   513 = 0002			CD_64	= $02
   514 = 0003			MASTERRESET	= $03
   515 = 0000			WS_7BITS	= $00
   516 = 0010			WS_8BITS	= $10
   517 = 0000			WS_2BITSTOP	= $00
   518 = 0008			WS_1BITSTOP	= $08
   519 = 0000			WS_EVENPARITY	= $00
   520 = 0004			WS_ODDPARITY	= $04
   521 = 0000			TC_RTSLOW_NOTIRQ	= $00
   522 = 0020			TC_RTSLOW_TIRQ	= $20
   523 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   524 = 0060			TC_BREAKLEVEL	= $60
   525 = 0000			NOIRQ_RECEIVE	= $00
   526 = 0080			IRQ_RECEIVE	= $80
   527 = 0001			RDRF	= $01
   528 = 0002			TDRE	= $02
   529 = 0004			DCD	= $04
   530 = 0008			CTS	= $08
   531 = 0010			FE	= $10
   532 = 0020			OVRN	= $20
   533 = 0040			PE	= $40
   534 = 0080			IRQ	= $80
   535 = 00FF			MC_BYTE	= $FF
   536
   537 				.endl							; UNIT MC6850
   538
   539 				; ------------------------------------------------------------
   540
   541 88D5			.local	MIDI_FIFO					; UNIT
   542
   543 88D5			.local	FIFO_RESET					; PROCEDURE
   544
   545 				; optimize OK (MIDI_FIFO), line = 30
   546
   547 88D5 A9 00			lda #$00
   548 88D7 85 FD			sta FIFO_HEAD
   549
   550 				; optimize OK (MIDI_FIFO), line = 31
   551
   552 88D9 85 FE			sta FIFO_TAIL
   553 88DB			@exit
   554 					.ifdef @new
   555 					lda <@VarData
   556 					sta :ztmp
   557 					lda >@VarData
   558 					ldy #@VarDataSize-1
   559 					jmp @FreeMem
   560 					els
   561 88DB 60				rts						; ret
   562 					eif
   563 				.endl
   564
   565 88DC			.local	FIFO_PUSHDIRECT2MC6850				; PROCEDURE | ASSEMBLER
   566
   567 				; -------------------  ASM Block 00000054  -------------------
   568
   569 88DC AD 00 D5		  lda MCBaseState:$d500 // MC6850.MC6850_CNTRREG
   570 88DF 29 02		  and #MC6850.TDRE
   571 88E1 F0 0E		  beq exitPush
   572
   573 88E3 A4 FE		  ldy FIFO_Tail
   574 88E5 C4 FD		  cpy FIFO_Head
   575 88E7 F0 08		  beq exitPush
   576
   577 88E9 B9 00 06		  lda FIFO_ADDR,y
   578 88EC 8D 00 D5		  sta MCBaseBuf:$d500  //MC6850.MC6850_BUFFER
   579 88EF E6 FE		  inc FIFO_Tail
   580
   581 88F1			exitPush:
   582
   583 88F1			@exit
   584 					.ifdef @new
   585 					lda <@VarData
   586 					sta :ztmp
   587 					lda >@VarData
   588 					ldy #@VarDataSize-1
   589 					jmp @FreeMem
   590 					els
   591 88F1 60				rts						; ret
   592 					eif
   593 				.endl
   594
   595 88F2			.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER
   596
   597 				; -------------------  ASM Block 00000055  -------------------
   598
   599 88F2 A5 FD		  lda FIFO_Head
   600 88F4 18			  clc
   601 88F5 69 01		  adc #1
   602 88F7 C5 FE		  cmp FIFO_Tail
   603 88F9 D0 03		  bne storeInFIFO
   604
   605 88FB 20 0B 89		  jsr FIFO_Flush
   606
   607 88FE			storeInFIFO:
   608 88FE A4 FD		  ldy FIFO_Head
   609 8900 A5 FF		  lda FIFO_Byte
   610 8902 99 00 06		  sta FIFO_ADDR,y
   611 8905 E6 FD		  inc FIFO_Head
   612
   613 8907 20 DC 88		  jsr FIFO_PushDirect2MC6850
   614 890A			exitWrite:
   615
   616 890A			@exit
   617 					.ifdef @new
   618 					lda <@VarData
   619 					sta :ztmp
   620 					lda >@VarData
   621 					ldy #@VarDataSize-1
   622 					jmp @FreeMem
   623 					els
   624 890A 60				rts						; ret
   625 					eif
   626 				.endl
   627
   628 890B			.local	FIFO_FLUSH					; PROCEDURE | ASSEMBLER | KEEP
   629
   630 				; -------------------  ASM Block 00000056  -------------------
   631
   632 890B 78			  sei
   633 				  // lda _timerStatus
   634 				  // eor #$80
   635 				  // sta _timerStatus
   636
   637 890C A4 FE		  ldy FIFO_Tail
   638 890E			flushLoop:
   639 890E C4 FD		  cpy FIFO_Head
   640 8910 F0 11		  beq endFlush
   641
   642 8912			waitOnMC:
   643 8912 AD 00 D5		  lda MCBaseState:$d500 // MC6850.MC6850_CNTRReg
   644 8915 29 02		  and #MC6850.TDRE
   645 8917 F0 F9		  beq waitOnMc
   646
   647 8919 B9 00 06		  lda FIFO_ADDR,y
   648 891C 8D 00 D5		  sta MCBaseBuf:$d500   // MC6850.MC6850_BUFFER
   649
   650 891F C8			  iny
   651 8920 4C 0E 89		  jmp flushLoop
   652
   653 8923			endFlush:
   654 8923 84 FE		  sty FIFO_Tail
   655
   656 8925 58			  cli
   657 				  // lda _timerStatus
   658 				  // eor #$80
   659 				  // sta _timerStatus
   660
   661 8926			@exit
   662 					.ifdef @new
   663 					lda <@VarData
   664 					sta :ztmp
   665 					lda >@VarData
   666 					ldy #@VarDataSize-1
   667 					jmp @FreeMem
   668 					els
   669 8926 60				rts						; ret
   670 					eif
   671 				.endl
   672
   673 				; ------------------------------------------------------------
   674
   675 = 00FD			FIFO_HEAD	= $FD
   676 = 00FE			FIFO_TAIL	= $FE
   677 = 00FF			FIFO_BYTE	= $FF
   678 = 040E			FIFO2NULL	= DATAORIGIN+$000E
   679 = 0600			FIFO_ADDR	= $0600
   680 = 0600			adr.FIFO_BUF	= $0600
   681 8927			.var FIFO_BUF	= adr.FIFO_BUF .word
   682 = 00F5			_TIMERSTATUS	= $F5
   683
   684 = 8927 00 06		FIFO_BUF
   684 				.endl							; UNIT MIDI_FIFO
   685
   686 				; ------------------------------------------------------------
   687
   688 8929			.local	CIO						; UNIT
   689
   690 8929			.local	OPN						; PROCEDURE | ASSEMBLER
   691
   692 				; -------------------  ASM Block 00000057  -------------------
   693
   694 8929 8A 48			txa:pha
   695
   696 892B AD 0F 04			lda chn
   697 892E 0A 0A 0A 0A			:4 asl @
   698 8932 AA				tax
   699
   700 8933 A9 03			lda #$03		;komenda: OPEN
   701 8935 9D 42 03			sta iccmd,x
   702
   703 8938 EE 12 04 D0 03 EE + 	inw device		;omin bajt z dlugoscia STRING-a
   704
   705 8940 AD 12 04			lda device		;adres nazwy pliku
   706 8943 9D 44 03			sta icbufa,x
   707 8946 AD 13 04			lda device+1
   708 8949 9D 45 03			sta icbufa+1,x
   709
   710 894C AD 10 04			lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
   711 894F 9D 4A 03			sta icax1,x
   712
   713 8952 AD 11 04			lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
   714 8955 9D 4B 03			sta icax2,x
   715
   716 8958				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8958 EE 01 D3				inc portb
     6 895B 20 56 E4				jsr CIOV
     8 895E CE 01 D3				dec portb
   717
   718 8961 8C 07 04			sty MAIN.SYSTEM.IOResult
   719
   720 8964 68 AA			pla:tax
   721
   722 				; ------------------------------------------------------------
   723
   724 = 040F			CHN	= DATAORIGIN+$000F
   725 = 0410			AX1	= DATAORIGIN+$0010
   726 = 0411			AX2	= DATAORIGIN+$0011
   727 = 0412			DEVICE	= DATAORIGIN+$0012
   728
   729 = 040F			@VarData	= CHN
   730 = 0005			@VarDataSize	= 5
   731
   732 8966			@exit
   733 					.ifdef @new
   734 					lda <@VarData
   735 					sta :ztmp
   736 					lda >@VarData
   737 					ldy #@VarDataSize-1
   738 					jmp @FreeMem
   739 					els
   740 8966 60				rts						; ret
   741 					eif
   742 				.endl
   743
   744 8967			.local	CLS						; PROCEDURE | ASSEMBLER
   745 8967 8D 14 04			sta CHN
   746
   747 				; -------------------  ASM Block 00000058  -------------------
   748
   749 896A 8A 48			txa:pha
   750
   751 896C AD 14 04			lda chn
   752 896F 0A 0A 0A 0A			:4 asl @
   753 8973 AA				tax
   754
   755 8974 A9 0C			lda #$0c		;komenda: CLOSE
   756 8976 9D 42 03			sta iccmd,x
   757
   758 8979				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8979 EE 01 D3				inc portb
     6 897C 20 56 E4				jsr CIOV
     8 897F CE 01 D3				dec portb
   759
   760 8982 8C 07 04			sty MAIN.SYSTEM.IOResult
   761
   762 8985 68 AA			pla:tax
   763
   764 				; ------------------------------------------------------------
   765
   766 = 0414			CHN	= DATAORIGIN+$0014
   767
   768 = 0414			@VarData	= CHN
   769 = 0001			@VarDataSize	= 1
   770
   771 8987			@exit
   772 					.ifdef @new
   773 					lda <@VarData
   774 					sta :ztmp
   775 					lda >@VarData
   776 					ldy #@VarDataSize-1
   777 					jmp @FreeMem
   778 					els
   779 8987 60				rts						; ret
   780 					eif
   781 				.endl
   782
   783 8988			.local	BGET						; PROCEDURE | ASSEMBLER | REGISTER
   784
   785 				; -------------------  ASM Block 00000060  -------------------
   786
   787 8988 8A 48			txa:pha
   788
   789 898A A5 88			lda chn
   790 898C 0A 0A 0A 0A			:4 asl @
   791 8990 AA				tax
   792
   793 8991 A9 07			lda #7		;get char/s command
   794 8993 9D 42 03			sta iccmd,x
   795
   796 8996 A5 8C			lda buf
   797 8998 9D 44 03			sta icbufa,x
   798 899B A5 8D			lda buf+1
   799 899D 9D 45 03			sta icbufa+1,x
   800
   801 89A0 A5 84			lda cnt
   802 89A2 9D 48 03			sta icbufl,x
   803 89A5 A5 85			lda cnt+1
   804 89A7 9D 49 03			sta icbufh,x
   805
   806 89AA				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 89AA EE 01 D3				inc portb
     6 89AD 20 56 E4				jsr CIOV
     8 89B0 CE 01 D3				dec portb
   807
   808 89B3 8C 07 04			sty MAIN.SYSTEM.IOResult
   809
   810 89B6 68 AA			pla:tax
   811
   812 				; ------------------------------------------------------------
   813
   814 = 0088			CHN	= :EDX
   815 = 008C			BUF	= :ECX
   816 = 0084			CNT	= :EAX
   817 89B8			@exit
   818 					.ifdef @new
   819 					lda <@VarData
   820 					sta :ztmp
   821 					lda >@VarData
   822 					ldy #@VarDataSize-1
   823 					jmp @FreeMem
   824 					els
   825 89B8 60				rts						; ret
   826 					eif
   827 				.endl
   828
   829 				; ------------------------------------------------------------
   830
   831 				.endl							; UNIT CIO
   832
   833 				; ------------------------------------------------------------
   834
   835 89B9			.local	MIDFILES					; UNIT
   836
   837 89B9			.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT
   838
   839 				; -------------------  ASM Block 00000067  -------------------
   840
   841 89B9			  icl 'midfile/asms/int_timer.a65'
Source: int_timer.a65
     1 89B9 A5 F5		    lda _timerStatus
     2 89BB 30 1E		    bmi skip
     3
     4 89BD			doSubTick:
     5 89BD 29 0F		    and #f_ratio
     6 89BF C5 F4		    cmp _subCnt
     7 89C1 F0 04		    beq doMainTick
     8
     9 89C3 E6 F4		    inc _subCnt
    10 89C5 70 14		    bvs skip
    11
    12 89C7			doMainTick:
    13 89C7 A9 01		    lda #1
    14 89C9 85 F4		    sta _subCnt
    15
    16 89CB A5 F5		    lda _timerStatus
    17 89CD 09 40		    ora #f_tick
    18 89CF 85 F5		    sta _timerStatus
    19
    20 89D1 E6 F0		    inc _totalTicks
    21 89D3 D0 06		    bne skip
    22 89D5 E6 F1		    inc _totalTicks+1
    23 89D7 D0 02		    bne skip
    24 89D9 E6 F2		    inc _totalTicks+2
    25 				    // bne skip
    26 				    // inc _totalTicks+3
    27
    28 89DB			skip:
    29
    30 				//   sty regy
    31
    32 				//   ldy MIDI_FIFO.FIFO_Tail
    33 				//   cpy MIDI_FIFO.FIFO_Head
    34 				//   beq fifo_end
    35
    36 				//   lda MC6850.MC6850_CNTRREG
    37 				//   and #MC6850.TDRE
    38 				//   beq fifo_end
    39
    40 				//   lda MIDI_FIFO.FIFO_ADDR,y
    41 				//   sta MC6850.MC6850_BUFFER
    42
    43 				//   inc MIDI_FIFO.FIFO_Tail
    44
    45 				// fifo_end:
    46 				//   ldy regy:#$00
    47
    48 89DB 68			  pla
   842
   843 89DC 40				rti						; ret
   844 				.endl
   845
   846 89DD			.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER
   847
   848 				; -------------------  ASM Block 00000068  -------------------
   849
   850 89DD			  icl 'midfile/asms/memory_bound_check.a65'
Source: memory_bound_check.a65
     1 89DD A5 E2		  lda _adr            // get LSB of address
     2 89DF F0 01		  beq checkMemType    // zero means, we crossing the page. Check block bounds
     3 89E1 60			  rts
     4
     5 89E2			checkMemType
     6 89E2 A5 E3		  lda _adr+1          // get MSB of address
     7 89E4 A4 E1		  ldy _bank           // get current bank index
     8 89E6 D0 17		  bne checkXMSBound   // zero, means we checking bounds in base memory
     9 				                      // otherwise, we checking bound of extended memory
    10
    11 				// base memory bounds check
    12 				// 1nd, $d800..$ff00
    13 89E8			check1Bound:
    14 89E8 C9 FF		  cmp #$ff
    15 89EA D0 05		  bne check2Bound
    16
    17 89EC A9 A8		  lda #$a8
    18 89EE 85 E3		  sta _adr+1
    19 89F0 60			  rts
    20
    21 				// 2st, $a800..$cfff
    22 89F1			check2bound:
    23 89F1 C9 D0		  cmp #$d0
    24 89F3 D0 05		  bne check3Bound
    25
    26 89F5 A9 40		  lda #$40
    27 89F7 85 E3		  sta _adr+1
    28 89F9 60			  rts
    29
    30 				// 3nd, $4000..$8000
    31 89FA			check3Bound
    32 89FA C9 80		  cmp #$80
    33 89FC F0 22		  beq outOfMem
    34 89FE 60			  rts
    35
    36 				// extended memory bound check
    37
    38 89FF			checkXMSBound         // extender memory window $4000..$7fff
    39 89FF C9 80		  cmp #$80            // the bank's memory area ends at $7fff
    40 8A01 F0 01		  beq switchXMSBank   // if MSB addres is out of this address, we need switch bank
    41
    42 8A03 60			  rts
    43
    44 8A04			switchXMSBank:
    45 8A04 88			  dey             // decrement current bank index
    46 8A05 F0 0D		  beq switch2Conv // if zero, meand we back to conventional memory
    47
    48 8A07 B9 00 01		  lda $100,y      // get bank set
    49 8A0A 84 E1		  sty _bank       // store current bank index
    50 8A0C 8D 01 D3		  sta PORTB       // set PORTB (switch bank)
    51 8A0F A9 40		  lda #$40        // set MSB address to the begining of bank
    52 8A11 85 E3		  sta _adr+1
    53 8A13 60			  rts
    54
    55 8A14			switch2Conv:
    56 8A14 84 E1		  sty _bank
    57 8A16 A9 FE		  lda #$fe        // switch to conventional memory and turn off ROM
    58 8A18 8D 01 D3		  sta PORTB
    59 8A1B A9 A8		  lda #$a8        // set MSB address
    60 8A1D 85 E3		  sta _adr+1
    61 8A1F 60			  rts
    62
    63 8A20			outOfMem:
    64 8A20 A9 65		  lda #ERR_NOT_ENOUGHT_MEMORY
    65 8A22 8D 07 04		  sta SYSTEM.IOResult
   851
   852 8A25			@exit
   853 					.ifdef @new
   854 					lda <@VarData
   855 					sta :ztmp
   856 					lda >@VarData
   857 					ldy #@VarDataSize-1
   858 					jmp @FreeMem
   859 					els
   860 8A25 60				rts						; ret
   861 					eif
   862 				.endl
   863
   864 8A26			.local	LOADMID						; FUNCTION
   865
   866 8A26 4C 53 8B			jmp l_019A
   867
   868 8A29			.local	READWORDBI					; FUNCTION
   869
   870 				; optimize OK (bigendian.inc), line = 3
   871
   872 8A29 A9 01			lda #$01
   873 8A2B 85 88			sta CIO.BGET.CHN
   874 8A2D A9 4E			lda <RESULT
   875 8A2F 85 8C			sta CIO.BGET.BUF
   876 8A31 A9 04			lda >RESULT
   877 8A33 85 8D			sta CIO.BGET.BUF+1
   878 8A35 A9 02			lda #$02
   879 8A37 85 84			sta CIO.BGET.CNT
   880 8A39 A9 00			lda #$00
   881 8A3B 85 85			sta CIO.BGET.CNT+1
   882 8A3D 20 88 89			jsr CIO.BGET
   883
   884 				; -------------------  ASM Block 00000069  -------------------
   885
   886 8A40 AE 4E 04		    ldx result
   887 8A43 AC 4F 04		    ldy result+1
   888 8A46 8E 4F 04		    stx result+1
   889 8A49 8C 4E 04		    sty result
   890 				  
   891 8A4C			@exit
   892
   893 				; ------------------------------------------------------------
   894
   895 = 044E			RESULT	= DATAORIGIN+$004E
   896 8A4C 60				rts						; ret
   897 				.endl
   898
   899 8A4D			.local	READLONGBI					; FUNCTION
   900
   901 				; optimize OK (bigendian.inc), line = 15
   902
   903 8A4D A9 01			lda #$01
   904 8A4F 85 88			sta CIO.BGET.CHN
   905 8A51 A9 50			lda <RESULT
   906 8A53 85 8C			sta CIO.BGET.BUF
   907 8A55 A9 04			lda >RESULT
   908 8A57 85 8D			sta CIO.BGET.BUF+1
   909 8A59 A9 04			lda #$04
   910 8A5B 85 84			sta CIO.BGET.CNT
   911 8A5D A9 00			lda #$00
   912 8A5F 85 85			sta CIO.BGET.CNT+1
   913 8A61 20 88 89			jsr CIO.BGET
   914
   915 				; -------------------  ASM Block 00000070  -------------------
   916
   917 8A64 AE 50 04		    ldx result
   918 8A67 AC 53 04		    ldy result+3
   919 8A6A 8E 53 04		    stx result+3
   920 8A6D 8C 50 04		    sty result
   921
   922 8A70 AE 51 04		    ldx result+1
   923 8A73 AC 52 04		    ldy result+2
   924 8A76 8E 52 04		    stx result+2
   925 8A79 8C 51 04		    sty result+1
   926 				  
   927 8A7C			@exit
   928
   929 				; ------------------------------------------------------------
   930
   931 = 0450			RESULT	= DATAORIGIN+$0050
   932 8A7C 60				rts						; ret
   933 				.endl
   934
   935 8A7D			.local	_BGET						; PROCEDURE
   936
   937 				; optimize OK (loadmid.inc), line = 21
   938
   939 8A7D A9 01			lda #$01
   940 8A7F 85 88			sta CIO.BGET.CHN
   941 8A81 AD 54 04			lda DEST
   942 8A84 85 8C			sta CIO.BGET.BUF
   943 8A86 AD 55 04			lda DEST+1
   944 8A89 85 8D			sta CIO.BGET.BUF+1
   945 8A8B AD 46 04			lda LOADSIZE
   946 8A8E 85 84			sta CIO.BGET.CNT
   947 8A90 AD 47 04			lda LOADSIZE+1
   948 8A93 85 85			sta CIO.BGET.CNT+1
   949 8A95 20 88 89			jsr CIO.BGET
   950
   951 				; ------------------------------------------------------------
   952
   953 = 0454			DEST	= DATAORIGIN+$0054
   954
   955 = 0454			@VarData	= DEST
   956 = 0002			@VarDataSize	= 2
   957
   958 8A98			@exit
   959 					.ifdef @new
   960 					lda <@VarData
   961 					sta :ztmp
   962 					lda >@VarData
   963 					ldy #@VarDataSize-1
   964 					jmp @FreeMem
   965 					els
   966 8A98 60				rts						; ret
   967 					eif
   968 				.endl
   969
   970 8A99			.local	CHECKLOADSIZE					; PROCEDURE
   971
   972 				; optimize OK (loadmid.inc), line = 26
   973
   974 8A99 A9 00			lda #$00
   975 8A9B 8D 46 04			sta LOADSIZE
   976 8A9E 8D 47 04			sta LOADSIZE+1
   977
   978 				; --- RepeatUntilProlog
   979 8AA1			l_01BC
   980
   981 				; optimize FAIL ('MEMBOUNDCHECK', loadmid.inc), line = 28
   982
   983 8AA1 20 DD 89			jsr MEMBOUNDCHECK
   984
   985 				; optimize OK (loadmid.inc), line = 29
   986
   987 8AA4 AD 07 04			lda SYSTEM.IORESULT
   988 8AA7 C9 01			cmp #$01
   989 8AA9 F0 03			jeq l_01CF
   990 8AAB 4C 52 8B			jmp @exit					; exit
   991 8AAE			l_01CF
   992
   993 				; optimize OK (loadmid.inc), line = 31
   994
   995 8AAE A5 E3			lda _ADR+1
   996 8AB0 C9 D8			cmp #$D8
   997 8AB2 90 0D			jcc l_01E3
   998 8AB4 A9 00			lda #$00
   999 8AB6 8D 46 04			sta LOADSIZE
  1000 8AB9 A9 FF			lda #$FF
  1001 8ABB 8D 47 04			sta LOADSIZE+1
  1002 8ABE 4C F7 8A			jmp l_01F1
  1003 8AC1			l_01E3
  1004
  1005 				; optimize OK (loadmid.inc), line = 32
  1006
  1007 8AC1 A5 E3			lda _ADR+1
  1008 8AC3 C9 C0			cmp #$C0
  1009 8AC5 90 0D			jcc l_0202
  1010 8AC7 A9 00			lda #$00
  1011 8AC9 8D 46 04			sta LOADSIZE
  1012 8ACC A9 D0			lda #$D0
  1013 8ACE 8D 47 04			sta LOADSIZE+1
  1014 8AD1 4C F7 8A			jmp l_0210
  1015 8AD4			l_0202
  1016
  1017 				; optimize OK (loadmid.inc), line = 33
  1018
  1019 8AD4 A5 E3			lda _ADR+1
  1020 8AD6 C9 A8			cmp #$A8
  1021 8AD8 90 0D			jcc l_0221
  1022 8ADA A9 00			lda #$00
  1023 8ADC 8D 46 04			sta LOADSIZE
  1024 8ADF A9 C0			lda #$C0
  1025 8AE1 8D 47 04			sta LOADSIZE+1
  1026 8AE4 4C F7 8A			jmp l_022F
  1027 8AE7			l_0221
  1028
  1029 				; optimize OK (loadmid.inc), line = 34
  1030
  1031 8AE7 A5 E3			lda _ADR+1
  1032 8AE9 C9 40			cmp #$40
  1033 8AEB 90 0A			jcc l_0240
  1034 8AED A9 00			lda #$00
  1035 8AEF 8D 46 04			sta LOADSIZE
  1036 8AF2 A9 80			lda #$80
  1037 8AF4 8D 47 04			sta LOADSIZE+1
  1038 8AF7			l_0240
  1039 8AF7			l_022F
  1040 8AF7			l_0210
  1041 8AF7			l_01F1
  1042
  1043 				; optimize OK (loadmid.inc), line = 35
  1044
  1045 8AF7 AD 46 04			lda LOADSIZE
  1046 8AFA 38 E5 E2			sub _ADR
  1047 8AFD 8D 46 04			sta LOADSIZE
  1048 8B00 AD 47 04			lda LOADSIZE+1
  1049 8B03 E5 E3			sbc _ADR+1
  1050 8B05 8D 47 04			sta LOADSIZE+1
  1051
  1052 				; optimize OK (loadmid.inc), line = 36
  1053
  1054 8B08				.LOCAL
  1055 8B08 A9 00			lda #$00
  1056 8B0A 38 ED 4B 04			sub LEN+3
  1057 8B0E D0 21			bne L4
  1058 8B10 A9 00			lda #$00
  1059 8B12 CD 4A 04			cmp LEN+2
  1060 8B15 D0 0E			bne L1
  1061 8B17 AD 47 04			lda LOADSIZE+1
  1062 8B1A CD 49 04			cmp LEN+1
  1063 8B1D D0 06			bne L1
  1064 8B1F AD 46 04			lda LOADSIZE
  1065 8B22 CD 48 04			cmp LEN
  1066 8B25 F0 10		L1	beq L5
  1067 8B27 B0 04			bcs L3
  1068 8B29 A9 FF			lda #$FF
  1069 8B2B D0 0A			bne L5
  1070 8B2D A9 01		L3	lda #$01
  1071 8B2F D0 06			bne L5
  1072 8B31 50 04		L4	bvc L5
  1073 8B33 49 FF			eor #$FF
  1074 8B35 09 01			ora #$01
  1075 8B37			L5
  1076 					.ENDL
  1077 8B37 30 0E			jmi l_025A
  1078 8B39 F0 0C			jeq l_025A
  1079 8B3B AD 48 04			lda LEN
  1080 8B3E 8D 46 04			sta LOADSIZE
  1081 8B41 AD 49 04			lda LEN+1
  1082 8B44 8D 47 04			sta LOADSIZE+1
  1083 8B47			l_025A
  1084
  1085 				; optimize OK (loadmid.inc), line = 37
  1086
  1087 8B47 AD 47 04			lda LOADSIZE+1
  1088 8B4A 0D 46 04			ora LOADSIZE
  1089 8B4D D0 03 4C A1 8A		jeq l_01BC
  1090 8B52			@exit
  1091 					.ifdef @new
  1092 					lda <@VarData
  1093 					sta :ztmp
  1094 					lda >@VarData
  1095 					ldy #@VarDataSize-1
  1096 					jmp @FreeMem
  1097 					els
  1098 8B52 60				rts						; ret
  1099 					eif
  1100 				.endl
  1101 8B53			l_019A
  1102
  1103 				; optimize OK (loadmid.inc), line = 41
  1104
  1105 8B53 A9 01			lda #$01
  1106 8B55 8D 0F 04			sta CIO.OPN.CHN
  1107 8B58 A9 04			lda #$04
  1108 8B5A 8D 10 04			sta CIO.OPN.AX1
  1109 8B5D A9 00			lda #$00
  1110 8B5F 8D 11 04			sta CIO.OPN.AX2
  1111 8B62 AD 38 04			lda FN
  1112 8B65 8D 12 04			sta CIO.OPN.DEVICE
  1113 8B68 AD 39 04			lda FN+1
  1114 8B6B 8D 13 04			sta CIO.OPN.DEVICE+1
  1115 8B6E 20 29 89			jsr CIO.OPN
  1116
  1117 				; optimize OK (loadmid.inc), line = 42
  1118
  1119 8B71 AD 07 04			lda SYSTEM.IORESULT
  1120 8B74 10 0B			jpl l_0286
  1121
  1122 				; optimize OK (loadmid.inc), line = 44
  1123
  1124 8B76 8D 3A 04			sta RESULT
  1125
  1126 				; optimize OK (loadmid.inc), line = 45
  1127
  1128 8B79 A9 01			lda #$01
  1129 8B7B 20 67 89			jsr CIO.CLS
  1130 8B7E 4C 72 8D			jmp @exit					; exit
  1131 8B81			l_0286
  1132
  1133 				; optimize OK (loadmid.inc), line = 49
  1134
  1135 8B81 AD D6 92			lda MIDTRACKS
  1136 8B84 8D 4C 04			sta TRKDATA
  1137 8B87 AD D7 92			lda MIDTRACKS+1
  1138 8B8A 8D 4D 04			sta TRKDATA+1
  1139
  1140 				; optimize OK (loadmid.inc), line = 50
  1141
  1142 8B8D A9 00			lda #$00
  1143 8B8F 8D 3B 04			sta TRACKCOUNT
  1144
  1145 				; optimize OK (loadmid.inc), line = 51
  1146
  1147 8B92 A9 FF			lda #$FF
  1148 8B94 8D 19 04			sta TOTALTRACKS
  1149
  1150 				; --- WhileProlog
  1151 8B97 4C 55 8D			jmp l_02A0
  1152 8B9A			l_02A1
  1153
  1154 				; optimize OK (loadmid.inc), line = 55
  1155
  1156 8B9A A9 01			lda #$01
  1157 8B9C 85 88			sta CIO.BGET.CHN
  1158 8B9E A9 3C			lda <CHUNKTAG
  1159 8BA0 85 8C			sta CIO.BGET.BUF
  1160 8BA2 A9 04			lda >CHUNKTAG
  1161 8BA4 85 8D			sta CIO.BGET.BUF+1
  1162 8BA6 A9 04			lda #$04
  1163 8BA8 85 84			sta CIO.BGET.CNT
  1164 8BAA A9 00			lda #$00
  1165 8BAC 85 85			sta CIO.BGET.CNT+1
  1166 8BAE 20 88 89			jsr CIO.BGET
  1167
  1168 				; optimize FAIL ('READLONGBI', loadmid.inc), line = 56
  1169
  1170 8BB1 20 4D 8A			jsr READLONGBI
  1171 8BB4 AD 50 04			lda READLONGBI.RESULT
  1172 8BB7 8D 48 04			sta LEN
  1173 8BBA AD 51 04			lda READLONGBI.RESULT+1
  1174 8BBD 8D 49 04			sta LEN+1
  1175 8BC0 AD 52 04			lda READLONGBI.RESULT+2
  1176 8BC3 8D 4A 04			sta LEN+2
  1177 8BC6 AD 53 04			lda READLONGBI.RESULT+3
  1178 8BC9 8D 4B 04			sta LEN+3
  1179
  1180 				; optimize OK (loadmid.inc), line = 57
  1181
  1182 8BCC AD 3F 04			lda CHUNKTAG+3
  1183 8BCF 49 64			eor #$64
  1184 8BD1 D0 55			jne l_02B9
  1185 8BD3 AD 3E 04			lda CHUNKTAG+2
  1186 8BD6 49 68			eor #$68
  1187 8BD8 D0 4E			jne l_02B9
  1188 8BDA AD 3D 04			lda CHUNKTAG+1
  1189 8BDD 49 54			eor #$54
  1190 8BDF D0 47			jne l_02B9
  1191 8BE1 AD 3C 04			lda CHUNKTAG
  1192 8BE4 49 4D			eor #$4D
  1193 8BE6 D0 40			jne l_02B9
  1194
  1195 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 59
  1196
  1197 8BE8 20 29 8A			jsr READWORDBI
  1198 8BEB AD 4E 04			lda READWORDBI.RESULT
  1199 8BEE 8D 18 04			sta FORMAT
  1200
  1201 				; optimize OK (loadmid.inc), line = 60
  1202
  1203 8BF1 F0 0C			jeq l_02DC
  1204 8BF3 C9 01			cmp #$01
  1205 8BF5 F0 08			jeq l_02DC
  1206
  1207 				; optimize OK (loadmid.inc), line = 62
  1208
  1209 8BF7 A9 64			lda #$64
  1210 8BF9 8D 07 04			sta SYSTEM.IORESULT
  1211 8BFC 4C 67 8D			jmp b_02A1					; break
  1212 8BFF			l_02DC
  1213
  1214 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 65
  1215
  1216 8BFF 20 29 8A			jsr READWORDBI
  1217 8C02 AD 4E 04			lda READWORDBI.RESULT
  1218 8C05 8D 19 04			sta TOTALTRACKS
  1219
  1220 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 66
  1221
  1222 8C08 20 29 8A			jsr READWORDBI
  1223 8C0B AD 4E 04			lda READWORDBI.RESULT
  1224 8C0E 8D 40 04			sta V
  1225 8C11 AD 4F 04			lda READWORDBI.RESULT+1
  1226 8C14 8D 41 04			sta V+1
  1227
  1228 				; optimize OK (loadmid.inc), line = 67
  1229
  1230 8C17 30 0C			jmi l_0300
  1231
  1232 				; optimize OK (loadmid.inc), line = 68
  1233
  1234 8C19 AD 40 04			lda V
  1235 8C1C 8D 1A 04			sta TICKDIV
  1236 8C1F AD 41 04			lda V+1
  1237 8C22 8D 1B 04			sta TICKDIV+1
  1238 8C25			l_0300
  1239 8C25 4C 55 8D			jmp l_0311
  1240 8C28			l_02B9
  1241
  1242 				; optimize OK (loadmid.inc), line = 83
  1243
  1244 8C28 AD 3F 04			lda CHUNKTAG+3
  1245 8C2B 49 6B			eor #$6B
  1246 8C2D F0 03 4C 50 8D		jne l_0321
  1247 8C32 AD 3E 04			lda CHUNKTAG+2
  1248 8C35 49 72			eor #$72
  1249 8C37 F0 03 4C 50 8D		jne l_0321
  1250 8C3C AD 3D 04			lda CHUNKTAG+1
  1251 8C3F 49 54			eor #$54
  1252 8C41 F0 03 4C 50 8D		jne l_0321
  1253 8C46 AD 3C 04			lda CHUNKTAG
  1254 8C49 49 4D			eor #$4D
  1255 8C4B F0 03 4C 50 8D		jne l_0321
  1256
  1257 				; optimize FAIL (0, loadmid.inc), line = 85
  1258
  1259 8C50 EE 3B 04			inc TRACKCOUNT
  1260
  1261 				; optimize OK (loadmid.inc), line = 87
  1262
  1263 8C53 AC 4C 04 84 82 AC + 	mwy TRKDATA :bp2
  1264 8C5D A0 00			ldy #$00
  1265 8C5F 98				tya
  1266 8C60 91 82			sta (:bp2),y
  1267
  1268 				; optimize OK (loadmid.inc), line = 88
  1269
  1270 8C62 A0 04			ldy #$04
  1271 8C64 91 82			sta (:bp2),y
  1272 8C66 C8				iny
  1273 8C67 91 82			sta (:bp2),y
  1274 8C69 C8				iny
  1275 8C6A 91 82			sta (:bp2),y
  1276 8C6C C8				iny
  1277 8C6D 91 82			sta (:bp2),y
  1278
  1279 				; optimize OK (loadmid.inc), line = 89
  1280
  1281 8C6F A0 01			ldy #$01
  1282 8C71 A5 E1			lda _BANK
  1283 8C73 91 82			sta (:bp2),y
  1284
  1285 				; optimize OK (loadmid.inc), line = 90
  1286
  1287 8C75 C8				iny
  1288 8C76 A5 E2			lda _ADR
  1289 8C78 91 82			sta (:bp2),y
  1290 8C7A C8				iny
  1291 8C7B A5 E3			lda _ADR+1
  1292 8C7D 91 82			sta (:bp2),y
  1293
  1294 				; -------------------  ASM Block 00000071  -------------------
  1295
  1296 				 ldy _bank \ lda $100,y \ sta PORTB 
  1296 8C7F A4 E1		 LDY _BANK 
  1296 8C81 B9 00 01		 LDA $100,Y 
  1296 8C84 8D 01 D3		 STA PORTB 
  1297 				; --- WhileProlog
  1298 8C87 4C 2C 8D			jmp l_033B
  1299 8C8A			l_033C
  1300
  1301 				; optimize FAIL (':TMP', loadmid.inc), line = 96
  1302
  1303 8C8A AD 32 04			lda LOADPROCESS
  1304 8C8D 85 91			sta :TMP+1
  1305 8C8F AD 33 04			lda LOADPROCESS+1
  1306 8C92 85 92			sta :TMP+2
  1307 8C94 A9 4C			lda #$4C
  1308 8C96 85 90			sta :TMP
  1309 8C98 E8				inx
  1310 8C99 AD 3B 04 95 94		mva TRACKCOUNT :STACKORIGIN,x
  1311 8C9E 20 90 00			jsr :TMP
  1312
  1313 				; optimize FAIL ('CHECKLOADSIZE', loadmid.inc), line = 97
  1314
  1315 8CA1 20 99 8A			jsr CHECKLOADSIZE
  1316
  1317 				; optimize OK (loadmid.inc), line = 98
  1318
  1319 8CA4 AD 07 04			lda SYSTEM.IORESULT
  1320 8CA7 C9 01			cmp #$01
  1321 8CA9 F0 03			jeq l_0353
  1322 8CAB 4C 3F 8D			jmp b_033C					; break
  1323 8CAE			l_0353
  1324
  1325 				; optimize OK (loadmid.inc), line = 100
  1326
  1327 8CAE A5 E3			lda _ADR+1
  1328 8CB0 C9 C0			cmp #$C0
  1329 8CB2 90 2F			jcc l_0367
  1330
  1331 				; optimize OK (loadmid.inc), line = 102
  1332
  1333 8CB4 A9 00			lda #$00
  1334 8CB6 8D 54 04			sta _BGET.DEST
  1335 8CB9 A9 40			lda #$40
  1336 8CBB 8D 55 04			sta _BGET.DEST+1
  1337 8CBE 20 7D 8A			jsr _BGET
  1338
  1339 				; optimize OK (loadmid.inc), line = 103
  1340
  1341 8CC1 AD 73 8D			lda RBUF
  1342 8CC4 85 88			sta SYSTEM.MOVE_0153.SOURCE
  1343 8CC6 AD 74 8D			lda RBUF+1
  1344 8CC9 85 89			sta SYSTEM.MOVE_0153.SOURCE+1
  1345 8CCB A5 E2			lda _PTR
  1346 8CCD 85 8C			sta SYSTEM.MOVE_0153.DEST
  1347 8CCF A5 E3			lda _PTR+1
  1348 8CD1 85 8D			sta SYSTEM.MOVE_0153.DEST+1
  1349 8CD3 AD 46 04			lda LOADSIZE
  1350 8CD6 85 84			sta SYSTEM.MOVE_0153.COUNT
  1351 8CD8 AD 47 04			lda LOADSIZE+1
  1352 8CDB 85 85			sta SYSTEM.MOVE_0153.COUNT+1
  1353 8CDD				.local +MAIN.SYSTEM.MOVE_0153
  1354 8CDD				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0153.M@INLINE [Source: MIDICar Player.a65]
     4 8CDD 20 CE 81			jsr @move
Source: MIDICar Player.a65
  1355 					.endl
  1356 8CE0 4C F0 8C			jmp l_037A
  1357 8CE3			l_0367
  1358
  1359 				; optimize OK (loadmid.inc), line = 106
  1360
  1361 8CE3 A5 E2			lda _PTR
  1362 8CE5 8D 54 04			sta _BGET.DEST
  1363 8CE8 A5 E3			lda _PTR+1
  1364 8CEA 8D 55 04			sta _BGET.DEST+1
  1365 8CED 20 7D 8A			jsr _BGET
  1366 8CF0			l_037A
  1367
  1368 				; optimize OK (loadmid.inc), line = 108
  1369
  1370 8CF0 AD 07 04			lda SYSTEM.IORESULT
  1371 8CF3 C9 01			cmp #$01
  1372 8CF5 F0 03			jeq l_038F
  1373 8CF7 4C 3F 8D			jmp b_033C					; break
  1374 8CFA			l_038F
  1375
  1376 				; optimize OK (loadmid.inc), line = 110
  1377
  1378 8CFA A5 E2			lda _ADR
  1379 8CFC 18 6D 46 04			add LOADSIZE
  1380 8D00 85 E2			sta _ADR
  1381 8D02 A5 E3			lda _ADR+1
  1382 8D04 6D 47 04			adc LOADSIZE+1
  1383 8D07 85 E3			sta _ADR+1
  1384
  1385 				; optimize OK (loadmid.inc), line = 111
  1386
  1387 8D09 AD 48 04			lda LEN
  1388 8D0C 38 ED 46 04			sub LOADSIZE
  1389 8D10 8D 48 04			sta LEN
  1390 8D13 AD 49 04			lda LEN+1
  1391 8D16 ED 47 04			sbc LOADSIZE+1
  1392 8D19 8D 49 04			sta LEN+1
  1393 8D1C AD 4A 04			lda LEN+2
  1394 8D1F E9 00			sbc #$00
  1395 8D21 8D 4A 04			sta LEN+2
  1396 8D24 AD 4B 04			lda LEN+3
  1397 8D27 E9 00			sbc #$00
  1398 8D29 8D 4B 04			sta LEN+3
  1399 8D2C			l_033B
  1400
  1401 				; optimize OK (loadmid.inc), line = 94
  1402
  1403 8D2C AD 4B 04			lda LEN+3
  1404 8D2F 30 0E			bmi @+
  1405 8D31 0D 4A 04			ora LEN+2
  1406 8D34 0D 49 04			ora LEN+1
  1407 8D37 0D 48 04			ora LEN
  1408 8D3A F0 03 4C 8A 8C		jne l_033C
  1409 				@
  1410 8D3F			b_033C
  1411
  1412 				; optimize OK (loadmid.inc), line = 113
  1413
  1414 8D3F AD 4C 04			lda TRKDATA
  1415 8D42 18 69 09			add #$09
  1416 8D45 8D 4C 04			sta TRKDATA
  1417 8D48 90 03			scc
  1418 8D4A EE 4D 04			inc TRKDATA+1
  1419 8D4D 4C 55 8D			jmp l_03AA
  1420 8D50			l_0321
  1421
  1422 				; optimize OK (loadmid.inc), line = 115
  1423
  1424 8D50 A9 66			lda #$66
  1425 8D52 8D 07 04			sta SYSTEM.IORESULT
  1426 8D55			l_03AA
  1427 8D55			l_0311
  1428 8D55			l_02A0
  1429
  1430 				; optimize OK (loadmid.inc), line = 53
  1431
  1432 8D55 AD 07 04			lda SYSTEM.IORESULT
  1433 8D58 C9 01			cmp #$01
  1434 8D5A D0 0B			jne l_02A1w
  1435 8D5C AD 3B 04			lda TRACKCOUNT
  1436 8D5F CD 19 04			cmp TOTALTRACKS
  1437 8D62 B0 03 4C 9A 8B		jcc l_02A1
  1438 8D67			l_02A1w
  1439 8D67			b_02A1
  1440
  1441 				; optimize OK (loadmid.inc), line = 117
  1442
  1443 8D67 AD 07 04			lda SYSTEM.IORESULT
  1444 8D6A 8D 3A 04			sta RESULT
  1445
  1446 				; optimize OK (loadmid.inc), line = 118
  1447
  1448 8D6D A9 01			lda #$01
  1449 8D6F 20 67 89			jsr CIO.CLS
  1450 8D72			@exit
  1451
  1452 				; ------------------------------------------------------------
  1453
  1454 = 0438			FN	= DATAORIGIN+$0038
  1455 = 043A			RESULT	= DATAORIGIN+$003A
  1456 = 4000			LOADBUF_SIZE	= $4000
  1457 = 0001			CIO_CHN	= $01
  1458 = 043B			TRACKCOUNT	= DATAORIGIN+$003B
  1459 = 043C			CHUNKTAG	= DATAORIGIN+$003C
  1460 = 0440			V	= DATAORIGIN+$0040
  1461 = 0442			TOP	= DATAORIGIN+$0042
  1462 = 0444			ENDADR	= DATAORIGIN+$0044
  1463 = 0446			LOADSIZE	= DATAORIGIN+$0046
  1464 = 0448			LEN	= DATAORIGIN+$0048
  1465 = 044C			TRKDATA	= DATAORIGIN+$004C
  1466 = 0400			TRKDATA.STATUS	= DATAORIGIN+$0000
  1467 = 0401			TRKDATA.BANK	= DATAORIGIN+$0001
  1468 = 0402			TRKDATA.PTR	= DATAORIGIN+$0002
  1469 = 0404			TRKDATA.TRACKTIME	= DATAORIGIN+$0004
  1470 = 0408			TRKDATA._EVENT	= DATAORIGIN+$0008
  1471 = 4000			adr.RBUF	= $4000
  1472 8D72			.var RBUF	= adr.RBUF .word
  1473
  1474 = 0438			@VarData	= FN
  1475 = 0020			@VarDataSize	= 32
  1476
  1477 8D72 60				rts						; ret
  1478 = 8D73 00 40		RBUF
  1478 				.endl
  1479
  1480 8D75			.local	SETTEMPO					; PROCEDURE
  1481
  1482 				; optimize OK (settempo.inc), line = 10
  1483
  1484 8D75 A5 F5			lda _TIMERSTATUS
  1485 8D77 49 80			eor #$80
  1486 8D79 85 F5			sta _TIMERSTATUS
  1487
  1488 				; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 13
  1489
  1490 8D7B E8				inx
  1491 8D7C AD 1C 04 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  1492 8D81 AD 1D 04 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  1493 8D86 AD 1E 04 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  1494 8D8B AD 1F 04 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  1495 8D90 E8				inx
  1496 8D91 AD 34 04 95 94		mva TEMPOSHIFT :STACKORIGIN,x
  1497 8D96 AD 35 04 95 A4		mva TEMPOSHIFT+1 :STACKORIGIN+STACKWIDTH,x
  1498 8D9B AD 36 04 95 B4		mva TEMPOSHIFT+2 :STACKORIGIN+STACKWIDTH*2,x
  1499 8DA0 AD 37 04 95 C4		mva TEMPOSHIFT+3 :STACKORIGIN+STACKWIDTH*3,x
  1500 8DA5 20 12 81			jsr addEAX_ECX
  1501 8DA8 AD 1A 04 95 94		mva TICKDIV :STACKORIGIN,x
  1502 8DAD AD 1B 04 95 A4		mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
  1503 8DB2 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1504 8DB6 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1505 8DBA 20 8D 82			jsr divmulINT.DIV
  1506 8DBD CA				dex
  1507 8DBE B5 94			lda :STACKORIGIN,x
  1508 8DC0 8D 5A 04			sta _FREQ
  1509 8DC3 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1510 8DC5 8D 5B 04			sta _FREQ+1
  1511 8DC8 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1512 8DCA 8D 5C 04			sta _FREQ+2
  1513 8DCD B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1514 8DCF 8D 5D 04			sta _FREQ+3
  1515
  1516 				; optimize FAIL ('@I2F_m', settempo.inc), line = 14
  1517
  1518 8DD2 AD 5A 04 95 94		mva _FREQ :STACKORIGIN,x
  1519 8DD7 AD 5B 04 95 A4		mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1520 8DDC AD 5C 04 95 B4		mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1521 8DE1 AD 5D 04 95 C4		mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1522 8DE6 E8				inx
  1523 8DE7 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1524 8DEB A9 24 95 A4			mva #$24 :STACKORIGIN+STACKWIDTH,x
  1525 8DEF A9 74 95 B4			mva #$74 :STACKORIGIN+STACKWIDTH*2,x
  1526 8DF3 A9 49 95 C4			mva #$49 :STACKORIGIN+STACKWIDTH*3,x
  1527 8DF7 20 AD 87			jsr @I2F_m
  1528 8DFA 20 6F 86			jsr @FDIV
  1529 8DFD CA				dex
  1530 8DFE B5 94			lda :STACKORIGIN,x
  1531 8E00 8D 56 04			sta FREQ
  1532 8E03 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1533 8E05 8D 57 04			sta FREQ+1
  1534 8E08 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1535 8E0A 8D 58 04			sta FREQ+2
  1536 8E0D B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1537 8E0F 8D 59 04			sta FREQ+3
  1538
  1539 				; optimize FAIL ('@FDIV', settempo.inc), line = 15
  1540
  1541 8E12 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1542 8E16 A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1543 8E1A A9 80 95 B4			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  1544 8E1E A9 3F 95 C4			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  1545 8E22 E8				inx
  1546 8E23 AD 56 04 95 94		mva FREQ :STACKORIGIN,x
  1547 8E28 AD 57 04 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1548 8E2D AD 58 04 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1549 8E32 AD 59 04 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1550 8E37 20 6F 86			jsr @FDIV
  1551 8E3A CA				dex
  1552 8E3B B5 94			lda :STACKORIGIN,x
  1553 8E3D 8D 56 04			sta FREQ
  1554 8E40 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1555 8E42 8D 57 04			sta FREQ+1
  1556 8E45 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1557 8E47 8D 58 04			sta FREQ+2
  1558 8E4A B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1559 8E4C 8D 59 04			sta FREQ+3
  1560
  1561 				; optimize FAIL ('@FDIV', settempo.inc), line = 24
  1562
  1563 8E4F A9 F5 95 94			mva #$F5 :STACKORIGIN,x
  1564 8E53 A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1565 8E57 A9 7A 95 B4			mva #$7A :STACKORIGIN+STACKWIDTH*2,x
  1566 8E5B A9 43 95 C4			mva #$43 :STACKORIGIN+STACKWIDTH*3,x
  1567 8E5F E8				inx
  1568 8E60 AD 56 04 95 94		mva FREQ :STACKORIGIN,x
  1569 8E65 AD 57 04 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1570 8E6A AD 58 04 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1571 8E6F AD 59 04 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1572 8E74 20 6F 86			jsr @FDIV
  1573 8E77 CA				dex
  1574 8E78 B5 94			lda :STACKORIGIN,x
  1575 8E7A 8D 5F 04			sta RATIO
  1576 8E7D B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1577 8E7F 8D 60 04			sta RATIO+1
  1578 8E82 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1579 8E84 8D 61 04			sta RATIO+2
  1580 8E87 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1581 8E89 8D 62 04			sta RATIO+3
  1582
  1583 				; optimize FAIL ('@F2I', settempo.inc), line = 25
  1584
  1585 8E8C A9 01 95 94			mva #$01 :STACKORIGIN,x
  1586 8E90 E8				inx
  1587 8E91 AD 5F 04 95 94		mva RATIO :STACKORIGIN,x
  1588 8E96 AD 60 04 95 A4		mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
  1589 8E9B AD 61 04 95 B4		mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
  1590 8EA0 AD 62 04 95 C4		mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
  1591 8EA5 20 FE 86			jsr @F2I
  1592 8EA8 A9 00 95 A3			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  1593 8EAC A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1594 8EB0 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1595 8EB4 B5 93			lda :STACKORIGIN-1,x
  1596 8EB6 18 75 94			add :STACKORIGIN,x
  1597 8EB9 8D 63 04			sta _RATIO
  1598 8EBC CA				dex
  1599 8EBD CA				dex
  1600
  1601 				; optimize OK (settempo.inc), line = 26
  1602
  1603 8EBE AD 63 04			lda _RATIO
  1604 8EC1 C9 10			cmp #$10
  1605 8EC3 90 12			jcc l_0428
  1606 8EC5 A9 00			lda #$00
  1607 8EC7 8D 5F 04			sta RATIO
  1608 8ECA 8D 60 04			sta RATIO+1
  1609 8ECD A9 70			lda #$70
  1610 8ECF 8D 61 04			sta RATIO+2
  1611 8ED2 A9 41			lda #$41
  1612 8ED4 8D 62 04			sta RATIO+3
  1613 8ED7			l_0428
  1614
  1615 				; optimize OK (settempo.inc), line = 29
  1616
  1617 8ED7 A5 F5			lda _TIMERSTATUS
  1618 8ED9 29 C0			and #$C0
  1619 8EDB 0D 63 04			ora _RATIO
  1620 8EDE 85 F5			sta _TIMERSTATUS
  1621
  1622 				; optimize OK (settempo.inc), line = 30
  1623
  1624 8EE0 A9 01			lda #$01
  1625 8EE2 85 F4			sta _SUBCNT
  1626
  1627 				; optimize FAIL ('@I2F', settempo.inc), line = 32
  1628
  1629 8EE4 E8				inx
  1630 8EE5 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1631 8EE9 A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1632 8EED E8				inx
  1633 8EEE AD 56 04 95 94		mva FREQ :STACKORIGIN,x
  1634 8EF3 AD 57 04 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1635 8EF8 AD 58 04 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1636 8EFD AD 59 04 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1637 8F02 E8				inx
  1638 8F03 AD 63 04 95 94		mva _RATIO :STACKORIGIN,x
  1639 8F08 A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1640 8F0C A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1641 8F10 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1642 8F14 20 88 87			jsr @I2F
  1643 8F17 20 B8 85			jsr @FMUL
  1644 8F1A CA				dex
  1645 8F1B A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1646 8F1F A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1647 8F23 20 AD 87			jsr @I2F_m
  1648 8F26 20 6F 86			jsr @FDIV
  1649 8F29 CA				dex
  1650 8F2A 20 D8 83			jsr @FROUND
  1651 8F2D 20 FE 86			jsr @F2I
  1652 8F30 B5 94			lda :STACKORIGIN,x
  1653 8F32 8D 5E 04			sta FDIV
  1654 8F35 CA				dex
  1655
  1656 				; optimize OK (settempo.inc), line = 39
  1657
  1658 8F36 A5 F5			lda _TIMERSTATUS
  1659 8F38 49 80			eor #$80
  1660 8F3A 85 F5			sta _TIMERSTATUS
  1661
  1662 				; -------------------  ASM Block 00000072  -------------------
  1663
  1664 8F3C 78			    sei  // disable IRQ
  1665 				  // reset POKEY
  1666 8F3D A9 00		    lda #$00
  1667 8F3F A0 03		    ldy #$03
  1668 8F41 8D 08 D2		    sta AUDCTL
  1669 8F44 8D 01 D2		    sta AUDC1
  1670 8F47 8C 0F D2		    sty SKCTL
  1671 				  // setup TIMER1
  1672 8F4A 8D 08 D2		    sta AUDCTL
  1673 8F4D AD 5E 04 8D 00 D2	    mva FDIV AUDF1
  1674 				  // initialize IRQ for TIMER1
  1675 				    // lda irqens
  1676 				    // ora #$01
  1677 				    // sta irqens
  1678 				    // sta irqen
  1679 				  // start timer strobe
  1680 8F53 8D 09 D2		    sta stimer
  1681
  1682 8F56 58			    cli  // enable IRQ
  1683 				  
  1684 				; ------------------------------------------------------------
  1685
  1686 = 0456			FREQ	= DATAORIGIN+$0056
  1687 = 045A			_FREQ	= DATAORIGIN+$005A
  1688 = 045E			FDIV	= DATAORIGIN+$005E
  1689 = 045F			RATIO	= DATAORIGIN+$005F
  1690 = 0463			_RATIO	= DATAORIGIN+$0063
  1691
  1692 = 0456			@VarData	= FREQ
  1693 = 000E			@VarDataSize	= 14
  1694
  1695 8F57			@exit
  1696 					.ifdef @new
  1697 					lda <@VarData
  1698 					sta :ztmp
  1699 					lda >@VarData
  1700 					ldy #@VarDataSize-1
  1701 					jmp @FreeMem
  1702 					els
  1703 8F57 60				rts						; ret
  1704 					eif
  1705 				.endl
  1706
  1707 8F58			.local	PROCESSTRACK					; PROCEDURE | KEEP
  1708
  1709 8F58 4C 15 91			jmp l_0462
  1710
  1711 8F5B			.local	READB						; PROCEDURE | INLINE
  1712
  1713 					.MACRO m@INLINE
  1714 				
  1715 				; optimize OK (processtrack.inc), line = 11
  1716 				
  1717 					ldy #$00
  1718 					lda (_PTR),y
  1719 					sta EVENT
  1720 				
  1721 				; optimize FAIL (0, processtrack.inc), line = 12
  1722 				
  1723 					inc _ADR
  1724 					sne
  1725 					inc _ADR+1
  1726 				
  1727 				; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 13
  1728 				
  1729 					jsr MEMBOUNDCHECK
  1730 					.ENDM
  1731 8F5B			@exit
  1732 				.endl
  1733
  1734 8F5B			.local	READVARL					; PROCEDURE | ASSEMBLER
  1735
  1736 				; -------------------  ASM Block 00000073  -------------------
  1737
  1738 8F5B			    icl 'midfile/asms/readvar.asm'
Source: readvar.asm
     1 = 00F6			A equ _delta;
     2 = 00F7			B equ _delta+1;
     3 = 00F8			C equ _delta+2;
     4 = 00F9			D equ _delta+3;
     5
     6 				  .MACRO m@read2A
     7 				    ldy #0
     8 				    lda (_PTR),y
     9 				    sta A
    10 				    inc _ADR
    11 				    sne
    12 				    inc _ADR+1
    13 				    jsr MEMBOUNDCHECK
    14 				    lda A
    15 				  .ENDM
    16
    17 8F5B A0 00		  ldy #0
    18 8F5D 84 F6		  sty A
    19 8F5F 84 F7		  sty B
    20 8F61 84 F8		  sty C
    21 8F63 84 F9		  sty D
    22
    23 				// read block
    24
    25 				// read 1st byte to A
    26 8F65			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 8F65 A0 00		    ldy #0
     2 8F67 B1 E2		    lda (_PTR),y
     3 8F69 85 F6		    sta A
     4 8F6B E6 E2		    inc _ADR
     5 8F6D D0 02		    sne
     6 8F6F E6 E3		    inc _ADR+1
     7 8F71 20 DD 89		    jsr MEMBOUNDCHECK
     8 8F74 A5 F6		    lda A
Source: readvar.asm
    27
    28 8F76 10 53		  bpl endRead
    29
    30 				// move A to B and read 2nd byte to A
    31 				// B <- A = 4th readed byte
    32 8F78 29 7F			and #$7F
    33 8F7A 85 F7			sta B
    34
    35 				// read 2nd byte
    36 8F7C			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 8F7C A0 00		    ldy #0
     2 8F7E B1 E2		    lda (_PTR),y
     3 8F80 85 F6		    sta A
     4 8F82 E6 E2		    inc _ADR
     5 8F84 D0 02		    sne
     6 8F86 E6 E3		    inc _ADR+1
     7 8F88 20 DD 89		    jsr MEMBOUNDCHECK
     8 8F8B A5 F6		    lda A
Source: readvar.asm
    37
    38 8F8D 10 3C		  bpl endRead
    39
    40 				// mova B to C, A to B and read 3rd byte to A
    41 				// C <- B <- A = 4th readed byte
    42 8F8F A5 F7			lda B
    43 8F91 85 F8			sta C
    44 8F93 A5 F6			lda A
    45 8F95 29 7F			and #$7F
    46 8F97 85 F7			sta B
    47
    48 				// read 3rd
    49 8F99			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 8F99 A0 00		    ldy #0
     2 8F9B B1 E2		    lda (_PTR),y
     3 8F9D 85 F6		    sta A
     4 8F9F E6 E2		    inc _ADR
     5 8FA1 D0 02		    sne
     6 8FA3 E6 E3		    inc _ADR+1
     7 8FA5 20 DD 89		    jsr MEMBOUNDCHECK
     8 8FA8 A5 F6		    lda A
Source: readvar.asm
    50
    51 8FAA 10 1F		  bpl endRead
    52
    53 				// move C to D, B to C, A to B and read 4th byte to A
    54 				// D <- C <- B <- A = 4th readed byte
    55 8FAC A5 F8			lda C
    56 8FAE 85 F9			sta D
    57 8FB0 A5 F7			lda B
    58 8FB2 85 F8			sta C
    59 8FB4 A5 F6			lda A
    60 8FB6 29 7F			and #$7F
    61 8FB8 85 F7			sta B
    62
    63 				// read 4th
    64 8FBA			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 8FBA A0 00		    ldy #0
     2 8FBC B1 E2		    lda (_PTR),y
     3 8FBE 85 F6		    sta A
     4 8FC0 E6 E2		    inc _ADR
     5 8FC2 D0 02		    sne
     6 8FC4 E6 E3		    inc _ADR+1
     7 8FC6 20 DD 89		    jsr MEMBOUNDCHECK
     8 8FC9 A5 F6		    lda A
Source: readvar.asm
    65
    66 				// end read block
    67 8FCB			endRead:
    68
    69 				// decode block
    70 				// 'A' stays as it is
    71
    72 				// 'B' if geather than zero, lets decode
    73 8FCB A5 F7		  lda B
    74 8FCD F0 0A		  beq decodeC
    75
    76 				// 76543210
    77 				// 0bbbbbbb and %1
    78 				// 0000000b
    79 				//        |
    80 				// +------+ 7:asl
    81 				// v
    82 				// b0000000 ora A
    83 				// baaaaaaa
    84
    85 8FCF 46 F7		  lsr B
    86 8FD1 90 06		  bcc decodeC
    87
    88 8FD3 A5 F6		  lda A
    89 8FD5 09 80		  ora #$80
    90 8FD7 85 F6		  sta A
    91
    92 8FD9			decodeC:
    93 				// 'C' if geather than zero, lets decode
    94 8FD9 A5 F8		  lda C
    95 8FDB F0 12		  beq decodeD
    96
    97 				// 76543210
    98 				// 0ccccccc and %11
    99 				// 000000cc
   100 				//       ||
   101 				// +-----+| 6:asl
   102 				// |+-----+
   103 				// vv
   104 				// cc000000 ora B
   105 				// ccbbbbbb
   106 8FDD 29 03		  and #%11    // 2
   107 8FDF F0 08		  beq noOrC   // 2**
   108 8FE1 A8			  tay         // 2
   109 8FE2 B9 07 90		  lda OrC,y   // 4*
   110 8FE5 05 F7		  ora B       // 3
   111 8FE7 85 F7		  sta B       // 3
   112
   113 8FE9			noOrC:
   114 8FE9 A5 F8		  lda C       // 3
   115 8FEB 4A			  lsr @       // 2
   116 8FEC 4A			  lsr @       // 2
   117 8FED 85 F8		  sta C       // 3
   118 				              //=26*+**
   119
   120 8FEF			decodeD:
   121 				// 'D' if geather than zero, lets decode
   122 8FEF A5 F9		  lda D
   123 8FF1 F0 13		  beq endDecode
   124
   125 				// 76543210
   126 				// 0ddddddd and %111
   127 				// 00000ddd
   128 				//      |||
   129 				// +----+||
   130 				// |+----+| 5:asl
   131 				// ||+----+
   132 				// vvv
   133 				// ddd00000 ora C
   134 				// dddccccc
   135
   136 8FF3 29 07		  and #%111   // 2
   137 8FF5 F0 08		  beq noOrD   // 2**
   138 8FF7 A8			  tay         // 2
   139 8FF8 B9 0B 90		  lda OrD,y   // 4*
   140 8FFB 05 F8		  ora C       // 3
   141 8FFD 85 F8		  sta C       // 3
   142
   143 8FFF			noOrD:
   144 8FFF A5 F9		  lda D       // 3
   145 9001 4A			  lsr @       // 2
   146 9002 4A			  lsr @       // 2
   147 9003 4A			  lsr @       // 2
   148 9004 85 F9		  sta D       // 3
   149 				              //=28*+**
   150 9006			endDecode:
   151 9006 60			  rts
   152
   153 9007			OrC:
   154 9007 00			  dta %00000000
   155 9008 40			  dta %01000000
   156 9009 80			  dta %10000000
   157 900A C0			  dta %11000000
   158
   159 900B			OrD:
   160 900B 00			  dta %00000000
   161 900C 20			  dta %00100000
   162 900D 40			  dta %01000000
   163 900E 60			  dta %01100000
   164 900F 80			  dta %10000000
   165 9010 A0			  dta %10100000
   166 9011 C0			  dta %11000000
   167 9012 E0			  dta %11100000
  1739 				  
  1740 9013			@exit
  1741 					.ifdef @new
  1742 					lda <@VarData
  1743 					sta :ztmp
  1744 					lda >@VarData
  1745 					ldy #@VarDataSize-1
  1746 					jmp @FreeMem
  1747 					els
  1748 9013 60				rts						; ret
  1749 					eif
  1750 				.endl
  1751
  1752 9014			.local	READ24						; PROCEDURE | ASSEMBLER
  1753
  1754 				; -------------------  ASM Block 00000074  -------------------
  1755
  1756 9014			    icl 'midfile/asms/read24bigendian.pas'
Source: read24bigendian.pas
     1 				  .MACRO m@readByte storeTo
     2 				    ldy #0
     3 				    lda (_PTR),y
     4 				    sta :storeTo
     5 				    inc _ADR
     6 				    sne
     7 				    inc _ADR+1
     8 				    jsr MEMBOUNDCHECK
     9 				  .ENDM
    10
    11 9014			  m@readByte _delta+2
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 9014 A0 00		    ldy #0
     2 9016 B1 E2		    lda (_PTR),y
     3 9018 85 F8		    sta _DELTA+2
     4 901A E6 E2		    inc _ADR
     5 901C D0 02		    sne
     6 901E E6 E3		    inc _ADR+1
     7 9020 20 DD 89		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    12 9023			  m@readByte _delta+1
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 9023 A0 00		    ldy #0
     2 9025 B1 E2		    lda (_PTR),y
     3 9027 85 F7		    sta _DELTA+1
     4 9029 E6 E2		    inc _ADR
     5 902B D0 02		    sne
     6 902D E6 E3		    inc _ADR+1
     7 902F 20 DD 89		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    13 9032			  m@readByte _delta+0
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 9032 A0 00		    ldy #0
     2 9034 B1 E2		    lda (_PTR),y
     3 9036 85 F6		    sta _DELTA+0
     4 9038 E6 E2		    inc _ADR
     5 903A D0 02		    sne
     6 903C E6 E3		    inc _ADR+1
     7 903E 20 DD 89		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    14 9041 A9 00		  lda #0
    15 9043 85 F9		  sta _delta+3
  1757 				  
  1758 9045			@exit
  1759 					.ifdef @new
  1760 					lda <@VarData
  1761 					sta :ztmp
  1762 					lda >@VarData
  1763 					ldy #@VarDataSize-1
  1764 					jmp @FreeMem
  1765 					els
  1766 9045 60				rts						; ret
  1767 					eif
  1768 				.endl
  1769
  1770 9046			.local	EVENTMIDI3					; PROCEDURE
  1771
  1772 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 4
  1773
  1774 9046 20 F2 88			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1775
  1776 				; optimize FAIL ('m@INLINE', events.inc), line = 5
  1777
  1778 9049				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1779 9049				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9049 A0 00			ldy #$00
     5 904B B1 E2			lda (_PTR),y
     6 904D 85 FF			sta EVENT
    10 904F E6 E2			inc _ADR
    11 9051 D0 02			sne
    12 9053 E6 E3			inc _ADR+1
    16 9055 20 DD 89			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1780 					.endl
  1781 9058 20 F2 88			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1782
  1783 				; optimize FAIL ('m@INLINE', events.inc), line = 6
  1784
  1785 905B				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1786 905B				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 905B A0 00			ldy #$00
     5 905D B1 E2			lda (_PTR),y
     6 905F 85 FF			sta EVENT
    10 9061 E6 E2			inc _ADR
    11 9063 D0 02			sne
    12 9065 E6 E3			inc _ADR+1
    16 9067 20 DD 89			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1787 					.endl
  1788 906A 20 F2 88			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1789
  1790 				; optimize OK (events.inc), line = 15
  1791
  1792 906D A5 FF			lda EVENT
  1793 906F F0 12			jeq l_049D
  1794 9071 A5 E8			lda _EVENT
  1795 9073 29 F0			and #$F0
  1796 9075 C9 90			cmp #$90
  1797 9077 D0 0A			jne l_049D
  1798
  1799 				; optimize OK (events.inc), line = 16
  1800
  1801 9079 A5 E8			lda _EVENT
  1802 907B 29 0F			and #$0F
  1803 907D A8				tay
  1804 907E A5 FF			lda MC6850.MC_BYTE
  1805 9080 99 20 04			sta adr.CHNVOLUME,y
  1806 9083			l_049D
  1807 9083			@exit
  1808 					.ifdef @new
  1809 					lda <@VarData
  1810 					sta :ztmp
  1811 					lda >@VarData
  1812 					ldy #@VarDataSize-1
  1813 					jmp @FreeMem
  1814 					els
  1815 9083 60				rts						; ret
  1816 					eif
  1817 				.endl
  1818
  1819 9084			.local	EVENTMIDI2					; PROCEDURE
  1820
  1821 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 22
  1822
  1823 9084 20 F2 88			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1824
  1825 				; optimize FAIL ('m@INLINE', events.inc), line = 23
  1826
  1827 9087				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1828 9087				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9087 A0 00			ldy #$00
     5 9089 B1 E2			lda (_PTR),y
     6 908B 85 FF			sta EVENT
    10 908D E6 E2			inc _ADR
    11 908F D0 02			sne
    12 9091 E6 E3			inc _ADR+1
    16 9093 20 DD 89			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1829 					.endl
  1830 9096 20 F2 88			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1831 9099			@exit
  1832 					.ifdef @new
  1833 					lda <@VarData
  1834 					sta :ztmp
  1835 					lda >@VarData
  1836 					ldy #@VarDataSize-1
  1837 					jmp @FreeMem
  1838 					els
  1839 9099 60				rts						; ret
  1840 					eif
  1841 				.endl
  1842
  1843 909A			.local	EVENTSYSEX					; PROCEDURE
  1844
  1845 				; optimize FAIL ('READVARL', events.inc), line = 32
  1846
  1847 909A 20 5B 8F			jsr READVARL
  1848
  1849 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 34
  1850
  1851 909D 20 F2 88			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1852
  1853 				; --- WhileProlog
  1854 90A0 4C B7 90			jmp l_04BC
  1855 90A3			l_04BD
  1856
  1857 				; optimize FAIL ('m@INLINE', events.inc), line = 40
  1858
  1859 90A3				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1860 90A3				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 90A3 A0 00			ldy #$00
     5 90A5 B1 E2			lda (_PTR),y
     6 90A7 85 FF			sta EVENT
    10 90A9 E6 E2			inc _ADR
    11 90AB D0 02			sne
    12 90AD E6 E3			inc _ADR+1
    16 90AF 20 DD 89			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1861 					.endl
  1862
  1863 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 42
  1864
  1865 90B2 20 F2 88			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1866
  1867 				; optimize FAIL (0, events.inc), line = 46
  1868
  1869 90B5 C6 F6			dec _TMP
  1870 90B7			l_04BC
  1871
  1872 				; optimize OK (events.inc), line = 38
  1873
  1874 90B7 A5 F6			lda _TMP
  1875 90B9 D0 E8			jne l_04BD
  1876 90BB			@exit
  1877 					.ifdef @new
  1878 					lda <@VarData
  1879 					sta :ztmp
  1880 					lda >@VarData
  1881 					ldy #@VarDataSize-1
  1882 					jmp @FreeMem
  1883 					els
  1884 90BB 60				rts						; ret
  1885 					eif
  1886 				.endl
  1887
  1888 90BC			.local	EVENTMETA					; PROCEDURE
  1889
  1890 				; optimize FAIL ('m@INLINE', events.inc), line = 58
  1891
  1892 90BC				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  1893 90BC				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 90BC A0 00			ldy #$00
     5 90BE B1 E2			lda (_PTR),y
     6 90C0 85 FF			sta EVENT
    10 90C2 E6 E2			inc _ADR
    11 90C4 D0 02			sne
    12 90C6 E6 E3			inc _ADR+1
    16 90C8 20 DD 89			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  1894 					.endl
  1895
  1896 				; optimize FAIL ('READVARL', events.inc), line = 59
  1897
  1898 90CB 20 5B 8F			jsr READVARL
  1899
  1900 				; optimize OK (events.inc), line = 61
  1901
  1902 90CE A5 FF			lda EVENT
  1903 90D0 C9 2F			cmp #$2F
  1904 90D2 D0 0B			jne l_04E7
  1905
  1906 				; optimize FAIL (0, events.inc), line = 63
  1907
  1908 90D4 C6 DF			dec PLAYINGTRACKS
  1909
  1910 				; optimize OK (events.inc), line = 64
  1911
  1912 90D6 A5 E0			lda _STATUS
  1913 90D8 09 40			ora #$40
  1914 90DA 85 E0			sta _STATUS
  1915 90DC 4C 14 91			jmp l_04FF
  1916 90DF			l_04E7
  1917
  1918 				; optimize OK (events.inc), line = 66
  1919
  1920 90DF A5 FF			lda EVENT
  1921 90E1 C9 51			cmp #$51
  1922 90E3 D0 1D			jne l_0511
  1923
  1924 				; optimize FAIL ('READ24', events.inc), line = 68
  1925
  1926 90E5 20 14 90			jsr READ24
  1927
  1928 				; optimize OK (events.inc), line = 69
  1929
  1930 90E8 A5 F6			lda _DELTA
  1931 90EA 8D 1C 04			sta MS_PER_QNOTE
  1932 90ED A5 F7			lda _DELTA+1
  1933 90EF 8D 1D 04			sta MS_PER_QNOTE+1
  1934 90F2 A5 F8			lda _DELTA+2
  1935 90F4 8D 1E 04			sta MS_PER_QNOTE+2
  1936 90F7 A5 F9			lda _DELTA+3
  1937 90F9 8D 1F 04			sta MS_PER_QNOTE+3
  1938
  1939 				; optimize FAIL ('SETTEMPO', events.inc), line = 70
  1940
  1941 90FC 20 75 8D			jsr SETTEMPO
  1942 90FF 4C 14 91			jmp l_0521
  1943 9102			l_0511
  1944
  1945 				; --- WhileProlog
  1946 9102 4C 10 91			jmp l_0523
  1947 9105			l_0524
  1948
  1949 				; optimize FAIL (0, events.inc), line = 85
  1950
  1951 9105 C6 F6			dec _TMP
  1952
  1953 				; optimize FAIL (0, events.inc), line = 86
  1954
  1955 9107 E6 E2			inc _ADR
  1956 9109 D0 02			sne
  1957 910B E6 E3			inc _ADR+1
  1958
  1959 				; optimize FAIL ('MEMBOUNDCHECK', events.inc), line = 87
  1960
  1961 910D 20 DD 89			jsr MEMBOUNDCHECK
  1962 9110			l_0523
  1963
  1964 				; optimize OK (events.inc), line = 83
  1965
  1966 9110 A5 F6			lda _TMP
  1967 9112 D0 F1			jne l_0524
  1968 9114			l_0521
  1969 9114			l_04FF
  1970 9114			@exit
  1971 					.ifdef @new
  1972 					lda <@VarData
  1973 					sta :ztmp
  1974 					lda >@VarData
  1975 					ldy #@VarDataSize-1
  1976 					jmp @FreeMem
  1977 					els
  1978 9114 60				rts						; ret
  1979 					eif
  1980 				.endl
  1981 9115			l_0462
  1982
  1983 				; -------------------  ASM Block 00000075  -------------------
  1984
  1985 				 ldy _bank \ lda $100,y \ sta PORTB 
  1985 9115 A4 E1		 LDY _BANK 
  1985 9117 B9 00 01		 LDA $100,Y 
  1985 911A 8D 01 D3		 STA PORTB 
  1986 				; --- RepeatUntilProlog
  1987 911D			l_053B
  1988
  1989 				; optimize OK (processtrack.inc), line = 33
  1990
  1991 911D A5 E0			lda _STATUS
  1992 911F 30 2E			jmi l_0551
  1993
  1994 				; optimize FAIL ('READVARL', processtrack.inc), line = 35
  1995
  1996 9121 20 5B 8F			jsr READVARL
  1997
  1998 				; optimize OK (processtrack.inc), line = 36
  1999
  2000 9124 A5 F9			lda _DELTA+3
  2001 9126 30 24			jmi l_0563
  2002 9128 05 F8			ora _DELTA+2
  2003 912A 05 F7			ora _DELTA+1
  2004 912C 05 F6			ora _DELTA
  2005 912E F0 1C			jeq l_0563
  2006
  2007 				; optimize OK (processtrack.inc), line = 38
  2008
  2009 9130 A5 E4			lda _TRACKTIME
  2010 9132 18 65 F6			add _DELTA
  2011 9135 85 E4			sta _TRACKTIME
  2012 9137 A5 E5			lda _TRACKTIME+1
  2013 9139 65 F7			adc _DELTA+1
  2014 913B 85 E5			sta _TRACKTIME+1
  2015 913D A5 E6			lda _TRACKTIME+2
  2016 913F 65 F8			adc _DELTA+2
  2017 9141 85 E6			sta _TRACKTIME+2
  2018 9143 A5 E7			lda _TRACKTIME+3
  2019 9145 65 F9			adc _DELTA+3
  2020 9147 85 E7			sta _TRACKTIME+3
  2021 9149 4C B7 91			jmp b_053B					; break
  2022 914C			l_0563
  2023 914C 4C 55 91			jmp l_0577
  2024 914F			l_0551
  2025
  2026 				; optimize OK (processtrack.inc), line = 43
  2027
  2028 914F A5 E0			lda _STATUS
  2029 9151 29 7F			and #$7F
  2030 9153 85 E0			sta _STATUS
  2031 9155			l_0577
  2032
  2033 				; optimize OK (processtrack.inc), line = 45
  2034
  2035 9155 A0 00			ldy #$00
  2036 9157 B1 E2			lda (_PTR),y
  2037 9159 10 16			jpl l_059A
  2038
  2039 				; optimize FAIL ('m@INLINE', processtrack.inc), line = 47
  2040
  2041 915B				.local READB
  2042 915B				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 915B A0 00			ldy #$00
     5 915D B1 E2			lda (_PTR),y
     6 915F 85 FF			sta EVENT
    10 9161 E6 E2			inc _ADR
    11 9163 D0 02			sne
    12 9165 E6 E3			inc _ADR+1
    16 9167 20 DD 89			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2043 					.endl
  2044 916A A5 FF			lda EVENT
  2045 916C 85 E8			sta _EVENT
  2046 916E 4C 75 91			jmp l_05AB
  2047 9171			l_059A
  2048
  2049 				; optimize OK (processtrack.inc), line = 50
  2050
  2051 9171 A5 E8			lda _EVENT
  2052 9173 85 FF			sta EVENT
  2053 9175			l_05AB
  2054
  2055 				; optimize OK (processtrack.inc), line = 52
  2056
  2057 9175 A9 BF			lda #$BF
  2058 9177 C5 E8			cmp _EVENT
  2059 9179 90 06			jcc l_05C3
  2060
  2061 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 54
  2062
  2063 917B 20 46 90			jsr EVENTMIDI3
  2064 917E 4C AE 91			jmp l_05CE
  2065 9181			l_05C3
  2066 9181 A9 DF			lda #$DF
  2067 9183 C5 E8			cmp _EVENT
  2068 9185 90 06			jcc l_05E0
  2069
  2070 				; optimize FAIL ('EVENTMIDI2', processtrack.inc), line = 56
  2071
  2072 9187 20 84 90			jsr EVENTMIDI2
  2073 918A 4C AE 91			jmp l_05EB
  2074 918D			l_05E0
  2075 918D A9 EF			lda #$EF
  2076 918F C5 E8			cmp _EVENT
  2077 9191 90 06			jcc l_05FD
  2078
  2079 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 58
  2080
  2081 9193 20 46 90			jsr EVENTMIDI3
  2082 9196 4C AE 91			jmp l_0608
  2083 9199			l_05FD
  2084 9199 A9 F7			lda #$F7
  2085 919B C5 E8			cmp _EVENT
  2086 919D 90 06			jcc l_061A
  2087
  2088 				; optimize FAIL ('EVENTSYSEX', processtrack.inc), line = 60
  2089
  2090 919F 20 9A 90			jsr EVENTSYSEX
  2091 91A2 4C AE 91			jmp l_0625
  2092 91A5			l_061A
  2093 91A5 A5 E8			lda _EVENT
  2094 91A7 C9 FF			cmp #$FF
  2095 91A9 D0 03			jne l_0637
  2096
  2097 				; optimize FAIL ('EVENTMETA', processtrack.inc), line = 61
  2098
  2099 91AB 20 BC 90			jsr EVENTMETA
  2100 91AE			l_0637
  2101 91AE			l_0625
  2102 91AE			l_0608
  2103 91AE			l_05EB
  2104 91AE			l_05CE
  2105
  2106 				; optimize OK (processtrack.inc), line = 63
  2107
  2108 91AE A5 E0			lda _STATUS
  2109 91B0 29 40			and #$40
  2110 91B2 D0 03 4C 1D 91		jeq l_053B
  2111 91B7			b_053B
  2112
  2113 				; optimize OK (processtrack.inc), line = 65
  2114
  2115 91B7 A5 E0			lda _STATUS
  2116 91B9 09 80			ora #$80
  2117 91BB 85 E0			sta _STATUS
  2118
  2119 				; ------------------------------------------------------------
  2120
  2121 = 00FF			EVENT	= $FF
  2122 91BD			@exit
  2123 					.ifdef @new
  2124 					lda <@VarData
  2125 					sta :ztmp
  2126 					lda >@VarData
  2127 					ldy #@VarDataSize-1
  2128 					jmp @FreeMem
  2129 					els
  2130 91BD 60				rts						; ret
  2131 					eif
  2132 				.endl
  2133
  2134 91BE			.local	PROCESSMIDI					; PROCEDURE
  2135
  2136 				; optimize FAIL ('MIDI_FIFO.FIFO_PUSHDIRECT2MC6850', processmidi.inc), line = 29
  2137
  2138 91BE 20 DC 88			jsr MIDI_FIFO.FIFO_PUSHDIRECT2MC6850
  2139
  2140 				; optimize OK (processmidi.inc), line = 31
  2141
  2142 91C1 A5 F5			lda _TIMERSTATUS
  2143 91C3 10 03			jpl l_0671
  2144 91C5 4C 3F 92			jmp @exit					; exit
  2145 91C8			l_0671
  2146
  2147 				; optimize OK (processmidi.inc), line = 32
  2148
  2149 91C8 A5 DE			lda CTRK
  2150 91CA CD 19 04			cmp TOTALTRACKS
  2151 91CD D0 11			jne l_0688
  2152
  2153 				; optimize OK (processmidi.inc), line = 34
  2154
  2155 91CF A9 01			lda #$01
  2156 91D1 85 DE			sta CTRK
  2157
  2158 				; optimize OK (processmidi.inc), line = 35
  2159
  2160 91D3 AD D6 92			lda MIDTRACKS
  2161 91D6 85 DC			sta CURTRACKPTR
  2162 91D8 AD D7 92			lda MIDTRACKS+1
  2163 91DB 85 DD			sta CURTRACKPTR+1
  2164 91DD 4C ED 91			jmp l_069B
  2165 91E0			l_0688
  2166
  2167 				; optimize FAIL (0, processmidi.inc), line = 39
  2168
  2169 91E0 E6 DE			inc CTRK
  2170
  2171 				; optimize OK (processmidi.inc), line = 40
  2172
  2173 91E2 A5 DC			lda CURTRACKPTR
  2174 91E4 18 69 09			add #$09
  2175 91E7 85 DC			sta CURTRACKPTR
  2176 91E9 90 02			scc
  2177 91EB E6 DD			inc CURTRACKPTR+1
  2178 91ED			l_069B
  2179
  2180 				; -------------------  ASM Block 00000076  -------------------
  2181
  2182 				// if _status and f_stop=0 then
  2183 91ED A0 00		    ldy #0
  2184 91EF B1 DC		    lda (curTrackPtr),y
  2185 91F1 29 40		    and #f_stop
  2186 91F3 D0 4A		    bne skipProcessTrack
  2187
  2188 				// if _totalTicks>=_trackTime then ProcessTrack;
  2189 91F5 A0 07		    ldy #7
  2190 91F7 A5 F3		    lda _totalTicks+3
  2191 91F9 38 F1 DC		    sub (curTrackPtr),y
  2192 91FC D0 22		    bne L4
  2193 91FE A5 F2		    lda _totalTicks+2
  2194 9200 88			    dey
  2195 9201 38 F1 DC		    sub (curTrackPtr),y
  2196 9204 D0 0E		    bne L1
  2197 9206 A5 F1		    lda _totalTicks+1
  2198 9208 88			    dey
  2199 9209 38 F1 DC		    sub (curTrackPtr),y
  2200 920C D0 06		    bne L1
  2201 920E A5 F0		    lda _totalTicks
  2202 9210 88			    dey
  2203 9211 38 F1 DC		    sub (curTrackPtr),y
  2204 9214			  L1:
  2205 9214 F0 10		    beq L5
  2206 9216 B0 04		    bcs L3
  2207 9218 A9 FF		    lda #$ff
  2208 921A D0 0A		    bne L5
  2209 921C			  L3:
  2210 921C A9 01		    lda #$01
  2211 921E D0 06		    bne L5
  2212 9220			  L4:
  2213 9220 50 04		    bvc L5
  2214 9222 49 FF		    eor #$ff
  2215 9224 09 01		    ora #$01
  2216 9226			  L5:
  2217 9226 30 17		    jmi skipProcessTrack
  2218
  2219 				  // copy current track data to work registers
  2220 9228 A0 08		    ldy #sizeOf_TMIDTrack-1
  2221 922A			  loop:
  2222 922A B1 DC		    lda (curTrackPtr),y
  2223 922C 99 E0 00		    sta _trkRegs,y
  2224 922F 88			    dey
  2225 9230 10 F8		    bpl loop
  2226
  2227 				  
  2228 				; optimize FAIL ('PROCESSTRACK', processmidi.inc), line = 92
  2229
  2230 9232 20 58 8F			jsr PROCESSTRACK
  2231
  2232 				; -------------------  ASM Block 00000077  -------------------
  2233
  2234 				// store work registers in track data
  2235 9235 A0 08		    ldy #sizeOf_TMIDTrack-1
  2236 9237			  loop2:
  2237 9237 B9 E0 00		    lda _trkRegs,y
  2238 923A 91 DC		    sta (curTrackPtr),y
  2239 923C 88			    dey
  2240 923D 10 F8		    bpl loop2
  2241
  2242 923F			  skipProcessTrack:
  2243 				  
  2244 923F			@exit
  2245 					.ifdef @new
  2246 					lda <@VarData
  2247 					sta :ztmp
  2248 					lda >@VarData
  2249 					ldy #@VarDataSize-1
  2250 					jmp @FreeMem
  2251 					els
  2252 923F 60				rts						; ret
  2253 					eif
  2254 				.endl
  2255
  2256 9240			.local	INITTIMER					; PROCEDURE
  2257
  2258 				; optimize OK (MIDFILES), line = 84
  2259
  2260 9240 A9 00			lda #$00
  2261 9242 85 F0			sta _TOTALTICKS
  2262 9244 85 F1			sta _TOTALTICKS+1
  2263 9246 85 F2			sta _TOTALTICKS+2
  2264 9248 85 F3			sta _TOTALTICKS+3
  2265
  2266 				; optimize OK (MIDFILES), line = 85
  2267
  2268 924A 8D 34 04			sta TEMPOSHIFT
  2269 924D 8D 35 04			sta TEMPOSHIFT+1
  2270 9250 8D 36 04			sta TEMPOSHIFT+2
  2271 9253 8D 37 04			sta TEMPOSHIFT+3
  2272
  2273 				; optimize OK (MIDFILES), line = 86
  2274
  2275 9256 A9 01			lda #$01
  2276 9258 85 F5			sta _TIMERSTATUS
  2277
  2278 				; optimize OK (MIDFILES), line = 87
  2279
  2280 925A AD 19 04			lda TOTALTRACKS
  2281 925D 85 DE			sta CTRK
  2282
  2283 				; optimize OK (MIDFILES), line = 88
  2284
  2285 925F 85 DF			sta PLAYINGTRACKS
  2286
  2287 				; -------------------  ASM Block 00000078  -------------------
  2288
  2289 9261 78			    sei
  2290 9262 A9 B9 8D 10 02	    mva <INT_TIMER VTIMR1
  2291 9267 A9 89 8D 11 02	    mva >INT_TIMER VTIMR1+1
  2292 				  // reset POKEY
  2293 926C A9 00		    lda #$00
  2294 926E A0 03		    ldy #$03
  2295 9270 8D 08 D2		    sta AUDCTL
  2296 9273 8D 01 D2		    sta AUDC1
  2297 9276 8C 0F D2		    sty SKCTL
  2298 				  // setup TIMER1
  2299 9279 8D 08 D2		    sta AUDCTL
  2300 927C A5 53 8D 00 D2	    mva 83 AUDF1
  2301 				  // initialize IRQ for TIMER1
  2302 9281 A5 10		    lda irqens
  2303 9283 09 01		    ora #$01
  2304 9285 85 10		    sta irqens
  2305 9287 8D 0E D2		    sta irqen
  2306 				  // start timer strobe
  2307 928A 8D 09 D2		    sta stimer
  2308
  2309 928D 58			    cli  // enable IRQ
  2310 				  
  2311 928E			@exit
  2312 					.ifdef @new
  2313 					lda <@VarData
  2314 					sta :ztmp
  2315 					lda >@VarData
  2316 					ldy #@VarDataSize-1
  2317 					jmp @FreeMem
  2318 					els
  2319 928E 60				rts						; ret
  2320 					eif
  2321 				.endl
  2322
  2323 928F			.local	NULLLOADPRCS					; PROCEDURE
  2324
  2325 928F			@exit
  2326 					.ifdef @new
  2327 					lda <@VarData
  2328 					sta :ztmp
  2329 					lda >@VarData
  2330 					ldy #@VarDataSize-1
  2331 					jmp @FreeMem
  2332 					els
  2333 928F 60				rts						; ret
  2334 					eif
  2335 				.endl
  2336
  2337 				; ------------------------------------------------------------
  2338 				; ------------------------------------------------------------
  2339 9290			@UnitInit
  2340
  2341 				; optimize OK (MIDFILES), line = 121
  2342
  2343 9290 A9 00			lda #$00
  2344 9292 8D 30 04			sta OLDTIMERVEC
  2345 9295 8D 31 04			sta OLDTIMERVEC+1
  2346
  2347 				; optimize OK (MIDFILES), line = 122
  2348
  2349 9298 A9 8F			lda <NULLLOADPRCS
  2350 929A 8D 32 04			sta LOADPROCESS
  2351 929D A9 92			lda >NULLLOADPRCS
  2352 929F 8D 33 04			sta LOADPROCESS+1
  2353
  2354 				; optimize OK (MIDFILES), line = 123
  2355
  2356 92A2 A9 80			lda #$80
  2357 92A4 8D 1A 04			sta TICKDIV
  2358 92A7 A9 01			lda #$01
  2359 92A9 8D 1B 04			sta TICKDIV+1
  2360
  2361 				; optimize OK (MIDFILES), line = 124
  2362
  2363 92AC A9 20			lda #$20
  2364 92AE 8D 1C 04			sta MS_PER_QNOTE
  2365 92B1 A9 A1			lda #$A1
  2366 92B3 8D 1D 04			sta MS_PER_QNOTE+1
  2367 92B6 A9 07			lda #$07
  2368 92B8 8D 1E 04			sta MS_PER_QNOTE+2
  2369 92BB A9 00			lda #$00
  2370 92BD 8D 1F 04			sta MS_PER_QNOTE+3
  2371
  2372 				; optimize OK (MIDFILES), line = 125
  2373
  2374 92C0 8D 19 04			sta TOTALTRACKS
  2375
  2376 				; optimize OK (MIDFILES), line = 126
  2377
  2378 92C3 85 DE			sta CTRK
  2379
  2380 				; optimize OK (MIDFILES), line = 127
  2381
  2382 92C5 A9 80			lda #$80
  2383 92C7 85 F5			sta _TIMERSTATUS
  2384
  2385 92C9 AD 10 02			lda VTIMR1
  2386 92CC 8D 30 04			sta OLDTIMERVEC
  2387 92CF AD 11 02			lda VTIMR1+1
  2388 92D2 8D 31 04			sta OLDTIMERVEC+1
  2389
  2390 92D5 60				rts
  2391
  2392 				; ------------------------------------------------------------
  2393
  2394 = 0080			F_COUNTER	= $80
  2395 = 0040			F_TICK	= $40
  2396 = 00C0			F_FLAGS	= $C0
  2397 = 000F			F_RATIO	= $0F
  2398 = 0080			F_SKIPDELTA	= $80
  2399 = 0040			F_STOP	= $40
  2400 = 00E0			_TRKREGS	= $E0
  2401 = 0000			MID_0	= $00
  2402 = 0001			MID_1	= $01
  2403 = 0064			ERR_UNSUPPORTED_FORMAT	= $64
  2404 = 0065			ERR_NOT_ENOUGHT_MEMORY	= $65
  2405 = 0066			ERR_NOT_A_MIDI_FILE	= $66
  2406 = 6468544D		TAG_MTHD	= $6468544D
  2407 = 6B72544D		TAG_MTRK	= $6B72544D
  2408 = 0009			SIZEOF_TMIDTRACK	= $09
  2409 = 00DC			CURTRACKPTR	= $DC
  2410 = 00DE			CTRK	= $DE
  2411 = 00DF			PLAYINGTRACKS	= $DF
  2412 = 00F0			_TOTALTICKS	= $F0
  2413 = 00F4			_SUBCNT	= $F4
  2414 = 00F5			_TIMERSTATUS	= $F5
  2415 = 00F6			_DELTA	= $F6
  2416 = 00F6			_TMP	= $F6
  2417 = 00E0			_STATUS	= $E0
  2418 = 00E1			_BANK	= $E1
  2419 = 00E2			_PTR	= $E2
  2420 = 00E2			_ADR	= $E2
  2421 = 00E4			_TRACKTIME	= $E4
  2422 = 00E8			_EVENT	= $E8
  2423 = 0415			MIDDATA	= DATAORIGIN+$0015
  2424 = 0417			adr.MIDTRACKS	= [DATAORIGIN+$0017] .array [1]
  2425 92D6			.var MIDTRACKS	= adr.MIDTRACKS .word
  2426 = 0418			FORMAT	= DATAORIGIN+$0018
  2427 = 0419			TOTALTRACKS	= DATAORIGIN+$0019
  2428 = 041A			TICKDIV	= DATAORIGIN+$001A
  2429 = 041C			MS_PER_QNOTE	= DATAORIGIN+$001C
  2430 = 0420			adr.CHNVOLUME	= [DATAORIGIN+$0020] .array [16]
  2431 92D6			.var CHNVOLUME	= adr.CHNVOLUME .word
  2432 = 0430			OLDTIMERVEC	= DATAORIGIN+$0030
  2433 = 0432			LOADPROCESS	= DATAORIGIN+$0032
  2434 = 0434			TEMPOSHIFT	= DATAORIGIN+$0034
  2435
  2436 = 92D6 17 04		MIDTRACKS
  2436 = 92D8 20 04		CHNVOLUME
  2436 				.endl							; UNIT MIDFILES
  2437
  2438 				; ------------------------------------------------------------
  2439
  2440 92DA			.local	MISC						; UNIT
  2441
  2442 				; ------------------------------------------------------------
  2443
  2444 = 0101			adr.BANKS	= $0101
  2445 92DA			.var BANKS	= adr.BANKS .word
  2446 = FFF7			DETECTOS	= $FFF7
  2447
  2448 = 92DA 01 01		BANKS
  2448 				.endl							; UNIT MISC
  2449
  2450 92DC			.local	SETCOLORS					; PROCEDURE | ASSEMBLER
  2451
  2452 				; -------------------  ASM Block 00000089  -------------------
  2453
  2454 92DC			  icl 'asms/setColors.a65'
Source: setColors.a65
     1 = 0088			colptr = $88
     2
     3 92DC AD 7B A6		  lda colors
     4 92DF 85 88		  sta colptr
     5 92E1 AD 7C A6		  lda colors+1
     6 92E4 85 89		  sta colptr+1
     7
     8 92E6 A5 4A		  lda playerStatus
     9 92E8 29 01		  and #ps_colorSet
    10 92EA F0 0B		  beq skip
    11 92EC A5 88		  lda colptr
    12 92EE 18 69 05		  add #5
    13 92F1 85 88		  sta colptr
    14 92F3 90 02 E6 89		  scc:inc colptr+1
    15
    16 92F7			skip:
    17 92F7 A0 04		  ldy #4
    18 92F9			copyColors:
    19 92F9 B1 88		  lda (colptr),y
    20 92FB 99 16 D0		  sta $D016,y
    21 92FE 99 C4 02		  sta 708,y
    22 9301 88			  dey
    23 9302 10 F5		  bpl copyColors
  2455
  2456 9304			@exit
  2457 					.ifdef @new
  2458 					lda <@VarData
  2459 					sta :ztmp
  2460 					lda >@VarData
  2461 					ldy #@VarDataSize-1
  2462 					jmp @FreeMem
  2463 					els
  2464 9304 60				rts						; ret
  2465 					eif
  2466 				.endl
  2467
  2468 9305			.local	INVERS						; PROCEDURE | ASSEMBLER | REGISTER
  2469 9305 85 88			sta CHARS
  2470
  2471 				; -------------------  ASM Block 00000090  -------------------
  2472
  2473 9307			  icl 'asms/invers.a65'
Source: invers.a65
     1 9307 A8			  tay // ldy spaces
     2 9308 D0 01 60		  sne:rts
     3 930B 88			  dey
     4 930C			loop:
     5 930C B1 D4		  lda (scradr),y
     6 930E 49 80		  eor #$80
     7 9310 91 D4		  sta (scradr),y
     8 9312 88			  dey
     9 9313 10 F7		  bpl loop
  2474
  2475 				; ------------------------------------------------------------
  2476
  2477 = 0088			CHARS	= :EDX
  2478 9315			@exit
  2479 					.ifdef @new
  2480 					lda <@VarData
  2481 					sta :ztmp
  2482 					lda >@VarData
  2483 					ldy #@VarDataSize-1
  2484 					jmp @FreeMem
  2485 					els
  2486 9315 60				rts						; ret
  2487 					eif
  2488 				.endl
  2489
  2490 9316			.local	PUTSPACES					; PROCEDURE | ASSEMBLER | REGISTER
  2491 9316 85 88			sta SPACES
  2492
  2493 				; -------------------  ASM Block 00000091  -------------------
  2494
  2495 9318			  icl 'asms/put_spaces.a65'
Source: put_spaces.a65
     1 9318 A8			  tay // ldy spaces
     2 9319 D0 01 60		  sne:rts
     3 931C A9 00		  lda #0
     4 931E			loop:
     5 931E 88			  dey
     6 931F 91 D4		  sta (scradr),y
     7 9321 D0 FB		  bne loop
  2496
  2497 				; ------------------------------------------------------------
  2498
  2499 = 0088			SPACES	= :EDX
  2500 9323			@exit
  2501 					.ifdef @new
  2502 					lda <@VarData
  2503 					sta :ztmp
  2504 					lda >@VarData
  2505 					ldy #@VarDataSize-1
  2506 					jmp @FreeMem
  2507 					els
  2508 9323 60				rts						; ret
  2509 					eif
  2510 				.endl
  2511
  2512 9324			.local	PUTINTTEXT					; PROCEDURE | ASSEMBLER | REGISTER
  2513
  2514 				; -------------------  ASM Block 00000092  -------------------
  2515
  2516 9324			  icl 'asms/putinttext.a65'
Source: putinttext.a65
     1 = 0088			  regptr = $88
     2
     3 9324 A5 89		  lda s+1
     4 9326 85 89		  sta regptr+1
     5 9328 A5 88		  lda s
     6 932A 85 88		  sta regptr
     7
     8 932C A0 00		  ldy #0
     9 932E B1 88		  lda (regptr),y
    10 9330 F0 1A		  beq exitPutText
    11
    12 9332 48 A8		  pha:tay
    13 9334 88			  dey
    14 9335 E6 88		  inc regptr
    15 9337 D0 02 E6 89		  sne:inc regptr+1
    16
    17 933B			putText:
    18 933B B1 88		  lda (regptr),y   // get string character
    19 933D 91 D4		  sta (scradr),y   // put on screen
    20 933F 88			  dey
    21 9340 10 F9		  bpl putText
    22
    23 9342 68			  pla
    24 9343 18			  clc
    25 9344 65 D4		  adc scradr
    26 9346 85 D4		  sta scradr
    27 9348 90 02 E6 D5		  scc:inc scradr+1
    28
    29 934C			exitPutText:
  2517
  2518 				; ------------------------------------------------------------
  2519
  2520 = 0088			S	= :EDX
  2521 934C			@exit
  2522 					.ifdef @new
  2523 					lda <@VarData
  2524 					sta :ztmp
  2525 					lda >@VarData
  2526 					ldy #@VarDataSize-1
  2527 					jmp @FreeMem
  2528 					els
  2529 934C 60				rts						; ret
  2530 					eif
  2531 				.endl
  2532
  2533 934D			.local	PUTASCTEXT					; PROCEDURE | ASSEMBLER | REGISTER
  2534
  2535 				; -------------------  ASM Block 00000093  -------------------
  2536
  2537 934D			  icl 'asms/putasctext.a65'
Source: putasctext.a65
     1 = 0088			  regptr = $88
     2
     3 934D 8A 48		  txa:pha
     4
     5 934F A0 00		  ldy #0
     6 9351 B1 88		  lda (regptr),y
     7 9353 F0 26		  beq exitPutText
     8
     9 9355 48 A8		  pha:tay
    10 9357 88			  dey
    11 9358 E6 88		  inc regptr
    12 935A D0 02 E6 89		  sne:inc regptr+1
    13
    14 935E			putText:
    15 935E B1 88		  lda (regptr),y   // get string character
    16
    17 9360			atasci2antic:
    18 9360 0A			  asl
    19 9361 69 C0		  adc #$c0
    20 9363 10 02 49 40		  spl:eor #$40
    21 9367 4A			  lsr
    22 9368 90 02 49 80		  scc:eor #$80
    23
    24 936C 91 D4		  sta (scradr),y   // put on screen
    25 936E 88			  dey
    26 936F 10 ED		  bpl putText
    27
    28 9371 68			  pla
    29 9372 18			  clc
    30 9373 65 D4		  adc scradr
    31 9375 85 D4		  sta scradr
    32 9377 90 02 E6 D5		  scc:inc scradr+1
    33
    34 937B			exitPutText:
    35 937B 68 AA		  pla:tax
  2538
  2539 				; ------------------------------------------------------------
  2540
  2541 = 0088			S	= :EDX
  2542 937D			@exit
  2543 					.ifdef @new
  2544 					lda <@VarData
  2545 					sta :ztmp
  2546 					lda >@VarData
  2547 					ldy #@VarDataSize-1
  2548 					jmp @FreeMem
  2549 					els
  2550 937D 60				rts						; ret
  2551 					eif
  2552 				.endl
  2553
  2554 937E			.local	PUTHEX						; PROCEDURE | ASSEMBLER
  2555
  2556 				; -------------------  ASM Block 00000094  -------------------
  2557
  2558 937E			  icl 'asms/puthex.a65'
Source: puthex.a65
     1 				// store `scradr` value as a operand of opcode
     2 937E 8A 48		  txa:pha
     3
     4 9380 A5 D4		  lda scradr
     5 9382 8D C6 93		  sta screen
     6 9385 A5 D5		  lda scradr+1
     7 9387 8D C7 93		  sta screen+1
     8 938A AD 79 04		  lda v
     9 938D 8D AF 93		  sta vadr1
    10 9390 8D B7 93		  sta vadr2
    11 9393 AD 7A 04		  lda v+1
    12 9396 8D B0 93		  sta vadr1+1
    13 9399 8D B8 93		  sta vadr2+1
    14
    15 939C A9 00		  lda #0
    16 939E 8D DB 93		  sta _vofs
    17
    18 				// get nibbles to show, if =0 exit
    19 93A1 AC 7B 04		  ldy n
    20 93A4 F0 32		  beq stop
    21
    22 93A6			hexLoop:
    23 93A6 AE DB 93		  ldx _vofs
    24 93A9 98			  tya
    25 93AA 29 01		  and #1
    26 93AC D0 08		  bne HiNibble
    27 93AE BD 00 F0		  lda vadr1:$f000,x
    28 93B1 29 0F		  and #$0f
    29 93B3 4C C0 93		  jmp put2screen
    30 93B6			HiNibble:
    31 93B6 BD 00 F0		  lda vadr2:$f000,x
    32 93B9 4A 4A 4A 4A		  :4 lsr @
    33 93BD EE DB 93		  inc _vofs
    34
    35 93C0			put2screen:
    36 93C0 AA			  tax
    37 93C1 BD DC 93		  lda hexTab,x
    38 				//  ora puttextinvert
    39 93C4 88			  dey
    40 93C5 99 00 F0		  sta screen:$f000,y
    41
    42 93C8 C0 00		  cpy #0
    43 93CA D0 DA		  bne hexLoop
    44
    45 93CC			calcEndAddr:
    46 93CC A5 D4		  lda scradr
    47 93CE 18			  clc
    48 93CF 6D 7B 04		  adc n
    49 93D2 85 D4		  sta scradr
    50 93D4 90 02		  bcc stop
    51 93D6 E6 D5		  inc scradr+1
    52
    53 93D8			stop:
    54 93D8 68 AA		  pla:tax
    55 93DA 60			  rts
    56
    57 93DB			_vofs
    58 93DB 00			  .by 0
    59 93DC			hexTab:
    60 93DC 10 11 12 13 14 15 +   dta d'0123456789ABCDEF'
  2559
  2560 				; ------------------------------------------------------------
  2561
  2562 = 0479			V	= DATAORIGIN+$0079
  2563 = 047B			N	= DATAORIGIN+$007B
  2564
  2565 = 0479			@VarData	= V
  2566 = 0003			@VarDataSize	= 3
  2567
  2568 93EC			@exit
  2569 					.ifdef @new
  2570 					lda <@VarData
  2571 					sta :ztmp
  2572 					lda >@VarData
  2573 					ldy #@VarDataSize-1
  2574 					jmp @FreeMem
  2575 					els
  2576 93EC 60				rts						; ret
  2577 					eif
  2578 				.endl
  2579
  2580 93ED			.local	PUTINT						; PROCEDURE | ASSEMBLER
  2581
  2582 				; -------------------  ASM Block 00000095  -------------------
  2583
  2584 93ED			  icl 'asms/int2str.a65'
Source: int2str.a65
     1 = 0000			EOL = 0
     2
     3 93ED A5 D4		    lda scradr
     4 93EF 8D 39 94		    sta screen1
     5 93F2 8D 50 94		    sta screen2
     6 93F5 A5 D5		    lda scradr+1
     7 93F7 8D 3A 94		    sta screen1+1
     8 93FA 8D 51 94		    sta screen2+1
     9
    10 93FD			INT2STR:
    11 93FD A0 00		    ldy #0
    12 93FF 8C 5E 94		    sty _cnt
    13 9402			ITSNEXT:
    14 9402 A2 00		    ldx #0
    15 9404			ITSSLP:
    16 9404 AD 7C 04		    lda value
    17 9407 38			    sec
    18 9408 F9 5F 94		    sbc Pow10Tab,Y
    19 940B 8D 7C 04		    sta value
    20 940E AD 7D 04		    lda value+1
    21 9411 C8			    iny
    22 9412 F9 5F 94		    sbc Pow10Tab,Y
    23 9415 90 08		    bcc ITSADD
    24 9417 8D 7D 04		    sta value+1
    25 941A E8			    inx
    26 941B 88			    dey
    27 941C 18			    clc
    28 941D 90 E5		    bcc ITSSLP
    29 941F			ITSADD:
    30 941F 88			    dey
    31 9420 AD 7C 04		    lda value
    32 9423 79 5F 94		    adc Pow10Tab,Y
    33 9426 8D 7C 04		    sta value
    34 9429 8A			    txa
    35 942A 09 10		    ora #$10
    36
    37 				; skip lead zeros
    38 942C AE 5E 94		    ldx _cnt
    39 942F D0 04		    bne storeDigit
    40 9431 C9 10		    cmp #$10
    41 9433 F0 09		    beq skipDigit
    42
    43 9435			storeDigit:
    44 9435 0D 77 04		    ora puttextinvert
    45 9438 9D 00 F0		    sta screen1:$f000,X
    46 943B EE 5E 94		    inc _cnt
    47 943E			skipDigit:
    48 943E C8			    iny
    49 943F C8			    iny
    50 9440 C0 08		    cpy #8
    51 9442 90 BE		    bcc ITSNEXT
    52
    53 				; last digit
    54 9444 AD 7C 04		    lda value
    55 9447 09 10		    ora #$10
    56 9449 AE 5E 94		    ldx _cnt
    57 944C 0D 77 04		    ora puttextinvert
    58 944F 9D 00 F0		    sta screen2:$f000,X
    59 9452 E8			    inx
    60
    61 				; set screen addres to the end of value
    62 9453 8A			    txa
    63 9454 18			    clc
    64 9455 65 D4		    adc scradr
    65 9457 85 D4		    sta scradr
    66 9459 90 02		    bcc stop
    67 945B E6 D5		    inc scradr+1
    68
    69 945D			stop:
    70 945D 60			    rts
    71
    72 945E			_cnt
    73 945E 00			    .by 0
    74 945F			Pow10Tab
    75 945F 10 27		    .wo 10000
    76 9461 E8 03		    .wo 1000
    77 9463 64 00		    .wo 100
    78 9465 0A 00		    .wo 10
  2585
  2586 				; ------------------------------------------------------------
  2587
  2588 = 047C			VALUE	= DATAORIGIN+$007C
  2589
  2590 = 047C			@VarData	= VALUE
  2591 = 0002			@VarDataSize	= 2
  2592
  2593 9467			@exit
  2594 					.ifdef @new
  2595 					lda <@VarData
  2596 					sta :ztmp
  2597 					lda >@VarData
  2598 					ldy #@VarDataSize-1
  2599 					jmp @FreeMem
  2600 					els
  2601 9467 60				rts						; ret
  2602 					eif
  2603 				.endl
  2604
  2605 9468			.local	HLINE						; PROCEDURE | ASSEMBLER
  2606
  2607 				; -------------------  ASM Block 00000096  -------------------
  2608
  2609 9468			  icl 'asms/hline.a65'
Source: hline.a65
     1 9468 A0 27		  ldy #39
     2 946A A9 4A		  lda #$4a
     3 946C			loop:
     4 946C 91 D4		  sta (scradr),y
     5 946E 88			  dey
     6 946F 10 FB		  bpl loop
  2610
  2611 9471			@exit
  2612 					.ifdef @new
  2613 					lda <@VarData
  2614 					sta :ztmp
  2615 					lda >@VarData
  2616 					ldy #@VarDataSize-1
  2617 					jmp @FreeMem
  2618 					els
  2619 9471 60				rts						; ret
  2620 					eif
  2621 				.endl
  2622
  2623 9472			.local	CLEARWORKAREA					; PROCEDURE | ASSEMBLER
  2624
  2625 				; -------------------  ASM Block 00000097  -------------------
  2626
  2627 9472			  icl 'asms/clear_workarea.a65'
Source: clear_workarea.a65
     1 9472 A0 00		  ldy #0
     2 9474 A9 00		  lda #0
     3 9476			loop1:
     4 9476 99 E8 37		  sta SCREEN_WORK,y
     5 9479 99 E8 38		  sta SCREEN_WORK+$100,y
     6 947C C8			  iny
     7 947D D0 F7		  bne loop1
     8 947F A0 A8		  ldy #$A8
     9 9481			loop2:
    10 9481 99 E7 39		  sta SCREEN_WORK+$1FF,y
    11 9484 88			  dey
    12 9485 D0 FA		  bne loop2
  2628
  2629 9487			@exit
  2630 					.ifdef @new
  2631 					lda <@VarData
  2632 					sta :ztmp
  2633 					lda >@VarData
  2634 					ldy #@VarDataSize-1
  2635 					jmp @FreeMem
  2636 					els
  2637 9487 60				rts						; ret
  2638 					eif
  2639 				.endl
  2640
  2641 9488			.local	GETFILEEXT					; PROCEDURE | ASSEMBLER | REGISTER
  2642
  2643 				; -------------------  ASM Block 00000098  -------------------
  2644
  2645 9488			  icl 'asms/get_file_ext.a65'
Source: get_file_ext.a65
     1 = 0088			hlpptr = $88
     2 = 04F8			result = $4f8
     3
     4 9488 A9 00		  lda #0
     5 948A 8D F8 04		  sta result
     6 948D 8D F9 04		  sta result+1
     7 9490 8D FA 04		  sta result+2
     8 9493 8D FB 04		  sta result+3
     9
    10 9496 A0 00		  ldy #0
    11 9498 B1 88		  lda (hlpptr),y
    12 949A 8D C7 94		  sta fnlen
    13 949D F0 27		  beq endGetFileExt
    14 949F A8			  tay
    15
    16 94A0			dotSearch:
    17 94A0 B1 88		  lda (hlpptr),y
    18 94A2 C9 2E		  cmp #'.'
    19 94A4 F0 05		  beq endDotSearch
    20 94A6 88			  dey
    21 94A7 D0 F7		  bne dotSearch
    22 94A9 F0 1B		  beq endGetFileExt
    23
    24 94AB			endDotSearch:
    25 94AB 8C C8 94		  sty extst
    26 94AE AD C7 94		  lda fnlen
    27 94B1 38			  sec
    28 94B2 ED C8 94		  sbc extst
    29 94B5 C9 04		  cmp #4
    30 94B7 B0 0D		  bcs endGetFileExt
    31
    32 94B9 C8			  iny
    33 94BA AA			  tax
    34 94BB F0 09		  beq endGetFileExt
    35
    36 94BD			copyExt2Result:
    37 94BD B1 88		  lda (hlpptr),y
    38 94BF 9D F8 04		  sta result,x
    39 94C2 C8			  iny
    40 94C3 CA			  dex
    41 94C4 D0 F7		  bne copyExt2Result
    42
    43 94C6			endGetFileExt:
    44 94C6 60			  rts
    45
    46 94C7 00			fnlen .byte 0
    47 94C8 00			extst .byte 0
  2646
  2647 				; ------------------------------------------------------------
  2648
  2649 = 0088			FN	= :EDX
  2650 94C9			@exit
  2651 					.ifdef @new
  2652 					lda <@VarData
  2653 					sta :ztmp
  2654 					lda >@VarData
  2655 					ldy #@VarDataSize-1
  2656 					jmp @FreeMem
  2657 					els
  2658 94C9 60				rts						; ret
  2659 					eif
  2660 				.endl
  2661
  2662 94CA			.local	REDUCEFILENAME					; PROCEDURE | ASSEMBLER | REGISTER
  2663
  2664 				; -------------------  ASM Block 00000099  -------------------
  2665
  2666 94CA			  icl 'asms/reduce_filename.a65'
Source: reduce_filename.a65
     1 = 0088			inreg  = $88
     2 = 008C			outReg = $8c
     3
     4 94CA 8A 48		  txa:pha
     5
     6 94CC A5 88		  lda inreg
     7 94CE 8D E0 94		  sta inptr
     8 94D1 A5 89		  lda inreg+1
     9 94D3 8D E1 94		  sta inptr+1
    10
    11 				; 0123456789abcdef01
    12 				;  *:FILENAMEEXT 000
    13
    14 94D6 A9 0B		  lda #$0b
    15 94D8 8D EB 94		  sta fpos
    16
    17 94DB A2 03		  ldx #3
    18 94DD A0 01		  ldy #1
    19
    20 94DF			fnLoop:
    21 94DF BD 00 20		  lda inptr:$2000,x
    22 94E2 C9 20		  cmp #' '
    23 94E4 F0 03		  beq skip
    24 94E6 91 8C		  sta (outreg),y
    25 94E8 C8			  iny
    26 94E9			skip:
    27 94E9 E8			  inx
    28 94EA E0 0B		  cpx fpos:#11
    29 94EC D0 F1		  bne fnLoop
    30
    31 94EE			dot:
    32 94EE E0 0E		  cpx #$0e
    33 94F0 F0 0B		  beq storeDot
    34
    35 94F2 98 48		  tya:pha
    36 94F4 C8			  iny
    37 94F5 A9 0E		  lda #$0e
    38 94F7 8D EB 94		  sta fpos
    39 94FA 4C DF 94		  jmp fnLoop
    40
    41 94FD			storeDot:
    42 94FD 88			  dey
    43 94FE 98 AA		  tya:tax   // move Y to X - string length
    44 9500 68 A8		  pla:tay   // pop stored dot position
    45 9502 A9 2E		  lda #'.'
    46 9504 91 8C		  sta (outreg),y
    47
    48 9506 8A			  txa       // move string length to Accu
    49 9507 A0 00		  ldy #0
    50 9509 91 8C		  sta (outreg),y
    51
    52 950B 68 AA		  pla:tax
  2667
  2668 				; ------------------------------------------------------------
  2669
  2670 = 0088			INFN	= :EDX
  2671 = 008C			OUTFN	= :ECX
  2672 950D			@exit
  2673 					.ifdef @new
  2674 					lda <@VarData
  2675 					sta :ztmp
  2676 					lda >@VarData
  2677 					ldy #@VarDataSize-1
  2678 					jmp @FreeMem
  2679 					els
  2680 950D 60				rts						; ret
  2681 					eif
  2682 				.endl
  2683
  2684 950E			.local	GETDEVICESPEC					; FUNCTION | ASSEMBLER | REGISTER
  2685
  2686 				; -------------------  ASM Block 00000101  -------------------
  2687
  2688 950E			  icl 'asms/getDeviceSpec.a65'
Source: getDeviceSpec.a65
     1 = 0088			fnreg   = $88
     2 = 008C			specreg = $8c
     3
     4 950E			getDeviceSpec:
     5 950E A0 01		  ldy #1
     6 9510			colonLoop:
     7 9510 B1 88		  lda (fnreg),y
     8 9512 C9 3A		  cmp #':'
     9 9514 F0 0A		  beq foundSpec
    10 9516 C8			  iny
    11 9517 C0 04		  cpy #4
    12 9519 D0 F5		  bne colonLoop
    13
    14 951B			specNotFound:
    15 951B A9 00		  lda #0
    16 				  ; tay
    17 				  ; sta (specreg),y
    18 951D 85 90		  sta result
    19 951F 60			  rts
    20
    21 9520			foundSpec:
    22 9520 98			  tya
    23 9521 A0 00		  ldy #0
    24 9523 91 8C		  sta (specreg),y
    25 9525 A8			  tay
    26
    27 9526			copySpec:
    28 9526 B1 88		  lda (fnreg),y
    29 9528 91 8C		  sta (specreg),y
    30 952A 88			  dey
    31 952B D0 F9		  bne copySpec
    32
    33 952D A9 01		  lda #1
    34 952F 85 90		  sta result
  2689
  2690 9531			@exit
  2691
  2692 				; ------------------------------------------------------------
  2693
  2694 = 0088			FN	= :EDX
  2695 = 008C			SPEC	= :ECX
  2696 = 0090			RESULT	= :STACKORIGIN-4
  2697 9531 60				rts						; ret
  2698 				.endl
  2699
  2700 9532			.local	JOINSTRINGS					; PROCEDURE | ASSEMBLER | REGISTER
  2701
  2702 				; -------------------  ASM Block 00000102  -------------------
  2703
  2704 9532			  icl 'asms/joinStrings.a65'
Source: joinStrings.a65
     1 9532			JoinStrings:
     2
     3 9532 8A 48		    txa:pha
     4
     5 9534 A0 00		    ldy #0
     6 9536 B1 88		    lda (s1),y
     7 9538 8D 45 95		    sta devlen
     8 953B A2 01		    ldx #1
     9
    10 953D			copyS1:
    11 953D C8			    iny
    12 953E B1 88		    lda (s1),y
    13 9540 9D 80 05		    sta adr.outstr,x
    14 9543 E8			    inx
    15 9544 C0 00		    cpy devlen:#00
    16 9546 D0 F5		    bne copyS1
    17
    18 9548			nextCopy:
    19 9548 A0 00		    ldy #0
    20 954A B1 8C		    lda (s2),y
    21 954C 8D 57 95		    sta fnlen
    22
    23 954F			copyS2:
    24 954F C8			    iny
    25 9550 B1 8C		    lda (s2),y
    26 9552 9D 80 05		    sta adr.outstr,x
    27 9555 E8			    inx
    28 9556 C0 00		    cpy fnlen:#00
    29 9558 D0 F5		    bne copyS2
    30
    31 955A CA			    dex
    32 955B 8E 80 05		    stx adr.outstr
    33
    34 955E 68 AA		    pla:tax
    35 9560 60			    rts
  2705
  2706 				; ------------------------------------------------------------
  2707
  2708 = 0088			S1	= :EDX
  2709 = 008C			S2	= :ECX
  2710 9561			@exit
  2711 					.ifdef @new
  2712 					lda <@VarData
  2713 					sta :ztmp
  2714 					lda >@VarData
  2715 					ldy #@VarDataSize-1
  2716 					jmp @FreeMem
  2717 					els
  2718 9561 60				rts						; ret
  2719 					eif
  2720 				.endl
  2721
  2722 9562			.local	GETLN						; PROCEDURE | ASSEMBLER | REGISTER
  2723
  2724 				; -------------------  ASM Block 00000103  -------------------
  2725
  2726 9562			  icl 'asms/get_line.a65'
Source: get_line.a65
     1 9562 8A 48		  txa:pha
     2
     3 9564 A5 88		  lda chn
     4 9566 0A 0A 0A 0A		  :4 asl @
     5 956A AA			  tax
     6
     7 956B A9 05		  lda #5
     8 956D 9D 42 03		  sta iccmd,x
     9
    10 9570 A5 8D		  lda buf+1
    11 9572 9D 45 03		  sta icbufa+1,x
    12 9575 A5 8C		  lda buf
    13 9577 18 69 01		  add #1
    14 957A 9D 44 03		  sta icbufa,x
    15 957D 90 03 FE 45 03	  scc:inc icbufa+1,X
    16
    17 9582 A9 80		  lda #$80
    18 9584 9D 48 03		  sta icbufl,x
    19 9587 A9 00		  lda #0
    20 9589 9D 49 03		  sta icbufl+1,x
    21
    22 958C			  m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 958C EE 01 D3				inc portb
     6 958F 20 56 E4				jsr CIOV
     8 9592 CE 01 D3				dec portb
Source: get_line.a65
    23 9595 8C 07 04		  sty MAIN.SYSTEM.IOResult
    24
    25 9598 BD 48 03		  lda icbufl,x
    26 959B A0 00		  ldy #0
    27 959D 91 8C		  sta (buf),y
    28
    29 959F 68 AA		  pla:tax
  2727
  2728 				; ------------------------------------------------------------
  2729
  2730 = 0088			CHN	= :EDX
  2731 = 008C			BUF	= :ECX
  2732 95A1			@exit
  2733 					.ifdef @new
  2734 					lda <@VarData
  2735 					sta :ztmp
  2736 					lda >@VarData
  2737 					ldy #@VarDataSize-1
  2738 					jmp @FreeMem
  2739 					els
  2740 95A1 60				rts						; ret
  2741 					eif
  2742 				.endl
  2743
  2744 95A2			.local	MYNMI						; PROCEDURE | ASSEMBLER | INTERRUPT
  2745
  2746 				; -------------------  ASM Block 00000104  -------------------
  2747
  2748 95A2			  icl 'asms/nmi.a65'
Source: nmi.a65
     1 = 0012			RTCLOK = $12
     2 = D209			KBCODE = $d209
     3 = D20F			SKSTAT = $d20f
     4 = D40F			NMIRES = $d40f
     5
     6 = 022B			SRTIMR = $022b
     7 = 026D			KEYDIS = $026d
     8 = 02DA			KEYREP = $02da
     9 = 02F1			KEYDEL = $02f1
    10 = 02FC			CH     = $02fc
    11 = 02C0			PCOLR0 = $02c0
    12 = D012			COLPM0 = $d012
    13
    14 				// systemowa procedure obsługi RTClock ($C0E2)
    15 95A2 D8			    cld
    16 95A3 8D E6 95		    sta rega
    17 95A6 8E E8 95		    stx regx
    18 95A9 8C EA 95		    sty regy
    19 95AC 8D 0F D4		    STA NMIRES
    20
    21 95AF E6 14		    inc RTCLOK+2
    22 95B1			end_rtclk:
    23
    24 95B1			skipTHI:
    25 				// fragment systemowej procedury kopiowania rejestrów kolorów
    26 				//    ldx #$08
    27 				//colloop:
    28 				//    lda PCOLR0,x
    29 				//    sta COLPM0,x
    30 				//    dex
    31 				//    bpl colloop
    32
    33 				// systemowa procedura obsługi klawiatry ($C1A1)
    34 95B1 AD 0F D2		    lda SKSTAT
    35 95B4 29 04		    and #$04
    36 95B6 F0 08		    beq skip_keyDelay
    37 95B8 AD F1 02		    lda KEYDEL
    38 95BB F0 03		    beq skip_keyDelay
    39 95BD CE F1 02		    dec KEYDEL
    40
    41 95C0			skip_keyDelay:
    42 95C0 AD 2B 02		    lda SRTIMR
    43 95C3 F0 20		    beq end_key
    44
    45 95C5 AD 0F D2		    lda SKSTAT
    46 95C8 29 04		    and #$04
    47 95CA D0 14		    bne skip_key
    48
    49 95CC CE 2B 02		    dec SRTIMR
    50 95CF D0 14		    bne end_key
    51 95D1 AD DA 02		    lda KEYREP
    52 95D4 8D 2B 02		    sta SRTIMR
    53
    54 95D7 AD 09 D2		    lda KBCODE
    55 95DA 8D FC 02		    sta CH
    56 95DD 4C E5 95		    jmp end_key
    57
    58 95E0			skip_key:
    59 95E0 A9 00		    lda #$00
    60 95E2 8D 2B 02		    sta SRTIMR
    61
    62 95E5			end_key:
    63
    64 95E5 A9 00		    lda rega:#0
    65 95E7 A2 00		    ldx regx:#0
    66 95E9 A0 00		    ldy regy:#0
  2749
  2750 95EB 40				rti						; ret
  2751 				.endl
  2752
  2753 95EC			.local	IMMEDIATEVBLK					; PROCEDURE | ASSEMBLER | INTERRUPT
  2754
  2755 				; -------------------  ASM Block 00000105  -------------------
  2756
  2757 = 0012			RTCLOK = $12
  2758 = E45F			JSYSVB = $E45F
  2759
  2760 				  // pha
  2761 				  // txa:pha
  2762
  2763 95EC A5 14		  lda RTCLOK+2
  2764 95EE 29 03		  and #%11
  2765 95F0 D0 11		  bne skipTHI
  2766
  2767 95F2 A6 1F		  ldx thi
  2768 95F4 30 0D		  bmi skipTHI
  2769 95F6 BD 06 96		  lda thumblr,x
  2770 95F9 8D CC 3A		  sta SCREEN_STATUS
  2771 95FC CA			  dex
  2772 95FD 10 02 A2 03		  spl:ldx #3
  2773 9601 86 1F		  stx thi
  2774
  2775 9603			skipTHI:
  2776 				  // pla:tax
  2777 				  // pla
  2778
  2779 9603 4C 00 00		  JMP OLD_VBLKI:0000
  2780 				  // jmp JSYSVB
  2781
  2782 9606			thumblr:
  2783 9606 29 1C 1D 1E		    .byte $29,$1c,$1d,$1e
  2784
  2785 960A 40				rti						; ret
  2786 				.endl
  2787
  2788 960B			.local	SETNMI						; PROCEDURE
  2789
  2790 				; optimize OK (mynmi.inc), line = 48
  2791
  2792 960B AD FA FF			lda NMIVEC
  2793 960E 8D 80 04			sta OLDNMIVEC
  2794 9611 AD FB FF			lda NMIVEC+1
  2795 9614 8D 81 04			sta OLDNMIVEC+1
  2796
  2797 				; optimize OK (mynmi.inc), line = 49
  2798
  2799 9617 AD 22 02			lda VVBLKI
  2800 961A 8D 7E 04			sta OLDVVBLKI
  2801 961D AD 23 02			lda VVBLKI+1
  2802 9620 8D 7F 04			sta OLDVVBLKI+1
  2803
  2804 				; optimize OK (mynmi.inc), line = 50
  2805
  2806 9623 A9 00			lda #$00
  2807 9625 8D 0E D4			sta NMIEN
  2808
  2809 				; -------------------  ASM Block 00000106  -------------------
  2810
  2811 9628 8A 48		    txa:pha
  2812 962A AD 22 02		    lda VVBLKI
  2813 962D 8D 04 96		    sta ImmediateVBLK.OLD_VBLKI
  2814 9630 AD 23 02		    lda VVBLKI+1
  2815 9633 8D 05 96		    sta ImmediateVBLK.OLD_VBLKI+1
  2816 9636 EE 01 D3		    inc PORTB
  2817 9639 A9 06		    lda #6
  2818 963B A0 EC		    ldy #<ImmediateVBLK
  2819 963D A2 95		    ldx #>ImmediateVBLK
  2820 963F 20 5C E4		    jsr $e45c
  2821 9642 CE 01 D3		    dec PORTB
  2822 9645 68 AA		    pla:tax
  2823 				  
  2824 				; optimize OK (mynmi.inc), line = 66
  2825
  2826 9647 A9 A2			lda <MYNMI
  2827 9649 8D FA FF			sta NMIVEC
  2828 964C A9 95			lda >MYNMI
  2829 964E 8D FB FF			sta NMIVEC+1
  2830
  2831 				; optimize OK (mynmi.inc), line = 67
  2832
  2833 9651 A9 40			lda #$40
  2834 9653 8D 0E D4			sta NMIEN
  2835 9656			@exit
  2836 					.ifdef @new
  2837 					lda <@VarData
  2838 					sta :ztmp
  2839 					lda >@VarData
  2840 					ldy #@VarDataSize-1
  2841 					jmp @FreeMem
  2842 					els
  2843 9656 60				rts						; ret
  2844 					eif
  2845 				.endl
  2846
  2847 9657			.local	UNSETNMI					; PROCEDURE
  2848
  2849 				; optimize OK (mynmi.inc), line = 72
  2850
  2851 9657 A9 00			lda #$00
  2852 9659 8D 0E D4			sta NMIEN
  2853
  2854 				; optimize OK (mynmi.inc), line = 73
  2855
  2856 965C AD 7E 04			lda OLDVVBLKI
  2857 965F 8D 22 02			sta VVBLKI
  2858 9662 AD 7F 04			lda OLDVVBLKI+1
  2859 9665 8D 23 02			sta VVBLKI+1
  2860
  2861 				; optimize OK (mynmi.inc), line = 74
  2862
  2863 9668 AD 80 04			lda OLDNMIVEC
  2864 966B 8D FA FF			sta NMIVEC
  2865 966E AD 81 04			lda OLDNMIVEC+1
  2866 9671 8D FB FF			sta NMIVEC+1
  2867
  2868 				; optimize OK (mynmi.inc), line = 75
  2869
  2870 9674 A9 40			lda #$40
  2871 9676 8D 0E D4			sta NMIEN
  2872 9679			@exit
  2873 					.ifdef @new
  2874 					lda <@VarData
  2875 					sta :ztmp
  2876 					lda >@VarData
  2877 					ldy #@VarDataSize-1
  2878 					jmp @FreeMem
  2879 					els
  2880 9679 60				rts						; ret
  2881 					eif
  2882 				.endl
  2883
  2884 967A			.local	KEYSCAN2ASC					; FUNCTION | ASSEMBLER
  2885 967A 8D 82 04			sta KEYSCAN
  2886
  2887 				; -------------------  ASM Block 00000107  -------------------
  2888
  2889 967D			  icl 'asms/keyscan2asc.a65'
Source: keyscan2asc.a65
     1 967D A0 00		    ldy #0
     2 967F			loop:
     3 967F B9 9C 96		    lda scan2asc,y
     4 9682 F0 05		    beq skip
     5 9684 CD 82 04		    cmp keyscan
     6 9687 F0 0B		    beq found
     7 9689			skip:
     8 9689 C8			    iny
     9 968A C0 40		    cpy #64
    10 968C D0 F1		    bne loop
    11
    12 968E			notFound:
    13 968E A9 00		    lda #0
    14 9690 8D 83 04		    sta Result
    15 9693 60			    rts
    16
    17 9694			found:
    18 9694 98			    tya
    19 9695 18 69 20		    add #32
    20 9698 8D 83 04		    sta Result
    21
    22 969B 60			    rts
    23
    24 969C			scan2asc:        // from 32 to 95
    25 969C 21			    .byte 33   //   space
    26 969D 5F			    .byte 95   // ! exclamation mark
    27 969E 00			    .byte 0  // " quote mark
    28 969F 5A			    .byte 90   // # hash
    29 96A0 00			    .byte 0  // $ dolar
    30 96A1 5D			    .byte 93   // % percent
    31 96A2 00			    .byte 0  // & and
    32 96A3 00			    .byte 0  // '
    33 96A4 00			    .byte 0  // (
    34 96A5 00			    .byte 0  // )
    35 96A6 07			    .byte 7    // * star
    36 96A7 00			    .byte 0  // + plus
    37 96A8 00			    .byte 0  //  comma
    38 96A9 0E			    .byte 14   // - hypen
    39 96AA 22			    .byte 34   // . dot
    40 96AB 26			    .byte 38   // / slash
    41 96AC 32 1F 1E 1A 18 1D +     .byte 50,31,30,26,24,29,27,51,53,48 // 0-9 digits
    42 96B6 42			    .byte 66   // :colon
    43 96B7 00			    .byte 0  // ; semicolon
    44 96B8 36			    .byte 54   // < less sign
    45 96B9 00			    .byte 0  // = equal
    46 96BA 37			    .byte 55   // > more sign
    47 96BB 66			    .byte 102  // ? question mark
    48 96BC 00			    .byte 0  // @ at
    49 96BD 3F 15 12 3A 2A 38 +     .byte 63,21,18,58,42,56,61,57,13,1,5,0,37,35,8,10,47,40,62,45,11,16,46,22,43,23 // A-Z letters
    50 96D7 00			    .byte 0  // [
    51 96D8 46			    .byte 70   // \ backslash
    52 96D9 00			    .byte 0  // ]
    53 96DA 00			    .byte 0  // ^
    54 96DB 4E			    .byte 78    // _ underscore mark
  2890
  2891 96DC			@exit
  2892
  2893 				; ------------------------------------------------------------
  2894
  2895 = 0482			KEYSCAN	= DATAORIGIN+$0082
  2896 = 0483			RESULT	= DATAORIGIN+$0083
  2897
  2898 = 0482			@VarData	= KEYSCAN
  2899 = 0001			@VarDataSize	= 1
  2900
  2901 96DC 60				rts						; ret
  2902 				.endl
  2903
  2904 96DD			.local	RESET_MIDI					; PROCEDURE | ASSEMBLER
  2905
  2906 				; -------------------  ASM Block 00000108  -------------------
  2907
  2908 96DD 8A 48		  txa:pha
  2909 96DF A2 00		  ldx #0
  2910 96E1			sendData:
  2911 96E1 BD F4 96		  lda GM_RESET,x
  2912 96E4 85 FF		  sta MAIN.MIDI_FIFO.FIFO_Byte
  2913 96E6 20 F2 88		  jsr MAIN.MIDI_FIFO.FIFO_WriteByte
  2914 96E9 E8			  inx
  2915 96EA E0 06		  cpx #6
  2916 96EC D0 F3		  bne sendData
  2917 96EE 20 0B 89		  jsr MAIN.MIDI_FIFO.FIFO_Flush
  2918 96F1 68 AA		  pla:tax
  2919 96F3 60			  rts
  2920 96F4			GM_RESET:
  2921 96F4 F0 7E 7F 09 01 F7	  .byte $f0, $7e, $7f, $09, $01, $f7
  2922
  2923 96FA			@exit
  2924 					.ifdef @new
  2925 					lda <@VarData
  2926 					sta :ztmp
  2927 					lda >@VarData
  2928 					ldy #@VarDataSize-1
  2929 					jmp @FreeMem
  2930 					els
  2931 96FA 60				rts						; ret
  2932 					eif
  2933 				.endl
  2934
  2935 96FB			.local	STOPMIDI					; PROCEDURE
  2936
  2937 				; optimize OK (helpers.inc), line = 34
  2938
  2939 96FB A5 F5			lda MIDFILES._TIMERSTATUS
  2940 96FD 09 80			ora #$80
  2941 96FF 85 F5			sta MIDFILES._TIMERSTATUS
  2942
  2943 				; optimize OK (helpers.inc), line = 35
  2944
  2945 9701 A9 00			lda #$00
  2946 9703 85 F0			sta MIDFILES._TOTALTICKS
  2947 9705 85 F1			sta MIDFILES._TOTALTICKS+1
  2948 9707 85 F2			sta MIDFILES._TOTALTICKS+2
  2949 9709 85 F3			sta MIDFILES._TOTALTICKS+3
  2950 970B A9 01			lda #$01
  2951 970D 85 F4			sta MIDFILES._SUBCNT
  2952
  2953 				; optimize OK (helpers.inc), line = 36
  2954
  2955 970F 78				sei
  2956 9710 AD 30 04 8D 10 02		mva MIDFILES.OLDTIMERVEC VTIMR1
  2957 9716 AD 31 04 8D 11 02		mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
  2958 971C A5 10			lda irqens
  2959 971E 29 FE			and #$fe
  2960 9720 85 10			sta irqens
  2961 9722 8D 0E D2			sta irqen
  2962 9725 58				cli
  2963
  2964 				; optimize FAIL ('RESET_MIDI', helpers.inc), line = 37
  2965
  2966 9726 20 DD 96			jsr RESET_MIDI
  2967 9729			@exit
  2968 					.ifdef @new
  2969 					lda <@VarData
  2970 					sta :ztmp
  2971 					lda >@VarData
  2972 					ldy #@VarDataSize-1
  2973 					jmp @FreeMem
  2974 					els
  2975 9729 60				rts						; ret
  2976 					eif
  2977 				.endl
  2978
  2979 972A			.local	RESETMEMORYPTR					; PROCEDURE
  2980
  2981 				; optimize OK (helpers.inc), line = 42
  2982
  2983 972A A5 4B			lda TOTALXMS
  2984 972C 8D 6A 04			sta LAST_BANK
  2985
  2986 				; optimize OK (helpers.inc), line = 43
  2987
  2988 972F A5 4B			lda TOTALXMS
  2989 9731 F0 0D			jeq l_0753
  2990
  2991 				; optimize OK (helpers.inc), line = 44
  2992
  2993 9733 A9 00			lda #$00
  2994 9735 8D 6B 04			sta LAST_ADR
  2995 9738 A9 40			lda #$40
  2996 973A 8D 6C 04			sta LAST_ADR+1
  2997 973D 4C 4A 97			jmp l_0761
  2998 9740			l_0753
  2999
  3000 				; optimize OK (helpers.inc), line = 46
  3001
  3002 9740 A9 00			lda #$00
  3003 9742 8D 6B 04			sta LAST_ADR
  3004 9745 A9 D8			lda #$D8
  3005 9747 8D 6C 04			sta LAST_ADR+1
  3006 974A			l_0761
  3007 974A			@exit
  3008 					.ifdef @new
  3009 					lda <@VarData
  3010 					sta :ztmp
  3011 					lda >@VarData
  3012 					ldy #@VarDataSize-1
  3013 					jmp @FreeMem
  3014 					els
  3015 974A 60				rts						; ret
  3016 					eif
  3017 				.endl
  3018
  3019 974B			.local	CLEARSTATUS					; PROCEDURE
  3020
  3021 				; optimize OK (helpers.inc), line = 56
  3022
  3023 974B A9 00			lda #$00
  3024 974D A0 3B			ldy #$3B
  3025 974F 99 B8 3A 88 10 FA		sta:rpl $3AB8,y-
  3026
  3027 				; optimize OK (helpers.inc), line = 57
  3028
  3029 9755 A9 B8			lda #$B8
  3030 9757 85 D4			sta SCRADR
  3031 9759 A9 3A			lda #$3A
  3032 975B 85 D5			sta SCRADR+1
  3033 975D A9 02			lda #$02
  3034 975F 85 88			sta PUTINTTEXT.S
  3035 9761 A9 80			lda #$80
  3036 9763 85 89			sta PUTINTTEXT.S+1
  3037 9765 20 24 93			jsr PUTINTTEXT
  3038
  3039 				; optimize FAIL ('STATUSLOOP', helpers.inc), line = 58
  3040
  3041 9768 20 A4 98			jsr STATUSLOOP
  3042
  3043 				; optimize OK (helpers.inc), line = 59
  3044
  3045 976B A9 CC			lda #$CC
  3046 976D 85 D4			sta SCRADR
  3047 976F A9 3A			lda #$3A
  3048 9771 85 D5			sta SCRADR+1
  3049 9773 20 68 94			jsr HLINE
  3050
  3051 				; optimize OK (helpers.inc), line = 60
  3052
  3053 9776 A9 10			lda #$10
  3054 9778 85 8C			sta :ecx
  3055 977A A5 4B			lda TOTALXMS
  3056 977C 85 84			sta :eax
  3057 					.ifdef fmulinit
  3058 					fmulu_8
  3059 					els
  3060 977E 20 C2 82			imulCL
  3061 					eif
  3062 9781 A5 84			lda :eax
  3063 9783 18 69 23			add #$23
  3064 9786 8D 87 04			sta MEMAVAILABLE
  3065 9789 A5 85			lda :eax+1
  3066 978B 69 00			adc #$00
  3067 978D 8D 88 04			sta MEMAVAILABLE+1
  3068
  3069 				; optimize OK (helpers.inc), line = 61
  3070
  3071 9790 C9 27			cmp #$27
  3072 9792 D0 05			bne @+
  3073 9794 AD 87 04			lda MEMAVAILABLE
  3074 9797 C9 10			cmp #$10
  3075 				@
  3076 9799 B0 08			jcs l_0798
  3077 979B A9 E9			lda #$E9
  3078 979D 85 D4			sta SCRADR
  3079 979F A9 3A			lda #$3A
  3080 97A1 85 D5			sta SCRADR+1
  3081 97A3			l_0798
  3082
  3083 				; optimize OK (helpers.inc), line = 62
  3084
  3085 97A3 AD 88 04			lda MEMAVAILABLE+1
  3086 97A6 C9 03			cmp #$03
  3087 97A8 D0 05			bne @+
  3088 97AA AD 87 04			lda MEMAVAILABLE
  3089 97AD C9 E8			cmp #$E8
  3090 				@
  3091 97AF B0 08			jcs l_07B0
  3092 97B1 A9 EA			lda #$EA
  3093 97B3 85 D4			sta SCRADR
  3094 97B5 A9 3A			lda #$3A
  3095 97B7 85 D5			sta SCRADR+1
  3096 97B9			l_07B0
  3097
  3098 				; optimize OK (helpers.inc), line = 63
  3099
  3100 97B9 AD 88 04			lda MEMAVAILABLE+1
  3101 97BC D0 0F			jne l_07C8
  3102 97BE AD 87 04			lda MEMAVAILABLE
  3103 97C1 C9 64			cmp #$64
  3104 97C3 B0 08			jcs l_07C8
  3105 97C5 A9 EB			lda #$EB
  3106 97C7 85 D4			sta SCRADR
  3107 97C9 A9 3A			lda #$3A
  3108 97CB 85 D5			sta SCRADR+1
  3109 97CD			l_07C8
  3110
  3111 				; optimize OK (helpers.inc), line = 64
  3112
  3113 97CD AD 88 04			lda MEMAVAILABLE+1
  3114 97D0 D0 0F			jne l_07E0
  3115 97D2 AD 87 04			lda MEMAVAILABLE
  3116 97D5 C9 0A			cmp #$0A
  3117 97D7 B0 08			jcs l_07E0
  3118 97D9 A9 EC			lda #$EC
  3119 97DB 85 D4			sta SCRADR
  3120 97DD A9 3A			lda #$3A
  3121 97DF 85 D5			sta SCRADR+1
  3122 97E1			l_07E0
  3123
  3124 				; optimize OK (helpers.inc), line = 65
  3125
  3126 97E1 A5 D4			lda SCRADR
  3127 97E3 8D 85 04			sta OSCRADR
  3128 97E6 A5 D5			lda SCRADR+1
  3129 97E8 8D 86 04			sta OSCRADR+1
  3130
  3131 				; optimize OK (helpers.inc), line = 66
  3132
  3133 97EB A9 09			lda #$09
  3134 97ED 85 88			sta PUTINTTEXT.S
  3135 97EF A9 80			lda #$80
  3136 97F1 85 89			sta PUTINTTEXT.S+1
  3137 97F3 20 24 93			jsr PUTINTTEXT
  3138 97F6 AD 87 04			lda MEMAVAILABLE
  3139 97F9 8D 7C 04			sta PUTINT.VALUE
  3140 97FC AD 88 04			lda MEMAVAILABLE+1
  3141 97FF 8D 7D 04			sta PUTINT.VALUE+1
  3142 9802 20 ED 93			jsr PUTINT
  3143 9805 A9 0F			lda #$0F
  3144 9807 85 88			sta PUTINTTEXT.S
  3145 9809 A9 80			lda #$80
  3146 980B 85 89			sta PUTINTTEXT.S+1
  3147 980D 20 24 93			jsr PUTINTTEXT
  3148
  3149 				; optimize OK (helpers.inc), line = 67
  3150
  3151 9810 AD 00 05			lda adr.FN
  3152 9813 8D 84 04			sta L
  3153
  3154 				; optimize OK (helpers.inc), line = 68
  3155
  3156 9816 D0 03			jne l_0808
  3157 9818 4C 4B 98			jmp @exit					; exit
  3158 981B			l_0808
  3159
  3160 				; optimize OK (helpers.inc), line = 69
  3161
  3162 981B AD 84 04			lda L
  3163 981E C9 11			cmp #$11
  3164 9820 90 05			jcc l_081D
  3165 9822 A9 10			lda #$10
  3166 9824 8D 00 05			sta adr.FN+$00
  3167 9827			l_081D
  3168
  3169 				; optimize OK (helpers.inc), line = 70
  3170
  3171 9827 AD 85 04			lda OSCRADR
  3172 982A AC 86 04			ldy OSCRADR+1
  3173 982D 38 ED 84 04			sub L
  3174 9831 B0 01			scs
  3175 9833 88				dey
  3176 9834 38 E9 01			sub #$01
  3177 9837 85 D4			sta SCRADR
  3178 9839 B0 01			scs
  3179 983B 88				dey
  3180 983C 84 D5			sty SCRADR+1
  3181 983E AD 77 A6			lda FN
  3182 9841 85 88			sta PUTASCTEXT.S
  3183 9843 AD 78 A6			lda FN+1
  3184 9846 85 89			sta PUTASCTEXT.S+1
  3185 9848 20 4D 93			jsr PUTASCTEXT
  3186
  3187 				; ------------------------------------------------------------
  3188
  3189 = 0484			L	= DATAORIGIN+$0084
  3190 = 0485			OSCRADR	= DATAORIGIN+$0085
  3191 = 0487			MEMAVAILABLE	= DATAORIGIN+$0087
  3192
  3193 = 0484			@VarData	= L
  3194 = 0005			@VarDataSize	= 5
  3195
  3196 984B			@exit
  3197 					.ifdef @new
  3198 					lda <@VarData
  3199 					sta :ztmp
  3200 					lda >@VarData
  3201 					ldy #@VarDataSize-1
  3202 					jmp @FreeMem
  3203 					els
  3204 984B 60				rts						; ret
  3205 					eif
  3206 				.endl
  3207
  3208 984C			.local	CLEARUVMETERS					; PROCEDURE | ASSEMBLER
  3209
  3210 				; -------------------  ASM Block 00000109  -------------------
  3211
  3212 984C			  icl 'asms/uvmeters_clear.a65'
Source: uvmeters_clear.a65
     1 984C			clearUVMeter:
     2 984C 8A 48		  txa:pha
     3
     4 984E A9 12		  lda #<SCREEN_CHANNELS
     5 9850 85 D4		  sta scradr
     6 9852 A9 38		  lda #>SCREEN_CHANNELS
     7 9854 85 D5		  sta scradr+1
     8
     9 9856 A2 00		  ldx #0
    10 9858			clearLoop:
    11 9858 A0 03		  ldy #3
    12 985A A9 41		  lda #$41
    13 985C			VClr:
    14 985C 91 D4		  sta (scradr),y
    15 985E 88			  dey
    16 985F 91 D4		  sta (scradr),y
    17 9861 88			  dey
    18 9862 91 D4		  sta (scradr),y
    19 9864 88			  dey
    20 9865 91 D4		  sta (scradr),y
    21 9867 88			  dey
    22
    23 9868			dontClear:
    24 9868 A5 D4		  lda scradr
    25 986A 18 69 28		  add #40
    26 986D 85 D4		  sta scradr
    27 986F 90 02 E6 D5		  scc:inc scradr+1
    28
    29 9873 E8			  inx
    30 9874 E0 10		  cpx #16
    31 9876 D0 E0		  bne clearLoop
    32
    33 9878 68 AA		  pla:tax
  3213
  3214 987A			@exit
  3215 					.ifdef @new
  3216 					lda <@VarData
  3217 					sta :ztmp
  3218 					lda >@VarData
  3219 					ldy #@VarDataSize-1
  3220 					jmp @FreeMem
  3221 					els
  3222 987A 60				rts						; ret
  3223 					eif
  3224 				.endl
  3225
  3226 987B			.local	EXIT2DOS					; PROCEDURE
  3227
  3228 				; optimize FAIL ('STOPMIDI', helpers.inc), line = 81
  3229
  3230 987B 20 FB 96			jsr STOPMIDI
  3231
  3232 				; optimize OK (helpers.inc), line = 82
  3233
  3234 987E A9 00			lda #$00
  3235 9880 20 67 89			jsr CIO.CLS
  3236 9883 A9 00			lda #$00
  3237 9885 8D 0F 04			sta CIO.OPN.CHN
  3238 9888 A9 0C			lda #$0C
  3239 988A 8D 10 04			sta CIO.OPN.AX1
  3240 988D A9 00			lda #$00
  3241 988F 8D 11 04			sta CIO.OPN.AX2
  3242 9892 A9 13			lda #$13
  3243 9894 8D 12 04			sta CIO.OPN.DEVICE
  3244 9897 A9 80			lda #$80
  3245 9899 8D 13 04			sta CIO.OPN.DEVICE+1
  3246 989C 20 29 89			jsr CIO.OPN
  3247 989F A9 01			lda #$01
  3248 98A1 85 41			sta SOUNDR
  3249 98A3			@exit
  3250 					.ifdef @new
  3251 					lda <@VarData
  3252 					sta :ztmp
  3253 					lda >@VarData
  3254 					ldy #@VarDataSize-1
  3255 					jmp @FreeMem
  3256 					els
  3257 98A3 60				rts						; ret
  3258 					eif
  3259 				.endl
  3260
  3261 98A4			.local	STATUSLOOP					; PROCEDURE
  3262
  3263 				; optimize OK (status.inc), line = 11
  3264
  3265 98A4 A9 BE			lda #$BE
  3266 98A6 85 D4			sta SCRADR
  3267 98A8 A9 3A			lda #$3A
  3268 98AA 85 D5			sta SCRADR+1
  3269
  3270 				; optimize OK (status.inc), line = 12
  3271
  3272 98AC A5 4A			lda PLAYERSTATUS
  3273 98AE 29 0C			and #$0C
  3274 98B0 4A				lsr @
  3275 98B1 4A				lsr @
  3276 98B2 85 D7			sta V
  3277
  3278 				; optimize OK (status.inc), line = 13
  3279
  3280 98B4 0A				asl @
  3281 98B5 A8				tay
  3282 98B6 B9 0A 81			lda adr.SLOOP,y
  3283 98B9 85 88			sta PUTINTTEXT.S
  3284 98BB B9 0B 81			lda adr.SLOOP+1,y
  3285 98BE 85 89			sta PUTINTTEXT.S+1
  3286 98C0 20 24 93			jsr PUTINTTEXT
  3287
  3288 				; ------------------------------------------------------------
  3289
  3290 = 810A			adr.SLOOP	= CODEORIGIN+$010A
  3291 98C3			.var SLOOP	= adr.SLOOP .word
  3292 98C3			@exit
  3293 					.ifdef @new
  3294 					lda <@VarData
  3295 					sta :ztmp
  3296 					lda >@VarData
  3297 					ldy #@VarDataSize-1
  3298 					jmp @FreeMem
  3299 					els
  3300 98C3 60				rts						; ret
  3301 					eif
  3302 = 98C4 0A 81		SLOOP
  3302 				.endl
  3303
  3304 98C6			.local	STATUSPLAYING					; PROCEDURE
  3305
  3306 				; optimize OK (status.inc), line = 18
  3307
  3308 98C6 A9 B8			lda #$B8
  3309 98C8 85 D4			sta SCRADR
  3310 98CA A9 3A			lda #$3A
  3311 98CC 85 D5			sta SCRADR+1
  3312
  3313 				; optimize OK (status.inc), line = 19
  3314
  3315 98CE AD 19 04			lda MIDFILES.TOTALTRACKS
  3316 98D1 F0 39			jeq l_087E
  3317
  3318 				; optimize OK (status.inc), line = 21
  3319
  3320 98D3 A9 27			lda #$27
  3321 98D5 85 88			sta PUTINTTEXT.S
  3322 98D7 A9 80			lda #$80
  3323 98D9 85 89			sta PUTINTTEXT.S+1
  3324 98DB 20 24 93			jsr PUTINTTEXT
  3325
  3326 				; optimize OK (status.inc), line = 22
  3327
  3328 98DE A9 CD			lda #$CD
  3329 98E0 85 D4			sta SCRADR
  3330 98E2 A9 3A			lda #$3A
  3331 98E4 85 D5			sta SCRADR+1
  3332 98E6 A9 2E			lda #$2E
  3333 98E8 85 88			sta PUTINTTEXT.S
  3334 98EA A9 80			lda #$80
  3335 98EC 85 89			sta PUTINTTEXT.S+1
  3336 98EE 20 24 93			jsr PUTINTTEXT
  3337
  3338 				; optimize OK (status.inc), line = 23
  3339
  3340 98F1 A5 4A			lda PLAYERSTATUS
  3341 98F3 29 40			and #$40
  3342 98F5 F0 0C			jeq l_089D
  3343
  3344 				; optimize FAIL ('MIDFILES.INITTIMER', status.inc), line = 25
  3345
  3346 98F7 20 40 92			jsr MIDFILES.INITTIMER
  3347
  3348 				; optimize OK (status.inc), line = 26
  3349
  3350 98FA A5 4A			lda PLAYERSTATUS
  3351 98FC 49 40			eor #$40
  3352 98FE 85 4A			sta PLAYERSTATUS
  3353 9900 4C 09 99			jmp l_08B2
  3354 9903			l_089D
  3355
  3356 				; optimize OK (status.inc), line = 29
  3357
  3358 9903 A5 F5			lda MIDFILES._TIMERSTATUS
  3359 9905 29 7F			and #$7F
  3360 9907 85 F5			sta MIDFILES._TIMERSTATUS
  3361 9909			l_08B2
  3362 9909 4C 2A 99			jmp l_08C8
  3363 990C			l_087E
  3364
  3365 				; optimize OK (status.inc), line = 33
  3366
  3367 990C A9 02			lda #$02
  3368 990E 85 88			sta PUTINTTEXT.S
  3369 9910 A9 80			lda #$80
  3370 9912 85 89			sta PUTINTTEXT.S+1
  3371 9914 20 24 93			jsr PUTINTTEXT
  3372
  3373 				; optimize OK (status.inc), line = 34
  3374
  3375 9917 A9 CD			lda #$CD
  3376 9919 85 D4			sta SCRADR
  3377 991B A9 3A			lda #$3A
  3378 991D 85 D5			sta SCRADR+1
  3379 991F A9 39			lda #$39
  3380 9921 85 88			sta PUTINTTEXT.S
  3381 9923 A9 80			lda #$80
  3382 9925 85 89			sta PUTINTTEXT.S+1
  3383 9927 20 24 93			jsr PUTINTTEXT
  3384 992A			l_08C8
  3385 992A			@exit
  3386 					.ifdef @new
  3387 					lda <@VarData
  3388 					sta :ztmp
  3389 					lda >@VarData
  3390 					ldy #@VarDataSize-1
  3391 					jmp @FreeMem
  3392 					els
  3393 992A 60				rts						; ret
  3394 					eif
  3395 				.endl
  3396
  3397 992B			.local	STATUSPAUSE					; PROCEDURE
  3398
  3399 				; optimize OK (status.inc), line = 40
  3400
  3401 992B A5 4A			lda PLAYERSTATUS
  3402 992D 29 40			and #$40
  3403 992F F0 03			jeq l_08EA
  3404 9931 4C 60 99			jmp @exit					; exit
  3405 9934			l_08EA
  3406
  3407 				; optimize OK (status.inc), line = 41
  3408
  3409 9934 A9 B8			lda #$B8
  3410 9936 85 D4			sta SCRADR
  3411 9938 A9 3A			lda #$3A
  3412 993A 85 D5			sta SCRADR+1
  3413 993C A9 44			lda #$44
  3414 993E 85 88			sta PUTINTTEXT.S
  3415 9940 A9 80			lda #$80
  3416 9942 85 89			sta PUTINTTEXT.S+1
  3417 9944 20 24 93			jsr PUTINTTEXT
  3418
  3419 				; optimize OK (status.inc), line = 42
  3420
  3421 9947 A9 CD			lda #$CD
  3422 9949 85 D4			sta SCRADR
  3423 994B A9 3A			lda #$3A
  3424 994D 85 D5			sta SCRADR+1
  3425 994F A9 4B			lda #$4B
  3426 9951 85 88			sta PUTINTTEXT.S
  3427 9953 A9 80			lda #$80
  3428 9955 85 89			sta PUTINTTEXT.S+1
  3429 9957 20 24 93			jsr PUTINTTEXT
  3430
  3431 				; optimize OK (status.inc), line = 43
  3432
  3433 995A A5 F5			lda MIDFILES._TIMERSTATUS
  3434 995C 09 80			ora #$80
  3435 995E 85 F5			sta MIDFILES._TIMERSTATUS
  3436 9960			@exit
  3437 					.ifdef @new
  3438 					lda <@VarData
  3439 					sta :ztmp
  3440 					lda >@VarData
  3441 					ldy #@VarDataSize-1
  3442 					jmp @FreeMem
  3443 					els
  3444 9960 60				rts						; ret
  3445 					eif
  3446 				.endl
  3447
  3448 9961			.local	STATUSSTOPPED					; PROCEDURE
  3449
  3450 				; optimize OK (status.inc), line = 48
  3451
  3452 9961 AD 19 04			lda MIDFILES.TOTALTRACKS
  3453 9964 D0 03			jne l_0919
  3454 9966 4C C3 99			jmp @exit					; exit
  3455 9969			l_0919
  3456
  3457 				; optimize OK (status.inc), line = 49
  3458
  3459 9969 A5 4A			lda PLAYERSTATUS
  3460 996B 29 40			and #$40
  3461 996D F0 03			jeq l_0932
  3462 996F 4C C3 99			jmp @exit					; exit
  3463 9972			l_0932
  3464
  3465 				; optimize OK (status.inc), line = 50
  3466
  3467 9972 A5 4A			lda PLAYERSTATUS
  3468 9974 09 40			ora #$40
  3469 9976 85 4A			sta PLAYERSTATUS
  3470
  3471 				; optimize OK (status.inc), line = 51
  3472
  3473 9978 A9 B8			lda #$B8
  3474 997A 85 D4			sta SCRADR
  3475 997C A9 3A			lda #$3A
  3476 997E 85 D5			sta SCRADR+1
  3477 9980 A9 56			lda #$56
  3478 9982 85 88			sta PUTINTTEXT.S
  3479 9984 A9 80			lda #$80
  3480 9986 85 89			sta PUTINTTEXT.S+1
  3481 9988 20 24 93			jsr PUTINTTEXT
  3482
  3483 				; optimize OK (status.inc), line = 52
  3484
  3485 998B A9 CD			lda #$CD
  3486 998D 85 D4			sta SCRADR
  3487 998F A9 3A			lda #$3A
  3488 9991 85 D5			sta SCRADR+1
  3489 9993 A9 5D			lda #$5D
  3490 9995 85 88			sta PUTINTTEXT.S
  3491 9997 A9 80			lda #$80
  3492 9999 85 89			sta PUTINTTEXT.S+1
  3493 999B 20 24 93			jsr PUTINTTEXT
  3494
  3495 				; optimize FAIL ('STOPMIDI', status.inc), line = 53
  3496
  3497 999E 20 FB 96			jsr STOPMIDI
  3498
  3499 				; optimize OK (status.inc), line = 54
  3500
  3501 99A1 A9 00			lda #$00
  3502 99A3 85 88			sta SYSTEM.MOVE_0153.SOURCE
  3503 99A5 A9 2C			lda #$2C
  3504 99A7 85 89			sta SYSTEM.MOVE_0153.SOURCE+1
  3505 99A9 A9 00			lda #$00
  3506 99AB 85 8C			sta SYSTEM.MOVE_0153.DEST
  3507 99AD A9 2E			lda #$2E
  3508 99AF 85 8D			sta SYSTEM.MOVE_0153.DEST+1
  3509 99B1 A9 00			lda #$00
  3510 99B3 85 84			sta SYSTEM.MOVE_0153.COUNT
  3511 99B5 A9 02			lda #$02
  3512 99B7 85 85			sta SYSTEM.MOVE_0153.COUNT+1
  3513 99B9				.local +MAIN.SYSTEM.MOVE_0153
  3514 99B9				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0153.M@INLINE [Source: MIDICar Player.a65]
     4 99B9 20 CE 81			jsr @move
Source: MIDICar Player.a65
  3515 					.endl
  3516
  3517 				; optimize OK (status.inc), line = 55
  3518
  3519 99BC A9 00			lda #$00
  3520 99BE 85 D6			sta CHN
  3521
  3522 				; optimize FAIL ('CLEARUVMETERS', status.inc), line = 56
  3523
  3524 99C0 20 4C 98			jsr CLEARUVMETERS
  3525 99C3			@exit
  3526 					.ifdef @new
  3527 					lda <@VarData
  3528 					sta :ztmp
  3529 					lda >@VarData
  3530 					ldy #@VarDataSize-1
  3531 					jmp @FreeMem
  3532 					els
  3533 99C3 60				rts						; ret
  3534 					eif
  3535 				.endl
  3536
  3537 99C4			.local	STATUSLOADING					; PROCEDURE
  3538
  3539 				; optimize OK (status.inc), line = 61
  3540
  3541 99C4 A9 CD			lda #$CD
  3542 99C6 85 D4			sta SCRADR
  3543 99C8 A9 3A			lda #$3A
  3544 99CA 85 D5			sta SCRADR+1
  3545 99CC A9 68			lda #$68
  3546 99CE 85 88			sta PUTINTTEXT.S
  3547 99D0 A9 80			lda #$80
  3548 99D2 85 89			sta PUTINTTEXT.S+1
  3549 99D4 20 24 93			jsr PUTINTTEXT
  3550 99D7			@exit
  3551 					.ifdef @new
  3552 					lda <@VarData
  3553 					sta :ztmp
  3554 					lda >@VarData
  3555 					ldy #@VarDataSize-1
  3556 					jmp @FreeMem
  3557 					els
  3558 99D7 60				rts						; ret
  3559 					eif
  3560 				.endl
  3561
  3562 99D8			.local	STATUSREADDIRECTORY				; PROCEDURE
  3563
  3564 				; optimize OK (status.inc), line = 66
  3565
  3566 99D8 A9 CD			lda #$CD
  3567 99DA 85 D4			sta SCRADR
  3568 99DC A9 3A			lda #$3A
  3569 99DE 85 D5			sta SCRADR+1
  3570 99E0 A9 73			lda #$73
  3571 99E2 85 88			sta PUTINTTEXT.S
  3572 99E4 A9 80			lda #$80
  3573 99E6 85 89			sta PUTINTTEXT.S+1
  3574 99E8 20 24 93			jsr PUTINTTEXT
  3575 99EB			@exit
  3576 					.ifdef @new
  3577 					lda <@VarData
  3578 					sta :ztmp
  3579 					lda >@VarData
  3580 					ldy #@VarDataSize-1
  3581 					jmp @FreeMem
  3582 					els
  3583 99EB 60				rts						; ret
  3584 					eif
  3585 				.endl
  3586
  3587 99EC			.local	STATUSERROR					; PROCEDURE
  3588 99EC 8D 89 04			sta ERR
  3589
  3590 				; optimize OK (status.inc), line = 76
  3591
  3592 99EF A9 FF			lda #$FF
  3593 99F1 8D FC 02			sta KEYB
  3594
  3595 				; optimize OK (status.inc), line = 77
  3596
  3597 99F4 A9 CD			lda #$CD
  3598 99F6 85 D4			sta SCRADR
  3599 99F8 A9 3A			lda #$3A
  3600 99FA 85 D5			sta SCRADR+1
  3601
  3602 				; optimize OK (status.inc), line = 78
  3603
  3604 99FC AD 89 04			lda ERR
  3605 99FF 8D 8A 04			sta @CASETMP_0003
  3606 9A02 C9 64			cmp #$64
  3607 9A04 D0 0E			jne l_0980
  3608 				@
  3609
  3610 				; optimize OK (status.inc), line = 79
  3611
  3612 9A06 A9 88			lda #$88
  3613 9A08 85 88			sta PUTINTTEXT.S
  3614 9A0A A9 80			lda #$80
  3615 9A0C 85 89			sta PUTINTTEXT.S+1
  3616 9A0E 20 24 93			jsr PUTINTTEXT
  3617
  3618 9A11 4C 65 9A			jmp a_0003
  3619 9A14			l_0980
  3620 9A14 C9 65			cmp #$65
  3621 9A16 D0 0E			jne l_098B
  3622 				@
  3623
  3624 				; optimize OK (status.inc), line = 80
  3625
  3626 9A18 A9 9E			lda #$9E
  3627 9A1A 85 88			sta PUTINTTEXT.S
  3628 9A1C A9 80			lda #$80
  3629 9A1E 85 89			sta PUTINTTEXT.S+1
  3630 9A20 20 24 93			jsr PUTINTTEXT
  3631
  3632 9A23 4C 65 9A			jmp a_0003
  3633 9A26			l_098B
  3634 9A26 C9 66			cmp #$66
  3635 9A28 D0 0E			jne l_0996
  3636 				@
  3637
  3638 				; optimize OK (status.inc), line = 81
  3639
  3640 9A2A A9 B4			lda #$B4
  3641 9A2C 85 88			sta PUTINTTEXT.S
  3642 9A2E A9 80			lda #$80
  3643 9A30 85 89			sta PUTINTTEXT.S+1
  3644 9A32 20 24 93			jsr PUTINTTEXT
  3645
  3646 9A35 4C 65 9A			jmp a_0003
  3647 9A38			l_0996
  3648
  3649 				; optimize OK (status.inc), line = 83
  3650
  3651 9A38 A9 80			lda #$80
  3652 9A3A 8D 77 04			sta PUTTEXTINVERT
  3653
  3654 				; optimize OK (status.inc), line = 84
  3655
  3656 9A3D A9 C7			lda #$C7
  3657 9A3F 85 88			sta PUTINTTEXT.S
  3658 9A41 A9 80			lda #$80
  3659 9A43 85 89			sta PUTINTTEXT.S+1
  3660 9A45 20 24 93			jsr PUTINTTEXT
  3661 9A48 AD 89 04			lda ERR
  3662 9A4B 8D 7C 04			sta PUTINT.VALUE
  3663 9A4E A9 00			lda #$00
  3664 9A50 8D 7D 04			sta PUTINT.VALUE+1
  3665 9A53 20 ED 93			jsr PUTINT
  3666 9A56 A4 D5			ldy SCRADR+1
  3667 9A58 84 81			sty :bp+1
  3668 9A5A A4 D4			ldy SCRADR
  3669 9A5C A9 CE			lda #$CE
  3670 9A5E 91 80			sta (:bp),y
  3671
  3672 				; optimize OK (status.inc), line = 85
  3673
  3674 9A60 A9 00			lda #$00
  3675 9A62 8D 77 04			sta PUTTEXTINVERT
  3676 9A65			a_0003
  3677
  3678 				; --- WhileProlog
  3679 9A65			l_09B4
  3680
  3681 				; optimize OK (status.inc), line = 87
  3682
  3683 9A65 AD FC 02			lda KEYB
  3684 9A68 C9 FF			cmp #$FF
  3685 9A6A F0 F9			jeq l_09B4
  3686
  3687 				; optimize FAIL ('CLEARSTATUS', status.inc), line = 88
  3688
  3689 9A6C 20 4B 97			jsr CLEARSTATUS
  3690
  3691 				; ------------------------------------------------------------
  3692
  3693 = 0489			ERR	= DATAORIGIN+$0089
  3694 = 048A			@CASETMP_0003	= DATAORIGIN+$008A
  3695
  3696 = 0489			@VarData	= ERR
  3697 = 0002			@VarDataSize	= 2
  3698
  3699 9A6F			@exit
  3700 					.ifdef @new
  3701 					lda <@VarData
  3702 					sta :ztmp
  3703 					lda >@VarData
  3704 					ldy #@VarDataSize-1
  3705 					jmp @FreeMem
  3706 					els
  3707 9A6F 60				rts						; ret
  3708 					eif
  3709 				.endl
  3710
  3711 9A70			.local	LOADSONG					; FUNCTION
  3712
  3713 9A70 4C C6 9A			jmp l_09C5
  3714
  3715 9A73			.local	LOADPRC						; PROCEDURE
  3716 9A73 8D 8E 04			sta V
  3717
  3718 				; optimize OK (load.inc), line = 7
  3719
  3720 9A76 F0 4D			jeq l_09DA
  3721
  3722 				; optimize OK (load.inc), line = 9
  3723
  3724 9A78 A9 80			lda #$80
  3725 9A7A 8D 77 04			sta PUTTEXTINVERT
  3726
  3727 				; optimize OK (load.inc), line = 10
  3728
  3729 9A7D A9 D6			lda #$D6
  3730 9A7F 85 D4			sta SCRADR
  3731 9A81 A9 3A			lda #$3A
  3732 9A83 85 D5			sta SCRADR+1
  3733
  3734 				; optimize OK (load.inc), line = 11
  3735
  3736 9A85 AD 8E 04			lda V
  3737 9A88 38 E9 01			sub #$01
  3738 9A8B 8D 7C 04			sta PUTINT.VALUE
  3739 9A8E A9 00			lda #$00
  3740 9A90 E9 00			sbc #$00
  3741 9A92 8D 7D 04			sta PUTINT.VALUE+1
  3742 9A95 20 ED 93			jsr PUTINT
  3743 9A98 A4 D5			ldy SCRADR+1
  3744 9A9A 84 81			sty :bp+1
  3745 9A9C A4 D4			ldy SCRADR
  3746 9A9E A9 8F			lda #$8F
  3747 9AA0 91 80			sta (:bp),y
  3748 9AA2 E6 D4			inc SCRADR
  3749 9AA4 D0 02			sne
  3750 9AA6 E6 D5			inc SCRADR+1
  3751
  3752 				; optimize OK (load.inc), line = 12
  3753
  3754 9AA8 AD 19 04			lda MIDFILES.TOTALTRACKS
  3755 9AAB 8D 7C 04			sta PUTINT.VALUE
  3756 9AAE A9 00			lda #$00
  3757 9AB0 8D 7D 04			sta PUTINT.VALUE+1
  3758 9AB3 20 ED 93			jsr PUTINT
  3759
  3760 				; optimize OK (load.inc), line = 13
  3761
  3762 9AB6 A4 D5			ldy SCRADR+1
  3763 9AB8 84 81			sty :bp+1
  3764 9ABA A4 D4			ldy SCRADR
  3765 9ABC A9 CE			lda #$CE
  3766 9ABE 91 80			sta (:bp),y
  3767
  3768 				; optimize OK (load.inc), line = 14
  3769
  3770 9AC0 A9 00			lda #$00
  3771 9AC2 8D 77 04			sta PUTTEXTINVERT
  3772 9AC5			l_09DA
  3773
  3774 				; ------------------------------------------------------------
  3775
  3776 = 048E			V	= DATAORIGIN+$008E
  3777
  3778 = 048E			@VarData	= V
  3779 = 0001			@VarDataSize	= 1
  3780
  3781 9AC5			@exit
  3782 					.ifdef @new
  3783 					lda <@VarData
  3784 					sta :ztmp
  3785 					lda >@VarData
  3786 					ldy #@VarDataSize-1
  3787 					jmp @FreeMem
  3788 					els
  3789 9AC5 60				rts						; ret
  3790 					eif
  3791 				.endl
  3792 9AC6			l_09C5
  3793
  3794 				; optimize OK (load.inc), line = 19
  3795
  3796 9AC6 AD 6A 04			lda LAST_BANK
  3797 9AC9 85 E1			sta MIDFILES._BANK
  3798 9ACB AD 6B 04			lda LAST_ADR
  3799 9ACE 85 E2			sta MIDFILES._ADR
  3800 9AD0 AD 6C 04			lda LAST_ADR+1
  3801 9AD3 85 E3			sta MIDFILES._ADR+1
  3802
  3803 				; optimize FAIL ('CLEARSTATUS', load.inc), line = 20
  3804
  3805 9AD5 20 4B 97			jsr CLEARSTATUS
  3806
  3807 				; optimize FAIL ('STATUSLOADING', load.inc), line = 21
  3808
  3809 9AD8 20 C4 99			jsr STATUSLOADING
  3810
  3811 				; optimize OK (load.inc), line = 22
  3812
  3813 9ADB A9 73			lda <LOADPRC
  3814 9ADD 8D 32 04			sta MIDFILES.LOADPROCESS
  3815 9AE0 A9 9A			lda >LOADPRC
  3816 9AE2 8D 33 04			sta MIDFILES.LOADPROCESS+1
  3817 9AE5 A9 00			lda #$00
  3818 9AE7 85 1F			sta THI
  3819
  3820 				; optimize OK (load.inc), line = 23
  3821
  3822 9AE9 AD 8B 04			lda FILENAME
  3823 9AEC 8D 38 04			sta MIDFILES.LOADMID.FN
  3824 9AEF AD 8C 04			lda FILENAME+1
  3825 9AF2 8D 39 04			sta MIDFILES.LOADMID.FN+1
  3826 9AF5 20 26 8A			jsr MIDFILES.LOADMID
  3827 9AF8 AD 3A 04			lda MIDFILES.LOADMID.RESULT
  3828 9AFB 8D 8D 04			sta RESULT
  3829
  3830 				; optimize OK (load.inc), line = 24
  3831
  3832 9AFE A9 FF			lda #$FF
  3833 9B00 85 1F			sta THI
  3834
  3835 				; optimize FAIL ('CLEARSTATUS', load.inc), line = 25
  3836
  3837 9B02 20 4B 97			jsr CLEARSTATUS
  3838
  3839 				; optimize OK (load.inc), line = 26
  3840
  3841 9B05 AD 8D 04			lda RESULT
  3842 9B08 29 FC			and #$FC
  3843 9B0A F0 0D			jeq l_0A37
  3844
  3845 				; optimize OK (load.inc), line = 28
  3846
  3847 9B0C A9 FF			lda #$FF
  3848 9B0E 8D 68 04			sta CURPLAY
  3849 9B11 A9 00			lda #$00
  3850 9B13 8D 19 04			sta MIDFILES.TOTALTRACKS
  3851 9B16 4C 3A 9B			jmp l_0A49
  3852 9B19			l_0A37
  3853
  3854 				; optimize OK (load.inc), line = 32
  3855
  3856 9B19 A9 00			lda #$00
  3857 9B1B 85 88			sta SYSTEM.MOVE_0153.SOURCE
  3858 9B1D A9 2E			lda #$2E
  3859 9B1F 85 89			sta SYSTEM.MOVE_0153.SOURCE+1
  3860 9B21 A9 00			lda #$00
  3861 9B23 85 8C			sta SYSTEM.MOVE_0153.DEST
  3862 9B25 A9 2C			lda #$2C
  3863 9B27 85 8D			sta SYSTEM.MOVE_0153.DEST+1
  3864 9B29 A9 00			lda #$00
  3865 9B2B 85 84			sta SYSTEM.MOVE_0153.COUNT
  3866 9B2D A9 02			lda #$02
  3867 9B2F 85 85			sta SYSTEM.MOVE_0153.COUNT+1
  3868 9B31				.local +MAIN.SYSTEM.MOVE_0153
  3869 9B31				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0153.M@INLINE [Source: MIDICar Player.a65]
     4 9B31 20 CE 81			jsr @move
Source: MIDICar Player.a65
  3870 					.endl
  3871
  3872 				; optimize OK (load.inc), line = 33
  3873
  3874 9B34 AD 66 04			lda CURFILE
  3875 9B37 8D 68 04			sta CURPLAY
  3876 9B3A			l_0A49
  3877 9B3A			@exit
  3878
  3879 				; ------------------------------------------------------------
  3880
  3881 = 048B			FILENAME	= DATAORIGIN+$008B
  3882 = 048D			RESULT	= DATAORIGIN+$008D
  3883
  3884 = 048B			@VarData	= FILENAME
  3885 = 0002			@VarDataSize	= 2
  3886
  3887 9B3A 60				rts						; ret
  3888 				.endl
  3889
  3890 9B3B			.local	GETENTRY					; FUNCTION | ASSEMBLER | REGISTER
  3891
  3892 				; -------------------  ASM Block 00000110  -------------------
  3893
  3894 9B3B			  icl 'asms/list_getEntry.a65'
Source: list_getEntry.a65
     1 = 0088			hlpptr = $88;
     2
     3 9B3B			getEntry:
     4 9B3B 8A 48		  txa:pha
     5
     6 9B3D A5 DA		  lda fileList
     7 9B3F 8D 50 9B		  sta entryptr
     8 9B42 A5 DB		  lda fileList+1
     9 9B44 8D 51 9B		  sta entryptr+1
    10
    11 9B47 A9 00		  lda #0
    12 9B49 85 90		  sta result
    13
    14 9B4B A2 03		  ldx #3
    15 9B4D A0 01		  ldy #1
    16 9B4F			loop:
    17 9B4F BD D0 07		  lda entryptr:2000,x
    18 9B52 C9 9B		  cmp #$9B
    19 9B54 F0 06		  beq endEntry
    20 9B56 91 88		  sta (hlpptr),y
    21 9B58 E8			  inx
    22 9B59 C8			  iny
    23 9B5A D0 F3		  bne loop
    24
    25 9B5C			endEntry:
    26 9B5C A9 9B		  lda #$9B
    27 9B5E 91 88		  sta (hlpptr),y
    28
    29 9B60 C0 01		  cpy #1
    30 9B62 D0 03		  bne store
    31 9B64 68 AA		  pla:tax
    32 9B66 60			  rts
    33
    34 9B67			store:
    35 9B67 8A 48		  txa:pha
    36
    37 9B69 A9 01		  lda #1
    38 9B6B 85 90		  sta result
    39
    40 9B6D 68 AA		  pla:tax
    41 9B6F 38			  sec
    42 9B70 E9 03		  sbc #3            // decease position by 3
    43 9B72 A0 00		  ldy #0
    44 9B74 91 88		  sta (hlpptr),y    // store as string length
    45
    46 9B76 68 AA		  pla:tax
  3895
  3896 9B78			@exit
  3897
  3898 				; ------------------------------------------------------------
  3899
  3900 = 0088			FN	= :EDX
  3901 = 0090			RESULT	= :STACKORIGIN-4
  3902 9B78 60				rts						; ret
  3903 				.endl
  3904
  3905 9B79			.local	GETENTRYSETS					; PROCEDURE | ASSEMBLER | REGISTER
  3906
  3907 				; -------------------  ASM Block 00000111  -------------------
  3908
  3909 9B79			  icl 'asms/list_getEntrySets.a65'
Source: list_getEntrySets.a65
     1 9B79			getEntrySets:
     2 = 0088			PTRREG = $88
     3
     4 9B79 A0 02		    ldy #2
     5 9B7B			loop:
     6 9B7B B1 DA		    lda (fileList),y
     7 9B7D 91 88		    sta (PTRREG),y
     8 9B7F 88			    dey
     9 9B80 10 F9		    bpl loop
  3910
  3911 				; ------------------------------------------------------------
  3912
  3913 = 0088			PTR	= :EDX
  3914 9B82			@exit
  3915 					.ifdef @new
  3916 					lda <@VarData
  3917 					sta :ztmp
  3918 					lda >@VarData
  3919 					ldy #@VarDataSize-1
  3920 					jmp @FreeMem
  3921 					els
  3922 9B82 60				rts						; ret
  3923 					eif
  3924 				.endl
  3925
  3926 9B83			.local	SETENTRYSETS					; PROCEDURE | ASSEMBLER | REGISTER
  3927
  3928 				; -------------------  ASM Block 00000112  -------------------
  3929
  3930 9B83			  icl 'asms/list_setEntrySets.a65'
Source: list_setEntrySets.a65
     1 9B83			setEntrySets:
     2 = 0088			PTRREG = $88
     3
     4 9B83 A0 02		    ldy #2
     5 9B85			loop:
     6 9B85 B1 88		    lda (PTRREG),y
     7 9B87 91 DA		    sta (fileList),y
     8 9B89 88			    dey
     9 9B8A 10 F9		    bpl loop
  3931
  3932 				; ------------------------------------------------------------
  3933
  3934 = 0088			PTR	= :EDX
  3935 9B8C			@exit
  3936 					.ifdef @new
  3937 					lda <@VarData
  3938 					sta :ztmp
  3939 					lda >@VarData
  3940 					ldy #@VarDataSize-1
  3941 					jmp @FreeMem
  3942 					els
  3943 9B8C 60				rts						; ret
  3944 					eif
  3945 				.endl
  3946
  3947 9B8D			.local	NEXTENTRY					; FUNCTION | ASSEMBLER
  3948
  3949 				; -------------------  ASM Block 00000113  -------------------
  3950
  3951 9B8D			  icl 'asms/list_nextEntry.a65'
Source: list_nextEntry.a65
     1 9B8D			nextEntry:
     2 9B8D A0 03		  ldy #3
     3 9B8F			loop:
     4 9B8F B1 DA		  lda (fileList),y
     5 9B91 C9 9B		  cmp #$9B
     6 9B93 F0 03		  beq endEntry
     7 9B95 C8			  iny
     8 9B96 D0 F7		  bne loop
     9
    10 9B98			endEntry:
    11 9B98 C0 03		  cpy #3
    12 9B9A D0 06		  bne moveEntryPtr
    13
    14 9B9C A9 00		  lda #0
    15 9B9E 8D 8F 04		  sta result
    16 9BA1 60			  rts
    17
    18 9BA2			moveEntryPtr:
    19 9BA2 C8			  iny
    20 9BA3 98			  tya
    21 9BA4 18 65 DA		  add fileList
    22 9BA7 85 DA		  sta fileList
    23 9BA9 90 02 E6 DB		  scc:inc fileList+1
    24
    25 9BAD A9 01		  lda #1
    26 9BAF 8D 8F 04		  sta result
  3952
  3953 9BB2			@exit
  3954
  3955 				; ------------------------------------------------------------
  3956
  3957 = 048F			RESULT	= DATAORIGIN+$008F
  3958 9BB2 60				rts						; ret
  3959 				.endl
  3960
  3961 9BB3			.local	GOTONENTRY					; PROCEDURE | ASSEMBLER
  3962 9BB3 8D 90 04			sta NENTRY
  3963
  3964 				; -------------------  ASM Block 00000114  -------------------
  3965
  3966 9BB6			  icl 'asms/list_gotoNEntry.a65'
Source: list_gotoNEntry.a65
     1 9BB6			gotoNEntry:
     2 9BB6 8A 48		    txa:pha
     3
     4 9BB8 A9 00		    lda #<PLAYLIST_ADDR
     5 9BBA 85 DA		    sta fileList
     6 9BBC A9 20		    lda #>PLAYLIST_ADDR
     7 9BBE 85 DB		    sta fileList+1
     8
     9 9BC0 AE 90 04		    ldx nEntry
    10 9BC3 F0 08		    beq exitGotoNEntry
    11
    12 9BC5			loop:
    13 9BC5 20 8D 9B		    jsr nextEntry
    14 9BC8 F0 03		    beq exitGotoNEntry
    15 9BCA CA			    dex
    16 9BCB D0 F8		    bne loop
    17
    18 9BCD			exitGotoNEntry:
    19
    20 9BCD 68 AA		    pla:tax
  3967
  3968 				; ------------------------------------------------------------
  3969
  3970 = 0490			NENTRY	= DATAORIGIN+$0090
  3971
  3972 = 0490			@VarData	= NENTRY
  3973 = 0001			@VarDataSize	= 1
  3974
  3975 9BCF			@exit
  3976 					.ifdef @new
  3977 					lda <@VarData
  3978 					sta :ztmp
  3979 					lda >@VarData
  3980 					ldy #@VarDataSize-1
  3981 					jmp @FreeMem
  3982 					els
  3983 9BCF 60				rts						; ret
  3984 					eif
  3985 				.endl
  3986
  3987 9BD0			.local	ADDTOLIST					; PROCEDURE | ASSEMBLER | REGISTER
  3988
  3989 				; -------------------  ASM Block 00000115  -------------------
  3990
  3991 9BD0			  icl 'asms/list_addToList.a65'
Source: list_addToList.a65
     1 = 0088			ptrreg = $88;
     2
     3 9BD0 8A 48		  txa:pha
     4
     5 9BD2 A0 00		  ldy #0
     6 9BD4 B1 88		  lda (ptrreg),y
     7 9BD6 18 69 01		  add #1
     8 9BD9 8D 01 9C		  sta fnlen
     9
    10 9BDC A0 00		  ldy #0
    11 9BDE A5 E1		  lda MAIN.MIDFILES._bank
    12 9BE0 91 DA		  sta (fileList),y
    13 9BE2 C8			  iny
    14 9BE3 A5 E2		  lda MAIN.MIDFILES._adr
    15 9BE5 91 DA		  sta (fileList),y
    16 9BE7 C8			  iny
    17 9BE8 A5 E3		  lda MAIN.MIDFILES._adr+1
    18 9BEA 91 DA		  sta (fileList),y
    19 9BEC C8			  iny
    20
    21 9BED A5 88		  lda ptrreg
    22 9BEF 8D FA 9B		  sta eptr
    23 9BF2 A5 89		  lda ptrreg+1
    24 9BF4 8D FB 9B		  sta eptr+1
    25
    26 9BF7 A2 01		  ldx #1
    27 9BF9			loop:
    28 9BF9 BD 00 20		  lda eptr:$2000,x
    29 9BFC 91 DA		  sta (fileList),y
    30 9BFE C8			  iny
    31 9BFF E8			  inx
    32 9C00 E0 00		  cpx fnlen:#00
    33 9C02 30 F5		  bmi loop
    34
    35 9C04			storeEOFN:
    36 9C04 A9 9B		  lda #$9B
    37 9C06 91 DA		  sta (fileList),y
    38 9C08 C8			  iny
    39
    40 9C09 98			  tya
    41 9C0A 18 65 DA		  add fileList
    42 9C0D 85 DA		  sta fileList
    43 9C0F 90 02 E6 DB		  scc:inc fileList+1
    44
    45 9C13 EE 67 04		  inc totalFiles
    46
    47 9C16 68 AA		  pla:tax
  3992
  3993 				; ------------------------------------------------------------
  3994
  3995 = 0088			ENTRY	= :EDX
  3996 9C18			@exit
  3997 					.ifdef @new
  3998 					lda <@VarData
  3999 					sta :ztmp
  4000 					lda >@VarData
  4001 					ldy #@VarDataSize-1
  4002 					jmp @FreeMem
  4003 					els
  4004 9C18 60				rts						; ret
  4005 					eif
  4006 				.endl
  4007
  4008 9C19			.local	CLEARLIST					; PROCEDURE
  4009
  4010 				; optimize FAIL ('RESETMEMORYPTR', list_asm.inc), line = 39
  4011
  4012 9C19 20 2A 97			jsr RESETMEMORYPTR
  4013
  4014 				; optimize OK (list_asm.inc), line = 40
  4015
  4016 9C1C A9 00			lda #$00
  4017 9C1E 85 DA			sta FILELIST
  4018 9C20 A9 20			lda #$20
  4019 9C22 85 DB			sta FILELIST+1
  4020
  4021 				; optimize OK (list_asm.inc), line = 41
  4022
  4023 9C24 A9 00			lda #$00
  4024 9C26 8D 67 04			sta TOTALFILES
  4025 9C29 8D 66 04			sta CURFILE
  4026 9C2C 8D 64 04			sta YFILE
  4027 9C2F 8D 65 04			sta SHFILE
  4028
  4029 				; optimize OK (list_asm.inc), line = 42
  4030
  4031 9C32 85 D6			sta CHN
  4032
  4033 				; --- WhileProlog
  4034 9C34 4C 4C 9C			jmp l_0A78
  4035 9C37			l_0A79
  4036
  4037 				; optimize OK (list_asm.inc), line = 45
  4038
  4039 9C37 A5 D6			lda CHN
  4040 9C39 0A				asl @
  4041 9C3A A8				tay
  4042 9C3B B9 40 3B			lda adr.LISTSCRADR,y
  4043 9C3E 85 D4			sta SCRADR
  4044 9C40 B9 41 3B			lda adr.LISTSCRADR+1,y
  4045 9C43 85 D5			sta SCRADR+1
  4046
  4047 				; optimize OK (list_asm.inc), line = 46
  4048
  4049 9C45 A9 20			lda #$20
  4050 9C47 20 16 93			jsr PUTSPACES
  4051
  4052 				; optimize FAIL (0, list_asm.inc), line = 47
  4053
  4054 9C4A E6 D6			inc CHN
  4055 9C4C			l_0A78
  4056
  4057 				; optimize OK (list_asm.inc), line = 43
  4058
  4059 9C4C A5 D6			lda CHN
  4060 9C4E C9 10			cmp #$10
  4061 9C50 90 E5			jcc l_0A79
  4062
  4063 				; optimize OK (list_asm.inc), line = 49
  4064
  4065 9C52 A5 DA			lda FILELIST
  4066 9C54 85 88			sta SYSTEM.FILLCHAR_0151.A
  4067 9C56 A5 DB			lda FILELIST+1
  4068 9C58 85 89			sta SYSTEM.FILLCHAR_0151.A+1
  4069 9C5A A9 00			lda #$00
  4070 9C5C 85 8C			sta SYSTEM.FILLCHAR_0151.COUNT
  4071 9C5E A9 0C			lda #$0C
  4072 9C60 85 8D			sta SYSTEM.FILLCHAR_0151.COUNT+1
  4073 9C62 A9 9B			lda #$9B
  4074 9C64 85 84			sta SYSTEM.FILLCHAR_0151.VALUE
  4075 9C66				.local +MAIN.SYSTEM.FILLCHAR_0151
  4076 9C66				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0151.M@INLINE [Source: MIDICar Player.a65]
     4 9C66 20 23 82			jsr @fill
Source: MIDICar Player.a65
  4077 					.endl
  4078 9C69			@exit
  4079 					.ifdef @new
  4080 					lda <@VarData
  4081 					sta :ztmp
  4082 					lda >@VarData
  4083 					ldy #@VarDataSize-1
  4084 					jmp @FreeMem
  4085 					els
  4086 9C69 60				rts						; ret
  4087 					eif
  4088 				.endl
  4089
  4090 9C6A			.local	FILESELECT					; FUNCTION
  4091
  4092 				; optimize OK (fileselect.inc), line = 10
  4093
  4094 9C6A A9 E8			lda #$E8
  4095 9C6C 85 D4			sta SCRADR
  4096 9C6E A9 37			lda #$37
  4097 9C70 85 D5			sta SCRADR+1
  4098 9C72 20 68 94			jsr HLINE
  4099
  4100 				; optimize OK (fileselect.inc), line = 11
  4101
  4102 9C75 A9 04			lda #$04
  4103 9C77 85 D4			sta SCRADR
  4104 9C79 A9 38			lda #$38
  4105 9C7B 85 D5			sta SCRADR+1
  4106 9C7D A9 D5			lda #$D5
  4107 9C7F 85 88			sta PUTINTTEXT.S
  4108 9C81 A9 80			lda #$80
  4109 9C83 85 89			sta PUTINTTEXT.S+1
  4110 9C85 20 24 93			jsr PUTINTTEXT
  4111
  4112 				; optimize FAIL ('CLEARLIST', fileselect.inc), line = 13
  4113
  4114 9C88 20 19 9C			jsr CLEARLIST
  4115
  4116 				; optimize OK (fileselect.inc), line = 14
  4117
  4118 9C8B A9 FF			lda #$FF
  4119 9C8D 85 E2			sta MIDFILES._ADR
  4120 9C8F 85 E3			sta MIDFILES._ADR+1
  4121 9C91 A9 FE			lda #$FE
  4122 9C93 85 E1			sta MIDFILES._BANK
  4123 9C95 AD 91 04			lda PATH
  4124 9C98 85 88			sta ADDTOLIST.ENTRY
  4125 9C9A AD 92 04			lda PATH+1
  4126 9C9D 85 89			sta ADDTOLIST.ENTRY+1
  4127 9C9F 20 D0 9B			jsr ADDTOLIST
  4128
  4129 				; optimize FAIL ('STATUSSTOPPED', fileselect.inc), line = 15
  4130
  4131 9CA2 20 61 99			jsr STATUSSTOPPED
  4132
  4133 				; optimize FAIL ('STATUSREADDIRECTORY', fileselect.inc), line = 16
  4134
  4135 9CA5 20 D8 99			jsr STATUSREADDIRECTORY
  4136
  4137 				; optimize OK (fileselect.inc), line = 18
  4138
  4139 9CA8 A9 02			lda #$02
  4140 9CAA 8D 0F 04			sta CIO.OPN.CHN
  4141 9CAD A9 06			lda #$06
  4142 9CAF 8D 10 04			sta CIO.OPN.AX1
  4143 9CB2 A9 00			lda #$00
  4144 9CB4 8D 11 04			sta CIO.OPN.AX2
  4145 9CB7 AD 91 04			lda PATH
  4146 9CBA 8D 12 04			sta CIO.OPN.DEVICE
  4147 9CBD AD 92 04			lda PATH+1
  4148 9CC0 8D 13 04			sta CIO.OPN.DEVICE+1
  4149 9CC3 20 29 89			jsr CIO.OPN
  4150
  4151 				; --- WhileProlog
  4152 9CC6 4C 68 9D			jmp l_0ABD
  4153 9CC9			l_0ABE
  4154
  4155 				; optimize OK (fileselect.inc), line = 21
  4156
  4157 9CC9 A9 FC			lda #$FC
  4158 9CCB 85 E1			sta MIDFILES._BANK
  4159
  4160 				; optimize OK (fileselect.inc), line = 22
  4161
  4162 9CCD A9 02			lda #$02
  4163 9CCF 85 88			sta GETLN.CHN
  4164 9CD1 AD 77 A6			lda FN
  4165 9CD4 85 8C			sta GETLN.BUF
  4166 9CD6 AD 78 A6			lda FN+1
  4167 9CD9 85 8D			sta GETLN.BUF+1
  4168 9CDB 20 62 95			jsr GETLN
  4169
  4170 				; optimize OK (fileselect.inc), line = 23
  4171
  4172 9CDE AD 01 05			lda adr.FN+$01
  4173 9CE1 C9 30			cmp #$30
  4174 9CE3 90 03			jcc l_0AD9
  4175 9CE5 4C 72 9D			jmp b_0ABE					; break
  4176 9CE8			l_0AD9
  4177
  4178 				; optimize OK (fileselect.inc), line = 24
  4179
  4180 9CE8 AD 77 A6			lda FN
  4181 9CEB 85 88			sta REDUCEFILENAME.INFN
  4182 9CED AD 78 A6			lda FN+1
  4183 9CF0 85 89			sta REDUCEFILENAME.INFN+1
  4184 9CF2 AD 79 A6			lda OUTSTR
  4185 9CF5 85 8C			sta REDUCEFILENAME.OUTFN
  4186 9CF7 AD 7A A6			lda OUTSTR+1
  4187 9CFA 85 8D			sta REDUCEFILENAME.OUTFN+1
  4188 9CFC 20 CA 94			jsr REDUCEFILENAME
  4189
  4190 				; optimize OK (fileselect.inc), line = 25
  4191
  4192 9CFF AD 79 A6			lda OUTSTR
  4193 9D02 85 88			sta GETFILEEXT.FN
  4194 9D04 AD 7A A6			lda OUTSTR+1
  4195 9D07 85 89			sta GETFILEEXT.FN+1
  4196 9D09 20 88 94			jsr GETFILEEXT
  4197
  4198 				; optimize OK (fileselect.inc), line = 26
  4199
  4200 9D0C AD 02 05			lda adr.FN+$02
  4201 9D0F C9 3A			cmp #$3A
  4202 9D11 D0 03			jne l_0AF7
  4203 9D13 4C 68 9D			jmp c_0ABE					; continue
  4204 9D16			l_0AF7
  4205
  4206 				; optimize OK (fileselect.inc), line = 27
  4207
  4208 9D16 AD 12 05			lda adr.FN+$12
  4209 9D19 C9 3E			cmp #$3E
  4210 9D1B D0 03			jne l_0B0D
  4211 9D1D 4C 68 9D			jmp c_0ABE					; continue
  4212 9D20			l_0B0D
  4213
  4214 				; optimize OK (fileselect.inc), line = 28
  4215
  4216 9D20 AD FB 04			lda EXT+3
  4217 9D23 C9 A4			cmp #$A4
  4218 9D25 D0 11			bne @+
  4219 9D27 AD FA 04			lda EXT+2
  4220 9D2A C9 A9			cmp #$A9
  4221 9D2C D0 0A			bne @+
  4222 9D2E AD F9 04			lda EXT+1
  4223 9D31 C9 B2			cmp #$B2
  4224 9D33 D0 03			bne @+
  4225 9D35 AD F8 04			lda EXT
  4226 				@
  4227 9D38 D0 03			jne l_0B20
  4228 9D3A 4C 68 9D			jmp c_0ABE					; continue
  4229 9D3D			l_0B20
  4230
  4231 				; optimize OK (fileselect.inc), line = 29
  4232
  4233 9D3D AD FB 04			lda EXT+3
  4234 9D40 C9 4D			cmp #$4D
  4235 9D42 D0 11			bne @+
  4236 9D44 AD FA 04			lda EXT+2
  4237 9D47 C9 49			cmp #$49
  4238 9D49 D0 0A			bne @+
  4239 9D4B AD F9 04			lda EXT+1
  4240 9D4E C9 44			cmp #$44
  4241 9D50 D0 03			bne @+
  4242 9D52 AD F8 04			lda EXT
  4243 				@
  4244 9D55 D0 04			jne l_0B33
  4245 9D57 A9 FF			lda #$FF
  4246 9D59 85 E1			sta MIDFILES._BANK
  4247 9D5B			l_0B33
  4248
  4249 				; optimize OK (fileselect.inc), line = 32
  4250
  4251 9D5B AD 79 A6			lda OUTSTR
  4252 9D5E 85 88			sta ADDTOLIST.ENTRY
  4253 9D60 AD 7A A6			lda OUTSTR+1
  4254 9D63 85 89			sta ADDTOLIST.ENTRY+1
  4255 9D65 20 D0 9B			jsr ADDTOLIST
  4256 9D68			c_0ABE
  4257 9D68			l_0ABD
  4258
  4259 				; optimize OK (fileselect.inc), line = 19
  4260
  4261 9D68 AD 07 04			lda SYSTEM.IORESULT
  4262 9D6B C9 01			cmp #$01
  4263 9D6D D0 03 4C C9 9C		jeq l_0ABE
  4264 9D72			b_0ABE
  4265
  4266 				; optimize FAIL ('CLEARSTATUS', fileselect.inc), line = 34
  4267
  4268 9D72 20 4B 97			jsr CLEARSTATUS
  4269
  4270 				; optimize OK (fileselect.inc), line = 35
  4271
  4272 9D75 AD 07 04			lda SYSTEM.IORESULT
  4273 9D78 8D 93 04			sta RESULT
  4274
  4275 				; optimize OK (fileselect.inc), line = 36
  4276
  4277 9D7B A9 02			lda #$02
  4278 9D7D 20 67 89			jsr CIO.CLS
  4279 9D80			@exit
  4280
  4281 				; ------------------------------------------------------------
  4282
  4283 = 0491			PATH	= DATAORIGIN+$0091
  4284 = 0493			RESULT	= DATAORIGIN+$0093
  4285 = 0002			CIO_CHN	= $02
  4286 = 04F8			EXT	= $04F8
  4287
  4288 = 0491			@VarData	= PATH
  4289 = 0002			@VarDataSize	= 2
  4290
  4291 9D80 60				rts						; ret
  4292 				.endl
  4293
  4294 9D81			.local	SHOW_INPUTLINE					; PROCEDURE
  4295
  4296 				; optimize OK (inputline.inc), line = 4
  4297
  4298 9D81 AD 71 04			lda ILPOS
  4299 9D84 8D 80 05			sta adr.OUTSTR+$00
  4300
  4301 				; optimize OK (inputline.inc), line = 5
  4302
  4303 9D87 AD 72 04			lda ILSCRADR
  4304 9D8A 85 D4			sta SCRADR
  4305 9D8C AD 73 04			lda ILSCRADR+1
  4306 9D8F 85 D5			sta SCRADR+1
  4307
  4308 				; optimize OK (inputline.inc), line = 6
  4309
  4310 9D91 AD 79 A6			lda OUTSTR
  4311 9D94 85 88			sta PUTASCTEXT.S
  4312 9D96 AD 7A A6			lda OUTSTR+1
  4313 9D99 85 89			sta PUTASCTEXT.S+1
  4314 9D9B 20 4D 93			jsr PUTASCTEXT
  4315
  4316 				; optimize OK (inputline.inc), line = 7
  4317
  4318 9D9E AD 74 04			lda ILVCRS
  4319 9DA1 F0 07			jeq l_0B71
  4320 9DA3 A9 80			lda #$80
  4321 9DA5 85 D6			sta ILCH
  4322 9DA7 4C AE 9D			jmp l_0B7F
  4323 9DAA			l_0B71
  4324 9DAA A9 00			lda #$00
  4325 9DAC 85 D6			sta ILCH
  4326 9DAE			l_0B7F
  4327
  4328 				; optimize OK (inputline.inc), line = 8
  4329
  4330 9DAE A4 D5			ldy SCRADR+1
  4331 9DB0 84 81			sty :bp+1
  4332 9DB2 A4 D4			ldy SCRADR
  4333 9DB4 A5 D6			lda ILCH
  4334 9DB6 91 80			sta (:bp),y
  4335
  4336 				; optimize FAIL (0, inputline.inc), line = 9
  4337
  4338 9DB8 E6 D4			inc SCRADR
  4339 9DBA D0 02			sne
  4340 9DBC E6 D5			inc SCRADR+1
  4341 9DBE A9 1F			lda #$1F
  4342 9DC0 38 ED 71 04			sub ILPOS
  4343 9DC4 20 16 93			jsr PUTSPACES
  4344 9DC7			@exit
  4345 					.ifdef @new
  4346 					lda <@VarData
  4347 					sta :ztmp
  4348 					lda >@VarData
  4349 					ldy #@VarDataSize-1
  4350 					jmp @FreeMem
  4351 					els
  4352 9DC7 60				rts						; ret
  4353 					eif
  4354 				.endl
  4355
  4356 9DC8			.local	INIT_INPUTLINE					; PROCEDURE
  4357
  4358 				; optimize OK (inputline.inc), line = 14
  4359
  4360 9DC8 AD 80 05			lda adr.OUTSTR
  4361 9DCB 8D 71 04			sta ILPOS
  4362
  4363 				; optimize OK (inputline.inc), line = 15
  4364
  4365 9DCE A9 7F			lda #$7F
  4366 9DD0 38 ED 71 04			sub ILPOS
  4367 9DD4 85 8C			sta SYSTEM.FILLCHAR_0152.COUNT
  4368 9DD6 A9 00			lda #$00
  4369 9DD8 E9 00			sbc #$00
  4370 9DDA 85 8D			sta SYSTEM.FILLCHAR_0152.COUNT+1
  4371 9DDC AD 71 04			lda ILPOS
  4372 9DDF 18 69 01			add #$01
  4373 9DE2 85 9F			sta :STACKORIGIN+11
  4374 9DE4 A9 00			lda #$00
  4375 9DE6 69 00			adc #$00
  4376 9DE8 85 AF			sta :STACKORIGIN+STACKWIDTH+11
  4377 9DEA A9 80			lda <adr.OUTSTR
  4378 9DEC 18 65 9F			add :STACKORIGIN+11
  4379 9DEF 85 88			sta SYSTEM.FILLCHAR_0152.X
  4380 9DF1 A9 05			lda >adr.OUTSTR
  4381 9DF3 65 AF			adc :STACKORIGIN+STACKWIDTH+11
  4382 9DF5 85 89			sta SYSTEM.FILLCHAR_0152.X+1
  4383 9DF7 A9 9B			lda #$9B
  4384 9DF9 85 84			sta SYSTEM.FILLCHAR_0152.VALUE
  4385 9DFB				.local +MAIN.SYSTEM.FILLCHAR_0152
  4386 9DFB				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0152.M@INLINE [Source: MIDICar Player.a65]
     4 9DFB 20 23 82			jsr @fill
Source: MIDICar Player.a65
  4387 					.endl
  4388
  4389 				; optimize OK (inputline.inc), line = 16
  4390
  4391 9DFE A9 FF			lda #$FF
  4392 9E00 8D FC 02			sta KEYB
  4393 9E03 A9 01			lda #$01
  4394 9E05 8D 74 04			sta ILVCRS
  4395
  4396 				; optimize OK (inputline.inc), line = 17
  4397
  4398 9E08 AD 64 04			lda YFILE
  4399 9E0B 0A				asl @
  4400 9E0C A8				tay
  4401 9E0D B9 40 3B			lda adr.LISTSCRADR,y
  4402 9E10 18 69 02			add #$02
  4403 9E13 8D 72 04			sta ILSCRADR
  4404 9E16 B9 41 3B			lda adr.LISTSCRADR+1,y
  4405 9E19 69 00			adc #$00
  4406 9E1B 8D 73 04			sta ILSCRADR+1
  4407
  4408 				; optimize FAIL ('SHOW_INPUTLINE', inputline.inc), line = 18
  4409
  4410 9E1E 20 81 9D			jsr SHOW_INPUTLINE
  4411 9E21 A5 14			lda _TM
  4412 9E23 85 12			sta CTM
  4413
  4414 				; optimize OK (inputline.inc), line = 19
  4415
  4416 9E25 A9 01			lda #$01
  4417 9E27 8D 76 04			sta STATEINPUTLINE
  4418
  4419 				; optimize OK (inputline.inc), line = 20
  4420
  4421 9E2A A9 00			lda #$00
  4422 9E2C 8D 75 04			sta RESULTINPUTLINE
  4423 9E2F			@exit
  4424 					.ifdef @new
  4425 					lda <@VarData
  4426 					sta :ztmp
  4427 					lda >@VarData
  4428 					ldy #@VarDataSize-1
  4429 					jmp @FreeMem
  4430 					els
  4431 9E2F 60				rts						; ret
  4432 					eif
  4433 				.endl
  4434
  4435 9E30			.local	DO_INPUTLINE					; PROCEDURE
  4436
  4437 				; optimize OK (inputline.inc), line = 25
  4438
  4439 9E30 AD 71 04			lda ILPOS
  4440 9E33 F0 6C			jeq l_0BE5
  4441
  4442 				; optimize OK (inputline.inc), line = 27
  4443
  4444 9E35 AD FC 02			lda KEYB
  4445 9E38 C9 1C			cmp #$1C
  4446 9E3A F0 04			jeq l_0C04x
  4447 9E3C C9 0C			cmp #$0C
  4448 9E3E D0 4F			jne l_0C04
  4449 9E40			l_0C04x
  4450
  4451 				; optimize OK (inputline.inc), line = 29
  4452
  4453 9E40 AD FC 02			lda KEYB
  4454 9E43 C9 1C			cmp #$1C
  4455 9E45 D0 25			jne l_0C17
  4456
  4457 				; optimize OK (inputline.inc), line = 31
  4458
  4459 9E47 AD 00 05			lda adr.FN+$00
  4460 9E4A 8D 71 04			sta ILPOS
  4461
  4462 				; optimize OK (inputline.inc), line = 32
  4463
  4464 9E4D AD 77 A6			lda FN
  4465 9E50 85 88			sta @move.src
  4466 9E52 AD 78 A6			lda FN+1
  4467 9E55 85 89			sta @move.src+1
  4468 					@moveSTRING OUTSTR #128
  4468 				 MWA OUTSTR @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  4468 9E57 AD 79 A6 85 8C AD +  MWA OUTSTR @MOVE.DST
  4468 9E61 A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  4468 9E69 20 6B 82		 JSR @MOVESTRING
  4469 9E6C			l_0C17
  4470
  4471 				; optimize OK (inputline.inc), line = 34
  4472
  4473 9E6C A9 00			lda #$00
  4474 9E6E 8D 74 04			sta ILVCRS
  4475 9E71 20 81 9D			jsr SHOW_INPUTLINE
  4476
  4477 				; optimize OK (inputline.inc), line = 35
  4478
  4479 9E74 A9 02			lda #$02
  4480 9E76 8D 76 04			sta STATEINPUTLINE
  4481
  4482 				; optimize OK (inputline.inc), line = 36
  4483
  4484 9E79 A0 01			ldy #1
  4485 9E7B AD FC 02			lda KEYB
  4486 9E7E C9 0C			cmp #$0C
  4487 9E80 F0 01			beq @+
  4488 9E82 88				dey
  4489 				@
  4490 9E83 98				tya
  4491 9E84 8D 75 04			sta RESULTINPUTLINE
  4492
  4493 				; optimize OK (inputline.inc), line = 37
  4494
  4495 9E87 A9 0C			lda #$0C
  4496 9E89 8D FC 02			sta KEYB
  4497 9E8C 4C C6 9E			jmp @exit					; exit
  4498 9E8F			l_0C04
  4499
  4500 				; optimize OK (inputline.inc), line = 39
  4501
  4502 9E8F AD FC 02			lda KEYB
  4503 9E92 C9 34			cmp #$34
  4504 9E94 D0 0B			jne l_0C50
  4505
  4506 				; optimize OK (inputline.inc), line = 41
  4507
  4508 9E96 AC 71 04			ldy ILPOS
  4509 9E99 A9 9B			lda #$9B
  4510 9E9B 99 80 05			sta adr.OUTSTR,y
  4511
  4512 				; optimize FAIL (0, inputline.inc), line = 42
  4513
  4514 9E9E CE 71 04			dec ILPOS
  4515 9EA1			l_0C50
  4516 9EA1			l_0BE5
  4517
  4518 				; optimize OK (inputline.inc), line = 45
  4519
  4520 9EA1 AD 71 04			lda ILPOS
  4521 9EA4 C9 1E			cmp #$1E
  4522 9EA6 B0 16			jcs l_0C72
  4523
  4524 				; optimize OK (inputline.inc), line = 47
  4525
  4526 9EA8 AD FC 02			lda KEYB
  4527 9EAB 20 7A 96			jsr KEYSCAN2ASC
  4528 9EAE AD 83 04			lda KEYSCAN2ASC.RESULT
  4529 9EB1 85 D6			sta ILCH
  4530
  4531 				; optimize OK (inputline.inc), line = 48
  4532
  4533 9EB3 F0 09			jeq l_0C8C
  4534
  4535 				; optimize FAIL (0, inputline.inc), line = 50
  4536
  4537 9EB5 EE 71 04			inc ILPOS
  4538
  4539 				; optimize OK (inputline.inc), line = 51
  4540
  4541 9EB8 AC 71 04			ldy ILPOS
  4542 9EBB 99 80 05			sta adr.OUTSTR,y
  4543 9EBE			l_0C8C
  4544 9EBE			l_0C72
  4545
  4546 				; optimize FAIL ('SHOW_INPUTLINE', inputline.inc), line = 54
  4547
  4548 9EBE 20 81 9D			jsr SHOW_INPUTLINE
  4549
  4550 				; optimize OK (inputline.inc), line = 55
  4551
  4552 9EC1 A9 FF			lda #$FF
  4553 9EC3 8D FC 02			sta KEYB
  4554 9EC6			@exit
  4555 					.ifdef @new
  4556 					lda <@VarData
  4557 					sta :ztmp
  4558 					lda >@VarData
  4559 					ldy #@VarDataSize-1
  4560 					jmp @FreeMem
  4561 					els
  4562 9EC6 60				rts						; ret
  4563 					eif
  4564 				.endl
  4565
  4566 9EC7			.local	DRAWLISTSELECTION				; PROCEDURE
  4567
  4568 				; optimize OK (list.inc), line = 7
  4569
  4570 9EC7 AD 64 04			lda YFILE
  4571 9ECA 0A				asl @
  4572 9ECB A8				tay
  4573 9ECC B9 40 3B			lda adr.LISTSCRADR,y
  4574 9ECF 85 D4			sta SCRADR
  4575 9ED1 B9 41 3B			lda adr.LISTSCRADR+1,y
  4576 9ED4 85 D5			sta SCRADR+1
  4577 9ED6 A9 20			lda #$20
  4578 9ED8 20 05 93			jsr INVERS
  4579 9EDB			@exit
  4580 					.ifdef @new
  4581 					lda <@VarData
  4582 					sta :ztmp
  4583 					lda >@VarData
  4584 					ldy #@VarDataSize-1
  4585 					jmp @FreeMem
  4586 					els
  4587 9EDB 60				rts						; ret
  4588 					eif
  4589 				.endl
  4590
  4591 9EDC			.local	SHOWENTRY					; PROCEDURE
  4592
  4593 				; optimize OK (list.inc), line = 16
  4594
  4595 9EDC A9 97			lda <P_BANK
  4596 9EDE 85 88			sta GETENTRYSETS.PTR
  4597 9EE0 A9 04			lda >P_BANK
  4598 9EE2 85 89			sta GETENTRYSETS.PTR+1
  4599 9EE4 20 79 9B			jsr GETENTRYSETS
  4600
  4601 				; optimize OK (list.inc), line = 17
  4602
  4603 9EE7 A9 00			lda #$00
  4604 9EE9 85 D7			sta V
  4605
  4606 				; optimize OK (list.inc), line = 19
  4607
  4608 9EEB AD 97 04			lda P_BANK
  4609 9EEE C9 FE			cmp #$FE
  4610 9EF0 D0 04			jne l_0CCD
  4611 9EF2 A9 1E			lda #$1E
  4612 9EF4 85 D7			sta V
  4613 9EF6			l_0CCD
  4614
  4615 				; optimize OK (list.inc), line = 20
  4616
  4617 9EF6 AD 97 04			lda P_BANK
  4618 9EF9 C9 FF			cmp #$FF
  4619 9EFB D0 04			jne l_0CE6
  4620 9EFD A9 5A			lda #$5A
  4621 9EFF 85 D7			sta V
  4622 9F01			l_0CE6
  4623
  4624 				; optimize OK (list.inc), line = 21
  4625
  4626 9F01 AD 97 04			lda P_BANK
  4627 9F04 C9 40			cmp #$40
  4628 9F06 B0 13			jcs l_0CFF
  4629
  4630 				; optimize OK (list.inc), line = 22
  4631
  4632 9F08 AD 99 04			lda P_ADR+1
  4633 9F0B 0D 98 04			ora P_ADR
  4634 9F0E D0 07			jne l_0D11
  4635
  4636 				; optimize OK (list.inc), line = 23
  4637
  4638 9F10 A9 4D			lda #$4D
  4639 9F12 85 D7			sta V
  4640 9F14 4C 1B 9F			jmp l_0D1F
  4641 9F17			l_0D11
  4642
  4643 				; optimize OK (list.inc), line = 25
  4644
  4645 9F17 A9 5A			lda #$5A
  4646 9F19 85 D7			sta V
  4647 9F1B			l_0D1F
  4648 9F1B			l_0CFF
  4649
  4650 				; optimize OK (list.inc), line = 27
  4651
  4652 9F1B A4 D5			ldy SCRADR+1
  4653 9F1D 84 81			sty :bp+1
  4654 9F1F A4 D4			ldy SCRADR
  4655 9F21 A5 D7			lda V
  4656 9F23 91 80			sta (:bp),y
  4657 9F25 98				tya
  4658 9F26 18 69 02			add #$02
  4659 9F29 85 D4			sta SCRADR
  4660 9F2B 90 02			scc
  4661 9F2D E6 D5			inc SCRADR+1
  4662
  4663 				; optimize OK (list.inc), line = 29
  4664
  4665 9F2F AD 80 05			lda adr.OUTSTR+$00
  4666 9F32 C9 1F			cmp #$1F
  4667 9F34 90 05			jcc l_0D3F
  4668 9F36 A9 1E			lda #$1E
  4669 9F38 8D 80 05			sta adr.OUTSTR+$00
  4670 9F3B			l_0D3F
  4671
  4672 				; optimize OK (list.inc), line = 30
  4673
  4674 9F3B AD 79 A6			lda OUTSTR
  4675 9F3E 85 88			sta PUTASCTEXT.S
  4676 9F40 AD 7A A6			lda OUTSTR+1
  4677 9F43 85 89			sta PUTASCTEXT.S+1
  4678 9F45 20 4D 93			jsr PUTASCTEXT
  4679
  4680 				; optimize OK (list.inc), line = 31
  4681
  4682 9F48 A9 1E			lda #$1E
  4683 9F4A 38 ED 80 05			sub adr.OUTSTR+$00
  4684 9F4E 20 16 93			jsr PUTSPACES
  4685
  4686 				; ------------------------------------------------------------
  4687
  4688 = 0497			P_BANK	= DATAORIGIN+$0097
  4689 = 0498			P_ADR	= DATAORIGIN+$0098
  4690
  4691 = 0497			@VarData	= P_BANK
  4692 = 0003			@VarDataSize	= 3
  4693
  4694 9F51			@exit
  4695 					.ifdef @new
  4696 					lda <@VarData
  4697 					sta :ztmp
  4698 					lda >@VarData
  4699 					ldy #@VarDataSize-1
  4700 					jmp @FreeMem
  4701 					els
  4702 9F51 60				rts						; ret
  4703 					eif
  4704 				.endl
  4705
  4706 9F52			.local	SHOWLIST					; PROCEDURE
  4707
  4708 				; optimize OK (list.inc), line = 36
  4709
  4710 9F52 AD 65 04			lda SHFILE
  4711 9F55 20 B3 9B			jsr GOTONENTRY
  4712 9F58 A9 00			lda #$00
  4713 9F5A 85 D6			sta CHN
  4714
  4715 				; --- WhileProlog
  4716 9F5C 4C 91 9F			jmp l_0D61
  4717 9F5F			l_0D62
  4718
  4719 				; optimize OK (list.inc), line = 39
  4720
  4721 9F5F A5 D6			lda CHN
  4722 9F61 0A				asl @
  4723 9F62 A8				tay
  4724 9F63 B9 40 3B			lda adr.LISTSCRADR,y
  4725 9F66 85 D4			sta SCRADR
  4726 9F68 B9 41 3B			lda adr.LISTSCRADR+1,y
  4727 9F6B 85 D5			sta SCRADR+1
  4728
  4729 				; optimize OK (list.inc), line = 40
  4730
  4731 9F6D AD 79 A6			lda OUTSTR
  4732 9F70 85 88			sta GETENTRY.FN
  4733 9F72 AD 7A A6			lda OUTSTR+1
  4734 9F75 85 89			sta GETENTRY.FN+1
  4735 9F77 20 3B 9B			jsr GETENTRY
  4736 9F7A A5 90			lda GETENTRY.RESULT
  4737 9F7C F0 06			jeq l_0D76
  4738
  4739 				; optimize FAIL ('SHOWENTRY', list.inc), line = 42
  4740
  4741 9F7E 20 DC 9E			jsr SHOWENTRY
  4742 9F81 4C 87 9F			jmp l_0D81
  4743 9F84			l_0D76
  4744 9F84 4C 97 9F			jmp b_0D62					; break
  4745 9F87			l_0D81
  4746
  4747 				; optimize FAIL (0, list.inc), line = 44
  4748
  4749 9F87 E6 D6			inc CHN
  4750
  4751 				; optimize FAIL ('NEXTENTRY', list.inc), line = 45
  4752
  4753 9F89 20 8D 9B			jsr NEXTENTRY
  4754 9F8C AD 8F 04 95 95		mva NEXTENTRY.RESULT :STACKORIGIN+1,x
  4755 9F91			l_0D61
  4756
  4757 				; optimize OK (list.inc), line = 37
  4758
  4759 9F91 A5 D6			lda CHN
  4760 9F93 C9 10			cmp #$10
  4761 9F95 90 C8			jcc l_0D62
  4762 9F97			b_0D62
  4763 9F97			@exit
  4764 					.ifdef @new
  4765 					lda <@VarData
  4766 					sta :ztmp
  4767 					lda >@VarData
  4768 					ldy #@VarDataSize-1
  4769 					jmp @FreeMem
  4770 					els
  4771 9F97 60				rts						; ret
  4772 					eif
  4773 				.endl
  4774
  4775 9F98			.local	CHOICELISTFILE					; FUNCTION
  4776
  4777 				; optimize OK (list.inc), line = 54
  4778
  4779 9F98 AD 76 04			lda STATEINPUTLINE
  4780 9F9B D0 7F			jne l_0DA8
  4781
  4782 				; optimize OK (list.inc), line = 56
  4783
  4784 9F9D AD 66 04			lda CURFILE
  4785 9FA0 20 B3 9B			jsr GOTONENTRY
  4786
  4787 				; optimize OK (list.inc), line = 57
  4788
  4789 9FA3 AD 77 A6			lda FN
  4790 9FA6 85 88			sta GETENTRY.FN
  4791 9FA8 AD 78 A6			lda FN+1
  4792 9FAB 85 89			sta GETENTRY.FN+1
  4793 9FAD 20 3B 9B			jsr GETENTRY
  4794 9FB0 A5 90			lda GETENTRY.RESULT
  4795 9FB2 8D 9A 04			sta RESULT
  4796
  4797 				; optimize OK (list.inc), line = 58
  4798
  4799 9FB5 F0 62			jeq l_0DBF
  4800
  4801 				; optimize OK (list.inc), line = 60
  4802
  4803 9FB7 A9 94			lda <P_BANK
  4804 9FB9 85 88			sta GETENTRYSETS.PTR
  4805 9FBB A9 04			lda >P_BANK
  4806 9FBD 85 89			sta GETENTRYSETS.PTR+1
  4807 9FBF 20 79 9B			jsr GETENTRYSETS
  4808
  4809 				; optimize OK (list.inc), line = 62
  4810
  4811 9FC2 AD 77 A6			lda FN
  4812 9FC5 85 88			sta GETDEVICESPEC.FN
  4813 9FC7 AD 78 A6			lda FN+1
  4814 9FCA 85 89			sta GETDEVICESPEC.FN+1
  4815 9FCC AD 22 A0			lda DEV
  4816 9FCF 85 8C			sta GETDEVICESPEC.SPEC
  4817 9FD1 AD 23 A0			lda DEV+1
  4818 9FD4 85 8D			sta GETDEVICESPEC.SPEC+1
  4819 9FD6 20 0E 95			jsr GETDEVICESPEC
  4820 9FD9 A5 90			lda GETDEVICESPEC.RESULT
  4821 9FDB F0 03 4C FA 9F		jne l_0DD3
  4822
  4823 				; optimize OK (list.inc), line = 63
  4824
  4825 9FE0 AD 75 A6			lda CURDEV
  4826 9FE3 85 88			sta JOINSTRINGS.S1
  4827 9FE5 AD 76 A6			lda CURDEV+1
  4828 9FE8 85 89			sta JOINSTRINGS.S1+1
  4829 9FEA AD 77 A6			lda FN
  4830 9FED 85 8C			sta JOINSTRINGS.S2
  4831 9FEF AD 78 A6			lda FN+1
  4832 9FF2 85 8D			sta JOINSTRINGS.S2+1
  4833 9FF4 20 32 95			jsr JOINSTRINGS
  4834 9FF7 4C 19 A0			jmp l_0DE2
  4835 9FFA			l_0DD3
  4836
  4837 				; optimize OK (list.inc), line = 65
  4838
  4839 9FFA AD 77 A6			lda FN
  4840 9FFD 85 88			sta @move.src
  4841 9FFF AD 78 A6			lda FN+1
  4842 A002 85 89			sta @move.src+1
  4843 					@moveSTRING OUTSTR #128
  4843 				 MWA OUTSTR @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  4843 A004 AD 79 A6 85 8C AD +  MWA OUTSTR @MOVE.DST
  4843 A00E A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  4843 A016 20 6B 82		 JSR @MOVESTRING
  4844 A019			l_0DE2
  4845 A019			l_0DBF
  4846 A019 4C 21 A0			jmp l_0DEF
  4847 A01C			l_0DA8
  4848
  4849 				; optimize OK (list.inc), line = 69
  4850
  4851 A01C A9 00			lda #$00
  4852 A01E 8D 9A 04			sta RESULT
  4853 A021			l_0DEF
  4854 A021			@exit
  4855
  4856 				; ------------------------------------------------------------
  4857
  4858 = 049A			RESULT	= DATAORIGIN+$009A
  4859 = 049B			adr.DEV	= [DATAORIGIN+$009B] .array [4]
  4860 A021			.var DEV	= adr.DEV .word
  4861
  4862 = A022			@VarData	= DEV
  4863 = 0004			@VarDataSize	= 4
  4864
  4865 A021 60				rts						; ret
  4866 = A022 9B 04		DEV
  4866 				.endl
  4867
  4868 A024			.local	INIT						; PROCEDURE
  4869
  4870 A024 4C 5B A0			jmp l_0DF7
  4871
  4872 A027			.local	SETMCBASEADDRESS				; PROCEDURE | ASSEMBLER
  4873
  4874 				; -------------------  ASM Block 00000116  -------------------
  4875
  4876 A027			    icl 'asms/setMCBaseAddr.a65'
Source: setMCBaseAddr.a65
     1 				    .macro m@setMCBase name
     2 				      sty :name
     3 				      stx :name+1
     4 				    .endm
     5
     6 A027 8A 48		    txa:pha
     7
     8 A029 A4 D8		    ldy MCBaseAddr
     9 A02B A6 D9		    ldx MCBaseAddr+1
    10
    11 A02D			    m@setMCBase MAIN.MC6850.MC6850_INIT.MCBASESTATE
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A02D 8C C5 88		      sty MAIN.MC6850.MC6850_INIT.MCBASESTATE
     2 A030 8E C6 88		      stx MAIN.MC6850.MC6850_INIT.MCBASESTATE+1
Source: setMCBaseAddr.a65
    12 A033			    m@setMCBase MAIN.MC6850.MC6850_Send2.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A033 8C C9 88		      sty MAIN.MC6850.MC6850_SEND2.MCBASESTATE
     2 A036 8E CA 88		      stx MAIN.MC6850.MC6850_SEND2.MCBASESTATE+1
Source: setMCBaseAddr.a65
    13 A039			    m@setMCBase MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A039 8C DD 88		      sty MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASESTATE
     2 A03C 8E DE 88		      stx MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASESTATE+1
Source: setMCBaseAddr.a65
    14 A03F			    m@setMCBase MAIN.MIDI_FIFO.FIFO_FLUSH.MCBaseState
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A03F 8C 13 89		      sty MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASESTATE
     2 A042 8E 14 89		      stx MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASESTATE+1
Source: setMCBaseAddr.a65
    15
    16 A045 C8			    iny
    17 A046			    m@setMCBase MAIN.MC6850.MC6850_Send2.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A046 8C D2 88		      sty MAIN.MC6850.MC6850_SEND2.MCBASEBUF
     2 A049 8E D3 88		      stx MAIN.MC6850.MC6850_SEND2.MCBASEBUF+1
Source: setMCBaseAddr.a65
    18 A04C			    m@setMCBase MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A04C 8C ED 88		      sty MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASEBUF
     2 A04F 8E EE 88		      stx MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850.MCBASEBUF+1
Source: setMCBaseAddr.a65
    19 A052			    m@setMCBase MAIN.MIDI_FIFO.FIFO_FLUSH.MCBaseBuf
Macro: MAIN.INIT.SETMCBASEADDRESS.M@SETMCBASE [Source: setMCBaseAddr.a65]
     1 A052 8C 1D 89		      sty MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASEBUF
     2 A055 8E 1E 89		      stx MAIN.MIDI_FIFO.FIFO_FLUSH.MCBASEBUF+1
Source: setMCBaseAddr.a65
    20
    21 A058 68 AA		    pla:tax
  4877 				  
  4878 A05A			@exit
  4879 					.ifdef @new
  4880 					lda <@VarData
  4881 					sta :ztmp
  4882 					lda >@VarData
  4883 					ldy #@VarDataSize-1
  4884 					jmp @FreeMem
  4885 					els
  4886 A05A 60				rts						; ret
  4887 					eif
  4888 				.endl
  4889 A05B			l_0DF7
  4890
  4891 				; optimize OK (init.inc), line = 10
  4892
  4893 A05B A9 00			lda #$00
  4894 A05D 8D 00 D4			sta DMACTL
  4895
  4896 				; -------------------  ASM Block 00000117  -------------------
  4897
  4898 A060 A5 14		    lda $14
  4899 A062 C5 14		    cmp $14
  4900 A064 F0 FC		    beq *-2
  4901 				  
  4902 				; optimize FAIL ('SETMCBASEADDRESS', init.inc), line = 17
  4903
  4904 A066 20 27 A0			jsr SETMCBASEADDRESS
  4905
  4906 				; optimize OK (init.inc), line = 20
  4907
  4908 A069 A9 03			lda #$03
  4909 A06B 20 BE 88			jsr MC6850.MC6850_INIT
  4910
  4911 				; optimize OK (init.inc), line = 21
  4912
  4913 A06E A9 16			lda #$16
  4914 A070 20 BE 88			jsr MC6850.MC6850_INIT
  4915
  4916 				; optimize OK (init.inc), line = 23
  4917
  4918 A073 A9 32			lda #$32
  4919 A075 8D F4 02			sta CHBASE
  4920
  4921 				; optimize OK (init.inc), line = 24
  4922
  4923 A078 A9 B1			lda #$B1
  4924 A07A 8D 30 02			sta SDLST
  4925 A07D A9 3F			lda #$3F
  4926 A07F 8D 31 02			sta SDLST+1
  4927
  4928 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', init.inc), line = 26
  4929
  4930 A082 20 D5 88			jsr MIDI_FIFO.FIFO_RESET
  4931 A085 A0 FD			ldy #256-3
  4932 A087 B9 E5 7F 99 70 03 + 	mva:rne CODEORIGIN+$00E2+3-256,y adr.CURDEV+3-256,y+
  4933 A090 A9 00 8D 00 05		mva #$00 adr.FN
  4934
  4935 				; optimize FAIL ('CLEARWORKAREA', init.inc), line = 31
  4936
  4937 A095 20 72 94			jsr CLEARWORKAREA
  4938
  4939 				; optimize FAIL ('CLEARSTATUS', init.inc), line = 32
  4940
  4941 A098 20 4B 97			jsr CLEARSTATUS
  4942
  4943 				; optimize OK (init.inc), line = 33
  4944
  4945 A09B A9 90			lda #$90
  4946 A09D 85 D4			sta SCRADR
  4947 A09F A9 3A			lda #$3A
  4948 A0A1 85 D5			sta SCRADR+1
  4949 A0A3 20 68 94			jsr HLINE
  4950
  4951 				; optimize OK (init.inc), line = 34
  4952
  4953 A0A6 A9 91			lda #$91
  4954 A0A8 85 D4			sta SCRADR
  4955 A0AA A9 3A			lda #$3A
  4956 A0AC 85 D5			sta SCRADR+1
  4957 A0AE A9 E6			lda #$E6
  4958 A0B0 85 88			sta PUTINTTEXT.S
  4959 A0B2 A9 80			lda #$80
  4960 A0B4 85 89			sta PUTINTTEXT.S+1
  4961 A0B6 20 24 93			jsr PUTINTTEXT
  4962
  4963 				; optimize OK (init.inc), line = 35
  4964
  4965 A0B9 A9 AE			lda #$AE
  4966 A0BB 85 D4			sta SCRADR
  4967 A0BD A9 3A			lda #$3A
  4968 A0BF 85 D5			sta SCRADR+1
  4969 A0C1 A9 F0			lda #$F0
  4970 A0C3 85 88			sta PUTINTTEXT.S
  4971 A0C5 A9 80			lda #$80
  4972 A0C7 85 89			sta PUTINTTEXT.S+1
  4973 A0C9 20 24 93			jsr PUTINTTEXT
  4974
  4975 				; optimize OK (init.inc), line = 37
  4976
  4977 A0CC A9 00			lda #$00
  4978 A0CE 8D D6 92			sta MIDFILES.MIDTRACKS
  4979 A0D1 A9 2E			lda #$2E
  4980 A0D3 8D D7 92			sta MIDFILES.MIDTRACKS+1
  4981
  4982 				; optimize FAIL ('RESETMEMORYPTR', init.inc), line = 45
  4983
  4984 A0D6 20 2A 97			jsr RESETMEMORYPTR
  4985
  4986 				; optimize OK (init.inc), line = 46
  4987
  4988 A0D9 A5 14			lda _TM
  4989 A0DB 85 13			sta OTM
  4990
  4991 				; optimize FAIL ('SETCOLORS', init.inc), line = 47
  4992
  4993 A0DD 20 DC 92			jsr SETCOLORS
  4994 A0E0 A9 22			lda #$22
  4995 A0E2 8D 00 D4			sta DMACTL
  4996 A0E5 A9 00			lda #$00
  4997 A0E7 85 41			sta SOUNDR
  4998 A0E9 A9 01			lda #$01
  4999 A0EB 8D 69 04			sta PLAYDIR
  5000
  5001 				; optimize OK (init.inc), line = 48
  5002
  5003 A0EE A5 4A			lda PLAYERSTATUS
  5004 A0F0 29 0F			and #$0F
  5005 A0F2 09 40			ora #$40
  5006 A0F4 85 4A			sta PLAYERSTATUS
  5007
  5008 				; optimize OK (init.inc), line = 49
  5009
  5010 A0F6 A9 FF			lda #$FF
  5011 A0F8 85 1F			sta THI
  5012 A0FA A9 00			lda #$00
  5013 A0FC 8D DC 02			sta HLPFLG
  5014
  5015 				; optimize OK (init.inc), line = 50
  5016
  5017 A0FF 8D 76 04			sta STATEINPUTLINE
  5018
  5019 				; optimize OK (init.inc), line = 51
  5020
  5021 A102 8D 75 04			sta RESULTINPUTLINE
  5022
  5023 				; ------------------------------------------------------------
  5024
  5025 A105			@exit
  5026 					.ifdef @new
  5027 					lda <@VarData
  5028 					sta :ztmp
  5029 					lda >@VarData
  5030 					ldy #@VarDataSize-1
  5031 					jmp @FreeMem
  5032 					els
  5033 A105 60				rts						; ret
  5034 					eif
  5035 				.endl
  5036 A106			l_0107
  5037
  5038 				; optimize FAIL ('INIT', MIDICar Player.pas), line = 68
  5039
  5040 A106 20 24 A0			jsr INIT
  5041
  5042 				; optimize FAIL ('CLEARUVMETERS', MIDICar Player.pas), line = 69
  5043
  5044 A109 20 4C 98			jsr CLEARUVMETERS
  5045
  5046 				; optimize OK (MIDICar Player.pas), line = 78
  5047
  5048 A10C AD 75 A6			lda CURDEV
  5049 A10F 85 88			sta JOINSTRINGS.S1
  5050 A111 AD 76 A6			lda CURDEV+1
  5051 A114 85 89			sta JOINSTRINGS.S1+1
  5052 A116 A9 FB			lda #$FB
  5053 A118 85 8C			sta JOINSTRINGS.S2
  5054 A11A A9 80			lda #$80
  5055 A11C 85 8D			sta JOINSTRINGS.S2+1
  5056 A11E 20 32 95			jsr JOINSTRINGS
  5057
  5058 				; optimize OK (MIDICar Player.pas), line = 79
  5059
  5060 A121 A9 00			lda #$00
  5061 A123 20 B3 9B			jsr GOTONENTRY
  5062
  5063 				; optimize OK (MIDICar Player.pas), line = 80
  5064
  5065 A126 A9 FF			lda #$FF
  5066 A128 85 E2			sta MIDFILES._ADR
  5067 A12A 85 E3			sta MIDFILES._ADR+1
  5068 A12C A9 FE			lda #$FE
  5069 A12E 85 E1			sta MIDFILES._BANK
  5070 A130 AD 79 A6			lda OUTSTR
  5071 A133 85 88			sta ADDTOLIST.ENTRY
  5072 A135 AD 7A A6			lda OUTSTR+1
  5073 A138 85 89			sta ADDTOLIST.ENTRY+1
  5074 A13A 20 D0 9B			jsr ADDTOLIST
  5075
  5076 				; optimize OK (MIDICar Player.pas), line = 81
  5077
  5078 A13D A9 00			lda #$00
  5079 A13F 8D 65 04			sta SHFILE
  5080 A142 8D 64 04			sta YFILE
  5081 A145 8D 66 04			sta CURFILE
  5082
  5083 				; optimize FAIL ('CHOICELISTFILE', MIDICar Player.pas), line = 82
  5084
  5085 A148 20 98 9F			jsr CHOICELISTFILE
  5086 A14B AD 9A 04 95 95		mva CHOICELISTFILE.RESULT :STACKORIGIN+1,x
  5087 A150 A9 02			lda #$02
  5088 A152 8D 76 04			sta STATEINPUTLINE
  5089 A155 A9 01			lda #$01
  5090 A157 8D 75 04			sta RESULTINPUTLINE
  5091 A15A A9 0C			lda #$0C
  5092 A15C 8D FC 02			sta KEYB
  5093
  5094 				; optimize FAIL ('SETNMI', MIDICar Player.pas), line = 85
  5095
  5096 A15F 20 0B 96			jsr SETNMI
  5097
  5098 				; --- RepeatUntilProlog
  5099 A162			l_0E82
  5100
  5101 				; optimize FAIL ('MIDFILES.PROCESSMIDI', MIDICar Player.pas), line = 89
  5102
  5103 A162 20 BE 91			jsr MIDFILES.PROCESSMIDI
  5104
  5105 				; optimize OK (MIDICar Player.pas), line = 90
  5106
  5107 A165 A5 4A			lda PLAYERSTATUS
  5108 A167 29 40			and #$40
  5109 A169 F0 03 4C 3B A2		jne l_0EA5
  5110 A16E A5 DF			lda MIDFILES.PLAYINGTRACKS
  5111 A170 F0 03 4C 3B A2		jne l_0EA5
  5112
  5113 				; optimize OK (MIDICar Player.pas), line = 92
  5114
  5115 A175 A5 4A			lda PLAYERSTATUS
  5116 A177 29 0C			and #$0C
  5117 A179 85 D7			sta V
  5118
  5119 				; optimize FAIL ('STATUSSTOPPED', MIDICar Player.pas), line = 93
  5120
  5121 A17B 20 61 99			jsr STATUSSTOPPED
  5122
  5123 				; optimize OK (MIDICar Player.pas), line = 94
  5124
  5125 A17E A5 D7			lda V
  5126 A180 D0 03 4C 3B A2		jeq l_0EC3
  5127
  5128 				; optimize OK (MIDICar Player.pas), line = 96
  5129
  5130 A185 38 E9 05			sub #$05
  5131 A188 50 02			svc
  5132 A18A 49 80			eor #$80
  5133 A18C 10 03 4C 3B A2		jmi l_0ED6
  5134
  5135 				; optimize OK (MIDICar Player.pas), line = 97
  5136
  5137 A191 AD 68 04			lda CURPLAY
  5138 A194 C9 FF			cmp #$FF
  5139 A196 D0 03 4C 3B A2		jeq l_0EE9
  5140
  5141 				; --- RepeatUntilProlog
  5142 A19B			l_0EEB
  5143
  5144 				; optimize OK (MIDICar Player.pas), line = 100
  5145
  5146 A19B AD 68 04			lda CURPLAY
  5147 A19E C9 FF			cmp #$FF
  5148 A1A0 D0 06			jne l_0EFD
  5149 A1A2 AD 66 04			lda CURFILE
  5150 A1A5 8D 68 04			sta CURPLAY
  5151 A1A8			l_0EFD
  5152
  5153 				; optimize OK (MIDICar Player.pas), line = 101
  5154
  5155 A1A8 A5 D7			lda V
  5156 A1AA C9 0C			cmp #$0C
  5157 A1AC D0 0F			jne l_0F18
  5158
  5159 				; optimize OK (MIDICar Player.pas), line = 102
  5160
  5161 A1AE AD 67 04			lda TOTALFILES
  5162 A1B1 20 A3 88			jsr SYSTEM.RANDOM_0172
  5163 A1B4 AD 0C 04			lda SYSTEM.RANDOM_0172.RESULT
  5164 A1B7 8D 68 04			sta CURPLAY
  5165 A1BA 4C DE A1			jmp l_0F29
  5166 A1BD			l_0F18
  5167
  5168 				; optimize OK (MIDICar Player.pas), line = 105
  5169
  5170 A1BD AD 68 04			lda CURPLAY
  5171 A1C0 18 6D 69 04			add PLAYDIR
  5172 A1C4 8D 68 04			sta CURPLAY
  5173
  5174 				; optimize OK (MIDICar Player.pas), line = 106
  5175
  5176 A1C7 C9 01			cmp #$01
  5177 A1C9 D0 06			jne l_0F3E
  5178 A1CB AD 67 04			lda TOTALFILES
  5179 A1CE 8D 68 04			sta CURPLAY
  5180 A1D1			l_0F3E
  5181
  5182 				; optimize OK (MIDICar Player.pas), line = 107
  5183
  5184 A1D1 AD 68 04			lda CURPLAY
  5185 A1D4 CD 67 04			cmp TOTALFILES
  5186 A1D7 D0 05			jne l_0F5B
  5187 A1D9 A9 01			lda #$01
  5188 A1DB 8D 68 04			sta CURPLAY
  5189 A1DE			l_0F5B
  5190 A1DE			l_0F29
  5191
  5192 				; optimize OK (MIDICar Player.pas), line = 109
  5193
  5194 A1DE AD 68 04			lda CURPLAY
  5195 A1E1 8D 66 04			sta CURFILE
  5196
  5197 				; optimize FAIL ('CHOICELISTFILE', MIDICar Player.pas), line = 110
  5198
  5199 A1E4 20 98 9F			jsr CHOICELISTFILE
  5200 A1E7 AD 9A 04 95 95		mva CHOICELISTFILE.RESULT :STACKORIGIN+1,x
  5201
  5202 				; optimize OK (MIDICar Player.pas), line = 111
  5203
  5204 A1EC AD 94 04			lda P_BANK
  5205 A1EF C9 FF			cmp #$FF
  5206 A1F1 D0 18			jne l_0F7B
  5207
  5208 				; optimize OK (MIDICar Player.pas), line = 112
  5209
  5210 A1F3 AD 79 A6			lda OUTSTR
  5211 A1F6 8D 8B 04			sta LOADSONG.FILENAME
  5212 A1F9 AD 7A A6			lda OUTSTR+1
  5213 A1FC 8D 8C 04			sta LOADSONG.FILENAME+1
  5214 A1FF 20 70 9A			jsr LOADSONG
  5215 A202 AD 8D 04			lda LOADSONG.RESULT
  5216 A205 8D 07 04			sta SYSTEM.IORESULT
  5217 A208 4C 0E A2			jmp l_0F8B
  5218 A20B			l_0F7B
  5219 A20B 4C 1B A2			jmp c_0EEB					; continue
  5220 A20E			l_0F8B
  5221
  5222 				; optimize OK (MIDICar Player.pas), line = 115
  5223
  5224 A20E A0 01			ldy #1
  5225 A210 AD 07 04			lda SYSTEM.IORESULT
  5226 A213 C9 01			cmp #$01
  5227 A215 D0 01			bne @+
  5228 A217 88				dey
  5229 				@
  5230 A218 98				tya
  5231 A219 D0 03			bne *+5
  5232 A21B			c_0EEB
  5233 A21B 4C 9B A1			jmp l_0EEB
  5234
  5235 				; optimize FAIL ('CLEARSTATUS', MIDICar Player.pas), line = 116
  5236
  5237 A21E 20 4B 97			jsr CLEARSTATUS
  5238
  5239 				; optimize OK (MIDICar Player.pas), line = 117
  5240
  5241 A221 AD 07 04			lda SYSTEM.IORESULT
  5242 A224 29 FC			and #$FC
  5243 A226 F0 06			jeq l_0FAF
  5244 A228 AD 07 04			lda SYSTEM.IORESULT
  5245 A22B 20 EC 99			jsr STATUSERROR
  5246 A22E			l_0FAF
  5247
  5248 				; optimize OK (MIDICar Player.pas), line = 118
  5249
  5250 A22E AD 19 04			lda MIDFILES.TOTALTRACKS
  5251 A231 F0 03			jeq l_0FC8
  5252
  5253 				; optimize FAIL ('STATUSPLAYING', MIDICar Player.pas), line = 119
  5254
  5255 A233 20 C6 98			jsr STATUSPLAYING
  5256 A236			l_0FC8
  5257
  5258 				; optimize OK (MIDICar Player.pas), line = 120
  5259
  5260 A236 A9 01			lda #$01
  5261 A238 8D 69 04			sta PLAYDIR
  5262 A23B			l_0EE9
  5263 A23B			l_0ED6
  5264 A23B			l_0EC3
  5265 A23B			l_0EA5
  5266
  5267 				; optimize OK (MIDICar Player.pas), line = 125
  5268
  5269 A23B A5 14			lda _TM
  5270 A23D C5 13			cmp OTM
  5271 A23F D0 03 4C ED A2		jeq l_0FEC
  5272
  5273 				; optimize OK (MIDICar Player.pas), line = 127
  5274
  5275 A244 85 13			sta OTM
  5276
  5277 				; optimize OK (MIDICar Player.pas), line = 128
  5278
  5279 A246 A5 4A			lda PLAYERSTATUS
  5280 A248 10 0A			jpl l_1009
  5281
  5282 				; optimize OK (MIDICar Player.pas), line = 130
  5283
  5284 A24A 49 80			eor #$80
  5285 A24C 85 4A			sta PLAYERSTATUS
  5286
  5287 				; optimize FAIL ('SHOWLIST', MIDICar Player.pas), line = 131
  5288
  5289 A24E 20 52 9F			jsr SHOWLIST
  5290
  5291 				; optimize FAIL ('DRAWLISTSELECTION', MIDICar Player.pas), line = 132
  5292
  5293 A251 20 C7 9E			jsr DRAWLISTSELECTION
  5294 A254			l_1009
  5295
  5296 				; optimize OK (MIDICar Player.pas), line = 134
  5297
  5298 A254 A9 C4			lda #$C4
  5299 A256 85 D4			sta SCRADR
  5300 A258 A9 3A			lda #$3A
  5301 A25A 85 D5			sta SCRADR+1
  5302 A25C A9 F0			lda <MIDFILES._TOTALTICKS
  5303 A25E 8D 79 04			sta PUTHEX.V
  5304 A261 A9 00			lda >MIDFILES._TOTALTICKS
  5305 A263 8D 7A 04			sta PUTHEX.V+1
  5306 A266 A9 08			lda #$08
  5307 A268 8D 7B 04			sta PUTHEX.N
  5308 A26B 20 7E 93			jsr PUTHEX
  5309
  5310 				; -------------------  ASM Block 00000118  -------------------
  5311
  5312 A26E			  icl 'asms/uvmeters.a65' 
Source: uvmeters.a65
     1 = 00D6			hlpptr = $D6
     2 A26E A5 4A		  lda playerStatus
     3 A270 29 02		  and #ps_view
     4 A272 D0 54		  bne dontUpdateUVMeter
     5
     6 A274			updateUVMeter:
     7 A274 8E C7 A2		  stx regx // txa:pha
     8
     9 A277 A9 12		  lda #<SCREEN_CHANNELS
    10 A279 85 D4		  sta scradr
    11 A27B A9 38		  lda #>SCREEN_CHANNELS
    12 A27D 85 D5		  sta scradr+1
    13
    14 A27F A2 00		  ldx #0
    15 A281			uvmeterLoop:
    16 A281 BD 20 04		  lda MIDFILES.adr.CHNVOLUME,x
    17 A284 F0 30		  beq dontUpdate
    18
    19 A286 C9 04		  cmp #4
    20 A288 10 04		  bpl decVol
    21 A28A A9 00		  lda #0
    22 A28C F0 03		  beq storeVol
    23 A28E			decVol:
    24 A28E 38 E9 04		  sub #4
    25 A291			storeVol:
    26 A291 9D 20 04		  sta MIDFILES.adr.CHNVOLUME,x
    27
    28 A294 4A			  lsr @
    29 A295 29 3C		  and #%00111100
    30
    31 A297 18 69 00		  add #<UVMETER_ADDR
    32 A29A 85 D6		  sta hlpptr
    33 A29C A9 3B		  lda #>UVMETER_ADDR
    34 A29E 85 D7		  sta hlpptr+1
    35
    36 A2A0 A0 03		  ldy #3            //2
    37 A2A2 B1 D6		  lda (hlpptr),y    //5*
    38 A2A4 91 D4		  sta (scradr),y    //6
    39 A2A6 88			  dey               //2
    40 A2A7 B1 D6		  lda (hlpptr),y
    41 A2A9 91 D4		  sta (scradr),y
    42 A2AB 88			  dey
    43 A2AC B1 D6		  lda (hlpptr),y
    44 A2AE 91 D4		  sta (scradr),y
    45 A2B0 88			  dey
    46 A2B1 B1 D6		  lda (hlpptr),y
    47 A2B3 91 D4		  sta (scradr),y
    48 A2B5 88			  dey
    49 				                    //15*+39*
    50
    51 A2B6			dontUpdate:
    52 A2B6 A5 D4		  lda scradr        //3
    53 A2B8 18 69 28		  add #40           //4
    54 A2BB 85 D4		  sta scradr        //3
    55 A2BD 90 02 E6 D5		  scc:inc scradr+1  //2**+5
    56
    57 A2C1 E8			  inx
    58 A2C2 E0 10		  cpx #16
    59 A2C4 D0 BB		  bne uvmeterLoop
    60
    61 A2C6 A2 00		  ldx regx:#00 // pla:tax
    62 A2C8			dontUpdateUVMeter
  5313 				; optimize OK (MIDICar Player.pas), line = 137
  5314
  5315 A2C8 AD 76 04			lda STATEINPUTLINE
  5316 A2CB C9 01			cmp #$01
  5317 A2CD D0 1E			jne l_1031
  5318
  5319 				; optimize OK (MIDICar Player.pas), line = 138
  5320
  5321 A2CF A5 14			lda _TM
  5322 A2D1 38 E5 12			sub CTM
  5323 A2D4 C9 0A			cmp #$0A
  5324 A2D6 90 15			jcc l_104A
  5325 A2D8 F0 13			jeq l_104A
  5326
  5327 				; optimize OK (MIDICar Player.pas), line = 140
  5328
  5329 A2DA A5 14			lda _TM
  5330 A2DC 85 12			sta CTM
  5331
  5332 				; optimize OK (MIDICar Player.pas), line = 141
  5333
  5334 A2DE A0 01			ldy #1
  5335 A2E0 AD 74 04			lda ILVCRS
  5336 A2E3 F0 01			beq @+
  5337 A2E5 88				dey
  5338 				@
  5339 A2E6 98				tya
  5340 A2E7 8D 74 04			sta ILVCRS
  5341
  5342 				; optimize FAIL ('SHOW_INPUTLINE', MIDICar Player.pas), line = 142
  5343
  5344 A2EA 20 81 9D			jsr SHOW_INPUTLINE
  5345 A2ED			l_104A
  5346 A2ED			l_1031
  5347 A2ED			l_0FEC
  5348
  5349 				; optimize OK (keyboard.inc), line = 1
  5350
  5351 A2ED AD FC 02			lda KEYB
  5352 A2F0 C9 FF			cmp #$FF
  5353 A2F2 D0 08			jne l_107Fx
  5354 A2F4 AD DC 02			lda HLPFLG
  5355 A2F7 D0 03 4C 51 A6		jeq l_107F
  5356 A2FC			l_107Fx
  5357
  5358 				; optimize OK (keyboard.inc), line = 3
  5359
  5360 A2FC A5 4A			lda PLAYERSTATUS
  5361 A2FE 29 20			and #$20
  5362 A300 F0 18			jeq l_1096
  5363
  5364 				; optimize OK (keyboard.inc), line = 5
  5365
  5366 A302 A5 4A			lda PLAYERSTATUS
  5367 A304 49 20			eor #$20
  5368 A306 85 4A			sta PLAYERSTATUS
  5369
  5370 				; optimize OK (keyboard.inc), line = 6
  5371
  5372 A308 A9 E8			lda #$E8
  5373 A30A 8D CA 3F			sta $3FCA
  5374 A30D A9 37			lda #$37
  5375 A30F 8D CB 3F			sta $3FCA+1
  5376
  5377 				; optimize OK (keyboard.inc), line = 7
  5378
  5379 A312 A9 FF			lda #$FF
  5380 A314 8D FC 02			sta KEYB
  5381 A317 4C 3D A3			jmp l_10B1
  5382 A31A			l_1096
  5383
  5384 				; optimize OK (keyboard.inc), line = 10
  5385
  5386 A31A AD FC 02			lda KEYB
  5387 A31D C9 39			cmp #$39
  5388 A31F F0 07			jeq l_10CFx
  5389 A321 AD DC 02			lda HLPFLG
  5390 A324 C9 11			cmp #$11
  5391 A326 D0 15			jne l_10CF
  5392 A328			l_10CFx
  5393
  5394 				; optimize OK (keyboard.inc), line = 12
  5395
  5396 A328 A5 4A			lda PLAYERSTATUS
  5397 A32A 49 20			eor #$20
  5398 A32C 85 4A			sta PLAYERSTATUS
  5399
  5400 				; optimize OK (keyboard.inc), line = 13
  5401
  5402 A32E A9 60			lda #$60
  5403 A330 8D CA 3F			sta $3FCA
  5404 A333 A9 3B			lda #$3B
  5405 A335 8D CB 3F			sta $3FCA+1
  5406
  5407 				; optimize OK (keyboard.inc), line = 14
  5408
  5409 A338 A9 00			lda #$00
  5410 A33A 8D DC 02			sta HLPFLG
  5411 A33D			l_10CF
  5412 A33D			l_10B1
  5413
  5414 				; optimize OK (keyboard.inc), line = 16
  5415
  5416 A33D AD 76 04			lda STATEINPUTLINE
  5417 A340 C9 01			cmp #$01
  5418 A342 D0 06			jne l_10F5
  5419
  5420 				; optimize FAIL ('DO_INPUTLINE', keyboard.inc), line = 18
  5421
  5422 A344 20 30 9E			jsr DO_INPUTLINE
  5423 A347 4C 68 A5			jmp l_1100
  5424 A34A			l_10F5
  5425
  5426 				; optimize OK (keyboard.inc), line = 20
  5427
  5428 A34A AD FC 02			lda KEYB
  5429 A34D C9 1C			cmp #$1C
  5430 A34F D0 03			jne l_1112
  5431 A351 4C 54 A6			jmp b_0E82					; break
  5432 A354			l_1112
  5433
  5434 				; optimize OK (keyboard.inc), line = 21
  5435
  5436 A354 AD FC 02			lda KEYB
  5437 A357 C9 21			cmp #$21
  5438 A359 D0 49			jne l_1127
  5439
  5440 				; optimize OK (keyboard.inc), line = 23
  5441
  5442 A35B AD 66 04			lda CURFILE
  5443 A35E 20 B3 9B			jsr GOTONENTRY
  5444
  5445 				; optimize OK (keyboard.inc), line = 24
  5446
  5447 A361 AD 79 A6			lda OUTSTR
  5448 A364 85 88			sta GETENTRY.FN
  5449 A366 AD 7A A6			lda OUTSTR+1
  5450 A369 85 89			sta GETENTRY.FN+1
  5451 A36B 20 3B 9B			jsr GETENTRY
  5452 A36E A5 90 95 95			mva GETENTRY.RESULT :STACKORIGIN+1,x
  5453
  5454 				; optimize OK (keyboard.inc), line = 25
  5455
  5456 A372 A9 94			lda <P_BANK
  5457 A374 85 88			sta GETENTRYSETS.PTR
  5458 A376 A9 04			lda >P_BANK
  5459 A378 85 89			sta GETENTRYSETS.PTR+1
  5460 A37A 20 79 9B			jsr GETENTRYSETS
  5461
  5462 				; optimize OK (keyboard.inc), line = 26
  5463
  5464 A37D AD 94 04			lda P_BANK
  5465 A380 C9 FE			cmp #$FE
  5466 A382 F0 20			jeq l_1153
  5467 A384 29 7F			and #$7F
  5468 A386 F0 1C			jeq l_1153
  5469
  5470 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 28
  5471
  5472 A388 20 C7 9E			jsr DRAWLISTSELECTION
  5473
  5474 				; optimize OK (keyboard.inc), line = 29
  5475
  5476 A38B AD 94 04			lda P_BANK
  5477 A38E 49 80			eor #$80
  5478 A390 8D 94 04			sta P_BANK
  5479
  5480 				; optimize OK (keyboard.inc), line = 30
  5481
  5482 A393 A9 94			lda <P_BANK
  5483 A395 85 88			sta SETENTRYSETS.PTR
  5484 A397 A9 04			lda >P_BANK
  5485 A399 85 89			sta SETENTRYSETS.PTR+1
  5486 A39B 20 83 9B			jsr SETENTRYSETS
  5487
  5488 				; optimize FAIL ('SHOWENTRY', keyboard.inc), line = 31
  5489
  5490 A39E 20 DC 9E			jsr SHOWENTRY
  5491
  5492 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 32
  5493
  5494 A3A1 20 C7 9E			jsr DRAWLISTSELECTION
  5495 A3A4			l_1153
  5496 A3A4			l_1127
  5497
  5498 				; optimize OK (keyboard.inc), line = 35
  5499
  5500 A3A4 AD FC 02			lda KEYB
  5501 A3A7 C9 0E			cmp #$0E
  5502 A3A9 F0 07			jeq l_1185x
  5503 A3AB C9 0F			cmp #$0F
  5504 A3AD F0 03 4C 63 A4		jne l_1185
  5505 A3B2			l_1185x
  5506
  5507 				; optimize OK (keyboard.inc), line = 37
  5508
  5509 A3B2 A5 4A			lda PLAYERSTATUS
  5510 A3B4 30 03			jmi l_119C
  5511 A3B6 20 C7 9E			jsr DRAWLISTSELECTION
  5512 A3B9			l_119C
  5513
  5514 				; optimize OK (keyboard.inc), line = 38
  5515
  5516 A3B9 A9 00			lda #$00
  5517 A3BB 85 D7			sta V
  5518
  5519 				; optimize OK (keyboard.inc), line = 39
  5520
  5521 A3BD AD FC 02			lda KEYB
  5522 A3C0 C9 0E			cmp #$0E
  5523 A3C2 D0 14			jne l_11B6
  5524
  5525 				; optimize OK (keyboard.inc), line = 41
  5526
  5527 A3C4 AD 64 04			lda YFILE
  5528 A3C7 F0 06			jeq l_11C9
  5529
  5530 				; optimize FAIL (0, keyboard.inc), line = 42
  5531
  5532 A3C9 CE 64 04			dec YFILE
  5533 A3CC 4C D8 A3			jmp l_11D7
  5534 A3CF			l_11C9
  5535
  5536 				; optimize OK (keyboard.inc), line = 44
  5537
  5538 A3CF AD 65 04			lda SHFILE
  5539 A3D2 F0 04			jeq l_11E9
  5540 A3D4 A9 FF			lda #$FF
  5541 A3D6 85 D7			sta V
  5542 A3D8			l_11E9
  5543 A3D8			l_11D7
  5544 A3D8			l_11B6
  5545
  5546 				; optimize OK (keyboard.inc), line = 46
  5547
  5548 A3D8 AD FC 02			lda KEYB
  5549 A3DB C9 0F			cmp #$0F
  5550 A3DD D0 54			jne l_1204
  5551
  5552 				; optimize OK (keyboard.inc), line = 48
  5553
  5554 A3DF AD 64 04			lda YFILE
  5555 A3E2 C9 0F			cmp #$0F
  5556 A3E4 B0 06			jcs l_1217
  5557
  5558 				; optimize FAIL (0, keyboard.inc), line = 49
  5559
  5560 A3E6 EE 64 04			inc YFILE
  5561 A3E9 4C 33 A4			jmp l_1225
  5562 A3EC			l_1217
  5563
  5564 				; optimize OK (keyboard.inc), line = 51
  5565
  5566 A3EC AD 67 04			lda TOTALFILES
  5567 A3EF 38 ED 64 04			sub YFILE
  5568 A3F3 85 9E			sta :STACKORIGIN+10
  5569 A3F5 A9 00			lda #$00
  5570 A3F7 E9 00			sbc #$00
  5571 A3F9 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  5572 A3FB A9 00			lda #$00
  5573 A3FD E9 00			sbc #$00
  5574 A3FF 85 BE			sta :STACKORIGIN+STACKWIDTH*2+10
  5575 A401 A9 00			lda #$00
  5576 A403 E9 00			sbc #$00
  5577 A405 85 CE			sta :STACKORIGIN+STACKWIDTH*3+10
  5578 A407 A5 9E			lda :STACKORIGIN+10
  5579 A409 38 E9 01			sub #$01
  5580 A40C 85 9E			sta :STACKORIGIN+10
  5581 A40E A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  5582 A410 E9 00			sbc #$00
  5583 A412 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  5584 A414 A5 BE			lda :STACKORIGIN+STACKWIDTH*2+10
  5585 A416 E9 00			sbc #$00
  5586 A418 85 BE			sta :STACKORIGIN+STACKWIDTH*2+10
  5587 A41A A5 CE			lda :STACKORIGIN+STACKWIDTH*3+10
  5588 A41C E9 00			sbc #$00
  5589 A41E D0 0D			bne @+
  5590 A420 A5 BE			lda :STACKORIGIN+STACKWIDTH*2+10
  5591 A422 D0 09			bne @+
  5592 A424 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  5593 A426 D0 05			bne @+
  5594 A428 AD 65 04			lda SHFILE
  5595 A42B C5 9E			cmp :STACKORIGIN+10
  5596 				@
  5597 A42D B0 04			jcs l_1243
  5598 A42F A9 01			lda #$01
  5599 A431 85 D7			sta V
  5600 A433			l_1243
  5601 A433			l_1225
  5602 A433			l_1204
  5603
  5604 				; optimize OK (keyboard.inc), line = 53
  5605
  5606 A433 A5 D7			lda V
  5607 A435 F0 0F			jeq l_125E
  5608
  5609 				; optimize OK (keyboard.inc), line = 55
  5610
  5611 A437 AD 65 04			lda SHFILE
  5612 A43A 18 65 D7			add V
  5613 A43D 8D 65 04			sta SHFILE
  5614
  5615 				; optimize OK (keyboard.inc), line = 56
  5616
  5617 A440 A5 4A			lda PLAYERSTATUS
  5618 A442 09 80			ora #$80
  5619 A444 85 4A			sta PLAYERSTATUS
  5620 A446			l_125E
  5621
  5622 				; optimize OK (keyboard.inc), line = 59
  5623
  5624 A446 AD 65 04			lda SHFILE
  5625 A449 18 6D 64 04			add YFILE
  5626 A44D 8D 66 04			sta CURFILE
  5627
  5628 				; optimize OK (keyboard.inc), line = 60
  5629
  5630 A450 CD 67 04			cmp TOTALFILES
  5631 A453 90 07			jcc l_128E
  5632 A455 AC 67 04			ldy TOTALFILES
  5633 A458 88				dey
  5634 A459 8C 66 04			sty CURFILE
  5635 A45C			l_128E
  5636
  5637 				; optimize OK (keyboard.inc), line = 61
  5638
  5639 A45C A5 4A			lda PLAYERSTATUS
  5640 A45E 30 03			jmi l_12B1
  5641 A460 20 C7 9E			jsr DRAWLISTSELECTION
  5642 A463			l_12B1
  5643 A463			l_1185
  5644
  5645 				; optimize OK (keyboard.inc), line = 63
  5646
  5647 A463 AD FC 02			lda KEYB
  5648 A466 D0 14			jne l_12C9
  5649
  5650 				; optimize OK (keyboard.inc), line = 65
  5651
  5652 A468 A5 4A			lda PLAYERSTATUS
  5653 A46A 18 69 04			add #$04
  5654 A46D 29 0C			and #$0C
  5655 A46F 85 D7			sta V
  5656
  5657 				; optimize OK (keyboard.inc), line = 66
  5658
  5659 A471 A5 4A			lda PLAYERSTATUS
  5660 A473 29 F3			and #$F3
  5661 A475 05 D7			ora V
  5662 A477 85 4A			sta PLAYERSTATUS
  5663
  5664 				; optimize FAIL ('STATUSLOOP', keyboard.inc), line = 67
  5665
  5666 A479 20 A4 98			jsr STATUSLOOP
  5667 A47C			l_12C9
  5668
  5669 				; optimize OK (keyboard.inc), line = 69
  5670
  5671 A47C AD FC 02			lda KEYB
  5672 A47F C9 25			cmp #$25
  5673 A481 D0 09			jne l_12FD
  5674
  5675 				; optimize FAIL ('CLEARUVMETERS', keyboard.inc), line = 71
  5676
  5677 A483 20 4C 98			jsr CLEARUVMETERS
  5678
  5679 				; optimize OK (keyboard.inc), line = 72
  5680
  5681 A486 A5 4A			lda PLAYERSTATUS
  5682 A488 49 02			eor #$02
  5683 A48A 85 4A			sta PLAYERSTATUS
  5684 A48C			l_12FD
  5685
  5686 				; optimize OK (keyboard.inc), line = 74
  5687
  5688 A48C AD FC 02			lda KEYB
  5689 A48F C9 27			cmp #$27
  5690 A491 D0 09			jne l_131D
  5691
  5692 				; optimize OK (keyboard.inc), line = 76
  5693
  5694 A493 A5 4A			lda PLAYERSTATUS
  5695 A495 49 01			eor #$01
  5696 A497 85 4A			sta PLAYERSTATUS
  5697
  5698 				; optimize FAIL ('SETCOLORS', keyboard.inc), line = 77
  5699
  5700 A499 20 DC 92			jsr SETCOLORS
  5701 A49C			l_131D
  5702
  5703 				; optimize OK (keyboard.inc), line = 79
  5704
  5705 A49C AD FC 02			lda KEYB
  5706 A49F C9 17			cmp #$17
  5707 A4A1 F0 04			jeq l_1349x
  5708 A4A3 C9 15			cmp #$15
  5709 A4A5 D0 1F			jne l_1349
  5710 A4A7			l_1349x
  5711
  5712 				; optimize OK (keyboard.inc), line = 81
  5713
  5714 A4A7 AD FC 02			lda KEYB
  5715 A4AA C9 17			cmp #$17
  5716 A4AC D0 05			jne l_135C
  5717 A4AE A9 FF			lda #$FF
  5718 A4B0 8D 69 04			sta PLAYDIR
  5719 A4B3			l_135C
  5720
  5721 				; optimize OK (keyboard.inc), line = 82
  5722
  5723 A4B3 AD FC 02			lda KEYB
  5724 A4B6 C9 15			cmp #$15
  5725 A4B8 D0 05			jne l_1375
  5726 A4BA A9 01			lda #$01
  5727 A4BC 8D 69 04			sta PLAYDIR
  5728 A4BF			l_1375
  5729
  5730 				; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 83
  5731
  5732 A4BF 20 2B 99			jsr STATUSPAUSE
  5733
  5734 				; optimize OK (keyboard.inc), line = 84
  5735
  5736 A4C2 A9 00			lda #$00
  5737 A4C4 85 DF			sta MIDFILES.PLAYINGTRACKS
  5738 A4C6			l_1349
  5739
  5740 				; optimize OK (keyboard.inc), line = 86
  5741
  5742 A4C6 AD FC 02			lda KEYB
  5743 A4C9 C9 16			cmp #$16
  5744 A4CB D0 06			jne l_1395
  5745
  5746 				; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 88
  5747
  5748 A4CD 20 61 99			jsr STATUSSTOPPED
  5749
  5750 				; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 89
  5751
  5752 A4D0 20 C6 98			jsr STATUSPLAYING
  5753 A4D3			l_1395
  5754
  5755 				; optimize OK (keyboard.inc), line = 91
  5756
  5757 A4D3 AD FC 02			lda KEYB
  5758 A4D6 C9 12			cmp #$12
  5759 A4D8 D0 0D			jne l_13AC
  5760
  5761 				; optimize OK (keyboard.inc), line = 93
  5762
  5763 A4DA A5 F5			lda MIDFILES._TIMERSTATUS
  5764 A4DC 10 06			jpl l_13C3
  5765
  5766 				; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 95
  5767
  5768 A4DE 20 C6 98			jsr STATUSPLAYING
  5769 A4E1 4C E7 A4			jmp l_13CE
  5770 A4E4			l_13C3
  5771
  5772 				; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 96
  5773
  5774 A4E4 20 2B 99			jsr STATUSPAUSE
  5775 A4E7			l_13CE
  5776 A4E7			l_13AC
  5777
  5778 				; optimize OK (keyboard.inc), line = 98
  5779
  5780 A4E7 AD FC 02			lda KEYB
  5781 A4EA C9 10			cmp #$10
  5782 A4EC D0 03			jne l_13E3
  5783 A4EE 20 61 99			jsr STATUSSTOPPED
  5784 A4F1			l_13E3
  5785
  5786 				; optimize OK (keyboard.inc), line = 99
  5787
  5788 A4F1 AD FC 02			lda KEYB
  5789 A4F4 C9 34			cmp #$34
  5790 A4F6 F0 08			jeq l_1411x
  5791 A4F8 C9 36			cmp #$36
  5792 A4FA F0 04			jeq l_1411x
  5793 A4FC C9 37			cmp #$37
  5794 A4FE D0 68			jne l_1411
  5795 A500			l_1411x
  5796
  5797 				; optimize OK (keyboard.inc), line = 101
  5798
  5799 A500 AD FC 02			lda KEYB
  5800 A503 C9 36			cmp #$36
  5801 A505 D0 21			jne l_1424
  5802 A507 AD 34 04			lda MIDFILES.TEMPOSHIFT
  5803 A50A 18 69 20			add #$20
  5804 A50D 8D 34 04			sta MIDFILES.TEMPOSHIFT
  5805 A510 AD 35 04			lda MIDFILES.TEMPOSHIFT+1
  5806 A513 69 4E			adc #$4E
  5807 A515 8D 35 04			sta MIDFILES.TEMPOSHIFT+1
  5808 A518 AD 36 04			lda MIDFILES.TEMPOSHIFT+2
  5809 A51B 69 00			adc #$00
  5810 A51D 8D 36 04			sta MIDFILES.TEMPOSHIFT+2
  5811 A520 AD 37 04			lda MIDFILES.TEMPOSHIFT+3
  5812 A523 69 00			adc #$00
  5813 A525 8D 37 04			sta MIDFILES.TEMPOSHIFT+3
  5814 A528			l_1424
  5815
  5816 				; optimize OK (keyboard.inc), line = 102
  5817
  5818 A528 AD FC 02			lda KEYB
  5819 A52B C9 37			cmp #$37
  5820 A52D D0 21			jne l_143A
  5821 A52F AD 34 04			lda MIDFILES.TEMPOSHIFT
  5822 A532 38 E9 20			sub #$20
  5823 A535 8D 34 04			sta MIDFILES.TEMPOSHIFT
  5824 A538 AD 35 04			lda MIDFILES.TEMPOSHIFT+1
  5825 A53B E9 4E			sbc #$4E
  5826 A53D 8D 35 04			sta MIDFILES.TEMPOSHIFT+1
  5827 A540 AD 36 04			lda MIDFILES.TEMPOSHIFT+2
  5828 A543 E9 00			sbc #$00
  5829 A545 8D 36 04			sta MIDFILES.TEMPOSHIFT+2
  5830 A548 AD 37 04			lda MIDFILES.TEMPOSHIFT+3
  5831 A54B E9 00			sbc #$00
  5832 A54D 8D 37 04			sta MIDFILES.TEMPOSHIFT+3
  5833 A550			l_143A
  5834
  5835 				; optimize OK (keyboard.inc), line = 103
  5836
  5837 A550 AD FC 02			lda KEYB
  5838 A553 C9 34			cmp #$34
  5839 A555 D0 0E			jne l_1450
  5840 A557 A9 00			lda #$00
  5841 A559 8D 34 04			sta MIDFILES.TEMPOSHIFT
  5842 A55C 8D 35 04			sta MIDFILES.TEMPOSHIFT+1
  5843 A55F 8D 36 04			sta MIDFILES.TEMPOSHIFT+2
  5844 A562 8D 37 04			sta MIDFILES.TEMPOSHIFT+3
  5845 A565			l_1450
  5846
  5847 				; optimize FAIL ('MIDFILES.SETTEMPO', keyboard.inc), line = 104
  5848
  5849 A565 20 75 8D			jsr MIDFILES.SETTEMPO
  5850 A568			l_1411
  5851 A568			l_1100
  5852
  5853 				; optimize OK (keyboard.inc), line = 108
  5854
  5855 A568 AD FC 02			lda KEYB
  5856 A56B C9 0C			cmp #$0C
  5857 A56D F0 03 4C 4C A6		jne l_146C
  5858
  5859 				; optimize FAIL ('CHOICELISTFILE', keyboard.inc), line = 110
  5860
  5861 A572 20 98 9F			jsr CHOICELISTFILE
  5862 A575 AD 9A 04			lda CHOICELISTFILE.RESULT
  5863 A578 F0 31			jeq l_1477
  5864
  5865 				; optimize OK (keyboard.inc), line = 113
  5866
  5867 A57A AD 94 04			lda P_BANK
  5868 A57D C9 FE			cmp #$FE
  5869 A57F D0 06			jne l_148A
  5870
  5871 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 115
  5872
  5873 A581 20 C7 9E			jsr DRAWLISTSELECTION
  5874
  5875 				; optimize FAIL ('INIT_INPUTLINE', keyboard.inc), line = 116
  5876
  5877 A584 20 C8 9D			jsr INIT_INPUTLINE
  5878 A587			l_148A
  5879
  5880 				; optimize OK (keyboard.inc), line = 118
  5881
  5882 A587 AD 94 04			lda P_BANK
  5883 A58A C9 FF			cmp #$FF
  5884 A58C D0 1D			jne l_14A1
  5885
  5886 				; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 120
  5887
  5888 A58E 20 61 99			jsr STATUSSTOPPED
  5889
  5890 				; optimize OK (keyboard.inc), line = 121
  5891
  5892 A591 AD 79 A6			lda OUTSTR
  5893 A594 8D 8B 04			sta LOADSONG.FILENAME
  5894 A597 AD 7A A6			lda OUTSTR+1
  5895 A59A 8D 8C 04			sta LOADSONG.FILENAME+1
  5896 A59D 20 70 9A			jsr LOADSONG
  5897 A5A0 AD 8D 04			lda LOADSONG.RESULT
  5898 A5A3 8D 07 04			sta SYSTEM.IORESULT
  5899
  5900 				; optimize OK (keyboard.inc), line = 122
  5901
  5902 A5A6 A9 02			lda #$02
  5903 A5A8 8D 76 04			sta STATEINPUTLINE
  5904 A5AB			l_14A1
  5905 A5AB			l_1477
  5906
  5907 				; optimize OK (keyboard.inc), line = 125
  5908
  5909 A5AB AD 76 04			lda STATEINPUTLINE
  5910 A5AE C9 02			cmp #$02
  5911 A5B0 F0 03 4C 4C A6		jne l_14C3
  5912
  5913 				; optimize OK (keyboard.inc), line = 127
  5914
  5915 A5B5 AD 94 04			lda P_BANK
  5916 A5B8 C9 FE			cmp #$FE
  5917 A5BA D0 74			jne l_14D6
  5918
  5919 				; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 129
  5920
  5921 A5BC 20 C7 9E			jsr DRAWLISTSELECTION
  5922
  5923 				; optimize OK (keyboard.inc), line = 130
  5924
  5925 A5BF AD 75 04			lda RESULTINPUTLINE
  5926 A5C2 F0 6C			jeq l_14E4
  5927
  5928 				; optimize OK (keyboard.inc), line = 132
  5929
  5930 A5C4 AD 79 A6			lda OUTSTR
  5931 A5C7 85 88			sta @move.src
  5932 A5C9 AD 7A A6			lda OUTSTR+1
  5933 A5CC 85 89			sta @move.src+1
  5934 					@moveSTRING FN #128
  5934 				 MWA FN @MOVE.DST\ MWA #128 @MOVE.CNT\ JSR @MOVESTRING
  5934 A5CE AD 77 A6 85 8C AD +  MWA FN @MOVE.DST
  5934 A5D8 A9 80 85 84 A9 00 +  MWA #128 @MOVE.CNT
  5934 A5E0 20 6B 82		 JSR @MOVESTRING
  5935
  5936 				; optimize OK (keyboard.inc), line = 133
  5937
  5938 A5E3 AD 79 A6			lda OUTSTR
  5939 A5E6 85 88			sta GETDEVICESPEC.FN
  5940 A5E8 AD 7A A6			lda OUTSTR+1
  5941 A5EB 85 89			sta GETDEVICESPEC.FN+1
  5942 A5ED AD 75 A6			lda CURDEV
  5943 A5F0 85 8C			sta GETDEVICESPEC.SPEC
  5944 A5F2 AD 76 A6			lda CURDEV+1
  5945 A5F5 85 8D			sta GETDEVICESPEC.SPEC+1
  5946 A5F7 20 0E 95			jsr GETDEVICESPEC
  5947 A5FA A5 90			lda GETDEVICESPEC.RESULT
  5948 A5FC D0 17			jne l_14F8
  5949 A5FE AD 75 A6			lda CURDEV
  5950 A601 85 88			sta JOINSTRINGS.S1
  5951 A603 AD 76 A6			lda CURDEV+1
  5952 A606 85 89			sta JOINSTRINGS.S1+1
  5953 A608 AD 77 A6			lda FN
  5954 A60B 85 8C			sta JOINSTRINGS.S2
  5955 A60D AD 78 A6			lda FN+1
  5956 A610 85 8D			sta JOINSTRINGS.S2+1
  5957 A612 20 32 95			jsr JOINSTRINGS
  5958 A615			l_14F8
  5959
  5960 				; optimize OK (keyboard.inc), line = 134
  5961
  5962 A615 AD 79 A6			lda OUTSTR
  5963 A618 8D 91 04			sta FILESELECT.PATH
  5964 A61B AD 7A A6			lda OUTSTR+1
  5965 A61E 8D 92 04			sta FILESELECT.PATH+1
  5966 A621 20 6A 9C			jsr FILESELECT
  5967 A624 AD 93 04			lda FILESELECT.RESULT
  5968 A627 8D 07 04			sta SYSTEM.IORESULT
  5969
  5970 				; optimize OK (keyboard.inc), line = 135
  5971
  5972 A62A A5 4A			lda PLAYERSTATUS
  5973 A62C 09 80			ora #$80
  5974 A62E 85 4A			sta PLAYERSTATUS
  5975 A630			l_14E4
  5976 A630			l_14D6
  5977
  5978 				; optimize OK (keyboard.inc), line = 138
  5979
  5980 A630 AD 07 04			lda SYSTEM.IORESULT
  5981 A633 29 FC			and #$FC
  5982 A635 F0 06			jeq l_152A
  5983 A637 AD 07 04			lda SYSTEM.IORESULT
  5984 A63A 20 EC 99			jsr STATUSERROR
  5985 A63D			l_152A
  5986
  5987 				; optimize OK (keyboard.inc), line = 139
  5988
  5989 A63D AD 94 04			lda P_BANK
  5990 A640 C9 FF			cmp #$FF
  5991 A642 D0 03			jne l_1543
  5992 A644 20 C6 98			jsr STATUSPLAYING
  5993 A647			l_1543
  5994
  5995 				; optimize OK (keyboard.inc), line = 140
  5996
  5997 A647 A9 00			lda #$00
  5998 A649 8D 76 04			sta STATEINPUTLINE
  5999 A64C			l_14C3
  6000 A64C			l_146C
  6001
  6002 				; optimize OK (keyboard.inc), line = 143
  6003
  6004 A64C A9 FF			lda #$FF
  6005 A64E 8D FC 02			sta KEYB
  6006 A651			l_107F
  6007
  6008 				; optimize OK (MIDICar Player.pas), line = 148
  6009
  6010 A651 4C 62 A1			jmp l_0E82
  6011 A654			b_0E82
  6012
  6013 				; optimize FAIL ('UNSETNMI', MIDICar Player.pas), line = 151
  6014
  6015 A654 20 57 96			jsr UNSETNMI
  6016
  6017 				; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 153
  6018
  6019 A657 20 7B 98			jsr EXIT2DOS
  6020
  6021 				; ------------------------------------------------------------
  6022
  6023 = 3000			CHARS_ADDR	= $3000
  6024 = 3400			SCREEN_ADDR	= $3400
  6025 = 3400			SCREEN_HEAD	= $3400
  6026 = 36F8			SCREEN_FOOT	= $36F8
  6027 = 37E8			SCREEN_WORK	= $37E8
  6028 = 3AB8			SCREEN_TIME	= $3AB8
  6029 = 3ACC			SCREEN_STATUS	= $3ACC
  6030 = 3B00			UVMETER_ADDR	= $3B00
  6031 = 3B40			SCREEN_ADRSES	= $3B40
  6032 = 3B60			HELPSCR_ADDR	= $3B60
  6033 = 3FB1			DLIST_ADDR	= $3FB1
  6034 = 3812			SCREEN_CHANNELS	= $3812
  6035 = 2000			PLAYLIST_ADDR	= $2000
  6036 = 2C00			START_INFO_ADDR	= $2C00
  6037 = 2E00			TRACK_DATA_ADDR	= $2E00
  6038 = 4000			MIDI_DATA_ADDR	= $4000
  6039 = 0023			FREE_MEM	= $23
  6040 = 0020			F_CLEAR	= $20
  6041 = 0001			PS_COLORSET	= $01
  6042 = 0002			PS_VIEW	= $02
  6043 = 000C			PS_LOOP	= $0C
  6044 = 0000			PS_PLAYONCE	= $00
  6045 = 0004			PS_REPEATONE	= $04
  6046 = 0008			PS_REPEATALL	= $08
  6047 = 000C			PS_SHUFFLE	= $0C
  6048 = 0080			PS_ISREFRESH	= $80
  6049 = 0040			PS_ISSTOPPED	= $40
  6050 = 0020			PS_ISHELP	= $20
  6051 = 001E			LIST_VISIBLE_CHARS	= $1E
  6052 = 0010			LIST_VISIBLE_ITEMS	= $10
  6053 = A4A9B200		FE_DIR	= $A4A9B200
  6054 = 4D494400		FE_MID	= $4D494400
  6055 = 004A			PLAYERSTATUS	= $4A
  6056 = 004B			TOTALXMS	= $4B
  6057 = 00D4			SCRADR	= $D4
  6058 = 00D8			MCBASEADDR	= $D8
  6059 = 0014			_TM	= $14
  6060 = 0013			OTM	= $13
  6061 = 0012			CTM	= $12
  6062 = 00D6			CHN	= $D6
  6063 = 00D7			V	= $D7
  6064 = 00DA			FILELIST	= $DA
  6065 = 0464			YFILE	= DATAORIGIN+$0064
  6066 = 0465			SHFILE	= DATAORIGIN+$0065
  6067 = 0466			CURFILE	= DATAORIGIN+$0066
  6068 = 0467			TOTALFILES	= DATAORIGIN+$0067
  6069 = 0468			CURPLAY	= DATAORIGIN+$0068
  6070 = 0469			PLAYDIR	= DATAORIGIN+$0069
  6071 = 046A			LAST_BANK	= DATAORIGIN+$006A
  6072 = 046B			LAST_ADR	= DATAORIGIN+$006B
  6073 = 3B40			adr.LISTSCRADR	= $3B40
  6074 A65A			.var LISTSCRADR	= adr.LISTSCRADR .word
  6075 = 046D			adr.CURDEV	= [DATAORIGIN+$006D] .array [4]
  6076 A65A			.var CURDEV	= adr.CURDEV .word
  6077 = 0500			adr.FN	= $0500
  6078 A65A			.var FN	= adr.FN .word
  6079 = 0580			adr.OUTSTR	= $0580
  6080 A65A			.var OUTSTR	= adr.OUTSTR .word
  6081 = 00D6			ILCH	= $D6
  6082 = 0471			ILPOS	= DATAORIGIN+$0071
  6083 = 0472			ILSCRADR	= DATAORIGIN+$0072
  6084 = 0474			ILVCRS	= DATAORIGIN+$0074
  6085 = 0475			RESULTINPUTLINE	= DATAORIGIN+$0075
  6086 = 0476			STATEINPUTLINE	= DATAORIGIN+$0076
  6087 = 8100			adr.COLORS	= CODEORIGIN+$0100
  6088 A65A			.var COLORS	= adr.COLORS .word
  6089 = 0477			PUTTEXTINVERT	= DATAORIGIN+$0077
  6090 = 0478			SDMACTL	= DATAORIGIN+$0078
  6091 = D400			DMACTL	= $D400
  6092 = 0230			SDLST	= $0230
  6093 = 02F4			CHBASE	= $02F4
  6094 = 0222			VVBLKI	= $0222
  6095 = D40E			NMIEN	= $D40E
  6096 = FFFA			NMIVEC	= $FFFA
  6097 = 047E			OLDVVBLKI	= DATAORIGIN+$007E
  6098 = 0480			OLDNMIVEC	= DATAORIGIN+$0080
  6099 = 001F			THI	= $1F
  6100 = 0000			K_L	= $00
  6101 = 0006			K_LEFT	= $06
  6102 = 0007			K_RIGHT	= $07
  6103 = 000A			K_P	= $0A
  6104 = 000C			K_RETURN	= $0C
  6105 = 000E			K_UP	= $0E
  6106 = 000F			K_DOWN	= $0F
  6107 = 0010			K_V	= $10
  6108 = 0011			K_HELP	= $11
  6109 = 0012			K_C	= $12
  6110 = 0015			K_B	= $15
  6111 = 0016			K_X	= $16
  6112 = 0017			K_Z	= $17
  6113 = 001C			K_ESC	= $1C
  6114 = 0021			K_SPACE	= $21
  6115 = 0025			K_M	= $25
  6116 = 0027			K_INVERS	= $27
  6117 = 002C			K_TAB	= $2C
  6118 = 0034			K_DELETE	= $34
  6119 = 0036			K_CLEAR	= $36
  6120 = 0037			K_INSERT	= $37
  6121 = 0039			K_H	= $39
  6122 = 003C			K_CAPS	= $3C
  6123 = 003E			K_S	= $3E
  6124 = 02FC			KEYB	= $02FC
  6125 = 02DC			HLPFLG	= $02DC
  6126 = 0041			SOUNDR	= $41
  6127 = 0494			P_BANK	= DATAORIGIN+$0094
  6128 = 0495			P_ADR	= DATAORIGIN+$0095
  6129 A65A			@exit
  6130
  6131 A65A A2 00		@halt	ldx #$00
  6132 A65C 9A				txs
  6133 					.ifdef MAIN.@DEFINES.ROMOFF
  6134 A65D EE 01 D3			inc portb
  6135 					.fi
  6136
  6137 A660 A0 01			ldy #$01
  6138
  6139 A662 60				rts
  6140
  6141 				; ------------------------------------------------------------
  6142
  6143 A663 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  6144
  6145 				; ------------------------------------------------------------
  6146
  6147 A673			.local	@DEFINES
  6148 A673			ATARI
  6149 A673			USE_FIFO
  6150 A673			ROMOFF
  6151 				.endl
  6152
  6153 A673			.local	@RESOURCE
  6154 				.endl
  6155
  6156 = A673 40 3B		LISTSCRADR
  6156 = A675 6D 04		CURDEV
  6156 = A677 00 05		FN
  6156 = A679 80 05		OUTSTR
  6156 = A67B 00 81		COLORS
  6156 				.endl							; MAIN
  6157
  6158 				; ------------------------------------------------------------
  6159 				; ------------------------------------------------------------
  6160
  6161 				.macro	UNITINITIALIZATION
  6162 				
  6163 					.ifdef MAIN.SYSTEM.@UnitInit
  6164 					jsr MAIN.SYSTEM.@UnitInit
  6165 					.fi
  6166 				
  6167 					.ifdef MAIN.MC6850.@UnitInit
  6168 					jsr MAIN.MC6850.@UnitInit
  6169 					.fi
  6170 				
  6171 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  6172 					jsr MAIN.MIDI_FIFO.@UnitInit
  6173 					.fi
  6174 				
  6175 					.ifdef MAIN.CIO.@UnitInit
  6176 					jsr MAIN.CIO.@UnitInit
  6177 					.fi
  6178 				
  6179 					.ifdef MAIN.MIDFILES.@UnitInit
  6180 					jsr MAIN.MIDFILES.@UnitInit
  6181 					.fi
  6182 				
  6183 					.ifdef MAIN.MISC.@UnitInit
  6184 					jsr MAIN.MISC.@UnitInit
  6185 					.fi
  6186 				.endm
  6187
  6188 				; ------------------------------------------------------------
  6189
  6190 					ift .SIZEOF(MAIN.SYSTEM) > 0
  6191 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  6191 				SYSTEM: $8869..$88BD
  6192 					eif
  6193
  6194 					ift .SIZEOF(MAIN.MC6850) > 0
  6195 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  6195 				MC6850: $88BE..$88D4
  6196 					eif
  6197
  6198 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  6199 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  6199 				MIDI_FIFO: $88D5..$8928
  6200 					eif
  6201
  6202 					ift .SIZEOF(MAIN.CIO) > 0
  6203 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  6203 				CIO: $8929..$89B8
  6204 					eif
  6205
  6206 					ift .SIZEOF(MAIN.MIDFILES) > 0
  6207 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  6207 				MIDFILES: $89B9..$92D9
  6208 					eif
  6209
  6210 					ift .SIZEOF(MAIN.MISC) > 0
  6211 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  6211 				MISC: $92DA..$92DB
  6212 					eif
  6213
  6214 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  6214 				CODE: $8000..$A672
  6215
  6216 				; ------------------------------------------------------------
  6217
  6218 					org $0400
  6219
  6220 0400			DATAORIGIN
  6221 0400-0405> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  6222
  6223 = 0006			VARINITSIZE	= *-DATAORIGIN
  6224 = 009F			VARDATASIZE	= 159
  6225
  6226 = 049F			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  6227
  6228 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  6228 				DATA: $0400..$049F
  6229
  6230 02E0-02E1> CF 87			run START
  6231
  6232 				; ------------------------------------------------------------
  6233
  6234 				.macro	STATICDATA
  6235 				.by  $00 $00 $05 $FB $00 $FC $00 $FD  $00 $04 $2D $65 $6D $1A $00 $02  $2B $22 $00 $02 $45 $3A $00 $02
  6236 				.by  $00 $00 $00 $02 $7E $7F $00 $02  $5C $5D $00 $02 $5E $5F $00 $05  $3B $00 $FC $00 $FD $00 $09 $4E
  6237 				.by  $B0 $EC $E1 $F9 $E9 $EE $E7 $CE  $00 $09 $4E $AE $EF $80 $F3 $EF  $EE $E7 $CE $00 $05 $FB $00 $3C
  6238 				.by  $00 $FD $00 $09 $4E $80 $B0 $E1  $F5 $F3 $E5 $80 $CE $00 $05 $FB  $00 $FC $00 $3D $00 $09 $4E $B3
  6239 				.by  $F4 $EF $F0 $F0 $E5 $E4 $CE $00  $09 $4E $AC $EF $E1 $E4 $E9 $EE  $E7 $80 $00 $13 $4E $B2 $E5 $E1
  6240 				.by  $E4 $E9 $EE $E7 $80 $E4 $E9 $F2  $E5 $E3 $F4 $EF $F2 $F9 $80 $00  $14 $4E $B5 $EE $F3 $F5 $F0 $F0
  6241 				.by  $EF $F2 $F4 $E5 $E4 $80 $E6 $EF  $F2 $ED $E1 $F4 $CE $00 $14 $4E  $AE $EF $F4 $80 $E5 $EE $EF $F5
  6242 				.by  $E7 $E8 $F4 $80 $ED $E5 $ED $EF  $F2 $F9 $CE $00 $11 $4E $AE $EF  $F4 $80 $E1 $80 $AD $A9 $A4 $A9
  6243 				.by  $80 $E6 $E9 $EC $E5 $CE $00 $0C  $4E $A9 $8F $AF $80 $A5 $F2 $F2  $EF $F2 $80 $83 $00 $0B $4E $A4
  6244 				.by  $E9 $F2 $E5 $E3 $F4 $EF $F2 $F9  $CE $00 $02 $44 $3A $00 $08 $4E  $B3 $F4 $E1 $F4 $F5 $F3 $CE $00
  6245 				.by  $09 $4E $A3 $EF $F5 $EE $F4 $E5  $F2 $CE $00 $03 $2A $2E $2A $00  $A8 $00 $0A $08 $0A $A8 $0A $00
  6246 				.by  $02 $00 $17 $80 $1B $80 $1F $80  $23 $80
  6247 				.endm
  6248
  6249 					end
