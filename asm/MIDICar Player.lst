mads 2.1.6
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 2000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 FFFF> 2000-3C1A> 04 54 + .by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $0A $4F $70  $65 $6E $20 $66 $69 $6C $65 $20
     2 2018 00 0B 49 2F 4F 20 + .by  $00 $0B $49 $2F $4F $20 $45 $72  $72 $6F $72 $20 $23 $00 $07 $54  $72 $61 $63 $6B $3A $20 $00 $03
     3 2030 2E 2E 2E 00 08 46 + .by  $2E $2E $2E $00 $08 $46 $49 $46  $4F $3A $20 $4F $6E $00 $0F $44  $32 $3A $53 $45 $4C $46 $54 $45
     4 2048 53 54 2E 4D 49 44 + .by  $53 $54 $2E $4D $49 $44 $00 $0A  $50 $6C $61 $79 $69 $6E $67 $2E  $2E $2E $00 $F0 $7E $7F $09 $01
     5 2060 F7			.by  $F7
Source: MIDICar Player.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 2061			RTLIB
   113 2061				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D3
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $2061..$2B6A
   118
   119 				; ------------------------------------------------------------
   120
   121 2B6B			START
   122 2B6B BA				tsx
   123 2B6C 8E 01 3C			stx MAIN.@halt+1
   124
   125 					.ifdef fmulinit
   126 					fmulinit
   127 					.fi
   128
   129 = 01B8			VLEN	= VARDATASIZE-VARINITSIZE
   130 = 3C22			VADR	= DATAORIGIN+VARINITSIZE
   131
   132 					ift VADR > $BFFF
   133 					ert 'Invalid memory address range ',VADR
   134 					eli (VLEN>0) && (VLEN<=256)
   135 					ldx #256-VLEN
   136 					lda #$00
   137 					sta:rne VADR+VLEN-256,x+
   138 					eli VLEN>256
   139 					@fill #VADR #VLEN #$00
   139 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   139 2B6F A9 22 85 88 A9 3C +  MWA #VADR @FILL.PTR1
   139 2B77 A9 B8 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   139 2B7F A9 00 85 84		 MVA #$00 @FILL.PTR2
   139 2B83 20 57 24		 JSR @FILL
   140 					eif
   141
   142 				.ifdef :psptr
   143 					mwa #PROGRAMSTACK :psptr
   144 				.fi
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 2B86				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 2B86			.local	rominit
     5
     6 2B86 78			        sei
     7 2B87 A9 00		        lda #%00000000
     8 2B89 8D 0E D4		        sta NMIEN       ;$D40E
     9 2B8C A9 FE		        lda #%11111110
    10 2B8E 8D 01 D3		        sta PORTB       ;$D301
    11
    12 2B91 A2 03			ldx #3
    13 2B93 A0 00			ldy #0
    14 2B95 EE 01 D3		mv	inc portb
    15 2B98 B9 00 E0		afnt0	lda $e000,y
    16 2B9B CE 01 D3			dec portb
    17 2B9E 99 00 E0		afnt1	sta $e000,y
    18 2BA1 C8				iny
    19 2BA2 D0 F1			bne mv
    20 2BA4 EE 9A 2B			inc afnt0+2
    21 2BA7 EE A0 2B			inc afnt1+2
    22 2BAA CA				dex
    23 2BAB 10 E8			bpl mv
    24
    25 2BAD A2 CA		        ldx #<nmiint
    26 2BAF A0 2B		        ldy #>nmiint
    27 2BB1 8E FA FF		        stx NMIVEC      ;$FFFA
    28 2BB4 8C FB FF		        sty NMIVEC+1
    29
    30 2BB7 A2 D4		        ldx #<irqint
    31 2BB9 A0 2B		        ldy #>irqint
    32 2BBB 8E FE FF		        stx IRQVEC      ;$FFFE
    33 2BBE 8C FF FF		        sty IRQVEC+1
    34
    35 2BC1 A9 40		        lda #%01000000
    36 2BC3 8D 0E D4		        sta NMIEN       ;$D40E
    37 2BC6 58			        cli
    38
    39 2BC7 4C F5 2B			jmp skp
    40
    41
    42
    43 2BCA 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 2BCD 10 03		        spl
    45 2BCF 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 2BD2 38			        sec
    48 2BD3 24			        .byte $24        ;BIT $18
    49
    50 2BD4 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 2BD5 EE 01 D3		        inc PORTB       ;$D301
    55
    56 2BD8 48			        pha
    57 2BD9 8A			        txa
    58 2BDA 48			        pha
    59 2BDB BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 2BDC A9 2B		        lda #>iret      ;adres procedury iret
    64 2BDE 48			        pha
    65 2BDF A9 EE		        lda #<iret
    66 2BE1 48			        pha
    67 2BE2 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 2BE5 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 2BE6 90 03		        scc
    73 2BE8 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 2BEB 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 2BEE 68			iret	pla
    77 2BEF AA				tax
    78 2BF0 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 2BF1 CE 01 D3		        dec PORTB       ;$D301
    83 2BF4 40			        rti
    84
    85 2BF5			skp
    86
    87 				.endl
    88
   148 					.fi
   149
   150 2BF5 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 2BF7 BD 40 03 9D 09 3C + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 2C00 E8				inx						; X = 0
   154 2C01 86 80			stx bp						; BP = 0
   155
   156 2C03 8E 0F D2			stx skctl					; reset POKEY
   157 2C06 A9 03			lda #3
   158 2C08 8D 0F D2			sta skctl
   159
   160 2C0B CA				dex						; X = 255
   161
   162 2C0C				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
    27 2C0C 20 9A 39			jsr MAIN.MIDFILES.@UnitInit
Source: MIDICar Player.a65
   163
   164 2C0F			.local	MAIN						; PROCEDURE
   165
   166 2C0F 4C 11 3A			jmp l_0062
   167
   168 				; ------------------------------------------------------------
   169
   170 2C12			.local	SYSTEM						; UNIT
   171
   172 2C12			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   173
   174 				; ------------------------------------------------------------
   175
   176 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   177 				; as Pointer
   178 2C12 B5 94			lda :STACKORIGIN,x
   179 2C14 85 88			sta A
   180 2C16 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   181 2C18 85 89			sta A+1
   182 2C1A CA				dex
   183 2C1B			@main
   184
   185 				; -------------------  ASM Block 00000002  -------------------
   186
   187 2C1B A0 00			ldy #0
   188 2C1D B1 88 85 90			mva (:edx),y Result
   189
   190 2C21			@exit
   191
   192 				; ------------------------------------------------------------
   193
   194 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   195 				; as Pointer
   196
   197 2C21 E8				inx
   198 2C22 A5 90 95 94			mva RESULT :STACKORIGIN,x
   199
   200 					.ifdef @new
   201 					lda <@VarData
   202 					sta :ztmp
   203 					lda >@VarData
   204 					ldy #@VarDataSize-1
   205 					jmp @FreeMem
   206 					eif
   207
   208 				; ------------------------------------------------------------
   209
   210 = 0088			A	= :EDX
   211 = 0090			RESULT	= :STACKORIGIN-4
   212 2C26 60				rts						; ret
   213 				.endl
   214
   215 2C27			.local	FILEPOS						; FUNCTION | ASSEMBLER
   216
   217 				; -------------------  ASM Block 00000011  -------------------
   218
   219 2C27 8A 48			txa:pha
   220
   221 2C29 AD 27 3C 85 82 AD + 	mwa f :bp2
   222
   223 2C33 A0 04			ldy #s@file.chanel
   224 2C35 B1 82			lda (:bp2),y
   225 2C37 AA				tax
   226 2C38 A9 26			lda #38
   227 2C3A 9D 42 03			sta iccmd,x
   228
   229 2C3D				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 2C3D EE 01 D3				inc portb
     6 2C40 20 56 E4				jsr CIOV
     8 2C43 CE 01 D3				dec portb
Source: MIDICar Player.a65
   230
   231 2C46 8C 23 3C			sty IOResult
   232
   233 2C49 BD 4C 03 85 84		mva icax3,x :eax
   234 2C4E BD 4D 03 85 85		mva icax4,x :eax+1
   235 2C53 BD 4E 03 85 86		mva icax5,x :eax+2
   236
   237 2C58 A9 00 85 87			mva #$00 :eax+3
   238 2C5C 85 8E			sta :ecx+2
   239 2C5E 85 8F			sta :ecx+3
   240
   241 2C60 A0 02			ldy #s@file.record
   242 2C62 B1 82			lda (:bp2),y
   243 2C64 85 8C			sta :ecx
   244 2C66 C8				iny
   245 2C67 B1 82			lda (:bp2),y
   246 2C69 85 8D			sta :ecx+1
   247
   248 2C6B 20 A5 25			jsr idivEAX_ECX.main
   249
   250 2C6E A5 84 8D 29 3C		mva :eax Result
   251 2C73 A5 85 8D 2A 3C		mva :eax+1 Result+1
   252 2C78 A5 86 8D 2B 3C		mva :eax+2 Result+2
   253 2C7D A5 87 8D 2C 3C		mva :eax+3 Result+3
   254
   255 2C82 68 AA			pla:tax
   256
   257 2C84			@exit
   258
   259 				; ------------------------------------------------------------
   260
   261 = 3C27			F	= DATAORIGIN+$000B
   262 = 3C29			RESULT	= DATAORIGIN+$000D
   263
   264 = 3C27			@VarData	= F
   265 = 0002			@VarDataSize	= 2
   266
   267 2C84 60				rts						; ret
   268 				.endl
   269
   270 2C85			.local	SEEK						; PROCEDURE | ASSEMBLER
   271
   272 				; -------------------  ASM Block 00000012  -------------------
   273
   274 2C85 8A 48			txa:pha
   275
   276 2C87 AD 2D 3C 85 82 AD + 	mwa f :bp2
   277
   278 2C91 A0 04			ldy #s@file.chanel
   279 2C93 B1 82			lda (:bp2),y
   280 2C95 AA				tax
   281 2C96 A9 25			lda #37
   282 2C98 9D 42 03			sta iccmd,x
   283
   284 2C9B A0 02			ldy #s@file.record
   285 2C9D B1 82			lda (:bp2),y
   286 2C9F 85 84			sta :eax
   287 2CA1 C8				iny
   288 2CA2 B1 82			lda (:bp2),y
   289 2CA4 85 85			sta :eax+1
   290 2CA6 A9 00			lda #$00
   291 2CA8 85 86			sta :eax+2
   292 2CAA 85 87			sta :eax+3
   293
   294 2CAC AD 2F 3C 85 8C		mva a :ecx
   295 2CB1 AD 30 3C 85 8D		mva a+1 :ecx+1
   296 2CB6 AD 31 3C 85 8E		mva a+2 :ecx+2
   297 2CBB AD 32 3C 85 8F		mva a+3 :ecx+3
   298
   299 2CC0 20 59 25			jsr imulECX
   300
   301 2CC3 A5 84 9D 4C 03		mva :eax icax3,x
   302 2CC8 A5 85 9D 4D 03		mva :eax+1 icax4,x
   303 2CCD A5 86 9D 4E 03		mva :eax+2 icax5,x
   304
   305 2CD2				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 2CD2 EE 01 D3				inc portb
     6 2CD5 20 56 E4				jsr CIOV
     8 2CD8 CE 01 D3				dec portb
Source: MIDICar Player.a65
   306
   307 2CDB 8C 23 3C			sty IOResult
   308
   309 2CDE 68 AA			pla:tax
   310
   311 				; ------------------------------------------------------------
   312
   313 = 3C2D			F	= DATAORIGIN+$0011
   314 = 3C2F			A	= DATAORIGIN+$0013
   315
   316 = 3C2D			@VarData	= F
   317 = 0006			@VarDataSize	= 6
   318
   319 2CE0			@exit
   320 					.ifdef @new
   321 					lda <@VarData
   322 					sta :ztmp
   323 					lda >@VarData
   324 					ldy #@VarDataSize-1
   325 					jmp @FreeMem
   326 					els
   327 2CE0 60				rts						; ret
   328 					eif
   329 				.endl
   330
   331 2CE1			.local	EOF						; FUNCTION
   332
   333 				; optimize OK (SYSTEM), line = 1163
   334
   335 2CE1 AD 33 3C			lda F
   336 2CE4 8D 27 3C			sta FILEPOS.F
   337 2CE7 AD 34 3C			lda F+1
   338 2CEA 8D 28 3C			sta FILEPOS.F+1
   339 2CED 20 27 2C			jsr FILEPOS
   340 2CF0 AD 29 3C			lda FILEPOS.RESULT
   341 2CF3 8D 36 3C			sta I
   342 2CF6 AD 2A 3C			lda FILEPOS.RESULT+1
   343 2CF9 8D 37 3C			sta I+1
   344 2CFC AD 2B 3C			lda FILEPOS.RESULT+2
   345 2CFF 8D 38 3C			sta I+2
   346 2D02 AD 2C 3C			lda FILEPOS.RESULT+3
   347 2D05 8D 39 3C			sta I+3
   348 				; BlockRead
   349
   350 				; optimize OK (SYSTEM), line = 1165
   351
   352 2D08 AC 33 3C 84 82 AC + 	mwy F :bp2
   353 2D12 A0 06			ldy #s@file.buffer
   354 2D14 AD 75 2D			lda BF
   355 2D17 91 82			sta (:bp2),y
   356 2D19 C8				iny
   357 2D1A AD 76 2D			lda BF+1
   358 2D1D 91 82			sta (:bp2),y
   359 2D1F A0 08			ldy #s@file.nrecord
   360 2D21 A9 01			lda #$01
   361 2D23 91 82			sta (:bp2),y
   362 2D25 C8				iny
   363 2D26 A9 00			lda #$00
   364 2D28 91 82			sta (:bp2),y
   365
   366 2D2A 8A 48			txa:pha
   367 2D2C 38				sec
   368 					@readfile F, #7
   368 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
   368 2D2D AC 34 3C		 LDY F+1
   368 2D30 AD 33 3C		 LDA F
   368 2D33 A2 07		 LDX# 7
   368 2D35 20 30 21		 JSR @READFILE
   369 2D38 68 AA			pla:tax
   370
   371 				; optimize OK (SYSTEM), line = 1167
   372
   373 2D3A AD 33 3C			lda F
   374 2D3D 8D 2D 3C			sta SEEK.F
   375 2D40 AD 34 3C			lda F+1
   376 2D43 8D 2E 3C			sta SEEK.F+1
   377 2D46 AD 36 3C			lda I
   378 2D49 8D 2F 3C			sta SEEK.A
   379 2D4C AD 37 3C			lda I+1
   380 2D4F 8D 30 3C			sta SEEK.A+1
   381 2D52 AD 38 3C			lda I+2
   382 2D55 8D 31 3C			sta SEEK.A+2
   383 2D58 AD 39 3C			lda I+3
   384 2D5B 8D 32 3C			sta SEEK.A+3
   385 2D5E 20 85 2C			jsr SEEK
   386
   387 				; -------------------  ASM Block 00000013  -------------------
   388
   389 2D61 AD 33 3C 85 82 AD + 	mwa f :bp2
   390
   391 2D6B A0 05			ldy #s@file.status
   392 2D6D B1 82			lda (:bp2),y
   393 2D6F 29 01			and #e@file.eof
   394 2D71 8D 35 3C			sta Result
   395
   396 2D74			@exit
   397
   398 				; ------------------------------------------------------------
   399
   400 = 3C33			F	= DATAORIGIN+$0017
   401 = 3C35			RESULT	= DATAORIGIN+$0019
   402 = 3C36			I	= DATAORIGIN+$001A
   403 = 3C3A			adr.BF	= [DATAORIGIN+$001E] .array [256]
   404 2D74			.var BF	= adr.BF .word
   405
   406 = 3C33			@VarData	= F
   407 = 0106			@VarDataSize	= 262
   408
   409 2D74 60				rts						; ret
   410 = 2D75 3A 3C		BF
   410 				.endl
   411
   412 2D77			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   413
   414 				; ------------------------------------------------------------
   415
   416 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   417 				; as Pointer
   418 2D77 B5 94			lda :STACKORIGIN,x
   419 2D79 85 88			sta A
   420 2D7B B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   421 2D7D 85 89			sta A+1
   422 2D7F CA				dex
   423 2D80 30 05			jmi @main
   424
   425 				; ------------------------------------------------------------
   426
   427 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   428 				; as Pointer
   429 2D82 B5 94			lda :STACKORIGIN,x
   430 2D84 85 8C			sta VALUE
   431 2D86 CA				dex
   432 2D87			@main
   433
   434 				; -------------------  ASM Block 00000018  -------------------
   435
   436 2D87 A0 00			ldy #0
   437 2D89 A5 8C 91 88			mva value (:edx),y
   438
   439 				; ------------------------------------------------------------
   440
   441 = 0088			A	= :EDX
   442 = 008C			VALUE	= :ECX
   443 2D8D			@exit
   444 					.ifdef @new
   445 					lda <@VarData
   446 					sta :ztmp
   447 					lda >@VarData
   448 					ldy #@VarDataSize-1
   449 					jmp @FreeMem
   450 					els
   451 2D8D 60				rts						; ret
   452 					eif
   453 				.endl
   454
   455 2D8E			.local	FILLCHAR_00C5					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   456
   457 					.MACRO m@INLINE
   458 				
   459 				; -------------------  ASM Block 00000021  -------------------
   460 				
   461 					jsr @fill
   462 				
   463 					.ENDM
   464
   465 				; ------------------------------------------------------------
   466
   467 = 0088			A	= :EDX
   468 = 008C			COUNT	= :ECX
   469 = 0084			VALUE	= :EAX
   470 2D8E			@exit
   471 				.endl
   472
   473 2D8E			.local	MOVE_00C6					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   474
   475 					.MACRO m@INLINE
   476 				
   477 				; -------------------  ASM Block 00000028  -------------------
   478 				
   479 					jsr @move
   480 				
   481 					.ENDM
   482
   483 				; ------------------------------------------------------------
   484
   485 = 0088			SOURCE	= :EDX
   486 = 008C			DEST	= :ECX
   487 = 0084			COUNT	= :EAX
   488 2D8E			@exit
   489 				.endl
   490
   491 2D8E			.local	PARAMCOUNT					; FUNCTION | ASSEMBLER
   492
   493 				; -------------------  ASM Block 00000044  -------------------
   494
   495 					@cmdline #255
   495 				 LDA# 255\ JSR @CMDLINE
   495 2D8E A9 FF		 LDA# 255
   495 2D90 20 F8 21		 JSR @CMDLINE
   496 2D93 8D 3A 3D			sta Result
   497
   498 2D96			@exit
   499
   500 				; ------------------------------------------------------------
   501
   502 = 3D3A			RESULT	= DATAORIGIN+$011E
   503 2D96 60				rts						; ret
   504 				.endl
   505
   506 2D97			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   507 2D97 8D 3B 3D			sta I
   508
   509 				; -------------------  ASM Block 00000045  -------------------
   510
   511 					@cmdline i
   511 				 LDA I\ JSR @CMDLINE
   511 2D9A AD 3B 3D		 LDA I
   511 2D9D 20 F8 21		 JSR @CMDLINE
   512
   513 				;	@move #@buf Result #33
   514 2DA0 A0 DF			ldy #256-33
   515 2DA2 B9 21 03 99 5D 3C + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   516
   517 2DAB			@exit
   518
   519 				; ------------------------------------------------------------
   520
   521 = 3D3B			I	= DATAORIGIN+$011F
   522 = 3D3C			adr.RESULT	= [DATAORIGIN+$0120] .array [33]
   523 2DAB			.var RESULT	= adr.RESULT .word
   524
   525 = 3D3B			@VarData	= I
   526 = 0022			@VarDataSize	= 34
   527
   528 2DAB 60				rts						; ret
   529 = 2DAC 3C 3D		RESULT
   529 				.endl
   530
   531 				; ------------------------------------------------------------
   532
   533 = 0101			__PORTB_BANKS	= $0101
   534 = 0648			M_PI_2	= $0648
   535 = 0192			D_PI_2	= $0192
   536 = 0004			D_PI_180	= $04
   537 = 0000			MGTIA	= $00
   538 = 0080			MVBXE	= $80
   539 = 0000			VBXE_XDLADR	= $00
   540 = 00E0			VBXE_BCBTMP	= $E0
   541 = 0100			VBXE_BCBADR	= $0100
   542 = 1000			VBXE_MAPADR	= $1000
   543 = 1000			VBXE_CHBASE	= $1000
   544 = 5000			VBXE_OVRADR	= $5000
   545 = B000			VBXE_WINDOW	= $B000
   546 = 0000			IDLI	= $00
   547 = 0001			IVBL	= $01
   548 = 0002			ITIM1	= $02
   549 = 0003			ITIM2	= $03
   550 = 0004			ITIM4	= $04
   551 = 00FE			CH_DELCHR	= $FE
   552 = 009B			CH_ENTER	= $9B
   553 = 001B			CH_ESC	= $1B
   554 = 001C			CH_CURS_UP	= $1C
   555 = 001D			CH_CURS_DOWN	= $1D
   556 = 001E			CH_CURS_LEFT	= $1E
   557 = 001F			CH_CURS_RIGHT	= $1F
   558 = 007F			CH_TAB	= $7F
   559 = 009B			CH_EOL	= $9B
   560 = 007D			CH_CLR	= $7D
   561 = 00FD			CH_BELL	= $FD
   562 = 007E			CH_DEL	= $7E
   563 = 009C			CH_DELLINE	= $9C
   564 = 009D			CH_INSLINE	= $9D
   565 = 0000			PAL_PMCOLOR0	= $00
   566 = 0001			PAL_PMCOLOR1	= $01
   567 = 0002			PAL_PMCOLOR2	= $02
   568 = 0003			PAL_PMCOLOR3	= $03
   569 = 0004			PAL_COLOR0	= $04
   570 = 0005			PAL_COLOR1	= $05
   571 = 0006			PAL_COLOR2	= $06
   572 = 0007			PAL_COLOR3	= $07
   573 = 0008			PAL_COLBAK	= $08
   574 = 0000			COLOR_BLACK	= $00
   575 = 000E			COLOR_WHITE	= $0E
   576 = 0032			COLOR_RED	= $32
   577 = 0096			COLOR_CYAN	= $96
   578 = 0068			COLOR_VIOLET	= $68
   579 = 00C4			COLOR_GREEN	= $C4
   580 = 0074			COLOR_BLUE	= $74
   581 = 00EE			COLOR_YELLOW	= $EE
   582 = 0028			COLOR_ORANGE	= $28
   583 = 00E4			COLOR_BROWN	= $E4
   584 = 003C			COLOR_LIGHTRED	= $3C
   585 = 0004			COLOR_GRAY1	= $04
   586 = 0006			COLOR_GRAY2	= $06
   587 = 000A			COLOR_GRAY3	= $0A
   588 = 00CC			COLOR_LIGHTGREEN	= $CC
   589 = 007C			COLOR_LIGHTBLUE	= $7C
   590 = 0004			FMOPENREAD	= $04
   591 = 0008			FMOPENWRITE	= $08
   592 = 0009			FMOPENAPPEND	= $09
   593 = 000C			FMOPENREADWRITE	= $0C
   594 = 3C1C			SCREENWIDTH	= DATAORIGIN+$0000
   595 = 3C1E			SCREENHEIGHT	= DATAORIGIN+$0002
   596 = 3C20			DATESEPARATOR	= DATAORIGIN+$0004
   597 = D20A			RND	= $D20A
   598 = 02C0			adr.PALETTE	= $02C0
   599 2DAE			.var PALETTE	= adr.PALETTE .word
   600 = D012			adr.HPALETTE	= $D012
   601 2DAE			.var HPALETTE	= adr.HPALETTE .word
   602 = 3C21			FILEMODE	= DATAORIGIN+$0005
   603 = 3C22			GRAPHMODE	= DATAORIGIN+$0006
   604 = 3C23			IORESULT	= DATAORIGIN+$0007
   605 = 3C24			EOLN	= DATAORIGIN+$0008
   606 = 3C25			RNDSEED	= DATAORIGIN+$0009
   607
   608 = 2DAE C0 02		PALETTE
   608 = 2DB0 12 D0		HPALETTE
   608 				.endl							; UNIT SYSTEM
   609
   610 				; ------------------------------------------------------------
   611
   612 2DB2			.local	MC6850						; UNIT
   613
   614 2DB2			.local	MC6850_RESET					; PROCEDURE
   615
   616 				; optimize OK (MC6850), line = 70
   617
   618 2DB2 A9 03			lda #$03
   619 2DB4 8D 00 D5			sta MC6850_CNTRREG
   620 2DB7			@exit
   621 					.ifdef @new
   622 					lda <@VarData
   623 					sta :ztmp
   624 					lda >@VarData
   625 					ldy #@VarDataSize-1
   626 					jmp @FreeMem
   627 					els
   628 2DB7 60				rts						; ret
   629 					eif
   630 				.endl
   631
   632 2DB8			.local	MC6850_INIT					; PROCEDURE
   633 2DB8 8D 5D 3D			sta SETUP
   634
   635 				; optimize OK (MC6850), line = 75
   636
   637 2DBB 8D 00 D5			sta MC6850_CNTRREG
   638
   639 				; ------------------------------------------------------------
   640
   641 = 3D5D			SETUP	= DATAORIGIN+$0141
   642
   643 = 3D5D			@VarData	= SETUP
   644 = 0001			@VarDataSize	= 1
   645
   646 2DBE			@exit
   647 					.ifdef @new
   648 					lda <@VarData
   649 					sta :ztmp
   650 					lda >@VarData
   651 					ldy #@VarDataSize-1
   652 					jmp @FreeMem
   653 					els
   654 2DBE 60				rts						; ret
   655 					eif
   656 				.endl
   657
   658 2DBF			.local	MC6850_SEND					; PROCEDURE
   659 2DBF 8D 5E 3D			sta DATA
   660
   661 				; --- RepeatUntilProlog
   662 2DC2			l_0109
   663
   664 				; optimize OK (MC6850), line = 87
   665
   666 2DC2 AD 00 D5			lda MC6850_CNTRREG
   667 2DC5 29 02			and #$02
   668 2DC7 F0 F9			jeq l_0109
   669
   670 				; optimize OK (MC6850), line = 88
   671
   672 2DC9 AD 5E 3D			lda DATA
   673 2DCC 8D 01 D5			sta MC6850_BUFFER
   674
   675 				; ------------------------------------------------------------
   676
   677 = 3D5E			DATA	= DATAORIGIN+$0142
   678
   679 = 3D5E			@VarData	= DATA
   680 = 0001			@VarDataSize	= 1
   681
   682 2DCF			@exit
   683 					.ifdef @new
   684 					lda <@VarData
   685 					sta :ztmp
   686 					lda >@VarData
   687 					ldy #@VarDataSize-1
   688 					jmp @FreeMem
   689 					els
   690 2DCF 60				rts						; ret
   691 					eif
   692 				.endl
   693
   694 				; ------------------------------------------------------------
   695
   696 = D500			MC6850_BASE	= $D500
   697 = D500			ADDR_MC6850_CNTRREG	= $D500
   698 = D501			ADDR_MC6850_BUFFER	= $D501
   699 = D500			ADDR_MC6850_STATREG	= $D500
   700 = 0001			CR0	= $01
   701 = 0002			CR1	= $02
   702 = 0004			CR2	= $04
   703 = 0008			CR3	= $08
   704 = 0010			CR4	= $10
   705 = 0020			CR5	= $20
   706 = 0040			CR6	= $40
   707 = 0080			CR7	= $80
   708 = 0000			CD_1	= $00
   709 = 0001			CD_16	= $01
   710 = 0002			CD_64	= $02
   711 = 0003			MASTERRESET	= $03
   712 = 0000			WS_7BITS	= $00
   713 = 0010			WS_8BITS	= $10
   714 = 0000			WS_2BITSTOP	= $00
   715 = 0008			WS_1BITSTOP	= $08
   716 = 0000			WS_EVENPARITY	= $00
   717 = 0004			WS_ODDPARITY	= $04
   718 = 0000			TC_RTSLOW_NOTIRQ	= $00
   719 = 0020			TC_RTSLOW_TIRQ	= $20
   720 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   721 = 0060			TC_BREAKLEVEL	= $60
   722 = 0000			NOIRQ_RECEIVE	= $00
   723 = 0080			IRQ_RECEIVE	= $80
   724 = 0001			RDRF	= $01
   725 = 0002			TDRE	= $02
   726 = 0004			DCD	= $04
   727 = 0008			CTS	= $08
   728 = 0010			FE	= $10
   729 = 0020			OVRN	= $20
   730 = 0040			PE	= $40
   731 = 0080			IRQ	= $80
   732 = D500			MC6850_CNTRREG	= $D500
   733 = D501			MC6850_BUFFER	= $D501
   734 = D500			MC6850_STATREG	= $D500
   735 = 00FF			MC_BYTE	= $FF
   736
   737 				.endl							; UNIT MC6850
   738
   739 				; ------------------------------------------------------------
   740
   741 2DD0			.local	DOS						; UNIT
   742
   743 				; ------------------------------------------------------------
   744
   745 = D014			PALNTSC	= $D014
   746
   747 				.endl							; UNIT DOS
   748
   749 				; ------------------------------------------------------------
   750
   751 2DD0			.local	STRUTILS					; UNIT
   752
   753 				; ------------------------------------------------------------
   754
   755 				.endl							; UNIT STRUTILS
   756
   757 				; ------------------------------------------------------------
   758
   759 2DD0			.local	SYSUTILS					; UNIT
   760
   761 				; ------------------------------------------------------------
   762
   763 = 0001			FAREADONLY	= $01
   764 = 0002			FAHIDDEN	= $02
   765 = 0004			FASYSFILE	= $04
   766 = 0008			FAVOLUMEID	= $08
   767 = 0010			FADIRECTORY	= $10
   768 = 0020			FAARCHIVE	= $20
   769 = 003F			FAANYFILE	= $3F
   770
   771 				.endl							; UNIT SYSUTILS
   772
   773 				; ------------------------------------------------------------
   774
   775 2DD0			.local	MIDI_FIFO					; UNIT
   776
   777 2DD0			.local	FIFO_RESET					; PROCEDURE
   778
   779 				; optimize OK (MIDI_FIFO), line = 27
   780
   781 2DD0 A9 00			lda #$00
   782 2DD2 85 FD			sta FIFO_HEAD
   783
   784 				; optimize OK (MIDI_FIFO), line = 28
   785
   786 2DD4 85 FE			sta FIFO_TAIL
   787
   788 				; optimize OK (MIDI_FIFO), line = 29
   789
   790 2DD6 85 88			sta SYSTEM.FILLCHAR_00C5.A
   791 2DD8 A9 06			lda #$06
   792 2DDA 85 89			sta SYSTEM.FILLCHAR_00C5.A+1
   793 2DDC A9 00			lda #$00
   794 2DDE 85 8C			sta SYSTEM.FILLCHAR_00C5.COUNT
   795 2DE0 A9 01			lda #$01
   796 2DE2 85 8D			sta SYSTEM.FILLCHAR_00C5.COUNT+1
   797 2DE4 A9 00			lda #$00
   798 2DE6 85 84			sta SYSTEM.FILLCHAR_00C5.VALUE
   799 2DE8				.local +MAIN.SYSTEM.FILLCHAR_00C5
   800 2DE8				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_00C5.M@INLINE [Source: MIDICar Player.a65]
     4 2DE8 20 57 24			jsr @fill
Source: MIDICar Player.a65
   801 					.endl
   802 2DEB			@exit
   803 					.ifdef @new
   804 					lda <@VarData
   805 					sta :ztmp
   806 					lda >@VarData
   807 					ldy #@VarDataSize-1
   808 					jmp @FreeMem
   809 					els
   810 2DEB 60				rts						; ret
   811 					eif
   812 				.endl
   813
   814 2DEC			.local	FIFO_READBYTE					; PROCEDURE
   815
   816 				; optimize OK (MIDI_FIFO), line = 34
   817
   818 2DEC A4 FE			ldy FIFO_TAIL
   819 2DEE C4 FD			cpy FIFO_HEAD
   820 2DF0 F0 07			jeq l_017B
   821
   822 				; optimize OK (MIDI_FIFO), line = 36
   823
   824 2DF2 B9 00 06			lda adr.FIFO_BUF,y
   825 2DF5 85 FF			sta FIFO_BYTE
   826
   827 				; optimize FAIL (0, MIDI_FIFO), line = 37
   828
   829 2DF7 E6 FE			inc FIFO_TAIL
   830 2DF9			l_017B
   831 2DF9			@exit
   832 					.ifdef @new
   833 					lda <@VarData
   834 					sta :ztmp
   835 					lda >@VarData
   836 					ldy #@VarDataSize-1
   837 					jmp @FreeMem
   838 					els
   839 2DF9 60				rts						; ret
   840 					eif
   841 				.endl
   842
   843 2DFA			.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER | INLINE
   844
   845 					.MACRO m@INLINE
   846 				
   847 				; -------------------  ASM Block 00000070  -------------------
   848 				
   849 				  lda FIFO_Head
   850 				  clc
   851 				  adc #1
   852 				  cmp FIFO_Tail
   853 				  bne storeInFIFO
   854 				  rts
   855 				
   856 				storeInFIFO:
   857 				  ldy FIFO_Head
   858 				  lda FIFO_Byte
   859 				  sta FIFO_ADDR,y
   860 				  iny
   861 				  sty FIFO_Head
   862 				exitWrite:
   863 				
   864 					.ENDM
   865 2DFA			@exit
   866 				.endl
   867
   868 2DFA			.local	FIFO_SEND					; PROCEDURE
   869
   870 				; optimize OK (MIDI_FIFO), line = 65
   871
   872 2DFA AD 5F 3D			lda DATA
   873 2DFD 8D 62 3D			sta P
   874 2E00 AD 60 3D			lda DATA+1
   875 2E03 8D 63 3D			sta P+1
   876
   877 				; --- WhileProlog
   878 2E06 4C 38 2E			jmp l_0197
   879 2E09			l_0198
   880
   881 				; optimize OK (MIDI_FIFO), line = 68
   882
   883 2E09 AC 62 3D 84 82 AC + 	mwy P :bp2
   884 2E13 A0 00			ldy #$00
   885 2E15 B1 82			lda (:bp2),y
   886 2E17 85 FF			sta FIFO_BYTE
   887 2E19				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
   888 2E19				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 2E19 A5 FD		  lda FIFO_Head
     5 2E1B 18			  clc
     6 2E1C 69 01		  adc #1
     7 2E1E C5 FE		  cmp FIFO_Tail
     8 2E20 D0 01		  bne storeInFIFO
     9 2E22 60			  rts
    11 2E23			storeInFIFO:
    12 2E23 A4 FD		  ldy FIFO_Head
    13 2E25 A5 FF		  lda FIFO_Byte
    14 2E27 99 00 06		  sta FIFO_ADDR,y
    15 2E2A C8			  iny
    16 2E2B 84 FD		  sty FIFO_Head
    17 2E2D			exitWrite:
Source: MIDICar Player.a65
   889 					.endl
   890
   891 				; optimize FAIL (0, MIDI_FIFO), line = 69
   892
   893 2E2D EE 62 3D			inc P
   894 2E30 D0 03			sne
   895 2E32 EE 63 3D			inc P+1
   896 2E35 CE 61 3D			dec LEN
   897 2E38			l_0197
   898
   899 				; optimize OK (MIDI_FIFO), line = 66
   900
   901 2E38 AD 61 3D			lda LEN
   902 2E3B D0 CC			jne l_0198
   903
   904 				; ------------------------------------------------------------
   905
   906 = 3D5F			DATA	= DATAORIGIN+$0143
   907 = 3D61			LEN	= DATAORIGIN+$0145
   908 = 3D62			P	= DATAORIGIN+$0146
   909
   910 = 3D5F			@VarData	= DATA
   911 = 0005			@VarDataSize	= 5
   912
   913 2E3D			@exit
   914 					.ifdef @new
   915 					lda <@VarData
   916 					sta :ztmp
   917 					lda >@VarData
   918 					ldy #@VarDataSize-1
   919 					jmp @FreeMem
   920 					els
   921 2E3D 60				rts						; ret
   922 					eif
   923 				.endl
   924
   925 2E3E			.local	FIFO_FLUSH					; PROCEDURE
   926
   927 				; --- WhileProlog
   928 2E3E 4C 50 2E			jmp l_01B9
   929 2E41			l_01BA
   930
   931 				; optimize OK (MIDI_FIFO), line = 77
   932
   933 2E41 A4 FE			ldy FIFO_TAIL
   934 2E43 B9 00 06			lda adr.FIFO_BUF,y
   935 2E46 85 FF			sta FIFO_BYTE
   936
   937 				; optimize OK (MIDI_FIFO), line = 78
   938
   939 2E48 8D 1A D0			sta $D01A
   940
   941 				; optimize OK (MIDI_FIFO), line = 79
   942
   943 2E4B 20 BF 2D			jsr MC6850.MC6850_SEND
   944
   945 				; optimize FAIL (0, MIDI_FIFO), line = 80
   946
   947 2E4E E6 FE			inc FIFO_TAIL
   948 2E50			l_01B9
   949
   950 				; optimize OK (MIDI_FIFO), line = 75
   951
   952 2E50 A5 FE			lda FIFO_TAIL
   953 2E52 C5 FD			cmp FIFO_HEAD
   954 2E54 D0 EB			jne l_01BA
   955
   956 				; optimize OK (MIDI_FIFO), line = 82
   957
   958 2E56 A9 00			lda #$00
   959 2E58 8D 1A D0			sta $D01A
   960 2E5B			@exit
   961 					.ifdef @new
   962 					lda <@VarData
   963 					sta :ztmp
   964 					lda >@VarData
   965 					ldy #@VarDataSize-1
   966 					jmp @FreeMem
   967 					els
   968 2E5B 60				rts						; ret
   969 					eif
   970 				.endl
   971
   972 				; ------------------------------------------------------------
   973
   974 = 00FD			FIFO_HEAD	= $FD
   975 = 00FE			FIFO_TAIL	= $FE
   976 = 00FF			FIFO_BYTE	= $FF
   977 = 0600			FIFO_ADDR	= $0600
   978 = 0600			adr.FIFO_BUF	= $0600
   979 2E5C			.var FIFO_BUF	= adr.FIFO_BUF .word
   980
   981 = 2E5C 00 06		FIFO_BUF
   981 				.endl							; UNIT MIDI_FIFO
   982
   983 				; ------------------------------------------------------------
   984
   985 2E5E			.local	MIDFILES					; UNIT
   986
   987 2E5E			.local	WORDBI						; FUNCTION
   988
   989 				; optimize OK (MIDFILES), line = 84
   990
   991 2E5E A9 81			lda <RESULT
   992 2E60 8D 83 3D			sta RESULTPTR
   993 2E63 A9 3D			lda >RESULT
   994 2E65 8D 84 3D			sta RESULTPTR+1
   995
   996 				; optimize OK (MIDFILES), line = 85
   997
   998 2E68 AC 7F 3D 84 82 AC + 	mwy BI :bp2
   999 2E72 A0 01			ldy #$01
  1000 2E74 B1 82			lda (:bp2),y
  1001 2E76 AC 84 3D 84 81		mvy RESULTPTR+1 :bp+1
  1002 2E7B AC 83 3D			ldy RESULTPTR
  1003 2E7E 91 80			sta (:bp),y
  1004 2E80 EE 83 3D			inc RESULTPTR
  1005 2E83 D0 03			sne
  1006 2E85 EE 84 3D			inc RESULTPTR+1
  1007
  1008 				; optimize OK (MIDFILES), line = 86
  1009
  1010 2E88 A0 00			ldy #$00
  1011 2E8A B1 82			lda (:bp2),y
  1012 2E8C AC 84 3D 84 81		mvy RESULTPTR+1 :bp+1
  1013 2E91 AC 83 3D			ldy RESULTPTR
  1014 2E94 91 80			sta (:bp),y
  1015 2E96			@exit
  1016
  1017 				; ------------------------------------------------------------
  1018
  1019 = 3D7F			BI	= DATAORIGIN+$0163
  1020 = 3D81			RESULT	= DATAORIGIN+$0165
  1021 = 3D83			RESULTPTR	= DATAORIGIN+$0167
  1022
  1023 = 3D7F			@VarData	= BI
  1024 = 0004			@VarDataSize	= 4
  1025
  1026 2E96 60				rts						; ret
  1027 				.endl
  1028
  1029 2E97			.local	LONGBI						; FUNCTION
  1030
  1031 				; optimize OK (MIDFILES), line = 95
  1032
  1033 2E97 A9 87			lda <RESULT
  1034 2E99 8D 8B 3D			sta RESULTPTR
  1035 2E9C A9 3D			lda >RESULT
  1036 2E9E 8D 8C 3D			sta RESULTPTR+1
  1037
  1038 				; optimize OK (MIDFILES), line = 96
  1039
  1040 2EA1 A9 03			lda #$03
  1041 2EA3 8D 8D 3D			sta I
  1042
  1043 2EA6			l_020C
  1044 				; --- ForToDoCondition
  1045
  1046 				; optimize OK (MIDFILES), line = 98
  1047
  1048 2EA6 AC 85 3D 84 82 AC + 	mwy BI :bp2
  1049 2EB0 AC 8D 3D			ldy I
  1050 2EB3 B1 82			lda (:bp2),y
  1051 2EB5 AC 8C 3D 84 81		mvy RESULTPTR+1 :bp+1
  1052 2EBA AC 8B 3D			ldy RESULTPTR
  1053 2EBD 91 80			sta (:bp),y
  1054
  1055 				; optimize FAIL (0, MIDFILES), line = 99
  1056
  1057 2EBF EE 8B 3D			inc RESULTPTR
  1058 2EC2 D0 03			sne
  1059 2EC4 EE 8C 3D			inc RESULTPTR+1
  1060
  1061 				; --- ForToDoEpilog
  1062 2EC7 CE 8D 3D			dec I
  1063 2ECA 10 DA			jpl l_020C
  1064 2ECC			l_021A
  1065 2ECC			@exit
  1066
  1067 				; ------------------------------------------------------------
  1068
  1069 = 3D85			BI	= DATAORIGIN+$0169
  1070 = 3D87			RESULT	= DATAORIGIN+$016B
  1071 = 3D8B			RESULTPTR	= DATAORIGIN+$016F
  1072 = 3D8D			I	= DATAORIGIN+$0171
  1073
  1074 = 3D85			@VarData	= BI
  1075 = 0005			@VarDataSize	= 5
  1076
  1077 2ECC 60				rts						; ret
  1078 				.endl
  1079
  1080 2ECD			.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER
  1081
  1082 				; -------------------  ASM Block 00000071  -------------------
  1083
  1084 2ECD A5 E0		  lda _adr
  1085 2ECF F0 01		  beq check1Bound
  1086 2ED1 60			  rts
  1087
  1088 2ED2			check1Bound
  1089 2ED2 A5 E1		  lda _adr+1
  1090 2ED4 C9 9C		  cmp #$9c
  1091 2ED6 D0 05		  bne check2Bound
  1092
  1093 2ED8 A9 A0		  lda #$a0
  1094 2EDA 85 E1		  sta _adr+1
  1095 2EDC 60			  rts
  1096
  1097 2EDD			check2Bound:
  1098 2EDD C9 D0		  cmp #$d0
  1099 2EDF D0 05		  bne check3Bound
  1100
  1101 2EE1 A9 D8		  lda #$d8
  1102 2EE3 85 E1		  sta _adr+1
  1103 2EE5 60			  rts
  1104
  1105 2EE6			check3Bound:
  1106 2EE6 C9 E0		  cmp #$e0
  1107 2EE8 D0 05		  bne check4Bound
  1108
  1109 2EEA A9 E4		  lda #$e4
  1110 2EEC 85 E1		  sta _adr+1
  1111 2EEE 60			  rts
  1112
  1113 2EEF			check4bound
  1114 2EEF C9 FF		  cmp #$ff
  1115 2EF1 F0 01		  beq outOfMem
  1116 2EF3 60			  rts
  1117
  1118 2EF4			outOfMem:
  1119 2EF4 A9 02		  lda #2
  1120 2EF6 4C 00 3C		  jmp @halt
  1121
  1122 2EF9			@exit
  1123 					.ifdef @new
  1124 					lda <@VarData
  1125 					sta :ztmp
  1126 					lda >@VarData
  1127 					ldy #@VarDataSize-1
  1128 					jmp @FreeMem
  1129 					els
  1130 2EF9 60				rts						; ret
  1131 					eif
  1132 				.endl
  1133
  1134 2EFA			.local	LOADMID						; FUNCTION
  1135
  1136 2EFA 4C A5 2F			jmp l_0231
  1137
  1138 2EFD			.local	READWORDBI					; FUNCTION
  1139
  1140 				; BlockRead
  1141
  1142 				; optimize OK (MIDFILES), line = 121
  1143
  1144 2EFD AC F8 33 84 82 AC + 	mwy F :bp2
  1145 2F07 A0 06			ldy #s@file.buffer
  1146 2F09 AD F5 39			lda BI
  1147 2F0C 91 82			sta (:bp2),y
  1148 2F0E C8				iny
  1149 2F0F AD F6 39			lda BI+1
  1150 2F12 91 82			sta (:bp2),y
  1151 2F14 A0 08			ldy #s@file.nrecord
  1152 2F16 A9 02			lda #$02
  1153 2F18 91 82			sta (:bp2),y
  1154 2F1A C8				iny
  1155 2F1B A9 00			lda #$00
  1156 2F1D 91 82			sta (:bp2),y
  1157
  1158 2F1F 8A 48			txa:pha
  1159 2F21 38				sec
  1160 					@readfile F, #7
  1160 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1160 2F22 AC F9 33		 LDY F+1
  1160 2F25 AD F8 33		 LDA F
  1160 2F28 A2 07		 LDX# 7
  1160 2F2A 20 30 21		 JSR @READFILE
  1161 2F2D 68 AA			pla:tax
  1162
  1163 				; optimize OK (MIDFILES), line = 122
  1164
  1165 2F2F AD F5 39			lda BI
  1166 2F32 8D 7F 3D			sta WORDBI.BI
  1167 2F35 AD F6 39			lda BI+1
  1168 2F38 8D 80 3D			sta WORDBI.BI+1
  1169 2F3B 20 5E 2E			jsr WORDBI
  1170 2F3E AD 81 3D			lda WORDBI.RESULT
  1171 2F41 8D B0 3D			sta RESULT
  1172 2F44 AD 82 3D			lda WORDBI.RESULT+1
  1173 2F47 8D B1 3D			sta RESULT+1
  1174 2F4A			@exit
  1175
  1176 				; ------------------------------------------------------------
  1177
  1178 = 3DB0			RESULT	= DATAORIGIN+$0194
  1179 2F4A 60				rts						; ret
  1180 				.endl
  1181
  1182 2F4B			.local	READLONGBI					; FUNCTION
  1183
  1184 				; BlockRead
  1185
  1186 				; optimize OK (MIDFILES), line = 127
  1187
  1188 2F4B AC F8 33 84 82 AC + 	mwy F :bp2
  1189 2F55 A0 06			ldy #s@file.buffer
  1190 2F57 AD F5 39			lda BI
  1191 2F5A 91 82			sta (:bp2),y
  1192 2F5C C8				iny
  1193 2F5D AD F6 39			lda BI+1
  1194 2F60 91 82			sta (:bp2),y
  1195 2F62 A0 08			ldy #s@file.nrecord
  1196 2F64 A9 04			lda #$04
  1197 2F66 91 82			sta (:bp2),y
  1198 2F68 C8				iny
  1199 2F69 A9 00			lda #$00
  1200 2F6B 91 82			sta (:bp2),y
  1201
  1202 2F6D 8A 48			txa:pha
  1203 2F6F 38				sec
  1204 					@readfile F, #7
  1204 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1204 2F70 AC F9 33		 LDY F+1
  1204 2F73 AD F8 33		 LDA F
  1204 2F76 A2 07		 LDX# 7
  1204 2F78 20 30 21		 JSR @READFILE
  1205 2F7B 68 AA			pla:tax
  1206
  1207 				; optimize OK (MIDFILES), line = 128
  1208
  1209 2F7D AD F5 39			lda BI
  1210 2F80 8D 85 3D			sta LONGBI.BI
  1211 2F83 AD F6 39			lda BI+1
  1212 2F86 8D 86 3D			sta LONGBI.BI+1
  1213 2F89 20 97 2E			jsr LONGBI
  1214 2F8C AD 87 3D			lda LONGBI.RESULT
  1215 2F8F 8D B2 3D			sta RESULT
  1216 2F92 AD 88 3D			lda LONGBI.RESULT+1
  1217 2F95 8D B3 3D			sta RESULT+1
  1218 2F98 AD 89 3D			lda LONGBI.RESULT+2
  1219 2F9B 8D B4 3D			sta RESULT+2
  1220 2F9E AD 8A 3D			lda LONGBI.RESULT+3
  1221 2FA1 8D B5 3D			sta RESULT+3
  1222 2FA4			@exit
  1223
  1224 				; ------------------------------------------------------------
  1225
  1226 = 3DB2			RESULT	= DATAORIGIN+$0196
  1227 2FA4 60				rts						; ret
  1228 				.endl
  1229 2FA5			l_0231
  1230
  1231 				; optimize OK (MIDFILES), line = 132
  1232
  1233 2FA5 AD F3 39			lda MIDTRACKS
  1234 2FA8 8D AE 3D			sta NTRKREC
  1235 2FAB AD F4 39			lda MIDTRACKS+1
  1236 2FAE 8D AF 3D			sta NTRKREC+1
  1237
  1238 				; optimize FAIL ('@print', MIDFILES), line = 133
  1239
  1240 					@printSTRING #CODEORIGIN+$000D
  1240 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
  1240 2FB1 A0 20		 LDY> CODEORIGIN+$000D
  1240 2FB3 A9 0D		 LDA< CODEORIGIN+$000D
  1240 2FB5 20 98 2A		 JSR @PRINTSTRING
  1241 					@printSTRING FN
  1241 				 LDY FN+1\ LDA FN\ JSR @PRINTSTRING
  1241 2FB8 AC 8F 3D		 LDY FN+1
  1241 2FBB AD 8E 3D		 LDA FN
  1241 2FBE 20 98 2A		 JSR @PRINTSTRING
  1242 2FC1 20 84 2A			@printEOL
  1243 				; AssignFile
  1244
  1245 				; optimize OK (MIDFILES), line = 135
  1246
  1247 2FC4 AC F8 33 84 82 AC + 	mwy F :bp2
  1248 2FCE A0 00			ldy #s@file.pfname
  1249 2FD0 AD 8E 3D			lda FN
  1250 2FD3 91 82			sta (:bp2),y
  1251 2FD5 C8				iny
  1252 2FD6 AD 8F 3D			lda FN+1
  1253 2FD9 91 82			sta (:bp2),y
  1254 2FDB A0 05			ldy #s@file.status
  1255 2FDD A9 00			lda #$00
  1256 2FDF 91 82			sta (:bp2),y
  1257 				; Reset
  1258
  1259 				; optimize OK (MIDFILES), line = 136
  1260
  1261 2FE1 A0 02			ldy #s@file.record
  1262 2FE3 A9 01			lda #$01
  1263 2FE5 91 82			sta (:bp2),y
  1264 2FE7 C8				iny
  1265 2FE8 A9 00			lda #$00
  1266 2FEA 91 82			sta (:bp2),y
  1267
  1268 2FEC 8A 48			txa:pha
  1269 2FEE 18				clc
  1270 					@openfile F, MAIN.SYSTEM.FileMode
  1270 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  1270 2FEF AC F9 33		 LDY F+1
  1270 2FF2 AD F8 33		 LDA F
  1270 2FF5 AE 21 3C		 LDX MAIN.SYSTEM.FILEMODE
  1270 2FF8 20 61 20		 JSR @OPENFILE
  1271 2FFB 68 AA			pla:tax
  1272
  1273 				; optimize OK (MIDFILES), line = 137
  1274
  1275 2FFD AD 23 3C			lda SYSTEM.IORESULT
  1276 3000 10 2B			jpl l_0284
  1277
  1278 				; optimize FAIL ('@print', MIDFILES), line = 139
  1279
  1280 					@print #$9B
  1280 				 LDY# $9B\ JSR @PRINT
  1280 3002 A0 9B		 LDY# $9B
  1280 3004 20 89 2A		 JSR @PRINT
  1281 					@printSTRING #CODEORIGIN+$0019
  1281 				 LDY> CODEORIGIN+$0019\ LDA< CODEORIGIN+$0019\ JSR @PRINTSTRING
  1281 3007 A0 20		 LDY> CODEORIGIN+$0019
  1281 3009 A9 19		 LDA< CODEORIGIN+$0019
  1281 300B 20 98 2A		 JSR @PRINTSTRING
  1282 300E AD 23 3C			lda SYSTEM.IORESULT
  1283 3011 20 CF 2A			jsr @printBYTE._a
  1284 3014 20 84 2A			@printEOL
  1285 				; CloseFile
  1286
  1287 3017 8A 48			txa:pha
  1288 3019 18				clc
  1289 					@closefile F
  1289 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1289 301A AC F9 33		 LDY F+1
  1289 301D AD F8 33		 LDA F
  1289 3020 20 FD 20		 JSR @CLOSEFILE
  1290 3023 68 AA			pla:tax
  1291
  1292 				; optimize OK (MIDFILES), line = 141
  1293
  1294 3025 A9 00			lda #$00
  1295 3027 8D 90 3D			sta RESULT
  1296 302A 4C F7 33			jmp @exit					; exit
  1297 302D			l_0284
  1298
  1299 				; optimize OK (MIDFILES), line = 143
  1300
  1301 302D A9 00			lda #$00
  1302 302F 8D 9D 3D			sta TRACKCOUNT
  1303 3032 8D 9E 3D			sta TRACKCOUNT+1
  1304 3035 A9 FF			lda #$FF
  1305 3037 8D 69 3D			sta NTRACKS
  1306 303A A9 00			lda #$00
  1307 303C 8D 6A 3D			sta NTRACKS+1
  1308
  1309 				; --- WhileProlog
  1310 303F 4C 90 33			jmp l_02A0
  1311 3042			l_02A1
  1312 				; BlockRead
  1313
  1314 				; optimize OK (MIDFILES), line = 146
  1315
  1316 3042 AC F8 33 84 82 AC + 	mwy F :bp2
  1317 304C A0 06			ldy #s@file.buffer
  1318 304E A9 9F			lda <CHUNKTAG
  1319 3050 91 82			sta (:bp2),y
  1320 3052 C8				iny
  1321 3053 A9 3D			lda >CHUNKTAG
  1322 3055 91 82			sta (:bp2),y
  1323 3057 A0 08			ldy #s@file.nrecord
  1324 3059 A9 04			lda #$04
  1325 305B 91 82			sta (:bp2),y
  1326 305D C8				iny
  1327 305E A9 00			lda #$00
  1328 3060 91 82			sta (:bp2),y
  1329 3062 A0 0A			ldy #s@file.numread
  1330 3064 A9 A3			lda <V
  1331 3066 91 82			sta (:bp2),y
  1332 3068 C8				iny
  1333 3069 A9 3D			lda >V
  1334 306B 91 82			sta (:bp2),y
  1335
  1336 306D 8A 48			txa:pha
  1337 306F 18				clc
  1338 					@readfile F, #135
  1338 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1338 3070 AC F9 33		 LDY F+1
  1338 3073 AD F8 33		 LDA F
  1338 3076 A2 87		 LDX# 135
  1338 3078 20 30 21		 JSR @READFILE
  1339 307B 68 AA			pla:tax
  1340
  1341 				; optimize OK (MIDFILES), line = 147
  1342
  1343 307D AD A4 3D			lda V+1
  1344 3080 D0 05			bne @+
  1345 3082 AD A3 3D			lda V
  1346 3085 C9 04			cmp #$04
  1347 				@
  1348 3087 F0 03			jeq l_02BE
  1349 3089 4C E4 33			jmp b_02A1					; break
  1350 308C			l_02BE
  1351
  1352 				; optimize FAIL ('READLONGBI', MIDFILES), line = 148
  1353
  1354 308C 20 4B 2F			jsr READLONGBI
  1355 308F AD B2 3D			lda READLONGBI.RESULT
  1356 3092 8D A9 3D			sta LEN
  1357 3095 AD B3 3D			lda READLONGBI.RESULT+1
  1358 3098 8D AA 3D			sta LEN+1
  1359 309B AD B4 3D			lda READLONGBI.RESULT+2
  1360 309E 8D AB 3D			sta LEN+2
  1361 30A1 AD B5 3D			lda READLONGBI.RESULT+3
  1362 30A4 8D AC 3D			sta LEN+3
  1363
  1364 				; optimize OK (MIDFILES), line = 149
  1365
  1366 30A7 AD A2 3D			lda CHUNKTAG+3
  1367 30AA 49 64			eor #$64
  1368 30AC F0 03 4C 4D 31		jne l_02D5
  1369 30B1 AD A1 3D			lda CHUNKTAG+2
  1370 30B4 49 68			eor #$68
  1371 30B6 F0 03 4C 4D 31		jne l_02D5
  1372 30BB AD A0 3D			lda CHUNKTAG+1
  1373 30BE 49 54			eor #$54
  1374 30C0 F0 03 4C 4D 31		jne l_02D5
  1375 30C5 AD 9F 3D			lda CHUNKTAG
  1376 30C8 49 4D			eor #$4D
  1377 30CA F0 03 4C 4D 31		jne l_02D5
  1378
  1379 				; optimize FAIL ('READWORDBI', MIDFILES), line = 151
  1380
  1381 30CF 20 FD 2E			jsr READWORDBI
  1382 30D2 AD B0 3D			lda READWORDBI.RESULT
  1383 30D5 8D 67 3D			sta FORMAT
  1384 30D8 AD B1 3D			lda READWORDBI.RESULT+1
  1385 30DB 8D 68 3D			sta FORMAT+1
  1386
  1387 				; optimize FAIL ('READWORDBI', MIDFILES), line = 152
  1388
  1389 30DE 20 FD 2E			jsr READWORDBI
  1390 30E1 AD B0 3D			lda READWORDBI.RESULT
  1391 30E4 8D 69 3D			sta NTRACKS
  1392 30E7 AD B1 3D			lda READWORDBI.RESULT+1
  1393 30EA 8D 6A 3D			sta NTRACKS+1
  1394
  1395 				; optimize FAIL ('READWORDBI', MIDFILES), line = 157
  1396
  1397 30ED 20 FD 2E			jsr READWORDBI
  1398 30F0 AD B0 3D			lda READWORDBI.RESULT
  1399 30F3 8D A3 3D			sta V
  1400 30F6 AD B1 3D			lda READWORDBI.RESULT+1
  1401 30F9 8D A4 3D			sta V+1
  1402
  1403 				; optimize OK (MIDFILES), line = 158
  1404
  1405 30FC 10 3E			jpl l_02F7
  1406
  1407 				; optimize OK (MIDFILES), line = 160
  1408
  1409 30FE 29 7F			and #$7F
  1410 3100 8D 6B 3D			sta FPS
  1411
  1412 				; optimize OK (MIDFILES), line = 161
  1413
  1414 3103 8D B6 3D			sta @CASETMP_0005
  1415 3106 C9 E8			cmp #$E8
  1416 3108 D0 08			jne l_0310
  1417 				@
  1418
  1419 				; optimize OK (MIDFILES), line = 162
  1420
  1421 310A A9 18			lda #$18
  1422 310C 8D 6B 3D			sta FPS
  1423
  1424 310F 4C 33 31			jmp a_0005
  1425 3112			l_0310
  1426 3112 C9 E7			cmp #$E7
  1427 3114 D0 08			jne l_031D
  1428 				@
  1429
  1430 				; optimize OK (MIDFILES), line = 163
  1431
  1432 3116 A9 19			lda #$19
  1433 3118 8D 6B 3D			sta FPS
  1434
  1435 311B 4C 33 31			jmp a_0005
  1436 311E			l_031D
  1437 311E C9 E3			cmp #$E3
  1438 3120 D0 08			jne l_032A
  1439 				@
  1440
  1441 				; optimize OK (MIDFILES), line = 164
  1442
  1443 3122 A9 1D			lda #$1D
  1444 3124 8D 6B 3D			sta FPS
  1445
  1446 3127 4C 33 31			jmp a_0005
  1447 312A			l_032A
  1448 312A C9 E2			cmp #$E2
  1449 312C D0 05			jne l_0337
  1450 				@
  1451
  1452 				; optimize OK (MIDFILES), line = 165
  1453
  1454 312E A9 1E			lda #$1E
  1455 3130 8D 6B 3D			sta FPS
  1456
  1457 3133			l_0337
  1458 3133			a_0005
  1459
  1460 				; optimize OK (MIDFILES), line = 167
  1461
  1462 3133 AD A3 3D			lda V
  1463 3136 8D 6C 3D			sta FSD
  1464 3139 4C 4A 31			jmp l_0355
  1465 313C			l_02F7
  1466
  1467 				; optimize OK (MIDFILES), line = 175
  1468
  1469 313C AD A3 3D			lda V
  1470 313F 8D 6D 3D			sta TICKDIV
  1471 3142 AD A4 3D			lda V+1
  1472 3145 29 7F			and #$7F
  1473 3147 8D 6E 3D			sta TICKDIV+1
  1474 314A			l_0355
  1475 314A 4C 8B 33			jmp l_0367
  1476 314D			l_02D5
  1477
  1478 				; optimize OK (MIDFILES), line = 181
  1479
  1480 314D AD A2 3D			lda CHUNKTAG+3
  1481 3150 49 6B			eor #$6B
  1482 3152 F0 03 4C 8B 33		jne l_0377
  1483 3157 AD A1 3D			lda CHUNKTAG+2
  1484 315A 49 72			eor #$72
  1485 315C F0 03 4C 8B 33		jne l_0377
  1486 3161 AD A0 3D			lda CHUNKTAG+1
  1487 3164 49 54			eor #$54
  1488 3166 F0 03 4C 8B 33		jne l_0377
  1489 316B AD 9F 3D			lda CHUNKTAG
  1490 316E 49 4D			eor #$4D
  1491 3170 F0 03 4C 8B 33		jne l_0377
  1492
  1493 				; optimize FAIL (0, MIDFILES), line = 183
  1494
  1495 3175 EE 9D 3D			inc TRACKCOUNT
  1496 3178 D0 03			sne
  1497 317A EE 9E 3D			inc TRACKCOUNT+1
  1498
  1499 				; optimize FAIL ('@print', MIDFILES), line = 184
  1500
  1501 					@printSTRING #CODEORIGIN+$0026
  1501 				 LDY> CODEORIGIN+$0026\ LDA< CODEORIGIN+$0026\ JSR @PRINTSTRING
  1501 317D A0 20		 LDY> CODEORIGIN+$0026
  1501 317F A9 26		 LDA< CODEORIGIN+$0026
  1501 3181 20 98 2A		 JSR @PRINTSTRING
  1502 3184 AD 9D 3D			lda TRACKCOUNT
  1503 3187 AC 9E 3D			ldy TRACKCOUNT+1
  1504 318A 20 E0 2A			jsr @printWORD._ay
  1505 					@print #$2F
  1505 				 LDY# $2F\ JSR @PRINT
  1505 318D A0 2F		 LDY# $2F
  1505 318F 20 89 2A		 JSR @PRINT
  1506 3192 AD 69 3D			lda NTRACKS
  1507 3195 AC 6A 3D			ldy NTRACKS+1
  1508 3198 20 E0 2A			jsr @printWORD._ay
  1509 					@printSTRING #CODEORIGIN+$002F
  1509 				 LDY> CODEORIGIN+$002F\ LDA< CODEORIGIN+$002F\ JSR @PRINTSTRING
  1509 319B A0 20		 LDY> CODEORIGIN+$002F
  1509 319D A9 2F		 LDA< CODEORIGIN+$002F
  1509 319F 20 98 2A		 JSR @PRINTSTRING
  1510
  1511 				; optimize OK (MIDFILES), line = 186
  1512
  1513 31A2 AC AE 3D 84 82 AC + 	mwy NTRKREC :bp2
  1514 31AC A0 00			ldy #$00
  1515 31AE AD 64 3D			lda MIDDATA
  1516 31B1 91 82			sta (:bp2),y
  1517 31B3 C8				iny
  1518 31B4 AD 65 3D			lda MIDDATA+1
  1519 31B7 91 82			sta (:bp2),y
  1520
  1521 				; optimize OK (MIDFILES), line = 187
  1522
  1523 31B9 C8				iny
  1524 31BA A9 00			lda #$00
  1525 31BC 91 82			sta (:bp2),y
  1526 31BE C8				iny
  1527 31BF 91 82			sta (:bp2),y
  1528 31C1 C8				iny
  1529 31C2 91 82			sta (:bp2),y
  1530 31C4 C8				iny
  1531 31C5 91 82			sta (:bp2),y
  1532
  1533 				; optimize OK (MIDFILES), line = 188
  1534
  1535 31C7 C8				iny
  1536 31C8 91 82			sta (:bp2),y
  1537
  1538 				; --- WhileProlog
  1539 31CA 4C 6A 33			jmp l_039F
  1540 31CD			l_03A0
  1541
  1542 				; optimize OK (MIDFILES), line = 192
  1543
  1544 31CD AD 64 3D			lda MIDDATA
  1545 31D0 85 E0			sta _ADR
  1546 31D2 AD 65 3D			lda MIDDATA+1
  1547 31D5 85 E1			sta _ADR+1
  1548
  1549 				; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 193
  1550
  1551 31D7 20 CD 2E			jsr MEMBOUNDCHECK
  1552
  1553 				; optimize OK (MIDFILES), line = 194
  1554
  1555 31DA A5 E0			lda _ADR
  1556 31DC 8D 64 3D			sta MIDDATA
  1557 31DF A5 E1			lda _ADR+1
  1558 31E1 8D 65 3D			sta MIDDATA+1
  1559
  1560 				; optimize OK (MIDFILES), line = 195
  1561
  1562 31E4				.LOCAL
  1563 31E4 AD AC 3D			lda LEN+3
  1564 31E7 38 E9 00			sub #$00
  1565 31EA D0 1F			bne L4
  1566 31EC AD AB 3D			lda LEN+2
  1567 31EF C9 00			cmp #$00
  1568 31F1 D0 0C			bne L1
  1569 31F3 AD AA 3D			lda LEN+1
  1570 31F6 C9 00			cmp #$00
  1571 31F8 D0 05			bne L1
  1572 31FA AD A9 3D			lda LEN
  1573 31FD C9 80			cmp #$80
  1574 31FF F0 10		L1	beq L5
  1575 3201 B0 04			bcs L3
  1576 3203 A9 FF			lda #$FF
  1577 3205 D0 0A			bne L5
  1578 3207 A9 01		L3	lda #$01
  1579 3209 D0 06			bne L5
  1580 320B 50 04		L4	bvc L5
  1581 320D 49 FF			eor #$FF
  1582 320F 09 01			ora #$01
  1583 3211			L5
  1584 					.ENDL
  1585 3211 30 0A			jmi l_03BB
  1586 3213 F0 08			jeq l_03BB
  1587 3215 A9 80			lda #$80
  1588 3217 8D AD 3D			sta LOADSIZE
  1589 321A 4C 23 32			jmp l_03C9
  1590 321D			l_03BB
  1591 321D AD A9 3D			lda LEN
  1592 3220 8D AD 3D			sta LOADSIZE
  1593 3223			l_03C9
  1594
  1595 				; optimize OK (MIDFILES), line = 196
  1596
  1597 3223 A5 E0			lda _ADR
  1598 3225 18 6D AD 3D			add LOADSIZE
  1599 3229 8D A7 3D			sta ENDADR
  1600 322C A5 E1			lda _ADR+1
  1601 322E 69 00			adc #$00
  1602 3230 8D A8 3D			sta ENDADR+1
  1603
  1604 				; optimize OK (MIDFILES), line = 197
  1605
  1606 3233 C9 9C			cmp #$9C
  1607 3235 90 20			jcc l_03F4
  1608 3237 D0 05			bne @+
  1609 3239 AD A7 3D			lda ENDADR
  1610 323C 90 19			jcc l_03F4
  1611 				@
  1612 323E AD A8 3D			lda ENDADR+1
  1613 3241 C9 A0			cmp #$A0
  1614 3243 D0 05			bne @+
  1615 3245 AD A7 3D			lda ENDADR
  1616 3248 C9 00			cmp #$00
  1617 				@
  1618 324A B0 0B			jcs l_03F4
  1619
  1620 				; optimize OK (MIDFILES), line = 198
  1621
  1622 324C A9 00			lda #$00
  1623 324E 38 E5 E0			sub _ADR
  1624 3251 8D AD 3D			sta LOADSIZE
  1625 3254 4C BB 32			jmp l_0407
  1626 3257			l_03F4
  1627
  1628 				; optimize OK (MIDFILES), line = 199
  1629
  1630 3257 AD A8 3D			lda ENDADR+1
  1631 325A C9 D0			cmp #$D0
  1632 325C 90 20			jcc l_0423
  1633 325E D0 05			bne @+
  1634 3260 AD A7 3D			lda ENDADR
  1635 3263 90 19			jcc l_0423
  1636 				@
  1637 3265 AD A8 3D			lda ENDADR+1
  1638 3268 C9 D8			cmp #$D8
  1639 326A D0 05			bne @+
  1640 326C AD A7 3D			lda ENDADR
  1641 326F C9 00			cmp #$00
  1642 				@
  1643 3271 B0 0B			jcs l_0423
  1644
  1645 				; optimize OK (MIDFILES), line = 200
  1646
  1647 3273 A9 00			lda #$00
  1648 3275 38 E5 E0			sub _ADR
  1649 3278 8D AD 3D			sta LOADSIZE
  1650 327B 4C BB 32			jmp l_0436
  1651 327E			l_0423
  1652
  1653 				; optimize OK (MIDFILES), line = 201
  1654
  1655 327E AD A8 3D			lda ENDADR+1
  1656 3281 C9 E0			cmp #$E0
  1657 3283 90 20			jcc l_0452
  1658 3285 D0 05			bne @+
  1659 3287 AD A7 3D			lda ENDADR
  1660 328A 90 19			jcc l_0452
  1661 				@
  1662 328C AD A8 3D			lda ENDADR+1
  1663 328F C9 E4			cmp #$E4
  1664 3291 D0 05			bne @+
  1665 3293 AD A7 3D			lda ENDADR
  1666 3296 C9 00			cmp #$00
  1667 				@
  1668 3298 B0 0B			jcs l_0452
  1669
  1670 				; optimize OK (MIDFILES), line = 202
  1671
  1672 329A A9 00			lda #$00
  1673 329C 38 E5 E0			sub _ADR
  1674 329F 8D AD 3D			sta LOADSIZE
  1675 32A2 4C BB 32			jmp l_0465
  1676 32A5			l_0452
  1677
  1678 				; optimize OK (MIDFILES), line = 203
  1679
  1680 32A5 AD A8 3D			lda ENDADR+1
  1681 32A8 C9 FF			cmp #$FF
  1682 32AA 90 0F			jcc l_0476
  1683 32AC D0 05			bne @+
  1684 32AE AD A7 3D			lda ENDADR
  1685 32B1 90 08			jcc l_0476
  1686 				@
  1687
  1688 				; optimize OK (MIDFILES), line = 204
  1689
  1690 32B3 A9 00			lda #$00
  1691 32B5 38 E5 E0			sub _ADR
  1692 32B8 8D AD 3D			sta LOADSIZE
  1693 32BB			l_0476
  1694 32BB			l_0465
  1695 32BB			l_0436
  1696 32BB			l_0407
  1697
  1698 				; optimize OK (MIDFILES), line = 205
  1699
  1700 32BB AD AD 3D			lda LOADSIZE
  1701 32BE D0 03			jne l_0494
  1702 32C0 4C 6A 33			jmp c_03A0					; continue
  1703 32C3			l_0494
  1704 				; BlockRead
  1705
  1706 				; optimize OK (MIDFILES), line = 207
  1707
  1708 32C3 AC F8 33 84 82 AC + 	mwy F :bp2
  1709 32CD A0 06			ldy #s@file.buffer
  1710 32CF AD F7 39			lda RBUF
  1711 32D2 91 82			sta (:bp2),y
  1712 32D4 C8				iny
  1713 32D5 AD F8 39			lda RBUF+1
  1714 32D8 91 82			sta (:bp2),y
  1715 32DA A0 08			ldy #s@file.nrecord
  1716 32DC AD AD 3D			lda LOADSIZE
  1717 32DF 91 82			sta (:bp2),y
  1718 32E1 C8				iny
  1719 32E2 A9 00			lda #$00
  1720 32E4 91 82			sta (:bp2),y
  1721 32E6 A0 0A			ldy #s@file.numread
  1722 32E8 A9 A3			lda <V
  1723 32EA 91 82			sta (:bp2),y
  1724 32EC C8				iny
  1725 32ED A9 3D			lda >V
  1726 32EF 91 82			sta (:bp2),y
  1727
  1728 32F1 8A 48			txa:pha
  1729 32F3 18				clc
  1730 					@readfile F, #135
  1730 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1730 32F4 AC F9 33		 LDY F+1
  1730 32F7 AD F8 33		 LDA F
  1730 32FA A2 87		 LDX# 135
  1730 32FC 20 30 21		 JSR @READFILE
  1731 32FF 68 AA			pla:tax
  1732
  1733 				; optimize OK (MIDFILES), line = 208
  1734
  1735 3301 AD A4 3D			lda V+1
  1736 3304 D0 06			bne @+
  1737 3306 AD A3 3D			lda V
  1738 3309 CD AD 3D			cmp LOADSIZE
  1739 				@
  1740 330C F0 08			jeq l_04B9
  1741 330E A9 00			lda #$00
  1742 3310 8D 90 3D			sta RESULT
  1743 3313 4C F7 33			jmp @exit					; exit
  1744 3316			l_04B9
  1745
  1746 				; optimize OK (MIDFILES), line = 210
  1747
  1748 3316 A9 00			lda #$00
  1749 3318 85 88			sta SYSTEM.MOVE_00C6.SOURCE
  1750 331A A9 06			lda #$06
  1751 331C 85 89			sta SYSTEM.MOVE_00C6.SOURCE+1
  1752 331E AD 64 3D			lda MIDDATA
  1753 3321 85 8C			sta SYSTEM.MOVE_00C6.DEST
  1754 3323 AD 65 3D			lda MIDDATA+1
  1755 3326 85 8D			sta SYSTEM.MOVE_00C6.DEST+1
  1756 3328 AD AD 3D			lda LOADSIZE
  1757 332B 85 84			sta SYSTEM.MOVE_00C6.COUNT
  1758 332D A9 00			lda #$00
  1759 332F 85 85			sta SYSTEM.MOVE_00C6.COUNT+1
  1760 3331				.local +MAIN.SYSTEM.MOVE_00C6
  1761 3331				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00C6.M@INLINE [Source: MIDICar Player.a65]
     4 3331 20 02 24			jsr @move
Source: MIDICar Player.a65
  1762 					.endl
  1763
  1764 				; optimize OK (MIDFILES), line = 211
  1765
  1766 3334 AD 64 3D			lda MIDDATA
  1767 3337 18 6D A3 3D			add V
  1768 333B 8D 64 3D			sta MIDDATA
  1769 333E AD 65 3D			lda MIDDATA+1
  1770 3341 6D A4 3D			adc V+1
  1771 3344 8D 65 3D			sta MIDDATA+1
  1772
  1773 				; optimize OK (MIDFILES), line = 212
  1774
  1775 3347 AD A9 3D			lda LEN
  1776 334A 38 ED A3 3D			sub V
  1777 334E 8D A9 3D			sta LEN
  1778 3351 AD AA 3D			lda LEN+1
  1779 3354 ED A4 3D			sbc V+1
  1780 3357 8D AA 3D			sta LEN+1
  1781 335A AD AB 3D			lda LEN+2
  1782 335D E9 00			sbc #$00
  1783 335F 8D AB 3D			sta LEN+2
  1784 3362 AD AC 3D			lda LEN+3
  1785 3365 E9 00			sbc #$00
  1786 3367 8D AC 3D			sta LEN+3
  1787 336A			c_03A0
  1788 336A			l_039F
  1789
  1790 				; optimize OK (MIDFILES), line = 190
  1791
  1792 336A AD AC 3D			lda LEN+3
  1793 336D 30 0E			bmi @+
  1794 336F 0D AB 3D			ora LEN+2
  1795 3372 0D AA 3D			ora LEN+1
  1796 3375 0D A9 3D			ora LEN
  1797 3378 F0 03 4C CD 31		jne l_03A0
  1798 				@
  1799
  1800 				; optimize OK (MIDFILES), line = 215
  1801
  1802 337D AD AE 3D			lda NTRKREC
  1803 3380 18 69 08			add #$08
  1804 3383 8D AE 3D			sta NTRKREC
  1805 3386 90 03			scc
  1806 3388 EE AF 3D			inc NTRKREC+1
  1807 338B			l_0377
  1808 338B			l_0367
  1809
  1810 				; optimize FAIL ('@print', MIDFILES), line = 217
  1811
  1812 					@print #$9C
  1812 				 LDY# $9C\ JSR @PRINT
  1812 338B A0 9C		 LDY# $9C
  1812 338D 20 89 2A		 JSR @PRINT
  1813 3390			l_02A0
  1814
  1815 				; optimize FAIL (1, MIDFILES), line = 144
  1816
  1817 3390 E8				inx
  1818 3391 A0 01			ldy #1
  1819 3393 AD 23 3C			lda SYSTEM.IORESULT
  1820 3396 C9 80			cmp #$80
  1821 3398 90 01			bcc @+
  1822 339A 88				dey
  1823 				@
  1824 339B 94 94			sty :STACKORIGIN,x
  1825 339D AD F8 33			lda F
  1826 33A0 8D 33 3C			sta SYSTEM.EOF.F
  1827 33A3 AD F9 33			lda F+1
  1828 33A6 8D 34 3C			sta SYSTEM.EOF.F+1
  1829 33A9 20 E1 2C			jsr SYSTEM.EOF
  1830 33AC E8				inx
  1831 33AD AD 35 3C 95 94		mva SYSTEM.EOF.RESULT :STACKORIGIN,x
  1832 33B2 20 52 23			jsr notBOOLEAN
  1833 33B5 20 8D 23			jsr andAL_CL
  1834 33B8 AD 9D 3D 95 94		mva TRACKCOUNT :STACKORIGIN,x
  1835 33BD AD 9E 3D 95 A4		mva TRACKCOUNT+1 :STACKORIGIN+STACKWIDTH,x
  1836 33C2 E8				inx
  1837 33C3 AD 69 3D 95 94		mva NTRACKS :STACKORIGIN,x
  1838 33C8 AD 6A 3D 95 A4		mva NTRACKS+1 :STACKORIGIN+STACKWIDTH,x
  1839 33CD A0 01			ldy #1
  1840 33CF 20 47 23			jsr cmpEAX_ECX.AX_CX
  1841 33D2 90 01			bcc @+
  1842 33D4 88				dey
  1843 				@
  1844 33D5 94 93			sty :STACKORIGIN-1,x
  1845 33D7 CA				dex
  1846 33D8 20 8D 23			jsr andAL_CL
  1847 33DB CA				dex
  1848 33DC CA				dex
  1849 33DD B5 95			lda :STACKORIGIN+1,x
  1850 33DF F0 03 4C 42 30		jne l_02A1
  1851 33E4			b_02A1
  1852 				; CloseFile
  1853
  1854 33E4 8A 48			txa:pha
  1855 33E6 18				clc
  1856 					@closefile F
  1856 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1856 33E7 AC F9 33		 LDY F+1
  1856 33EA AD F8 33		 LDA F
  1856 33ED 20 FD 20		 JSR @CLOSEFILE
  1857 33F0 68 AA			pla:tax
  1858
  1859 				; optimize OK (MIDFILES), line = 220
  1860
  1861 33F2 A9 01			lda #$01
  1862 33F4 8D 90 3D			sta RESULT
  1863 33F7			@exit
  1864
  1865 				; ------------------------------------------------------------
  1866
  1867 = 3D8E			FN	= DATAORIGIN+$0172
  1868 = 3D90			RESULT	= DATAORIGIN+$0174
  1869 33F7			.var F	= DATAORIGIN+$0175 .word
  1870 = 3D9D			TRACKCOUNT	= DATAORIGIN+$0181
  1871 = 3D9F			CHUNKTAG	= DATAORIGIN+$0183
  1872 = 3DA3			V	= DATAORIGIN+$0187
  1873 = 3DA5			TOP	= DATAORIGIN+$0189
  1874 = 3DA7			ENDADR	= DATAORIGIN+$018B
  1875 = 3DA9			LEN	= DATAORIGIN+$018D
  1876 = 3DAD			LOADSIZE	= DATAORIGIN+$0191
  1877 = 3DAE			NTRKREC	= DATAORIGIN+$0192
  1878 = 3C1C			NTRKREC.PTR	= DATAORIGIN+$0000
  1879 = 3C1E			NTRKREC.TRACKTIME	= DATAORIGIN+$0002
  1880 = 3C22			NTRKREC.SKIPDELTA	= DATAORIGIN+$0006
  1881 = 3C23			NTRKREC._EVENT	= DATAORIGIN+$0007
  1882 = 3DB6			@CASETMP_0005	= DATAORIGIN+$019A
  1883
  1884 = 3D8E			@VarData	= FN
  1885 = 0022			@VarDataSize	= 34
  1886
  1887 33F7 60				rts						; ret
  1888 = 33F8 91 3D		F
  1888 				.endl
  1889
  1890 33FA			.local	PROCESSTRACK					; FUNCTION
  1891
  1892 33FA 4C F2 34			jmp l_0501
  1893
  1894 33FD			.local	READB						; PROCEDURE | INLINE
  1895
  1896 					.MACRO m@INLINE
  1897 				
  1898 				; optimize OK (MIDFILES), line = 230
  1899 				
  1900 					ldy #$00
  1901 					lda (_PTR),y
  1902 					sta _TMP
  1903 				
  1904 				; optimize FAIL (0, MIDFILES), line = 231
  1905 				
  1906 					inc _ADR
  1907 					sne
  1908 					inc _ADR+1
  1909 				
  1910 				; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 232
  1911 				
  1912 					jsr MEMBOUNDCHECK
  1913 					.ENDM
  1914 33FD			@exit
  1915 				.endl
  1916
  1917 33FD			.local	READB2FB					; PROCEDURE | INLINE
  1918
  1919 					.MACRO m@INLINE
  1920 				
  1921 				; optimize OK (MIDFILES), line = 238
  1922 				
  1923 					ldy #$00
  1924 					lda (_PTR),y
  1925 					sta MIDI_FIFO.FIFO_BYTE
  1926 				
  1927 				; optimize FAIL (0, MIDFILES), line = 239
  1928 				
  1929 					inc _ADR
  1930 					sne
  1931 					inc _ADR+1
  1932 				
  1933 				; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 240
  1934 				
  1935 					jsr MEMBOUNDCHECK
  1936 					.ENDM
  1937 33FD			@exit
  1938 				.endl
  1939
  1940 33FD			.local	READVARL					; PROCEDURE | ASSEMBLER
  1941
  1942 				; -------------------  ASM Block 00000072  -------------------
  1943
  1944 = 00F6			A equ _delta;
  1945 = 00F7			B equ _delta+1;
  1946 = 00F8			C equ _delta+2;
  1947 = 00F9			D equ _delta+3;
  1948
  1949 				  .MACRO m@read2A
  1950 				    lda (_PTR),y
  1951 				    sta A
  1952 				    inc _ADR
  1953 				    sne
  1954 				    inc _ADR+1
  1955 				    jsr MEMBOUNDCHECK
  1956 				    lda A
  1957 				  .ENDM
  1958
  1959 33FD A0 00		  ldy #$00
  1960 33FF 84 F6		  sty A
  1961 3401 84 F7		  sty B
  1962 3403 84 F8		  sty C
  1963 3405 84 F9		  sty D
  1964
  1965 				// read block
  1966
  1967 				// read 1st byte
  1968 					// .local +MAIN.MIDFILES.PROCESSTRACK.READB
  1969 					// m@INLINE
  1970 					// .endl
  1971 					// lda _TMP
  1972 					// sta A
  1973 3407			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 3407 B1 E0		    lda (_PTR),y
     2 3409 85 F6		    sta A
     3 340B E6 E0		    inc _ADR
     4 340D D0 02		    sne
     5 340F E6 E1		    inc _ADR+1
     6 3411 20 CD 2E		    jsr MEMBOUNDCHECK
     7 3414 A5 F6		    lda A
Source: MIDICar Player.a65
  1974
  1975 3416 10 4D		  bpl endRead
  1976
  1977 				// move A to B and read 2nd byte
  1978 3418 29 7F			and #$7F
  1979 341A 85 F7			sta B
  1980
  1981 				// read 2nd byte
  1982 					// .local +MAIN.MIDFILES.PROCESSTRACK.READB
  1983 					// m@INLINE
  1984 					// .endl
  1985 					// lda _TMP
  1986 					// sta A
  1987
  1988 341C			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 341C B1 E0		    lda (_PTR),y
     2 341E 85 F6		    sta A
     3 3420 E6 E0		    inc _ADR
     4 3422 D0 02		    sne
     5 3424 E6 E1		    inc _ADR+1
     6 3426 20 CD 2E		    jsr MEMBOUNDCHECK
     7 3429 A5 F6		    lda A
Source: MIDICar Player.a65
  1989
  1990 342B 10 38		  bpl endRead
  1991
  1992 				// mova B to C, A to B and read 3rd byte
  1993 342D A5 F7			lda B
  1994 342F 85 F8			sta C
  1995 3431 A5 F6			lda A
  1996 3433 29 7F			and #$7F
  1997 3435 85 F7			sta B
  1998
  1999 				// read 3rd
  2000 					// .local +MAIN.MIDFILES.PROCESSTRACK.READB
  2001 					// m@INLINE
  2002 					// .endl
  2003 					// lda _TMP
  2004 					// sta A
  2005
  2006 3437			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 3437 B1 E0		    lda (_PTR),y
     2 3439 85 F6		    sta A
     3 343B E6 E0		    inc _ADR
     4 343D D0 02		    sne
     5 343F E6 E1		    inc _ADR+1
     6 3441 20 CD 2E		    jsr MEMBOUNDCHECK
     7 3444 A5 F6		    lda A
Source: MIDICar Player.a65
  2007
  2008 3446 10 1D		  bpl endRead
  2009
  2010 				// move C to D, B to C, A to B and read 4th byte
  2011 3448 A5 F8			lda C
  2012 344A 85 F9			sta D
  2013 344C A5 F7			lda B
  2014 344E 85 F8			sta C
  2015 3450 A5 F6			lda A
  2016 3452 29 7F			and #$7F
  2017 3454 85 F7			sta B
  2018
  2019 				// read 4th
  2020 					// .local +MAIN.MIDFILES.PROCESSTRACK.READB
  2021 					// m@INLINE
  2022 					// .endl
  2023 					// lda _TMP
  2024 					// sta A
  2025
  2026 3456			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: MIDICar Player.a65]
     1 3456 B1 E0		    lda (_PTR),y
     2 3458 85 F6		    sta A
     3 345A E6 E0		    inc _ADR
     4 345C D0 02		    sne
     5 345E E6 E1		    inc _ADR+1
     6 3460 20 CD 2E		    jsr MEMBOUNDCHECK
     7 3463 A5 F6		    lda A
Source: MIDICar Player.a65
  2027
  2028 				// end read block
  2029 3465			endRead:
  2030
  2031 				// decode block
  2032 				// 'A' stays as it is
  2033
  2034 				// 'B' if geather than zero, lets decode
  2035 3465 A5 F7		  lda B
  2036 3467 F0 0A		  beq noDecodeB
  2037
  2038 				// 76543210 76543210
  2039 				// 0bbbbbbb 0aaaaaaa
  2040 				// 00bbbbbb Baaaaaaa
  2041 3469 46 F7		  lsr B
  2042 346B 90 06		  bcc noDecodeB
  2043
  2044 346D A5 F6		  lda A
  2045 346F 09 80		  ora #$80
  2046 3471 85 F6		  sta A
  2047
  2048 3473			noDecodeB:
  2049 				// 'C' if geather than zero, lets decode
  2050 3473 A5 F8		  lda C
  2051 3475 F0 16		  beq noDecodeC
  2052
  2053 				// 76543210 76543210
  2054 				// 0ccccccc 0bbbbbbb
  2055 				// 00cccccc 0Cbbbbbb
  2056 3477 46 F8		  lsr C
  2057 3479 90 08		  bcc noC1
  2058
  2059 347B A5 F7		  lda B
  2060 347D 09 40		  ora #$40
  2061 347F 85 F7		  sta B
  2062
  2063 3481 A5 F8		  lda C // reload C
  2064
  2065 3483			noC1:
  2066 				// 76543210 76543210
  2067 				// 0ccccccc 0bbbbbbb
  2068 				// 000ccccc Ccbbbbbb
  2069 3483 46 F8		  lsr C
  2070 3485 90 06		  bcc noDecodeC
  2071
  2072 3487 A5 F7		  lda B
  2073 3489 09 80		  ora #$80
  2074 348B 85 F7		  sta B
  2075
  2076 348D			noDecodeC:
  2077 				// 'D' if geather than zero, lets decode
  2078 348D A5 F9		  lda D
  2079 348F F0 22		  beq noDecodeD
  2080
  2081 				// 76543210 76543210
  2082 				// 0ddddddd 0ccccccc
  2083 				// 00dddddd 00Dccccc
  2084 3491 46 F9		  lsr D
  2085 3493 90 08		  bcc noD1
  2086
  2087 3495 A5 F8		  lda C
  2088 3497 09 20		  ora #$20
  2089 3499 85 F8		  sta C
  2090
  2091 349B A5 F9		  lda D // reloaad D
  2092 349D			noD1:
  2093 				// 76543210 76543210
  2094 				// 0ddddddd 0ccccccc
  2095 				// 000ddddd 0Ddccccc
  2096 349D 46 F9		  lsr D
  2097 349F 90 08		  bcc noD2
  2098
  2099 34A1 A5 F8		  lda C
  2100 34A3 09 40		  ora #$40
  2101 34A5 85 F8		  sta C
  2102
  2103 34A7 A5 F9		  lda D // reaload D
  2104 34A9			noD2:
  2105 				// 76543210 76543210
  2106 				// 0ddddddd 0ccccccc
  2107 				// 0000dddd Dddccccc
  2108 34A9 46 F9		  lsr D
  2109 34AB 90 06		  bcc noDecodeD
  2110
  2111 34AD A5 F8		  lda C
  2112 34AF 09 80		  ora #$80
  2113 34B1 85 F8		  sta C
  2114
  2115 34B3			noDecodeD:
  2116
  2117
  2118 34B3			@exit
  2119 					.ifdef @new
  2120 					lda <@VarData
  2121 					sta :ztmp
  2122 					lda >@VarData
  2123 					ldy #@VarDataSize-1
  2124 					jmp @FreeMem
  2125 					els
  2126 34B3 60				rts						; ret
  2127 					eif
  2128 				.endl
  2129
  2130 34B4			.local	READT						; PROCEDURE | ASSEMBLER
  2131
  2132 				; -------------------  ASM Block 00000073  -------------------
  2133
  2134 34B4			    .local +MAIN.MIDFILES.PROCESSTRACK.READB
  2135 34B4			    m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 34B4 A0 00			ldy #$00
     5 34B6 B1 E0			lda (_PTR),y
     6 34B8 85 F6			sta _TMP
    10 34BA E6 E0			inc _ADR
    11 34BC D0 02			sne
    12 34BE E6 E1			inc _ADR+1
    16 34C0 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2136 				    .endl
  2137 34C3 A5 F6		    lda _TMP
  2138 34C5 85 F8		    sta _delta+2
  2139
  2140 34C7			    .local +MAIN.MIDFILES.PROCESSTRACK.READB
  2141 34C7			    m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 34C7 A0 00			ldy #$00
     5 34C9 B1 E0			lda (_PTR),y
     6 34CB 85 F6			sta _TMP
    10 34CD E6 E0			inc _ADR
    11 34CF D0 02			sne
    12 34D1 E6 E1			inc _ADR+1
    16 34D3 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2142 				    .endl
  2143 34D6 A5 F6		    lda _TMP
  2144 34D8 85 F7		    sta _delta+1
  2145
  2146 34DA			    .local +MAIN.MIDFILES.PROCESSTRACK.READB
  2147 34DA			    m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 34DA A0 00			ldy #$00
     5 34DC B1 E0			lda (_PTR),y
     6 34DE 85 F6			sta _TMP
    10 34E0 E6 E0			inc _ADR
    11 34E2 D0 02			sne
    12 34E4 E6 E1			inc _ADR+1
    16 34E6 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2148 				    .endl
  2149 34E9 A5 F6		    lda _TMP
  2150 34EB 85 F6		    sta _delta+0
  2151
  2152 34ED A9 00		    lda #0
  2153 34EF 85 F9		    sta _delta+3
  2154 				  
  2155 34F1			@exit
  2156 					.ifdef @new
  2157 					lda <@VarData
  2158 					sta :ztmp
  2159 					lda >@VarData
  2160 					ldy #@VarDataSize-1
  2161 					jmp @FreeMem
  2162 					els
  2163 34F1 60				rts						; ret
  2164 					eif
  2165 				.endl
  2166 34F2			l_0501
  2167
  2168 				; optimize OK (MIDFILES), line = 279
  2169
  2170 34F2 A9 00			lda #$00
  2171 34F4 85 F6			sta _DELTA
  2172 34F6 85 F7			sta _DELTA+1
  2173 34F8 85 F8			sta _DELTA+2
  2174 34FA 85 F9			sta _DELTA+3
  2175
  2176 				; --- RepeatUntilProlog
  2177 34FC			l_0526
  2178
  2179 				; optimize OK (MIDFILES), line = 281
  2180
  2181 34FC A5 E6			lda _SKIPDELTA
  2182 34FE D0 15			jne l_0535
  2183
  2184 				; optimize FAIL ('READVARL', MIDFILES), line = 283
  2185
  2186 3500 20 FD 33			jsr READVARL
  2187
  2188 				; optimize OK (MIDFILES), line = 284
  2189
  2190 3503 A5 F9			lda _DELTA+3
  2191 3505 30 0B			jmi l_0547
  2192 3507 05 F8			ora _DELTA+2
  2193 3509 05 F7			ora _DELTA+1
  2194 350B 05 F6			ora _DELTA
  2195 350D F0 03			jeq l_0547
  2196 350F 4C 57 37			jmp b_0526					; break
  2197 3512			l_0547
  2198 3512 4C 19 35			jmp l_0553
  2199 3515			l_0535
  2200
  2201 				; optimize OK (MIDFILES), line = 287
  2202
  2203 3515 A9 00			lda #$00
  2204 3517 85 E6			sta _SKIPDELTA
  2205 3519			l_0553
  2206
  2207 				; optimize OK (MIDFILES), line = 289
  2208
  2209 3519 A0 00			ldy #$00
  2210 351B B1 E0			lda (_PTR),y
  2211 351D 10 13			jpl l_056D
  2212
  2213 				; optimize FAIL ('m@INLINE', MIDFILES), line = 291
  2214
  2215 351F				.local READB
  2216 351F				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 351F A0 00			ldy #$00
     5 3521 B1 E0			lda (_PTR),y
     6 3523 85 F6			sta _TMP
    10 3525 E6 E0			inc _ADR
    11 3527 D0 02			sne
    12 3529 E6 E1			inc _ADR+1
    16 352B 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2217 					.endl
  2218 352E A5 F6			lda _TMP
  2219 3530 85 E7			sta _EVENT
  2220 3532			l_056D
  2221
  2222 				; optimize OK (MIDFILES), line = 294
  2223
  2224 3532 A5 E7			lda _EVENT
  2225 3534 8D BD 3D			sta @CASETMP_0006
  2226 3537 18				clc						; clear carry for add
  2227 3538 69 40			adc #$FF-$BF					; make m = $FF
  2228 353A 69 40			adc #$BF-$80+1					; carry set if in range n to m
  2229 353C B0 0A			bcs @+
  2230 353E AD BD 3D			lda @CASETMP_0006
  2231 3541 18				clc						; clear carry for add
  2232 3542 69 10			adc #$FF-$EF					; make m = $FF
  2233 3544 69 10			adc #$EF-$E0+1					; carry set if in range n to m
  2234 3546 90 61			jcc l_0584
  2235 				@
  2236
  2237 				; optimize OK (MIDFILES), line = 299
  2238
  2239 3548 A5 E7			lda _EVENT
  2240 354A 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2241 354C				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2242 354C				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 354C A5 FD		  lda FIFO_Head
     5 354E 18			  clc
     6 354F 69 01		  adc #1
     7 3551 C5 FE		  cmp FIFO_Tail
     8 3553 D0 01		  bne storeInFIFO
     9 3555 60			  rts
    11 3556			storeInFIFO:
    12 3556 A4 FD		  ldy FIFO_Head
    13 3558 A5 FF		  lda FIFO_Byte
    14 355A 99 00 06		  sta FIFO_ADDR,y
    15 355D C8			  iny
    16 355E 84 FD		  sty FIFO_Head
    17 3560			exitWrite:
Source: MIDICar Player.a65
  2243 					.endl
  2244
  2245 				; optimize FAIL ('m@INLINE', MIDFILES), line = 300
  2246
  2247 3560				.local READB2FB
  2248 3560				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 3560 A0 00			ldy #$00
     5 3562 B1 E0			lda (_PTR),y
     6 3564 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 3566 E6 E0			inc _ADR
    11 3568 D0 02			sne
    12 356A E6 E1			inc _ADR+1
    16 356C 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2249 					.endl
  2250 356F				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2251 356F				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 356F A5 FD		  lda FIFO_Head
     5 3571 18			  clc
     6 3572 69 01		  adc #1
     7 3574 C5 FE		  cmp FIFO_Tail
     8 3576 D0 01		  bne storeInFIFO
     9 3578 60			  rts
    11 3579			storeInFIFO:
    12 3579 A4 FD		  ldy FIFO_Head
    13 357B A5 FF		  lda FIFO_Byte
    14 357D 99 00 06		  sta FIFO_ADDR,y
    15 3580 C8			  iny
    16 3581 84 FD		  sty FIFO_Head
    17 3583			exitWrite:
Source: MIDICar Player.a65
  2252 					.endl
  2253
  2254 				; optimize FAIL ('m@INLINE', MIDFILES), line = 301
  2255
  2256 3583				.local READB2FB
  2257 3583				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 3583 A0 00			ldy #$00
     5 3585 B1 E0			lda (_PTR),y
     6 3587 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 3589 E6 E0			inc _ADR
    11 358B D0 02			sne
    12 358D E6 E1			inc _ADR+1
    16 358F 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2258 					.endl
  2259 3592				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2260 3592				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 3592 A5 FD		  lda FIFO_Head
     5 3594 18			  clc
     6 3595 69 01		  adc #1
     7 3597 C5 FE		  cmp FIFO_Tail
     8 3599 D0 01		  bne storeInFIFO
     9 359B 60			  rts
    11 359C			storeInFIFO:
    12 359C A4 FD		  ldy FIFO_Head
    13 359E A5 FF		  lda FIFO_Byte
    14 35A0 99 00 06		  sta FIFO_ADDR,y
    15 35A3 C8			  iny
    16 35A4 84 FD		  sty FIFO_Head
    17 35A6			exitWrite:
Source: MIDICar Player.a65
  2261 					.endl
  2262
  2263 35A6 4C 33 37			jmp a_0006
  2264 35A9			l_0584
  2265 35A9 AD BD 3D			lda @CASETMP_0006
  2266 35AC 18				clc						; clear carry for add
  2267 35AD 69 20			adc #$FF-$DF					; make m = $FF
  2268 35AF 69 20			adc #$DF-$C0+1					; carry set if in range n to m
  2269 35B1 90 3E			jcc l_0598
  2270 				@
  2271
  2272 				; optimize OK (MIDFILES), line = 311
  2273
  2274 35B3 A5 E7			lda _EVENT
  2275 35B5 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2276 35B7				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2277 35B7				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 35B7 A5 FD		  lda FIFO_Head
     5 35B9 18			  clc
     6 35BA 69 01		  adc #1
     7 35BC C5 FE		  cmp FIFO_Tail
     8 35BE D0 01		  bne storeInFIFO
     9 35C0 60			  rts
    11 35C1			storeInFIFO:
    12 35C1 A4 FD		  ldy FIFO_Head
    13 35C3 A5 FF		  lda FIFO_Byte
    14 35C5 99 00 06		  sta FIFO_ADDR,y
    15 35C8 C8			  iny
    16 35C9 84 FD		  sty FIFO_Head
    17 35CB			exitWrite:
Source: MIDICar Player.a65
  2278 					.endl
  2279
  2280 				; optimize FAIL ('m@INLINE', MIDFILES), line = 312
  2281
  2282 35CB				.local READB2FB
  2283 35CB				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 35CB A0 00			ldy #$00
     5 35CD B1 E0			lda (_PTR),y
     6 35CF 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 35D1 E6 E0			inc _ADR
    11 35D3 D0 02			sne
    12 35D5 E6 E1			inc _ADR+1
    16 35D7 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2284 					.endl
  2285 35DA				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2286 35DA				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 35DA A5 FD		  lda FIFO_Head
     5 35DC 18			  clc
     6 35DD 69 01		  adc #1
     7 35DF C5 FE		  cmp FIFO_Tail
     8 35E1 D0 01		  bne storeInFIFO
     9 35E3 60			  rts
    11 35E4			storeInFIFO:
    12 35E4 A4 FD		  ldy FIFO_Head
    13 35E6 A5 FF		  lda FIFO_Byte
    14 35E8 99 00 06		  sta FIFO_ADDR,y
    15 35EB C8			  iny
    16 35EC 84 FD		  sty FIFO_Head
    17 35EE			exitWrite:
Source: MIDICar Player.a65
  2287 					.endl
  2288
  2289 35EE 4C 33 37			jmp a_0006
  2290 35F1			l_0598
  2291 35F1 AD BD 3D			lda @CASETMP_0006
  2292 35F4 18				clc						; clear carry for add
  2293 35F5 69 08			adc #$FF-$F7					; make m = $FF
  2294 35F7 69 08			adc #$F7-$F0+1					; carry set if in range n to m
  2295 35F9 90 5D			jcc l_05AA
  2296 				@
  2297
  2298 				; optimize FAIL ('READVARL', MIDFILES), line = 320
  2299
  2300 35FB 20 FD 33			jsr READVARL
  2301
  2302 				; optimize OK (MIDFILES), line = 323
  2303
  2304 35FE A5 E7			lda _EVENT
  2305 3600 85 FF			sta MIDI_FIFO.FIFO_BYTE
  2306 3602				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2307 3602				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 3602 A5 FD		  lda FIFO_Head
     5 3604 18			  clc
     6 3605 69 01		  adc #1
     7 3607 C5 FE		  cmp FIFO_Tail
     8 3609 D0 01		  bne storeInFIFO
     9 360B 60			  rts
    11 360C			storeInFIFO:
    12 360C A4 FD		  ldy FIFO_Head
    13 360E A5 FF		  lda FIFO_Byte
    14 3610 99 00 06		  sta FIFO_ADDR,y
    15 3613 C8			  iny
    16 3614 84 FD		  sty FIFO_Head
    17 3616			exitWrite:
Source: MIDICar Player.a65
  2308 					.endl
  2309
  2310 				; --- WhileProlog
  2311 3616 4C 3E 36			jmp l_05B4
  2312 3619			l_05B5
  2313
  2314 				; optimize FAIL ('m@INLINE', MIDFILES), line = 329
  2315
  2316 3619				.local READB2FB
  2317 3619				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 3619 A0 00			ldy #$00
     5 361B B1 E0			lda (_PTR),y
     6 361D 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 361F E6 E0			inc _ADR
    11 3621 D0 02			sne
    12 3623 E6 E1			inc _ADR+1
    16 3625 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2318 					.endl
  2319
  2320 				; optimize FAIL ('m@INLINE', MIDFILES), line = 331
  2321
  2322 3628				.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
  2323 3628				m@INLINE
Macro: MAIN.MIDI_FIFO.FIFO_WRITEBYTE.M@INLINE [Source: MIDICar Player.a65]
     4 3628 A5 FD		  lda FIFO_Head
     5 362A 18			  clc
     6 362B 69 01		  adc #1
     7 362D C5 FE		  cmp FIFO_Tail
     8 362F D0 01		  bne storeInFIFO
     9 3631 60			  rts
    11 3632			storeInFIFO:
    12 3632 A4 FD		  ldy FIFO_Head
    13 3634 A5 FF		  lda FIFO_Byte
    14 3636 99 00 06		  sta FIFO_ADDR,y
    15 3639 C8			  iny
    16 363A 84 FD		  sty FIFO_Head
    17 363C			exitWrite:
Source: MIDICar Player.a65
  2324 					.endl
  2325
  2326 				; optimize FAIL (0, MIDFILES), line = 335
  2327
  2328 363C C6 F6			dec _TMP
  2329 363E			l_05B4
  2330
  2331 				; optimize OK (MIDFILES), line = 327
  2332
  2333 363E A5 F6			lda _TMP
  2334 3640 D0 D7			jne l_05B5
  2335
  2336 				; optimize OK (MIDFILES), line = 338
  2337
  2338 3642 A5 FF			lda MIDI_FIFO.FIFO_BYTE
  2339 3644 C9 F7			cmp #$F7
  2340 3646 D0 08			jne l_05D9
  2341 3648 A9 00			lda #$00
  2342 364A 8D BB 3D			sta FLAGSYSEX
  2343 364D 4C 55 36			jmp l_05E7
  2344 3650			l_05D9
  2345 3650 A9 01			lda #$01
  2346 3652 8D BB 3D			sta FLAGSYSEX
  2347 3655			l_05E7
  2348
  2349 3655 4C 33 37			jmp a_0006
  2350 3658			l_05AA
  2351 3658 AD BD 3D			lda @CASETMP_0006
  2352 365B C9 FF			cmp #$FF
  2353 365D F0 03 4C 33 37		jne l_05F4
  2354 				@
  2355
  2356 				; optimize FAIL ('m@INLINE', MIDFILES), line = 345
  2357
  2358 3662				.local READB2FB
  2359 3662				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB2FB.M@INLINE [Source: MIDICar Player.a65]
     4 3662 A0 00			ldy #$00
     5 3664 B1 E0			lda (_PTR),y
     6 3666 85 FF			sta MIDI_FIFO.FIFO_BYTE
    10 3668 E6 E0			inc _ADR
    11 366A D0 02			sne
    12 366C E6 E1			inc _ADR+1
    16 366E 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2360 					.endl
  2361
  2362 				; optimize FAIL ('READVARL', MIDFILES), line = 346
  2363
  2364 3671 20 FD 33			jsr READVARL
  2365
  2366 				; optimize OK (MIDFILES), line = 348
  2367
  2368 3674 A5 FF			lda MIDI_FIFO.FIFO_BYTE
  2369 3676 8D BE 3D			sta @CASETMP_0007
  2370 3679 C9 2F			cmp #$2F
  2371 367B D0 0D			jne l_0601
  2372 				@
  2373
  2374 				; optimize OK (MIDFILES), line = 353
  2375
  2376 367D A9 FF			lda #$FF
  2377 367F 85 F6			sta _DELTA
  2378 3681 85 F7			sta _DELTA+1
  2379 3683 85 F8			sta _DELTA+2
  2380 3685 85 F9			sta _DELTA+3
  2381
  2382 3687 4C 33 37			jmp a_0007
  2383 368A			l_0601
  2384 368A C9 51			cmp #$51
  2385 368C D0 39			jne l_060E
  2386 				@
  2387
  2388 				; optimize FAIL ('READT', MIDFILES), line = 356
  2389
  2390 368E 20 B4 34			jsr READT
  2391
  2392 				; optimize OK (MIDFILES), line = 357
  2393
  2394 3691 A5 F9			lda _DELTA+3
  2395 3693 CD 72 3D			cmp MS_PER_QNOTE+3
  2396 3696 D0 15			bne @+
  2397 3698 A5 F8			lda _DELTA+2
  2398 369A CD 71 3D			cmp MS_PER_QNOTE+2
  2399 369D D0 0E			bne @+
  2400 369F A5 F7			lda _DELTA+1
  2401 36A1 CD 70 3D			cmp MS_PER_QNOTE+1
  2402 36A4 D0 07			bne @+
  2403 36A6 A5 F6			lda _DELTA
  2404 36A8 CD 6F 3D			cmp MS_PER_QNOTE
  2405 36AB F0 17			jeq l_061F
  2406 				@
  2407
  2408 				; optimize OK (MIDFILES), line = 359
  2409
  2410 36AD A5 F6			lda _DELTA
  2411 36AF 8D 6F 3D			sta MS_PER_QNOTE
  2412 36B2 A5 F7			lda _DELTA+1
  2413 36B4 8D 70 3D			sta MS_PER_QNOTE+1
  2414 36B7 A5 F8			lda _DELTA+2
  2415 36B9 8D 71 3D			sta MS_PER_QNOTE+2
  2416 36BC A5 F9			lda _DELTA+3
  2417 36BE 8D 72 3D			sta MS_PER_QNOTE+3
  2418
  2419 				; optimize FAIL ('SETTEMPO', MIDFILES), line = 360
  2420
  2421 36C1 20 98 37			jsr SETTEMPO
  2422 36C4			l_061F
  2423
  2424 36C4 4C 33 37			jmp a_0007
  2425 36C7			l_060E
  2426 36C7 C9 58			cmp #$58
  2427 36C9 D0 56			jne l_0630
  2428 				@
  2429
  2430 				; optimize FAIL ('m@INLINE', MIDFILES), line = 365
  2431
  2432 36CB				.local READB
  2433 36CB				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 36CB A0 00			ldy #$00
     5 36CD B1 E0			lda (_PTR),y
     6 36CF 85 F6			sta _TMP
    10 36D1 E6 E0			inc _ADR
    11 36D3 D0 02			sne
    12 36D5 E6 E1			inc _ADR+1
    16 36D7 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2434 					.endl
  2435 36DA A5 F6			lda _TMP
  2436 36DC 8D 73 3D			sta TACTNUM
  2437
  2438 				; optimize FAIL ('m@INLINE', MIDFILES), line = 366
  2439
  2440 36DF				.local READB
  2441 36DF				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 36DF A0 00			ldy #$00
     5 36E1 B1 E0			lda (_PTR),y
     6 36E3 85 F6			sta _TMP
    10 36E5 E6 E0			inc _ADR
    11 36E7 D0 02			sne
    12 36E9 E6 E1			inc _ADR+1
    16 36EB 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2442 					.endl
  2443 36EE A5 F6			lda _TMP
  2444 36F0 8D 74 3D			sta TACTDENUM
  2445
  2446 				; optimize FAIL ('m@INLINE', MIDFILES), line = 367
  2447
  2448 36F3				.local READB
  2449 36F3				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 36F3 A0 00			ldy #$00
     5 36F5 B1 E0			lda (_PTR),y
     6 36F7 85 F6			sta _TMP
    10 36F9 E6 E0			inc _ADR
    11 36FB D0 02			sne
    12 36FD E6 E1			inc _ADR+1
    16 36FF 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2450 					.endl
  2451 3702 A5 F6			lda _TMP
  2452 3704 8D 75 3D			sta TICKS_PER_QNOTE
  2453
  2454 				; optimize FAIL ('m@INLINE', MIDFILES), line = 368
  2455
  2456 3707				.local READB
  2457 3707				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 3707 A0 00			ldy #$00
     5 3709 B1 E0			lda (_PTR),y
     6 370B 85 F6			sta _TMP
    10 370D E6 E0			inc _ADR
    11 370F D0 02			sne
    12 3711 E6 E1			inc _ADR+1
    16 3713 20 CD 2E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2458 					.endl
  2459 3716 A5 F6			lda _TMP
  2460 3718 8D 76 3D			sta TICKS_PER_32ND
  2461
  2462 				; optimize FAIL ('SETTEMPO', MIDFILES), line = 369
  2463
  2464 371B 20 98 37			jsr SETTEMPO
  2465
  2466 371E 4C 33 37			jmp a_0007
  2467 3721			l_0630
  2468
  2469 				; --- WhileProlog
  2470 3721 4C 2F 37			jmp l_0653
  2471 3724			l_0654
  2472
  2473 				; optimize FAIL (0, MIDFILES), line = 375
  2474
  2475 3724 C6 F6			dec _TMP
  2476
  2477 				; optimize FAIL (0, MIDFILES), line = 376
  2478
  2479 3726 E6 E0			inc _ADR
  2480 3728 D0 02			sne
  2481 372A E6 E1			inc _ADR+1
  2482
  2483 				; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 377
  2484
  2485 372C 20 CD 2E			jsr MEMBOUNDCHECK
  2486 372F			l_0653
  2487
  2488 				; optimize OK (MIDFILES), line = 373
  2489
  2490 372F A5 F6			lda _TMP
  2491 3731 D0 F1			jne l_0654
  2492 3733			a_0007
  2493
  2494 3733			l_05F4
  2495 3733			a_0006
  2496
  2497 				; optimize OK (MIDFILES), line = 382
  2498
  2499 3733 A5 F9			lda _DELTA+3
  2500 3735 49 FF			eor #$FF
  2501 3737 F0 03 4C FC 34		jne l_0526
  2502 373C A5 F8			lda _DELTA+2
  2503 373E 49 FF			eor #$FF
  2504 3740 F0 03 4C FC 34		jne l_0526
  2505 3745 A5 F7			lda _DELTA+1
  2506 3747 49 FF			eor #$FF
  2507 3749 F0 03 4C FC 34		jne l_0526
  2508 374E A5 F6			lda _DELTA
  2509 3750 49 FF			eor #$FF
  2510 3752 F0 03 4C FC 34		jne l_0526
  2511 3757			b_0526
  2512
  2513 				; optimize OK (MIDFILES), line = 383
  2514
  2515 3757 A9 01			lda #$01
  2516 3759 85 E6			sta _SKIPDELTA
  2517
  2518 				; optimize OK (MIDFILES), line = 384
  2519
  2520 375B A5 F6			lda _DELTA
  2521 375D 8D B7 3D			sta RESULT
  2522 3760 A5 F7			lda _DELTA+1
  2523 3762 8D B8 3D			sta RESULT+1
  2524 3765 A5 F8			lda _DELTA+2
  2525 3767 8D B9 3D			sta RESULT+2
  2526 376A A5 F9			lda _DELTA+3
  2527 376C 8D BA 3D			sta RESULT+3
  2528 376F			@exit
  2529
  2530 				; ------------------------------------------------------------
  2531
  2532 = 3DB7			RESULT	= DATAORIGIN+$019B
  2533 = 3DBB			FLAGSYSEX	= DATAORIGIN+$019F
  2534 = 3DBC			MSGLEN	= DATAORIGIN+$01A0
  2535 = 3DBD			@CASETMP_0006	= DATAORIGIN+$01A1
  2536 = 3DBE			@CASETMP_0007	= DATAORIGIN+$01A2
  2537
  2538 = 3DBB			@VarData	= FLAGSYSEX
  2539 = 0004			@VarDataSize	= 4
  2540
  2541 376F 60				rts						; ret
  2542 				.endl
  2543
  2544 3770			.local	INT_PLAY					; PROCEDURE | ASSEMBLER | INTERRUPT
  2545
  2546 				; -------------------  ASM Block 00000074  -------------------
  2547
  2548 3770 A5 F5		    lda _timerStatus
  2549 3772 30 22		    bmi skip
  2550
  2551 3774 29 0F		    and #f_ratio
  2552 3776 C5 F4		    cmp _subCnt
  2553 3778 D0 1A		    bne incSubCounter
  2554
  2555 377A A5 F5		    lda _timerStatus
  2556 377C 09 40		    ora #f_tick
  2557 377E 85 F5		    sta _timerStatus
  2558
  2559 3780 A9 01		    lda #1
  2560 3782 85 F4		    sta _subCnt
  2561
  2562 3784 E6 F0		    inc _totalTicks
  2563 3786 D0 0E		    bne skip
  2564 3788 E6 F1		    inc _totalTicks+1
  2565 378A D0 0A		    bne skip
  2566 378C E6 F2		    inc _totalTicks+2
  2567 378E D0 06		    bne skip
  2568 3790 E6 F3		    inc _totalTicks+3
  2569 3792 D0 02		    bne skip
  2570
  2571 3794			incSubCounter:
  2572 3794 E6 F4		    inc _subCnt
  2573
  2574 3796			skip:
  2575
  2576 3796 68			  pla
  2577
  2578 3797 40				rti						; ret
  2579 				.endl
  2580
  2581 3798			.local	SETTEMPO					; PROCEDURE
  2582
  2583 				; optimize FAIL ('divmulINT.DIV', MIDFILES), line = 431
  2584
  2585 3798 E8				inx
  2586 3799 AD 6F 3D 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  2587 379E AD 70 3D 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  2588 37A3 AD 71 3D 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  2589 37A8 AD 72 3D 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  2590 37AD E8				inx
  2591 37AE AD 6D 3D 95 94		mva TICKDIV :STACKORIGIN,x
  2592 37B3 AD 6E 3D 95 A4		mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
  2593 37B8 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  2594 37BC A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  2595 37C0 20 B1 24			jsr divmulINT.DIV
  2596 37C3 CA				dex
  2597 37C4 B5 94			lda :STACKORIGIN,x
  2598 37C6 8D C3 3D			sta _FREQ
  2599 37C9 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2600 37CB 8D C4 3D			sta _FREQ+1
  2601 37CE B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2602 37D0 8D C5 3D			sta _FREQ+2
  2603 37D3 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2604 37D5 8D C6 3D			sta _FREQ+3
  2605
  2606 				; optimize FAIL ('@I2F_m', MIDFILES), line = 432
  2607
  2608 37D8 AD C3 3D 95 94		mva _FREQ :STACKORIGIN,x
  2609 37DD AD C4 3D 95 A4		mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2610 37E2 AD C5 3D 95 B4		mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2611 37E7 AD C6 3D 95 C4		mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2612 37EC E8				inx
  2613 37ED A9 00 95 94			mva #$00 :STACKORIGIN,x
  2614 37F1 A9 24 95 A4			mva #$24 :STACKORIGIN+STACKWIDTH,x
  2615 37F5 A9 74 95 B4			mva #$74 :STACKORIGIN+STACKWIDTH*2,x
  2616 37F9 A9 49 95 C4			mva #$49 :STACKORIGIN+STACKWIDTH*3,x
  2617 37FD 20 62 2A			jsr @I2F_m
  2618 3800 20 24 29			jsr @FDIV
  2619 3803 CA				dex
  2620 3804 B5 94			lda :STACKORIGIN,x
  2621 3806 8D BF 3D			sta FREQ
  2622 3809 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2623 380B 8D C0 3D			sta FREQ+1
  2624 380E B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2625 3810 8D C1 3D			sta FREQ+2
  2626 3813 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2627 3815 8D C2 3D			sta FREQ+3
  2628
  2629 				; optimize FAIL ('@FDIV', MIDFILES), line = 433
  2630
  2631 3818 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2632 381C A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2633 3820 A9 80 95 B4			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  2634 3824 A9 3F 95 C4			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  2635 3828 E8				inx
  2636 3829 AD BF 3D 95 94		mva FREQ :STACKORIGIN,x
  2637 382E AD C0 3D 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2638 3833 AD C1 3D 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2639 3838 AD C2 3D 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2640 383D 20 24 29			jsr @FDIV
  2641 3840 CA				dex
  2642 3841 B5 94			lda :STACKORIGIN,x
  2643 3843 8D BF 3D			sta FREQ
  2644 3846 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2645 3848 8D C0 3D			sta FREQ+1
  2646 384B B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2647 384D 8D C1 3D			sta FREQ+2
  2648 3850 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2649 3852 8D C2 3D			sta FREQ+3
  2650
  2651 				; optimize FAIL ('@FDIV', MIDFILES), line = 436
  2652
  2653 3855 A9 F5 95 94			mva #$F5 :STACKORIGIN,x
  2654 3859 A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  2655 385D A9 7A 95 B4			mva #$7A :STACKORIGIN+STACKWIDTH*2,x
  2656 3861 A9 43 95 C4			mva #$43 :STACKORIGIN+STACKWIDTH*3,x
  2657 3865 E8				inx
  2658 3866 AD BF 3D 95 94		mva FREQ :STACKORIGIN,x
  2659 386B AD C0 3D 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2660 3870 AD C1 3D 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2661 3875 AD C2 3D 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2662 387A 20 24 29			jsr @FDIV
  2663 387D CA				dex
  2664 387E B5 94			lda :STACKORIGIN,x
  2665 3880 8D C8 3D			sta RATIO
  2666 3883 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2667 3885 8D C9 3D			sta RATIO+1
  2668 3888 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  2669 388A 8D CA 3D			sta RATIO+2
  2670 388D B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  2671 388F 8D CB 3D			sta RATIO+3
  2672
  2673 				; optimize FAIL ('@F2I', MIDFILES), line = 437
  2674
  2675 3892 A9 01 95 94			mva #$01 :STACKORIGIN,x
  2676 3896 E8				inx
  2677 3897 AD C8 3D 95 94		mva RATIO :STACKORIGIN,x
  2678 389C AD C9 3D 95 A4		mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
  2679 38A1 AD CA 3D 95 B4		mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
  2680 38A6 AD CB 3D 95 C4		mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
  2681 38AB 20 B3 29			jsr @F2I
  2682 38AE A9 00 95 A3			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  2683 38B2 A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  2684 38B6 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  2685 38BA B5 93			lda :STACKORIGIN-1,x
  2686 38BC 18 75 94			add :STACKORIGIN,x
  2687 38BF 8D CC 3D			sta _RATIO
  2688 38C2 CA				dex
  2689 38C3 CA				dex
  2690
  2691 				; optimize OK (MIDFILES), line = 438
  2692
  2693 38C4 AD CC 3D			lda _RATIO
  2694 38C7 C9 10			cmp #$10
  2695 38C9 90 12			jcc l_06D2
  2696 38CB A9 00			lda #$00
  2697 38CD 8D C8 3D			sta RATIO
  2698 38D0 8D C9 3D			sta RATIO+1
  2699 38D3 A9 70			lda #$70
  2700 38D5 8D CA 3D			sta RATIO+2
  2701 38D8 A9 41			lda #$41
  2702 38DA 8D CB 3D			sta RATIO+3
  2703 38DD			l_06D2
  2704
  2705 				; optimize OK (MIDFILES), line = 441
  2706
  2707 38DD A5 F5			lda _TIMERSTATUS
  2708 38DF 29 F0			and #$F0
  2709 38E1 0D CC 3D			ora _RATIO
  2710 38E4 85 F5			sta _TIMERSTATUS
  2711
  2712 				; optimize FAIL ('@I2F', MIDFILES), line = 444
  2713
  2714 38E6 E8				inx
  2715 38E7 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2716 38EB A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  2717 38EF E8				inx
  2718 38F0 AD BF 3D 95 94		mva FREQ :STACKORIGIN,x
  2719 38F5 AD C0 3D 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  2720 38FA AD C1 3D 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  2721 38FF AD C2 3D 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  2722 3904 E8				inx
  2723 3905 AD CC 3D 95 94		mva _RATIO :STACKORIGIN,x
  2724 390A A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2725 390E A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  2726 3912 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  2727 3916 20 3D 2A			jsr @I2F
  2728 3919 20 6D 28			jsr @FMUL
  2729 391C CA				dex
  2730 391D A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  2731 3921 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  2732 3925 20 62 2A			jsr @I2F_m
  2733 3928 20 24 29			jsr @FDIV
  2734 392B CA				dex
  2735 392C 20 8D 26			jsr @FROUND
  2736 392F 20 B3 29			jsr @F2I
  2737 3932 B5 94			lda :STACKORIGIN,x
  2738 3934 8D C7 3D			sta FDIV
  2739
  2740 				; optimize FAIL ('divmulINT.DIV', MIDFILES), line = 447
  2741
  2742 3937 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2743 393B A9 87 95 A4			mva #$87 :STACKORIGIN+STACKWIDTH,x
  2744 393F A9 93 95 B4			mva #$93 :STACKORIGIN+STACKWIDTH*2,x
  2745 3943 A9 03 95 C4			mva #$03 :STACKORIGIN+STACKWIDTH*3,x
  2746 3947 E8				inx
  2747 3948 AD 6F 3D 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  2748 394D AD 70 3D 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  2749 3952 AD 71 3D 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  2750 3957 AD 72 3D 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  2751 395C 20 B1 24			jsr divmulINT.DIV
  2752 395F CA				dex
  2753 3960 B5 94			lda :STACKORIGIN,x
  2754 3962 8D 77 3D			sta BPM
  2755 3965 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2756 3967 8D 78 3D			sta BPM+1
  2757 396A CA				dex
  2758
  2759 				; optimize OK (MIDFILES), line = 449
  2760
  2761 396B 78				sei
  2762 396C A9 70 8D 10 02		mva <INT_PLAY VTIMR1
  2763 3971 A9 37 8D 11 02		mva >INT_PLAY VTIMR1+1
  2764 3976 A9 00			lda #$00
  2765 3978 A0 03			ldy #$03
  2766 397A 8D 08 D2			sta AUDCTL
  2767 397D 8D 01 D2			sta AUDC1
  2768 3980 8C 0F D2			sty SKCTL
  2769 3983 8D 08 D2			sta AUDCTL
  2770 3986 AD C7 3D 8D 00 D2		mva FDIV AUDF1
  2771 398C A5 10			lda irqens
  2772 398E 09 01			ora #$01
  2773 3990 85 10			sta irqens
  2774 3992 8D 0E D2			sta irqen
  2775 3995 8D 09 D2			sta stimer
  2776 3998 58				cli
  2777
  2778 				; ------------------------------------------------------------
  2779
  2780 = 3DBF			FREQ	= DATAORIGIN+$01A3
  2781 = 3DC3			_FREQ	= DATAORIGIN+$01A7
  2782 = 3DC7			FDIV	= DATAORIGIN+$01AB
  2783 = 3DC8			RATIO	= DATAORIGIN+$01AC
  2784 = 3DCC			_RATIO	= DATAORIGIN+$01B0
  2785
  2786 = 3DBF			@VarData	= FREQ
  2787 = 000E			@VarDataSize	= 14
  2788
  2789 3999			@exit
  2790 					.ifdef @new
  2791 					lda <@VarData
  2792 					sta :ztmp
  2793 					lda >@VarData
  2794 					ldy #@VarDataSize-1
  2795 					jmp @FreeMem
  2796 					els
  2797 3999 60				rts						; ret
  2798 					eif
  2799 				.endl
  2800
  2801 				; ------------------------------------------------------------
  2802 				; ------------------------------------------------------------
  2803 399A			@UnitInit
  2804
  2805 				; optimize OK (MIDFILES), line = 465
  2806
  2807 399A A9 00			lda #$00
  2808 399C 8D 79 3D			sta OLDTIMERVEC
  2809 399F 8D 7A 3D			sta OLDTIMERVEC+1
  2810
  2811 				; optimize OK (MIDFILES), line = 466
  2812
  2813 39A2 A9 80			lda #$80
  2814 39A4 8D 6D 3D			sta TICKDIV
  2815 39A7 A9 01			lda #$01
  2816 39A9 8D 6E 3D			sta TICKDIV+1
  2817
  2818 				; optimize OK (MIDFILES), line = 467
  2819
  2820 39AC A9 04			lda #$04
  2821 39AE 8D 73 3D			sta TACTNUM
  2822
  2823 				; optimize OK (MIDFILES), line = 468
  2824
  2825 39B1 8D 74 3D			sta TACTDENUM
  2826
  2827 				; optimize OK (MIDFILES), line = 469
  2828
  2829 39B4 A9 18			lda #$18
  2830 39B6 8D 75 3D			sta TICKS_PER_QNOTE
  2831
  2832 				; optimize OK (MIDFILES), line = 470
  2833
  2834 39B9 A9 08			lda #$08
  2835 39BB 8D 76 3D			sta TICKS_PER_32ND
  2836
  2837 				; optimize OK (MIDFILES), line = 471
  2838
  2839 39BE A9 20			lda #$20
  2840 39C0 8D 6F 3D			sta MS_PER_QNOTE
  2841 39C3 A9 A1			lda #$A1
  2842 39C5 8D 70 3D			sta MS_PER_QNOTE+1
  2843 39C8 A9 07			lda #$07
  2844 39CA 8D 71 3D			sta MS_PER_QNOTE+2
  2845 39CD A9 00			lda #$00
  2846 39CF 8D 72 3D			sta MS_PER_QNOTE+3
  2847
  2848 				; optimize OK (MIDFILES), line = 472
  2849
  2850 39D2 85 F5			sta _TIMERSTATUS
  2851
  2852 				; optimize FAIL (0, MIDFILES), line = 473
  2853
  2854 39D4 EE 6F 3D D0 0D EE + 	ind MS_PER_QNOTE
  2855
  2856 39E6 AD 10 02			lda VTIMR1
  2857 39E9 8D 79 3D			sta OLDTIMERVEC
  2858 39EC AD 11 02			lda VTIMR1+1
  2859 39EF 8D 7A 3D			sta OLDTIMERVEC+1
  2860
  2861 39F2 60				rts
  2862
  2863 				; ------------------------------------------------------------
  2864
  2865 = 0080			F_COUNTER	= $80
  2866 = 0040			F_TICK	= $40
  2867 = 0020			F_NOTE	= $20
  2868 = 0010			F_TEMPO	= $10
  2869 = 00F0			F_FLAGS	= $F0
  2870 = 000F			F_RATIO	= $0F
  2871 = 00E0			_TRKREGS	= $E0
  2872 = 3D64			MIDDATA	= DATAORIGIN+$0148
  2873 = 3D66			adr.MIDTRACKS	= [DATAORIGIN+$014A] .array [1]
  2874 39F3			.var MIDTRACKS	= adr.MIDTRACKS .word
  2875 = 3D67			FORMAT	= DATAORIGIN+$014B
  2876 = 3D69			NTRACKS	= DATAORIGIN+$014D
  2877 = 3D6B			FPS	= DATAORIGIN+$014F
  2878 = 3D6C			FSD	= DATAORIGIN+$0150
  2879 = 3D6D			TICKDIV	= DATAORIGIN+$0151
  2880 = 3D6F			MS_PER_QNOTE	= DATAORIGIN+$0153
  2881 = 3D73			TACTNUM	= DATAORIGIN+$0157
  2882 = 3D74			TACTDENUM	= DATAORIGIN+$0158
  2883 = 3D75			TICKS_PER_QNOTE	= DATAORIGIN+$0159
  2884 = 3D76			TICKS_PER_32ND	= DATAORIGIN+$015A
  2885 = 3D77			BPM	= DATAORIGIN+$015B
  2886 = 3D79			OLDTIMERVEC	= DATAORIGIN+$015D
  2887 = 00F0			_TOTALTICKS	= $F0
  2888 = 00F4			_SUBCNT	= $F4
  2889 = 00F5			_TIMERSTATUS	= $F5
  2890 = 00F6			_DELTA	= $F6
  2891 = 00F6			_TMP	= $F6
  2892 = 00E0			_PTR	= $E0
  2893 = 00E0			_ADR	= $E0
  2894 = 00E2			_TRACKTIME	= $E2
  2895 = 00E6			_SKIPDELTA	= $E6
  2896 = 00E7			_EVENT	= $E7
  2897 = 6468544D		TAG_MTHD	= $6468544D
  2898 = 6B72544D		TAG_MTRK	= $6B72544D
  2899 = 3D7B			adr.BI	= [DATAORIGIN+$015F] .array [4]
  2900 39F3			.var BI	= adr.BI .word
  2901 = 0600			adr.RBUF	= $0600
  2902 39F3			.var RBUF	= adr.RBUF .word
  2903
  2904 = 39F3 66 3D		MIDTRACKS
  2904 = 39F5 7B 3D		BI
  2904 = 39F7 00 06		RBUF
  2904 				.endl							; UNIT MIDFILES
  2905
  2906 39F9			.local	RESET_MIDI					; PROCEDURE
  2907
  2908 				; optimize OK (MIDICar Player.pas), line = 25
  2909
  2910 39F9 AD 19 3C			lda GM_RESET
  2911 39FC 8D 5F 3D			sta MIDI_FIFO.FIFO_SEND.DATA
  2912 39FF AD 1A 3C			lda GM_RESET+1
  2913 3A02 8D 60 3D			sta MIDI_FIFO.FIFO_SEND.DATA+1
  2914 3A05 A9 06			lda #$06
  2915 3A07 8D 61 3D			sta MIDI_FIFO.FIFO_SEND.LEN
  2916 3A0A 20 FA 2D			jsr MIDI_FIFO.FIFO_SEND
  2917 3A0D 20 3E 2E			jsr MIDI_FIFO.FIFO_FLUSH
  2918 3A10			@exit
  2919 					.ifdef @new
  2920 					lda <@VarData
  2921 					sta :ztmp
  2922 					lda >@VarData
  2923 					ldy #@VarDataSize-1
  2924 					jmp @FreeMem
  2925 					els
  2926 3A10 60				rts						; ret
  2927 					eif
  2928 				.endl
  2929 3A11			l_0062
  2930
  2931 				; optimize FAIL ('@print', MIDICar Player.pas), line = 33
  2932
  2933 					@printSTRING #CODEORIGIN+$0034
  2933 				 LDY> CODEORIGIN+$0034\ LDA< CODEORIGIN+$0034\ JSR @PRINTSTRING
  2933 3A11 A0 20		 LDY> CODEORIGIN+$0034
  2933 3A13 A9 34		 LDA< CODEORIGIN+$0034
  2933 3A15 20 98 2A		 JSR @PRINTSTRING
  2934 3A18 20 84 2A			@printEOL
  2935
  2936 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', MIDICar Player.pas), line = 34
  2937
  2938 3A1B 20 D0 2D			jsr MIDI_FIFO.FIFO_RESET
  2939
  2940 				; optimize OK (MIDICar Player.pas), line = 39
  2941
  2942 3A1E A9 00			lda #$00
  2943 3A20 8D F3 39			sta MIDFILES.MIDTRACKS
  2944 3A23 A9 40			lda #$40
  2945 3A25 8D F4 39			sta MIDFILES.MIDTRACKS+1
  2946
  2947 				; optimize OK (MIDICar Player.pas), line = 40
  2948
  2949 3A28 A9 00			lda #$00
  2950 3A2A 8D 64 3D			sta MIDFILES.MIDDATA
  2951 3A2D A9 41			lda #$41
  2952 3A2F 8D 65 3D			sta MIDFILES.MIDDATA+1
  2953
  2954 				; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 42
  2955
  2956 3A32 20 8E 2D			jsr SYSTEM.PARAMCOUNT
  2957 3A35 AD 3A 3D			lda SYSTEM.PARAMCOUNT.RESULT
  2958 3A38 C9 01			cmp #$01
  2959 3A3A D0 14			jne l_0753
  2960 				@
  2961
  2962 				; optimize OK (MIDICar Player.pas), line = 43
  2963
  2964 3A3C A9 01			lda #$01
  2965 3A3E 20 97 2D			jsr SYSTEM.PARAMSTR
  2966 3A41 AD AC 2D			lda SYSTEM.PARAMSTR.RESULT
  2967 3A44 8D CD 3D			sta FN
  2968 3A47 AD AD 2D			lda SYSTEM.PARAMSTR.RESULT+1
  2969 3A4A 8D CE 3D			sta FN+1
  2970 3A4D 4C 5A 3A			jmp l_0762
  2971 3A50			l_0753
  2972
  2973 				; optimize OK (MIDICar Player.pas), line = 48
  2974
  2975 3A50 A9 3E			lda #$3E
  2976 3A52 8D CD 3D			sta FN
  2977 3A55 A9 20			lda #$20
  2978 3A57 8D CE 3D			sta FN+1
  2979 3A5A			l_0762
  2980
  2981 				; optimize OK (MIDICar Player.pas), line = 51
  2982
  2983 3A5A AD CD 3D			lda FN
  2984 3A5D 8D 8E 3D			sta MIDFILES.LOADMID.FN
  2985 3A60 AD CE 3D			lda FN+1
  2986 3A63 8D 8F 3D			sta MIDFILES.LOADMID.FN+1
  2987 3A66 20 FA 2E			jsr MIDFILES.LOADMID
  2988 3A69 AD 90 3D			lda MIDFILES.LOADMID.RESULT
  2989 3A6C D0 05			jne l_0775
  2990 3A6E A9 01			lda #$01
  2991 3A70 4C 00 3C			jmp @halt
  2992 3A73			l_0775
  2993
  2994 				; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 56
  2995
  2996 3A73 20 B2 2D			jsr MC6850.MC6850_RESET
  2997
  2998 				; optimize OK (MIDICar Player.pas), line = 57
  2999
  3000 3A76 A9 96			lda #$96
  3001 3A78 20 B8 2D			jsr MC6850.MC6850_INIT
  3002
  3003 				; optimize FAIL ('@print', MIDICar Player.pas), line = 62
  3004
  3005 					@printSTRING #CODEORIGIN+$004F
  3005 				 LDY> CODEORIGIN+$004F\ LDA< CODEORIGIN+$004F\ JSR @PRINTSTRING
  3005 3A7B A0 20		 LDY> CODEORIGIN+$004F
  3005 3A7D A9 4F		 LDA< CODEORIGIN+$004F
  3005 3A7F 20 98 2A		 JSR @PRINTSTRING
  3006
  3007 				; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 64
  3008
  3009 3A82 20 F9 39			jsr RESET_MIDI
  3010
  3011 				; optimize OK (MIDICar Player.pas), line = 65
  3012
  3013 3A85 A9 00			lda #$00
  3014 3A87 85 F0			sta MIDFILES._TOTALTICKS
  3015 3A89 85 F1			sta MIDFILES._TOTALTICKS+1
  3016 3A8B 85 F2			sta MIDFILES._TOTALTICKS+2
  3017 3A8D 85 F3			sta MIDFILES._TOTALTICKS+3
  3018
  3019 				; optimize FAIL ('MIDFILES.SETTEMPO', MIDICar Player.pas), line = 67
  3020
  3021 3A8F 20 98 37			jsr MIDFILES.SETTEMPO
  3022
  3023 				; optimize OK (MIDICar Player.pas), line = 71
  3024
  3025 3A92 AD 69 3D			lda MIDFILES.NTRACKS
  3026 3A95 8D D8 3D			sta CTRK
  3027
  3028 				; --- RepeatUntilProlog
  3029 3A98			l_078C
  3030
  3031 				; optimize OK (MIDICar Player.pas), line = 74
  3032
  3033 3A98 A9 00			lda #$00
  3034 3A9A CD 6A 3D			cmp MIDFILES.NTRACKS+1
  3035 3A9D D0 06			bne @+
  3036 3A9F AD D8 3D			lda CTRK
  3037 3AA2 CD 69 3D			cmp MIDFILES.NTRACKS
  3038 				@
  3039 3AA5 D0 13			jne l_079F
  3040
  3041 				; optimize OK (MIDICar Player.pas), line = 76
  3042
  3043 3AA7 A9 00			lda #$00
  3044 3AA9 8D D1 3D			sta CURTRACKOFS
  3045 3AAC A9 01			lda #$01
  3046 3AAE 8D D8 3D			sta CTRK
  3047
  3048 				; optimize OK (MIDICar Player.pas), line = 77
  3049
  3050 3AB1 AD 69 3D			lda MIDFILES.NTRACKS
  3051 3AB4 8D D9 3D			sta PLAYINGTRACKS
  3052 3AB7 4C C6 3A			jmp l_07B6
  3053 3ABA			l_079F
  3054
  3055 				; optimize OK (MIDICar Player.pas), line = 81
  3056
  3057 3ABA AD D1 3D			lda CURTRACKOFS
  3058 3ABD 18 69 08			add #$08
  3059 3AC0 8D D1 3D			sta CURTRACKOFS
  3060
  3061 				; optimize FAIL (0, MIDICar Player.pas), line = 82
  3062
  3063 3AC3 EE D8 3D			inc CTRK
  3064 3AC6			l_07B6
  3065
  3066 				; optimize OK (MIDICar Player.pas), line = 85
  3067
  3068 3AC6 AD F3 39			lda MIDFILES.MIDTRACKS
  3069 3AC9 18 6D D1 3D			add CURTRACKOFS
  3070 3ACD 85 82			sta :bp2
  3071 3ACF AD F4 39			lda MIDFILES.MIDTRACKS+1
  3072 3AD2 69 00			adc #$00
  3073 3AD4 85 83			sta :bp2+1
  3074 3AD6 A0 07			ldy #$07
  3075 3AD8 B1 82 99 E0 00 88 + 	mva:rpl (:bp2),y $00E0,y-
  3076
  3077 				; optimize OK (MIDICar Player.pas), line = 87
  3078
  3079 3AE0 A5 E5			lda MIDFILES._TRACKTIME+3
  3080 3AE2 10 03 4C A0 3B		jmi l_07D1
  3081
  3082 				; optimize OK (MIDICar Player.pas), line = 89
  3083
  3084 3AE7				.LOCAL
  3085 3AE7 A5 F3			lda MIDFILES._TOTALTICKS+3
  3086 3AE9 38 E5 E5			sub MIDFILES._TRACKTIME+3
  3087 3AEC D0 1C			bne L4
  3088 3AEE A5 F2			lda MIDFILES._TOTALTICKS+2
  3089 3AF0 C5 E4			cmp MIDFILES._TRACKTIME+2
  3090 3AF2 D0 0A			bne L1
  3091 3AF4 A5 F1			lda MIDFILES._TOTALTICKS+1
  3092 3AF6 C5 E3			cmp MIDFILES._TRACKTIME+1
  3093 3AF8 D0 04			bne L1
  3094 3AFA A5 F0			lda MIDFILES._TOTALTICKS
  3095 3AFC C5 E2			cmp MIDFILES._TRACKTIME
  3096 3AFE F0 10		L1	beq L5
  3097 3B00 B0 04			bcs L3
  3098 3B02 A9 FF			lda #$FF
  3099 3B04 D0 0A			bne L5
  3100 3B06 A9 01		L3	lda #$01
  3101 3B08 D0 06			bne L5
  3102 3B0A 50 04		L4	bvc L5
  3103 3B0C 49 FF			eor #$FF
  3104 3B0E 09 01			ora #$01
  3105 3B10			L5
  3106 					.ENDL
  3107 3B10 10 03 4C 9D 3B		jmi l_07E2
  3108
  3109 				; optimize OK (MIDICar Player.pas), line = 91
  3110
  3111 3B15 A5 F5			lda MIDFILES._TIMERSTATUS
  3112 3B17 09 80			ora #$80
  3113 3B19 85 F5			sta MIDFILES._TIMERSTATUS
  3114
  3115 				; optimize OK (MIDICar Player.pas), line = 93
  3116
  3117 3B1B A5 F0			lda MIDFILES._TOTALTICKS
  3118 3B1D 38 E5 E2			sub MIDFILES._TRACKTIME
  3119 3B20 8D D6 3D			sta DTM
  3120 3B23 A5 F1			lda MIDFILES._TOTALTICKS+1
  3121 3B25 E5 E3			sbc MIDFILES._TRACKTIME+1
  3122 3B27 8D D7 3D			sta DTM+1
  3123
  3124 				; optimize FAIL ('MIDFILES.PROCESSTRACK', MIDICar Player.pas), line = 94
  3125
  3126 3B2A 20 FA 33			jsr MIDFILES.PROCESSTRACK
  3127 3B2D AD B7 3D			lda MIDFILES.PROCESSTRACK.RESULT
  3128 3B30 8D D2 3D			sta DELTATIME
  3129 3B33 AD B8 3D			lda MIDFILES.PROCESSTRACK.RESULT+1
  3130 3B36 8D D3 3D			sta DELTATIME+1
  3131 3B39 AD B9 3D			lda MIDFILES.PROCESSTRACK.RESULT+2
  3132 3B3C 8D D4 3D			sta DELTATIME+2
  3133 3B3F AD BA 3D			lda MIDFILES.PROCESSTRACK.RESULT+3
  3134 3B42 8D D5 3D			sta DELTATIME+3
  3135
  3136 				; optimize OK (MIDICar Player.pas), line = 95
  3137
  3138 3B45 30 46			jmi l_0809
  3139 3B47 0D D4 3D			ora DELTATIME+2
  3140 3B4A 0D D3 3D			ora DELTATIME+1
  3141 3B4D 0D D2 3D			ora DELTATIME
  3142 3B50 F0 3B			jeq l_0809
  3143
  3144 				; optimize OK (MIDICar Player.pas), line = 96
  3145
  3146 3B52 A5 F0			lda MIDFILES._TOTALTICKS
  3147 3B54 18 6D D2 3D			add DELTATIME
  3148 3B58 85 9D			sta :STACKORIGIN+9
  3149 3B5A A5 F1			lda MIDFILES._TOTALTICKS+1
  3150 3B5C 6D D3 3D			adc DELTATIME+1
  3151 3B5F 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3152 3B61 A5 F2			lda MIDFILES._TOTALTICKS+2
  3153 3B63 6D D4 3D			adc DELTATIME+2
  3154 3B66 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
  3155 3B68 A5 F3			lda MIDFILES._TOTALTICKS+3
  3156 3B6A 6D D5 3D			adc DELTATIME+3
  3157 3B6D 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
  3158 3B6F A5 9D			lda :STACKORIGIN+9
  3159 3B71 38 ED D6 3D			sub DTM
  3160 3B75 85 E2			sta MIDFILES._TRACKTIME
  3161 3B77 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  3162 3B79 ED D7 3D			sbc DTM+1
  3163 3B7C 85 E3			sta MIDFILES._TRACKTIME+1
  3164 3B7E A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
  3165 3B80 E9 00			sbc #$00
  3166 3B82 85 E4			sta MIDFILES._TRACKTIME+2
  3167 3B84 A5 CD			lda :STACKORIGIN+STACKWIDTH*3+9
  3168 3B86 E9 00			sbc #$00
  3169 3B88 85 E5			sta MIDFILES._TRACKTIME+3
  3170 3B8A 4C 97 3B			jmp l_0820
  3171 3B8D			l_0809
  3172
  3173 				; optimize OK (MIDICar Player.pas), line = 98
  3174
  3175 3B8D A9 FF			lda #$FF
  3176 3B8F 85 E2			sta MIDFILES._TRACKTIME
  3177 3B91 85 E3			sta MIDFILES._TRACKTIME+1
  3178 3B93 85 E4			sta MIDFILES._TRACKTIME+2
  3179 3B95 85 E5			sta MIDFILES._TRACKTIME+3
  3180 3B97			l_0820
  3181
  3182 				; optimize OK (MIDICar Player.pas), line = 100
  3183
  3184 3B97 A5 F5			lda MIDFILES._TIMERSTATUS
  3185 3B99 29 7F			and #$7F
  3186 3B9B 85 F5			sta MIDFILES._TIMERSTATUS
  3187 3B9D			l_07E2
  3188 3B9D 4C A3 3B			jmp l_0839
  3189 3BA0			l_07D1
  3190
  3191 				; optimize FAIL (0, MIDICar Player.pas), line = 104
  3192
  3193 3BA0 CE D9 3D			dec PLAYINGTRACKS
  3194 3BA3			l_0839
  3195
  3196 				; optimize OK (MIDICar Player.pas), line = 105
  3197
  3198 3BA3 AD F3 39			lda MIDFILES.MIDTRACKS
  3199 3BA6 18 6D D1 3D			add CURTRACKOFS
  3200 3BAA 85 82			sta :bp2
  3201 3BAC AD F4 39			lda MIDFILES.MIDTRACKS+1
  3202 3BAF 69 00			adc #$00
  3203 3BB1 85 83			sta :bp2+1
  3204 3BB3 A0 07			ldy #$07
  3205 3BB5 B9 E0 00 91 82 88 + 	mva:rpl $00E0,y (:bp2),y-
  3206
  3207 				; optimize OK (MIDICar Player.pas), line = 108
  3208
  3209 3BBD AD 00 D5			lda MC6850.MC6850_CNTRREG
  3210 3BC0 29 02			and #$02
  3211 3BC2 F0 0E			jeq l_0859
  3212
  3213 				; optimize OK (MIDICar Player.pas), line = 109
  3214
  3215 3BC4 A5 FE			lda MIDI_FIFO.FIFO_TAIL
  3216 3BC6 C5 FD			cmp MIDI_FIFO.FIFO_HEAD
  3217 3BC8 F0 08			jeq l_086E
  3218
  3219 				; optimize FAIL ('MIDI_FIFO.FIFO_READBYTE', MIDICar Player.pas), line = 112
  3220
  3221 3BCA 20 EC 2D			jsr MIDI_FIFO.FIFO_READBYTE
  3222
  3223 				; optimize OK (MIDICar Player.pas), line = 113
  3224
  3225 3BCD A5 FF			lda MIDI_FIFO.FIFO_BYTE
  3226 3BCF 8D 01 D5			sta MC6850.MC6850_BUFFER
  3227 3BD2			l_086E
  3228 3BD2			l_0859
  3229
  3230 				; optimize OK (MIDICar Player.pas), line = 118
  3231
  3232 3BD2 AD D9 3D			lda PLAYINGTRACKS
  3233 3BD5 F0 0A			jeq l_078Cx
  3234 3BD7 AD FC 02			lda $02FC
  3235 3BDA C9 FF			cmp #$FF
  3236 3BDC D0 03 4C 98 3A		jeq l_078C
  3237 3BE1			l_078Cx
  3238
  3239 				; optimize FAIL ('@print', MIDICar Player.pas), line = 120
  3240
  3241 					@print #$9C
  3241 				 LDY# $9C\ JSR @PRINT
  3241 3BE1 A0 9C		 LDY# $9C
  3241 3BE3 20 89 2A		 JSR @PRINT
  3242
  3243 				; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 127
  3244
  3245 3BE6 20 F9 39			jsr RESET_MIDI
  3246
  3247 				; optimize OK (MIDICar Player.pas), line = 133
  3248
  3249 3BE9 78				sei
  3250 3BEA AD 79 3D 8D 10 02		mva MIDFILES.OLDTIMERVEC VTIMR1
  3251 3BF0 AD 7A 3D 8D 11 02		mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
  3252 3BF6 A5 10			lda irqens
  3253 3BF8 29 FE			and #$fe
  3254 3BFA 85 10			sta irqens
  3255 3BFC 8D 0E D2			sta irqen
  3256 3BFF 58				cli
  3257
  3258 				; ------------------------------------------------------------
  3259
  3260 = 205B			adr.GM_RESET	= CODEORIGIN+$005B
  3261 3C00			.var GM_RESET	= adr.GM_RESET .word
  3262 = 3DCD			FN	= DATAORIGIN+$01B1
  3263 = 3DCF			TRKPTR	= DATAORIGIN+$01B3
  3264 = 3C1C			TRKPTR.PTR	= DATAORIGIN+$0000
  3265 = 3C1E			TRKPTR.TRACKTIME	= DATAORIGIN+$0002
  3266 = 3C22			TRKPTR.SKIPDELTA	= DATAORIGIN+$0006
  3267 = 3C23			TRKPTR._EVENT	= DATAORIGIN+$0007
  3268 = 3DD1			CURTRACKOFS	= DATAORIGIN+$01B5
  3269 = 3DD2			DELTATIME	= DATAORIGIN+$01B6
  3270 = 3DD6			DTM	= DATAORIGIN+$01BA
  3271 = 3DD8			CTRK	= DATAORIGIN+$01BC
  3272 = 3DD9			PLAYINGTRACKS	= DATAORIGIN+$01BD
  3273 3C00			@exit
  3274
  3275 3C00 A2 00		@halt	ldx #$00
  3276 3C02 9A				txs
  3277 					.ifdef MAIN.@DEFINES.ROMOFF
  3278 3C03 EE 01 D3			inc portb
  3279 					.fi
  3280
  3281 3C06 A0 01			ldy #$01
  3282
  3283 3C08 60				rts
  3284
  3285 				; ------------------------------------------------------------
  3286
  3287 3C09 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  3288
  3289 				; ------------------------------------------------------------
  3290
  3291 3C19			.local	@DEFINES
  3292 3C19			ATARI
  3293 3C19			USE_FIFO
  3294 3C19			ROMOFF
  3295 				.endl
  3296
  3297 3C19			.local	@RESOURCE
  3298 				.endl
  3299
  3300 = 3C19 5B 20		GM_RESET
  3300 				.endl							; MAIN
  3301
  3302 				; ------------------------------------------------------------
  3303 				; ------------------------------------------------------------
  3304
  3305 				.macro	UNITINITIALIZATION
  3306 				
  3307 					.ifdef MAIN.SYSTEM.@UnitInit
  3308 					jsr MAIN.SYSTEM.@UnitInit
  3309 					.fi
  3310 				
  3311 					.ifdef MAIN.MC6850.@UnitInit
  3312 					jsr MAIN.MC6850.@UnitInit
  3313 					.fi
  3314 				
  3315 					.ifdef MAIN.DOS.@UnitInit
  3316 					jsr MAIN.DOS.@UnitInit
  3317 					.fi
  3318 				
  3319 					.ifdef MAIN.STRUTILS.@UnitInit
  3320 					jsr MAIN.STRUTILS.@UnitInit
  3321 					.fi
  3322 				
  3323 					.ifdef MAIN.SYSUTILS.@UnitInit
  3324 					jsr MAIN.SYSUTILS.@UnitInit
  3325 					.fi
  3326 				
  3327 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  3328 					jsr MAIN.MIDI_FIFO.@UnitInit
  3329 					.fi
  3330 				
  3331 					.ifdef MAIN.MIDFILES.@UnitInit
  3332 					jsr MAIN.MIDFILES.@UnitInit
  3333 					.fi
  3334 				.endm
  3335
  3336 				; ------------------------------------------------------------
  3337
  3338 					ift .SIZEOF(MAIN.SYSTEM) > 0
  3339 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  3339 				SYSTEM: $2C12..$2DB1
  3340 					eif
  3341
  3342 					ift .SIZEOF(MAIN.MC6850) > 0
  3343 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  3343 				MC6850: $2DB2..$2DCF
  3344 					eif
  3345
  3346 					ift .SIZEOF(MAIN.DOS) > 0
  3347 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  3348 					eif
  3349
  3350 					ift .SIZEOF(MAIN.STRUTILS) > 0
  3351 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  3352 					eif
  3353
  3354 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  3355 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  3356 					eif
  3357
  3358 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  3359 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  3359 				MIDI_FIFO: $2DD0..$2E5D
  3360 					eif
  3361
  3362 					ift .SIZEOF(MAIN.MIDFILES) > 0
  3363 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  3363 				MIDFILES: $2E5E..$39F8
  3364 					eif
  3365
  3366 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  3366 				CODE: $2000..$3C18
  3367
  3368 				; ------------------------------------------------------------
  3369
  3370 3C1B				.align $0004
  3371
  3372 3C1C			DATAORIGIN
  3373 3C1C-3C21> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  3374
  3375 = 0006			VARINITSIZE	= *-DATAORIGIN
  3376 = 01BE			VARDATASIZE	= 446
  3377
  3378 = 3DDA			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  3379
  3380 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  3380 				DATA: $3C1C..$3DDA
  3381
  3382 02E0-02E1> 6B 2B			run START
  3383
  3384 				; ------------------------------------------------------------
  3385
  3386 				.macro	STATICDATA
  3387 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $0A $4F $70  $65 $6E $20 $66 $69 $6C $65 $20
  3388 				.by  $00 $0B $49 $2F $4F $20 $45 $72  $72 $6F $72 $20 $23 $00 $07 $54  $72 $61 $63 $6B $3A $20 $00 $03
  3389 				.by  $2E $2E $2E $00 $08 $46 $49 $46  $4F $3A $20 $4F $6E $00 $0F $44  $32 $3A $53 $45 $4C $46 $54 $45
  3390 				.by  $53 $54 $2E $4D $49 $44 $00 $0A  $50 $6C $61 $79 $69 $6E $67 $2E  $2E $2E $00 $F0 $7E $7F $09 $01
  3391 				.by  $F7
  3392 				.endm
  3393
  3394 					end
