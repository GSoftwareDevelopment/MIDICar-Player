mads 2.1.5
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/03/17] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 2000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 FFFF> 2000-31A0> 04 54 + .by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $0A $4F $70  $65 $6E $20 $66 $69 $6C $65 $20
     2 2018 00 0B 49 2F 4F 20 + .by  $00 $0B $49 $2F $4F $20 $45 $72  $72 $6F $72 $20 $23 $00 $04 $4D  $54 $68 $64 $00 $04 $4D $54 $72
     3 2030 6B 00 0F 44 32 3A + .by  $6B $00 $0F $44 $32 $3A $4F $56  $45 $52 $57 $4F $52 $4C $2E $4D  $49 $44 $00
Source: MIDICar Player.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 2043			RTLIB
   113 2043				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D3
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $2043..$260E
   118
   119 				; ------------------------------------------------------------
   120
   121 260F			START
   122 260F BA				tsx
   123 2610 8E 8A 31			stx MAIN.@halt+1
   124
   125 					.ifdef fmulinit
   126 					fmulinit
   127 					.fi
   128
   129 = 03B7			VLEN	= VARDATASIZE-VARINITSIZE
   130 = 31AA			VADR	= DATAORIGIN+VARINITSIZE
   131
   132 					ift VADR > $BFFF
   133 					ert 'Invalid memory address range ',VADR
   134 					eli (VLEN>0) && (VLEN<=256)
   135 					ldx #256-VLEN
   136 					lda #$00
   137 					sta:rne VADR+VLEN-256,x+
   138 					eli VLEN>256
   139 					@fill #VADR #VLEN #$00
   139 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   139 2613 A9 AA 85 88 A9 31 +  MWA #VADR @FILL.PTR1
   139 261B A9 B7 85 8C A9 03 +  MWA #VLEN @FILL.PTR3
   139 2623 A9 00 85 84		 MVA #$00 @FILL.PTR2
   139 2627 20 FC 23		 JSR @FILL
   140 					eif
   141
   142 				.ifdef :psptr
   143 					mwa #PROGRAMSTACK :psptr
   144 				.fi
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 					icl 'atari\romoff.asm'
   148 					.fi
   149
   150 262A A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 262C BD 40 03 9D 8F 31 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 2635 E8				inx						; X = 0
   154 2636 86 80			stx bp						; BP = 0
   155
   156 2638 8E 0F D2			stx skctl					; reset POKEY
   157 263B A9 03			lda #3
   158 263D 8D 0F D2			sta skctl
   159
   160 2640 CA				dex						; X = 255
   161
   162 2641				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
Source: MIDICar Player.a65
   163
   164 2641			.local	MAIN						; PROCEDURE
   165
   166 2641 4C F2 2F			jmp l_004A
   167
   168 				; ------------------------------------------------------------
   169
   170 2644			.local	SYSTEM						; UNIT
   171
   172 2644			.local	FILEPOS						; FUNCTION | ASSEMBLER
   173
   174 				; -------------------  ASM Block 00000011  -------------------
   175
   176 2644 8A 48			txa:pha
   177
   178 2646 AD AF 31 85 82 AD + 	mwa f :bp2
   179
   180 2650 A0 04			ldy #s@file.chanel
   181 2652 B1 82			lda (:bp2),y
   182 2654 AA				tax
   183 2655 A9 26			lda #38
   184 2657 9D 42 03			sta iccmd,x
   185
   186 265A				m@call	ciov
Macro: M@CALL [Source: macros.asm]
    12 265A 20 56 E4				jsr CIOV
Source: MIDICar Player.a65
   187
   188 265D 8C AB 31			sty IOResult
   189
   190 2660 BD 4C 03 85 84		mva icax3,x :eax
   191 2665 BD 4D 03 85 85		mva icax4,x :eax+1
   192 266A BD 4E 03 85 86		mva icax5,x :eax+2
   193
   194 266F A9 00 85 87			mva #$00 :eax+3
   195 2673 85 8E			sta :ecx+2
   196 2675 85 8F			sta :ecx+3
   197
   198 2677 A0 02			ldy #s@file.record
   199 2679 B1 82			lda (:bp2),y
   200 267B 85 8C			sta :ecx
   201 267D C8				iny
   202 267E B1 82			lda (:bp2),y
   203 2680 85 8D			sta :ecx+1
   204
   205 2682 20 FD 24			jsr idivEAX_ECX.main
   206
   207 2685 A5 84 8D B1 31		mva :eax Result
   208 268A A5 85 8D B2 31		mva :eax+1 Result+1
   209 268F A5 86 8D B3 31		mva :eax+2 Result+2
   210 2694 A5 87 8D B4 31		mva :eax+3 Result+3
   211
   212 2699 68 AA			pla:tax
   213
   214 269B			@exit
   215
   216 				; ------------------------------------------------------------
   217
   218 = 31AF			F	= DATAORIGIN+$000B
   219 = 31B1			RESULT	= DATAORIGIN+$000D
   220
   221 = 31AF			@VarData	= F
   222 = 0002			@VarDataSize	= 2
   223
   224 269B 60				rts						; ret
   225 				.endl
   226
   227 269C			.local	SEEK						; PROCEDURE | ASSEMBLER
   228
   229 				; -------------------  ASM Block 00000012  -------------------
   230
   231 269C 8A 48			txa:pha
   232
   233 269E AD B5 31 85 82 AD + 	mwa f :bp2
   234
   235 26A8 A0 04			ldy #s@file.chanel
   236 26AA B1 82			lda (:bp2),y
   237 26AC AA				tax
   238 26AD A9 25			lda #37
   239 26AF 9D 42 03			sta iccmd,x
   240
   241 26B2 A0 02			ldy #s@file.record
   242 26B4 B1 82			lda (:bp2),y
   243 26B6 85 84			sta :eax
   244 26B8 C8				iny
   245 26B9 B1 82			lda (:bp2),y
   246 26BB 85 85			sta :eax+1
   247 26BD A9 00			lda #$00
   248 26BF 85 86			sta :eax+2
   249 26C1 85 87			sta :eax+3
   250
   251 26C3 AD B7 31 85 8C		mva a :ecx
   252 26C8 AD B8 31 85 8D		mva a+1 :ecx+1
   253 26CD AD B9 31 85 8E		mva a+2 :ecx+2
   254 26D2 AD BA 31 85 8F		mva a+3 :ecx+3
   255
   256 26D7 20 B7 24			jsr imulECX
   257
   258 26DA A5 84 9D 4C 03		mva :eax icax3,x
   259 26DF A5 85 9D 4D 03		mva :eax+1 icax4,x
   260 26E4 A5 86 9D 4E 03		mva :eax+2 icax5,x
   261
   262 26E9				m@call	ciov
Macro: M@CALL [Source: macros.asm]
    12 26E9 20 56 E4				jsr CIOV
Source: MIDICar Player.a65
   263
   264 26EC 8C AB 31			sty IOResult
   265
   266 26EF 68 AA			pla:tax
   267
   268 				; ------------------------------------------------------------
   269
   270 = 31B5			F	= DATAORIGIN+$0011
   271 = 31B7			A	= DATAORIGIN+$0013
   272
   273 = 31B5			@VarData	= F
   274 = 0006			@VarDataSize	= 6
   275
   276 26F1			@exit
   277 					.ifdef @new
   278 					lda <@VarData
   279 					sta :ztmp
   280 					lda >@VarData
   281 					ldy #@VarDataSize-1
   282 					jmp @FreeMem
   283 					els
   284 26F1 60				rts						; ret
   285 					eif
   286 				.endl
   287
   288 26F2			.local	EOF						; FUNCTION
   289
   290 				; optimize OK (SYSTEM), line = 1151
   291
   292 26F2 AD BB 31			lda F
   293 26F5 8D AF 31			sta FILEPOS.F
   294 26F8 AD BC 31			lda F+1
   295 26FB 8D B0 31			sta FILEPOS.F+1
   296 26FE 20 44 26			jsr FILEPOS
   297 2701 AD B1 31			lda FILEPOS.RESULT
   298 2704 8D BE 31			sta I
   299 2707 AD B2 31			lda FILEPOS.RESULT+1
   300 270A 8D BF 31			sta I+1
   301 270D AD B3 31			lda FILEPOS.RESULT+2
   302 2710 8D C0 31			sta I+2
   303 2713 AD B4 31			lda FILEPOS.RESULT+3
   304 2716 8D C1 31			sta I+3
   305 				; BlockRead
   306
   307 				; optimize OK (SYSTEM), line = 1153
   308
   309 2719 AC BB 31 84 82 AC + 	mwy F :bp2
   310 2723 A0 06			ldy #s@file.buffer
   311 2725 AD 86 27			lda BF
   312 2728 91 82			sta (:bp2),y
   313 272A C8				iny
   314 272B AD 87 27			lda BF+1
   315 272E 91 82			sta (:bp2),y
   316 2730 A0 08			ldy #s@file.nrecord
   317 2732 A9 01			lda #$01
   318 2734 91 82			sta (:bp2),y
   319 2736 C8				iny
   320 2737 A9 00			lda #$00
   321 2739 91 82			sta (:bp2),y
   322
   323 273B 8A 48			txa:pha
   324 273D 38				sec
   325 					@readfile F, #7
   325 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
   325 273E AC BC 31		 LDY F+1
   325 2741 AD BB 31		 LDA F
   325 2744 A2 07		 LDX# 7
   325 2746 20 06 21		 JSR @READFILE
   326 2749 68 AA			pla:tax
   327
   328 				; optimize OK (SYSTEM), line = 1155
   329
   330 274B AD BB 31			lda F
   331 274E 8D B5 31			sta SEEK.F
   332 2751 AD BC 31			lda F+1
   333 2754 8D B6 31			sta SEEK.F+1
   334 2757 AD BE 31			lda I
   335 275A 8D B7 31			sta SEEK.A
   336 275D AD BF 31			lda I+1
   337 2760 8D B8 31			sta SEEK.A+1
   338 2763 AD C0 31			lda I+2
   339 2766 8D B9 31			sta SEEK.A+2
   340 2769 AD C1 31			lda I+3
   341 276C 8D BA 31			sta SEEK.A+3
   342 276F 20 9C 26			jsr SEEK
   343
   344 				; -------------------  ASM Block 00000013  -------------------
   345
   346 2772 AD BB 31 85 82 AD + 	mwa f :bp2
   347
   348 277C A0 05			ldy #s@file.status
   349 277E B1 82			lda (:bp2),y
   350 2780 29 01			and #e@file.eof
   351 2782 8D BD 31			sta Result
   352
   353 2785			@exit
   354
   355 				; ------------------------------------------------------------
   356
   357 = 31BB			F	= DATAORIGIN+$0017
   358 = 31BD			RESULT	= DATAORIGIN+$0019
   359 = 31BE			I	= DATAORIGIN+$001A
   360 = 31C2			adr.BF	= [DATAORIGIN+$001E] .array [256]
   361 2785			.var BF	= adr.BF .word
   362
   363 = 31BB			@VarData	= F
   364 = 0106			@VarDataSize	= 262
   365
   366 2785 60				rts						; ret
   367 = 2786 C2 31		BF
   367 				.endl
   368
   369 2788			.local	FILLCHAR_009F					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   370
   371 					.MACRO m@INLINE
   372 				
   373 				; -------------------  ASM Block 00000021  -------------------
   374 				
   375 					jsr @fill
   376 				
   377 					.ENDM
   378
   379 				; ------------------------------------------------------------
   380
   381 = 0088			A	= :EDX
   382 = 008C			COUNT	= :ECX
   383 = 0084			VALUE	= :EAX
   384 2788			@exit
   385 				.endl
   386
   387 2788			.local	SETLENGTH					; PROCEDURE | ASSEMBLER | REGISTER
   388
   389 				; -------------------  ASM Block 00000033  -------------------
   390
   391 2788 A0 00			ldy #0
   392 278A A5 8C 91 88			mva Len (:edx),y
   393
   394 				; ------------------------------------------------------------
   395
   396 = 0088			S	= :EDX
   397 = 008C			LEN	= :ECX
   398 278E			@exit
   399 					.ifdef @new
   400 					lda <@VarData
   401 					sta :ztmp
   402 					lda >@VarData
   403 					ldy #@VarDataSize-1
   404 					jmp @FreeMem
   405 					els
   406 278E 60				rts						; ret
   407 					eif
   408 				.endl
   409
   410 278F			.local	PARAMCOUNT					; FUNCTION | ASSEMBLER
   411
   412 				; -------------------  ASM Block 00000044  -------------------
   413
   414 					@cmdline #255
   414 				 LDA# 255\ JSR @CMDLINE
   414 278F A9 FF		 LDA# 255
   414 2791 20 C8 21		 JSR @CMDLINE
   415 2794 8D C2 32			sta Result
   416
   417 2797			@exit
   418
   419 				; ------------------------------------------------------------
   420
   421 = 32C2			RESULT	= DATAORIGIN+$011E
   422 2797 60				rts						; ret
   423 				.endl
   424
   425 2798			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   426 2798 8D C3 32			sta I
   427
   428 				; -------------------  ASM Block 00000045  -------------------
   429
   430 					@cmdline i
   430 				 LDA I\ JSR @CMDLINE
   430 279B AD C3 32		 LDA I
   430 279E 20 C8 21		 JSR @CMDLINE
   431
   432 				;	@move #@buf Result #33
   433 27A1 A0 DF			ldy #256-33
   434 27A3 B9 21 03 99 E5 31 + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   435
   436 27AC			@exit
   437
   438 				; ------------------------------------------------------------
   439
   440 = 32C3			I	= DATAORIGIN+$011F
   441 = 32C4			adr.RESULT	= [DATAORIGIN+$0120] .array [33]
   442 27AC			.var RESULT	= adr.RESULT .word
   443
   444 = 32C3			@VarData	= I
   445 = 0022			@VarDataSize	= 34
   446
   447 27AC 60				rts						; ret
   448 = 27AD C4 32		RESULT
   448 				.endl
   449
   450 				; ------------------------------------------------------------
   451
   452 = 0101			__PORTB_BANKS	= $0101
   453 = 0648			M_PI_2	= $0648
   454 = 0192			D_PI_2	= $0192
   455 = 0004			D_PI_180	= $04
   456 = 0000			MGTIA	= $00
   457 = 0080			MVBXE	= $80
   458 = 0000			VBXE_XDLADR	= $00
   459 = 0100			VBXE_BCBADR	= $0100
   460 = 1000			VBXE_MAPADR	= $1000
   461 = 1000			VBXE_CHBASE	= $1000
   462 = 5000			VBXE_OVRADR	= $5000
   463 = B000			VBXE_WINDOW	= $B000
   464 = 0000			IDLI	= $00
   465 = 0001			IVBL	= $01
   466 = 0002			ITIM1	= $02
   467 = 0003			ITIM2	= $03
   468 = 0004			ITIM4	= $04
   469 = 00FE			CH_DELCHR	= $FE
   470 = 009B			CH_ENTER	= $9B
   471 = 001B			CH_ESC	= $1B
   472 = 001C			CH_CURS_UP	= $1C
   473 = 001D			CH_CURS_DOWN	= $1D
   474 = 001E			CH_CURS_LEFT	= $1E
   475 = 001F			CH_CURS_RIGHT	= $1F
   476 = 007F			CH_TAB	= $7F
   477 = 009B			CH_EOL	= $9B
   478 = 007D			CH_CLR	= $7D
   479 = 00FD			CH_BELL	= $FD
   480 = 007E			CH_DEL	= $7E
   481 = 009C			CH_DELLINE	= $9C
   482 = 009D			CH_INSLINE	= $9D
   483 = 0000			COLOR_BLACK	= $00
   484 = 000E			COLOR_WHITE	= $0E
   485 = 0032			COLOR_RED	= $32
   486 = 0096			COLOR_CYAN	= $96
   487 = 0068			COLOR_VIOLET	= $68
   488 = 00C4			COLOR_GREEN	= $C4
   489 = 0074			COLOR_BLUE	= $74
   490 = 00EE			COLOR_YELLOW	= $EE
   491 = 0028			COLOR_ORANGE	= $28
   492 = 00E4			COLOR_BROWN	= $E4
   493 = 003C			COLOR_LIGHTRED	= $3C
   494 = 0004			COLOR_GRAY1	= $04
   495 = 0006			COLOR_GRAY2	= $06
   496 = 000A			COLOR_GRAY3	= $0A
   497 = 00CC			COLOR_LIGHTGREEN	= $CC
   498 = 007C			COLOR_LIGHTBLUE	= $7C
   499 = 0004			FMOPENREAD	= $04
   500 = 0008			FMOPENWRITE	= $08
   501 = 0009			FMOPENAPPEND	= $09
   502 = 000C			FMOPENREADWRITE	= $0C
   503 = 31A4			SCREENWIDTH	= DATAORIGIN+$0000
   504 = 31A6			SCREENHEIGHT	= DATAORIGIN+$0002
   505 = 31A8			DATESEPARATOR	= DATAORIGIN+$0004
   506 = D20A			RND	= $D20A
   507 = 02C0			adr.PALETTE	= $02C0
   508 27AF			.var PALETTE	= adr.PALETTE .word
   509 = D012			adr.HPALETTE	= $D012
   510 27AF			.var HPALETTE	= adr.HPALETTE .word
   511 = 31A9			FILEMODE	= DATAORIGIN+$0005
   512 = 31AA			GRAPHMODE	= DATAORIGIN+$0006
   513 = 31AB			IORESULT	= DATAORIGIN+$0007
   514 = 31AC			EOLN	= DATAORIGIN+$0008
   515 = 31AD			RNDSEED	= DATAORIGIN+$0009
   516
   517 = 27AF C0 02		PALETTE
   517 = 27B1 12 D0		HPALETTE
   517 				.endl							; UNIT SYSTEM
   518
   519 				; ------------------------------------------------------------
   520
   521 27B3			.local	MC6850						; UNIT
   522
   523 27B3			.local	MC6850_RESET					; PROCEDURE
   524
   525 				; optimize OK (MC6850), line = 68
   526
   527 27B3 A9 03			lda #$03
   528 27B5 8D 00 D5			sta MC6850_CNTRREG
   529 27B8			@exit
   530 					.ifdef @new
   531 					lda <@VarData
   532 					sta :ztmp
   533 					lda >@VarData
   534 					ldy #@VarDataSize-1
   535 					jmp @FreeMem
   536 					els
   537 27B8 60				rts						; ret
   538 					eif
   539 				.endl
   540
   541 27B9			.local	MC6850_INIT					; PROCEDURE
   542 27B9 8D E5 32			sta SETUP
   543
   544 				; optimize OK (MC6850), line = 73
   545
   546 27BC 8D 00 D5			sta MC6850_CNTRREG
   547
   548 				; ------------------------------------------------------------
   549
   550 = 32E5			SETUP	= DATAORIGIN+$0141
   551
   552 = 32E5			@VarData	= SETUP
   553 = 0001			@VarDataSize	= 1
   554
   555 27BF			@exit
   556 					.ifdef @new
   557 					lda <@VarData
   558 					sta :ztmp
   559 					lda >@VarData
   560 					ldy #@VarDataSize-1
   561 					jmp @FreeMem
   562 					els
   563 27BF 60				rts						; ret
   564 					eif
   565 				.endl
   566
   567 27C0			.local	MC6850_SEND					; PROCEDURE
   568 27C0 8D E6 32			sta DATA
   569
   570 				; --- RepeatUntilProlog
   571 27C3			l_00E3
   572
   573 				; optimize OK (MC6850), line = 84
   574
   575 27C3 AD 00 D5			lda MC6850_CNTRREG
   576 27C6 29 02			and #$02
   577 27C8 F0 F9			jeq l_00E3
   578
   579 				; optimize OK (MC6850), line = 85
   580
   581 27CA AD E6 32			lda DATA
   582 27CD 8D 01 D5			sta MC6850_BUFFER
   583
   584 				; ------------------------------------------------------------
   585
   586 = 32E6			DATA	= DATAORIGIN+$0142
   587
   588 = 32E6			@VarData	= DATA
   589 = 0001			@VarDataSize	= 1
   590
   591 27D0			@exit
   592 					.ifdef @new
   593 					lda <@VarData
   594 					sta :ztmp
   595 					lda >@VarData
   596 					ldy #@VarDataSize-1
   597 					jmp @FreeMem
   598 					els
   599 27D0 60				rts						; ret
   600 					eif
   601 				.endl
   602
   603 				; ------------------------------------------------------------
   604
   605 = D500			MC6850_BASE	= $D500
   606 = D500			ADDR_MC6850_CNTRREG	= $D500
   607 = D501			ADDR_MC6850_BUFFER	= $D501
   608 = D500			ADDR_MC6850_STATREG	= $D500
   609 = 0001			CR0	= $01
   610 = 0002			CR1	= $02
   611 = 0004			CR2	= $04
   612 = 0008			CR3	= $08
   613 = 0010			CR4	= $10
   614 = 0020			CR5	= $20
   615 = 0040			CR6	= $40
   616 = 0080			CR7	= $80
   617 = 0000			CD_1	= $00
   618 = 0001			CD_16	= $01
   619 = 0002			CD_64	= $02
   620 = 0003			MASTERRESET	= $03
   621 = 0000			WS_7BITS	= $00
   622 = 0010			WS_8BITS	= $10
   623 = 0000			WS_2BITSTOP	= $00
   624 = 0008			WS_1BITSTOP	= $08
   625 = 0000			WS_EVENPARITY	= $00
   626 = 0004			WS_ODDPARITY	= $04
   627 = 0000			TC_RTSLOW_NOTIRQ	= $00
   628 = 0020			TC_RTSLOW_TIRQ	= $20
   629 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   630 = 0060			TC_BREAKLEVEL	= $60
   631 = 0000			NOIRQ_RECEIVE	= $00
   632 = 0080			IRQ_RECEIVE	= $80
   633 = 0001			RDRF	= $01
   634 = 0002			TDRE	= $02
   635 = 0004			DCD	= $04
   636 = 0008			CTS	= $08
   637 = 0010			FE	= $10
   638 = 0020			OVRN	= $20
   639 = 0040			PE	= $40
   640 = 0080			IRQ	= $80
   641 = D500			MC6850_CNTRREG	= $D500
   642 = D501			MC6850_BUFFER	= $D501
   643 = D500			MC6850_STATREG	= $D500
   644
   645 				.endl							; UNIT MC6850
   646
   647 				; ------------------------------------------------------------
   648
   649 27D1			.local	DOS						; UNIT
   650
   651 				; ------------------------------------------------------------
   652
   653 = D014			PALNTSC	= $D014
   654
   655 				.endl							; UNIT DOS
   656
   657 				; ------------------------------------------------------------
   658
   659 27D1			.local	STRUTILS					; UNIT
   660
   661 				; ------------------------------------------------------------
   662
   663 				.endl							; UNIT STRUTILS
   664
   665 				; ------------------------------------------------------------
   666
   667 27D1			.local	SYSUTILS					; UNIT
   668
   669 				; ------------------------------------------------------------
   670
   671 = 0001			FAREADONLY	= $01
   672 = 0002			FAHIDDEN	= $02
   673 = 0004			FASYSFILE	= $04
   674 = 0008			FAVOLUMEID	= $08
   675 = 0010			FADIRECTORY	= $10
   676 = 0020			FAARCHIVE	= $20
   677 = 003F			FAANYFILE	= $3F
   678
   679 				.endl							; UNIT SYSUTILS
   680
   681 				; ------------------------------------------------------------
   682
   683 27D1			.local	MIDI_FIFO					; UNIT
   684
   685 27D1			.local	FIFO_RESET					; PROCEDURE
   686
   687 				; optimize OK (MIDI_FIFO), line = 31
   688
   689 27D1 A9 00			lda #$00
   690 27D3 85 F0			sta FIFO_HEAD
   691
   692 				; optimize OK (MIDI_FIFO), line = 32
   693
   694 27D5 85 F1			sta FIFO_TAIL
   695
   696 				; optimize OK (MIDI_FIFO), line = 33
   697
   698 27D7 85 88			sta SYSTEM.FILLCHAR_009F.A
   699 27D9 A9 06			lda #$06
   700 27DB 85 89			sta SYSTEM.FILLCHAR_009F.A+1
   701 27DD A9 FF			lda #$FF
   702 27DF 85 8C			sta SYSTEM.FILLCHAR_009F.COUNT
   703 27E1 A9 00			lda #$00
   704 27E3 85 8D			sta SYSTEM.FILLCHAR_009F.COUNT+1
   705 27E5 85 84			sta SYSTEM.FILLCHAR_009F.VALUE
   706 27E7				.local +MAIN.SYSTEM.FILLCHAR_009F
   707 27E7				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_009F.M@INLINE [Source: MIDICar Player.a65]
     4 27E7 20 FC 23			jsr @fill
Source: MIDICar Player.a65
   708 					.endl
   709 27EA			@exit
   710 					.ifdef @new
   711 					lda <@VarData
   712 					sta :ztmp
   713 					lda >@VarData
   714 					ldy #@VarDataSize-1
   715 					jmp @FreeMem
   716 					els
   717 27EA 60				rts						; ret
   718 					eif
   719 				.endl
   720
   721 27EB			.local	FIFO_READBYTE					; FUNCTION
   722
   723 				; optimize OK (MIDI_FIFO), line = 38
   724
   725 27EB A4 F1			ldy FIFO_TAIL
   726 27ED C4 F0			cpy FIFO_HEAD
   727 27EF F0 21			jeq l_0154
   728
   729 				; optimize OK (MIDI_FIFO), line = 40
   730
   731 27F1 B9 00 06			lda adr.FIFO_BUF,y
   732 27F4 AC E8 32 84 81		mvy DATA+1 :bp+1
   733 27F9 AC E7 32			ldy DATA
   734 27FC 91 80			sta (:bp),y
   735
   736 				; optimize FAIL (0, MIDI_FIFO), line = 41
   737
   738 27FE E6 F1			inc FIFO_TAIL
   739
   740 				; optimize OK (MIDI_FIFO), line = 42
   741
   742 2800 A5 F1			lda FIFO_TAIL
   743 2802 C9 FF			cmp #$FF
   744 2804 D0 04			jne l_0174
   745 2806 A9 00			lda #$00
   746 2808 85 F1			sta FIFO_TAIL
   747 280A			l_0174
   748
   749 				; optimize OK (MIDI_FIFO), line = 43
   750
   751 280A A9 01			lda #$01
   752 280C 8D E9 32			sta RESULT
   753 280F 4C 17 28			jmp l_0188
   754 2812			l_0154
   755
   756 				; optimize OK (MIDI_FIFO), line = 46
   757
   758 2812 A9 00			lda #$00
   759 2814 8D E9 32			sta RESULT
   760 2817			l_0188
   761 2817			@exit
   762
   763 				; ------------------------------------------------------------
   764
   765 = 32E7			DATA	= DATAORIGIN+$0143
   766 = 32E9			RESULT	= DATAORIGIN+$0145
   767
   768 = 32E7			@VarData	= DATA
   769 = 0002			@VarDataSize	= 2
   770
   771 2817 60				rts						; ret
   772 				.endl
   773
   774 2818			.local	FIFO_WRITEBYTE					; FUNCTION
   775 2818 8D EA 32			sta DATA
   776
   777 				; optimize OK (MIDI_FIFO), line = 51
   778
   779 281B A5 F0			lda FIFO_HEAD
   780 281D 18 69 01			add #$01
   781 2820 85 9D			sta :STACKORIGIN+9
   782 2822 A9 00			lda #$00
   783 2824 69 00			adc #$00
   784 2826 85 AD			sta :STACKORIGIN+STACKWIDTH+9
   785 2828 A9 00			lda #$00
   786 282A 69 00			adc #$00
   787 282C 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
   788 282E A9 00			lda #$00
   789 2830 69 00			adc #$00
   790 2832 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
   791 2834 A0 01			ldy #1
   792 2836 A5 CD			lda :STACKORIGIN+STACKWIDTH*3+9
   793 2838 C9 00			cmp #$00
   794 283A D0 10			bne @+
   795 283C A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
   796 283E C9 00			cmp #$00
   797 2840 D0 0A			bne @+
   798 2842 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
   799 2844 C9 00			cmp #$00
   800 2846 D0 04			bne @+
   801 2848 A5 9D			lda :STACKORIGIN+9
   802 284A C5 F1			cmp FIFO_TAIL
   803 				@
   804 284C F0 01			beq @+
   805 284E 88				dey
   806 				@
   807 284F 84 9D			sty :STACKORIGIN+9
   808 2851 A5 F0			lda FIFO_HEAD
   809 2853 18 69 01			add #$01
   810 2856 85 9E			sta :STACKORIGIN+10
   811 2858 A9 00			lda #$00
   812 285A 69 00			adc #$00
   813 285C 85 AE			sta :STACKORIGIN+STACKWIDTH+10
   814 285E A9 00			lda #$00
   815 2860 69 00			adc #$00
   816 2862 85 BE			sta :STACKORIGIN+STACKWIDTH*2+10
   817 2864 A9 00			lda #$00
   818 2866 69 00			adc #$00
   819 2868 85 CE			sta :STACKORIGIN+STACKWIDTH*3+10
   820 286A A0 01			ldy #1
   821 286C A5 CE			lda :STACKORIGIN+STACKWIDTH*3+10
   822 286E C9 00			cmp #$00
   823 2870 D0 10			bne @+
   824 2872 A5 BE			lda :STACKORIGIN+STACKWIDTH*2+10
   825 2874 C9 00			cmp #$00
   826 2876 D0 0A			bne @+
   827 2878 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
   828 287A C9 00			cmp #$00
   829 287C D0 04			bne @+
   830 287E A5 9E			lda :STACKORIGIN+10
   831 2880 C9 FF			cmp #$FF
   832 				@
   833 2882 F0 01			beq @+
   834 2884 88				dey
   835 				@
   836 2885 84 9E			sty :STACKORIGIN+10
   837 2887 A0 01			ldy #1
   838 2889 A5 F1			lda FIFO_TAIL
   839 288B F0 01			beq @+
   840 288D 88				dey
   841 				@
   842 288E 98				tya
   843 288F 25 9E			and :STACKORIGIN+10
   844 2891 05 9D			ora :STACKORIGIN+9
   845 2893 F0 08			jeq l_01C4
   846
   847 				; optimize OK (MIDI_FIFO), line = 53
   848
   849 2895 A9 00			lda #$00
   850 2897 8D EB 32			sta RESULT
   851 289A 4C B6 28			jmp @exit					; exit
   852 289D			l_01C4
   853
   854 				; optimize OK (MIDI_FIFO), line = 56
   855
   856 289D A4 F0			ldy FIFO_HEAD
   857 289F AD EA 32			lda DATA
   858 28A2 99 00 06			sta adr.FIFO_BUF,y
   859
   860 				; optimize FAIL (0, MIDI_FIFO), line = 60
   861
   862 28A5 E6 F0			inc FIFO_HEAD
   863
   864 				; optimize OK (MIDI_FIFO), line = 61
   865
   866 28A7 A5 F0			lda FIFO_HEAD
   867 28A9 C9 FF			cmp #$FF
   868 28AB D0 04			jne l_01F1
   869 28AD A9 00			lda #$00
   870 28AF 85 F0			sta FIFO_HEAD
   871 28B1			l_01F1
   872 28B1			l_01D2
   873
   874 				; optimize OK (MIDI_FIFO), line = 63
   875
   876 28B1 A9 01			lda #$01
   877 28B3 8D EB 32			sta RESULT
   878 28B6			@exit
   879
   880 				; ------------------------------------------------------------
   881
   882 = 32EA			DATA	= DATAORIGIN+$0146
   883 = 32EB			RESULT	= DATAORIGIN+$0147
   884
   885 = 32EA			@VarData	= DATA
   886 = 0001			@VarDataSize	= 1
   887
   888 28B6 60				rts						; ret
   889 				.endl
   890
   891 28B7			.local	FIFO_FLUSH					; PROCEDURE
   892
   893 				; --- WhileProlog
   894 28B7 4C BF 28			jmp l_0202
   895 28BA			l_0203
   896
   897 				; optimize OK (MIDI_FIFO), line = 69
   898
   899 28BA A5 FF			lda ZP_DATA
   900 28BC 20 C0 27			jsr MC6850.MC6850_SEND
   901 28BF			l_0202
   902
   903 				; optimize OK (MIDI_FIFO), line = 68
   904
   905 28BF A9 FF			lda <ZP_DATA
   906 28C1 8D E7 32			sta FIFO_READBYTE.DATA
   907 28C4 A9 00			lda >ZP_DATA
   908 28C6 8D E8 32			sta FIFO_READBYTE.DATA+1
   909 28C9 20 EB 27			jsr FIFO_READBYTE
   910 28CC AD E9 32			lda FIFO_READBYTE.RESULT
   911 28CF D0 E9			jne l_0203
   912 28D1			@exit
   913 					.ifdef @new
   914 					lda <@VarData
   915 					sta :ztmp
   916 					lda >@VarData
   917 					ldy #@VarDataSize-1
   918 					jmp @FreeMem
   919 					els
   920 28D1 60				rts						; ret
   921 					eif
   922 				.endl
   923
   924 				; ------------------------------------------------------------
   925
   926 = 00FF			ZP_DATA	= $FF
   927 = 00F0			FIFO_HEAD	= $F0
   928 = 00F1			FIFO_TAIL	= $F1
   929 = 00FF			FIFO_SIZE	= $FF
   930 = 0600			FIFO_ADDR	= $0600
   931 = 0600			adr.FIFO_BUF	= $0600
   932 28D2			.var FIFO_BUF	= adr.FIFO_BUF .word
   933
   934 = 28D2 00 06		FIFO_BUF
   934 				.endl							; UNIT MIDI_FIFO
   935
   936 				; ------------------------------------------------------------
   937
   938 28D4			.local	MIDFILES					; UNIT
   939
   940 28D4			.local	WORDBI						; FUNCTION
   941
   942 				; optimize OK (MIDFILES), line = 46
   943
   944 28D4 A9 FC			lda <RESULT
   945 28D6 8D FE 32			sta RESULTPTR
   946 28D9 A9 32			lda >RESULT
   947 28DB 8D FF 32			sta RESULTPTR+1
   948
   949 				; optimize OK (MIDFILES), line = 47
   950
   951 28DE AC FA 32 84 82 AC + 	mwy BI :bp2
   952 28E8 A0 01			ldy #$01
   953 28EA B1 82			lda (:bp2),y
   954 28EC AC FF 32 84 81		mvy RESULTPTR+1 :bp+1
   955 28F1 AC FE 32			ldy RESULTPTR
   956 28F4 91 80			sta (:bp),y
   957 28F6 EE FE 32			inc RESULTPTR
   958 28F9 D0 03			sne
   959 28FB EE FF 32			inc RESULTPTR+1
   960
   961 				; optimize OK (MIDFILES), line = 48
   962
   963 28FE A0 00			ldy #$00
   964 2900 B1 82			lda (:bp2),y
   965 2902 AC FF 32 84 81		mvy RESULTPTR+1 :bp+1
   966 2907 AC FE 32			ldy RESULTPTR
   967 290A 91 80			sta (:bp),y
   968 290C			@exit
   969
   970 				; ------------------------------------------------------------
   971
   972 = 32FA			BI	= DATAORIGIN+$0156
   973 = 32FC			RESULT	= DATAORIGIN+$0158
   974 = 32FE			RESULTPTR	= DATAORIGIN+$015A
   975
   976 = 32FA			@VarData	= BI
   977 = 0004			@VarDataSize	= 4
   978
   979 290C 60				rts						; ret
   980 				.endl
   981
   982 290D			.local	LONGBI						; FUNCTION
   983
   984 				; optimize OK (MIDFILES), line = 57
   985
   986 290D A9 02			lda <RESULT
   987 290F 8D 06 33			sta RESULTPTR
   988 2912 A9 33			lda >RESULT
   989 2914 8D 07 33			sta RESULTPTR+1
   990
   991 				; optimize OK (MIDFILES), line = 58
   992
   993 2917 A9 03			lda #$03
   994 2919 8D 08 33			sta I
   995
   996 291C			l_0237
   997 				; --- ForToDoCondition
   998
   999 				; optimize OK (MIDFILES), line = 60
  1000
  1001 291C AC 00 33 84 82 AC + 	mwy BI :bp2
  1002 2926 AC 08 33			ldy I
  1003 2929 B1 82			lda (:bp2),y
  1004 292B AC 07 33 84 81		mvy RESULTPTR+1 :bp+1
  1005 2930 AC 06 33			ldy RESULTPTR
  1006 2933 91 80			sta (:bp),y
  1007
  1008 				; optimize FAIL (0, MIDFILES), line = 61
  1009
  1010 2935 EE 06 33			inc RESULTPTR
  1011 2938 D0 03			sne
  1012 293A EE 07 33			inc RESULTPTR+1
  1013
  1014 				; --- ForToDoEpilog
  1015 293D CE 08 33			dec I
  1016 2940 10 DA			jpl l_0237
  1017 2942			l_0245
  1018 2942			@exit
  1019
  1020 				; ------------------------------------------------------------
  1021
  1022 = 3300			BI	= DATAORIGIN+$015C
  1023 = 3302			RESULT	= DATAORIGIN+$015E
  1024 = 3306			RESULTPTR	= DATAORIGIN+$0162
  1025 = 3308			I	= DATAORIGIN+$0164
  1026
  1027 = 3300			@VarData	= BI
  1028 = 0005			@VarDataSize	= 5
  1029
  1030 2942 60				rts						; ret
  1031 				.endl
  1032
  1033 2943			.local	LOADMID						; FUNCTION
  1034
  1035 				; ------------------------------------------------------------
  1036
  1037 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1038 				; as Pointer
  1039 2943 B5 94			lda :STACKORIGIN,x
  1040 2945 85 82			sta :bp2
  1041 2947 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1042 2949 85 83			sta :bp2+1
  1043 294B A0 00			ldy #$00
  1044 294D B1 82 99 09 33 C8 + 	mva:rne (:bp2),y adr.FN,y+
  1045 2955 A9 09 8D 09 2D A9 + 	mwa #adr.FN FN
  1046 295F CA				dex
  1047 2960			@main
  1048
  1049 2960 4C 0B 2A			jmp l_025E
  1050
  1051 2963			.local	READWORDBI					; FUNCTION
  1052
  1053 				; BlockRead
  1054
  1055 				; optimize OK (MIDFILES), line = 80
  1056
  1057 2963 AC 0B 2D 84 82 AC + 	mwy F :bp2
  1058 296D A0 06			ldy #s@file.buffer
  1059 296F AD F0 2F			lda BI
  1060 2972 91 82			sta (:bp2),y
  1061 2974 C8				iny
  1062 2975 AD F1 2F			lda BI+1
  1063 2978 91 82			sta (:bp2),y
  1064 297A A0 08			ldy #s@file.nrecord
  1065 297C A9 02			lda #$02
  1066 297E 91 82			sta (:bp2),y
  1067 2980 C8				iny
  1068 2981 A9 00			lda #$00
  1069 2983 91 82			sta (:bp2),y
  1070
  1071 2985 8A 48			txa:pha
  1072 2987 38				sec
  1073 					@readfile F, #7
  1073 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1073 2988 AC 0C 2D		 LDY F+1
  1073 298B AD 0B 2D		 LDA F
  1073 298E A2 07		 LDX# 7
  1073 2990 20 06 21		 JSR @READFILE
  1074 2993 68 AA			pla:tax
  1075
  1076 				; optimize OK (MIDFILES), line = 81
  1077
  1078 2995 AD F0 2F			lda BI
  1079 2998 8D FA 32			sta WORDBI.BI
  1080 299B AD F1 2F			lda BI+1
  1081 299E 8D FB 32			sta WORDBI.BI+1
  1082 29A1 20 D4 28			jsr WORDBI
  1083 29A4 AD FC 32			lda WORDBI.RESULT
  1084 29A7 8D 27 34			sta RESULT
  1085 29AA AD FD 32			lda WORDBI.RESULT+1
  1086 29AD 8D 28 34			sta RESULT+1
  1087 29B0			@exit
  1088
  1089 				; ------------------------------------------------------------
  1090
  1091 = 3427			RESULT	= DATAORIGIN+$0283
  1092 29B0 60				rts						; ret
  1093 				.endl
  1094
  1095 29B1			.local	READLONGBI					; FUNCTION
  1096
  1097 				; BlockRead
  1098
  1099 				; optimize OK (MIDFILES), line = 86
  1100
  1101 29B1 AC 0B 2D 84 82 AC + 	mwy F :bp2
  1102 29BB A0 06			ldy #s@file.buffer
  1103 29BD AD F0 2F			lda BI
  1104 29C0 91 82			sta (:bp2),y
  1105 29C2 C8				iny
  1106 29C3 AD F1 2F			lda BI+1
  1107 29C6 91 82			sta (:bp2),y
  1108 29C8 A0 08			ldy #s@file.nrecord
  1109 29CA A9 04			lda #$04
  1110 29CC 91 82			sta (:bp2),y
  1111 29CE C8				iny
  1112 29CF A9 00			lda #$00
  1113 29D1 91 82			sta (:bp2),y
  1114
  1115 29D3 8A 48			txa:pha
  1116 29D5 38				sec
  1117 					@readfile F, #7
  1117 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1117 29D6 AC 0C 2D		 LDY F+1
  1117 29D9 AD 0B 2D		 LDA F
  1117 29DC A2 07		 LDX# 7
  1117 29DE 20 06 21		 JSR @READFILE
  1118 29E1 68 AA			pla:tax
  1119
  1120 				; optimize OK (MIDFILES), line = 87
  1121
  1122 29E3 AD F0 2F			lda BI
  1123 29E6 8D 00 33			sta LONGBI.BI
  1124 29E9 AD F1 2F			lda BI+1
  1125 29EC 8D 01 33			sta LONGBI.BI+1
  1126 29EF 20 0D 29			jsr LONGBI
  1127 29F2 AD 02 33			lda LONGBI.RESULT
  1128 29F5 8D 29 34			sta RESULT
  1129 29F8 AD 03 33			lda LONGBI.RESULT+1
  1130 29FB 8D 2A 34			sta RESULT+1
  1131 29FE AD 04 33			lda LONGBI.RESULT+2
  1132 2A01 8D 2B 34			sta RESULT+2
  1133 2A04 AD 05 33			lda LONGBI.RESULT+3
  1134 2A07 8D 2C 34			sta RESULT+3
  1135 2A0A			@exit
  1136
  1137 				; ------------------------------------------------------------
  1138
  1139 = 3429			RESULT	= DATAORIGIN+$0285
  1140 2A0A 60				rts						; ret
  1141 				.endl
  1142 2A0B			l_025E
  1143
  1144 				; optimize OK (MIDFILES), line = 91
  1145
  1146 2A0B AD EE 2F			lda MIDTRACKS
  1147 2A0E 8D 25 34			sta NTRKREC
  1148 2A11 AD EF 2F			lda MIDTRACKS+1
  1149 2A14 8D 26 34			sta NTRKREC+1
  1150
  1151 				; optimize FAIL ('@print', MIDFILES), line = 92
  1152
  1153 					@printSTRING #CODEORIGIN+$000D
  1153 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
  1153 2A17 A0 20		 LDY> CODEORIGIN+$000D
  1153 2A19 A9 0D		 LDA< CODEORIGIN+$000D
  1153 2A1B 20 53 25		 JSR @PRINTSTRING
  1154 					@printSTRING FN
  1154 				 LDY FN+1\ LDA FN\ JSR @PRINTSTRING
  1154 2A1E AC 0A 2D		 LDY FN+1
  1154 2A21 AD 09 2D		 LDA FN
  1154 2A24 20 53 25		 JSR @PRINTSTRING
  1155 2A27 20 45 25			@printEOL
  1156 				; AssignFile
  1157
  1158 				; optimize OK (MIDFILES), line = 94
  1159
  1160 2A2A AC 0B 2D 84 82 AC + 	mwy F :bp2
  1161 2A34 A0 00			ldy #s@file.pfname
  1162 2A36 AD 09 2D			lda FN
  1163 2A39 91 82			sta (:bp2),y
  1164 2A3B C8				iny
  1165 2A3C AD 0A 2D			lda FN+1
  1166 2A3F 91 82			sta (:bp2),y
  1167 2A41 A0 05			ldy #s@file.status
  1168 2A43 A9 00			lda #$00
  1169 2A45 91 82			sta (:bp2),y
  1170 				; Reset
  1171
  1172 				; optimize OK (MIDFILES), line = 95
  1173
  1174 2A47 A0 02			ldy #s@file.record
  1175 2A49 A9 01			lda #$01
  1176 2A4B 91 82			sta (:bp2),y
  1177 2A4D C8				iny
  1178 2A4E A9 00			lda #$00
  1179 2A50 91 82			sta (:bp2),y
  1180
  1181 2A52 8A 48			txa:pha
  1182 2A54 18				clc
  1183 					@openfile F, MAIN.SYSTEM.FileMode
  1183 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  1183 2A55 AC 0C 2D		 LDY F+1
  1183 2A58 AD 0B 2D		 LDA F
  1183 2A5B AE A9 31		 LDX MAIN.SYSTEM.FILEMODE
  1183 2A5E 20 43 20		 JSR @OPENFILE
  1184 2A61 68 AA			pla:tax
  1185
  1186 				; optimize OK (MIDFILES), line = 96
  1187
  1188 2A63 AD AB 31			lda SYSTEM.IORESULT
  1189 2A66 10 2B			jpl l_02B1
  1190
  1191 				; optimize FAIL ('@print', MIDFILES), line = 98
  1192
  1193 					@print #$9B
  1193 				 LDY# $9B\ JSR @PRINT
  1193 2A68 A0 9B		 LDY# $9B
  1193 2A6A 20 4A 25		 JSR @PRINT
  1194 					@printSTRING #CODEORIGIN+$0019
  1194 				 LDY> CODEORIGIN+$0019\ LDA< CODEORIGIN+$0019\ JSR @PRINTSTRING
  1194 2A6D A0 20		 LDY> CODEORIGIN+$0019
  1194 2A6F A9 19		 LDA< CODEORIGIN+$0019
  1194 2A71 20 53 25		 JSR @PRINTSTRING
  1195 2A74 AD AB 31			lda SYSTEM.IORESULT
  1196 2A77 20 84 25			jsr @printBYTE._a
  1197 2A7A 20 45 25			@printEOL
  1198 				; CloseFile
  1199
  1200 2A7D 8A 48			txa:pha
  1201 2A7F 18				clc
  1202 					@closefile F
  1202 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1202 2A80 AC 0C 2D		 LDY F+1
  1202 2A83 AD 0B 2D		 LDA F
  1202 2A86 20 D9 20		 JSR @CLOSEFILE
  1203 2A89 68 AA			pla:tax
  1204
  1205 				; optimize OK (MIDFILES), line = 100
  1206
  1207 2A8B A9 00			lda #$00
  1208 2A8D 8D 09 34			sta RESULT
  1209 2A90 4C 08 2D			jmp @exit					; exit
  1210 2A93			l_02B1
  1211
  1212 				; optimize OK (MIDFILES), line = 102
  1213
  1214 2A93 A9 00			lda #$00
  1215 2A95 8D 16 34			sta TRACKCOUNT
  1216 2A98 8D 17 34			sta TRACKCOUNT+1
  1217 2A9B 8D 1F 34			sta DATAPOS
  1218 2A9E 8D 20 34			sta DATAPOS+1
  1219 2AA1 A9 FF			lda #$FF
  1220 2AA3 8D F0 32			sta NTRACKS
  1221 2AA6 A9 00			lda #$00
  1222 2AA8 8D F1 32			sta NTRACKS+1
  1223
  1224 				; optimize OK (MIDFILES), line = 103
  1225
  1226 2AAB AD 0D 2D			lda CHUNKHEAD
  1227 2AAE 85 88			sta SYSTEM.SETLENGTH.S
  1228 2AB0 AD 0E 2D			lda CHUNKHEAD+1
  1229 2AB3 85 89			sta SYSTEM.SETLENGTH.S+1
  1230 2AB5 A9 04			lda #$04
  1231 2AB7 85 8C			sta SYSTEM.SETLENGTH.LEN
  1232 2AB9 20 88 27			jsr SYSTEM.SETLENGTH
  1233
  1234 				; --- WhileProlog
  1235 2ABC 4C A1 2C			jmp l_02D5
  1236 2ABF			l_02D6
  1237 				; BlockRead
  1238
  1239 				; optimize OK (MIDFILES), line = 106
  1240
  1241 2ABF AC 0B 2D 84 82 AC + 	mwy F :bp2
  1242 2AC9 A0 06			ldy #s@file.buffer
  1243 2ACB A9 18			lda <adr.CHUNKHEAD
  1244 2ACD 18 69 01			add #$01
  1245 2AD0 91 82			sta (:bp2),y
  1246 2AD2 C8				iny
  1247 2AD3 A9 34			lda >adr.CHUNKHEAD
  1248 2AD5 69 00			adc #$00
  1249 2AD7 91 82			sta (:bp2),y
  1250 2AD9 A0 08			ldy #s@file.nrecord
  1251 2ADB A9 04			lda #$04
  1252 2ADD 91 82			sta (:bp2),y
  1253 2ADF C8				iny
  1254 2AE0 A9 00			lda #$00
  1255 2AE2 91 82			sta (:bp2),y
  1256 2AE4 A0 0A			ldy #s@file.numread
  1257 2AE6 A9 1D			lda <V
  1258 2AE8 91 82			sta (:bp2),y
  1259 2AEA C8				iny
  1260 2AEB A9 34			lda >V
  1261 2AED 91 82			sta (:bp2),y
  1262
  1263 2AEF 8A 48			txa:pha
  1264 2AF1 18				clc
  1265 					@readfile F, #135
  1265 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1265 2AF2 AC 0C 2D		 LDY F+1
  1265 2AF5 AD 0B 2D		 LDA F
  1265 2AF8 A2 87		 LDX# 135
  1265 2AFA 20 06 21		 JSR @READFILE
  1266 2AFD 68 AA			pla:tax
  1267
  1268 				; optimize OK (MIDFILES), line = 107
  1269
  1270 2AFF AD 1E 34			lda V+1
  1271 2B02 D0 05			bne @+
  1272 2B04 AD 1D 34			lda V
  1273 2B07 C9 04			cmp #$04
  1274 				@
  1275 2B09 F0 03			jeq l_02F3
  1276 2B0B 4C F5 2C			jmp b_02D6					; break
  1277 2B0E			l_02F3
  1278
  1279 				; optimize FAIL ('READLONGBI', MIDFILES), line = 108
  1280
  1281 2B0E 20 B1 29			jsr READLONGBI
  1282 2B11 AD 29 34			lda READLONGBI.RESULT
  1283 2B14 8D 21 34			sta LEN
  1284 2B17 AD 2A 34			lda READLONGBI.RESULT+1
  1285 2B1A 8D 22 34			sta LEN+1
  1286 2B1D AD 2B 34			lda READLONGBI.RESULT+2
  1287 2B20 8D 23 34			sta LEN+2
  1288 2B23 AD 2C 34			lda READLONGBI.RESULT+3
  1289 2B26 8D 24 34			sta LEN+3
  1290
  1291 				; optimize FAIL ('cmpSTRING', MIDFILES), line = 110
  1292
  1293 2B29 E8				inx
  1294 2B2A AD 0D 2D 95 94		mva CHUNKHEAD :STACKORIGIN,x
  1295 2B2F AD 0E 2D 95 A4		mva CHUNKHEAD+1 :STACKORIGIN+STACKWIDTH,x
  1296 2B34 E8				inx
  1297 2B35 A9 26 95 94			mva #$26 :STACKORIGIN,x
  1298 2B39 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  1299 2B3D A0 01			ldy #1
  1300 2B3F 20 2A 23			jsr cmpSTRING
  1301 2B42 F0 01			beq @+
  1302 2B44 88				dey
  1303 				@
  1304 2B45 CA				dex
  1305 2B46 CA				dex
  1306 2B47 98				tya
  1307 2B48 F0 7E			jeq l_030B
  1308
  1309 				; optimize FAIL ('READWORDBI', MIDFILES), line = 112
  1310
  1311 2B4A 20 63 29			jsr READWORDBI
  1312 2B4D AD 27 34			lda READWORDBI.RESULT
  1313 2B50 8D EE 32			sta FORMAT
  1314 2B53 AD 28 34			lda READWORDBI.RESULT+1
  1315 2B56 8D EF 32			sta FORMAT+1
  1316
  1317 				; optimize FAIL ('READWORDBI', MIDFILES), line = 113
  1318
  1319 2B59 20 63 29			jsr READWORDBI
  1320 2B5C AD 27 34			lda READWORDBI.RESULT
  1321 2B5F 8D F0 32			sta NTRACKS
  1322 2B62 AD 28 34			lda READWORDBI.RESULT+1
  1323 2B65 8D F1 32			sta NTRACKS+1
  1324
  1325 				; optimize FAIL ('READWORDBI', MIDFILES), line = 114
  1326
  1327 2B68 20 63 29			jsr READWORDBI
  1328 2B6B AD 27 34			lda READWORDBI.RESULT
  1329 2B6E 8D 1D 34			sta V
  1330 2B71 AD 28 34			lda READWORDBI.RESULT+1
  1331 2B74 8D 1E 34			sta V+1
  1332
  1333 				; optimize OK (MIDFILES), line = 119
  1334
  1335 2B77 10 3E			jpl l_032D
  1336
  1337 				; optimize OK (MIDFILES), line = 121
  1338
  1339 2B79 29 7F			and #$7F
  1340 2B7B 8D F2 32			sta FPS
  1341
  1342 				; optimize OK (MIDFILES), line = 122
  1343
  1344 2B7E 8D 2D 34			sta @CASETMP_0005
  1345 2B81 C9 E8			cmp #$E8
  1346 2B83 D0 08			jne l_0346
  1347 				@
  1348
  1349 				; optimize OK (MIDFILES), line = 123
  1350
  1351 2B85 A9 18			lda #$18
  1352 2B87 8D F2 32			sta FPS
  1353
  1354 2B8A 4C AE 2B			jmp a_0005
  1355 2B8D			l_0346
  1356 2B8D C9 E7			cmp #$E7
  1357 2B8F D0 08			jne l_0353
  1358 				@
  1359
  1360 				; optimize OK (MIDFILES), line = 124
  1361
  1362 2B91 A9 19			lda #$19
  1363 2B93 8D F2 32			sta FPS
  1364
  1365 2B96 4C AE 2B			jmp a_0005
  1366 2B99			l_0353
  1367 2B99 C9 E3			cmp #$E3
  1368 2B9B D0 08			jne l_0360
  1369 				@
  1370
  1371 				; optimize OK (MIDFILES), line = 125
  1372
  1373 2B9D A9 1D			lda #$1D
  1374 2B9F 8D F2 32			sta FPS
  1375
  1376 2BA2 4C AE 2B			jmp a_0005
  1377 2BA5			l_0360
  1378 2BA5 C9 E2			cmp #$E2
  1379 2BA7 D0 05			jne l_036D
  1380 				@
  1381
  1382 				; optimize OK (MIDFILES), line = 126
  1383
  1384 2BA9 A9 1E			lda #$1E
  1385 2BAB 8D F2 32			sta FPS
  1386
  1387 2BAE			l_036D
  1388 2BAE			a_0005
  1389
  1390 				; optimize OK (MIDFILES), line = 128
  1391
  1392 2BAE AD 1D 34			lda V
  1393 2BB1 8D F3 32			sta FSD
  1394 2BB4 4C C5 2B			jmp l_038B
  1395 2BB7			l_032D
  1396
  1397 				; optimize OK (MIDFILES), line = 136
  1398
  1399 2BB7 AD 1D 34			lda V
  1400 2BBA 8D F4 32			sta TICKDIV
  1401 2BBD AD 1E 34			lda V+1
  1402 2BC0 29 7F			and #$7F
  1403 2BC2 8D F5 32			sta TICKDIV+1
  1404 2BC5			l_038B
  1405 2BC5 4C A1 2C			jmp l_039D
  1406 2BC8			l_030B
  1407
  1408 				; optimize FAIL ('cmpSTRING', MIDFILES), line = 142
  1409
  1410 2BC8 E8				inx
  1411 2BC9 AD 0D 2D 95 94		mva CHUNKHEAD :STACKORIGIN,x
  1412 2BCE AD 0E 2D 95 A4		mva CHUNKHEAD+1 :STACKORIGIN+STACKWIDTH,x
  1413 2BD3 E8				inx
  1414 2BD4 A9 2C 95 94			mva #$2C :STACKORIGIN,x
  1415 2BD8 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  1416 2BDC A0 01			ldy #1
  1417 2BDE 20 2A 23			jsr cmpSTRING
  1418 2BE1 F0 01			beq @+
  1419 2BE3 88				dey
  1420 				@
  1421 2BE4 CA				dex
  1422 2BE5 CA				dex
  1423 2BE6 98				tya
  1424 2BE7 D0 03 4C A1 2C		jeq l_03AE
  1425
  1426 				; optimize FAIL (0, MIDFILES), line = 144
  1427
  1428 2BEC EE 16 34			inc TRACKCOUNT
  1429 2BEF D0 03			sne
  1430 2BF1 EE 17 34			inc TRACKCOUNT+1
  1431
  1432 				; optimize FAIL ('@print', MIDFILES), line = 145
  1433
  1434 					@print #$2E
  1434 				 LDY# $2E\ JSR @PRINT
  1434 2BF4 A0 2E		 LDY# $2E
  1434 2BF6 20 4A 25		 JSR @PRINT
  1435 				; BlockRead
  1436
  1437 				; optimize OK (MIDFILES), line = 146
  1438
  1439 2BF9 AC 0B 2D 84 82 AC + 	mwy F :bp2
  1440 2C03 A0 06			ldy #s@file.buffer
  1441 2C05 AD EC 2F			lda MIDDATA
  1442 2C08 18 6D 1F 34			add DATAPOS
  1443 2C0C 91 82			sta (:bp2),y
  1444 2C0E C8				iny
  1445 2C0F AD ED 2F			lda MIDDATA+1
  1446 2C12 6D 20 34			adc DATAPOS+1
  1447 2C15 91 82			sta (:bp2),y
  1448 2C17 A0 08			ldy #s@file.nrecord
  1449 2C19 AD 21 34			lda LEN
  1450 2C1C 91 82			sta (:bp2),y
  1451 2C1E C8				iny
  1452 2C1F AD 22 34			lda LEN+1
  1453 2C22 91 82			sta (:bp2),y
  1454
  1455 2C24 8A 48			txa:pha
  1456 2C26 18				clc
  1457 					@readfile F, #7
  1457 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1457 2C27 AC 0C 2D		 LDY F+1
  1457 2C2A AD 0B 2D		 LDA F
  1457 2C2D A2 07		 LDX# 7
  1457 2C2F 20 06 21		 JSR @READFILE
  1458 2C32 68 AA			pla:tax
  1459
  1460 				; optimize OK (MIDFILES), line = 147
  1461
  1462 2C34 AC 25 34 84 82 AC + 	mwy NTRKREC :bp2
  1463 2C3E A0 00			ldy #$00
  1464 2C40 AD EC 2F			lda MIDDATA
  1465 2C43 18 6D 1F 34			add DATAPOS
  1466 2C47 91 82			sta (:bp2),y
  1467 2C49 C8				iny
  1468 2C4A AD ED 2F			lda MIDDATA+1
  1469 2C4D 6D 20 34			adc DATAPOS+1
  1470 2C50 91 82			sta (:bp2),y
  1471
  1472 				; optimize OK (MIDFILES), line = 148
  1473
  1474 2C52 C8				iny
  1475 2C53 A9 00			lda #$00
  1476 2C55 91 82			sta (:bp2),y
  1477 2C57 C8				iny
  1478 2C58 91 82			sta (:bp2),y
  1479 2C5A C8				iny
  1480 2C5B 91 82			sta (:bp2),y
  1481 2C5D C8				iny
  1482 2C5E 91 82			sta (:bp2),y
  1483
  1484 				; optimize OK (MIDFILES), line = 149
  1485
  1486 2C60 C8				iny
  1487 2C61 AD 21 34			lda LEN
  1488 2C64 91 82			sta (:bp2),y
  1489 2C66 C8				iny
  1490 2C67 AD 22 34			lda LEN+1
  1491 2C6A 91 82			sta (:bp2),y
  1492 2C6C C8				iny
  1493 2C6D AD 23 34			lda LEN+2
  1494 2C70 91 82			sta (:bp2),y
  1495 2C72 C8				iny
  1496 2C73 AD 24 34			lda LEN+3
  1497 2C76 91 82			sta (:bp2),y
  1498
  1499 				; optimize OK (MIDFILES), line = 150
  1500
  1501 2C78 C8				iny
  1502 2C79 A9 00			lda #$00
  1503 2C7B 91 82			sta (:bp2),y
  1504
  1505 				; optimize OK (MIDFILES), line = 151
  1506
  1507 2C7D C8				iny
  1508 2C7E 91 82			sta (:bp2),y
  1509
  1510 				; optimize OK (MIDFILES), line = 152
  1511
  1512 2C80 AD 25 34			lda NTRKREC
  1513 2C83 18 69 0D			add #$0D
  1514 2C86 8D 25 34			sta NTRKREC
  1515 2C89 90 03			scc
  1516 2C8B EE 26 34			inc NTRKREC+1
  1517
  1518 				; optimize OK (MIDFILES), line = 153
  1519
  1520 2C8E AD 1F 34			lda DATAPOS
  1521 2C91 18 6D 21 34			add LEN
  1522 2C95 8D 1F 34			sta DATAPOS
  1523 2C98 AD 20 34			lda DATAPOS+1
  1524 2C9B 6D 22 34			adc LEN+1
  1525 2C9E 8D 20 34			sta DATAPOS+1
  1526 2CA1			l_03AE
  1527 2CA1			l_039D
  1528 2CA1			l_02D5
  1529
  1530 				; optimize FAIL (1, MIDFILES), line = 104
  1531
  1532 2CA1 E8				inx
  1533 2CA2 A0 01			ldy #1
  1534 2CA4 AD AB 31			lda SYSTEM.IORESULT
  1535 2CA7 C9 80			cmp #$80
  1536 2CA9 90 01			bcc @+
  1537 2CAB 88				dey
  1538 				@
  1539 2CAC 94 94			sty :STACKORIGIN,x
  1540 2CAE AD 0B 2D			lda F
  1541 2CB1 8D BB 31			sta SYSTEM.EOF.F
  1542 2CB4 AD 0C 2D			lda F+1
  1543 2CB7 8D BC 31			sta SYSTEM.EOF.F+1
  1544 2CBA 20 F2 26			jsr SYSTEM.EOF
  1545 2CBD E8				inx
  1546 2CBE AD BD 31 95 94		mva SYSTEM.EOF.RESULT :STACKORIGIN,x
  1547 2CC3 20 1C 23			jsr notBOOLEAN
  1548 2CC6 20 23 23			jsr andAL_CL
  1549 2CC9 AD 16 34 95 94		mva TRACKCOUNT :STACKORIGIN,x
  1550 2CCE AD 17 34 95 A4		mva TRACKCOUNT+1 :STACKORIGIN+STACKWIDTH,x
  1551 2CD3 E8				inx
  1552 2CD4 AD F0 32 95 94		mva NTRACKS :STACKORIGIN,x
  1553 2CD9 AD F1 32 95 A4		mva NTRACKS+1 :STACKORIGIN+STACKWIDTH,x
  1554 2CDE A0 01			ldy #1
  1555 2CE0 20 11 23			jsr cmpEAX_ECX.AX_CX
  1556 2CE3 90 01			bcc @+
  1557 2CE5 88				dey
  1558 				@
  1559 2CE6 94 93			sty :STACKORIGIN-1,x
  1560 2CE8 CA				dex
  1561 2CE9 20 23 23			jsr andAL_CL
  1562 2CEC CA				dex
  1563 2CED CA				dex
  1564 2CEE B5 95			lda :STACKORIGIN+1,x
  1565 2CF0 F0 03 4C BF 2A		jne l_02D6
  1566 2CF5			b_02D6
  1567 				; CloseFile
  1568
  1569 2CF5 8A 48			txa:pha
  1570 2CF7 18				clc
  1571 					@closefile F
  1571 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1571 2CF8 AC 0C 2D		 LDY F+1
  1571 2CFB AD 0B 2D		 LDA F
  1571 2CFE 20 D9 20		 JSR @CLOSEFILE
  1572 2D01 68 AA			pla:tax
  1573
  1574 				; optimize OK (MIDFILES), line = 158
  1575
  1576 2D03 A9 01			lda #$01
  1577 2D05 8D 09 34			sta RESULT
  1578 2D08			@exit
  1579
  1580 				; ------------------------------------------------------------
  1581
  1582 = 3309			adr.FN	= [DATAORIGIN+$0165] .array [256]
  1583 2D08			.var FN	= adr.FN .word
  1584 = 3409			RESULT	= DATAORIGIN+$0265
  1585 2D08			.var F	= DATAORIGIN+$0266 .word
  1586 = 3416			TRACKCOUNT	= DATAORIGIN+$0272
  1587 = 3418			adr.CHUNKHEAD	= [DATAORIGIN+$0274] .array [5]
  1588 2D08			.var CHUNKHEAD	= adr.CHUNKHEAD .word
  1589 = 341D			V	= DATAORIGIN+$0279
  1590 = 341F			DATAPOS	= DATAORIGIN+$027B
  1591 = 3421			LEN	= DATAORIGIN+$027D
  1592 = 3425			NTRKREC	= DATAORIGIN+$0281
  1593 = 31A4			NTRKREC.PTR	= DATAORIGIN+$0000
  1594 = 31A6			NTRKREC.DELTATIME	= DATAORIGIN+$0002
  1595 = 31AA			NTRKREC.SIZE	= DATAORIGIN+$0006
  1596 = 31AE			NTRKREC.SKIPDELTA	= DATAORIGIN+$000A
  1597 = 31AF			NTRKREC.EOT	= DATAORIGIN+$000B
  1598 = 31B0			NTRKREC._EVENT	= DATAORIGIN+$000C
  1599 = 342D			@CASETMP_0005	= DATAORIGIN+$0289
  1600
  1601 = 2D09			@VarData	= FN
  1602 = 011E			@VarDataSize	= 286
  1603
  1604 2D08 60				rts						; ret
  1605 = 2D09 09 33		FN
  1605 = 2D0B 0A 34		F
  1605 = 2D0D 18 34		CHUNKHEAD
  1605 				.endl
  1606
  1607 2D0F			.local	GETTRACKDATA					; FUNCTION
  1608
  1609 				; ------------------------------------------------------------
  1610
  1611 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1612 				; as Pointer
  1613 2D0F B5 94			lda :STACKORIGIN,x
  1614 2D11 8D 2E 34			sta TRACK
  1615 2D14 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1616 2D16 8D 2F 34			sta TRACK+1
  1617 2D19 CA				dex
  1618 2D1A			@main
  1619
  1620 2D1A 4C D2 2D			jmp l_0401
  1621
  1622 2D1D			.local	DECODEDELTATIME					; FUNCTION
  1623
  1624 				; optimize OK (MIDFILES), line = 173
  1625
  1626 2D1D A9 00			lda #$00
  1627 2D1F 8D 4D 34			sta RESULT
  1628 2D22 8D 4E 34			sta RESULT+1
  1629 2D25 8D 4F 34			sta RESULT+2
  1630 2D28 8D 50 34			sta RESULT+3
  1631
  1632 				; --- RepeatUntilProlog
  1633 2D2B			l_0409
  1634
  1635 				; optimize OK (MIDFILES), line = 175
  1636
  1637 2D2B AC 40 34 84 82 AC + 	mwy TRACKDATA :bp2
  1638 2D35 A0 00			ldy #$00
  1639 2D37 B1 82			lda (:bp2),y
  1640 2D39 8D 51 34			sta V
  1641 2D3C EE 40 34			inc TRACKDATA
  1642 2D3F D0 03			sne
  1643 2D41 EE 41 34			inc TRACKDATA+1
  1644
  1645 				; optimize OK (MIDFILES), line = 176
  1646
  1647 2D44 AD 4D 34			lda RESULT
  1648 2D47 85 9D			sta :STACKORIGIN+9
  1649 2D49 AD 4E 34			lda RESULT+1
  1650 2D4C 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1651 2D4E AD 4F 34			lda RESULT+2
  1652 2D51 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
  1653 2D53 AD 50 34			lda RESULT+3
  1654 2D56 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
  1655 2D58 06 9D			asl :STACKORIGIN+9
  1656 2D5A 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  1657 2D5C 26 BD			rol :STACKORIGIN+STACKWIDTH*2+9
  1658 2D5E 26 CD			rol :STACKORIGIN+STACKWIDTH*3+9
  1659 2D60 06 9D			asl :STACKORIGIN+9
  1660 2D62 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  1661 2D64 26 BD			rol :STACKORIGIN+STACKWIDTH*2+9
  1662 2D66 26 CD			rol :STACKORIGIN+STACKWIDTH*3+9
  1663 2D68 06 9D			asl :STACKORIGIN+9
  1664 2D6A 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  1665 2D6C 26 BD			rol :STACKORIGIN+STACKWIDTH*2+9
  1666 2D6E 26 CD			rol :STACKORIGIN+STACKWIDTH*3+9
  1667 2D70 06 9D			asl :STACKORIGIN+9
  1668 2D72 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  1669 2D74 26 BD			rol :STACKORIGIN+STACKWIDTH*2+9
  1670 2D76 26 CD			rol :STACKORIGIN+STACKWIDTH*3+9
  1671 2D78 06 9D			asl :STACKORIGIN+9
  1672 2D7A 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  1673 2D7C 26 BD			rol :STACKORIGIN+STACKWIDTH*2+9
  1674 2D7E 26 CD			rol :STACKORIGIN+STACKWIDTH*3+9
  1675 2D80 06 9D			asl :STACKORIGIN+9
  1676 2D82 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  1677 2D84 26 BD			rol :STACKORIGIN+STACKWIDTH*2+9
  1678 2D86 26 CD			rol :STACKORIGIN+STACKWIDTH*3+9
  1679 2D88 06 9D			asl :STACKORIGIN+9
  1680 2D8A 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  1681 2D8C 26 BD			rol :STACKORIGIN+STACKWIDTH*2+9
  1682 2D8E 26 CD			rol :STACKORIGIN+STACKWIDTH*3+9
  1683 2D90 A5 9D			lda :STACKORIGIN+9
  1684 2D92 8D 4D 34			sta RESULT
  1685 2D95 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  1686 2D97 8D 4E 34			sta RESULT+1
  1687 2D9A A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
  1688 2D9C 8D 4F 34			sta RESULT+2
  1689 2D9F A5 CD			lda :STACKORIGIN+STACKWIDTH*3+9
  1690 2DA1 8D 50 34			sta RESULT+3
  1691
  1692 				; optimize OK (MIDFILES), line = 177
  1693
  1694 2DA4 AD 51 34			lda V
  1695 2DA7 29 7F			and #$7F
  1696 2DA9 0D 4D 34			ora RESULT
  1697 2DAC 8D 4D 34			sta RESULT
  1698
  1699 				; optimize OK (MIDFILES), line = 178
  1700
  1701 2DAF AD 51 34			lda V
  1702 2DB2 10 03 4C 2B 2D		jmi l_0409
  1703 2DB7			@exit
  1704
  1705 				; ------------------------------------------------------------
  1706
  1707 = 344D			RESULT	= DATAORIGIN+$02A9
  1708 = 3451			V	= DATAORIGIN+$02AD
  1709
  1710 = 3451			@VarData	= V
  1711 = 0001			@VarDataSize	= 1
  1712
  1713 2DB7 60				rts						; ret
  1714 				.endl
  1715
  1716 2DB8			.local	GETBYTE						; FUNCTION
  1717
  1718 				; optimize OK (MIDFILES), line = 183
  1719
  1720 2DB8 AC 40 34 84 82 AC + 	mwy TRACKDATA :bp2
  1721 2DC2 A0 00			ldy #$00
  1722 2DC4 B1 82			lda (:bp2),y
  1723 2DC6 8D 52 34			sta RESULT
  1724 2DC9 EE 40 34			inc TRACKDATA
  1725 2DCC D0 03			sne
  1726 2DCE EE 41 34			inc TRACKDATA+1
  1727 2DD1			@exit
  1728
  1729 				; ------------------------------------------------------------
  1730
  1731 = 3452			RESULT	= DATAORIGIN+$02AE
  1732 2DD1 60				rts						; ret
  1733 				.endl
  1734 2DD2			l_0401
  1735
  1736 				; optimize OK (MIDFILES), line = 187
  1737
  1738 2DD2 AC 2E 34 84 82 AC + 	mwy TRACK :bp2
  1739 2DDC A0 00			ldy #$00
  1740 2DDE B1 82			lda (:bp2),y
  1741 2DE0 8D 40 34			sta TRACKDATA
  1742 2DE3 C8				iny
  1743 2DE4 B1 82			lda (:bp2),y
  1744 2DE6 8D 41 34			sta TRACKDATA+1
  1745
  1746 				; optimize OK (MIDFILES), line = 188
  1747
  1748 2DE9 A0 0C			ldy #$0C
  1749 2DEB B1 82			lda (:bp2),y
  1750 2DED 8D 4C 34			sta EVENT
  1751
  1752 				; --- RepeatUntilProlog
  1753 2DF0			l_0455
  1754
  1755 				; optimize OK (MIDFILES), line = 190
  1756
  1757 2DF0 AC 2E 34 84 82 AC + 	mwy TRACK :bp2
  1758 2DFA A0 0A			ldy #$0A
  1759 2DFC B1 82			lda (:bp2),y
  1760 2DFE D0 2E			jne l_0464
  1761
  1762 				; optimize FAIL ('DECODEDELTATIME', MIDFILES), line = 192
  1763
  1764 2E00 20 1D 2D			jsr DECODEDELTATIME
  1765 2E03 AD 4D 34			lda DECODEDELTATIME.RESULT
  1766 2E06 8D 43 34			sta DELTATIME
  1767 2E09 AD 4E 34			lda DECODEDELTATIME.RESULT+1
  1768 2E0C 8D 44 34			sta DELTATIME+1
  1769 2E0F AD 4F 34			lda DECODEDELTATIME.RESULT+2
  1770 2E12 8D 45 34			sta DELTATIME+2
  1771 2E15 AD 50 34			lda DECODEDELTATIME.RESULT+3
  1772 2E18 8D 46 34			sta DELTATIME+3
  1773
  1774 				; optimize OK (MIDFILES), line = 193
  1775
  1776 2E1B 30 0E			jmi l_0479
  1777 2E1D 0D 45 34			ora DELTATIME+2
  1778 2E20 0D 44 34			ora DELTATIME+1
  1779 2E23 0D 43 34			ora DELTATIME
  1780 2E26 F0 03			jeq l_0479
  1781 2E28 4C AF 2F			jmp b_0455					; break
  1782 2E2B			l_0479
  1783 2E2B 4C 3E 2E			jmp l_0485
  1784 2E2E			l_0464
  1785
  1786 				; optimize OK (MIDFILES), line = 197
  1787
  1788 2E2E AC 2E 34 84 82 AC + 	mwy TRACK :bp2
  1789 2E38 A0 0A			ldy #$0A
  1790 2E3A A9 00			lda #$00
  1791 2E3C 91 82			sta (:bp2),y
  1792 2E3E			l_0485
  1793
  1794 				; optimize OK (MIDFILES), line = 199
  1795
  1796 2E3E AC 40 34 84 82 AC + 	mwy TRACKDATA :bp2
  1797 2E48 A0 00			ldy #$00
  1798 2E4A B1 82			lda (:bp2),y
  1799 2E4C 10 09			jpl l_049F
  1800
  1801 				; optimize FAIL ('GETBYTE', MIDFILES), line = 200
  1802
  1803 2E4E 20 B8 2D			jsr GETBYTE
  1804 2E51 AD 52 34			lda GETBYTE.RESULT
  1805 2E54 8D 4C 34			sta EVENT
  1806 2E57			l_049F
  1807
  1808 				; optimize OK (MIDFILES), line = 202
  1809
  1810 2E57 AD 4C 34			lda EVENT
  1811 2E5A 8D 53 34			sta @CASETMP_0006
  1812 2E5D 18				clc						; clear carry for add
  1813 2E5E 69 40			adc #$FF-$BF					; make m = $FF
  1814 2E60 69 40			adc #$BF-$80+1					; carry set if in range n to m
  1815 2E62 B0 0A			bcs @+
  1816 2E64 AD 53 34			lda @CASETMP_0006
  1817 2E67 18				clc						; clear carry for add
  1818 2E68 69 10			adc #$FF-$EF					; make m = $FF
  1819 2E6A 69 10			adc #$EF-$E0+1					; carry set if in range n to m
  1820 2E6C 90 2A			jcc l_04B3
  1821 				@
  1822
  1823 				; optimize OK (MIDFILES), line = 206
  1824
  1825 2E6E AD 4C 34			lda EVENT
  1826 2E71 20 18 28			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1827 2E74 AD EB 32 95 95		mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x
  1828
  1829 				; optimize FAIL ('GETBYTE', MIDFILES), line = 207
  1830
  1831 2E79 20 B8 2D			jsr GETBYTE
  1832 2E7C AD 52 34			lda GETBYTE.RESULT
  1833 2E7F 20 18 28			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1834 2E82 AD EB 32 95 95		mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x
  1835
  1836 				; optimize FAIL ('GETBYTE', MIDFILES), line = 208
  1837
  1838 2E87 20 B8 2D			jsr GETBYTE
  1839 2E8A AD 52 34			lda GETBYTE.RESULT
  1840 2E8D 20 18 28			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1841 2E90 AD EB 32 95 95		mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x
  1842
  1843 2E95 4C 9C 2F			jmp a_0006
  1844 2E98			l_04B3
  1845 2E98 AD 53 34			lda @CASETMP_0006
  1846 2E9B 18				clc						; clear carry for add
  1847 2E9C 69 20			adc #$FF-$DF					; make m = $FF
  1848 2E9E 69 20			adc #$DF-$C0+1					; carry set if in range n to m
  1849 2EA0 90 1C			jcc l_04C4
  1850 				@
  1851
  1852 				; optimize OK (MIDFILES), line = 212
  1853
  1854 2EA2 AD 4C 34			lda EVENT
  1855 2EA5 20 18 28			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1856 2EA8 AD EB 32 95 95		mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x
  1857
  1858 				; optimize FAIL ('GETBYTE', MIDFILES), line = 213
  1859
  1860 2EAD 20 B8 2D			jsr GETBYTE
  1861 2EB0 AD 52 34			lda GETBYTE.RESULT
  1862 2EB3 20 18 28			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1863 2EB6 AD EB 32 95 95		mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x
  1864
  1865 2EBB 4C 9C 2F			jmp a_0006
  1866 2EBE			l_04C4
  1867 2EBE AD 53 34			lda @CASETMP_0006
  1868 2EC1 18				clc						; clear carry for add
  1869 2EC2 69 08			adc #$FF-$F7					; make m = $FF
  1870 2EC4 69 08			adc #$F7-$F0+1					; carry set if in range n to m
  1871 2EC6 90 7C			jcc l_04D3
  1872 				@
  1873
  1874 				; optimize FAIL ('DECODEDELTATIME', MIDFILES), line = 217
  1875
  1876 2EC8 20 1D 2D			jsr DECODEDELTATIME
  1877 2ECB AD 4D 34			lda DECODEDELTATIME.RESULT
  1878 2ECE 8D 47 34			sta MSGLEN
  1879 2ED1 AD 4E 34			lda DECODEDELTATIME.RESULT+1
  1880 2ED4 8D 48 34			sta MSGLEN+1
  1881 2ED7 AD 4F 34			lda DECODEDELTATIME.RESULT+2
  1882 2EDA 8D 49 34			sta MSGLEN+2
  1883 2EDD AD 50 34			lda DECODEDELTATIME.RESULT+3
  1884 2EE0 8D 4A 34			sta MSGLEN+3
  1885
  1886 				; optimize OK (MIDFILES), line = 218
  1887
  1888 2EE3 AD 4C 34			lda EVENT
  1889 2EE6 20 18 28			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1890 2EE9 AD EB 32 95 95		mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x
  1891
  1892 				; --- WhileProlog
  1893 2EEE 4C 1D 2F			jmp l_04DD
  1894 2EF1			l_04DE
  1895
  1896 				; optimize FAIL ('GETBYTE', MIDFILES), line = 221
  1897
  1898 2EF1 20 B8 2D			jsr GETBYTE
  1899 2EF4 AD 52 34			lda GETBYTE.RESULT
  1900 2EF7 8D 4B 34			sta V
  1901
  1902 				; optimize OK (MIDFILES), line = 222
  1903
  1904 2EFA 20 18 28			jsr MIDI_FIFO.FIFO_WRITEBYTE
  1905 2EFD AD EB 32 95 95		mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x
  1906
  1907 				; optimize FAIL (0, MIDFILES), line = 223
  1908
  1909 2F02 AD 47 34 D0 13 AD + 	ded MSGLEN
  1910 2F1D			l_04DD
  1911
  1912 				; optimize OK (MIDFILES), line = 219
  1913
  1914 2F1D AD 4A 34			lda MSGLEN+3
  1915 2F20 30 0B			bmi @+
  1916 2F22 0D 49 34			ora MSGLEN+2
  1917 2F25 0D 48 34			ora MSGLEN+1
  1918 2F28 0D 47 34			ora MSGLEN
  1919 2F2B D0 C4			jne l_04DE
  1920 				@
  1921
  1922 				; optimize OK (MIDFILES), line = 225
  1923
  1924 2F2D AD 4B 34			lda V
  1925 2F30 C9 F7			cmp #$F7
  1926 2F32 D0 08			jne l_0507
  1927 2F34 A9 00			lda #$00
  1928 2F36 8D 42 34			sta FLAGSYSEX
  1929 2F39 4C 41 2F			jmp l_0515
  1930 2F3C			l_0507
  1931 2F3C A9 01			lda #$01
  1932 2F3E 8D 42 34			sta FLAGSYSEX
  1933 2F41			l_0515
  1934
  1935 2F41 4C 9C 2F			jmp a_0006
  1936 2F44			l_04D3
  1937 2F44 AD 53 34			lda @CASETMP_0006
  1938 2F47 C9 FF			cmp #$FF
  1939 2F49 D0 51			jne l_0522
  1940 				@
  1941
  1942 				; optimize FAIL ('GETBYTE', MIDFILES), line = 229
  1943
  1944 2F4B 20 B8 2D			jsr GETBYTE
  1945 2F4E AD 52 34			lda GETBYTE.RESULT
  1946 2F51 8D 4C 34			sta EVENT
  1947
  1948 				; optimize FAIL ('DECODEDELTATIME', MIDFILES), line = 230
  1949
  1950 2F54 20 1D 2D			jsr DECODEDELTATIME
  1951 2F57 AD 4D 34			lda DECODEDELTATIME.RESULT
  1952 2F5A 8D 47 34			sta MSGLEN
  1953 2F5D AD 4E 34			lda DECODEDELTATIME.RESULT+1
  1954 2F60 8D 48 34			sta MSGLEN+1
  1955 2F63 AD 4F 34			lda DECODEDELTATIME.RESULT+2
  1956 2F66 8D 49 34			sta MSGLEN+2
  1957 2F69 AD 50 34			lda DECODEDELTATIME.RESULT+3
  1958 2F6C 8D 4A 34			sta MSGLEN+3
  1959
  1960 				; optimize OK (MIDFILES), line = 231
  1961
  1962 2F6F AD 4C 34			lda EVENT
  1963 2F72 C9 2F			cmp #$2F
  1964 2F74 D0 13			jne l_053C
  1965
  1966 				; optimize OK (MIDFILES), line = 232
  1967
  1968 2F76 AC 2E 34 84 82 AC + 	mwy TRACK :bp2
  1969 2F80 A0 0B			ldy #$0B
  1970 2F82 A9 01			lda #$01
  1971 2F84 91 82			sta (:bp2),y
  1972 2F86 4C 9C 2F			jmp l_054A
  1973 2F89			l_053C
  1974
  1975 				; optimize OK (MIDFILES), line = 234
  1976
  1977 2F89 AD 40 34			lda TRACKDATA
  1978 2F8C 18 6D 47 34			add MSGLEN
  1979 2F90 8D 40 34			sta TRACKDATA
  1980 2F93 AD 41 34			lda TRACKDATA+1
  1981 2F96 6D 48 34			adc MSGLEN+1
  1982 2F99 8D 41 34			sta TRACKDATA+1
  1983 2F9C			l_054A
  1984
  1985 2F9C			l_0522
  1986 2F9C			a_0006
  1987
  1988 				; optimize OK (MIDFILES), line = 237
  1989
  1990 2F9C AC 2E 34 84 82 AC + 	mwy TRACK :bp2
  1991 2FA6 A0 0B			ldy #$0B
  1992 2FA8 B1 82			lda (:bp2),y
  1993 2FAA D0 03 4C F0 2D		jeq l_0455
  1994 2FAF			b_0455
  1995
  1996 				; optimize OK (MIDFILES), line = 238
  1997
  1998 2FAF AC 2E 34 84 82 AC + 	mwy TRACK :bp2
  1999 2FB9 A0 00			ldy #$00
  2000 2FBB AD 40 34			lda TRACKDATA
  2001 2FBE 91 82			sta (:bp2),y
  2002 2FC0 C8				iny
  2003 2FC1 AD 41 34			lda TRACKDATA+1
  2004 2FC4 91 82			sta (:bp2),y
  2005
  2006 				; optimize OK (MIDFILES), line = 239
  2007
  2008 2FC6 A0 0A			ldy #$0A
  2009 2FC8 A9 01			lda #$01
  2010 2FCA 91 82			sta (:bp2),y
  2011
  2012 				; optimize OK (MIDFILES), line = 240
  2013
  2014 2FCC A0 0C			ldy #$0C
  2015 2FCE AD 4C 34			lda EVENT
  2016 2FD1 91 82			sta (:bp2),y
  2017
  2018 				; optimize OK (MIDFILES), line = 241
  2019
  2020 2FD3 AD 43 34			lda DELTATIME
  2021 2FD6 8D 3C 34			sta RESULT
  2022 2FD9 AD 44 34			lda DELTATIME+1
  2023 2FDC 8D 3D 34			sta RESULT+1
  2024 2FDF AD 45 34			lda DELTATIME+2
  2025 2FE2 8D 3E 34			sta RESULT+2
  2026 2FE5 AD 46 34			lda DELTATIME+3
  2027 2FE8 8D 3F 34			sta RESULT+3
  2028 2FEB			@exit
  2029
  2030 				; ------------------------------------------------------------
  2031
  2032 = 342E			TRACK	= DATAORIGIN+$028A
  2033 = 343C			RESULT	= DATAORIGIN+$0298
  2034 = 3440			TRACKDATA	= DATAORIGIN+$029C
  2035 = 3442			FLAGSYSEX	= DATAORIGIN+$029E
  2036 = 3443			DELTATIME	= DATAORIGIN+$029F
  2037 = 3447			MSGLEN	= DATAORIGIN+$02A3
  2038 = 344B			V	= DATAORIGIN+$02A7
  2039 = 344C			EVENT	= DATAORIGIN+$02A8
  2040 = 3453			@CASETMP_0006	= DATAORIGIN+$02AF
  2041
  2042 = 342E			@VarData	= TRACK
  2043 = 001C			@VarDataSize	= 28
  2044
  2045 2FEB 60				rts						; ret
  2046 				.endl
  2047
  2048 				; ------------------------------------------------------------
  2049
  2050 = 32EC			adr.MIDDATA	= [DATAORIGIN+$0148] .array [1]
  2051 2FEC			.var MIDDATA	= adr.MIDDATA .word
  2052 = 32ED			adr.MIDTRACKS	= [DATAORIGIN+$0149] .array [1]
  2053 2FEC			.var MIDTRACKS	= adr.MIDTRACKS .word
  2054 = 32EE			FORMAT	= DATAORIGIN+$014A
  2055 = 32F0			NTRACKS	= DATAORIGIN+$014C
  2056 = 32F2			FPS	= DATAORIGIN+$014E
  2057 = 32F3			FSD	= DATAORIGIN+$014F
  2058 = 32F4			TICKDIV	= DATAORIGIN+$0150
  2059 = 32F6			adr.BI	= [DATAORIGIN+$0152] .array [4]
  2060 2FEC			.var BI	= adr.BI .word
  2061
  2062 = 2FEC EC 32		MIDDATA
  2062 = 2FEE ED 32		MIDTRACKS
  2062 = 2FF0 F6 32		BI
  2062 				.endl							; UNIT MIDFILES
  2063 2FF2			l_004A
  2064
  2065 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', MIDICar Player.pas), line = 24
  2066
  2067 2FF2 20 D1 27			jsr MIDI_FIFO.FIFO_RESET
  2068
  2069 				; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 25
  2070
  2071 2FF5 20 B3 27			jsr MC6850.MC6850_RESET
  2072
  2073 				; optimize OK (MIDICar Player.pas), line = 26
  2074
  2075 2FF8 A9 16			lda #$16
  2076 2FFA 20 B9 27			jsr MC6850.MC6850_INIT
  2077
  2078 				; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 28
  2079
  2080 2FFD 20 8F 27			jsr SYSTEM.PARAMCOUNT
  2081 3000 AD C2 32			lda SYSTEM.PARAMCOUNT.RESULT
  2082 3003 C9 01			cmp #$01
  2083 3005 D0 27			jne l_0582
  2084 				@
  2085
  2086 				; optimize OK (MIDICar Player.pas), line = 29
  2087
  2088 3007 A9 01			lda #$01
  2089 3009 20 98 27			jsr SYSTEM.PARAMSTR
  2090 300C E8				inx
  2091 300D AD AD 27			lda SYSTEM.PARAMSTR.RESULT
  2092 3010 85 88			sta @move.src
  2093 3012 AD AE 27			lda SYSTEM.PARAMSTR.RESULT+1
  2094 3015 85 89			sta @move.src+1
  2095 3017 AC 9F 31 84 82 AC + 	mwy FN :bp2
  2096 3021 A0 00			ldy #$00
  2097 3023 B1 88 91 82 C8 D0 + 	mva:rne (@move.src),y (:bp2),y+
  2098 302A CA				dex
  2099 302B 4C 39 30			jmp l_058E
  2100 302E			l_0582
  2101 302E A0 F0			ldy #256-16
  2102 3030 B9 42 1F 99 64 33 + 	mva:rne CODEORIGIN+$0032+16-256,y adr.FN+16-256,y+
  2103 3039			l_058E
  2104
  2105 				; optimize OK (MIDICar Player.pas), line = 33
  2106
  2107 3039 A9 00			lda #$00
  2108 303B 8D EC 2F			sta MIDFILES.MIDDATA
  2109 303E A9 40			lda #$40
  2110 3040 8D ED 2F			sta MIDFILES.MIDDATA+1
  2111
  2112 				; optimize OK (MIDICar Player.pas), line = 34
  2113
  2114 3043 A9 00			lda #$00
  2115 3045 8D EE 2F			sta MIDFILES.MIDTRACKS
  2116 3048 A9 3F			lda #$3F
  2117 304A 8D EF 2F			sta MIDFILES.MIDTRACKS+1
  2118
  2119 				; optimize FAIL ('MIDFILES.LOADMID', MIDICar Player.pas), line = 35
  2120
  2121 304D E8				inx
  2122 304E AD 9F 31 95 94		mva FN :STACKORIGIN,x
  2123 3053 AD A0 31 95 A4		mva FN+1 :STACKORIGIN+STACKWIDTH,x
  2124 3058 20 43 29			jsr MIDFILES.LOADMID
  2125 305B AD 09 34			lda MIDFILES.LOADMID.RESULT
  2126 305E D0 05			jne l_05A5
  2127 3060 A9 01			lda #$01
  2128 3062 4C 89 31			jmp @halt
  2129 3065			l_05A5
  2130
  2131 				; optimize OK (MIDICar Player.pas), line = 36
  2132
  2133 3065 A9 00			lda #$00
  2134 3067 8D 5A 35			sta TOTALTIME
  2135 306A 8D 5B 35			sta TOTALTIME+1
  2136 306D 8D 5C 35			sta TOTALTIME+2
  2137 3070 8D 5D 35			sta TOTALTIME+3
  2138
  2139 				; --- RepeatUntilProlog
  2140 3073			l_05AF
  2141
  2142 				; optimize OK (MIDICar Player.pas), line = 39
  2143
  2144 3073 AD F0 32			lda MIDFILES.NTRACKS
  2145 3076 8D 5F 35			sta PLAYINGTRACKS
  2146
  2147 				; optimize OK (MIDICar Player.pas), line = 40
  2148
  2149 3079 A9 00			lda #$00
  2150 307B 8D 5E 35			sta CTRK
  2151 307E AC F0 32			ldy MIDFILES.NTRACKS
  2152 3081 88				dey
  2153 3082 8C 86 30			sty @FORTMP_05BF_0
  2154
  2155 3085			l_05C2
  2156 				; --- ForToDoCondition
  2157 3085 A9 00			lda @FORTMP_05BF_0:#$00
  2158 3087 CD 5E 35			cmp CTRK
  2159 308A B0 03 4C 6C 31		jcc l_05D0
  2160
  2161 				; optimize OK (MIDICar Player.pas), line = 42
  2162
  2163 308F A9 0D			lda #$0D
  2164 3091 85 8C			sta :ecx
  2165 3093 AD 5E 35			lda CTRK
  2166 3096 85 84			sta :eax
  2167 					.ifdef fmulinit
  2168 					fmulu_8
  2169 					els
  2170 3098 20 44 24			imulCL
  2171 					eif
  2172 309B AD EE 2F			lda MIDFILES.MIDTRACKS
  2173 309E 18 65 84			add :eax
  2174 30A1 8D 54 35			sta TRACK
  2175 30A4 AD EF 2F			lda MIDFILES.MIDTRACKS+1
  2176 30A7 65 85			adc :eax+1
  2177 30A9 8D 55 35			sta TRACK+1
  2178
  2179 				; optimize OK (MIDICar Player.pas), line = 43
  2180
  2181 30AC AC 54 35 84 82 AC + 	mwy TRACK :bp2
  2182 30B6 A0 0B			ldy #$0B
  2183 30B8 B1 82			lda (:bp2),y
  2184 30BA F0 06			jeq l_05E6
  2185
  2186 				; optimize FAIL (0, MIDICar Player.pas), line = 45
  2187
  2188 30BC CE 5F 35			dec PLAYINGTRACKS
  2189 30BF 4C 64 31			jmp c_05C2					; continue
  2190 30C2			l_05E6
  2191
  2192 				; optimize OK (MIDICar Player.pas), line = 47
  2193
  2194 30C2 AC 54 35 84 82 AC + 	mwy TRACK :bp2
  2195 30CC A0 02			ldy #$02
  2196 30CE B1 82			lda (:bp2),y
  2197 30D0 8D 56 35			sta DELTATIME
  2198 30D3 C8				iny
  2199 30D4 B1 82			lda (:bp2),y
  2200 30D6 8D 57 35			sta DELTATIME+1
  2201 30D9 C8				iny
  2202 30DA B1 82			lda (:bp2),y
  2203 30DC 8D 58 35			sta DELTATIME+2
  2204 30DF C8				iny
  2205 30E0 B1 82			lda (:bp2),y
  2206 30E2 8D 59 35			sta DELTATIME+3
  2207
  2208 				; optimize OK (MIDICar Player.pas), line = 48
  2209
  2210 30E5 0D 58 35			ora DELTATIME+2
  2211 30E8 0D 57 35			ora DELTATIME+1
  2212 30EB 0D 56 35			ora DELTATIME
  2213 30EE D0 26			jne l_0601
  2214
  2215 				; optimize FAIL ('MIDFILES.GETTRACKDATA', MIDICar Player.pas), line = 49
  2216
  2217 30F0 E8				inx
  2218 30F1 AD 54 35 95 94		mva TRACK :STACKORIGIN,x
  2219 30F6 AD 55 35 95 A4		mva TRACK+1 :STACKORIGIN+STACKWIDTH,x
  2220 30FB 20 0F 2D			jsr MIDFILES.GETTRACKDATA
  2221 30FE AD 3C 34			lda MIDFILES.GETTRACKDATA.RESULT
  2222 3101 8D 56 35			sta DELTATIME
  2223 3104 AD 3D 34			lda MIDFILES.GETTRACKDATA.RESULT+1
  2224 3107 8D 57 35			sta DELTATIME+1
  2225 310A AD 3E 34			lda MIDFILES.GETTRACKDATA.RESULT+2
  2226 310D 8D 58 35			sta DELTATIME+2
  2227 3110 AD 3F 34			lda MIDFILES.GETTRACKDATA.RESULT+3
  2228 3113 8D 59 35			sta DELTATIME+3
  2229 3116			l_0601
  2230
  2231 				; optimize OK (MIDICar Player.pas), line = 59
  2232
  2233 3116 AD 59 35			lda DELTATIME+3
  2234 3119 30 49			jmi l_061A
  2235 311B 0D 58 35			ora DELTATIME+2
  2236 311E 0D 57 35			ora DELTATIME+1
  2237 3121 0D 56 35			ora DELTATIME
  2238 3124 F0 3E			jeq l_061A
  2239
  2240 				; optimize FAIL (0, MIDICar Player.pas), line = 61
  2241
  2242 3126 AD 56 35 D0 13 AD + 	ded DELTATIME
  2243
  2244 				; optimize OK (MIDICar Player.pas), line = 62
  2245
  2246 3141 AC 54 35 84 82 AC + 	mwy TRACK :bp2
  2247 314B A0 02			ldy #$02
  2248 314D AD 56 35			lda DELTATIME
  2249 3150 91 82			sta (:bp2),y
  2250 3152 C8				iny
  2251 3153 AD 57 35			lda DELTATIME+1
  2252 3156 91 82			sta (:bp2),y
  2253 3158 C8				iny
  2254 3159 AD 58 35			lda DELTATIME+2
  2255 315C 91 82			sta (:bp2),y
  2256 315E C8				iny
  2257 315F AD 59 35			lda DELTATIME+3
  2258 3162 91 82			sta (:bp2),y
  2259 3164			l_061A
  2260
  2261 				; --- ForToDoEpilog
  2262 3164			c_05C2
  2263 3164 EE 5E 35			inc CTRK
  2264 3167 F0 03 4C 85 30		jne l_05C2
  2265 316C			l_05D0
  2266
  2267 				; optimize FAIL (0, MIDICar Player.pas), line = 65
  2268
  2269 316C EE 5A 35 D0 0D EE + 	ind TOTALTIME
  2270
  2271 				; optimize FAIL ('MIDI_FIFO.FIFO_FLUSH', MIDICar Player.pas), line = 66
  2272
  2273 317E 20 B7 28			jsr MIDI_FIFO.FIFO_FLUSH
  2274
  2275 				; optimize OK (MIDICar Player.pas), line = 67
  2276
  2277 3181 AD 5F 35			lda PLAYINGTRACKS
  2278 3184 F0 03 4C 73 30		jne l_05AF
  2279
  2280 				; ------------------------------------------------------------
  2281
  2282 = 3454			adr.FN	= [DATAORIGIN+$02B0] .array [256]
  2283 3189			.var FN	= adr.FN .word
  2284 = 3554			TRACK	= DATAORIGIN+$03B0
  2285 = 31A4			TRACK.PTR	= DATAORIGIN+$0000
  2286 = 31A6			TRACK.DELTATIME	= DATAORIGIN+$0002
  2287 = 31AA			TRACK.SIZE	= DATAORIGIN+$0006
  2288 = 31AE			TRACK.SKIPDELTA	= DATAORIGIN+$000A
  2289 = 31AF			TRACK.EOT	= DATAORIGIN+$000B
  2290 = 31B0			TRACK._EVENT	= DATAORIGIN+$000C
  2291 = 3556			DELTATIME	= DATAORIGIN+$03B2
  2292 = 355A			TOTALTIME	= DATAORIGIN+$03B6
  2293 = 355E			CTRK	= DATAORIGIN+$03BA
  2294 = 355F			PLAYINGTRACKS	= DATAORIGIN+$03BB
  2295 3189			@exit
  2296
  2297 3189 A2 00		@halt	ldx #$00
  2298 318B 9A				txs
  2299 					.ifdef MAIN.@DEFINES.ROMOFF
  2300 					inc portb
  2301 					.fi
  2302
  2303 318C A0 01			ldy #$01
  2304
  2305 318E 60				rts
  2306
  2307 				; ------------------------------------------------------------
  2308
  2309 318F 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  2310
  2311 				; ------------------------------------------------------------
  2312
  2313 319F			.local	@DEFINES
  2314 319F			ATARI
  2315 				.endl
  2316
  2317 319F			.local	@RESOURCE
  2318 				.endl
  2319
  2320 = 319F 54 34		FN
  2320 				.endl							; MAIN
  2321
  2322 				; ------------------------------------------------------------
  2323 				; ------------------------------------------------------------
  2324
  2325 				.macro	UNITINITIALIZATION
  2326 				
  2327 					.ifdef MAIN.SYSTEM.@UnitInit
  2328 					jsr MAIN.SYSTEM.@UnitInit
  2329 					.fi
  2330 				
  2331 					.ifdef MAIN.MC6850.@UnitInit
  2332 					jsr MAIN.MC6850.@UnitInit
  2333 					.fi
  2334 				
  2335 					.ifdef MAIN.DOS.@UnitInit
  2336 					jsr MAIN.DOS.@UnitInit
  2337 					.fi
  2338 				
  2339 					.ifdef MAIN.STRUTILS.@UnitInit
  2340 					jsr MAIN.STRUTILS.@UnitInit
  2341 					.fi
  2342 				
  2343 					.ifdef MAIN.SYSUTILS.@UnitInit
  2344 					jsr MAIN.SYSUTILS.@UnitInit
  2345 					.fi
  2346 				
  2347 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  2348 					jsr MAIN.MIDI_FIFO.@UnitInit
  2349 					.fi
  2350 				
  2351 					.ifdef MAIN.MIDFILES.@UnitInit
  2352 					jsr MAIN.MIDFILES.@UnitInit
  2353 					.fi
  2354 				.endm
  2355
  2356 				; ------------------------------------------------------------
  2357
  2358 					ift .SIZEOF(MAIN.SYSTEM) > 0
  2359 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  2359 				SYSTEM: $2644..$27B2
  2360 					eif
  2361
  2362 					ift .SIZEOF(MAIN.MC6850) > 0
  2363 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  2363 				MC6850: $27B3..$27D0
  2364 					eif
  2365
  2366 					ift .SIZEOF(MAIN.DOS) > 0
  2367 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  2368 					eif
  2369
  2370 					ift .SIZEOF(MAIN.STRUTILS) > 0
  2371 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  2372 					eif
  2373
  2374 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  2375 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  2376 					eif
  2377
  2378 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  2379 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  2379 				MIDI_FIFO: $27D1..$28D3
  2380 					eif
  2381
  2382 					ift .SIZEOF(MAIN.MIDFILES) > 0
  2383 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  2383 				MIDFILES: $28D4..$2FF1
  2384 					eif
  2385
  2386 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  2386 				CODE: $2000..$319E
  2387
  2388 				; ------------------------------------------------------------
  2389
  2390 31A1				.align $0004
  2391
  2392 31A4			DATAORIGIN
  2393 31A4-31A9> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  2394
  2395 = 0006			VARINITSIZE	= *-DATAORIGIN
  2396 = 03BD			VARDATASIZE	= 957
  2397
  2398 = 3561			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  2399
  2400 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  2400 				DATA: $31A4..$3561
  2401
  2402 02E0-02E1> 0F 26			run START
  2403
  2404 				; ------------------------------------------------------------
  2405
  2406 				.macro	STATICDATA
  2407 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $0A $4F $70  $65 $6E $20 $66 $69 $6C $65 $20
  2408 				.by  $00 $0B $49 $2F $4F $20 $45 $72  $72 $6F $72 $20 $23 $00 $04 $4D  $54 $68 $64 $00 $04 $4D $54 $72
  2409 				.by  $6B $00 $0F $44 $32 $3A $4F $56  $45 $52 $57 $4F $52 $4C $2E $4D  $49 $44 $00
  2410 				.endm
  2411
  2412 					end
