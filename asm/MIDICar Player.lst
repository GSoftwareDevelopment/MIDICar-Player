mads 2.1.6
Source: MIDICar Player.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 8000			CODEORIGIN	= $8000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				.local	RESOURCE
   105 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1142 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 8075				RCDATA 'resources/font_s.fnt' CHARS_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('resources/font_s.fnt')-0
    28 8075				org main.CHARS_ADDR
    30 3000-33FF> 00 00 00 00 + 	ins 'resources/font_s.fnt',0
    32 					.print '$R RCDATA  ',main.CHARS_ADDR,'..',*-1," 'resources/font_s.fnt'"
    32 				$R RCDATA  $3000..$33FF 'resources/font_s.fnt'
Source: MIDICar Player.a65
   110 3400				RCASM 'resources/dlist.asm' DLIST_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 3400				org RESORIGIN
     4 = 0022			len = .sizeof(_DLIST_ADDR)
     6 				mcpy	ift main.DLIST_ADDR+len >= $bc20
    11 8075-80B7> 20 41 80		jsr sys.off
    13 8078 A9 96 85 88 A9 80 +  MWA #DATA EDX
    13 8080 A9 00 85 8C A9 34 +  MWA #MAIN.DLIST_ADDR ECX
    13 8088 A9 22 85 84 A9 00 +  MWA #LEN EAX
    13 8090 20 00 80		 JSR RESOURCE.MEMCPY
    15 8093 4C 65 80			jmp sys.on
    16 8096			data
Source: dlist.inc
     1 = 0000			DL_BLANK1 = 0; // 1 blank line
     2 = 0010			DL_BLANK2 = %00010000; // 2 blank lines
     3 = 0020			DL_BLANK3 = %00100000; // 3 blank lines
     4 = 0030			DL_BLANK4 = %00110000; // 4 blank lines
     5 = 0040			DL_BLANK5 = %01000000; // 5 blank lines
     6 = 0050			DL_BLANK6 = %01010000; // 6 blank lines
     7 = 0060			DL_BLANK7 = %01100000; // 7 blank lines
     8 = 0070			DL_BLANK8 = %01110000; // 8 blank lines
    10 = 0080			DL_DLI = %10000000; // Order to run DLI
    11 = 0040			DL_LMS = %01000000; // Order to set new memory address
    12 = 0020			DL_VSCROLL = %00100000; // Turn on vertical scroll on this line
    13 = 0010			DL_HSCROLL = %00010000; // Turn on horizontal scroll on this line
    15 = 0002			DL_MODE_40x24T2 = 2; // Antic Modes
    16 = 0004			DL_MODE_40x24T5 = 4;
    17 = 0005			DL_MODE_40x12T5 = 5;
    18 = 0006			DL_MODE_20x24T5 = 6;
    19 = 0007			DL_MODE_20x12T5 = 7;
    20 = 0008			DL_MODE_40x24G4 = 8;
    21 = 0009			DL_MODE_80x48G2 = 9;
    22 = 000A			DL_MODE_80x48G4 = $A;
    23 = 000B			DL_MODE_160x96G2 = $B;
    24 = 000C			DL_MODE_160x192G2 = $C;
    25 = 000D			DL_MODE_160x96G4 = $D;
    26 = 000E			DL_MODE_160x192G4 = $E;
    27 = 000F			DL_MODE_320x192G2 = $F;
    29 = 0001			DL_JMP = %00000001; // Order to jump
    30 = 0041			DL_JVB = %01000001; // Jump to begining
     3 3400			dl_start
     4 3400 70 70		    :2 dta DL_BLANK8
     6 3402 42 22 34		    dta DL_MODE_40x24T2 + DL_LMS, A(MAIN.SCREEN_ADDR)
     7 3405 02			    dta DL_MODE_40x24T2
     9 3406 00			    dta DL_BLANK1
    11 3407 02 02 02 02 02 02 +     :21 dta DL_MODE_40x24T2
    13 341C 07			    dta DL_MODE_20x12T5
    14 341D 00			    dta DL_BLANK1
    15 341E 02			    dta DL_MODE_40x24T2
    17 341F 41 00 34		    dta DL_JVB, A(dl_start)
    23 					.print '$R RCASM   ',main.DLIST_ADDR,'..',main.DLIST_ADDR+len-1," 'resources/dlist.asm'"
    23 				$R RCASM   $3400..$3421 'resources/dlist.asm'
    25 02E2-02E3> 75 80			ini mcpy
Source: MIDICar Player.a65
   111 80B8				RCDATA 'resources/header.obj' SCREEN_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0050			len = .filesize('resources/header.obj')-0
    28 80B8				org main.SCREEN_ADDR
    30 3422-3471> 49 4A 48 49 + 	ins 'resources/header.obj',0
    32 					.print '$R RCDATA  ',main.SCREEN_ADDR,'..',*-1," 'resources/header.obj'"
    32 				$R RCDATA  $3422..$3471 'resources/header.obj'
Source: MIDICar Player.a65
   112 3472				RCDATA 'resources/uvmeter.obj' UVMETER_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0040			len = .filesize('resources/uvmeter.obj')-0
    28 3472				org main.UVMETER_ADDR
    30 3880-38BF> 40 40 40 40 + 	ins 'resources/uvmeter.obj',0
    32 					.print '$R RCDATA  ',main.UVMETER_ADDR,'..',*-1," 'resources/uvmeter.obj'"
    32 				$R RCDATA  $3880..$38BF 'resources/uvmeter.obj'
Source: MIDICar Player.a65
   113 				.endl
   114
   115 				; ------------------------------------------------------------
   116
   117 38C0				org CODEORIGIN
   118
   119 8000				STATICDATA
Macro: STATICDATA [Source: MIDICar Player.a65]
     1 8000-A20C> 00 00 04 4C + .by  $00 $00 $04 $4C $4F $4F $50 $00  $04 $20 $20 $20 $20 $00 $02 $45  $3A $00 $09 $20 $50 $6C $61 $79
     2 8018 69 6E 67 20 00 09 + .by  $69 $6E $67 $20 $00 $09 $20 $4E  $6F $20 $73 $6F $6E $67 $20 $00  $09 $20 $20 $50 $61 $75 $73 $65
     3 8030 20 20 00 09 20 53 + .by  $20 $20 $00 $09 $20 $53 $74 $6F  $70 $70 $65 $64 $20 $00 $07 $4C  $6F $61 $64 $69 $6E $67 $00 $10
     4 8048 05 12 12 12 12 12 + .by  $05 $12 $12 $12 $12 $12 $54 $49  $4D $45 $12 $12 $12 $12 $12 $17  $00 $05 $4D $65 $6D $3A $20 $00
     5 8060 02 4B 42 00 14 20 + .by  $02 $4B $42 $00 $14 $20 $55 $6E  $73 $75 $70 $70 $6F $72 $74 $65  $64 $20 $66 $6F $72 $6D $61 $74
     6 8078 20 00 14 20 4E 6F + .by  $20 $00 $14 $20 $4E $6F $74 $20  $65 $6E $6F $75 $67 $68 $74 $20  $6D $65 $6D $6F $72 $79 $20 $00
     7 8090 0D 20 49 2F 4F 20 + .by  $0D $20 $49 $2F $4F $20 $45 $72  $72 $6F $72 $20 $23 $20 $00 $00  $00 $0A $00 $0A $0A $0A $00 $00
     8 80A8 00 F0 7E 7F 09 01 + .by  $00 $F0 $7E $7F $09 $01 $F7
Source: MIDICar Player.a65
   120
   121 				; ------------------------------------------------------------
   122
   123 80AF			RTLIB
   124 80AF				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   125
   126 				.print 'ZPAGE: ',zpage,'..',zpend-1
   126 				ZPAGE: $0080..$00D3
   127
   128 				.print 'RTLIB: ',RTLIB,'..',*-1
   128 				RTLIB: $80AF..$8BBB
   129
   130 				; ------------------------------------------------------------
   131
   132 8BBC			START
   133 8BBC BA				tsx
   134 8BBD 8E EF A1			stx MAIN.@halt+1
   135
   136 					.ifdef fmulinit
   137 					fmulinit
   138 					.fi
   139
   140 = 01E9			VLEN	= VARDATASIZE-VARINITSIZE
   141 = 2006			VADR	= DATAORIGIN+VARINITSIZE
   142
   143 					ift VADR > $BFFF
   144 					ert 'Invalid memory address range ',VADR
   145 					eli (VLEN>0) && (VLEN<=256)
   146 					ldx #256-VLEN
   147 					lda #$00
   148 					sta:rne VADR+VLEN-256,x+
   149 					eli VLEN>256
   150 					@fill #VADR #VLEN #$00
   150 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   150 8BC0 A9 06 85 88 A9 20 +  MWA #VADR @FILL.PTR1
   150 8BC8 A9 E9 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   150 8BD0 A9 00 85 84		 MVA #$00 @FILL.PTR2
   150 8BD4 20 A8 84		 JSR @FILL
   151 					eif
   152
   153 				.ifdef :psptr
   154 					mwa #PROGRAMSTACK :psptr
   155 				.fi
   156
   157 					.ifdef MAIN.@DEFINES.ROMOFF
   158 8BD7				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 8BD7			.local	rominit
     5
     6 8BD7 78			        sei
     7 8BD8 A9 00		        lda #%00000000
     8 8BDA 8D 0E D4		        sta NMIEN       ;$D40E
     9 8BDD A9 FE		        lda #%11111110
    10 8BDF 8D 01 D3		        sta PORTB       ;$D301
    11
    12 8BE2 A2 03			ldx #3
    13 8BE4 A0 00			ldy #0
    14 8BE6 EE 01 D3		mv	inc portb
    15 8BE9 B9 00 E0		afnt0	lda $e000,y
    16 8BEC CE 01 D3			dec portb
    17 8BEF 99 00 E0		afnt1	sta $e000,y
    18 8BF2 C8				iny
    19 8BF3 D0 F1			bne mv
    20 8BF5 EE EB 8B			inc afnt0+2
    21 8BF8 EE F1 8B			inc afnt1+2
    22 8BFB CA				dex
    23 8BFC 10 E8			bpl mv
    24
    25 8BFE A2 1B		        ldx #<nmiint
    26 8C00 A0 8C		        ldy #>nmiint
    27 8C02 8E FA FF		        stx NMIVEC      ;$FFFA
    28 8C05 8C FB FF		        sty NMIVEC+1
    29
    30 8C08 A2 25		        ldx #<irqint
    31 8C0A A0 8C		        ldy #>irqint
    32 8C0C 8E FE FF		        stx IRQVEC      ;$FFFE
    33 8C0F 8C FF FF		        sty IRQVEC+1
    34
    35 8C12 A9 40		        lda #%01000000
    36 8C14 8D 0E D4		        sta NMIEN       ;$D40E
    37 8C17 58			        cli
    38
    39 8C18 4C 46 8C			jmp skp
    40
    41
    42
    43 8C1B 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 8C1E 10 03		        spl
    45 8C20 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 8C23 38			        sec
    48 8C24 24			        .byte $24        ;BIT $18
    49
    50 8C25 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 8C26 EE 01 D3		        inc PORTB       ;$D301
    55
    56 8C29 48			        pha
    57 8C2A 8A			        txa
    58 8C2B 48			        pha
    59 8C2C BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 8C2D A9 8C		        lda #>iret      ;adres procedury iret
    64 8C2F 48			        pha
    65 8C30 A9 3F		        lda #<iret
    66 8C32 48			        pha
    67 8C33 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 8C36 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 8C37 90 03		        scc
    73 8C39 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 8C3C 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 8C3F 68			iret	pla
    77 8C40 AA				tax
    78 8C41 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 8C42 CE 01 D3		        dec PORTB       ;$D301
    83 8C45 40			        rti
    84
    85 8C46			skp
    86
    87 				.endl
    88
   159 					.fi
   160
   161 8C46 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   162 8C48 BD 40 03 9D F7 A1 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   163
   164 8C51 E8				inx						; X = 0
   165 8C52 86 80			stx bp						; BP = 0
   166
   167 8C54 8E 0F D2			stx skctl					; reset POKEY
   168 8C57 A9 03			lda #3
   169 8C59 8D 0F D2			sta skctl
   170
   171 8C5C CA				dex						; X = 255
   172
   173 8C5D				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: MIDICar Player.a65]
    15 8C5D 20 70 98			jsr MAIN.MIDFILES.@UnitInit
Source: MIDICar Player.a65
   174
   175 8C60			.local	MAIN						; PROCEDURE
   176
   177 8C60 4C F7 9F			jmp l_00A6
   178
   179 				; ------------------------------------------------------------
   180
   181 8C63			.local	SYSTEM						; UNIT
   182
   183 8C63			.local	FILEPOS						; FUNCTION | ASSEMBLER
   184
   185 				; -------------------  ASM Block 00000011  -------------------
   186
   187 8C63 8A 48			txa:pha
   188
   189 8C65 AD 0B 20 85 82 AD + 	mwa f :bp2
   190
   191 8C6F A0 04			ldy #s@file.chanel
   192 8C71 B1 82			lda (:bp2),y
   193 8C73 AA				tax
   194 8C74 A9 26			lda #38
   195 8C76 9D 42 03			sta iccmd,x
   196
   197 8C79				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8C79 EE 01 D3				inc portb
     6 8C7C 20 56 E4				jsr CIOV
     8 8C7F CE 01 D3				dec portb
Source: MIDICar Player.a65
   198
   199 8C82 8C 07 20			sty IOResult
   200
   201 8C85 BD 4C 03 85 84		mva icax3,x :eax
   202 8C8A BD 4D 03 85 85		mva icax4,x :eax+1
   203 8C8F BD 4E 03 85 86		mva icax5,x :eax+2
   204
   205 8C94 A9 00 85 87			mva #$00 :eax+3
   206 8C98 85 8E			sta :ecx+2
   207 8C9A 85 8F			sta :ecx+3
   208
   209 8C9C A0 02			ldy #s@file.record
   210 8C9E B1 82			lda (:bp2),y
   211 8CA0 85 8C			sta :ecx
   212 8CA2 C8				iny
   213 8CA3 B1 82			lda (:bp2),y
   214 8CA5 85 8D			sta :ecx+1
   215
   216 8CA7 20 F6 85			jsr idivEAX_ECX.main
   217
   218 8CAA A5 84 8D 0D 20		mva :eax Result
   219 8CAF A5 85 8D 0E 20		mva :eax+1 Result+1
   220 8CB4 A5 86 8D 0F 20		mva :eax+2 Result+2
   221 8CB9 A5 87 8D 10 20		mva :eax+3 Result+3
   222
   223 8CBE 68 AA			pla:tax
   224
   225 8CC0			@exit
   226
   227 				; ------------------------------------------------------------
   228
   229 = 200B			F	= DATAORIGIN+$000B
   230 = 200D			RESULT	= DATAORIGIN+$000D
   231
   232 = 200B			@VarData	= F
   233 = 0002			@VarDataSize	= 2
   234
   235 8CC0 60				rts						; ret
   236 				.endl
   237
   238 8CC1			.local	SEEK						; PROCEDURE | ASSEMBLER
   239
   240 				; -------------------  ASM Block 00000012  -------------------
   241
   242 8CC1 8A 48			txa:pha
   243
   244 8CC3 AD 11 20 85 82 AD + 	mwa f :bp2
   245
   246 8CCD A0 04			ldy #s@file.chanel
   247 8CCF B1 82			lda (:bp2),y
   248 8CD1 AA				tax
   249 8CD2 A9 25			lda #37
   250 8CD4 9D 42 03			sta iccmd,x
   251
   252 8CD7 A0 02			ldy #s@file.record
   253 8CD9 B1 82			lda (:bp2),y
   254 8CDB 85 84			sta :eax
   255 8CDD C8				iny
   256 8CDE B1 82			lda (:bp2),y
   257 8CE0 85 85			sta :eax+1
   258 8CE2 A9 00			lda #$00
   259 8CE4 85 86			sta :eax+2
   260 8CE6 85 87			sta :eax+3
   261
   262 8CE8 AD 13 20 85 8C		mva a :ecx
   263 8CED AD 14 20 85 8D		mva a+1 :ecx+1
   264 8CF2 AD 15 20 85 8E		mva a+2 :ecx+2
   265 8CF7 AD 16 20 85 8F		mva a+3 :ecx+3
   266
   267 8CFC 20 AA 85			jsr imulECX
   268
   269 8CFF A5 84 9D 4C 03		mva :eax icax3,x
   270 8D04 A5 85 9D 4D 03		mva :eax+1 icax4,x
   271 8D09 A5 86 9D 4E 03		mva :eax+2 icax5,x
   272
   273 8D0E				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8D0E EE 01 D3				inc portb
     6 8D11 20 56 E4				jsr CIOV
     8 8D14 CE 01 D3				dec portb
Source: MIDICar Player.a65
   274
   275 8D17 8C 07 20			sty IOResult
   276
   277 8D1A 68 AA			pla:tax
   278
   279 				; ------------------------------------------------------------
   280
   281 = 2011			F	= DATAORIGIN+$0011
   282 = 2013			A	= DATAORIGIN+$0013
   283
   284 = 2011			@VarData	= F
   285 = 0006			@VarDataSize	= 6
   286
   287 8D1C			@exit
   288 					.ifdef @new
   289 					lda <@VarData
   290 					sta :ztmp
   291 					lda >@VarData
   292 					ldy #@VarDataSize-1
   293 					jmp @FreeMem
   294 					els
   295 8D1C 60				rts						; ret
   296 					eif
   297 				.endl
   298
   299 8D1D			.local	EOF						; FUNCTION
   300
   301 				; optimize OK (SYSTEM), line = 1163
   302
   303 8D1D AD 17 20			lda F
   304 8D20 8D 0B 20			sta FILEPOS.F
   305 8D23 AD 18 20			lda F+1
   306 8D26 8D 0C 20			sta FILEPOS.F+1
   307 8D29 20 63 8C			jsr FILEPOS
   308 8D2C AD 0D 20			lda FILEPOS.RESULT
   309 8D2F 8D 1A 20			sta I
   310 8D32 AD 0E 20			lda FILEPOS.RESULT+1
   311 8D35 8D 1B 20			sta I+1
   312 8D38 AD 0F 20			lda FILEPOS.RESULT+2
   313 8D3B 8D 1C 20			sta I+2
   314 8D3E AD 10 20			lda FILEPOS.RESULT+3
   315 8D41 8D 1D 20			sta I+3
   316 				; BlockRead
   317
   318 				; optimize OK (SYSTEM), line = 1165
   319
   320 8D44 AC 17 20 84 82 AC + 	mwy F :bp2
   321 8D4E A0 06			ldy #s@file.buffer
   322 8D50 AD B1 8D			lda BF
   323 8D53 91 82			sta (:bp2),y
   324 8D55 C8				iny
   325 8D56 AD B2 8D			lda BF+1
   326 8D59 91 82			sta (:bp2),y
   327 8D5B A0 08			ldy #s@file.nrecord
   328 8D5D A9 01			lda #$01
   329 8D5F 91 82			sta (:bp2),y
   330 8D61 C8				iny
   331 8D62 A9 00			lda #$00
   332 8D64 91 82			sta (:bp2),y
   333
   334 8D66 8A 48			txa:pha
   335 8D68 38				sec
   336 					@readfile F, #7
   336 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
   336 8D69 AC 18 20		 LDY F+1
   336 8D6C AD 17 20		 LDA F
   336 8D6F A2 07		 LDX# 7
   336 8D71 20 7E 81		 JSR @READFILE
   337 8D74 68 AA			pla:tax
   338
   339 				; optimize OK (SYSTEM), line = 1167
   340
   341 8D76 AD 17 20			lda F
   342 8D79 8D 11 20			sta SEEK.F
   343 8D7C AD 18 20			lda F+1
   344 8D7F 8D 12 20			sta SEEK.F+1
   345 8D82 AD 1A 20			lda I
   346 8D85 8D 13 20			sta SEEK.A
   347 8D88 AD 1B 20			lda I+1
   348 8D8B 8D 14 20			sta SEEK.A+1
   349 8D8E AD 1C 20			lda I+2
   350 8D91 8D 15 20			sta SEEK.A+2
   351 8D94 AD 1D 20			lda I+3
   352 8D97 8D 16 20			sta SEEK.A+3
   353 8D9A 20 C1 8C			jsr SEEK
   354
   355 				; -------------------  ASM Block 00000013  -------------------
   356
   357 8D9D AD 17 20 85 82 AD + 	mwa f :bp2
   358
   359 8DA7 A0 05			ldy #s@file.status
   360 8DA9 B1 82			lda (:bp2),y
   361 8DAB 29 01			and #e@file.eof
   362 8DAD 8D 19 20			sta Result
   363
   364 8DB0			@exit
   365
   366 				; ------------------------------------------------------------
   367
   368 = 2017			F	= DATAORIGIN+$0017
   369 = 2019			RESULT	= DATAORIGIN+$0019
   370 = 201A			I	= DATAORIGIN+$001A
   371 = 201E			adr.BF	= [DATAORIGIN+$001E] .array [256]
   372 8DB0			.var BF	= adr.BF .word
   373
   374 = 2017			@VarData	= F
   375 = 0106			@VarDataSize	= 262
   376
   377 8DB0 60				rts						; ret
   378 = 8DB1 1E 20		BF
   378 				.endl
   379
   380 8DB3			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   381
   382 				; ------------------------------------------------------------
   383
   384 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   385 				; as Pointer
   386 8DB3 B5 94			lda :STACKORIGIN,x
   387 8DB5 85 88			sta A
   388 8DB7 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   389 8DB9 85 89			sta A+1
   390 8DBB CA				dex
   391 8DBC 10 03 4C C6 8D		jmi @main
   392
   393 				; ------------------------------------------------------------
   394
   395 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   396 				; as Pointer
   397 8DC1 B5 94			lda :STACKORIGIN,x
   398 8DC3 85 8C			sta VALUE
   399 8DC5 CA				dex
   400 8DC6			@main
   401
   402 				; -------------------  ASM Block 00000018  -------------------
   403
   404 8DC6 A0 00			ldy #0
   405 8DC8 A5 8C 91 88			mva value (:edx),y
   406
   407 				; ------------------------------------------------------------
   408
   409 = 0088			A	= :EDX
   410 = 008C			VALUE	= :ECX
   411 8DCC			@exit
   412 					.ifdef @new
   413 					lda <@VarData
   414 					sta :ztmp
   415 					lda >@VarData
   416 					ldy #@VarDataSize-1
   417 					jmp @FreeMem
   418 					els
   419 8DCC 60				rts						; ret
   420 					eif
   421 				.endl
   422
   423 8DCD			.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER
   424
   425 				; ------------------------------------------------------------
   426
   427 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   428 				; as Pointer
   429 8DCD B5 94			lda :STACKORIGIN,x
   430 8DCF 85 88			sta A
   431 8DD1 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   432 8DD3 85 89			sta A+1
   433 8DD5 CA				dex
   434 8DD6 30 09			jmi @main
   435
   436 				; ------------------------------------------------------------
   437
   438 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   439 				; as Pointer
   440 8DD8 B5 94			lda :STACKORIGIN,x
   441 8DDA 85 8C			sta VALUE
   442 8DDC B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   443 8DDE 85 8D			sta VALUE+1
   444 8DE0 CA				dex
   445 8DE1			@main
   446
   447 				; -------------------  ASM Block 00000019  -------------------
   448
   449 8DE1 A0 00			ldy #0
   450 8DE3 A5 8C 91 88			mva value (:edx),y
   451 8DE7 C8				iny
   452 8DE8 A5 8D 91 88			mva value+1 (:edx),y
   453
   454 				; ------------------------------------------------------------
   455
   456 = 0088			A	= :EDX
   457 = 008C			VALUE	= :ECX
   458 8DEC			@exit
   459 					.ifdef @new
   460 					lda <@VarData
   461 					sta :ztmp
   462 					lda >@VarData
   463 					ldy #@VarDataSize-1
   464 					jmp @FreeMem
   465 					els
   466 8DEC 60				rts						; ret
   467 					eif
   468 				.endl
   469
   470 8DED			.local	FILLCHAR_0109					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   471
   472 					.MACRO m@INLINE
   473 				
   474 				; -------------------  ASM Block 00000021  -------------------
   475 				
   476 					jsr @fill
   477 				
   478 					.ENDM
   479
   480 				; ------------------------------------------------------------
   481
   482 = 0088			A	= :EDX
   483 = 008C			COUNT	= :ECX
   484 = 0084			VALUE	= :EAX
   485 8DED			@exit
   486 				.endl
   487
   488 8DED			.local	MOVE_010A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   489
   490 					.MACRO m@INLINE
   491 				
   492 				; -------------------  ASM Block 00000028  -------------------
   493 				
   494 					jsr @move
   495 				
   496 					.ENDM
   497
   498 				; ------------------------------------------------------------
   499
   500 = 0088			SOURCE	= :EDX
   501 = 008C			DEST	= :ECX
   502 = 0084			COUNT	= :EAX
   503 8DED			@exit
   504 				.endl
   505
   506 8DED			.local	PARAMCOUNT					; FUNCTION | ASSEMBLER
   507
   508 				; -------------------  ASM Block 00000044  -------------------
   509
   510 					@cmdline #255
   510 				 LDA# 255\ JSR @CMDLINE
   510 8DED A9 FF		 LDA# 255
   510 8DEF 20 46 82		 JSR @CMDLINE
   511 8DF2 8D 1E 21			sta Result
   512
   513 8DF5			@exit
   514
   515 				; ------------------------------------------------------------
   516
   517 = 211E			RESULT	= DATAORIGIN+$011E
   518 8DF5 60				rts						; ret
   519 				.endl
   520
   521 8DF6			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   522 8DF6 8D 1F 21			sta I
   523
   524 				; -------------------  ASM Block 00000045  -------------------
   525
   526 					@cmdline i
   526 				 LDA I\ JSR @CMDLINE
   526 8DF9 AD 1F 21		 LDA I
   526 8DFC 20 46 82		 JSR @CMDLINE
   527
   528 				;	@move #@buf Result #33
   529 8DFF A0 DF			ldy #256-33
   530 8E01 B9 21 03 99 41 20 + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   531
   532 8E0A			@exit
   533
   534 				; ------------------------------------------------------------
   535
   536 = 211F			I	= DATAORIGIN+$011F
   537 = 2120			adr.RESULT	= [DATAORIGIN+$0120] .array [33]
   538 8E0A			.var RESULT	= adr.RESULT .word
   539
   540 = 211F			@VarData	= I
   541 = 0022			@VarDataSize	= 34
   542
   543 8E0A 60				rts						; ret
   544 = 8E0B 20 21		RESULT
   544 				.endl
   545
   546 				; ------------------------------------------------------------
   547
   548 = 0101			__PORTB_BANKS	= $0101
   549 = 0648			M_PI_2	= $0648
   550 = 0192			D_PI_2	= $0192
   551 = 0004			D_PI_180	= $04
   552 = 0000			MGTIA	= $00
   553 = 0080			MVBXE	= $80
   554 = 0000			VBXE_XDLADR	= $00
   555 = 00E0			VBXE_BCBTMP	= $E0
   556 = 0100			VBXE_BCBADR	= $0100
   557 = 1000			VBXE_MAPADR	= $1000
   558 = 1000			VBXE_CHBASE	= $1000
   559 = 5000			VBXE_OVRADR	= $5000
   560 = B000			VBXE_WINDOW	= $B000
   561 = 0000			IDLI	= $00
   562 = 0001			IVBL	= $01
   563 = 0002			ITIM1	= $02
   564 = 0003			ITIM2	= $03
   565 = 0004			ITIM4	= $04
   566 = 00FE			CH_DELCHR	= $FE
   567 = 009B			CH_ENTER	= $9B
   568 = 001B			CH_ESC	= $1B
   569 = 001C			CH_CURS_UP	= $1C
   570 = 001D			CH_CURS_DOWN	= $1D
   571 = 001E			CH_CURS_LEFT	= $1E
   572 = 001F			CH_CURS_RIGHT	= $1F
   573 = 007F			CH_TAB	= $7F
   574 = 009B			CH_EOL	= $9B
   575 = 007D			CH_CLR	= $7D
   576 = 00FD			CH_BELL	= $FD
   577 = 007E			CH_DEL	= $7E
   578 = 009C			CH_DELLINE	= $9C
   579 = 009D			CH_INSLINE	= $9D
   580 = 0000			PAL_PMCOLOR0	= $00
   581 = 0001			PAL_PMCOLOR1	= $01
   582 = 0002			PAL_PMCOLOR2	= $02
   583 = 0003			PAL_PMCOLOR3	= $03
   584 = 0004			PAL_COLOR0	= $04
   585 = 0005			PAL_COLOR1	= $05
   586 = 0006			PAL_COLOR2	= $06
   587 = 0007			PAL_COLOR3	= $07
   588 = 0008			PAL_COLBAK	= $08
   589 = 0000			COLOR_BLACK	= $00
   590 = 000E			COLOR_WHITE	= $0E
   591 = 0032			COLOR_RED	= $32
   592 = 0096			COLOR_CYAN	= $96
   593 = 0068			COLOR_VIOLET	= $68
   594 = 00C4			COLOR_GREEN	= $C4
   595 = 0074			COLOR_BLUE	= $74
   596 = 00EE			COLOR_YELLOW	= $EE
   597 = 0028			COLOR_ORANGE	= $28
   598 = 00E4			COLOR_BROWN	= $E4
   599 = 003C			COLOR_LIGHTRED	= $3C
   600 = 0004			COLOR_GRAY1	= $04
   601 = 0006			COLOR_GRAY2	= $06
   602 = 000A			COLOR_GRAY3	= $0A
   603 = 00CC			COLOR_LIGHTGREEN	= $CC
   604 = 007C			COLOR_LIGHTBLUE	= $7C
   605 = 0004			FMOPENREAD	= $04
   606 = 0008			FMOPENWRITE	= $08
   607 = 0009			FMOPENAPPEND	= $09
   608 = 000C			FMOPENREADWRITE	= $0C
   609 = 2000			SCREENWIDTH	= DATAORIGIN+$0000
   610 = 2002			SCREENHEIGHT	= DATAORIGIN+$0002
   611 = 2004			DATESEPARATOR	= DATAORIGIN+$0004
   612 = D20A			RND	= $D20A
   613 = 02C0			adr.PALETTE	= $02C0
   614 8E0D			.var PALETTE	= adr.PALETTE .word
   615 = D012			adr.HPALETTE	= $D012
   616 8E0D			.var HPALETTE	= adr.HPALETTE .word
   617 = 2005			FILEMODE	= DATAORIGIN+$0005
   618 = 2006			GRAPHMODE	= DATAORIGIN+$0006
   619 = 2007			IORESULT	= DATAORIGIN+$0007
   620 = 2008			EOLN	= DATAORIGIN+$0008
   621 = 2009			RNDSEED	= DATAORIGIN+$0009
   622
   623 = 8E0D C0 02		PALETTE
   623 = 8E0F 12 D0		HPALETTE
   623 				.endl							; UNIT SYSTEM
   624
   625 				; ------------------------------------------------------------
   626
   627 8E11			.local	MC6850						; UNIT
   628
   629 8E11			.local	MC6850_RESET					; PROCEDURE
   630
   631 				; optimize OK (MC6850), line = 70
   632
   633 8E11 A9 03			lda #$03
   634 8E13 8D 00 D5			sta MC6850_CNTRREG
   635 8E16			@exit
   636 					.ifdef @new
   637 					lda <@VarData
   638 					sta :ztmp
   639 					lda >@VarData
   640 					ldy #@VarDataSize-1
   641 					jmp @FreeMem
   642 					els
   643 8E16 60				rts						; ret
   644 					eif
   645 				.endl
   646
   647 8E17			.local	MC6850_INIT					; PROCEDURE
   648 8E17 8D 41 21			sta SETUP
   649
   650 				; optimize OK (MC6850), line = 75
   651
   652 8E1A 8D 00 D5			sta MC6850_CNTRREG
   653
   654 				; ------------------------------------------------------------
   655
   656 = 2141			SETUP	= DATAORIGIN+$0141
   657
   658 = 2141			@VarData	= SETUP
   659 = 0001			@VarDataSize	= 1
   660
   661 8E1D			@exit
   662 					.ifdef @new
   663 					lda <@VarData
   664 					sta :ztmp
   665 					lda >@VarData
   666 					ldy #@VarDataSize-1
   667 					jmp @FreeMem
   668 					els
   669 8E1D 60				rts						; ret
   670 					eif
   671 				.endl
   672
   673 				; ------------------------------------------------------------
   674
   675 = D500			MC6850_BASE	= $D500
   676 = D500			ADDR_MC6850_CNTRREG	= $D500
   677 = D501			ADDR_MC6850_BUFFER	= $D501
   678 = D500			ADDR_MC6850_STATREG	= $D500
   679 = 0001			CR0	= $01
   680 = 0002			CR1	= $02
   681 = 0004			CR2	= $04
   682 = 0008			CR3	= $08
   683 = 0010			CR4	= $10
   684 = 0020			CR5	= $20
   685 = 0040			CR6	= $40
   686 = 0080			CR7	= $80
   687 = 0000			CD_1	= $00
   688 = 0001			CD_16	= $01
   689 = 0002			CD_64	= $02
   690 = 0003			MASTERRESET	= $03
   691 = 0000			WS_7BITS	= $00
   692 = 0010			WS_8BITS	= $10
   693 = 0000			WS_2BITSTOP	= $00
   694 = 0008			WS_1BITSTOP	= $08
   695 = 0000			WS_EVENPARITY	= $00
   696 = 0004			WS_ODDPARITY	= $04
   697 = 0000			TC_RTSLOW_NOTIRQ	= $00
   698 = 0020			TC_RTSLOW_TIRQ	= $20
   699 = 0040			TC_RTSHIGH_NOTIRQ	= $40
   700 = 0060			TC_BREAKLEVEL	= $60
   701 = 0000			NOIRQ_RECEIVE	= $00
   702 = 0080			IRQ_RECEIVE	= $80
   703 = 0001			RDRF	= $01
   704 = 0002			TDRE	= $02
   705 = 0004			DCD	= $04
   706 = 0008			CTS	= $08
   707 = 0010			FE	= $10
   708 = 0020			OVRN	= $20
   709 = 0040			PE	= $40
   710 = 0080			IRQ	= $80
   711 = D500			MC6850_CNTRREG	= $D500
   712 = D501			MC6850_BUFFER	= $D501
   713 = D500			MC6850_STATREG	= $D500
   714 = 00FF			MC_BYTE	= $FF
   715
   716 				.endl							; UNIT MC6850
   717
   718 				; ------------------------------------------------------------
   719
   720 8E1E			.local	MIDI_FIFO					; UNIT
   721
   722 8E1E			.local	FIFO_RESET					; PROCEDURE
   723
   724 				; optimize OK (MIDI_FIFO), line = 30
   725
   726 8E1E A9 00			lda #$00
   727 8E20 85 FD			sta FIFO_HEAD
   728
   729 				; optimize OK (MIDI_FIFO), line = 31
   730
   731 8E22 85 FE			sta FIFO_TAIL
   732 8E24			@exit
   733 					.ifdef @new
   734 					lda <@VarData
   735 					sta :ztmp
   736 					lda >@VarData
   737 					ldy #@VarDataSize-1
   738 					jmp @FreeMem
   739 					els
   740 8E24 60				rts						; ret
   741 					eif
   742 				.endl
   743
   744 8E25			.local	FIFO_PUSHDIRECT2MC6850				; PROCEDURE
   745
   746 				; optimize OK (MIDI_FIFO), line = 36
   747
   748 8E25 AD 00 D5			lda MC6850.MC6850_CNTRREG
   749 8E28 29 02			and #$02
   750 8E2A F0 0E			jeq l_0170
   751
   752 				; optimize OK (MIDI_FIFO), line = 37
   753
   754 8E2C A4 FE			ldy FIFO_TAIL
   755 8E2E C4 FD			cpy FIFO_HEAD
   756 8E30 F0 08			jeq l_0185
   757
   758 				; optimize OK (MIDI_FIFO), line = 39
   759
   760 8E32 B9 00 06			lda adr.FIFO_BUF,y
   761 8E35 8D 01 D5			sta MC6850.MC6850_BUFFER
   762
   763 				; optimize FAIL (0, MIDI_FIFO), line = 40
   764
   765 8E38 E6 FE			inc FIFO_TAIL
   766 8E3A			l_0185
   767 8E3A			l_0170
   768 8E3A			@exit
   769 					.ifdef @new
   770 					lda <@VarData
   771 					sta :ztmp
   772 					lda >@VarData
   773 					ldy #@VarDataSize-1
   774 					jmp @FreeMem
   775 					els
   776 8E3A 60				rts						; ret
   777 					eif
   778 				.endl
   779
   780 8E3B			.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER
   781
   782 				; -------------------  ASM Block 00000052  -------------------
   783
   784 8E3B A5 FD		  lda FIFO_Head
   785 8E3D 18			  clc
   786 8E3E 69 01		  adc #1
   787 8E40 C5 FE		  cmp FIFO_Tail
   788 8E42 D0 13		  bne storeInFIFO
   789
   790 8E44 AD 1A D0		  lda $d01a
   791 8E47 49 47		  eor #$47
   792 8E49 8D 1A D0		  sta $d01a
   793 8E4C 20 97 8E		  jsr FIFO_Flush
   794 8E4F AD 1A D0		  lda $d01a
   795 8E52 49 47		  eor #$47
   796 8E54 8D 1A D0		  sta $d01a
   797
   798 8E57			storeInFIFO:
   799 8E57 A4 FD		  ldy FIFO_Head
   800 8E59 A5 FF		  lda FIFO_Byte
   801 8E5B 99 00 06		  sta FIFO_ADDR,y
   802 8E5E E6 FD		  inc FIFO_Head
   803
   804 8E60 20 25 8E		  jsr FIFO_PushDirect2MC6850
   805 8E63			exitWrite:
   806
   807 8E63			@exit
   808 					.ifdef @new
   809 					lda <@VarData
   810 					sta :ztmp
   811 					lda >@VarData
   812 					ldy #@VarDataSize-1
   813 					jmp @FreeMem
   814 					els
   815 8E63 60				rts						; ret
   816 					eif
   817 				.endl
   818
   819 8E64			.local	FIFO_SEND					; PROCEDURE
   820
   821 				; optimize OK (MIDI_FIFO), line = 85
   822
   823 8E64 AD 43 21			lda DATA
   824 8E67 8D 46 21			sta P
   825 8E6A AD 44 21			lda DATA+1
   826 8E6D 8D 47 21			sta P+1
   827
   828 				; --- WhileProlog
   829 8E70 4C 91 8E			jmp l_01A4
   830 8E73			l_01A5
   831
   832 				; optimize OK (MIDI_FIFO), line = 88
   833
   834 8E73 AC 46 21 84 82 AC + 	mwy P :bp2
   835 8E7D A0 00			ldy #$00
   836 8E7F B1 82			lda (:bp2),y
   837 8E81 85 FF			sta FIFO_BYTE
   838 8E83 20 3B 8E			jsr FIFO_WRITEBYTE
   839
   840 				; optimize FAIL (0, MIDI_FIFO), line = 89
   841
   842 8E86 EE 46 21			inc P
   843 8E89 D0 03			sne
   844 8E8B EE 47 21			inc P+1
   845 8E8E CE 45 21			dec LEN
   846 8E91			l_01A4
   847
   848 				; optimize OK (MIDI_FIFO), line = 86
   849
   850 8E91 AD 45 21			lda LEN
   851 8E94 D0 DD			jne l_01A5
   852
   853 				; ------------------------------------------------------------
   854
   855 = 2143			DATA	= DATAORIGIN+$0143
   856 = 2145			LEN	= DATAORIGIN+$0145
   857 = 2146			P	= DATAORIGIN+$0146
   858
   859 = 2143			@VarData	= DATA
   860 = 0005			@VarDataSize	= 5
   861
   862 8E96			@exit
   863 					.ifdef @new
   864 					lda <@VarData
   865 					sta :ztmp
   866 					lda >@VarData
   867 					ldy #@VarDataSize-1
   868 					jmp @FreeMem
   869 					els
   870 8E96 60				rts						; ret
   871 					eif
   872 				.endl
   873
   874 8E97			.local	FIFO_FLUSH					; PROCEDURE
   875
   876 				; optimize OK (MIDI_FIFO), line = 126
   877
   878 8E97 A5 F5			lda _TIMERSTATUS
   879 8E99 49 80			eor #$80
   880 8E9B 85 F5			sta _TIMERSTATUS
   881
   882 				; --- WhileProlog
   883 8E9D 4C B1 8E			jmp l_01D0
   884 8EA0			l_01D1
   885
   886 				; optimize OK (MIDI_FIFO), line = 129
   887
   888 8EA0 AD 00 D5			lda MC6850.MC6850_CNTRREG
   889 8EA3 29 02			and #$02
   890 8EA5 F0 0A			jeq l_01E7
   891
   892 				; optimize OK (MIDI_FIFO), line = 131
   893
   894 8EA7 A4 FE			ldy FIFO_TAIL
   895 8EA9 B9 00 06			lda adr.FIFO_BUF,y
   896 8EAC 8D 01 D5			sta MC6850.MC6850_BUFFER
   897
   898 				; optimize FAIL (0, MIDI_FIFO), line = 132
   899
   900 8EAF E6 FE			inc FIFO_TAIL
   901 8EB1			l_01E7
   902 8EB1			l_01D0
   903
   904 				; optimize OK (MIDI_FIFO), line = 127
   905
   906 8EB1 A5 FE			lda FIFO_TAIL
   907 8EB3 C5 FD			cmp FIFO_HEAD
   908 8EB5 D0 E9			jne l_01D1
   909
   910 				; optimize OK (MIDI_FIFO), line = 135
   911
   912 8EB7 A5 F5			lda _TIMERSTATUS
   913 8EB9 49 80			eor #$80
   914 8EBB 85 F5			sta _TIMERSTATUS
   915 8EBD			@exit
   916 					.ifdef @new
   917 					lda <@VarData
   918 					sta :ztmp
   919 					lda >@VarData
   920 					ldy #@VarDataSize-1
   921 					jmp @FreeMem
   922 					els
   923 8EBD 60				rts						; ret
   924 					eif
   925 				.endl
   926
   927 				; ------------------------------------------------------------
   928
   929 = 00FD			FIFO_HEAD	= $FD
   930 = 00FE			FIFO_TAIL	= $FE
   931 = 00FF			FIFO_BYTE	= $FF
   932 = 2142			FIFO2NULL	= DATAORIGIN+$0142
   933 = 0600			FIFO_ADDR	= $0600
   934 = 0600			adr.FIFO_BUF	= $0600
   935 8EBE			.var FIFO_BUF	= adr.FIFO_BUF .word
   936 = 00F5			_TIMERSTATUS	= $F5
   937
   938 = 8EBE 00 06		FIFO_BUF
   938 				.endl							; UNIT MIDI_FIFO
   939
   940 				; ------------------------------------------------------------
   941
   942 8EC0			.local	MIDFILES					; UNIT
   943
   944 8EC0			.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT
   945
   946 				; -------------------  ASM Block 00000053  -------------------
   947
   948 8EC0 A5 F5		    lda _timerStatus
   949 8EC2 30 1E		    bmi skip
   950
   951 8EC4			doSubTick:
   952 8EC4 29 0F		    and #f_ratio
   953 8EC6 C5 F4		    cmp _subCnt
   954 8EC8 F0 04		    beq doMainTick
   955
   956 8ECA E6 F4		    inc _subCnt
   957 8ECC 70 14		    bvs skip
   958
   959 8ECE			doMainTick:
   960 8ECE A9 01		    lda #1
   961 8ED0 85 F4		    sta _subCnt
   962
   963 8ED2 A5 F5		    lda _timerStatus
   964 8ED4 09 40		    ora #f_tick
   965 8ED6 85 F5		    sta _timerStatus
   966
   967 8ED8 E6 F0		    inc _totalTicks
   968 8EDA D0 06		    bne skip
   969 8EDC E6 F1		    inc _totalTicks+1
   970 8EDE D0 02		    bne skip
   971 8EE0 E6 F2		    inc _totalTicks+2
   972 				    // bne skip
   973 				    // inc _totalTicks+3
   974
   975 8EE2			skip:
   976
   977 				//   sty regy
   978
   979 				//   ldy MIDI_FIFO.FIFO_Tail
   980 				//   cpy MIDI_FIFO.FIFO_Head
   981 				//   beq fifo_end
   982
   983 				//   lda MC6850.MC6850_CNTRREG
   984 				//   and #MC6850.TDRE
   985 				//   beq fifo_end
   986
   987 				//   lda MIDI_FIFO.FIFO_ADDR,y
   988 				//   sta MC6850.MC6850_BUFFER
   989
   990 				//   inc MIDI_FIFO.FIFO_Tail
   991
   992 				// fifo_end:
   993 				//   ldy regy:#$00
   994
   995 8EE2 68			  pla
   996
   997 8EE3 40				rti						; ret
   998 				.endl
   999
  1000 8EE4			.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER
  1001
  1002 				; -------------------  ASM Block 00000054  -------------------
  1003
  1004 8EE4 A5 E2		  lda _adr            // get LSB of address
  1005 8EE6 F0 01		  beq checkMemType    // zero means, we crossing the page. Check block bounds
  1006 8EE8 60			  rts
  1007
  1008 8EE9			checkMemType
  1009 8EE9 A5 E3		  lda _adr+1          // get MSB of address
  1010 8EEB A4 E1		  ldy _bank           // get current bank index
  1011 8EED D0 17		  bne checkXMSBound   // zero, means we checking bounds in base memory
  1012 				                      // otherwise, we checking bound of extended memory
  1013
  1014 				// base memory bounds check
  1015 				// 1st, memory under ROM
  1016 8EEF			check1Bound:
  1017 8EEF C9 D0		  cmp #$d0
  1018 8EF1 D0 05		  bne check2Bound
  1019
  1020 8EF3 A9 D8		  lda #$d8
  1021 8EF5 85 E3		  sta _adr+1
  1022 8EF7 60			  rts
  1023
  1024 8EF8			check2bound
  1025 8EF8 C9 FF		  cmp #$ff
  1026 8EFA D0 05		  bne check3Bound
  1027
  1028 8EFC A9 40		  lda #$40
  1029 8EFE 85 E3		  sta _adr+1
  1030 8F00 60			  rts
  1031
  1032 				// 2nd, $4000..$8000
  1033 8F01			check3Bound
  1034 8F01 C9 80		  cmp #$80
  1035 8F03 F0 22		  beq outOfMem
  1036 8F05 60			  rts
  1037
  1038 				// extended memory bound check
  1039
  1040 8F06			checkXMSBound         // extender memory window $4000..$7fff
  1041 8F06 C9 80		  cmp #$80            // the bank's memory area ends at $7fff
  1042 8F08 F0 01		  beq switchXMSBank   // if MSB addres is out of this address, we need switch bank
  1043
  1044 8F0A 60			  rts
  1045
  1046 8F0B			switchXMSBank:
  1047 8F0B 88			  dey             // decrement current bank index
  1048 8F0C F0 0D		  beq switch2Conv // if zero, meand we back to conventional memory
  1049
  1050 8F0E B9 00 01		  lda $100,y      // get bank set
  1051 8F11 84 E1		  sty _bank       // store current bank index
  1052 8F13 8D 01 D3		  sta PORTB       // set PORTB (switch bank)
  1053 8F16 A9 40		  lda #$40        // set MSB address to the begining of bank
  1054 8F18 85 E3		  sta _adr+1
  1055 8F1A 60			  rts
  1056
  1057 8F1B			switch2Conv:
  1058 8F1B A9 FE		  lda #$fe        // switch to conventional memory and turn off ROM
  1059 8F1D 84 E1		  sty _bank
  1060 8F1F 8D 01 D3		  sta PORTB
  1061 8F22 A9 A8		  lda #$a8        // set MSB address
  1062 8F24 85 E3		  sta _adr+1
  1063 8F26 60			  rts
  1064
  1065 8F27			outOfMem:
  1066 8F27 A9 65		  lda #ERR_NOT_ENOUGHT_MEMORY
  1067 8F29 8D 07 20		  sta SYSTEM.IOResult
  1068
  1069 8F2C			@exit
  1070 					.ifdef @new
  1071 					lda <@VarData
  1072 					sta :ztmp
  1073 					lda >@VarData
  1074 					ldy #@VarDataSize-1
  1075 					jmp @FreeMem
  1076 					els
  1077 8F2C 60				rts						; ret
  1078 					eif
  1079 				.endl
  1080
  1081 8F2D			.local	LOADMID						; FUNCTION
  1082
  1083 8F2D 4C F6 8F			jmp l_0215
  1084
  1085 8F30			.local	READWORDBI					; FUNCTION
  1086
  1087 				; BlockRead
  1088
  1089 				; optimize OK (bigendian.inc), line = 3
  1090
  1091 8F30 AC 51 93 84 82 AC + 	mwy F :bp2
  1092 8F3A A0 06			ldy #s@file.buffer
  1093 8F3C A9 8D			lda <RESULT
  1094 8F3E 91 82			sta (:bp2),y
  1095 8F40 C8				iny
  1096 8F41 A9 21			lda >RESULT
  1097 8F43 91 82			sta (:bp2),y
  1098 8F45 A0 08			ldy #s@file.nrecord
  1099 8F47 A9 02			lda #$02
  1100 8F49 91 82			sta (:bp2),y
  1101 8F4B C8				iny
  1102 8F4C A9 00			lda #$00
  1103 8F4E 91 82			sta (:bp2),y
  1104
  1105 8F50 8A 48			txa:pha
  1106 8F52 38				sec
  1107 					@readfile F, #7
  1107 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1107 8F53 AC 52 93		 LDY F+1
  1107 8F56 AD 51 93		 LDA F
  1107 8F59 A2 07		 LDX# 7
  1107 8F5B 20 7E 81		 JSR @READFILE
  1108 8F5E 68 AA			pla:tax
  1109
  1110 				; -------------------  ASM Block 00000055  -------------------
  1111
  1112 8F60 AE 8D 21		    ldx result
  1113 8F63 AC 8E 21		    ldy result+1
  1114 8F66 8E 8E 21		    stx result+1
  1115 8F69 8C 8D 21		    sty result
  1116 				  
  1117 8F6C			@exit
  1118
  1119 				; ------------------------------------------------------------
  1120
  1121 = 218D			RESULT	= DATAORIGIN+$018D
  1122 8F6C 60				rts						; ret
  1123 				.endl
  1124
  1125 8F6D			.local	READLONGBI					; FUNCTION
  1126
  1127 				; BlockRead
  1128
  1129 				; optimize OK (bigendian.inc), line = 15
  1130
  1131 8F6D AC 51 93 84 82 AC + 	mwy F :bp2
  1132 8F77 A0 06			ldy #s@file.buffer
  1133 8F79 A9 8F			lda <RESULT
  1134 8F7B 91 82			sta (:bp2),y
  1135 8F7D C8				iny
  1136 8F7E A9 21			lda >RESULT
  1137 8F80 91 82			sta (:bp2),y
  1138 8F82 A0 08			ldy #s@file.nrecord
  1139 8F84 A9 04			lda #$04
  1140 8F86 91 82			sta (:bp2),y
  1141 8F88 C8				iny
  1142 8F89 A9 00			lda #$00
  1143 8F8B 91 82			sta (:bp2),y
  1144
  1145 8F8D 8A 48			txa:pha
  1146 8F8F 38				sec
  1147 					@readfile F, #7
  1147 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1147 8F90 AC 52 93		 LDY F+1
  1147 8F93 AD 51 93		 LDA F
  1147 8F96 A2 07		 LDX# 7
  1147 8F98 20 7E 81		 JSR @READFILE
  1148 8F9B 68 AA			pla:tax
  1149
  1150 				; -------------------  ASM Block 00000056  -------------------
  1151
  1152 8F9D AE 8F 21		    ldx result
  1153 8FA0 AC 92 21		    ldy result+3
  1154 8FA3 8E 92 21		    stx result+3
  1155 8FA6 8C 8F 21		    sty result
  1156
  1157 8FA9 AE 90 21		    ldx result+1
  1158 8FAC AC 91 21		    ldy result+2
  1159 8FAF 8E 91 21		    stx result+2
  1160 8FB2 8C 90 21		    sty result+1
  1161 				  
  1162 8FB5			@exit
  1163
  1164 				; ------------------------------------------------------------
  1165
  1166 = 218F			RESULT	= DATAORIGIN+$018F
  1167 8FB5 60				rts						; ret
  1168 				.endl
  1169
  1170 8FB6			.local	BGET						; PROCEDURE
  1171
  1172 				; BlockRead
  1173
  1174 				; optimize OK (loadmid.inc), line = 18
  1175
  1176 8FB6 AC 51 93 84 82 AC + 	mwy F :bp2
  1177 8FC0 A0 06			ldy #s@file.buffer
  1178 8FC2 AD 93 21			lda DEST
  1179 8FC5 91 82			sta (:bp2),y
  1180 8FC7 C8				iny
  1181 8FC8 AD 94 21			lda DEST+1
  1182 8FCB 91 82			sta (:bp2),y
  1183 8FCD A0 08			ldy #s@file.nrecord
  1184 8FCF AD 85 21			lda LOADSIZE
  1185 8FD2 91 82			sta (:bp2),y
  1186 8FD4 C8				iny
  1187 8FD5 AD 86 21			lda LOADSIZE+1
  1188 8FD8 91 82			sta (:bp2),y
  1189 8FDA A0 0A			ldy #s@file.numread
  1190 8FDC A9 7F			lda <V
  1191 8FDE 91 82			sta (:bp2),y
  1192 8FE0 C8				iny
  1193 8FE1 A9 21			lda >V
  1194 8FE3 91 82			sta (:bp2),y
  1195
  1196 8FE5 8A 48			txa:pha
  1197 8FE7 38				sec
  1198 					@readfile F, #135
  1198 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1198 8FE8 AC 52 93		 LDY F+1
  1198 8FEB AD 51 93		 LDA F
  1198 8FEE A2 87		 LDX# 135
  1198 8FF0 20 7E 81		 JSR @READFILE
  1199 8FF3 68 AA			pla:tax
  1200
  1201 				; ------------------------------------------------------------
  1202
  1203 = 2193			DEST	= DATAORIGIN+$0193
  1204
  1205 = 2193			@VarData	= DEST
  1206 = 0002			@VarDataSize	= 2
  1207
  1208 8FF5			@exit
  1209 					.ifdef @new
  1210 					lda <@VarData
  1211 					sta :ztmp
  1212 					lda >@VarData
  1213 					ldy #@VarDataSize-1
  1214 					jmp @FreeMem
  1215 					els
  1216 8FF5 60				rts						; ret
  1217 					eif
  1218 				.endl
  1219 8FF6			l_0215
  1220 				; AssignFile
  1221
  1222 				; optimize OK (loadmid.inc), line = 23
  1223
  1224 8FF6 AC 51 93 84 82 AC + 	mwy F :bp2
  1225 9000 A0 00			ldy #s@file.pfname
  1226 9002 AD 6B 21			lda FN
  1227 9005 91 82			sta (:bp2),y
  1228 9007 C8				iny
  1229 9008 AD 6C 21			lda FN+1
  1230 900B 91 82			sta (:bp2),y
  1231 900D A0 05			ldy #s@file.status
  1232 900F A9 00			lda #$00
  1233 9011 91 82			sta (:bp2),y
  1234 				; Reset
  1235
  1236 				; optimize OK (loadmid.inc), line = 24
  1237
  1238 9013 A0 02			ldy #s@file.record
  1239 9015 A9 01			lda #$01
  1240 9017 91 82			sta (:bp2),y
  1241 9019 C8				iny
  1242 901A A9 00			lda #$00
  1243 901C 91 82			sta (:bp2),y
  1244
  1245 901E 8A 48			txa:pha
  1246 9020 18				clc
  1247 					@openfile F, MAIN.SYSTEM.FileMode
  1247 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  1247 9021 AC 52 93		 LDY F+1
  1247 9024 AD 51 93		 LDA F
  1247 9027 AE 05 20		 LDX MAIN.SYSTEM.FILEMODE
  1247 902A 20 AF 80		 JSR @OPENFILE
  1248 902D 68 AA			pla:tax
  1249
  1250 				; optimize OK (loadmid.inc), line = 25
  1251
  1252 902F AD 07 20			lda SYSTEM.IORESULT
  1253 9032 10 14			jpl l_025E
  1254
  1255 				; optimize OK (loadmid.inc), line = 27
  1256
  1257 9034 8D 6D 21			sta RESULT
  1258 				; CloseFile
  1259
  1260 9037 8A 48			txa:pha
  1261 9039 18				clc
  1262 					@closefile F
  1262 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1262 903A AC 52 93		 LDY F+1
  1262 903D AD 51 93		 LDA F
  1262 9040 20 4B 81		 JSR @CLOSEFILE
  1263 9043 68 AA			pla:tax
  1264
  1265 9045 4C 50 93			jmp @exit					; exit
  1266 9048			l_025E
  1267
  1268 				; optimize OK (loadmid.inc), line = 32
  1269
  1270 9048 AD B6 98			lda MIDTRACKS
  1271 904B 8D 8B 21			sta TRKDATA
  1272 904E AD B7 98			lda MIDTRACKS+1
  1273 9051 8D 8C 21			sta TRKDATA+1
  1274
  1275 				; optimize OK (loadmid.inc), line = 33
  1276
  1277 9054 A9 00			lda #$00
  1278 9056 8D 7A 21			sta TRACKCOUNT
  1279
  1280 				; optimize OK (loadmid.inc), line = 34
  1281
  1282 9059 A9 FF			lda #$FF
  1283 905B 8D 4C 21			sta TOTALTRACKS
  1284
  1285 				; --- WhileProlog
  1286 905E 4C FE 92			jmp l_0276
  1287 9061			l_0277
  1288 				; BlockRead
  1289
  1290 				; optimize OK (loadmid.inc), line = 38
  1291
  1292 9061 AC 51 93 84 82 AC + 	mwy F :bp2
  1293 906B A0 06			ldy #s@file.buffer
  1294 906D A9 7B			lda <CHUNKTAG
  1295 906F 91 82			sta (:bp2),y
  1296 9071 C8				iny
  1297 9072 A9 21			lda >CHUNKTAG
  1298 9074 91 82			sta (:bp2),y
  1299 9076 A0 08			ldy #s@file.nrecord
  1300 9078 A9 04			lda #$04
  1301 907A 91 82			sta (:bp2),y
  1302 907C C8				iny
  1303 907D A9 00			lda #$00
  1304 907F 91 82			sta (:bp2),y
  1305 9081 A0 0A			ldy #s@file.numread
  1306 9083 A9 7F			lda <V
  1307 9085 91 82			sta (:bp2),y
  1308 9087 C8				iny
  1309 9088 A9 21			lda >V
  1310 908A 91 82			sta (:bp2),y
  1311
  1312 908C 8A 48			txa:pha
  1313 908E 18				clc
  1314 					@readfile F, #135
  1314 				 LDY F+1\ LDA F\ LDX# 135\ JSR @READFILE
  1314 908F AC 52 93		 LDY F+1
  1314 9092 AD 51 93		 LDA F
  1314 9095 A2 87		 LDX# 135
  1314 9097 20 7E 81		 JSR @READFILE
  1315 909A 68 AA			pla:tax
  1316
  1317 				; optimize OK (loadmid.inc), line = 39
  1318
  1319 909C AD 80 21			lda V+1
  1320 909F D0 05			bne @+
  1321 90A1 AD 7F 21			lda V
  1322 90A4 C9 04			cmp #$04
  1323 				@
  1324 90A6 F0 03			jeq l_0294
  1325 90A8 4C 3D 93			jmp b_0277					; break
  1326 90AB			l_0294
  1327
  1328 				; optimize FAIL ('READLONGBI', loadmid.inc), line = 40
  1329
  1330 90AB 20 6D 8F			jsr READLONGBI
  1331 90AE AD 8F 21			lda READLONGBI.RESULT
  1332 90B1 8D 87 21			sta LEN
  1333 90B4 AD 90 21			lda READLONGBI.RESULT+1
  1334 90B7 8D 88 21			sta LEN+1
  1335 90BA AD 91 21			lda READLONGBI.RESULT+2
  1336 90BD 8D 89 21			sta LEN+2
  1337 90C0 AD 92 21			lda READLONGBI.RESULT+3
  1338 90C3 8D 8A 21			sta LEN+3
  1339
  1340 				; optimize OK (loadmid.inc), line = 41
  1341
  1342 90C6 AD 7E 21			lda CHUNKTAG+3
  1343 90C9 49 64			eor #$64
  1344 90CB D0 55			jne l_02AB
  1345 90CD AD 7D 21			lda CHUNKTAG+2
  1346 90D0 49 68			eor #$68
  1347 90D2 D0 4E			jne l_02AB
  1348 90D4 AD 7C 21			lda CHUNKTAG+1
  1349 90D7 49 54			eor #$54
  1350 90D9 D0 47			jne l_02AB
  1351 90DB AD 7B 21			lda CHUNKTAG
  1352 90DE 49 4D			eor #$4D
  1353 90E0 D0 40			jne l_02AB
  1354
  1355 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 43
  1356
  1357 90E2 20 30 8F			jsr READWORDBI
  1358 90E5 AD 8D 21			lda READWORDBI.RESULT
  1359 90E8 8D 4B 21			sta FORMAT
  1360
  1361 				; optimize OK (loadmid.inc), line = 44
  1362
  1363 90EB F0 0C			jeq l_02CE
  1364 90ED C9 01			cmp #$01
  1365 90EF F0 08			jeq l_02CE
  1366 90F1 A9 64			lda #$64
  1367 90F3 8D 6D 21			sta RESULT
  1368 90F6 4C 50 93			jmp @exit					; exit
  1369 90F9			l_02CE
  1370
  1371 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 45
  1372
  1373 90F9 20 30 8F			jsr READWORDBI
  1374 90FC AD 8D 21			lda READWORDBI.RESULT
  1375 90FF 8D 4C 21			sta TOTALTRACKS
  1376
  1377 				; optimize FAIL ('READWORDBI', loadmid.inc), line = 46
  1378
  1379 9102 20 30 8F			jsr READWORDBI
  1380 9105 AD 8D 21			lda READWORDBI.RESULT
  1381 9108 8D 7F 21			sta V
  1382 910B AD 8E 21			lda READWORDBI.RESULT+1
  1383 910E 8D 80 21			sta V+1
  1384
  1385 				; optimize OK (loadmid.inc), line = 47
  1386
  1387 9111 30 0C			jmi l_02F2
  1388
  1389 				; optimize OK (loadmid.inc), line = 48
  1390
  1391 9113 AD 7F 21			lda V
  1392 9116 8D 4D 21			sta TICKDIV
  1393 9119 AD 80 21			lda V+1
  1394 911C 8D 4E 21			sta TICKDIV+1
  1395 911F			l_02F2
  1396 911F 4C FE 92			jmp l_0303
  1397 9122			l_02AB
  1398
  1399 				; optimize OK (loadmid.inc), line = 63
  1400
  1401 9122 AD 7E 21			lda CHUNKTAG+3
  1402 9125 49 6B			eor #$6B
  1403 9127 F0 03 4C FE 92		jne l_0313
  1404 912C AD 7D 21			lda CHUNKTAG+2
  1405 912F 49 72			eor #$72
  1406 9131 F0 03 4C FE 92		jne l_0313
  1407 9136 AD 7C 21			lda CHUNKTAG+1
  1408 9139 49 54			eor #$54
  1409 913B F0 03 4C FE 92		jne l_0313
  1410 9140 AD 7B 21			lda CHUNKTAG
  1411 9143 49 4D			eor #$4D
  1412 9145 F0 03 4C FE 92		jne l_0313
  1413
  1414 				; optimize FAIL (0, loadmid.inc), line = 65
  1415
  1416 914A EE 7A 21			inc TRACKCOUNT
  1417
  1418 				; optimize OK (loadmid.inc), line = 67
  1419
  1420 914D AC 8B 21 84 82 AC + 	mwy TRKDATA :bp2
  1421 9157 A0 00			ldy #$00
  1422 9159 98				tya
  1423 915A 91 82			sta (:bp2),y
  1424
  1425 				; optimize OK (loadmid.inc), line = 68
  1426
  1427 915C A0 04			ldy #$04
  1428 915E 91 82			sta (:bp2),y
  1429 9160 C8				iny
  1430 9161 91 82			sta (:bp2),y
  1431 9163 C8				iny
  1432 9164 91 82			sta (:bp2),y
  1433 9166 C8				iny
  1434 9167 91 82			sta (:bp2),y
  1435
  1436 				; optimize OK (loadmid.inc), line = 69
  1437
  1438 9169 A0 01			ldy #$01
  1439 916B A5 E1			lda _BANK
  1440 916D 91 82			sta (:bp2),y
  1441
  1442 				; optimize OK (loadmid.inc), line = 70
  1443
  1444 916F C8				iny
  1445 9170 A5 E2			lda _ADR
  1446 9172 91 82			sta (:bp2),y
  1447 9174 C8				iny
  1448 9175 A5 E3			lda _ADR+1
  1449 9177 91 82			sta (:bp2),y
  1450
  1451 				; -------------------  ASM Block 00000057  -------------------
  1452
  1453 				 ldy _bank \ lda $100,y \ sta PORTB 
  1453 9179 A4 E1		 LDY _BANK 
  1453 917B B9 00 01		 LDA $100,Y 
  1453 917E 8D 01 D3		 STA PORTB 
  1454 				; --- WhileProlog
  1455 9181 4C DD 92			jmp l_032D
  1456 9184			l_032E
  1457
  1458 				; optimize FAIL (':TMP', loadmid.inc), line = 76
  1459
  1460 9184 AD 65 21			lda LOADPROCESS
  1461 9187 85 91			sta :TMP+1
  1462 9189 AD 66 21			lda LOADPROCESS+1
  1463 918C 85 92			sta :TMP+2
  1464 918E A9 4C			lda #$4C
  1465 9190 85 90			sta :TMP
  1466 9192 E8				inx
  1467 9193 AD 7A 21 95 94		mva TRACKCOUNT :STACKORIGIN,x
  1468 9198 20 90 00			jsr :TMP
  1469
  1470 				; optimize FAIL ('MEMBOUNDCHECK', loadmid.inc), line = 77
  1471
  1472 919B 20 E4 8E			jsr MEMBOUNDCHECK
  1473 919E AD 07 20			lda SYSTEM.IORESULT
  1474 91A1 C9 01			cmp #$01
  1475 91A3 F0 08			jeq l_0345
  1476 91A5 A9 65			lda #$65
  1477 91A7 8D 6D 21			sta RESULT
  1478 91AA 4C 50 93			jmp @exit					; exit
  1479 91AD			l_0345
  1480
  1481 				; optimize OK (loadmid.inc), line = 79
  1482
  1483 91AD A5 E3			lda _ADR+1
  1484 91AF C9 D8			cmp #$D8
  1485 91B1 90 0D			jcc l_035D
  1486 91B3 A9 00			lda #$00
  1487 91B5 8D 85 21			sta LOADSIZE
  1488 91B8 A9 FF			lda #$FF
  1489 91BA 8D 86 21			sta LOADSIZE+1
  1490 91BD 4C F6 91			jmp l_036B
  1491 91C0			l_035D
  1492
  1493 				; optimize OK (loadmid.inc), line = 80
  1494
  1495 91C0 A5 E3			lda _ADR+1
  1496 91C2 C9 C0			cmp #$C0
  1497 91C4 90 0D			jcc l_037C
  1498 91C6 A9 00			lda #$00
  1499 91C8 8D 85 21			sta LOADSIZE
  1500 91CB A9 D0			lda #$D0
  1501 91CD 8D 86 21			sta LOADSIZE+1
  1502 91D0 4C F6 91			jmp l_038A
  1503 91D3			l_037C
  1504
  1505 				; optimize OK (loadmid.inc), line = 81
  1506
  1507 91D3 A5 E3			lda _ADR+1
  1508 91D5 C9 A8			cmp #$A8
  1509 91D7 90 0D			jcc l_039B
  1510 91D9 A9 00			lda #$00
  1511 91DB 8D 85 21			sta LOADSIZE
  1512 91DE A9 C0			lda #$C0
  1513 91E0 8D 86 21			sta LOADSIZE+1
  1514 91E3 4C F6 91			jmp l_03A9
  1515 91E6			l_039B
  1516
  1517 				; optimize OK (loadmid.inc), line = 82
  1518
  1519 91E6 A5 E3			lda _ADR+1
  1520 91E8 C9 40			cmp #$40
  1521 91EA 90 0A			jcc l_03BA
  1522 91EC A9 00			lda #$00
  1523 91EE 8D 85 21			sta LOADSIZE
  1524 91F1 A9 80			lda #$80
  1525 91F3 8D 86 21			sta LOADSIZE+1
  1526 91F6			l_03BA
  1527 91F6			l_03A9
  1528 91F6			l_038A
  1529 91F6			l_036B
  1530
  1531 				; optimize OK (loadmid.inc), line = 83
  1532
  1533 91F6 AD 85 21			lda LOADSIZE
  1534 91F9 38 E5 E2			sub _ADR
  1535 91FC 8D 85 21			sta LOADSIZE
  1536 91FF AD 86 21			lda LOADSIZE+1
  1537 9202 E5 E3			sbc _ADR+1
  1538 9204 8D 86 21			sta LOADSIZE+1
  1539
  1540 				; optimize OK (loadmid.inc), line = 84
  1541
  1542 9207 0D 85 21			ora LOADSIZE
  1543 920A D0 03			jne l_03D4
  1544 920C 4C DD 92			jmp c_032E					; continue
  1545 920F			l_03D4
  1546
  1547 				; optimize OK (loadmid.inc), line = 85
  1548
  1549 920F				.LOCAL
  1550 920F A9 00			lda #$00
  1551 9211 38 ED 8A 21			sub LEN+3
  1552 9215 D0 21			bne L4
  1553 9217 A9 00			lda #$00
  1554 9219 CD 89 21			cmp LEN+2
  1555 921C D0 0E			bne L1
  1556 921E AD 86 21			lda LOADSIZE+1
  1557 9221 CD 88 21			cmp LEN+1
  1558 9224 D0 06			bne L1
  1559 9226 AD 85 21			lda LOADSIZE
  1560 9229 CD 87 21			cmp LEN
  1561 922C F0 10		L1	beq L5
  1562 922E B0 04			bcs L3
  1563 9230 A9 FF			lda #$FF
  1564 9232 D0 0A			bne L5
  1565 9234 A9 01		L3	lda #$01
  1566 9236 D0 06			bne L5
  1567 9238 50 04		L4	bvc L5
  1568 923A 49 FF			eor #$FF
  1569 923C 09 01			ora #$01
  1570 923E			L5
  1571 					.ENDL
  1572 923E 30 0E			jmi l_03E8
  1573 9240 F0 0C			jeq l_03E8
  1574 9242 AD 87 21			lda LEN
  1575 9245 8D 85 21			sta LOADSIZE
  1576 9248 AD 88 21			lda LEN+1
  1577 924B 8D 86 21			sta LOADSIZE+1
  1578 924E			l_03E8
  1579
  1580 				; optimize OK (loadmid.inc), line = 87
  1581
  1582 924E A5 E3			lda _ADR+1
  1583 9250 C9 C0			cmp #$C0
  1584 9252 90 31			jcc l_0400
  1585
  1586 				; optimize OK (loadmid.inc), line = 89
  1587
  1588 9254 AD 53 93			lda RBUF
  1589 9257 8D 93 21			sta BGET.DEST
  1590 925A AD 54 93			lda RBUF+1
  1591 925D 8D 94 21			sta BGET.DEST+1
  1592 9260 20 B6 8F			jsr BGET
  1593
  1594 				; optimize OK (loadmid.inc), line = 90
  1595
  1596 9263 AD 53 93			lda RBUF
  1597 9266 85 88			sta SYSTEM.MOVE_010A.SOURCE
  1598 9268 AD 54 93			lda RBUF+1
  1599 926B 85 89			sta SYSTEM.MOVE_010A.SOURCE+1
  1600 926D A5 E2			lda _PTR
  1601 926F 85 8C			sta SYSTEM.MOVE_010A.DEST
  1602 9271 A5 E3			lda _PTR+1
  1603 9273 85 8D			sta SYSTEM.MOVE_010A.DEST+1
  1604 9275 AD 7F 21			lda V
  1605 9278 85 84			sta SYSTEM.MOVE_010A.COUNT
  1606 927A AD 80 21			lda V+1
  1607 927D 85 85			sta SYSTEM.MOVE_010A.COUNT+1
  1608 927F				.local +MAIN.SYSTEM.MOVE_010A
  1609 927F				m@INLINE
Macro: MAIN.SYSTEM.MOVE_010A.M@INLINE [Source: MIDICar Player.a65]
     4 927F 20 53 84			jsr @move
Source: MIDICar Player.a65
  1610 					.endl
  1611 9282 4C 92 92			jmp l_0414
  1612 9285			l_0400
  1613
  1614 				; optimize OK (loadmid.inc), line = 93
  1615
  1616 9285 A5 E2			lda _PTR
  1617 9287 8D 93 21			sta BGET.DEST
  1618 928A A5 E3			lda _PTR+1
  1619 928C 8D 94 21			sta BGET.DEST+1
  1620 928F 20 B6 8F			jsr BGET
  1621 9292			l_0414
  1622
  1623 				; optimize OK (loadmid.inc), line = 95
  1624
  1625 9292 AD 80 21			lda V+1
  1626 9295 CD 86 21			cmp LOADSIZE+1
  1627 9298 D0 06			bne @+
  1628 929A AD 7F 21			lda V
  1629 929D CD 85 21			cmp LOADSIZE
  1630 				@
  1631 92A0 F0 09			jeq l_0429
  1632 92A2 AD 07 20			lda SYSTEM.IORESULT
  1633 92A5 8D 6D 21			sta RESULT
  1634 92A8 4C 50 93			jmp @exit					; exit
  1635 92AB			l_0429
  1636
  1637 				; optimize OK (loadmid.inc), line = 97
  1638
  1639 92AB A5 E2			lda _ADR
  1640 92AD 18 6D 7F 21			add V
  1641 92B1 85 E2			sta _ADR
  1642 92B3 A5 E3			lda _ADR+1
  1643 92B5 6D 80 21			adc V+1
  1644 92B8 85 E3			sta _ADR+1
  1645
  1646 				; optimize OK (loadmid.inc), line = 98
  1647
  1648 92BA AD 87 21			lda LEN
  1649 92BD 38 ED 7F 21			sub V
  1650 92C1 8D 87 21			sta LEN
  1651 92C4 AD 88 21			lda LEN+1
  1652 92C7 ED 80 21			sbc V+1
  1653 92CA 8D 88 21			sta LEN+1
  1654 92CD AD 89 21			lda LEN+2
  1655 92D0 E9 00			sbc #$00
  1656 92D2 8D 89 21			sta LEN+2
  1657 92D5 AD 8A 21			lda LEN+3
  1658 92D8 E9 00			sbc #$00
  1659 92DA 8D 8A 21			sta LEN+3
  1660 92DD			c_032E
  1661 92DD			l_032D
  1662
  1663 				; optimize OK (loadmid.inc), line = 74
  1664
  1665 92DD AD 8A 21			lda LEN+3
  1666 92E0 30 0E			bmi @+
  1667 92E2 0D 89 21			ora LEN+2
  1668 92E5 0D 88 21			ora LEN+1
  1669 92E8 0D 87 21			ora LEN
  1670 92EB F0 03 4C 84 91		jne l_032E
  1671 				@
  1672
  1673 				; optimize OK (loadmid.inc), line = 101
  1674
  1675 92F0 AD 8B 21			lda TRKDATA
  1676 92F3 18 69 09			add #$09
  1677 92F6 8D 8B 21			sta TRKDATA
  1678 92F9 90 03			scc
  1679 92FB EE 8C 21			inc TRKDATA+1
  1680 92FE			l_0313
  1681 92FE			l_0303
  1682 92FE			l_0276
  1683
  1684 				; optimize FAIL (1, loadmid.inc), line = 36
  1685
  1686 92FE E8				inx
  1687 92FF A0 01			ldy #1
  1688 9301 AD 07 20			lda SYSTEM.IORESULT
  1689 9304 C9 01			cmp #$01
  1690 9306 F0 01			beq @+
  1691 9308 88				dey
  1692 				@
  1693 9309 94 94			sty :STACKORIGIN,x
  1694 930B AD 51 93			lda F
  1695 930E 8D 17 20			sta SYSTEM.EOF.F
  1696 9311 AD 52 93			lda F+1
  1697 9314 8D 18 20			sta SYSTEM.EOF.F+1
  1698 9317 20 1D 8D			jsr SYSTEM.EOF
  1699 931A E8				inx
  1700 931B AD 19 20 95 94		mva SYSTEM.EOF.RESULT :STACKORIGIN,x
  1701 9320 20 A3 83			jsr notBOOLEAN
  1702 9323 20 DE 83			jsr andAL_CL
  1703 9326 CA				dex
  1704 9327 CA				dex
  1705 9328 A0 01			ldy #1
  1706 932A AD 7A 21			lda TRACKCOUNT
  1707 932D CD 4C 21			cmp TOTALTRACKS
  1708 9330 90 01			bcc @+
  1709 9332 88				dey
  1710 				@
  1711 9333 98				tya
  1712 9334 35 95			and :STACKORIGIN+1,x
  1713 9336 95 95			sta :STACKORIGIN+1,x
  1714 9338 F0 03 4C 61 90		jne l_0277
  1715 933D			b_0277
  1716 				; CloseFile
  1717
  1718 933D 8A 48			txa:pha
  1719 933F 18				clc
  1720 					@closefile F
  1720 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1720 9340 AC 52 93		 LDY F+1
  1720 9343 AD 51 93		 LDA F
  1720 9346 20 4B 81		 JSR @CLOSEFILE
  1721 9349 68 AA			pla:tax
  1722
  1723 				; optimize OK (loadmid.inc), line = 105
  1724
  1725 934B A9 00			lda #$00
  1726 934D 8D 6D 21			sta RESULT
  1727 9350			@exit
  1728
  1729 				; ------------------------------------------------------------
  1730
  1731 = 216B			FN	= DATAORIGIN+$016B
  1732 = 216D			RESULT	= DATAORIGIN+$016D
  1733 = 4000			LOADBUF_SIZE	= $4000
  1734 9350			.var F	= DATAORIGIN+$016E .word
  1735 = 217A			TRACKCOUNT	= DATAORIGIN+$017A
  1736 = 217B			CHUNKTAG	= DATAORIGIN+$017B
  1737 = 217F			V	= DATAORIGIN+$017F
  1738 = 2181			TOP	= DATAORIGIN+$0181
  1739 = 2183			ENDADR	= DATAORIGIN+$0183
  1740 = 2185			LOADSIZE	= DATAORIGIN+$0185
  1741 = 2187			LEN	= DATAORIGIN+$0187
  1742 = 218B			TRKDATA	= DATAORIGIN+$018B
  1743 = 2000			TRKDATA.STATUS	= DATAORIGIN+$0000
  1744 = 2001			TRKDATA.BANK	= DATAORIGIN+$0001
  1745 = 2002			TRKDATA.PTR	= DATAORIGIN+$0002
  1746 = 2004			TRKDATA.TRACKTIME	= DATAORIGIN+$0004
  1747 = 2008			TRKDATA._EVENT	= DATAORIGIN+$0008
  1748 = 4000			adr.RBUF	= $4000
  1749 9350			.var RBUF	= adr.RBUF .word
  1750
  1751 = 216B			@VarData	= FN
  1752 = 0020			@VarDataSize	= 32
  1753
  1754 9350 60				rts						; ret
  1755 = 9351 6E 21		F
  1755 = 9353 00 40		RBUF
  1755 				.endl
  1756
  1757 9355			.local	SETTEMPO					; PROCEDURE
  1758
  1759 				; optimize OK (settempo.inc), line = 10
  1760
  1761 9355 A5 F5			lda _TIMERSTATUS
  1762 9357 49 80			eor #$80
  1763 9359 85 F5			sta _TIMERSTATUS
  1764
  1765 				; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 13
  1766
  1767 935B E8				inx
  1768 935C AD 4F 21 95 94		mva MS_PER_QNOTE :STACKORIGIN,x
  1769 9361 AD 50 21 95 A4		mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
  1770 9366 AD 51 21 95 B4		mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
  1771 936B AD 52 21 95 C4		mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
  1772 9370 E8				inx
  1773 9371 AD 67 21 95 94		mva TEMPOSHIFT :STACKORIGIN,x
  1774 9376 AD 68 21 95 A4		mva TEMPOSHIFT+1 :STACKORIGIN+STACKWIDTH,x
  1775 937B AD 69 21 95 B4		mva TEMPOSHIFT+2 :STACKORIGIN+STACKWIDTH*2,x
  1776 9380 AD 6A 21 95 C4		mva TEMPOSHIFT+3 :STACKORIGIN+STACKWIDTH*3,x
  1777 9385 20 89 83			jsr addEAX_ECX
  1778 9388 AD 4D 21 95 94		mva TICKDIV :STACKORIGIN,x
  1779 938D AD 4E 21 95 A4		mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
  1780 9392 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1781 9396 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1782 939A 20 02 85			jsr divmulINT.DIV
  1783 939D CA				dex
  1784 939E B5 94			lda :STACKORIGIN,x
  1785 93A0 8D 99 21			sta _FREQ
  1786 93A3 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1787 93A5 8D 9A 21			sta _FREQ+1
  1788 93A8 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1789 93AA 8D 9B 21			sta _FREQ+2
  1790 93AD B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1791 93AF 8D 9C 21			sta _FREQ+3
  1792
  1793 				; optimize FAIL ('@I2F_m', settempo.inc), line = 14
  1794
  1795 93B2 AD 99 21 95 94		mva _FREQ :STACKORIGIN,x
  1796 93B7 AD 9A 21 95 A4		mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1797 93BC AD 9B 21 95 B4		mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1798 93C1 AD 9C 21 95 C4		mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1799 93C6 E8				inx
  1800 93C7 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1801 93CB A9 24 95 A4			mva #$24 :STACKORIGIN+STACKWIDTH,x
  1802 93CF A9 74 95 B4			mva #$74 :STACKORIGIN+STACKWIDTH*2,x
  1803 93D3 A9 49 95 C4			mva #$49 :STACKORIGIN+STACKWIDTH*3,x
  1804 93D7 20 B3 8A			jsr @I2F_m
  1805 93DA 20 75 89			jsr @FDIV
  1806 93DD CA				dex
  1807 93DE B5 94			lda :STACKORIGIN,x
  1808 93E0 8D 95 21			sta FREQ
  1809 93E3 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1810 93E5 8D 96 21			sta FREQ+1
  1811 93E8 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1812 93EA 8D 97 21			sta FREQ+2
  1813 93ED B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1814 93EF 8D 98 21			sta FREQ+3
  1815
  1816 				; optimize FAIL ('@FDIV', settempo.inc), line = 15
  1817
  1818 93F2 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1819 93F6 A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1820 93FA A9 80 95 B4			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  1821 93FE A9 3F 95 C4			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  1822 9402 E8				inx
  1823 9403 AD 95 21 95 94		mva FREQ :STACKORIGIN,x
  1824 9408 AD 96 21 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1825 940D AD 97 21 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1826 9412 AD 98 21 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1827 9417 20 75 89			jsr @FDIV
  1828 941A CA				dex
  1829 941B B5 94			lda :STACKORIGIN,x
  1830 941D 8D 95 21			sta FREQ
  1831 9420 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1832 9422 8D 96 21			sta FREQ+1
  1833 9425 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1834 9427 8D 97 21			sta FREQ+2
  1835 942A B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1836 942C 8D 98 21			sta FREQ+3
  1837
  1838 				; optimize FAIL ('@FDIV', settempo.inc), line = 24
  1839
  1840 942F A9 F5 95 94			mva #$F5 :STACKORIGIN,x
  1841 9433 A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1842 9437 A9 7A 95 B4			mva #$7A :STACKORIGIN+STACKWIDTH*2,x
  1843 943B A9 43 95 C4			mva #$43 :STACKORIGIN+STACKWIDTH*3,x
  1844 943F E8				inx
  1845 9440 AD 95 21 95 94		mva FREQ :STACKORIGIN,x
  1846 9445 AD 96 21 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1847 944A AD 97 21 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1848 944F AD 98 21 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1849 9454 20 75 89			jsr @FDIV
  1850 9457 CA				dex
  1851 9458 B5 94			lda :STACKORIGIN,x
  1852 945A 8D 9E 21			sta RATIO
  1853 945D B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1854 945F 8D 9F 21			sta RATIO+1
  1855 9462 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
  1856 9464 8D A0 21			sta RATIO+2
  1857 9467 B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
  1858 9469 8D A1 21			sta RATIO+3
  1859
  1860 				; optimize FAIL ('@F2I', settempo.inc), line = 25
  1861
  1862 946C A9 01 95 94			mva #$01 :STACKORIGIN,x
  1863 9470 E8				inx
  1864 9471 AD 9E 21 95 94		mva RATIO :STACKORIGIN,x
  1865 9476 AD 9F 21 95 A4		mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
  1866 947B AD A0 21 95 B4		mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
  1867 9480 AD A1 21 95 C4		mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
  1868 9485 20 04 8A			jsr @F2I
  1869 9488 A9 00 95 A3			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  1870 948C A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1871 9490 A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1872 9494 B5 93			lda :STACKORIGIN-1,x
  1873 9496 18 75 94			add :STACKORIGIN,x
  1874 9499 8D A2 21			sta _RATIO
  1875 949C CA				dex
  1876 949D CA				dex
  1877
  1878 				; optimize OK (settempo.inc), line = 26
  1879
  1880 949E AD A2 21			lda _RATIO
  1881 94A1 C9 10			cmp #$10
  1882 94A3 90 12			jcc l_04C2
  1883 94A5 A9 00			lda #$00
  1884 94A7 8D 9E 21			sta RATIO
  1885 94AA 8D 9F 21			sta RATIO+1
  1886 94AD A9 70			lda #$70
  1887 94AF 8D A0 21			sta RATIO+2
  1888 94B2 A9 41			lda #$41
  1889 94B4 8D A1 21			sta RATIO+3
  1890 94B7			l_04C2
  1891
  1892 				; optimize OK (settempo.inc), line = 29
  1893
  1894 94B7 A5 F5			lda _TIMERSTATUS
  1895 94B9 29 C0			and #$C0
  1896 94BB 0D A2 21			ora _RATIO
  1897 94BE 85 F5			sta _TIMERSTATUS
  1898
  1899 				; optimize OK (settempo.inc), line = 30
  1900
  1901 94C0 A9 01			lda #$01
  1902 94C2 85 F4			sta _SUBCNT
  1903
  1904 				; optimize FAIL ('@I2F', settempo.inc), line = 32
  1905
  1906 94C4 E8				inx
  1907 94C5 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1908 94C9 A9 FA 95 A4			mva #$FA :STACKORIGIN+STACKWIDTH,x
  1909 94CD E8				inx
  1910 94CE AD 95 21 95 94		mva FREQ :STACKORIGIN,x
  1911 94D3 AD 96 21 95 A4		mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
  1912 94D8 AD 97 21 95 B4		mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
  1913 94DD AD 98 21 95 C4		mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
  1914 94E2 E8				inx
  1915 94E3 AD A2 21 95 94		mva _RATIO :STACKORIGIN,x
  1916 94E8 A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1917 94EC A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  1918 94F0 A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  1919 94F4 20 8E 8A			jsr @I2F
  1920 94F7 20 BE 88			jsr @FMUL
  1921 94FA CA				dex
  1922 94FB A9 00 95 B3			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1923 94FF A9 00 95 C3			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  1924 9503 20 B3 8A			jsr @I2F_m
  1925 9506 20 75 89			jsr @FDIV
  1926 9509 CA				dex
  1927 950A 20 DE 86			jsr @FROUND
  1928 950D 20 04 8A			jsr @F2I
  1929 9510 B5 94			lda :STACKORIGIN,x
  1930 9512 8D 9D 21			sta FDIV
  1931 9515 CA				dex
  1932
  1933 				; optimize OK (settempo.inc), line = 39
  1934
  1935 9516 A5 F5			lda _TIMERSTATUS
  1936 9518 49 80			eor #$80
  1937 951A 85 F5			sta _TIMERSTATUS
  1938
  1939 				; -------------------  ASM Block 00000058  -------------------
  1940
  1941 951C 78			    sei  // disable IRQ
  1942 				  // reset POKEY
  1943 951D A9 00		    lda #$00
  1944 951F A0 03		    ldy #$03
  1945 9521 8D 08 D2		    sta AUDCTL
  1946 9524 8D 01 D2		    sta AUDC1
  1947 9527 8C 0F D2		    sty SKCTL
  1948 				  // setup TIMER1
  1949 952A 8D 08 D2		    sta AUDCTL
  1950 952D AD 9D 21 8D 00 D2	    mva FDIV AUDF1
  1951 				  // initialize IRQ for TIMER1
  1952 				    // lda irqens
  1953 				    // ora #$01
  1954 				    // sta irqens
  1955 				    // sta irqen
  1956 				  // start timer strobe
  1957 9533 8D 09 D2		    sta stimer
  1958
  1959 9536 58			    cli  // enable IRQ
  1960 				  
  1961 				; ------------------------------------------------------------
  1962
  1963 = 2195			FREQ	= DATAORIGIN+$0195
  1964 = 2199			_FREQ	= DATAORIGIN+$0199
  1965 = 219D			FDIV	= DATAORIGIN+$019D
  1966 = 219E			RATIO	= DATAORIGIN+$019E
  1967 = 21A2			_RATIO	= DATAORIGIN+$01A2
  1968
  1969 = 2195			@VarData	= FREQ
  1970 = 000E			@VarDataSize	= 14
  1971
  1972 9537			@exit
  1973 					.ifdef @new
  1974 					lda <@VarData
  1975 					sta :ztmp
  1976 					lda >@VarData
  1977 					ldy #@VarDataSize-1
  1978 					jmp @FreeMem
  1979 					els
  1980 9537 60				rts						; ret
  1981 					eif
  1982 				.endl
  1983
  1984 9538			.local	PROCESSTRACK					; PROCEDURE | KEEP
  1985
  1986 9538 4C F5 96			jmp l_04FC
  1987
  1988 953B			.local	READB						; PROCEDURE | INLINE
  1989
  1990 					.MACRO m@INLINE
  1991 				
  1992 				; optimize OK (processtrack.inc), line = 11
  1993 				
  1994 					ldy #$00
  1995 					lda (_PTR),y
  1996 					sta EVENT
  1997 				
  1998 				; optimize FAIL (0, processtrack.inc), line = 12
  1999 				
  2000 					inc _ADR
  2001 					sne
  2002 					inc _ADR+1
  2003 				
  2004 				; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 13
  2005 				
  2006 					jsr MEMBOUNDCHECK
  2007 					.ENDM
  2008 953B			@exit
  2009 				.endl
  2010
  2011 953B			.local	READVARL					; PROCEDURE | ASSEMBLER
  2012
  2013 				; -------------------  ASM Block 00000059  -------------------
  2014
  2015 953B			    icl 'midfile/asms/readvar.asm'
Source: readvar.asm
     1 = 00F6			A equ _delta;
     2 = 00F7			B equ _delta+1;
     3 = 00F8			C equ _delta+2;
     4 = 00F9			D equ _delta+3;
     5
     6 				  .MACRO m@read2A
     7 				    ldy #0
     8 				    lda (_PTR),y
     9 				    sta A
    10 				    inc _ADR
    11 				    sne
    12 				    inc _ADR+1
    13 				    jsr MEMBOUNDCHECK
    14 				    lda A
    15 				  .ENDM
    16
    17 953B A0 00		  ldy #0
    18 953D 84 F6		  sty A
    19 953F 84 F7		  sty B
    20 9541 84 F8		  sty C
    21 9543 84 F9		  sty D
    22
    23 				// read block
    24
    25 				// read 1st byte to A
    26 9545			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 9545 A0 00		    ldy #0
     2 9547 B1 E2		    lda (_PTR),y
     3 9549 85 F6		    sta A
     4 954B E6 E2		    inc _ADR
     5 954D D0 02		    sne
     6 954F E6 E3		    inc _ADR+1
     7 9551 20 E4 8E		    jsr MEMBOUNDCHECK
     8 9554 A5 F6		    lda A
Source: readvar.asm
    27
    28 9556 10 53		  bpl endRead
    29
    30 				// move A to B and read 2nd byte to A
    31 				// B <- A = 4th readed byte
    32 9558 29 7F			and #$7F
    33 955A 85 F7			sta B
    34
    35 				// read 2nd byte
    36 955C			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 955C A0 00		    ldy #0
     2 955E B1 E2		    lda (_PTR),y
     3 9560 85 F6		    sta A
     4 9562 E6 E2		    inc _ADR
     5 9564 D0 02		    sne
     6 9566 E6 E3		    inc _ADR+1
     7 9568 20 E4 8E		    jsr MEMBOUNDCHECK
     8 956B A5 F6		    lda A
Source: readvar.asm
    37
    38 956D 10 3C		  bpl endRead
    39
    40 				// mova B to C, A to B and read 3rd byte to A
    41 				// C <- B <- A = 4th readed byte
    42 956F A5 F7			lda B
    43 9571 85 F8			sta C
    44 9573 A5 F6			lda A
    45 9575 29 7F			and #$7F
    46 9577 85 F7			sta B
    47
    48 				// read 3rd
    49 9579			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 9579 A0 00		    ldy #0
     2 957B B1 E2		    lda (_PTR),y
     3 957D 85 F6		    sta A
     4 957F E6 E2		    inc _ADR
     5 9581 D0 02		    sne
     6 9583 E6 E3		    inc _ADR+1
     7 9585 20 E4 8E		    jsr MEMBOUNDCHECK
     8 9588 A5 F6		    lda A
Source: readvar.asm
    50
    51 958A 10 1F		  bpl endRead
    52
    53 				// move C to D, B to C, A to B and read 4th byte to A
    54 				// D <- C <- B <- A = 4th readed byte
    55 958C A5 F8			lda C
    56 958E 85 F9			sta D
    57 9590 A5 F7			lda B
    58 9592 85 F8			sta C
    59 9594 A5 F6			lda A
    60 9596 29 7F			and #$7F
    61 9598 85 F7			sta B
    62
    63 				// read 4th
    64 959A			  m@read2A
Macro: MAIN.MIDFILES.PROCESSTRACK.READVARL.M@READ2A [Source: readvar.asm]
     1 959A A0 00		    ldy #0
     2 959C B1 E2		    lda (_PTR),y
     3 959E 85 F6		    sta A
     4 95A0 E6 E2		    inc _ADR
     5 95A2 D0 02		    sne
     6 95A4 E6 E3		    inc _ADR+1
     7 95A6 20 E4 8E		    jsr MEMBOUNDCHECK
     8 95A9 A5 F6		    lda A
Source: readvar.asm
    65
    66 				// end read block
    67 95AB			endRead:
    68
    69 				// decode block
    70 				// 'A' stays as it is
    71
    72 				// 'B' if geather than zero, lets decode
    73 95AB A5 F7		  lda B
    74 95AD F0 0A		  beq decodeC
    75
    76 				// 76543210
    77 				// 0bbbbbbb and %1
    78 				// 0000000b
    79 				//        |
    80 				// +------+ 7:asl
    81 				// v
    82 				// b0000000 ora A
    83 				// baaaaaaa
    84
    85 95AF 46 F7		  lsr B
    86 95B1 90 06		  bcc decodeC
    87
    88 95B3 A5 F6		  lda A
    89 95B5 09 80		  ora #$80
    90 95B7 85 F6		  sta A
    91
    92 95B9			decodeC:
    93 				// 'C' if geather than zero, lets decode
    94 95B9 A5 F8		  lda C
    95 95BB F0 12		  beq decodeD
    96
    97 				// 76543210
    98 				// 0ccccccc and %11
    99 				// 000000cc
   100 				//       ||
   101 				// +-----+| 6:asl
   102 				// |+-----+
   103 				// vv
   104 				// cc000000 ora B
   105 				// ccbbbbbb
   106 95BD 29 03		  and #%11    // 2
   107 95BF F0 08		  beq noOrC   // 2**
   108 95C1 A8			  tay         // 2
   109 95C2 B9 E7 95		  lda OrC,y   // 4*
   110 95C5 05 F7		  ora B       // 3
   111 95C7 85 F7		  sta B       // 3
   112
   113 95C9			noOrC:
   114 95C9 A5 F8		  lda C       // 3
   115 95CB 4A			  lsr @       // 2
   116 95CC 4A			  lsr @       // 2
   117 95CD 85 F8		  sta C       // 3
   118 				              //=26*+**
   119
   120 95CF			decodeD:
   121 				// 'D' if geather than zero, lets decode
   122 95CF A5 F9		  lda D
   123 95D1 F0 13		  beq endDecode
   124
   125 				// 76543210
   126 				// 0ddddddd and %111
   127 				// 00000ddd
   128 				//      |||
   129 				// +----+||
   130 				// |+----+| 5:asl
   131 				// ||+----+
   132 				// vvv
   133 				// ddd00000 ora C
   134 				// dddccccc
   135
   136 95D3 29 07		  and #%111   // 2
   137 95D5 F0 08		  beq noOrD   // 2**
   138 95D7 A8			  tay         // 2
   139 95D8 B9 EB 95		  lda OrD,y   // 4*
   140 95DB 05 F8		  ora C       // 3
   141 95DD 85 F8		  sta C       // 3
   142
   143 95DF			noOrD:
   144 95DF A5 F9		  lda D       // 3
   145 95E1 4A			  lsr @       // 2
   146 95E2 4A			  lsr @       // 2
   147 95E3 4A			  lsr @       // 2
   148 95E4 85 F9		  sta D       // 3
   149 				              //=28*+**
   150 95E6			endDecode:
   151 95E6 60			  rts
   152
   153 95E7			OrC:
   154 95E7 00			  dta %00000000
   155 95E8 40			  dta %01000000
   156 95E9 80			  dta %10000000
   157 95EA C0			  dta %11000000
   158
   159 95EB			OrD:
   160 95EB 00			  dta %00000000
   161 95EC 20			  dta %00100000
   162 95ED 40			  dta %01000000
   163 95EE 60			  dta %01100000
   164 95EF 80			  dta %10000000
   165 95F0 A0			  dta %10100000
   166 95F1 C0			  dta %11000000
   167 95F2 E0			  dta %11100000
  2016 				  
  2017 95F3			@exit
  2018 					.ifdef @new
  2019 					lda <@VarData
  2020 					sta :ztmp
  2021 					lda >@VarData
  2022 					ldy #@VarDataSize-1
  2023 					jmp @FreeMem
  2024 					els
  2025 95F3 60				rts						; ret
  2026 					eif
  2027 				.endl
  2028
  2029 95F4			.local	READ24						; PROCEDURE | ASSEMBLER
  2030
  2031 				; -------------------  ASM Block 00000060  -------------------
  2032
  2033 95F4			    icl 'midfile/asms/read24bigendian.pas'
Source: read24bigendian.pas
     1 				  .MACRO m@readByte storeTo
     2 				    ldy #0
     3 				    lda (_PTR),y
     4 				    sta :storeTo
     5 				    inc _ADR
     6 				    sne
     7 				    inc _ADR+1
     8 				    jsr MEMBOUNDCHECK
     9 				  .ENDM
    10
    11 95F4			  m@readByte _delta+2
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 95F4 A0 00		    ldy #0
     2 95F6 B1 E2		    lda (_PTR),y
     3 95F8 85 F8		    sta _DELTA+2
     4 95FA E6 E2		    inc _ADR
     5 95FC D0 02		    sne
     6 95FE E6 E3		    inc _ADR+1
     7 9600 20 E4 8E		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    12 9603			  m@readByte _delta+1
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 9603 A0 00		    ldy #0
     2 9605 B1 E2		    lda (_PTR),y
     3 9607 85 F7		    sta _DELTA+1
     4 9609 E6 E2		    inc _ADR
     5 960B D0 02		    sne
     6 960D E6 E3		    inc _ADR+1
     7 960F 20 E4 8E		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    13 9612			  m@readByte _delta+0
Macro: MAIN.MIDFILES.PROCESSTRACK.READ24.M@READBYTE [Source: read24bigendian.pas]
     1 9612 A0 00		    ldy #0
     2 9614 B1 E2		    lda (_PTR),y
     3 9616 85 F6		    sta _DELTA+0
     4 9618 E6 E2		    inc _ADR
     5 961A D0 02		    sne
     6 961C E6 E3		    inc _ADR+1
     7 961E 20 E4 8E		    jsr MEMBOUNDCHECK
Source: read24bigendian.pas
    14 9621 A9 00		  lda #0
    15 9623 85 F9		  sta _delta+3
  2034 				  
  2035 9625			@exit
  2036 					.ifdef @new
  2037 					lda <@VarData
  2038 					sta :ztmp
  2039 					lda >@VarData
  2040 					ldy #@VarDataSize-1
  2041 					jmp @FreeMem
  2042 					els
  2043 9625 60				rts						; ret
  2044 					eif
  2045 				.endl
  2046
  2047 9626			.local	EVENTMIDI3					; PROCEDURE
  2048
  2049 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 4
  2050
  2051 9626 20 3B 8E			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2052
  2053 				; optimize FAIL ('m@INLINE', events.inc), line = 5
  2054
  2055 9629				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2056 9629				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9629 A0 00			ldy #$00
     5 962B B1 E2			lda (_PTR),y
     6 962D 85 FF			sta EVENT
    10 962F E6 E2			inc _ADR
    11 9631 D0 02			sne
    12 9633 E6 E3			inc _ADR+1
    16 9635 20 E4 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2057 					.endl
  2058 9638 20 3B 8E			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2059
  2060 				; optimize FAIL ('m@INLINE', events.inc), line = 6
  2061
  2062 963B				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2063 963B				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 963B A0 00			ldy #$00
     5 963D B1 E2			lda (_PTR),y
     6 963F 85 FF			sta EVENT
    10 9641 E6 E2			inc _ADR
    11 9643 D0 02			sne
    12 9645 E6 E3			inc _ADR+1
    16 9647 20 E4 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2064 					.endl
  2065 964A 20 3B 8E			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2066
  2067 				; optimize OK (events.inc), line = 15
  2068
  2069 964D A5 FF			lda EVENT
  2070 964F F0 12			jeq l_0537
  2071 9651 A5 E8			lda _EVENT
  2072 9653 29 F0			and #$F0
  2073 9655 C9 90			cmp #$90
  2074 9657 D0 0A			jne l_0537
  2075
  2076 				; optimize OK (events.inc), line = 16
  2077
  2078 9659 A5 E8			lda _EVENT
  2079 965B 29 0F			and #$0F
  2080 965D A8				tay
  2081 965E A5 FF			lda MC6850.MC_BYTE
  2082 9660 99 53 21			sta adr.CHNVOLUME,y
  2083 9663			l_0537
  2084 9663			@exit
  2085 					.ifdef @new
  2086 					lda <@VarData
  2087 					sta :ztmp
  2088 					lda >@VarData
  2089 					ldy #@VarDataSize-1
  2090 					jmp @FreeMem
  2091 					els
  2092 9663 60				rts						; ret
  2093 					eif
  2094 				.endl
  2095
  2096 9664			.local	EVENTMIDI2					; PROCEDURE
  2097
  2098 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 22
  2099
  2100 9664 20 3B 8E			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2101
  2102 				; optimize FAIL ('m@INLINE', events.inc), line = 23
  2103
  2104 9667				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2105 9667				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9667 A0 00			ldy #$00
     5 9669 B1 E2			lda (_PTR),y
     6 966B 85 FF			sta EVENT
    10 966D E6 E2			inc _ADR
    11 966F D0 02			sne
    12 9671 E6 E3			inc _ADR+1
    16 9673 20 E4 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2106 					.endl
  2107 9676 20 3B 8E			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2108 9679			@exit
  2109 					.ifdef @new
  2110 					lda <@VarData
  2111 					sta :ztmp
  2112 					lda >@VarData
  2113 					ldy #@VarDataSize-1
  2114 					jmp @FreeMem
  2115 					els
  2116 9679 60				rts						; ret
  2117 					eif
  2118 				.endl
  2119
  2120 967A			.local	EVENTSYSEX					; PROCEDURE
  2121
  2122 				; optimize FAIL ('READVARL', events.inc), line = 32
  2123
  2124 967A 20 3B 95			jsr READVARL
  2125
  2126 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 34
  2127
  2128 967D 20 3B 8E			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2129
  2130 				; --- WhileProlog
  2131 9680 4C 97 96			jmp l_0556
  2132 9683			l_0557
  2133
  2134 				; optimize FAIL ('m@INLINE', events.inc), line = 40
  2135
  2136 9683				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2137 9683				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 9683 A0 00			ldy #$00
     5 9685 B1 E2			lda (_PTR),y
     6 9687 85 FF			sta EVENT
    10 9689 E6 E2			inc _ADR
    11 968B D0 02			sne
    12 968D E6 E3			inc _ADR+1
    16 968F 20 E4 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2138 					.endl
  2139
  2140 				; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 42
  2141
  2142 9692 20 3B 8E			jsr MIDI_FIFO.FIFO_WRITEBYTE
  2143
  2144 				; optimize FAIL (0, events.inc), line = 46
  2145
  2146 9695 C6 F6			dec _TMP
  2147 9697			l_0556
  2148
  2149 				; optimize OK (events.inc), line = 38
  2150
  2151 9697 A5 F6			lda _TMP
  2152 9699 D0 E8			jne l_0557
  2153 969B			@exit
  2154 					.ifdef @new
  2155 					lda <@VarData
  2156 					sta :ztmp
  2157 					lda >@VarData
  2158 					ldy #@VarDataSize-1
  2159 					jmp @FreeMem
  2160 					els
  2161 969B 60				rts						; ret
  2162 					eif
  2163 				.endl
  2164
  2165 969C			.local	EVENTMETA					; PROCEDURE
  2166
  2167 				; optimize FAIL ('m@INLINE', events.inc), line = 58
  2168
  2169 969C				.local +MAIN.MIDFILES.PROCESSTRACK.READB
  2170 969C				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 969C A0 00			ldy #$00
     5 969E B1 E2			lda (_PTR),y
     6 96A0 85 FF			sta EVENT
    10 96A2 E6 E2			inc _ADR
    11 96A4 D0 02			sne
    12 96A6 E6 E3			inc _ADR+1
    16 96A8 20 E4 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2171 					.endl
  2172
  2173 				; optimize FAIL ('READVARL', events.inc), line = 59
  2174
  2175 96AB 20 3B 95			jsr READVARL
  2176
  2177 				; optimize OK (events.inc), line = 61
  2178
  2179 96AE A5 FF			lda EVENT
  2180 96B0 C9 2F			cmp #$2F
  2181 96B2 D0 0B			jne l_0581
  2182
  2183 				; optimize FAIL (0, events.inc), line = 63
  2184
  2185 96B4 C6 DF			dec PLAYINGTRACKS
  2186
  2187 				; optimize OK (events.inc), line = 64
  2188
  2189 96B6 A5 E0			lda _STATUS
  2190 96B8 09 40			ora #$40
  2191 96BA 85 E0			sta _STATUS
  2192 96BC 4C F4 96			jmp l_0599
  2193 96BF			l_0581
  2194
  2195 				; optimize OK (events.inc), line = 66
  2196
  2197 96BF A5 FF			lda EVENT
  2198 96C1 C9 51			cmp #$51
  2199 96C3 D0 1D			jne l_05AB
  2200
  2201 				; optimize FAIL ('READ24', events.inc), line = 68
  2202
  2203 96C5 20 F4 95			jsr READ24
  2204
  2205 				; optimize OK (events.inc), line = 69
  2206
  2207 96C8 A5 F6			lda _DELTA
  2208 96CA 8D 4F 21			sta MS_PER_QNOTE
  2209 96CD A5 F7			lda _DELTA+1
  2210 96CF 8D 50 21			sta MS_PER_QNOTE+1
  2211 96D2 A5 F8			lda _DELTA+2
  2212 96D4 8D 51 21			sta MS_PER_QNOTE+2
  2213 96D7 A5 F9			lda _DELTA+3
  2214 96D9 8D 52 21			sta MS_PER_QNOTE+3
  2215
  2216 				; optimize FAIL ('SETTEMPO', events.inc), line = 70
  2217
  2218 96DC 20 55 93			jsr SETTEMPO
  2219 96DF 4C F4 96			jmp l_05BB
  2220 96E2			l_05AB
  2221
  2222 				; --- WhileProlog
  2223 96E2 4C F0 96			jmp l_05BD
  2224 96E5			l_05BE
  2225
  2226 				; optimize FAIL (0, events.inc), line = 85
  2227
  2228 96E5 C6 F6			dec _TMP
  2229
  2230 				; optimize FAIL (0, events.inc), line = 86
  2231
  2232 96E7 E6 E2			inc _ADR
  2233 96E9 D0 02			sne
  2234 96EB E6 E3			inc _ADR+1
  2235
  2236 				; optimize FAIL ('MEMBOUNDCHECK', events.inc), line = 87
  2237
  2238 96ED 20 E4 8E			jsr MEMBOUNDCHECK
  2239 96F0			l_05BD
  2240
  2241 				; optimize OK (events.inc), line = 83
  2242
  2243 96F0 A5 F6			lda _TMP
  2244 96F2 D0 F1			jne l_05BE
  2245 96F4			l_05BB
  2246 96F4			l_0599
  2247 96F4			@exit
  2248 					.ifdef @new
  2249 					lda <@VarData
  2250 					sta :ztmp
  2251 					lda >@VarData
  2252 					ldy #@VarDataSize-1
  2253 					jmp @FreeMem
  2254 					els
  2255 96F4 60				rts						; ret
  2256 					eif
  2257 				.endl
  2258 96F5			l_04FC
  2259
  2260 				; -------------------  ASM Block 00000061  -------------------
  2261
  2262 				 ldy _bank \ lda $100,y \ sta PORTB 
  2262 96F5 A4 E1		 LDY _BANK 
  2262 96F7 B9 00 01		 LDA $100,Y 
  2262 96FA 8D 01 D3		 STA PORTB 
  2263 				; --- RepeatUntilProlog
  2264 96FD			l_05D5
  2265
  2266 				; optimize OK (processtrack.inc), line = 33
  2267
  2268 96FD A5 E0			lda _STATUS
  2269 96FF 30 2E			jmi l_05EB
  2270
  2271 				; optimize FAIL ('READVARL', processtrack.inc), line = 35
  2272
  2273 9701 20 3B 95			jsr READVARL
  2274
  2275 				; optimize OK (processtrack.inc), line = 36
  2276
  2277 9704 A5 F9			lda _DELTA+3
  2278 9706 30 24			jmi l_05FD
  2279 9708 05 F8			ora _DELTA+2
  2280 970A 05 F7			ora _DELTA+1
  2281 970C 05 F6			ora _DELTA
  2282 970E F0 1C			jeq l_05FD
  2283
  2284 				; optimize OK (processtrack.inc), line = 38
  2285
  2286 9710 A5 E4			lda _TRACKTIME
  2287 9712 18 65 F6			add _DELTA
  2288 9715 85 E4			sta _TRACKTIME
  2289 9717 A5 E5			lda _TRACKTIME+1
  2290 9719 65 F7			adc _DELTA+1
  2291 971B 85 E5			sta _TRACKTIME+1
  2292 971D A5 E6			lda _TRACKTIME+2
  2293 971F 65 F8			adc _DELTA+2
  2294 9721 85 E6			sta _TRACKTIME+2
  2295 9723 A5 E7			lda _TRACKTIME+3
  2296 9725 65 F9			adc _DELTA+3
  2297 9727 85 E7			sta _TRACKTIME+3
  2298 9729 4C 97 97			jmp b_05D5					; break
  2299 972C			l_05FD
  2300 972C 4C 35 97			jmp l_0611
  2301 972F			l_05EB
  2302
  2303 				; optimize OK (processtrack.inc), line = 43
  2304
  2305 972F A5 E0			lda _STATUS
  2306 9731 29 7F			and #$7F
  2307 9733 85 E0			sta _STATUS
  2308 9735			l_0611
  2309
  2310 				; optimize OK (processtrack.inc), line = 45
  2311
  2312 9735 A0 00			ldy #$00
  2313 9737 B1 E2			lda (_PTR),y
  2314 9739 10 16			jpl l_0634
  2315
  2316 				; optimize FAIL ('m@INLINE', processtrack.inc), line = 47
  2317
  2318 973B				.local READB
  2319 973B				m@INLINE
Macro: MAIN.MIDFILES.PROCESSTRACK.READB.M@INLINE [Source: MIDICar Player.a65]
     4 973B A0 00			ldy #$00
     5 973D B1 E2			lda (_PTR),y
     6 973F 85 FF			sta EVENT
    10 9741 E6 E2			inc _ADR
    11 9743 D0 02			sne
    12 9745 E6 E3			inc _ADR+1
    16 9747 20 E4 8E			jsr MEMBOUNDCHECK
Source: MIDICar Player.a65
  2320 					.endl
  2321 974A A5 FF			lda EVENT
  2322 974C 85 E8			sta _EVENT
  2323 974E 4C 55 97			jmp l_0645
  2324 9751			l_0634
  2325
  2326 				; optimize OK (processtrack.inc), line = 50
  2327
  2328 9751 A5 E8			lda _EVENT
  2329 9753 85 FF			sta EVENT
  2330 9755			l_0645
  2331
  2332 				; optimize OK (processtrack.inc), line = 52
  2333
  2334 9755 A9 BF			lda #$BF
  2335 9757 C5 E8			cmp _EVENT
  2336 9759 90 06			jcc l_065D
  2337
  2338 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 54
  2339
  2340 975B 20 26 96			jsr EVENTMIDI3
  2341 975E 4C 8E 97			jmp l_0668
  2342 9761			l_065D
  2343 9761 A9 DF			lda #$DF
  2344 9763 C5 E8			cmp _EVENT
  2345 9765 90 06			jcc l_067A
  2346
  2347 				; optimize FAIL ('EVENTMIDI2', processtrack.inc), line = 56
  2348
  2349 9767 20 64 96			jsr EVENTMIDI2
  2350 976A 4C 8E 97			jmp l_0685
  2351 976D			l_067A
  2352 976D A9 EF			lda #$EF
  2353 976F C5 E8			cmp _EVENT
  2354 9771 90 06			jcc l_0697
  2355
  2356 				; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 58
  2357
  2358 9773 20 26 96			jsr EVENTMIDI3
  2359 9776 4C 8E 97			jmp l_06A2
  2360 9779			l_0697
  2361 9779 A9 F7			lda #$F7
  2362 977B C5 E8			cmp _EVENT
  2363 977D 90 06			jcc l_06B4
  2364
  2365 				; optimize FAIL ('EVENTSYSEX', processtrack.inc), line = 60
  2366
  2367 977F 20 7A 96			jsr EVENTSYSEX
  2368 9782 4C 8E 97			jmp l_06BF
  2369 9785			l_06B4
  2370 9785 A5 E8			lda _EVENT
  2371 9787 C9 FF			cmp #$FF
  2372 9789 D0 03			jne l_06D1
  2373
  2374 				; optimize FAIL ('EVENTMETA', processtrack.inc), line = 61
  2375
  2376 978B 20 9C 96			jsr EVENTMETA
  2377 978E			l_06D1
  2378 978E			l_06BF
  2379 978E			l_06A2
  2380 978E			l_0685
  2381 978E			l_0668
  2382
  2383 				; optimize OK (processtrack.inc), line = 63
  2384
  2385 978E A5 E0			lda _STATUS
  2386 9790 29 40			and #$40
  2387 9792 D0 03 4C FD 96		jeq l_05D5
  2388 9797			b_05D5
  2389
  2390 				; optimize OK (processtrack.inc), line = 65
  2391
  2392 9797 A5 E0			lda _STATUS
  2393 9799 09 80			ora #$80
  2394 979B 85 E0			sta _STATUS
  2395
  2396 				; ------------------------------------------------------------
  2397
  2398 = 00FF			EVENT	= $FF
  2399 979D			@exit
  2400 					.ifdef @new
  2401 					lda <@VarData
  2402 					sta :ztmp
  2403 					lda >@VarData
  2404 					ldy #@VarDataSize-1
  2405 					jmp @FreeMem
  2406 					els
  2407 979D 60				rts						; ret
  2408 					eif
  2409 				.endl
  2410
  2411 979E			.local	PROCESSMIDI					; PROCEDURE
  2412
  2413 				; optimize FAIL ('MIDI_FIFO.FIFO_PUSHDIRECT2MC6850', processmidi.inc), line = 29
  2414
  2415 979E 20 25 8E			jsr MIDI_FIFO.FIFO_PUSHDIRECT2MC6850
  2416
  2417 				; optimize OK (processmidi.inc), line = 31
  2418
  2419 97A1 A5 F5			lda _TIMERSTATUS
  2420 97A3 10 03			jpl l_070B
  2421 97A5 4C 1F 98			jmp @exit					; exit
  2422 97A8			l_070B
  2423
  2424 				; optimize OK (processmidi.inc), line = 32
  2425
  2426 97A8 A5 DE			lda CTRK
  2427 97AA CD 4C 21			cmp TOTALTRACKS
  2428 97AD D0 11			jne l_0722
  2429
  2430 				; optimize OK (processmidi.inc), line = 34
  2431
  2432 97AF A9 01			lda #$01
  2433 97B1 85 DE			sta CTRK
  2434
  2435 				; optimize OK (processmidi.inc), line = 35
  2436
  2437 97B3 AD B6 98			lda MIDTRACKS
  2438 97B6 85 DC			sta CURTRACKPTR
  2439 97B8 AD B7 98			lda MIDTRACKS+1
  2440 97BB 85 DD			sta CURTRACKPTR+1
  2441 97BD 4C CD 97			jmp l_0735
  2442 97C0			l_0722
  2443
  2444 				; optimize FAIL (0, processmidi.inc), line = 39
  2445
  2446 97C0 E6 DE			inc CTRK
  2447
  2448 				; optimize OK (processmidi.inc), line = 40
  2449
  2450 97C2 A5 DC			lda CURTRACKPTR
  2451 97C4 18 69 09			add #$09
  2452 97C7 85 DC			sta CURTRACKPTR
  2453 97C9 90 02			scc
  2454 97CB E6 DD			inc CURTRACKPTR+1
  2455 97CD			l_0735
  2456
  2457 				; -------------------  ASM Block 00000062  -------------------
  2458
  2459 				// if _status and f_stop=0 then
  2460 97CD A0 00		    ldy #0
  2461 97CF B1 DC		    lda (curTrackPtr),y
  2462 97D1 29 40		    and #f_stop
  2463 97D3 D0 4A		    bne skipProcessTrack
  2464
  2465 				// if _totalTicks>=_trackTime then ProcessTrack;
  2466 97D5 A0 07		    ldy #7
  2467 97D7 A5 F3		    lda _totalTicks+3
  2468 97D9 38 F1 DC		    sub (curTrackPtr),y
  2469 97DC D0 22		    bne L4
  2470 97DE A5 F2		    lda _totalTicks+2
  2471 97E0 88			    dey
  2472 97E1 38 F1 DC		    sub (curTrackPtr),y
  2473 97E4 D0 0E		    bne L1
  2474 97E6 A5 F1		    lda _totalTicks+1
  2475 97E8 88			    dey
  2476 97E9 38 F1 DC		    sub (curTrackPtr),y
  2477 97EC D0 06		    bne L1
  2478 97EE A5 F0		    lda _totalTicks
  2479 97F0 88			    dey
  2480 97F1 38 F1 DC		    sub (curTrackPtr),y
  2481 97F4			  L1:
  2482 97F4 F0 10		    beq L5
  2483 97F6 B0 04		    bcs L3
  2484 97F8 A9 FF		    lda #$ff
  2485 97FA D0 0A		    bne L5
  2486 97FC			  L3:
  2487 97FC A9 01		    lda #$01
  2488 97FE D0 06		    bne L5
  2489 9800			  L4:
  2490 9800 50 04		    bvc L5
  2491 9802 49 FF		    eor #$ff
  2492 9804 09 01		    ora #$01
  2493 9806			  L5:
  2494 9806 30 17		    jmi skipProcessTrack
  2495
  2496 				  // copy current track data to work registers
  2497 9808 A0 08		    ldy #sizeOf_TMIDTrack-1
  2498 980A			  loop:
  2499 980A B1 DC		    lda (curTrackPtr),y
  2500 980C 99 E0 00		    sta _trkRegs,y
  2501 980F 88			    dey
  2502 9810 10 F8		    bpl loop
  2503
  2504 				  
  2505 				; optimize FAIL ('PROCESSTRACK', processmidi.inc), line = 92
  2506
  2507 9812 20 38 95			jsr PROCESSTRACK
  2508
  2509 				; -------------------  ASM Block 00000063  -------------------
  2510
  2511 				// store work registers in track data
  2512 9815 A0 08		    ldy #sizeOf_TMIDTrack-1
  2513 9817			  loop2:
  2514 9817 B9 E0 00		    lda _trkRegs,y
  2515 981A 91 DC		    sta (curTrackPtr),y
  2516 981C 88			    dey
  2517 981D 10 F8		    bpl loop2
  2518
  2519 981F			  skipProcessTrack:
  2520 				  
  2521 981F			@exit
  2522 					.ifdef @new
  2523 					lda <@VarData
  2524 					sta :ztmp
  2525 					lda >@VarData
  2526 					ldy #@VarDataSize-1
  2527 					jmp @FreeMem
  2528 					els
  2529 981F 60				rts						; ret
  2530 					eif
  2531 				.endl
  2532
  2533 9820			.local	INITTIMER					; PROCEDURE
  2534
  2535 				; optimize OK (MIDFILES), line = 74
  2536
  2537 9820 A9 00			lda #$00
  2538 9822 85 F0			sta _TOTALTICKS
  2539 9824 85 F1			sta _TOTALTICKS+1
  2540 9826 85 F2			sta _TOTALTICKS+2
  2541 9828 85 F3			sta _TOTALTICKS+3
  2542
  2543 				; optimize OK (MIDFILES), line = 75
  2544
  2545 982A 8D 67 21			sta TEMPOSHIFT
  2546 982D 8D 68 21			sta TEMPOSHIFT+1
  2547 9830 8D 69 21			sta TEMPOSHIFT+2
  2548 9833 8D 6A 21			sta TEMPOSHIFT+3
  2549
  2550 				; optimize OK (MIDFILES), line = 76
  2551
  2552 9836 A9 01			lda #$01
  2553 9838 85 F5			sta _TIMERSTATUS
  2554
  2555 				; optimize OK (MIDFILES), line = 77
  2556
  2557 983A AD 4C 21			lda TOTALTRACKS
  2558 983D 85 DE			sta CTRK
  2559
  2560 				; optimize OK (MIDFILES), line = 78
  2561
  2562 983F 85 DF			sta PLAYINGTRACKS
  2563
  2564 				; -------------------  ASM Block 00000064  -------------------
  2565
  2566 9841 78			    sei
  2567 9842 A9 C0 8D 10 02	    mva <INT_TIMER VTIMR1
  2568 9847 A9 8E 8D 11 02	    mva >INT_TIMER VTIMR1+1
  2569 				  // reset POKEY
  2570 984C A9 00		    lda #$00
  2571 984E A0 03		    ldy #$03
  2572 9850 8D 08 D2		    sta AUDCTL
  2573 9853 8D 01 D2		    sta AUDC1
  2574 9856 8C 0F D2		    sty SKCTL
  2575 				  // setup TIMER1
  2576 9859 8D 08 D2		    sta AUDCTL
  2577 985C A5 53 8D 00 D2	    mva 83 AUDF1
  2578 				  // initialize IRQ for TIMER1
  2579 9861 A5 10		    lda irqens
  2580 9863 09 01		    ora #$01
  2581 9865 85 10		    sta irqens
  2582 9867 8D 0E D2		    sta irqen
  2583 				  // start timer strobe
  2584 986A 8D 09 D2		    sta stimer
  2585
  2586 986D 58			    cli  // enable IRQ
  2587 				  
  2588 986E			@exit
  2589 					.ifdef @new
  2590 					lda <@VarData
  2591 					sta :ztmp
  2592 					lda >@VarData
  2593 					ldy #@VarDataSize-1
  2594 					jmp @FreeMem
  2595 					els
  2596 986E 60				rts						; ret
  2597 					eif
  2598 				.endl
  2599
  2600 986F			.local	NULLLOADPRCS					; PROCEDURE
  2601
  2602 986F			@exit
  2603 					.ifdef @new
  2604 					lda <@VarData
  2605 					sta :ztmp
  2606 					lda >@VarData
  2607 					ldy #@VarDataSize-1
  2608 					jmp @FreeMem
  2609 					els
  2610 986F 60				rts						; ret
  2611 					eif
  2612 				.endl
  2613
  2614 				; ------------------------------------------------------------
  2615 				; ------------------------------------------------------------
  2616 9870			@UnitInit
  2617
  2618 				; optimize OK (MIDFILES), line = 111
  2619
  2620 9870 A9 00			lda #$00
  2621 9872 8D 63 21			sta OLDTIMERVEC
  2622 9875 8D 64 21			sta OLDTIMERVEC+1
  2623
  2624 				; optimize OK (MIDFILES), line = 112
  2625
  2626 9878 A9 6F			lda <NULLLOADPRCS
  2627 987A 8D 65 21			sta LOADPROCESS
  2628 987D A9 98			lda >NULLLOADPRCS
  2629 987F 8D 66 21			sta LOADPROCESS+1
  2630
  2631 				; optimize OK (MIDFILES), line = 113
  2632
  2633 9882 A9 80			lda #$80
  2634 9884 8D 4D 21			sta TICKDIV
  2635 9887 A9 01			lda #$01
  2636 9889 8D 4E 21			sta TICKDIV+1
  2637
  2638 				; optimize OK (MIDFILES), line = 114
  2639
  2640 988C A9 20			lda #$20
  2641 988E 8D 4F 21			sta MS_PER_QNOTE
  2642 9891 A9 A1			lda #$A1
  2643 9893 8D 50 21			sta MS_PER_QNOTE+1
  2644 9896 A9 07			lda #$07
  2645 9898 8D 51 21			sta MS_PER_QNOTE+2
  2646 989B A9 00			lda #$00
  2647 989D 8D 52 21			sta MS_PER_QNOTE+3
  2648
  2649 				; optimize OK (MIDFILES), line = 115
  2650
  2651 98A0 8D 4C 21			sta TOTALTRACKS
  2652
  2653 				; optimize OK (MIDFILES), line = 116
  2654
  2655 98A3 85 DE			sta CTRK
  2656
  2657 				; optimize OK (MIDFILES), line = 117
  2658
  2659 98A5 A9 80			lda #$80
  2660 98A7 85 F5			sta _TIMERSTATUS
  2661
  2662 98A9 AD 10 02			lda VTIMR1
  2663 98AC 8D 63 21			sta OLDTIMERVEC
  2664 98AF AD 11 02			lda VTIMR1+1
  2665 98B2 8D 64 21			sta OLDTIMERVEC+1
  2666
  2667 98B5 60				rts
  2668
  2669 				; ------------------------------------------------------------
  2670
  2671 = 0080			F_COUNTER	= $80
  2672 = 0040			F_TICK	= $40
  2673 = 00C0			F_FLAGS	= $C0
  2674 = 000F			F_RATIO	= $0F
  2675 = 0080			F_SKIPDELTA	= $80
  2676 = 0040			F_STOP	= $40
  2677 = 00E0			_TRKREGS	= $E0
  2678 = 0000			MID_0	= $00
  2679 = 0001			MID_1	= $01
  2680 = 0064			ERR_UNSUPPORTED_FORMAT	= $64
  2681 = 0065			ERR_NOT_ENOUGHT_MEMORY	= $65
  2682 = 6468544D		TAG_MTHD	= $6468544D
  2683 = 6B72544D		TAG_MTRK	= $6B72544D
  2684 = 0009			SIZEOF_TMIDTRACK	= $09
  2685 = 00DC			CURTRACKPTR	= $DC
  2686 = 00DE			CTRK	= $DE
  2687 = 00DF			PLAYINGTRACKS	= $DF
  2688 = 00F0			_TOTALTICKS	= $F0
  2689 = 00F4			_SUBCNT	= $F4
  2690 = 00F5			_TIMERSTATUS	= $F5
  2691 = 00F6			_DELTA	= $F6
  2692 = 00F6			_TMP	= $F6
  2693 = 00E0			_STATUS	= $E0
  2694 = 00E1			_BANK	= $E1
  2695 = 00E2			_PTR	= $E2
  2696 = 00E2			_ADR	= $E2
  2697 = 00E4			_TRACKTIME	= $E4
  2698 = 00E8			_EVENT	= $E8
  2699 = 2148			MIDDATA	= DATAORIGIN+$0148
  2700 = 214A			adr.MIDTRACKS	= [DATAORIGIN+$014A] .array [1]
  2701 98B6			.var MIDTRACKS	= adr.MIDTRACKS .word
  2702 = 214B			FORMAT	= DATAORIGIN+$014B
  2703 = 214C			TOTALTRACKS	= DATAORIGIN+$014C
  2704 = 214D			TICKDIV	= DATAORIGIN+$014D
  2705 = 214F			MS_PER_QNOTE	= DATAORIGIN+$014F
  2706 = 2153			adr.CHNVOLUME	= [DATAORIGIN+$0153] .array [16]
  2707 98B6			.var CHNVOLUME	= adr.CHNVOLUME .word
  2708 = 2163			OLDTIMERVEC	= DATAORIGIN+$0163
  2709 = 2165			LOADPROCESS	= DATAORIGIN+$0165
  2710 = 2167			TEMPOSHIFT	= DATAORIGIN+$0167
  2711
  2712 = 98B6 4A 21		MIDTRACKS
  2712 = 98B8 53 21		CHNVOLUME
  2712 				.endl							; UNIT MIDFILES
  2713
  2714 				; ------------------------------------------------------------
  2715
  2716 98BA			.local	MISC						; UNIT
  2717
  2718 98BA			.local	DETECTMEM					; FUNCTION | ASSEMBLER
  2719
  2720 				; -------------------  ASM Block 00000072  -------------------
  2721
  2722 98BA 8A 48			txa:pha
  2723
  2724 = 0400			bsav	= @buf
  2725
  2726 = 4000			ext_b	= $4000		;cokolwiek z zakresu $4000-$7FFF
  2727
  2728 98BC A0 00			ldy #0
  2729 98BE B9 CF 98 99 00 06	mov	mva copy,y detect,y
  2730 98C4 C8				iny
  2731 98C5 C0 8C			cpy #.sizeof(detect)
  2732 98C7 D0 F5			bne mov
  2733
  2734 98C9 20 00 06			jsr detect
  2735
  2736 98CC 4C 5B 99			jmp stop
  2737
  2738 98CF			copy
  2739
  2740 0600			.local	detect,$0600
  2741
  2742 0600 AD 01 D3			lda portb
  2743 0603 48				pha
  2744
  2745 0604 AD 0B D4 D0 FB		lda:rne vcount
  2746
  2747 				;	lda #$ff
  2748 				;	sta portb
  2749
  2750 0609 AD 00 40			lda ext_b
  2751 060C 48				pha
  2752
  2753 060D A2 0F			ldx #$0f	;zapamiętanie bajtów ext (z 16 bloków po 64k)
  2754 060F 20 7F 06		_p0	jsr setpb
  2755 0612 AD 00 40			lda ext_b
  2756 0615 9D 00 04			sta bsav,x
  2757 0618 CA				dex
  2758 0619 10 F4			bpl _p0
  2759
  2760 061B A2 0F			ldx #$0f	;wyzerowanie ich (w oddzielnej pętli, bo nie wiadomo
  2761 061D 20 7F 06		_p1	jsr setpb	;które kombinacje bitów PORTB wybierają te same banki)
  2762 0620 A9 00			lda #$00
  2763 0622 8D 00 40			sta ext_b
  2764 0625 CA				dex
  2765 0626 10 F5			bpl _p1
  2766
  2767 0628 8E 01 D3			stx portb	;eliminacja pamięci podstawowej
  2768 062B 8E 00 40			stx ext_b
  2769 062E 86 00			stx $00		;niezbędne dla niektórych rozszerzeń do 256k
  2770
  2771 0630 A0 00			ldy #$00	;pętla zliczająca bloki 64k
  2772 0632 A2 0F			ldx #$0f
  2773 0634 20 7F 06		_p2	jsr setpb
  2774 0637 AD 00 40			lda ext_b	;jeśli ext_b jest różne od zera, blok 64k już zliczony
  2775 063A D0 23			bne _n2
  2776
  2777 063C CE 00 40			dec ext_b	;w przeciwnym wypadku zaznacz jako zliczony
  2778
  2779 063F AD 00 40			lda ext_b	;sprawdz, czy sie zaznaczyl; jesli nie -> cos nie tak ze sprzetem
  2780 0642 10 1B			bpl _n2
  2781
  2782 0644 AD 01 D3			lda portb	;wpisz wartość PORTB do tablicy dla banku 0
  2783
  2784 0647 29 FE			and #$fe
  2785
  2786 0649 99 01 01			sta adr.banks,y
  2787 064C 49 04			eor #%00000100	;uzupełnij wartości dla banków 1, 2, 3
  2788 064E 99 02 01			sta adr.banks+1,y
  2789 0651 49 0C			eor #%00001100
  2790 0653 99 03 01			sta adr.banks+2,y
  2791 0656 49 04			eor #%00000100
  2792 0658 99 04 01			sta adr.banks+3,y
  2793 065B C8				iny
  2794 065C C8				iny
  2795 065D C8				iny
  2796 065E C8				iny
  2797
  2798 065F CA			_n2	dex
  2799 0660 10 D2			bpl _p2
  2800
  2801 0662 A2 0F			ldx #$0f	;przywrócenie zawartości ext
  2802 0664 20 7F 06		_p3	jsr setpb
  2803 0667 BD 00 04			lda bsav,x
  2804 066A 8D 00 40			sta ext_b
  2805 066D CA				dex
  2806 066E 10 F4			bpl _p3
  2807
  2808 0670 8E 01 D3			stx portb	;X=$FF
  2809
  2810 0673 68				pla
  2811 0674 8D 00 40			sta ext_b
  2812
  2813 0677 68				pla
  2814 0678 8D 01 D3			sta portb
  2815
  2816 067B 8C A3 21			sty Result
  2817
  2818 067E 60				rts
  2819
  2820 				; podprogramy
  2821 067F 8A			setpb	txa		;zmiana kolejności bitów: %0000dcba -> %cba000d0
  2822 0680 4A				lsr
  2823 0681 6A				ror
  2824 0682 6A				ror
  2825 0683 6A				ror
  2826 0684 69 01			adc #$01	;ustawienie bitu nr 1 w zaleznosci od stanu C
  2827 0686 09 01			ora #$01	;ustawienie bitu sterującego OS ROM na wartosc domyslna
  2828 0688 8D 01 D3			sta portb
  2829 068B 60				rts
  2830
  2831 				.endl
  2832
  2833 995B 68 AA		stop	pla:tax
  2834
  2835
  2836 995D			@exit
  2837
  2838 				; ------------------------------------------------------------
  2839
  2840 = 21A3			RESULT	= DATAORIGIN+$01A3
  2841 995D 60				rts						; ret
  2842 				.endl
  2843
  2844 				; ------------------------------------------------------------
  2845
  2846 = 0101			adr.BANKS	= $0101
  2847 995E			.var BANKS	= adr.BANKS .word
  2848 = FFF7			DETECTOS	= $FFF7
  2849
  2850 = 995E 01 01		BANKS
  2850 				.endl							; UNIT MISC
  2851
  2852 				; ------------------------------------------------------------
  2853
  2854 9960			.local	CIO						; UNIT
  2855
  2856 9960			.local	OPN						; PROCEDURE | ASSEMBLER
  2857
  2858 				; -------------------  ASM Block 00000075  -------------------
  2859
  2860 9960 8A 48			txa:pha
  2861
  2862 9962 AD A4 21			lda chn
  2863 9965 0A 0A 0A 0A			:4 asl @
  2864 9969 AA				tax
  2865
  2866 996A A9 03			lda #$03		;komenda: OPEN
  2867 996C 9D 42 03			sta iccmd,x
  2868
  2869 996F EE A7 21 D0 03 EE + 	inw device		;omin bajt z dlugoscia STRING-a
  2870
  2871 9977 AD A7 21			lda device		;adres nazwy pliku
  2872 997A 9D 44 03			sta icbufa,x
  2873 997D AD A8 21			lda device+1
  2874 9980 9D 45 03			sta icbufa+1,x
  2875
  2876 9983 AD A5 21			lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
  2877 9986 9D 4A 03			sta icax1,x
  2878
  2879 9989 AD A6 21			lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
  2880 998C 9D 4B 03			sta icax2,x
  2881
  2882 998F				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 998F EE 01 D3				inc portb
     6 9992 20 56 E4				jsr CIOV
     8 9995 CE 01 D3				dec portb
Source: MIDICar Player.a65
  2883
  2884 9998 8C 07 20			sty MAIN.SYSTEM.IOResult
  2885
  2886 999B 68 AA			pla:tax
  2887
  2888 				; ------------------------------------------------------------
  2889
  2890 = 21A4			CHN	= DATAORIGIN+$01A4
  2891 = 21A5			AX1	= DATAORIGIN+$01A5
  2892 = 21A6			AX2	= DATAORIGIN+$01A6
  2893 = 21A7			DEVICE	= DATAORIGIN+$01A7
  2894
  2895 = 21A4			@VarData	= CHN
  2896 = 0005			@VarDataSize	= 5
  2897
  2898 999D			@exit
  2899 					.ifdef @new
  2900 					lda <@VarData
  2901 					sta :ztmp
  2902 					lda >@VarData
  2903 					ldy #@VarDataSize-1
  2904 					jmp @FreeMem
  2905 					els
  2906 999D 60				rts						; ret
  2907 					eif
  2908 				.endl
  2909
  2910 999E			.local	CLS						; PROCEDURE | ASSEMBLER
  2911 999E 8D A9 21			sta CHN
  2912
  2913 				; -------------------  ASM Block 00000076  -------------------
  2914
  2915 99A1 8A 48			txa:pha
  2916
  2917 99A3 AD A9 21			lda chn
  2918 99A6 0A 0A 0A 0A			:4 asl @
  2919 99AA AA				tax
  2920
  2921 99AB A9 0C			lda #$0c		;komenda: CLOSE
  2922 99AD 9D 42 03			sta iccmd,x
  2923
  2924 99B0				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 99B0 EE 01 D3				inc portb
     6 99B3 20 56 E4				jsr CIOV
     8 99B6 CE 01 D3				dec portb
Source: MIDICar Player.a65
  2925
  2926 99B9 8C 07 20			sty MAIN.SYSTEM.IOResult
  2927
  2928 99BC 68 AA			pla:tax
  2929
  2930 				; ------------------------------------------------------------
  2931
  2932 = 21A9			CHN	= DATAORIGIN+$01A9
  2933
  2934 = 21A9			@VarData	= CHN
  2935 = 0001			@VarDataSize	= 1
  2936
  2937 99BE			@exit
  2938 					.ifdef @new
  2939 					lda <@VarData
  2940 					sta :ztmp
  2941 					lda >@VarData
  2942 					ldy #@VarDataSize-1
  2943 					jmp @FreeMem
  2944 					els
  2945 99BE 60				rts						; ret
  2946 					eif
  2947 				.endl
  2948
  2949 				; ------------------------------------------------------------
  2950
  2951 				.endl							; UNIT CIO
  2952
  2953 99BF			.local	SETCOLORS					; PROCEDURE
  2954
  2955 				; optimize OK (helpers.inc), line = 35
  2956
  2957 99BF A5 4A			lda PLAYERSTATUS
  2958 99C1 29 01			and #$01
  2959 99C3 85 9D			sta :STACKORIGIN+9
  2960 99C5 A0 01			ldy #1
  2961 99C7 A5 9D			lda :STACKORIGIN+9
  2962 99C9 C9 01			cmp #$01
  2963 99CB F0 01			beq @+
  2964 99CD 88				dey
  2965 				@
  2966 99CE 84 9D			sty :STACKORIGIN+9
  2967 99D0 A9 05			lda #$05
  2968 99D2 85 8C			sta :ecx
  2969 99D4 A5 9D			lda :STACKORIGIN+9
  2970 99D6 85 84			sta :eax
  2971 					.ifdef fmulinit
  2972 					fmulu_8
  2973 					els
  2974 99D8 20 37 85			imulCL
  2975 					eif
  2976 99DB A9 9F			lda <adr.COLORS
  2977 99DD 18 65 84			add :eax
  2978 99E0 8D DD 21			sta P
  2979 99E3 A9 80			lda >adr.COLORS
  2980 99E5 65 85			adc :eax+1
  2981 99E7 8D DE 21			sta P+1
  2982
  2983 				; optimize OK (helpers.inc), line = 36
  2984
  2985 99EA AD DD 21			lda P
  2986 99ED 85 82			sta :bp2
  2987 99EF AD DE 21			lda P+1
  2988 99F2 85 83			sta :bp2+1
  2989 99F4 A0 04			ldy #$04
  2990 99F6 B1 82 99 16 D0 88 + 	mva:rpl (:bp2),y $D016,y-
  2991
  2992 				; optimize OK (helpers.inc), line = 37
  2993
  2994 99FE AD DD 21			lda P
  2995 9A01 85 82			sta :bp2
  2996 9A03 AD DE 21			lda P+1
  2997 9A06 85 83			sta :bp2+1
  2998 9A08 A0 04			ldy #$04
  2999 9A0A B1 82 99 C4 02 88 + 	mva:rpl (:bp2),y $02C4,y-
  3000
  3001 				; ------------------------------------------------------------
  3002
  3003 = 21DD			P	= DATAORIGIN+$01DD
  3004
  3005 = 21DD			@VarData	= P
  3006 = 0002			@VarDataSize	= 2
  3007
  3008 9A12			@exit
  3009 					.ifdef @new
  3010 					lda <@VarData
  3011 					sta :ztmp
  3012 					lda >@VarData
  3013 					ldy #@VarDataSize-1
  3014 					jmp @FreeMem
  3015 					els
  3016 9A12 60				rts						; ret
  3017 					eif
  3018 				.endl
  3019
  3020 9A13			.local	PUTTEXT						; PROCEDURE
  3021
  3022 				; optimize OK (helpers.inc), line = 45
  3023
  3024 9A13 AC DF 21 84 82 AC + 	mwy S :bp2
  3025 9A1D A0 00			ldy #$00
  3026 9A1F B1 82			lda (:bp2),y
  3027 9A21 8D E1 21			sta L
  3028
  3029 				; --- WhileProlog
  3030 9A24 4C 71 9A			jmp l_07B0
  3031 9A27			l_07B1
  3032
  3033 				; optimize OK (helpers.inc), line = 48
  3034
  3035 9A27 EE DF 21			inc S
  3036 9A2A D0 03			sne
  3037 9A2C EE E0 21			inc S+1
  3038
  3039 				; optimize OK (helpers.inc), line = 49
  3040
  3041 9A2F AC DF 21 84 82 AC + 	mwy S :bp2
  3042 9A39 A0 00			ldy #$00
  3043 9A3B B1 82			lda (:bp2),y
  3044 9A3D 8D E2 21			sta C
  3045
  3046 				; optimize OK (helpers.inc), line = 50
  3047
  3048 9A40 C9 20			cmp #$20
  3049 9A42 B0 09			jcs l_07CA
  3050 9A44 18 69 40			add #$40
  3051 9A47 8D E2 21			sta C
  3052 9A4A 4C 5A 9A			jmp l_07D5
  3053 9A4D			l_07CA
  3054
  3055 				; optimize OK (helpers.inc), line = 51
  3056
  3057 9A4D AD E2 21			lda C
  3058 9A50 C9 60			cmp #$60
  3059 9A52 B0 06			jcs l_07E7
  3060 9A54 38 E9 20			sub #$20
  3061 9A57 8D E2 21			sta C
  3062 9A5A			l_07E7
  3063 9A5A			l_07D5
  3064
  3065 				; optimize OK (helpers.inc), line = 52
  3066
  3067 9A5A AD E2 21			lda C
  3068 9A5D 0D DB 21			ora PUTTEXTINVERT
  3069 9A60 A4 D5			ldy SCRADR+1
  3070 9A62 84 81			sty :bp+1
  3071 9A64 A4 D4			ldy SCRADR
  3072 9A66 91 80			sta (:bp),y
  3073
  3074 				; optimize FAIL (0, helpers.inc), line = 53
  3075
  3076 9A68 E6 D4			inc SCRADR
  3077 9A6A D0 02			sne
  3078 9A6C E6 D5			inc SCRADR+1
  3079
  3080 				; optimize FAIL (0, helpers.inc), line = 54
  3081
  3082 9A6E CE E1 21			dec L
  3083 9A71			l_07B0
  3084
  3085 				; optimize OK (helpers.inc), line = 46
  3086
  3087 9A71 D0 B4			jne l_07B1
  3088
  3089 				; ------------------------------------------------------------
  3090
  3091 = 21DF			S	= DATAORIGIN+$01DF
  3092 = 21E1			L	= DATAORIGIN+$01E1
  3093 = 21E2			C	= DATAORIGIN+$01E2
  3094
  3095 = 21DF			@VarData	= S
  3096 = 0004			@VarDataSize	= 4
  3097
  3098 9A73			@exit
  3099 					.ifdef @new
  3100 					lda <@VarData
  3101 					sta :ztmp
  3102 					lda >@VarData
  3103 					ldy #@VarDataSize-1
  3104 					jmp @FreeMem
  3105 					els
  3106 9A73 60				rts						; ret
  3107 					eif
  3108 				.endl
  3109
  3110 9A74			.local	PUTHEX						; PROCEDURE | ASSEMBLER
  3111
  3112 				; -------------------  ASM Block 00000085  -------------------
  3113
  3114 9A74			  icl 'asms/puthex.a65'
Source: puthex.a65
     1 				// store `scradr` value as a operand of opcode
     2 9A74 A5 D4		  lda scradr
     3 9A76 8D BA 9A		  sta screen
     4 9A79 A5 D5		  lda scradr+1
     5 9A7B 8D BB 9A		  sta screen+1
     6 9A7E AD E3 21		  lda v
     7 9A81 8D A3 9A		  sta vadr1
     8 9A84 8D AB 9A		  sta vadr2
     9 9A87 AD E4 21		  lda v+1
    10 9A8A 8D A4 9A		  sta vadr1+1
    11 9A8D 8D AC 9A		  sta vadr2+1
    12
    13 9A90 A9 00		  lda #0
    14 9A92 8D CD 9A		  sta _vofs
    15
    16 				// get nibbles to show, if =0 exit
    17 9A95 AC E5 21		  ldy n
    18 9A98 F0 32		  beq stop
    19
    20 9A9A			hexLoop:
    21 9A9A AE CD 9A		  ldx _vofs
    22 9A9D 98			  tya
    23 9A9E 29 01		  and #1
    24 9AA0 D0 08		  bne HiNibble
    25 9AA2 BD 00 F0		  lda vadr1:$f000,x
    26 9AA5 29 0F		  and #$0f
    27 9AA7 4C B4 9A		  jmp put2screen
    28 9AAA			HiNibble:
    29 9AAA BD 00 F0		  lda vadr2:$f000,x
    30 9AAD 4A 4A 4A 4A		  :4 lsr @
    31 9AB1 EE CD 9A		  inc _vofs
    32
    33 9AB4			put2screen:
    34 9AB4 AA			  tax
    35 9AB5 BD CE 9A		  lda hexTab,x
    36 				//  ora puttextinvert
    37 9AB8 88			  dey
    38 9AB9 99 00 F0		  sta screen:$f000,y
    39
    40 9ABC C0 00		  cpy #0
    41 9ABE D0 DA		  bne hexLoop
    42
    43 9AC0			calcEndAddr:
    44 9AC0 A5 D4		  lda scradr
    45 9AC2 18			  clc
    46 9AC3 6D E5 21		  adc n
    47 9AC6 85 D4		  sta scradr
    48 9AC8 90 02		  bcc stop
    49 9ACA E6 D5		  inc scradr+1
    50
    51 9ACC			stop:
    52 9ACC 60			  rts
    53
    54 9ACD			_vofs
    55 9ACD 00			  .by 0
    56 9ACE			hexTab:
    57 9ACE 10 11 12 13 14 15 +   dta d'0123456789ABCDEF'
  3115
  3116 				; ------------------------------------------------------------
  3117
  3118 = 21E3			V	= DATAORIGIN+$01E3
  3119 = 21E5			N	= DATAORIGIN+$01E5
  3120
  3121 = 21E3			@VarData	= V
  3122 = 0003			@VarDataSize	= 3
  3123
  3124 9ADE			@exit
  3125 					.ifdef @new
  3126 					lda <@VarData
  3127 					sta :ztmp
  3128 					lda >@VarData
  3129 					ldy #@VarDataSize-1
  3130 					jmp @FreeMem
  3131 					els
  3132 9ADE 60				rts						; ret
  3133 					eif
  3134 				.endl
  3135
  3136 9ADF			.local	PUTINT						; PROCEDURE | ASSEMBLER
  3137
  3138 				; -------------------  ASM Block 00000086  -------------------
  3139
  3140 9ADF			  icl 'asms/int2str.a65'
Source: int2str.a65
     1 = 0000			EOL = 0
     2
     3 9ADF A5 D4		    lda scradr
     4 9AE1 8D 2B 9B		    sta screen1
     5 9AE4 8D 42 9B		    sta screen2
     6 9AE7 A5 D5		    lda scradr+1
     7 9AE9 8D 2C 9B		    sta screen1+1
     8 9AEC 8D 43 9B		    sta screen2+1
     9
    10 9AEF			INT2STR:
    11 9AEF A0 00		    ldy #0
    12 9AF1 8C 50 9B		    sty _cnt
    13 9AF4			ITSNEXT:
    14 9AF4 A2 00		    ldx #0
    15 9AF6			ITSSLP:
    16 9AF6 AD E6 21		    lda value
    17 9AF9 38			    sec
    18 9AFA F9 51 9B		    sbc Pow10Tab,Y
    19 9AFD 8D E6 21		    sta value
    20 9B00 AD E7 21		    lda value+1
    21 9B03 C8			    iny
    22 9B04 F9 51 9B		    sbc Pow10Tab,Y
    23 9B07 90 08		    bcc ITSADD
    24 9B09 8D E7 21		    sta value+1
    25 9B0C E8			    inx
    26 9B0D 88			    dey
    27 9B0E 18			    clc
    28 9B0F 90 E5		    bcc ITSSLP
    29 9B11			ITSADD:
    30 9B11 88			    dey
    31 9B12 AD E6 21		    lda value
    32 9B15 79 51 9B		    adc Pow10Tab,Y
    33 9B18 8D E6 21		    sta value
    34 9B1B 8A			    txa
    35 9B1C 09 10		    ora #$10
    36
    37 				; skip lead zeros
    38 9B1E AE 50 9B		    ldx _cnt
    39 9B21 D0 04		    bne storeDigit
    40 9B23 C9 10		    cmp #$10
    41 9B25 F0 09		    beq skipDigit
    42
    43 9B27			storeDigit:
    44 9B27 0D DB 21		    ora puttextinvert
    45 9B2A 9D 00 F0		    sta screen1:$f000,X
    46 9B2D EE 50 9B		    inc _cnt
    47 9B30			skipDigit:
    48 9B30 C8			    iny
    49 9B31 C8			    iny
    50 9B32 C0 08		    cpy #8
    51 9B34 90 BE		    bcc ITSNEXT
    52
    53 				; last digit
    54 9B36 AD E6 21		    lda value
    55 9B39 09 10		    ora #$10
    56 9B3B AE 50 9B		    ldx _cnt
    57 9B3E 0D DB 21		    ora puttextinvert
    58 9B41 9D 00 F0		    sta screen2:$f000,X
    59 9B44 E8			    inx
    60
    61 				; set screen addres to the end of value
    62 9B45 8A			    txa
    63 9B46 18			    clc
    64 9B47 65 D4		    adc scradr
    65 9B49 85 D4		    sta scradr
    66 9B4B 90 02		    bcc stop
    67 9B4D E6 D5		    inc scradr+1
    68
    69 9B4F			stop:
    70 9B4F 60			    rts
    71
    72 9B50			_cnt
    73 9B50 00			    .by 0
    74 9B51			Pow10Tab
    75 9B51 10 27		    .wo 10000
    76 9B53 E8 03		    .wo 1000
    77 9B55 64 00		    .wo 100
    78 9B57 0A 00		    .wo 10
  3141
  3142 				; ------------------------------------------------------------
  3143
  3144 = 21E6			VALUE	= DATAORIGIN+$01E6
  3145
  3146 = 21E6			@VarData	= VALUE
  3147 = 0002			@VarDataSize	= 2
  3148
  3149 9B59			@exit
  3150 					.ifdef @new
  3151 					lda <@VarData
  3152 					sta :ztmp
  3153 					lda >@VarData
  3154 					ldy #@VarDataSize-1
  3155 					jmp @FreeMem
  3156 					els
  3157 9B59 60				rts						; ret
  3158 					eif
  3159 				.endl
  3160
  3161 9B5A			.local	RESET_MIDI					; PROCEDURE
  3162
  3163 				; optimize OK (helpers.inc), line = 77
  3164
  3165 9B5A AD 0B A2			lda GM_RESET
  3166 9B5D 8D 43 21			sta MIDI_FIFO.FIFO_SEND.DATA
  3167 9B60 AD 0C A2			lda GM_RESET+1
  3168 9B63 8D 44 21			sta MIDI_FIFO.FIFO_SEND.DATA+1
  3169 9B66 A9 06			lda #$06
  3170 9B68 8D 45 21			sta MIDI_FIFO.FIFO_SEND.LEN
  3171 9B6B 20 64 8E			jsr MIDI_FIFO.FIFO_SEND
  3172 9B6E 20 97 8E			jsr MIDI_FIFO.FIFO_FLUSH
  3173 9B71			@exit
  3174 					.ifdef @new
  3175 					lda <@VarData
  3176 					sta :ztmp
  3177 					lda >@VarData
  3178 					ldy #@VarDataSize-1
  3179 					jmp @FreeMem
  3180 					els
  3181 9B71 60				rts						; ret
  3182 					eif
  3183 				.endl
  3184
  3185 9B72			.local	CLEARWORKAREA					; PROCEDURE
  3186
  3187 				; optimize OK (helpers.inc), line = 82
  3188
  3189 9B72 A9 72			lda #$72
  3190 9B74 85 88			sta SYSTEM.FILLCHAR_0109.A
  3191 9B76 A9 34			lda #$34
  3192 9B78 85 89			sta SYSTEM.FILLCHAR_0109.A+1
  3193 9B7A A9 48			lda #$48
  3194 9B7C 85 8C			sta SYSTEM.FILLCHAR_0109.COUNT
  3195 9B7E A9 03			lda #$03
  3196 9B80 85 8D			sta SYSTEM.FILLCHAR_0109.COUNT+1
  3197 9B82 A9 00			lda #$00
  3198 9B84 85 84			sta SYSTEM.FILLCHAR_0109.VALUE
  3199 9B86				.local +MAIN.SYSTEM.FILLCHAR_0109
  3200 9B86				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0109.M@INLINE [Source: MIDICar Player.a65]
     4 9B86 20 A8 84			jsr @fill
Source: MIDICar Player.a65
  3201 					.endl
  3202 9B89			@exit
  3203 					.ifdef @new
  3204 					lda <@VarData
  3205 					sta :ztmp
  3206 					lda >@VarData
  3207 					ldy #@VarDataSize-1
  3208 					jmp @FreeMem
  3209 					els
  3210 9B89 60				rts						; ret
  3211 					eif
  3212 				.endl
  3213
  3214 9B8A			.local	ISLOOPED					; PROCEDURE
  3215
  3216 				; optimize OK (helpers.inc), line = 87
  3217
  3218 9B8A A9 BA			lda #$BA
  3219 9B8C 85 D4			sta SCRADR
  3220 9B8E A9 37			lda #$37
  3221 9B90 85 D5			sta SCRADR+1
  3222
  3223 				; optimize OK (helpers.inc), line = 88
  3224
  3225 9B92 A5 4A			lda PLAYERSTATUS
  3226 9B94 29 04			and #$04
  3227 9B96 F0 10			jeq l_083C
  3228
  3229 				; optimize OK (helpers.inc), line = 89
  3230
  3231 9B98 A9 02			lda #$02
  3232 9B9A 8D DF 21			sta PUTTEXT.S
  3233 9B9D A9 80			lda #$80
  3234 9B9F 8D E0 21			sta PUTTEXT.S+1
  3235 9BA2 20 13 9A			jsr PUTTEXT
  3236 9BA5 4C B5 9B			jmp l_0848
  3237 9BA8			l_083C
  3238
  3239 				; optimize OK (helpers.inc), line = 91
  3240
  3241 9BA8 A9 08			lda #$08
  3242 9BAA 8D DF 21			sta PUTTEXT.S
  3243 9BAD A9 80			lda #$80
  3244 9BAF 8D E0 21			sta PUTTEXT.S+1
  3245 9BB2 20 13 9A			jsr PUTTEXT
  3246 9BB5			l_0848
  3247 9BB5			@exit
  3248 					.ifdef @new
  3249 					lda <@VarData
  3250 					sta :ztmp
  3251 					lda >@VarData
  3252 					ldy #@VarDataSize-1
  3253 					jmp @FreeMem
  3254 					els
  3255 9BB5 60				rts						; ret
  3256 					eif
  3257 				.endl
  3258
  3259 9BB6			.local	CLEARSTATUS					; PROCEDURE
  3260
  3261 				; optimize OK (helpers.inc), line = 96
  3262
  3263 9BB6 A9 00			lda #$00
  3264 9BB8 A0 3B			ldy #$3B
  3265 9BBA 99 BA 37 88 10 FA		sta:rpl $37BA,y-
  3266
  3267 				; optimize FAIL ('ISLOOPED', helpers.inc), line = 97
  3268
  3269 9BC0 20 8A 9B			jsr ISLOOPED
  3270
  3271 				; optimize OK (helpers.inc), line = 98
  3272
  3273 9BC3 AC D7 21			ldy FN+1
  3274 9BC6 84 81			sty :bp+1
  3275 9BC8 AC D6 21			ldy FN
  3276 9BCB B1 80			lda (:bp),y
  3277 9BCD C9 11			cmp #$11
  3278 9BCF 90 10			jcc l_0862
  3279 9BD1 AC D6 21 84 82 AC + 	mwy FN :bp2
  3280 9BDB A0 00			ldy #$00
  3281 9BDD A9 10			lda #$10
  3282 9BDF 91 82			sta (:bp2),y
  3283 9BE1			l_0862
  3284
  3285 				; optimize OK (helpers.inc), line = 99
  3286
  3287 9BE1 AC D6 21 84 82 AC + 	mwy FN :bp2
  3288 9BEB A0 00			ldy #$00
  3289 9BED A9 F6			lda #$F6
  3290 9BEF 38 F1 82			sub (:bp2),y
  3291 9BF2 85 D4			sta SCRADR
  3292 9BF4 A9 37			lda #$37
  3293 9BF6 E9 00			sbc #$00
  3294 9BF8 85 D5			sta SCRADR+1
  3295 9BFA AD D6 21			lda FN
  3296 9BFD 8D DF 21			sta PUTTEXT.S
  3297 9C00 AD D7 21			lda FN+1
  3298 9C03 8D E0 21			sta PUTTEXT.S+1
  3299 9C06 20 13 9A			jsr PUTTEXT
  3300 9C09			@exit
  3301 					.ifdef @new
  3302 					lda <@VarData
  3303 					sta :ztmp
  3304 					lda >@VarData
  3305 					ldy #@VarDataSize-1
  3306 					jmp @FreeMem
  3307 					els
  3308 9C09 60				rts						; ret
  3309 					eif
  3310 				.endl
  3311
  3312 9C0A			.local	CLEARUVMETERS					; PROCEDURE
  3313
  3314 				; optimize OK (helpers.inc), line = 104
  3315
  3316 9C0A A5 4A			lda PLAYERSTATUS
  3317 9C0C 29 02			and #$02
  3318 9C0E F0 2F			jeq l_0896
  3319
  3320 				; optimize OK (helpers.inc), line = 106
  3321
  3322 9C10 A9 00			lda #$00
  3323 9C12 8D CB 21			sta CHN
  3324
  3325 				; --- RepeatUntilProlog
  3326 9C15			l_089C
  3327
  3328 				; optimize OK (helpers.inc), line = 108
  3329
  3330 9C15 AD CB 21			lda CHN
  3331 9C18 0A				asl @
  3332 9C19 A8				tay
  3333 9C1A B9 AA 21			lda adr.CHANNELSCRADR,y
  3334 9C1D 85 D4			sta SCRADR
  3335 9C1F B9 AB 21			lda adr.CHANNELSCRADR+1,y
  3336 9C22 85 D5			sta SCRADR+1
  3337
  3338 				; optimize OK (helpers.inc), line = 109
  3339
  3340 9C24 A5 D4			lda SCRADR
  3341 9C26 85 82			sta :bp2
  3342 9C28 A5 D5			lda SCRADR+1
  3343 9C2A 85 83			sta :bp2+1
  3344 9C2C A9 40			lda #$40
  3345 9C2E A0 03			ldy #$03
  3346 9C30 91 82 88 10 FB		sta:rpl (:bp2),y-
  3347
  3348 				; optimize FAIL (0, helpers.inc), line = 110
  3349
  3350 9C35 EE CB 21			inc CHN
  3351
  3352 				; optimize OK (helpers.inc), line = 111
  3353
  3354 9C38 AD CB 21			lda CHN
  3355 9C3B C9 10			cmp #$10
  3356 9C3D D0 D6			jne l_089C
  3357 9C3F			l_0896
  3358 9C3F			@exit
  3359 					.ifdef @new
  3360 					lda <@VarData
  3361 					sta :ztmp
  3362 					lda >@VarData
  3363 					ldy #@VarDataSize-1
  3364 					jmp @FreeMem
  3365 					els
  3366 9C3F 60				rts						; ret
  3367 					eif
  3368 				.endl
  3369
  3370 9C40			.local	EXIT2DOS					; PROCEDURE
  3371
  3372 				; optimize OK (helpers.inc), line = 118
  3373
  3374 9C40 A9 00			lda #$00
  3375 9C42 20 9E 99			jsr CIO.CLS
  3376 9C45 A9 00			lda #$00
  3377 9C47 8D A4 21			sta CIO.OPN.CHN
  3378 9C4A A9 0C			lda #$0C
  3379 9C4C 8D A5 21			sta CIO.OPN.AX1
  3380 9C4F A9 00			lda #$00
  3381 9C51 8D A6 21			sta CIO.OPN.AX2
  3382 9C54 A9 0E			lda #$0E
  3383 9C56 8D A7 21			sta CIO.OPN.DEVICE
  3384 9C59 A9 80			lda #$80
  3385 9C5B 8D A8 21			sta CIO.OPN.DEVICE+1
  3386 9C5E 20 60 99			jsr CIO.OPN
  3387 9C61 A9 01			lda #$01
  3388 9C63 85 41			sta SOUNDR
  3389 9C65 A9 00			lda #$00
  3390 9C67 4C EE A1			jmp @halt
  3391 9C6A			@exit
  3392 					.ifdef @new
  3393 					lda <@VarData
  3394 					sta :ztmp
  3395 					lda >@VarData
  3396 					ldy #@VarDataSize-1
  3397 					jmp @FreeMem
  3398 					els
  3399 9C6A 60				rts						; ret
  3400 					eif
  3401 				.endl
  3402
  3403 9C6B			.local	STATUSPLAYING					; PROCEDURE
  3404
  3405 				; optimize OK (status.inc), line = 3
  3406
  3407 9C6B A9 CE			lda #$CE
  3408 9C6D 85 D4			sta SCRADR
  3409 9C6F A9 37			lda #$37
  3410 9C71 85 D5			sta SCRADR+1
  3411
  3412 				; optimize OK (status.inc), line = 4
  3413
  3414 9C73 AD 4C 21			lda MIDFILES.TOTALTRACKS
  3415 9C76 F0 26			jeq l_08E7
  3416
  3417 				; optimize OK (status.inc), line = 6
  3418
  3419 9C78 A9 12			lda #$12
  3420 9C7A 8D DF 21			sta PUTTEXT.S
  3421 9C7D A9 80			lda #$80
  3422 9C7F 8D E0 21			sta PUTTEXT.S+1
  3423 9C82 20 13 9A			jsr PUTTEXT
  3424
  3425 				; optimize OK (status.inc), line = 7
  3426
  3427 9C85 AD D5 21			lda ISSTOPPED
  3428 9C88 F0 0B			jeq l_08F6
  3429
  3430 				; optimize FAIL ('MIDFILES.INITTIMER', status.inc), line = 9
  3431
  3432 9C8A 20 20 98			jsr MIDFILES.INITTIMER
  3433
  3434 				; optimize OK (status.inc), line = 10
  3435
  3436 9C8D A9 00			lda #$00
  3437 9C8F 8D D5 21			sta ISSTOPPED
  3438 9C92 4C 9B 9C			jmp l_0905
  3439 9C95			l_08F6
  3440
  3441 				; optimize OK (status.inc), line = 13
  3442
  3443 9C95 A5 F5			lda MIDFILES._TIMERSTATUS
  3444 9C97 29 7F			and #$7F
  3445 9C99 85 F5			sta MIDFILES._TIMERSTATUS
  3446 9C9B			l_0905
  3447 9C9B 4C AB 9C			jmp l_091B
  3448 9C9E			l_08E7
  3449
  3450 				; optimize OK (status.inc), line = 17
  3451
  3452 9C9E A9 1D			lda #$1D
  3453 9CA0 8D DF 21			sta PUTTEXT.S
  3454 9CA3 A9 80			lda #$80
  3455 9CA5 8D E0 21			sta PUTTEXT.S+1
  3456 9CA8 20 13 9A			jsr PUTTEXT
  3457 9CAB			l_091B
  3458 9CAB			@exit
  3459 					.ifdef @new
  3460 					lda <@VarData
  3461 					sta :ztmp
  3462 					lda >@VarData
  3463 					ldy #@VarDataSize-1
  3464 					jmp @FreeMem
  3465 					els
  3466 9CAB 60				rts						; ret
  3467 					eif
  3468 				.endl
  3469
  3470 9CAC			.local	STATUSPAUSE					; PROCEDURE
  3471
  3472 				; optimize OK (status.inc), line = 23
  3473
  3474 9CAC AD D5 21			lda ISSTOPPED
  3475 9CAF F0 03			jeq l_092D
  3476 9CB1 4C CF 9C			jmp @exit					; exit
  3477 9CB4			l_092D
  3478
  3479 				; optimize OK (status.inc), line = 24
  3480
  3481 9CB4 A9 CE			lda #$CE
  3482 9CB6 85 D4			sta SCRADR
  3483 9CB8 A9 37			lda #$37
  3484 9CBA 85 D5			sta SCRADR+1
  3485
  3486 				; optimize OK (status.inc), line = 25
  3487
  3488 9CBC A9 28			lda #$28
  3489 9CBE 8D DF 21			sta PUTTEXT.S
  3490 9CC1 A9 80			lda #$80
  3491 9CC3 8D E0 21			sta PUTTEXT.S+1
  3492 9CC6 20 13 9A			jsr PUTTEXT
  3493
  3494 				; optimize OK (status.inc), line = 26
  3495
  3496 9CC9 A5 F5			lda MIDFILES._TIMERSTATUS
  3497 9CCB 09 80			ora #$80
  3498 9CCD 85 F5			sta MIDFILES._TIMERSTATUS
  3499 9CCF			@exit
  3500 					.ifdef @new
  3501 					lda <@VarData
  3502 					sta :ztmp
  3503 					lda >@VarData
  3504 					ldy #@VarDataSize-1
  3505 					jmp @FreeMem
  3506 					els
  3507 9CCF 60				rts						; ret
  3508 					eif
  3509 				.endl
  3510
  3511 9CD0			.local	STATUSSTOPPED					; PROCEDURE
  3512
  3513 				; optimize OK (status.inc), line = 31
  3514
  3515 9CD0 A9 01			lda #$01
  3516 9CD2 8D D5 21			sta ISSTOPPED
  3517
  3518 				; optimize OK (status.inc), line = 32
  3519
  3520 9CD5 A9 CE			lda #$CE
  3521 9CD7 85 D4			sta SCRADR
  3522 9CD9 A9 37			lda #$37
  3523 9CDB 85 D5			sta SCRADR+1
  3524
  3525 				; optimize OK (status.inc), line = 33
  3526
  3527 9CDD A9 33			lda #$33
  3528 9CDF 8D DF 21			sta PUTTEXT.S
  3529 9CE2 A9 80			lda #$80
  3530 9CE4 8D E0 21			sta PUTTEXT.S+1
  3531 9CE7 20 13 9A			jsr PUTTEXT
  3532
  3533 				; optimize OK (status.inc), line = 34
  3534
  3535 9CEA A5 F5			lda MIDFILES._TIMERSTATUS
  3536 9CEC 09 80			ora #$80
  3537 9CEE 85 F5			sta MIDFILES._TIMERSTATUS
  3538
  3539 				; optimize OK (status.inc), line = 35
  3540
  3541 9CF0 A9 00			lda #$00
  3542 9CF2 85 F0			sta MIDFILES._TOTALTICKS
  3543 9CF4 85 F1			sta MIDFILES._TOTALTICKS+1
  3544 9CF6 85 F2			sta MIDFILES._TOTALTICKS+2
  3545 9CF8 85 F3			sta MIDFILES._TOTALTICKS+3
  3546 9CFA A9 01			lda #$01
  3547 9CFC 85 F4			sta MIDFILES._SUBCNT
  3548
  3549 				; optimize OK (status.inc), line = 36
  3550
  3551 9CFE 78				sei
  3552 9CFF AD 63 21 8D 10 02		mva MIDFILES.OLDTIMERVEC VTIMR1
  3553 9D05 AD 64 21 8D 11 02		mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
  3554 9D0B A5 10			lda irqens
  3555 9D0D 29 FE			and #$fe
  3556 9D0F 85 10			sta irqens
  3557 9D11 8D 0E D2			sta irqen
  3558 9D14 58				cli
  3559
  3560 				; optimize FAIL ('RESET_MIDI', status.inc), line = 37
  3561
  3562 9D15 20 5A 9B			jsr RESET_MIDI
  3563
  3564 				; optimize OK (status.inc), line = 38
  3565
  3566 9D18 A9 00			lda #$00
  3567 9D1A 85 88			sta SYSTEM.MOVE_010A.SOURCE
  3568 9D1C A9 3C			lda #$3C
  3569 9D1E 85 89			sta SYSTEM.MOVE_010A.SOURCE+1
  3570 9D20 A9 00			lda #$00
  3571 9D22 85 8C			sta SYSTEM.MOVE_010A.DEST
  3572 9D24 A9 3E			lda #$3E
  3573 9D26 85 8D			sta SYSTEM.MOVE_010A.DEST+1
  3574 9D28 A9 00			lda #$00
  3575 9D2A 85 84			sta SYSTEM.MOVE_010A.COUNT
  3576 9D2C A9 02			lda #$02
  3577 9D2E 85 85			sta SYSTEM.MOVE_010A.COUNT+1
  3578 9D30				.local +MAIN.SYSTEM.MOVE_010A
  3579 9D30				m@INLINE
Macro: MAIN.SYSTEM.MOVE_010A.M@INLINE [Source: MIDICar Player.a65]
     4 9D30 20 53 84			jsr @move
Source: MIDICar Player.a65
  3580 					.endl
  3581
  3582 				; optimize OK (status.inc), line = 39
  3583
  3584 9D33 A9 00			lda #$00
  3585 9D35 8D CB 21			sta CHN
  3586
  3587 				; optimize FAIL ('CLEARUVMETERS', status.inc), line = 40
  3588
  3589 9D38 20 0A 9C			jsr CLEARUVMETERS
  3590 9D3B			@exit
  3591 					.ifdef @new
  3592 					lda <@VarData
  3593 					sta :ztmp
  3594 					lda >@VarData
  3595 					ldy #@VarDataSize-1
  3596 					jmp @FreeMem
  3597 					els
  3598 9D3B 60				rts						; ret
  3599 					eif
  3600 				.endl
  3601
  3602 9D3C			.local	STATUSLOADING					; PROCEDURE
  3603
  3604 				; optimize OK (status.inc), line = 45
  3605
  3606 9D3C A9 D0			lda #$D0
  3607 9D3E 85 D4			sta SCRADR
  3608 9D40 A9 37			lda #$37
  3609 9D42 85 D5			sta SCRADR+1
  3610
  3611 				; optimize OK (status.inc), line = 46
  3612
  3613 9D44 A9 3E			lda #$3E
  3614 9D46 8D DF 21			sta PUTTEXT.S
  3615 9D49 A9 80			lda #$80
  3616 9D4B 8D E0 21			sta PUTTEXT.S+1
  3617 9D4E 20 13 9A			jsr PUTTEXT
  3618 9D51			@exit
  3619 					.ifdef @new
  3620 					lda <@VarData
  3621 					sta :ztmp
  3622 					lda >@VarData
  3623 					ldy #@VarDataSize-1
  3624 					jmp @FreeMem
  3625 					els
  3626 9D51 60				rts						; ret
  3627 					eif
  3628 				.endl
  3629
  3630 9D52			.local	MYNMI						; PROCEDURE | ASSEMBLER | INTERRUPT
  3631
  3632 				; -------------------  ASM Block 00000087  -------------------
  3633
  3634 9D52			  icl 'asms/nmi.a65'
Source: nmi.a65
     1 = 0012			RTCLOK = $12
     2 = D209			KBCODE = $d209
     3 = D20F			SKSTAT = $d20f
     4 = D40F			NMIRES = $d40f
     5
     6 = 022B			SRTIMR = $022b
     7 = 026D			KEYDIS = $026d
     8 = 02DA			KEYREP = $02da
     9 = 02F1			KEYDEL = $02f1
    10 = 02FC			CH     = $02fc
    11 = 02C0			PCOLR0 = $02c0
    12 = D012			COLPM0 = $d012
    13
    14 				// systemowa procedure obsługi RTClock ($C0E2)
    15 9D52 D8			    cld
    16 9D53 8D 9E 9D		    sta rega
    17 9D56 8E A0 9D		    stx regx
    18 9D59 8C A2 9D		    sty regy
    19 9D5C 8D 0F D4		    STA NMIRES
    20
    21 9D5F E6 14		    inc RTCLOK+2
    22 9D61 D0 06		    bne end_rtclk
    23 9D63 E6 13		    inc RTCLOK+1
    24 9D65 D0 02		    bne end_rtclk
    25 9D67 E6 12		    inc RTCLOK
    26
    27 9D69			end_rtclk:
    28
    29 				// fragment systemowej procedury kopiowania rejestrów kolorów
    30 				//    ldx #$08
    31 				//colloop:
    32 				//    lda PCOLR0,x
    33 				//    sta COLPM0,x
    34 				//    dex
    35 				//    bpl colloop
    36
    37 				// systemowa procedura obsługi klawiatry ($C1A1)
    38 9D69 AD 0F D2		    lda SKSTAT
    39 9D6C 29 04		    and #$04
    40 9D6E F0 08		    beq skip_keyDelay
    41 9D70 AD F1 02		    lda KEYDEL
    42 9D73 F0 03		    beq skip_keyDelay
    43 9D75 CE F1 02		    dec KEYDEL
    44 9D78			skip_keyDelay:
    45 9D78 AD 2B 02		    lda SRTIMR
    46 9D7B F0 20		    beq end_key
    47
    48 9D7D AD 0F D2		    lda SKSTAT
    49 9D80 29 04		    and #$04
    50 9D82 D0 14		    bne skip_key
    51
    52 9D84 CE 2B 02		    dec SRTIMR
    53 9D87 D0 14		    bne end_key
    54 9D89 AD DA 02		    lda KEYREP
    55 9D8C 8D 2B 02		    sta SRTIMR
    56
    57 9D8F AD 09 D2		    lda KBCODE
    58 9D92 8D FC 02		    sta CH
    59 9D95 4C 9D 9D		    jmp end_key
    60
    61 9D98			skip_key:
    62 9D98 A9 00		    lda #$00
    63 9D9A 8D 2B 02		    sta SRTIMR
    64
    65 9D9D			end_key:
    66
    67 9D9D A9 00		    lda rega:#0
    68 9D9F A2 00		    ldx regx:#0
    69 9DA1 A0 00		    ldy regy:#0
  3635
  3636 9DA3 40				rti						; ret
  3637 				.endl
  3638
  3639 9DA4			.local	INIT						; PROCEDURE
  3640
  3641 				; optimize FAIL ('MC6850.MC6850_RESET', init.inc), line = 13
  3642
  3643 9DA4 20 11 8E			jsr MC6850.MC6850_RESET
  3644
  3645 				; optimize OK (init.inc), line = 14
  3646
  3647 9DA7 A9 96			lda #$96
  3648 9DA9 20 17 8E			jsr MC6850.MC6850_INIT
  3649
  3650 				; optimize OK (init.inc), line = 16
  3651
  3652 9DAC A9 00			lda #$00
  3653 9DAE 8D 00 D4			sta DMACTL
  3654
  3655 				; optimize FAIL ('MIDI_FIFO.FIFO_RESET', init.inc), line = 18
  3656
  3657 9DB1 20 1E 8E			jsr MIDI_FIFO.FIFO_RESET
  3658
  3659 				; optimize OK (init.inc), line = 21
  3660
  3661 9DB4 A9 30			lda #$30
  3662 9DB6 8D F4 02			sta CHBASE
  3663
  3664 				; optimize FAIL ('CLEARWORKAREA', init.inc), line = 22
  3665
  3666 9DB9 20 72 9B			jsr CLEARWORKAREA
  3667
  3668 				; optimize OK (init.inc), line = 23
  3669
  3670 9DBC A9 00			lda #$00
  3671 9DBE 8D 30 02			sta $0230
  3672 9DC1 A9 34			lda #$34
  3673 9DC3 8D 31 02			sta $0230+1
  3674
  3675 				; optimize OK (init.inc), line = 24
  3676
  3677 9DC6 A9 00			lda #$00
  3678 9DC8 8D D6 21			sta FN
  3679 9DCB A9 80			lda #$80
  3680 9DCD 8D D7 21			sta FN+1
  3681
  3682 				; optimize OK (init.inc), line = 26
  3683
  3684 9DD0 A9 9E			lda #$9E
  3685 9DD2 85 D4			sta SCRADR
  3686 9DD4 A9 37			lda #$37
  3687 9DD6 85 D5			sta SCRADR+1
  3688 9DD8 A9 47			lda #$47
  3689 9DDA 8D DF 21			sta PUTTEXT.S
  3690 9DDD A9 80			lda #$80
  3691 9DDF 8D E0 21			sta PUTTEXT.S+1
  3692 9DE2 20 13 9A			jsr PUTTEXT
  3693
  3694 				; optimize FAIL ('CLEARSTATUS', init.inc), line = 27
  3695
  3696 9DE5 20 B6 9B			jsr CLEARSTATUS
  3697
  3698 				; -------------------  ASM Block 00000088  -------------------
  3699
  3700 				 lda #$fe \ sta $100 
  3700 9DE8 A9 FE		 LDA #$FE 
  3700 9DEA 8D 00 01		 STA $100 
  3701 				; optimize FAIL ('MISC.DETECTMEM', init.inc), line = 31
  3702
  3703 9DED 20 BA 98			jsr MISC.DETECTMEM
  3704 9DF0 AD A3 21			lda MISC.DETECTMEM.RESULT
  3705 9DF3 8D DA 21			sta TOTALXMS
  3706
  3707 				; optimize OK (init.inc), line = 32
  3708
  3709 9DF6 A9 10			lda #$10
  3710 9DF8 85 8C			sta :ecx
  3711 9DFA AD DA 21			lda TOTALXMS
  3712 9DFD 85 84			sta :eax
  3713 					.ifdef fmulinit
  3714 					fmulu_8
  3715 					els
  3716 9DFF 20 37 85			imulCL
  3717 					eif
  3718 9E02 A5 84			lda :eax
  3719 9E04 18 69 21			add #$21
  3720 9E07 8D E8 21			sta MEMAVAILABLE
  3721 9E0A A5 85			lda :eax+1
  3722 9E0C 69 00			adc #$00
  3723 9E0E 8D E9 21			sta MEMAVAILABLE+1
  3724
  3725 				; optimize OK (init.inc), line = 33
  3726
  3727 9E11 A9 EC			lda #$EC
  3728 9E13 85 D4			sta SCRADR
  3729 9E15 A9 37			lda #$37
  3730 9E17 85 D5			sta SCRADR+1
  3731
  3732 				; optimize OK (init.inc), line = 34
  3733
  3734 9E19 A9 59			lda #$59
  3735 9E1B 8D DF 21			sta PUTTEXT.S
  3736 9E1E A9 80			lda #$80
  3737 9E20 8D E0 21			sta PUTTEXT.S+1
  3738 9E23 20 13 9A			jsr PUTTEXT
  3739
  3740 				; optimize OK (init.inc), line = 35
  3741
  3742 9E26 AD E8 21			lda MEMAVAILABLE
  3743 9E29 8D E6 21			sta PUTINT.VALUE
  3744 9E2C AD E9 21			lda MEMAVAILABLE+1
  3745 9E2F 8D E7 21			sta PUTINT.VALUE+1
  3746 9E32 20 DF 9A			jsr PUTINT
  3747
  3748 				; optimize OK (init.inc), line = 36
  3749
  3750 9E35 A9 60			lda #$60
  3751 9E37 8D DF 21			sta PUTTEXT.S
  3752 9E3A A9 80			lda #$80
  3753 9E3C 8D E0 21			sta PUTTEXT.S+1
  3754 9E3F 20 13 9A			jsr PUTTEXT
  3755
  3756 				; optimize OK (init.inc), line = 38
  3757
  3758 9E42 A9 00			lda #$00
  3759 9E44 8D B6 98			sta MIDFILES.MIDTRACKS
  3760 9E47 A9 3E			lda #$3E
  3761 9E49 8D B7 98			sta MIDFILES.MIDTRACKS+1
  3762
  3763 				; optimize OK (init.inc), line = 39
  3764
  3765 9E4C A9 00			lda #$00
  3766 9E4E 8D 48 21			sta MIDFILES.MIDDATA
  3767 9E51 A9 40			lda #$40
  3768 9E53 8D 49 21			sta MIDFILES.MIDDATA+1
  3769
  3770 				; optimize OK (init.inc), line = 41
  3771
  3772 9E56 A9 00			lda #$00
  3773 9E58 85 DE			sta MIDFILES.CTRK
  3774
  3775 9E5A			l_09C5
  3776 				; --- ForToDoCondition
  3777 9E5A A5 DE			lda MIDFILES.CTRK
  3778 9E5C C9 10			cmp #$10
  3779 9E5E B0 3B			jcs l_09D3
  3780
  3781 				; optimize OK (init.inc), line = 42
  3782
  3783 9E60 85 9D			sta :STACKORIGIN+9
  3784 9E62 A9 00			lda #$00
  3785 9E64 06 9D			asl :STACKORIGIN+9
  3786 9E66 2A				rol @
  3787 9E67 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3788 9E69 A9 9A			lda #$9A
  3789 9E6B 85 9E			sta :STACKORIGIN+10
  3790 9E6D A9 34			lda #$34
  3791 9E6F 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3792 9E71 A5 DE			lda MIDFILES.CTRK
  3793 9E73 20 D5 8A			jsr @mul40
  3794 9E76 18 65 9E			add :STACKORIGIN+10
  3795 9E79 85 9E			sta :STACKORIGIN+10
  3796 9E7B A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  3797 9E7D 65 85			adc :eax+1
  3798 9E7F 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3799 9E81 A5 9D			lda :STACKORIGIN+9
  3800 9E83 18 69 00			add #$00
  3801 9E86 A8				tay
  3802 9E87 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  3803 9E89 69 00			adc #$00
  3804 9E8B 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  3805 9E8D A5 9E			lda :STACKORIGIN+10
  3806 9E8F 99 AA 21			sta adr.CHANNELSCRADR,y
  3807 9E92 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  3808 9E94 99 AB 21			sta adr.CHANNELSCRADR+1,y
  3809
  3810 				; --- ForToDoEpilog
  3811 9E97 E6 DE			inc MIDFILES.CTRK
  3812 9E99 D0 BF			jne l_09C5
  3813 9E9B			l_09D3
  3814
  3815 				; optimize OK (init.inc), line = 44
  3816
  3817 9E9B AD FA FF			lda NMIVEC
  3818 9E9E 8D D8 21			sta OLDNMIVEC
  3819 9EA1 AD FB FF			lda NMIVEC+1
  3820 9EA4 8D D9 21			sta OLDNMIVEC+1
  3821
  3822 				; optimize OK (init.inc), line = 45
  3823
  3824 9EA7 A9 00			lda #$00
  3825 9EA9 8D 0E D4			sta NMIEN
  3826 9EAC A9 52			lda <MYNMI
  3827 9EAE 8D FA FF			sta NMIVEC
  3828 9EB1 A9 9D			lda >MYNMI
  3829 9EB3 8D FB FF			sta NMIVEC+1
  3830 9EB6 A9 40			lda #$40
  3831 9EB8 8D 0E D4			sta NMIEN
  3832
  3833 				; optimize OK (init.inc), line = 47
  3834
  3835 9EBB A5 14			lda _TM
  3836 9EBD 8D CA 21			sta OTM
  3837
  3838 				; optimize FAIL ('SETCOLORS', init.inc), line = 48
  3839
  3840 9EC0 20 BF 99			jsr SETCOLORS
  3841 9EC3 A9 22			lda #$22
  3842 9EC5 8D 00 D4			sta DMACTL
  3843
  3844 				; optimize OK (init.inc), line = 49
  3845
  3846 9EC8 A9 01			lda #$01
  3847 9ECA 8D D5 21			sta ISSTOPPED
  3848
  3849 				; ------------------------------------------------------------
  3850
  3851 = 21E8			MEMAVAILABLE	= DATAORIGIN+$01E8
  3852
  3853 = 21E8			@VarData	= MEMAVAILABLE
  3854 = 0002			@VarDataSize	= 2
  3855
  3856 9ECD			@exit
  3857 					.ifdef @new
  3858 					lda <@VarData
  3859 					sta :ztmp
  3860 					lda >@VarData
  3861 					ldy #@VarDataSize-1
  3862 					jmp @FreeMem
  3863 					els
  3864 9ECD 60				rts						; ret
  3865 					eif
  3866 				.endl
  3867
  3868 9ECE			.local	LOADSONG					; PROCEDURE
  3869
  3870 9ECE 4C 31 9F			jmp l_0A10
  3871
  3872 9ED1			.local	LOADPRC						; PROCEDURE
  3873 9ED1 8D EC 21			sta V
  3874
  3875 				; optimize OK (load.inc), line = 8
  3876
  3877 9ED4 A9 59			lda #$59
  3878 9ED6 18 6D EB 21			add T
  3879 9EDA 8D CE 37			sta $37CE
  3880
  3881 				; optimize FAIL (0, load.inc), line = 9
  3882
  3883 9EDD EE EB 21			inc T
  3884 9EE0 AD EB 21			lda T
  3885 9EE3 C9 04			cmp #$04
  3886 9EE5 D0 05			jne l_0A32
  3887 9EE7 A9 00			lda #$00
  3888 9EE9 8D EB 21			sta T
  3889 9EEC			l_0A32
  3890
  3891 				; optimize OK (load.inc), line = 10
  3892
  3893 9EEC AD EC 21			lda V
  3894 9EEF F0 3F			jeq l_0A4B
  3895
  3896 				; optimize OK (load.inc), line = 12
  3897
  3898 9EF1 A9 D8			lda #$D8
  3899 9EF3 85 D4			sta SCRADR
  3900 9EF5 A9 37			lda #$37
  3901 9EF7 85 D5			sta SCRADR+1
  3902
  3903 				; optimize OK (load.inc), line = 13
  3904
  3905 9EF9 AD EC 21			lda V
  3906 9EFC 38 E9 01			sub #$01
  3907 9EFF 8D E6 21			sta PUTINT.VALUE
  3908 9F02 A9 00			lda #$00
  3909 9F04 E9 00			sbc #$00
  3910 9F06 8D E7 21			sta PUTINT.VALUE+1
  3911 9F09 20 DF 9A			jsr PUTINT
  3912 9F0C A4 D5			ldy SCRADR+1
  3913 9F0E 84 81			sty :bp+1
  3914 9F10 A4 D4			ldy SCRADR
  3915 9F12 A9 0F			lda #$0F
  3916 9F14 91 80			sta (:bp),y
  3917 9F16 E6 D4			inc SCRADR
  3918 9F18 D0 02			sne
  3919 9F1A E6 D5			inc SCRADR+1
  3920
  3921 				; optimize OK (load.inc), line = 14
  3922
  3923 9F1C AD 4C 21			lda MIDFILES.TOTALTRACKS
  3924 9F1F 8D E6 21			sta PUTINT.VALUE
  3925 9F22 A9 00			lda #$00
  3926 9F24 8D E7 21			sta PUTINT.VALUE+1
  3927 9F27 20 DF 9A			jsr PUTINT
  3928 9F2A E6 D4			inc SCRADR
  3929 9F2C D0 02			sne
  3930 9F2E E6 D5			inc SCRADR+1
  3931 9F30			l_0A4B
  3932
  3933 				; ------------------------------------------------------------
  3934
  3935 = 21EC			V	= DATAORIGIN+$01EC
  3936
  3937 = 21EC			@VarData	= V
  3938 = 0001			@VarDataSize	= 1
  3939
  3940 9F30			@exit
  3941 					.ifdef @new
  3942 					lda <@VarData
  3943 					sta :ztmp
  3944 					lda >@VarData
  3945 					ldy #@VarDataSize-1
  3946 					jmp @FreeMem
  3947 					els
  3948 9F30 60				rts						; ret
  3949 					eif
  3950 				.endl
  3951 9F31			l_0A10
  3952
  3953 				; optimize OK (load.inc), line = 19
  3954
  3955 9F31 A9 BA			lda #$BA
  3956 9F33 85 D4			sta SCRADR
  3957 9F35 A9 37			lda #$37
  3958 9F37 85 D5			sta SCRADR+1
  3959 9F39 AD D6 21			lda FN
  3960 9F3C 8D DF 21			sta PUTTEXT.S
  3961 9F3F AD D7 21			lda FN+1
  3962 9F42 8D E0 21			sta PUTTEXT.S+1
  3963 9F45 20 13 9A			jsr PUTTEXT
  3964
  3965 				; optimize FAIL ('STATUSLOADING', load.inc), line = 20
  3966
  3967 9F48 20 3C 9D			jsr STATUSLOADING
  3968
  3969 				; optimize OK (load.inc), line = 21
  3970
  3971 9F4B A9 D1			lda <LOADPRC
  3972 9F4D 8D 65 21			sta MIDFILES.LOADPROCESS
  3973 9F50 A9 9E			lda >LOADPRC
  3974 9F52 8D 66 21			sta MIDFILES.LOADPROCESS+1
  3975 9F55 A9 00			lda #$00
  3976 9F57 8D EB 21			sta T
  3977
  3978 				; optimize OK (load.inc), line = 22
  3979
  3980 9F5A AD D6 21			lda FN
  3981 9F5D 8D 6B 21			sta MIDFILES.LOADMID.FN
  3982 9F60 AD D7 21			lda FN+1
  3983 9F63 8D 6C 21			sta MIDFILES.LOADMID.FN+1
  3984 9F66 20 2D 8F			jsr MIDFILES.LOADMID
  3985 9F69 AD 6D 21			lda MIDFILES.LOADMID.RESULT
  3986 9F6C 8D EA 21			sta ERR
  3987
  3988 				; optimize OK (load.inc), line = 23
  3989
  3990 9F6F F0 6A			jeq l_0A92
  3991
  3992 				; optimize OK (load.inc), line = 25
  3993
  3994 9F71 A9 CE			lda #$CE
  3995 9F73 85 D4			sta SCRADR
  3996 9F75 A9 37			lda #$37
  3997 9F77 85 D5			sta SCRADR+1
  3998 9F79 A9 80			lda #$80
  3999 9F7B 8D DB 21			sta PUTTEXTINVERT
  4000
  4001 				; optimize OK (load.inc), line = 26
  4002
  4003 9F7E AD EA 21			lda ERR
  4004 9F81 30 2B			jmi l_0AAD
  4005
  4006 				; optimize OK (load.inc), line = 27
  4007
  4008 9F83 8D ED 21			sta @CASETMP_0003
  4009 9F86 C9 64			cmp #$64
  4010 9F88 D0 10			jne l_0AB9
  4011 				@
  4012
  4013 				; optimize OK (load.inc), line = 28
  4014
  4015 9F8A A9 64			lda #$64
  4016 9F8C 8D DF 21			sta PUTTEXT.S
  4017 9F8F A9 80			lda #$80
  4018 9F91 8D E0 21			sta PUTTEXT.S+1
  4019 9F94 20 13 9A			jsr PUTTEXT
  4020
  4021 9F97 4C AB 9F			jmp a_0003
  4022 9F9A			l_0AB9
  4023 9F9A C9 65			cmp #$65
  4024 9F9C D0 0D			jne l_0AC4
  4025 				@
  4026
  4027 				; optimize OK (load.inc), line = 29
  4028
  4029 9F9E A9 7A			lda #$7A
  4030 9FA0 8D DF 21			sta PUTTEXT.S
  4031 9FA3 A9 80			lda #$80
  4032 9FA5 8D E0 21			sta PUTTEXT.S+1
  4033 9FA8 20 13 9A			jsr PUTTEXT
  4034
  4035 9FAB			l_0AC4
  4036 9FAB			a_0003
  4037 9FAB 4C C9 9F			jmp l_0AD5
  4038 9FAE			l_0AAD
  4039
  4040 				; optimize OK (load.inc), line = 33
  4041
  4042 9FAE A9 90			lda #$90
  4043 9FB0 8D DF 21			sta PUTTEXT.S
  4044 9FB3 A9 80			lda #$80
  4045 9FB5 8D E0 21			sta PUTTEXT.S+1
  4046 9FB8 20 13 9A			jsr PUTTEXT
  4047 9FBB AD EA 21			lda ERR
  4048 9FBE 8D E6 21			sta PUTINT.VALUE
  4049 9FC1 A9 00			lda #$00
  4050 9FC3 8D E7 21			sta PUTINT.VALUE+1
  4051 9FC6 20 DF 9A			jsr PUTINT
  4052 9FC9			l_0AD5
  4053
  4054 				; --- WhileProlog
  4055 9FC9			l_0ADE
  4056
  4057 				; optimize OK (load.inc), line = 35
  4058
  4059 9FC9 AD FC 02			lda KEYB
  4060 9FCC C9 FF			cmp #$FF
  4061 9FCE F0 F9			jeq l_0ADE
  4062
  4063 				; optimize OK (load.inc), line = 36
  4064
  4065 9FD0 A9 00			lda #$00
  4066 9FD2 8D DB 21			sta PUTTEXTINVERT
  4067
  4068 				; optimize OK (load.inc), line = 37
  4069
  4070 9FD5 8D 4C 21			sta MIDFILES.TOTALTRACKS
  4071 9FD8 4C F6 9F			jmp @exit					; exit
  4072 9FDB			l_0A92
  4073
  4074 				; optimize OK (load.inc), line = 39
  4075
  4076 9FDB A9 00			lda #$00
  4077 9FDD 85 88			sta SYSTEM.MOVE_010A.SOURCE
  4078 9FDF A9 3E			lda #$3E
  4079 9FE1 85 89			sta SYSTEM.MOVE_010A.SOURCE+1
  4080 9FE3 A9 00			lda #$00
  4081 9FE5 85 8C			sta SYSTEM.MOVE_010A.DEST
  4082 9FE7 A9 3C			lda #$3C
  4083 9FE9 85 8D			sta SYSTEM.MOVE_010A.DEST+1
  4084 9FEB A9 00			lda #$00
  4085 9FED 85 84			sta SYSTEM.MOVE_010A.COUNT
  4086 9FEF A9 02			lda #$02
  4087 9FF1 85 85			sta SYSTEM.MOVE_010A.COUNT+1
  4088 9FF3				.local +MAIN.SYSTEM.MOVE_010A
  4089 9FF3				m@INLINE
Macro: MAIN.SYSTEM.MOVE_010A.M@INLINE [Source: MIDICar Player.a65]
     4 9FF3 20 53 84			jsr @move
Source: MIDICar Player.a65
  4090 					.endl
  4091
  4092 				; ------------------------------------------------------------
  4093
  4094 = 21EA			ERR	= DATAORIGIN+$01EA
  4095 = 21EB			T	= DATAORIGIN+$01EB
  4096 = 21ED			@CASETMP_0003	= DATAORIGIN+$01ED
  4097
  4098 = 21EA			@VarData	= ERR
  4099 = 0003			@VarDataSize	= 3
  4100
  4101 9FF6			@exit
  4102 					.ifdef @new
  4103 					lda <@VarData
  4104 					sta :ztmp
  4105 					lda >@VarData
  4106 					ldy #@VarDataSize-1
  4107 					jmp @FreeMem
  4108 					els
  4109 9FF6 60				rts						; ret
  4110 					eif
  4111 				.endl
  4112 9FF7			l_00A6
  4113
  4114 				; optimize FAIL ('INIT', MIDICar Player.pas), line = 56
  4115
  4116 9FF7 20 A4 9D			jsr INIT
  4117
  4118 				; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 58
  4119
  4120 9FFA 20 ED 8D			jsr SYSTEM.PARAMCOUNT
  4121 9FFD A9 00			lda #$00
  4122 9FFF CD 1E 21			cmp SYSTEM.PARAMCOUNT.RESULT
  4123 A002 B0 21			jcs l_0B0A
  4124 				@
  4125
  4126 				; optimize OK (MIDICar Player.pas), line = 60
  4127
  4128 A004 A9 01			lda #$01
  4129 A006 20 F6 8D			jsr SYSTEM.PARAMSTR
  4130 A009 AD 0B 8E			lda SYSTEM.PARAMSTR.RESULT
  4131 A00C 8D D6 21			sta FN
  4132 A00F AD 0C 8E			lda SYSTEM.PARAMSTR.RESULT+1
  4133 A012 8D D7 21			sta FN+1
  4134
  4135 				; optimize OK (MIDICar Player.pas), line = 61
  4136
  4137 A015 AD DA 21			lda TOTALXMS
  4138 A018 85 E1			sta MIDFILES._BANK
  4139
  4140 				; optimize OK (MIDICar Player.pas), line = 62
  4141
  4142 A01A A9 00			lda #$00
  4143 A01C 85 E2			sta MIDFILES._ADR
  4144 A01E A9 40			lda #$40
  4145 A020 85 E3			sta MIDFILES._ADR+1
  4146
  4147 				; optimize FAIL ('LOADSONG', MIDICar Player.pas), line = 63
  4148
  4149 A022 20 CE 9E			jsr LOADSONG
  4150 A025			l_0B0A
  4151
  4152 				; optimize FAIL ('CLEARSTATUS', MIDICar Player.pas), line = 66
  4153
  4154 A025 20 B6 9B			jsr CLEARSTATUS
  4155
  4156 				; optimize FAIL ('CLEARUVMETERS', MIDICar Player.pas), line = 67
  4157
  4158 A028 20 0A 9C			jsr CLEARUVMETERS
  4159
  4160 				; optimize OK (MIDICar Player.pas), line = 70
  4161
  4162 A02B A9 80			lda #$80
  4163 A02D 8D DB 21			sta PUTTEXTINVERT
  4164
  4165 				; --- RepeatUntilProlog
  4166 A030			l_0B24
  4167
  4168 				; optimize FAIL ('MIDFILES.PROCESSMIDI', MIDICar Player.pas), line = 72
  4169
  4170 A030 20 9E 97			jsr MIDFILES.PROCESSMIDI
  4171
  4172 				; optimize OK (MIDICar Player.pas), line = 73
  4173
  4174 A033 AD D5 21			lda ISSTOPPED
  4175 A036 D0 10			jne l_0B40
  4176 A038 A5 DF			lda MIDFILES.PLAYINGTRACKS
  4177 A03A D0 0C			jne l_0B40
  4178
  4179 				; optimize FAIL ('STATUSSTOPPED', MIDICar Player.pas), line = 75
  4180
  4181 A03C 20 D0 9C			jsr STATUSSTOPPED
  4182
  4183 				; optimize OK (MIDICar Player.pas), line = 76
  4184
  4185 A03F A5 4A			lda PLAYERSTATUS
  4186 A041 29 04			and #$04
  4187 A043 F0 03			jeq l_0B58
  4188
  4189 				; optimize FAIL ('STATUSPLAYING', MIDICar Player.pas), line = 77
  4190
  4191 A045 20 6B 9C			jsr STATUSPLAYING
  4192 A048			l_0B58
  4193 A048			l_0B40
  4194
  4195 				; optimize OK (MIDICar Player.pas), line = 80
  4196
  4197 A048 A5 14			lda _TM
  4198 A04A CD CA 21			cmp OTM
  4199 A04D D0 03 4C D4 A0		jeq l_0B72
  4200
  4201 				; optimize OK (MIDICar Player.pas), line = 82
  4202
  4203 A052 8D CA 21			sta OTM
  4204
  4205 				; optimize OK (MIDICar Player.pas), line = 83
  4206
  4207 A055 A9 C0			lda #$C0
  4208 A057 85 D4			sta SCRADR
  4209 A059 A9 37			lda #$37
  4210 A05B 85 D5			sta SCRADR+1
  4211 A05D A9 F0			lda <MIDFILES._TOTALTICKS
  4212 A05F 8D E3 21			sta PUTHEX.V
  4213 A062 A9 00			lda >MIDFILES._TOTALTICKS
  4214 A064 8D E4 21			sta PUTHEX.V+1
  4215 A067 A9 08			lda #$08
  4216 A069 8D E5 21			sta PUTHEX.N
  4217 A06C 20 74 9A			jsr PUTHEX
  4218
  4219 				; optimize OK (uvmeters.inc), line = 1
  4220
  4221 A06F A5 4A			lda PLAYERSTATUS
  4222 A071 29 02			and #$02
  4223 A073 F0 5F			jeq l_0B96
  4224
  4225 				; optimize OK (uvmeters.inc), line = 3
  4226
  4227 A075 A9 00			lda #$00
  4228 A077 8D CB 21			sta CHN
  4229
  4230 				; --- RepeatUntilProlog
  4231 A07A			l_0B9C
  4232
  4233 				; optimize OK (uvmeters.inc), line = 5
  4234
  4235 A07A AD CB 21			lda CHN
  4236 A07D 0A				asl @
  4237 A07E A8				tay
  4238 A07F B9 AA 21			lda adr.CHANNELSCRADR,y
  4239 A082 85 D4			sta SCRADR
  4240 A084 B9 AB 21			lda adr.CHANNELSCRADR+1,y
  4241 A087 85 D5			sta SCRADR+1
  4242
  4243 				; optimize OK (uvmeters.inc), line = 6
  4244
  4245 A089 AC CB 21			ldy CHN
  4246 A08C B9 53 21			lda MIDFILES.adr.CHNVOLUME,y
  4247 A08F 8D D4 21			sta C
  4248
  4249 				; optimize OK (uvmeters.inc), line = 7
  4250
  4251 A092 F0 36			jeq l_0BBF
  4252
  4253 				; optimize OK (uvmeters.inc), line = 9
  4254
  4255 A094 C9 05			cmp #$05
  4256 A096 90 09			jcc l_0BD2
  4257 A098 38 E9 04			sub #$04
  4258 A09B 8D D4 21			sta C
  4259 A09E 4C A6 A0			jmp l_0BDD
  4260 A0A1			l_0BD2
  4261 A0A1 A9 00			lda #$00
  4262 A0A3 8D D4 21			sta C
  4263 A0A6			l_0BDD
  4264
  4265 				; optimize OK (uvmeters.inc), line = 10
  4266
  4267 A0A6 AC CB 21			ldy CHN
  4268 A0A9 AD D4 21			lda C
  4269 A0AC 99 53 21			sta MIDFILES.adr.CHNVOLUME,y
  4270
  4271 				; optimize OK (uvmeters.inc), line = 11
  4272
  4273 A0AF 4A				lsr @
  4274 A0B0 29 3C			and #$3C
  4275 A0B2 8D D2 21			sta V
  4276
  4277 				; -------------------  ASM Block 00000089  -------------------
  4278
  4279 A0B5 18			        clc
  4280 A0B6 A9 80		        lda #<UVMETER_ADDR
  4281 A0B8 6D D2 21		        adc v
  4282 A0BB 85 D6		        sta $d6
  4283 A0BD A9 38		        lda #>UVMETER_ADDR
  4284 A0BF 85 D7		        sta $d7
  4285 A0C1 A0 03		        ldy #3
  4286 A0C3			      loop:
  4287 A0C3 B1 D6		        lda ($d6),y
  4288 A0C5 91 D4		        sta ($d4),y
  4289 A0C7 88			        dey
  4290 A0C8 10 F9		        bpl loop
  4291 				      
  4292 A0CA			l_0BBF
  4293
  4294 				; optimize FAIL (0, uvmeters.inc), line = 29
  4295
  4296 A0CA EE CB 21			inc CHN
  4297
  4298 				; optimize OK (uvmeters.inc), line = 30
  4299
  4300 A0CD AD CB 21			lda CHN
  4301 A0D0 C9 10			cmp #$10
  4302 A0D2 D0 A6			jne l_0B9C
  4303 A0D4			l_0B96
  4304 A0D4			l_0B72
  4305
  4306 				; optimize OK (keyboard.inc), line = 1
  4307
  4308 A0D4 AD FC 02			lda KEYB
  4309 A0D7 C9 FF			cmp #$FF
  4310 A0D9 D0 03 4C CF A1		jeq l_0C21
  4311
  4312 				; optimize OK (keyboard.inc), line = 3
  4313
  4314 A0DE 8D EE 21			sta @CASETMP_0004
  4315 A0E1 C9 1C			cmp #$1C
  4316 A0E3 D0 06			jne l_0C2D
  4317 				@
  4318 A0E5 4C D2 A1			jmp b_0B24					; break
  4319
  4320 A0E8 4C CA A1			jmp a_0004
  4321 A0EB			l_0C2D
  4322 A0EB C9 00			cmp #$00
  4323 A0ED D0 0C			jne l_0C36
  4324 				@
  4325
  4326 				; optimize OK (keyboard.inc), line = 7
  4327
  4328 A0EF A5 4A			lda PLAYERSTATUS
  4329 A0F1 49 04			eor #$04
  4330 A0F3 85 4A			sta PLAYERSTATUS
  4331
  4332 				; optimize FAIL ('ISLOOPED', keyboard.inc), line = 8
  4333
  4334 A0F5 20 8A 9B			jsr ISLOOPED
  4335
  4336 A0F8 4C CA A1			jmp a_0004
  4337 A0FB			l_0C36
  4338 A0FB C9 25			cmp #$25
  4339 A0FD D0 29			jne l_0C4A
  4340 				@
  4341
  4342 				; optimize OK (keyboard.inc), line = 12
  4343
  4344 A0FF A5 4A			lda PLAYERSTATUS
  4345 A101 49 02			eor #$02
  4346 A103 85 4A			sta PLAYERSTATUS
  4347
  4348 				; optimize OK (keyboard.inc), line = 13
  4349
  4350 A105 A9 72			lda #$72
  4351 A107 85 88			sta SYSTEM.FILLCHAR_0109.A
  4352 A109 A9 34			lda #$34
  4353 A10B 85 89			sta SYSTEM.FILLCHAR_0109.A+1
  4354 A10D A9 20			lda #$20
  4355 A10F 85 8C			sta SYSTEM.FILLCHAR_0109.COUNT
  4356 A111 A9 03			lda #$03
  4357 A113 85 8D			sta SYSTEM.FILLCHAR_0109.COUNT+1
  4358 A115 A9 00			lda #$00
  4359 A117 85 84			sta SYSTEM.FILLCHAR_0109.VALUE
  4360 A119				.local +MAIN.SYSTEM.FILLCHAR_0109
  4361 A119				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0109.M@INLINE [Source: MIDICar Player.a65]
     4 A119 20 A8 84			jsr @fill
Source: MIDICar Player.a65
  4362 					.endl
  4363
  4364 				; optimize OK (keyboard.inc), line = 14
  4365
  4366 A11C A5 4A			lda PLAYERSTATUS
  4367 A11E 29 02			and #$02
  4368 A120 F0 03			jeq l_0C6E
  4369
  4370 				; optimize FAIL ('CLEARUVMETERS', keyboard.inc), line = 15
  4371
  4372 A122 20 0A 9C			jsr CLEARUVMETERS
  4373 A125			l_0C6E
  4374
  4375 A125 4C CA A1			jmp a_0004
  4376 A128			l_0C4A
  4377 A128 C9 27			cmp #$27
  4378 A12A D0 0C			jne l_0C7B
  4379 				@
  4380
  4381 				; optimize OK (keyboard.inc), line = 19
  4382
  4383 A12C A5 4A			lda PLAYERSTATUS
  4384 A12E 49 01			eor #$01
  4385 A130 85 4A			sta PLAYERSTATUS
  4386
  4387 				; optimize FAIL ('SETCOLORS', keyboard.inc), line = 20
  4388
  4389 A132 20 BF 99			jsr SETCOLORS
  4390
  4391 A135 4C CA A1			jmp a_0004
  4392 A138			l_0C7B
  4393 A138 C9 0A			cmp #$0A
  4394 A13A D0 10			jne l_0C8F
  4395 				@
  4396
  4397 				; optimize OK (keyboard.inc), line = 24
  4398
  4399 A13C A5 F5			lda MIDFILES._TIMERSTATUS
  4400 A13E 10 06			jpl l_0CA5
  4401
  4402 				; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 26
  4403
  4404 A140 20 6B 9C			jsr STATUSPLAYING
  4405 A143 4C 49 A1			jmp l_0CB0
  4406 A146			l_0CA5
  4407
  4408 				; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 27
  4409
  4410 A146 20 AC 9C			jsr STATUSPAUSE
  4411 A149			l_0CB0
  4412
  4413 A149 4C CA A1			jmp a_0004
  4414 A14C			l_0C8F
  4415 A14C C9 3E			cmp #$3E
  4416 A14E D0 06			jne l_0CBA
  4417 				@
  4418
  4419 				; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 29
  4420
  4421 A150 20 D0 9C			jsr STATUSSTOPPED
  4422 A153 4C CA A1			jmp a_0004
  4423 A156			l_0CBA
  4424 A156 C9 0E			cmp #$0E
  4425 A158 F0 08			beq @+
  4426 A15A C9 06			cmp #$06
  4427 A15C F0 04			beq @+
  4428 A15E C9 0F			cmp #$0F
  4429 A160 D0 68			jne l_0CC8
  4430 				@
  4431
  4432 				; optimize OK (keyboard.inc), line = 32
  4433
  4434 A162 AD FC 02			lda KEYB
  4435 A165 C9 0E			cmp #$0E
  4436 A167 D0 21			jne l_0CDA
  4437 A169 AD 67 21			lda MIDFILES.TEMPOSHIFT
  4438 A16C 18 69 20			add #$20
  4439 A16F 8D 67 21			sta MIDFILES.TEMPOSHIFT
  4440 A172 AD 68 21			lda MIDFILES.TEMPOSHIFT+1
  4441 A175 69 4E			adc #$4E
  4442 A177 8D 68 21			sta MIDFILES.TEMPOSHIFT+1
  4443 A17A AD 69 21			lda MIDFILES.TEMPOSHIFT+2
  4444 A17D 69 00			adc #$00
  4445 A17F 8D 69 21			sta MIDFILES.TEMPOSHIFT+2
  4446 A182 AD 6A 21			lda MIDFILES.TEMPOSHIFT+3
  4447 A185 69 00			adc #$00
  4448 A187 8D 6A 21			sta MIDFILES.TEMPOSHIFT+3
  4449 A18A			l_0CDA
  4450
  4451 				; optimize OK (keyboard.inc), line = 33
  4452
  4453 A18A AD FC 02			lda KEYB
  4454 A18D C9 06			cmp #$06
  4455 A18F D0 21			jne l_0CF0
  4456 A191 AD 67 21			lda MIDFILES.TEMPOSHIFT
  4457 A194 38 E9 20			sub #$20
  4458 A197 8D 67 21			sta MIDFILES.TEMPOSHIFT
  4459 A19A AD 68 21			lda MIDFILES.TEMPOSHIFT+1
  4460 A19D E9 4E			sbc #$4E
  4461 A19F 8D 68 21			sta MIDFILES.TEMPOSHIFT+1
  4462 A1A2 AD 69 21			lda MIDFILES.TEMPOSHIFT+2
  4463 A1A5 E9 00			sbc #$00
  4464 A1A7 8D 69 21			sta MIDFILES.TEMPOSHIFT+2
  4465 A1AA AD 6A 21			lda MIDFILES.TEMPOSHIFT+3
  4466 A1AD E9 00			sbc #$00
  4467 A1AF 8D 6A 21			sta MIDFILES.TEMPOSHIFT+3
  4468 A1B2			l_0CF0
  4469
  4470 				; optimize OK (keyboard.inc), line = 34
  4471
  4472 A1B2 AD FC 02			lda KEYB
  4473 A1B5 C9 0F			cmp #$0F
  4474 A1B7 D0 0E			jne l_0D06
  4475 A1B9 A9 00			lda #$00
  4476 A1BB 8D 67 21			sta MIDFILES.TEMPOSHIFT
  4477 A1BE 8D 68 21			sta MIDFILES.TEMPOSHIFT+1
  4478 A1C1 8D 69 21			sta MIDFILES.TEMPOSHIFT+2
  4479 A1C4 8D 6A 21			sta MIDFILES.TEMPOSHIFT+3
  4480 A1C7			l_0D06
  4481
  4482 				; optimize FAIL ('MIDFILES.SETTEMPO', keyboard.inc), line = 35
  4483
  4484 A1C7 20 55 93			jsr MIDFILES.SETTEMPO
  4485
  4486 A1CA			l_0CC8
  4487 A1CA			a_0004
  4488
  4489 				; optimize OK (keyboard.inc), line = 38
  4490
  4491 A1CA A9 FF			lda #$FF
  4492 A1CC 8D FC 02			sta KEYB
  4493 A1CF			l_0C21
  4494
  4495 				; optimize OK (MIDICar Player.pas), line = 89
  4496
  4497 A1CF 4C 30 A0			jmp l_0B24
  4498 A1D2			b_0B24
  4499
  4500 				; optimize FAIL ('STATUSSTOPPED', MIDICar Player.pas), line = 93
  4501
  4502 A1D2 20 D0 9C			jsr STATUSSTOPPED
  4503
  4504 				; optimize OK (MIDICar Player.pas), line = 94
  4505
  4506 A1D5 A9 00			lda #$00
  4507 A1D7 8D 0E D4			sta NMIEN
  4508 A1DA AD D8 21			lda OLDNMIVEC
  4509 A1DD 8D FA FF			sta NMIVEC
  4510 A1E0 AD D9 21			lda OLDNMIVEC+1
  4511 A1E3 8D FB FF			sta NMIVEC+1
  4512 A1E6 A9 40			lda #$40
  4513 A1E8 8D 0E D4			sta NMIEN
  4514
  4515 				; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 95
  4516
  4517 A1EB 20 40 9C			jsr EXIT2DOS
  4518
  4519 				; ------------------------------------------------------------
  4520
  4521 = 3000			CHARS_ADDR	= $3000
  4522 = 3400			DLIST_ADDR	= $3400
  4523 = 3422			SCREEN_ADDR	= $3422
  4524 = 37BA			SCREEN_TIME	= $37BA
  4525 = 37CE			SCREEN_STATUS	= $37CE
  4526 = 3880			UVMETER_ADDR	= $3880
  4527 = 3C00			START_INFO_ADDR	= $3C00
  4528 = 3E00			TRACK_DATA_ADDR	= $3E00
  4529 = 4000			MIDI_DATA_ADDR	= $4000
  4530 = 0021			FREE_MEM	= $21
  4531 = 0020			F_CLEAR	= $20
  4532 = 0001			PS_COLORSET	= $01
  4533 = 0002			PS_VIEW	= $02
  4534 = 0004			PS_LOOP	= $04
  4535 = 21AA			adr.CHANNELSCRADR	= [DATAORIGIN+$01AA] .array [16] .word
  4536 A1EE			.var CHANNELSCRADR	= adr.CHANNELSCRADR .word
  4537 = 00D4			SCRADR	= $D4
  4538 = 0014			_TM	= $14
  4539 = 21CA			OTM	= DATAORIGIN+$01CA
  4540 = 21CB			CHN	= DATAORIGIN+$01CB
  4541 = 21CC			TPTR	= DATAORIGIN+$01CC
  4542 = 21CE			TPS	= DATAORIGIN+$01CE
  4543 = 21D0			SEC	= DATAORIGIN+$01D0
  4544 = 21D1			TRKSTAT	= DATAORIGIN+$01D1
  4545 = 21D2			V	= DATAORIGIN+$01D2
  4546 = 21D3			I	= DATAORIGIN+$01D3
  4547 = 21D4			C	= DATAORIGIN+$01D4
  4548 = 21D5			ISSTOPPED	= DATAORIGIN+$01D5
  4549 = 21D6			FN	= DATAORIGIN+$01D6
  4550 = 21D8			OLDNMIVEC	= DATAORIGIN+$01D8
  4551 = 004A			PLAYERSTATUS	= $4A
  4552 = 21DA			TOTALXMS	= DATAORIGIN+$01DA
  4553 = 809F			adr.COLORS	= CODEORIGIN+$009F
  4554 A1EE			.var COLORS	= adr.COLORS .word
  4555 = 80A9			adr.GM_RESET	= CODEORIGIN+$00A9
  4556 A1EE			.var GM_RESET	= adr.GM_RESET .word
  4557 = 0000			K_L	= $00
  4558 = 0006			K_PLUS	= $06
  4559 = 000A			K_P	= $0A
  4560 = 000E			K_MINUS	= $0E
  4561 = 000F			K_EQ	= $0F
  4562 = 001C			K_ESC	= $1C
  4563 = 0021			K_SPACE	= $21
  4564 = 0025			K_M	= $25
  4565 = 0027			K_INVERS	= $27
  4566 = 003E			K_S	= $3E
  4567 = 02FC			KEYB	= $02FC
  4568 = 21DB			PUTTEXTINVERT	= DATAORIGIN+$01DB
  4569 = D40E			NMIEN	= $D40E
  4570 = FFFA			NMIVEC	= $FFFA
  4571 = 21DC			SDMACTL	= DATAORIGIN+$01DC
  4572 = D400			DMACTL	= $D400
  4573 = 02F4			CHBASE	= $02F4
  4574 = 0041			SOUNDR	= $41
  4575 = 21EE			@CASETMP_0004	= DATAORIGIN+$01EE
  4576 A1EE			@exit
  4577
  4578 A1EE A2 00		@halt	ldx #$00
  4579 A1F0 9A				txs
  4580 					.ifdef MAIN.@DEFINES.ROMOFF
  4581 A1F1 EE 01 D3			inc portb
  4582 					.fi
  4583
  4584 A1F4 A0 01			ldy #$01
  4585
  4586 A1F6 60				rts
  4587
  4588 				; ------------------------------------------------------------
  4589
  4590 A1F7 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  4591
  4592 				; ------------------------------------------------------------
  4593
  4594 A207			.local	@DEFINES
  4595 A207			ATARI
  4596 A207			USE_FIFO
  4597 A207			ROMOFF
  4598 				.endl
  4599
  4600 A207			.local	@RESOURCE
  4601 				.endl
  4602
  4603 = A207 AA 21		CHANNELSCRADR
  4603 = A209 9F 80		COLORS
  4603 = A20B A9 80		GM_RESET
  4603 				.endl							; MAIN
  4604
  4605 				; ------------------------------------------------------------
  4606 				; ------------------------------------------------------------
  4607
  4608 				.macro	UNITINITIALIZATION
  4609 				
  4610 					.ifdef MAIN.SYSTEM.@UnitInit
  4611 					jsr MAIN.SYSTEM.@UnitInit
  4612 					.fi
  4613 				
  4614 					.ifdef MAIN.MC6850.@UnitInit
  4615 					jsr MAIN.MC6850.@UnitInit
  4616 					.fi
  4617 				
  4618 					.ifdef MAIN.MIDI_FIFO.@UnitInit
  4619 					jsr MAIN.MIDI_FIFO.@UnitInit
  4620 					.fi
  4621 				
  4622 					.ifdef MAIN.MIDFILES.@UnitInit
  4623 					jsr MAIN.MIDFILES.@UnitInit
  4624 					.fi
  4625 				
  4626 					.ifdef MAIN.MISC.@UnitInit
  4627 					jsr MAIN.MISC.@UnitInit
  4628 					.fi
  4629 				
  4630 					.ifdef MAIN.CIO.@UnitInit
  4631 					jsr MAIN.CIO.@UnitInit
  4632 					.fi
  4633 				.endm
  4634
  4635 				; ------------------------------------------------------------
  4636
  4637 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4638 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4638 				SYSTEM: $8C63..$8E10
  4639 					eif
  4640
  4641 					ift .SIZEOF(MAIN.MC6850) > 0
  4642 					.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
  4642 				MC6850: $8E11..$8E1D
  4643 					eif
  4644
  4645 					ift .SIZEOF(MAIN.MIDI_FIFO) > 0
  4646 					.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
  4646 				MIDI_FIFO: $8E1E..$8EBF
  4647 					eif
  4648
  4649 					ift .SIZEOF(MAIN.MIDFILES) > 0
  4650 					.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
  4650 				MIDFILES: $8EC0..$98B9
  4651 					eif
  4652
  4653 					ift .SIZEOF(MAIN.MISC) > 0
  4654 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  4654 				MISC: $98BA..$995F
  4655 					eif
  4656
  4657 					ift .SIZEOF(MAIN.CIO) > 0
  4658 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  4658 				CIO: $9960..$99BE
  4659 					eif
  4660
  4661 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4661 				CODE: $8000..$A206
  4662
  4663 				; ------------------------------------------------------------
  4664
  4665 					org $2000
  4666
  4667 2000			DATAORIGIN
  4668 2000-2005> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  4669
  4670 = 0006			VARINITSIZE	= *-DATAORIGIN
  4671 = 01EF			VARDATASIZE	= 495
  4672
  4673 = 21EF			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4674
  4675 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4675 				DATA: $2000..$21EF
  4676
  4677 02E0-02E1> BC 8B			run START
  4678
  4679 				; ------------------------------------------------------------
  4680
  4681 				.macro	STATICDATA
  4682 				.by  $00 $00 $04 $4C $4F $4F $50 $00  $04 $20 $20 $20 $20 $00 $02 $45  $3A $00 $09 $20 $50 $6C $61 $79
  4683 				.by  $69 $6E $67 $20 $00 $09 $20 $4E  $6F $20 $73 $6F $6E $67 $20 $00  $09 $20 $20 $50 $61 $75 $73 $65
  4684 				.by  $20 $20 $00 $09 $20 $53 $74 $6F  $70 $70 $65 $64 $20 $00 $07 $4C  $6F $61 $64 $69 $6E $67 $00 $10
  4685 				.by  $05 $12 $12 $12 $12 $12 $54 $49  $4D $45 $12 $12 $12 $12 $12 $17  $00 $05 $4D $65 $6D $3A $20 $00
  4686 				.by  $02 $4B $42 $00 $14 $20 $55 $6E  $73 $75 $70 $70 $6F $72 $74 $65  $64 $20 $66 $6F $72 $6D $61 $74
  4687 				.by  $20 $00 $14 $20 $4E $6F $74 $20  $65 $6E $6F $75 $67 $68 $74 $20  $6D $65 $6D $6F $72 $79 $20 $00
  4688 				.by  $0D $20 $49 $2F $4F $20 $45 $72  $72 $6F $72 $20 $23 $20 $00 $00  $00 $0A $00 $0A $0A $0A $00 $00
  4689 				.by  $00 $F0 $7E $7F $09 $01 $F7
  4690 				.endm
  4691
  4692 					end
