; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'selftest.mti' TRACK_DATA_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'selftest.rmd' MIDI_DATA_ADDR 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_00CD

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000002  -------------------

	ldy #0
	mva (:edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	FILEPOS						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000011  -------------------

	txa:pha

	mwa f :bp2

	ldy #s@file.chanel
	lda (:bp2),y
	tax
	lda #38
	sta iccmd,x

	m@call	ciov

	sty IOResult

	mva icax3,x :eax
	mva icax4,x :eax+1
	mva icax5,x :eax+2

	mva #$00 :eax+3
	sta :ecx+2
	sta :ecx+3

	ldy #s@file.record
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1

	jsr idivEAX_ECX.main

	mva :eax Result
	mva :eax+1 Result+1
	mva :eax+2 Result+2
	mva :eax+3 Result+3

	pla:tax

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000D

@VarData	= F
@VarDataSize	= 2

	rts						; ret
.endl

.local	SEEK						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000012  -------------------

	txa:pha

	mwa f :bp2

	ldy #s@file.chanel
	lda (:bp2),y
	tax
	lda #37
	sta iccmd,x

	ldy #s@file.record
	lda (:bp2),y
	sta :eax
	iny
	lda (:bp2),y
	sta :eax+1
	lda #$00
	sta :eax+2
	sta :eax+3

	mva a :ecx
	mva a+1 :ecx+1
	mva a+2 :ecx+2
	mva a+3 :ecx+3

	jsr imulECX

	mva :eax icax3,x
	mva :eax+1 icax4,x
	mva :eax+2 icax5,x

	m@call	ciov

	sty IOResult

	pla:tax

; ------------------------------------------------------------

F	= DATAORIGIN+$0011
A	= DATAORIGIN+$0013

@VarData	= F
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EOF						; FUNCTION

; optimize OK (SYSTEM), line = 1163

	lda F
	sta FILEPOS.F
	lda F+1
	sta FILEPOS.F+1
	jsr FILEPOS
	lda FILEPOS.RESULT
	sta I
	lda FILEPOS.RESULT+1
	sta I+1
	lda FILEPOS.RESULT+2
	sta I+2
	lda FILEPOS.RESULT+3
	sta I+3
; BlockRead

; optimize OK (SYSTEM), line = 1165

	mwy F :bp2
	ldy #s@file.buffer
	lda BF
	sta (:bp2),y
	iny
	lda BF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (SYSTEM), line = 1167

	lda F
	sta SEEK.F
	lda F+1
	sta SEEK.F+1
	lda I
	sta SEEK.A
	lda I+1
	sta SEEK.A+1
	lda I+2
	sta SEEK.A+2
	lda I+3
	sta SEEK.A+3
	jsr SEEK

; -------------------  ASM Block 00000013  -------------------

	mwa f :bp2

	ldy #s@file.status
	lda (:bp2),y
	and #e@file.eof
	sta Result

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$0017
RESULT	= DATAORIGIN+$0019
I	= DATAORIGIN+$001A
adr.BF	= [DATAORIGIN+$001E] .array [256]
.var BF	= adr.BF .word

@VarData	= F
@VarDataSize	= 262

	rts						; ret
.endl

.local	FILLCHAR_0129					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000021  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	MOVE_012A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000028  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	PARAMCOUNT					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000044  -------------------

	@cmdline #255
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$011E
	rts						; ret
.endl

.local	PARAMSTR					; FUNCTION | ASSEMBLER
	sta I

; -------------------  ASM Block 00000045  -------------------

	@cmdline i

;	@move #@buf Result #33
	ldy #256-33
	mva:rne @buf+33-256,y adr.Result+33-256,y+

@exit

; ------------------------------------------------------------

I	= DATAORIGIN+$011F
adr.RESULT	= [DATAORIGIN+$0120] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= I
@VarDataSize	= 34

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	MC6850						; UNIT

.local	MC6850_RESET					; PROCEDURE

; optimize OK (MC6850), line = 70

	lda #$03
	sta MC6850_CNTRREG
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MC6850_INIT					; PROCEDURE
	sta SETUP

; optimize OK (MC6850), line = 75

	sta MC6850_CNTRREG

; ------------------------------------------------------------

SETUP	= DATAORIGIN+$0141

@VarData	= SETUP
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MC6850_SEND					; PROCEDURE
	sta DATA

; --- RepeatUntilProlog
l_016D

; optimize OK (MC6850), line = 87

	lda MC6850_CNTRREG
	and #$02
	jeq l_016D

; optimize OK (MC6850), line = 88

	lda DATA
	sta MC6850_BUFFER

; ------------------------------------------------------------

DATA	= DATAORIGIN+$0142

@VarData	= DATA
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

MC6850_BASE	= $D500
ADDR_MC6850_CNTRREG	= $D500
ADDR_MC6850_BUFFER	= $D501
ADDR_MC6850_STATREG	= $D500
CR0	= $01
CR1	= $02
CR2	= $04
CR3	= $08
CR4	= $10
CR5	= $20
CR6	= $40
CR7	= $80
CD_1	= $00
CD_16	= $01
CD_64	= $02
MASTERRESET	= $03
WS_7BITS	= $00
WS_8BITS	= $10
WS_2BITSTOP	= $00
WS_1BITSTOP	= $08
WS_EVENPARITY	= $00
WS_ODDPARITY	= $04
TC_RTSLOW_NOTIRQ	= $00
TC_RTSLOW_TIRQ	= $20
TC_RTSHIGH_NOTIRQ	= $40
TC_BREAKLEVEL	= $60
NOIRQ_RECEIVE	= $00
IRQ_RECEIVE	= $80
RDRF	= $01
TDRE	= $02
DCD	= $04
CTS	= $08
FE	= $10
OVRN	= $20
PE	= $40
IRQ	= $80
MC6850_CNTRREG	= $D500
MC6850_BUFFER	= $D501
MC6850_STATREG	= $D500
MC_BYTE	= $FF

.endl							; UNIT MC6850

; ------------------------------------------------------------

.local	DOS						; UNIT

; ------------------------------------------------------------

PALNTSC	= $D014

.endl							; UNIT DOS

; ------------------------------------------------------------

.local	STRUTILS					; UNIT

; ------------------------------------------------------------

.endl							; UNIT STRUTILS

; ------------------------------------------------------------

.local	SYSUTILS					; UNIT

; ------------------------------------------------------------

FAREADONLY	= $01
FAHIDDEN	= $02
FASYSFILE	= $04
FAVOLUMEID	= $08
FADIRECTORY	= $10
FAARCHIVE	= $20
FAANYFILE	= $3F

.endl							; UNIT SYSUTILS

; ------------------------------------------------------------

.local	MIDI_FIFO					; UNIT

.local	FIFO_RESET					; PROCEDURE

; optimize OK (MIDI_FIFO), line = 27

	lda #$00
	sta FIFO_HEAD

; optimize OK (MIDI_FIFO), line = 28

	sta FIFO_TAIL

; optimize OK (MIDI_FIFO), line = 29

	sta SYSTEM.FILLCHAR_0129.A
	lda #$06
	sta SYSTEM.FILLCHAR_0129.A+1
	lda #$00
	sta SYSTEM.FILLCHAR_0129.COUNT
	lda #$01
	sta SYSTEM.FILLCHAR_0129.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_0129.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_0129
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_READBYTE					; PROCEDURE

; optimize OK (MIDI_FIFO), line = 34

	ldy FIFO_TAIL
	cpy FIFO_HEAD
	jeq l_01DF

; optimize OK (MIDI_FIFO), line = 36

	lda adr.FIFO_BUF,y
	sta FIFO_BYTE

; optimize FAIL (0, MIDI_FIFO), line = 37

	inc FIFO_TAIL
l_01DF
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000070  -------------------

  lda FIFO_Head
  clc
  adc #1
  cmp FIFO_Tail
  bne storeInFIFO
  rts

storeInFIFO:
  ldy FIFO_Head
  lda FIFO_Byte
  sta FIFO_ADDR,y
  iny
  sty FIFO_Head
exitWrite:

	.ENDM
@exit
.endl

.local	FIFO_SEND					; PROCEDURE

; optimize OK (MIDI_FIFO), line = 65

	lda DATA
	sta P
	lda DATA+1
	sta P+1

; --- WhileProlog
	jmp l_01FB
l_01FC

; optimize OK (MIDI_FIFO), line = 68

	mwy P :bp2
	ldy #$00
	lda (:bp2),y
	sta FIFO_BYTE
	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl

; optimize FAIL (0, MIDI_FIFO), line = 69

	inc P
	sne
	inc P+1
	dec LEN
l_01FB

; optimize OK (MIDI_FIFO), line = 66

	lda LEN
	jne l_01FC

; ------------------------------------------------------------

DATA	= DATAORIGIN+$0143
LEN	= DATAORIGIN+$0145
P	= DATAORIGIN+$0146

@VarData	= DATA
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_FLUSH					; PROCEDURE

; --- WhileProlog
	jmp l_021D
l_021E

; optimize OK (MIDI_FIFO), line = 77

	ldy FIFO_TAIL
	lda adr.FIFO_BUF,y
	sta FIFO_BYTE

; optimize OK (MIDI_FIFO), line = 81

	jsr MC6850.MC6850_SEND

; optimize FAIL (0, MIDI_FIFO), line = 82

	inc FIFO_TAIL
l_021D

; optimize OK (MIDI_FIFO), line = 75

	lda FIFO_TAIL
	cmp FIFO_HEAD
	jne l_021E
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

FIFO_HEAD	= $FD
FIFO_TAIL	= $FE
FIFO_BYTE	= $FF
FIFO_ADDR	= $0600
adr.FIFO_BUF	= $0600
.var FIFO_BUF	= adr.FIFO_BUF .word

.endl							; UNIT MIDI_FIFO

; ------------------------------------------------------------

.local	MIDFILES					; UNIT

.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000071  -------------------

    lda _timerStatus
    bmi skip

    and #f_ratio
    cmp _subCnt
    bne incSubCounter

    // lda _timerStatus
    // ora #f_tick
    // sta _timerStatus

    lda #1
    sta _subCnt

    inc _totalTicks
    bne skip
    inc _totalTicks+1
    bne skip
    inc _totalTicks+2
    bne skip
    inc _totalTicks+3
    bne skip

incSubCounter:
    inc _subCnt

skip:

  pla

	rti						; ret
.endl

.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000072  -------------------

  lda _adr
  beq check1Bound
  rts

check1Bound
  lda _adr+1
  cmp #$9c
  bne check2Bound

  lda #$a0
  sta _adr+1
  rts

check2Bound:
  cmp #$d0
  bne check3Bound

  lda #$d8
  sta _adr+1
  rts

check3Bound:
  cmp #$e0
  bne check4Bound

  lda #$e4
  sta _adr+1
  rts

check4bound
  cmp #$ff
  beq outOfMem
  rts

outOfMem:
  lda #ERR_NOT_ENOUGHT_MEMORY
  sta SYSTEM.IOResult
  // jmp @halt

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WORDBI						; FUNCTION

; optimize OK (bigindian.inc), line = 6

	lda <RESULT
	sta RESULTPTR
	lda >RESULT
	sta RESULTPTR+1

; optimize OK (bigindian.inc), line = 7

	mwy BI :bp2
	ldy #$01
	lda (:bp2),y
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y
	inc RESULTPTR
	sne
	inc RESULTPTR+1

; optimize OK (bigindian.inc), line = 8

	ldy #$00
	lda (:bp2),y
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y
@exit

; ------------------------------------------------------------

BI	= DATAORIGIN+$015B
RESULT	= DATAORIGIN+$015D
RESULTPTR	= DATAORIGIN+$015F

@VarData	= BI
@VarDataSize	= 4

	rts						; ret
.endl

.local	LONGBI						; FUNCTION

; optimize OK (bigindian.inc), line = 17

	lda <RESULT
	sta RESULTPTR
	lda >RESULT
	sta RESULTPTR+1

; optimize OK (bigindian.inc), line = 18

	lda #$03
	sta I

l_026A
; --- ForToDoCondition

; optimize OK (bigindian.inc), line = 20

	mwy BI :bp2
	ldy I
	lda (:bp2),y
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y

; optimize FAIL (0, bigindian.inc), line = 21

	inc RESULTPTR
	sne
	inc RESULTPTR+1

; --- ForToDoEpilog
	dec I
	jpl l_026A
l_0278
@exit

; ------------------------------------------------------------

BI	= DATAORIGIN+$0161
RESULT	= DATAORIGIN+$0163
RESULTPTR	= DATAORIGIN+$0167
I	= DATAORIGIN+$0169

@VarData	= BI
@VarDataSize	= 5

	rts						; ret
.endl

.local	LOADMID						; FUNCTION

	jmp l_028E

.local	READWORDBI					; FUNCTION

; BlockRead

; optimize OK (MIDFILES), line = 110

	mwy F :bp2
	ldy #s@file.buffer
	lda BI
	sta (:bp2),y
	iny
	lda BI+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$02
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (MIDFILES), line = 111

	lda BI
	sta WORDBI.BI
	lda BI+1
	sta WORDBI.BI+1
	jsr WORDBI
	lda WORDBI.RESULT
	sta RESULT
	lda WORDBI.RESULT+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$018C
	rts						; ret
.endl

.local	READLONGBI					; FUNCTION

; BlockRead

; optimize OK (MIDFILES), line = 116

	mwy F :bp2
	ldy #s@file.buffer
	lda BI
	sta (:bp2),y
	iny
	lda BI+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (MIDFILES), line = 117

	lda BI
	sta LONGBI.BI
	lda BI+1
	sta LONGBI.BI+1
	jsr LONGBI
	lda LONGBI.RESULT
	sta RESULT
	lda LONGBI.RESULT+1
	sta RESULT+1
	lda LONGBI.RESULT+2
	sta RESULT+2
	lda LONGBI.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$018E
	rts						; ret
.endl
l_028E

; optimize OK (MIDFILES), line = 121

	lda MIDTRACKS
	sta NTRKREC
	lda MIDTRACKS+1
	sta NTRKREC+1

; optimize FAIL ('@print', MIDFILES), line = 122

	@printSTRING #CODEORIGIN+$000D
	@printSTRING FN
	@printEOL
; AssignFile

; optimize OK (MIDFILES), line = 124

	mwy F :bp2
	ldy #s@file.pfname
	lda FN
	sta (:bp2),y
	iny
	lda FN+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Reset

; optimize OK (MIDFILES), line = 125

	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@openfile F, MAIN.SYSTEM.FileMode
	pla:tax

; optimize OK (MIDFILES), line = 126

	lda SYSTEM.IORESULT
	jpl l_02E1

; optimize OK (MIDFILES), line = 128

	sta RESULT
; CloseFile

	txa:pha
	clc
	@closefile F
	pla:tax

	jmp @exit					; exit
l_02E1

; optimize OK (MIDFILES), line = 133

	lda #$00
	sta TRACKCOUNT
	sta TRACKCOUNT+1

; optimize OK (MIDFILES), line = 134

	lda #$FF
	sta NTRACKS
	lda #$00
	sta NTRACKS+1

; optimize OK (MIDFILES), line = 135

	lda MIDDATA
	sta _ADR
	lda MIDDATA+1
	sta _ADR+1

; --- WhileProlog
	jmp l_02F9
l_02FA
; BlockRead

; optimize OK (MIDFILES), line = 139

	mwy F :bp2
	ldy #s@file.buffer
	lda <CHUNKTAG
	sta (:bp2),y
	iny
	lda >CHUNKTAG
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
	ldy #s@file.numread
	lda <V
	sta (:bp2),y
	iny
	lda >V
	sta (:bp2),y

	txa:pha
	clc
	@readfile F, #135
	pla:tax

; optimize OK (MIDFILES), line = 140

	lda V+1
	bne @+
	lda V
	cmp #$04
@
	jeq l_0317
	jmp b_02FA					; break
l_0317

; optimize FAIL ('READLONGBI', MIDFILES), line = 141

	jsr READLONGBI
	lda READLONGBI.RESULT
	sta LEN
	lda READLONGBI.RESULT+1
	sta LEN+1
	lda READLONGBI.RESULT+2
	sta LEN+2
	lda READLONGBI.RESULT+3
	sta LEN+3

; optimize OK (MIDFILES), line = 142

	lda CHUNKTAG+3
	eor #$64
	jne l_032E
	lda CHUNKTAG+2
	eor #$68
	jne l_032E
	lda CHUNKTAG+1
	eor #$54
	jne l_032E
	lda CHUNKTAG
	eor #$4D
	jne l_032E

; optimize FAIL ('READWORDBI', MIDFILES), line = 144

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta FORMAT
	lda READWORDBI.RESULT+1
	sta FORMAT+1

; optimize OK (MIDFILES), line = 145

	ora FORMAT
	jeq l_034F
	lda FORMAT+1
	bne @+
	lda FORMAT
	cmp #$01
@
	jeq l_034F
	lda #$64
	sta RESULT
	jmp @exit					; exit
l_034F

; optimize FAIL ('READWORDBI', MIDFILES), line = 146

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta NTRACKS
	lda READWORDBI.RESULT+1
	sta NTRACKS+1

; optimize FAIL ('READWORDBI', MIDFILES), line = 151

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta V
	lda READWORDBI.RESULT+1
	sta V+1

; optimize OK (MIDFILES), line = 152

	jpl l_0373
	jmp l_037D
l_0373

; optimize OK (MIDFILES), line = 171

	lda V
	sta TICKDIV
	lda V+1
	and #$7F
	sta TICKDIV+1
l_037D
	jmp l_038F
l_032E

; optimize OK (MIDFILES), line = 177

	lda CHUNKTAG+3
	eor #$6B
	jne l_039F
	lda CHUNKTAG+2
	eor #$72
	jne l_039F
	lda CHUNKTAG+1
	eor #$54
	jne l_039F
	lda CHUNKTAG
	eor #$4D
	jne l_039F

; optimize FAIL (0, MIDFILES), line = 179

	inc TRACKCOUNT
	sne
	inc TRACKCOUNT+1

; optimize FAIL ('@print', MIDFILES), line = 180

	@printSTRING #CODEORIGIN+$0019
	lda TRACKCOUNT
	ldy TRACKCOUNT+1
	jsr @printWORD._ay
	@print #$2F
	lda NTRACKS
	ldy NTRACKS+1
	jsr @printWORD._ay
	@printSTRING #CODEORIGIN+$0022

; optimize OK (MIDFILES), line = 182

	mwy NTRKREC :bp2
	ldy #$00
	lda _ADR
	sta (:bp2),y
	iny
	lda _ADR+1
	sta (:bp2),y

; optimize OK (MIDFILES), line = 183

	iny
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (MIDFILES), line = 184

	iny
	sta (:bp2),y

; --- WhileProlog
	jmp l_03C7
l_03C8

; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 189

	jsr MEMBOUNDCHECK
	lda SYSTEM.IORESULT
	cmp #$01
	jeq l_03DB
	lda #$65
	sta RESULT
	jmp @exit					; exit
l_03DB

; optimize OK (MIDFILES), line = 191

	.LOCAL
	lda LEN+3
	sub #$00
	bne L4
	lda LEN+2
	cmp #$00
	bne L1
	lda LEN+1
	cmp #$00
	bne L1
	lda LEN
	cmp #$80
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_03F2
	jeq l_03F2
	lda #$80
	sta LOADSIZE
	jmp l_0400
l_03F2
	lda LEN
	sta LOADSIZE
l_0400

; optimize OK (MIDFILES), line = 192

	lda _ADR
	add LOADSIZE
	sta ENDADR
	lda _ADR+1
	adc #$00
	sta ENDADR+1

; optimize OK (MIDFILES), line = 194

	cmp #$9C
	jcc l_042B
	bne @+
	lda ENDADR
	jcc l_042B
@
	lda ENDADR+1
	cmp #$A0
	bne @+
	lda ENDADR
	cmp #$00
@
	jcs l_042B

; optimize OK (MIDFILES), line = 195

	lda #$00
	sub _ADR
	sta LOADSIZE
	jmp l_043E
l_042B

; optimize OK (MIDFILES), line = 196

	lda ENDADR+1
	cmp #$D0
	jcc l_045A
	bne @+
	lda ENDADR
	jcc l_045A
@
	lda ENDADR+1
	cmp #$D8
	bne @+
	lda ENDADR
	cmp #$00
@
	jcs l_045A

; optimize OK (MIDFILES), line = 197

	lda #$00
	sub _ADR
	sta LOADSIZE
	jmp l_046D
l_045A

; optimize OK (MIDFILES), line = 198

	lda ENDADR+1
	cmp #$E0
	jcc l_0489
	bne @+
	lda ENDADR
	jcc l_0489
@
	lda ENDADR+1
	cmp #$E4
	bne @+
	lda ENDADR
	cmp #$00
@
	jcs l_0489

; optimize OK (MIDFILES), line = 199

	lda #$00
	sub _ADR
	sta LOADSIZE
	jmp l_049C
l_0489

; optimize OK (MIDFILES), line = 200

	lda ENDADR+1
	cmp #$FF
	jcc l_04AD
	bne @+
	lda ENDADR
	jcc l_04AD
@

; optimize OK (MIDFILES), line = 201

	lda #$00
	sub _ADR
	sta LOADSIZE
l_04AD
l_049C
l_046D
l_043E

; optimize OK (MIDFILES), line = 202

	lda LOADSIZE
	jne l_04CB
	jmp c_03C8					; continue
l_04CB
; BlockRead

; optimize OK (MIDFILES), line = 204

	mwy F :bp2
	ldy #s@file.buffer
	lda RBUF
	sta (:bp2),y
	iny
	lda RBUF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda LOADSIZE
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
	ldy #s@file.numread
	lda <V
	sta (:bp2),y
	iny
	lda >V
	sta (:bp2),y

	txa:pha
	clc
	@readfile F, #135
	pla:tax

; optimize OK (MIDFILES), line = 205

	lda V+1
	bne @+
	lda V
	cmp LOADSIZE
@
	jeq l_04F0
	lda SYSTEM.IORESULT
	sta RESULT
	jmp @exit					; exit
l_04F0

; optimize OK (MIDFILES), line = 207

	lda #$00
	sta SYSTEM.MOVE_012A.SOURCE
	lda #$06
	sta SYSTEM.MOVE_012A.SOURCE+1
	lda _PTR
	sta SYSTEM.MOVE_012A.DEST
	lda _PTR+1
	sta SYSTEM.MOVE_012A.DEST+1
	lda LOADSIZE
	sta SYSTEM.MOVE_012A.COUNT
	lda #$00
	sta SYSTEM.MOVE_012A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_012A
	m@INLINE
	.endl

; optimize OK (MIDFILES), line = 208

	lda _ADR
	add V
	sta _ADR
	lda _ADR+1
	adc V+1
	sta _ADR+1

; optimize OK (MIDFILES), line = 209

	lda LEN
	sub V
	sta LEN
	lda LEN+1
	sbc V+1
	sta LEN+1
	lda LEN+2
	sbc #$00
	sta LEN+2
	lda LEN+3
	sbc #$00
	sta LEN+3
c_03C8
l_03C7

; optimize OK (MIDFILES), line = 186

	lda LEN+3
	bmi @+
	ora LEN+2
	ora LEN+1
	ora LEN
	jne l_03C8
@

; optimize OK (MIDFILES), line = 212

	lda NTRKREC
	add #$08
	sta NTRKREC
	scc
	inc NTRKREC+1
l_039F
l_038F

; optimize FAIL ('@print', MIDFILES), line = 214

	@print #$9C
l_02F9

; optimize FAIL (1, MIDFILES), line = 137

	inx
	ldy #1
	lda SYSTEM.IORESULT
	cmp #$01
	beq @+
	dey
@
	sty :STACKORIGIN,x
	lda F
	sta SYSTEM.EOF.F
	lda F+1
	sta SYSTEM.EOF.F+1
	jsr SYSTEM.EOF
	inx
	mva SYSTEM.EOF.RESULT :STACKORIGIN,x
	jsr notBOOLEAN
	jsr andAL_CL
	mva TRACKCOUNT :STACKORIGIN,x
	mva TRACKCOUNT+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva NTRACKS :STACKORIGIN,x
	mva NTRACKS+1 :STACKORIGIN+STACKWIDTH,x
	ldy #1
	jsr cmpEAX_ECX.AX_CX
	bcc @+
	dey
@
	sty :STACKORIGIN-1,x
	dex
	jsr andAL_CL
	dex
	dex
	lda :STACKORIGIN+1,x
	jne l_02FA
b_02FA
; CloseFile

	txa:pha
	clc
	@closefile F
	pla:tax

; optimize OK (MIDFILES), line = 217

	lda #$00
	sta RESULT
@exit

; ------------------------------------------------------------

FN	= DATAORIGIN+$016A
RESULT	= DATAORIGIN+$016C
.var F	= DATAORIGIN+$016D .word
TRACKCOUNT	= DATAORIGIN+$0179
CHUNKTAG	= DATAORIGIN+$017B
V	= DATAORIGIN+$017F
TOP	= DATAORIGIN+$0181
ENDADR	= DATAORIGIN+$0183
LEN	= DATAORIGIN+$0185
LOADSIZE	= DATAORIGIN+$0189
NTRKREC	= DATAORIGIN+$018A
NTRKREC.PTR	= DATAORIGIN+$0000
NTRKREC.TRACKTIME	= DATAORIGIN+$0002
NTRKREC.SKIPDELTA	= DATAORIGIN+$0006
NTRKREC._EVENT	= DATAORIGIN+$0007

@VarData	= FN
@VarDataSize	= 33

	rts						; ret
.endl

.local	PROCESSTRACK					; FUNCTION

	jmp l_053A

.local	READB						; PROCEDURE | INLINE

	.MACRO m@INLINE

; optimize OK (MIDFILES), line = 227

	ldy #$00
	lda (_PTR),y
	sta _TMP

; optimize FAIL (0, MIDFILES), line = 228

	inc _ADR
	sne
	inc _ADR+1

; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 229

	jsr MEMBOUNDCHECK
	.ENDM
@exit
.endl

.local	READB2FB					; PROCEDURE | INLINE

	.MACRO m@INLINE

; optimize OK (MIDFILES), line = 235

	ldy #$00
	lda (_PTR),y
	sta MIDI_FIFO.FIFO_BYTE

; optimize FAIL (0, MIDFILES), line = 239

	inc _ADR
	sne
	inc _ADR+1

; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 240

	jsr MEMBOUNDCHECK
	.ENDM
@exit
.endl

.local	READVARL					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000073  -------------------

A equ _delta;
B equ _delta+1;
C equ _delta+2;
D equ _delta+3;

  .MACRO m@read2A
    lda (_PTR),y
    sta A
    inc _ADR
    sne
    inc _ADR+1
    jsr MEMBOUNDCHECK
    lda A
  .ENDM

  ldy #$00
  sty A
  sty B
  sty C
  sty D

// read block

// read 1st byte
  m@read2A

  bpl endRead

// move A to B and read 2nd byte
	and #$7F
	sta B

// read 2nd byte
  m@read2A

  bpl endRead

// mova B to C, A to B and read 3rd byte
	lda B
	sta C
	lda A
	and #$7F
	sta B

// read 3rd
  m@read2A

  bpl endRead

// move C to D, B to C, A to B and read 4th byte
	lda C
	sta D
	lda B
	sta C
	lda A
	and #$7F
	sta B

// read 4th
  m@read2A

// end read block
endRead:

// decode block
// 'A' stays as it is

// 'B' if geather than zero, lets decode
  lda B
  beq noDecodeB

// 76543210 76543210
// 0bbbbbbb 0aaaaaaa
// 00bbbbbb Baaaaaaa
  lsr B
  bcc noDecodeB

  lda A
  ora #$80
  sta A

noDecodeB:
// 'C' if geather than zero, lets decode
  lda C
  beq noDecodeC

// 76543210 76543210
// 0ccccccc 0bbbbbbb
// 00cccccc 0Cbbbbbb
  lsr C
  bcc noC1

  lda B
  ora #$40
  sta B

  lda C // reload C

noC1:
// 76543210 76543210
// 0ccccccc 0bbbbbbb
// 000ccccc Ccbbbbbb
  lsr C
  bcc noDecodeC

  lda B
  ora #$80
  sta B

noDecodeC:
// 'D' if geather than zero, lets decode
  lda D
  beq noDecodeD

// 76543210 76543210
// 0ddddddd 0ccccccc
// 00dddddd 00Dccccc
  lsr D
  bcc noD1

  lda C
  ora #$20
  sta C

  lda D // reloaad D
noD1:
// 76543210 76543210
// 0ddddddd 0ccccccc
// 000ddddd 0Ddccccc
  lsr D
  bcc noD2

  lda C
  ora #$40
  sta C

  lda D // reaload D
noD2:
// 76543210 76543210
// 0ddddddd 0ccccccc
// 0000dddd Dddccccc
  lsr D
  bcc noDecodeD

  lda C
  ora #$80
  sta C

noDecodeD:


@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READ24						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000074  -------------------

  .local +MAIN.MIDFILES.PROCESSTRACK.READB
  m@INLINE
  .endl
  lda _TMP
  sta _delta+2

  .local +MAIN.MIDFILES.PROCESSTRACK.READB
  m@INLINE
  .endl
  lda _TMP
  sta _delta+1

  .local +MAIN.MIDFILES.PROCESSTRACK.READB
  m@INLINE
  .endl
  lda _TMP
  sta _delta+0

  lda #0
  sta _delta+3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_053A

; optimize OK (MIDFILES), line = 247

	lda #$00
	sta _DELTA
	sta _DELTA+1
	sta _DELTA+2
	sta _DELTA+3

; --- RepeatUntilProlog
l_055F

; optimize OK (MIDFILES), line = 249

	lda _SKIPDELTA
	jne l_056E

; optimize FAIL ('READVARL', MIDFILES), line = 251

	jsr READVARL

; optimize OK (MIDFILES), line = 252

	lda _DELTA+3
	jmi l_0580
	ora _DELTA+2
	ora _DELTA+1
	ora _DELTA
	jeq l_0580
	jmp b_055F					; break
l_0580
	jmp l_058C
l_056E

; optimize OK (MIDFILES), line = 255

	lda #$00
	sta _SKIPDELTA
l_058C

; optimize OK (MIDFILES), line = 257

	ldy #$00
	lda (_PTR),y
	jpl l_05A6

; optimize FAIL ('m@INLINE', MIDFILES), line = 259

	.local READB
	m@INLINE
	.endl
	lda _TMP
	sta _EVENT
l_05A6

; optimize OK (MIDFILES), line = 262

	lda _EVENT
	sta @CASETMP_0005
	clc						; clear carry for add
	adc #$FF-$BF					; make m = $FF
	adc #$BF-$80+1					; carry set if in range n to m
	bcs @+
	lda @CASETMP_0005
	clc						; clear carry for add
	adc #$FF-$EF					; make m = $FF
	adc #$EF-$E0+1					; carry set if in range n to m
	jcc l_05BD
@

; optimize OK (MIDFILES), line = 268

	lda _EVENT
	sta MIDI_FIFO.FIFO_BYTE
	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl

; optimize FAIL ('m@INLINE', MIDFILES), line = 269

	.local READB2FB
	m@INLINE
	.endl
	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl

; optimize FAIL ('m@INLINE', MIDFILES), line = 270

	.local READB2FB
	m@INLINE
	.endl
	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl

	jmp a_0005
l_05BD
	lda @CASETMP_0005
	clc						; clear carry for add
	adc #$FF-$DF					; make m = $FF
	adc #$DF-$C0+1					; carry set if in range n to m
	jcc l_05D1
@

; optimize OK (MIDFILES), line = 280

	lda _EVENT
	sta MIDI_FIFO.FIFO_BYTE
	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl

; optimize FAIL ('m@INLINE', MIDFILES), line = 281

	.local READB2FB
	m@INLINE
	.endl
	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl

	jmp a_0005
l_05D1
	lda @CASETMP_0005
	clc						; clear carry for add
	adc #$FF-$F7					; make m = $FF
	adc #$F7-$F0+1					; carry set if in range n to m
	jcc l_05E3
@

; optimize FAIL ('READVARL', MIDFILES), line = 289

	jsr READVARL

; optimize OK (MIDFILES), line = 291

	lda _EVENT
	sta MIDI_FIFO.FIFO_BYTE
	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl

; --- WhileProlog
	jmp l_05ED
l_05EE

; optimize FAIL ('m@INLINE', MIDFILES), line = 297

	.local READB2FB
	m@INLINE
	.endl

; optimize FAIL ('m@INLINE', MIDFILES), line = 299

	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl

; optimize FAIL (0, MIDFILES), line = 303

	dec _TMP
l_05ED

; optimize OK (MIDFILES), line = 295

	lda _TMP
	jne l_05EE

; optimize OK (MIDFILES), line = 306

	lda MIDI_FIFO.FIFO_BYTE
	cmp #$F7
	jne l_0612
	lda #$00
	sta FLAGSYSEX
	jmp l_0620
l_0612
	lda #$01
	sta FLAGSYSEX
l_0620

	jmp a_0005
l_05E3
	lda @CASETMP_0005
	cmp #$FF
	jne l_062D
@

; optimize FAIL ('m@INLINE', MIDFILES), line = 315

	.local READB2FB
	m@INLINE
	.endl

; optimize FAIL ('READVARL', MIDFILES), line = 316

	jsr READVARL

; optimize OK (MIDFILES), line = 318

	lda MIDI_FIFO.FIFO_BYTE
	sta @CASETMP_0006
	cmp #$2F
	jne l_063A
@

; optimize OK (MIDFILES), line = 323

	lda #$FF
	sta _DELTA
	sta _DELTA+1
	sta _DELTA+2
	sta _DELTA+3

	jmp a_0006
l_063A
	cmp #$51
	jne l_0647
@

; optimize FAIL ('READ24', MIDFILES), line = 326

	jsr READ24

; optimize OK (MIDFILES), line = 327

	lda _DELTA+3
	cmp MS_PER_QNOTE+3
	bne @+
	lda _DELTA+2
	cmp MS_PER_QNOTE+2
	bne @+
	lda _DELTA+1
	cmp MS_PER_QNOTE+1
	bne @+
	lda _DELTA
	cmp MS_PER_QNOTE
	jeq l_0658
@

; optimize OK (MIDFILES), line = 329

	lda _DELTA
	sta MS_PER_QNOTE
	lda _DELTA+1
	sta MS_PER_QNOTE+1
	lda _DELTA+2
	sta MS_PER_QNOTE+2
	lda _DELTA+3
	sta MS_PER_QNOTE+3

; optimize FAIL ('SETTEMPO', MIDFILES), line = 330

	jsr SETTEMPO
l_0658

	jmp a_0006
l_0647

; --- WhileProlog
	jmp l_0666
l_0667

; optimize FAIL (0, MIDFILES), line = 348

	dec _TMP

; optimize FAIL (0, MIDFILES), line = 349

	inc _ADR
	sne
	inc _ADR+1

; optimize FAIL ('MEMBOUNDCHECK', MIDFILES), line = 350

	jsr MEMBOUNDCHECK
l_0666

; optimize OK (MIDFILES), line = 346

	lda _TMP
	jne l_0667
a_0006

l_062D
a_0005

; optimize OK (MIDFILES), line = 356

	lda _DELTA+3
	eor #$FF
	jne l_055F
	lda _DELTA+2
	eor #$FF
	jne l_055F
	lda _DELTA+1
	eor #$FF
	jne l_055F
	lda _DELTA
	eor #$FF
	jne l_055F
b_055F

; optimize OK (MIDFILES), line = 357

	lda #$01
	sta _SKIPDELTA

; optimize OK (MIDFILES), line = 358

	lda _DELTA
	sta RESULT
	lda _DELTA+1
	sta RESULT+1
	lda _DELTA+2
	sta RESULT+2
	lda _DELTA+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0192
FLAGSYSEX	= DATAORIGIN+$0196
MSGLEN	= DATAORIGIN+$0197
@CASETMP_0005	= DATAORIGIN+$0198
@CASETMP_0006	= DATAORIGIN+$0199

@VarData	= FLAGSYSEX
@VarDataSize	= 4

	rts						; ret
.endl

.local	SETTEMPO					; PROCEDURE

; optimize FAIL ('divmulINT.DIV', MIDFILES), line = 370

	inx
	mva MS_PER_QNOTE :STACKORIGIN,x
	mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
	mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
	mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva TICKDIV :STACKORIGIN,x
	mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr divmulINT.DIV
	dex
	lda :STACKORIGIN,x
	sta _FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta _FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta _FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta _FREQ+3

; optimize FAIL ('@I2F_m', MIDFILES), line = 371

	mva _FREQ :STACKORIGIN,x
	mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$24 :STACKORIGIN+STACKWIDTH,x
	mva #$74 :STACKORIGIN+STACKWIDTH*2,x
	mva #$49 :STACKORIGIN+STACKWIDTH*3,x
	jsr @I2F_m
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta FREQ+3

; optimize FAIL ('@FDIV', MIDFILES), line = 372

	mva #$00 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$80 :STACKORIGIN+STACKWIDTH*2,x
	mva #$3F :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta FREQ+3

; optimize FAIL ('@FDIV', MIDFILES), line = 375

	mva #$F5 :STACKORIGIN,x
	mva #$FA :STACKORIGIN+STACKWIDTH,x
	mva #$7A :STACKORIGIN+STACKWIDTH*2,x
	mva #$43 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta RATIO
	lda :STACKORIGIN+STACKWIDTH,x
	sta RATIO+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta RATIO+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta RATIO+3

; optimize FAIL ('@F2I', MIDFILES), line = 376

	mva #$01 :STACKORIGIN,x
	inx
	mva RATIO :STACKORIGIN,x
	mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
	mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
	mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @F2I
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
	lda :STACKORIGIN-1,x
	add :STACKORIGIN,x
	sta _RATIO
	dex
	dex

; optimize OK (MIDFILES), line = 377

	lda _RATIO
	cmp #$10
	jcc l_06E3
	lda #$00
	sta RATIO
	sta RATIO+1
	lda #$70
	sta RATIO+2
	lda #$41
	sta RATIO+3
l_06E3

; optimize OK (MIDFILES), line = 380

	lda _TIMERSTATUS
	and #$C0
	ora _RATIO
	sta _TIMERSTATUS

; optimize FAIL ('@I2F', MIDFILES), line = 383

	inx
	mva #$00 :STACKORIGIN,x
	mva #$FA :STACKORIGIN+STACKWIDTH,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva _RATIO :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr @I2F
	jsr @FMUL
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @I2F_m
	jsr @FDIV
	dex
	jsr @FROUND
	jsr @F2I
	lda :STACKORIGIN,x
	sta FDIV
	dex

; optimize OK (MIDFILES), line = 389

	sei
	mva <INT_TIMER VTIMR1
	mva >INT_TIMER VTIMR1+1
	lda #$00
	ldy #$03
	sta AUDCTL
	sta AUDC1
	sty SKCTL
	sta AUDCTL
	mva FDIV AUDF1
	lda irqens
	ora #$01
	sta irqens
	sta irqen
	sta stimer
	cli

; ------------------------------------------------------------

FREQ	= DATAORIGIN+$019A
_FREQ	= DATAORIGIN+$019E
FDIV	= DATAORIGIN+$01A2
RATIO	= DATAORIGIN+$01A3
_RATIO	= DATAORIGIN+$01A7

@VarData	= FREQ
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize OK (MIDFILES), line = 393

	lda #$00
	sta OLDTIMERVEC
	sta OLDTIMERVEC+1

; optimize OK (MIDFILES), line = 394

	lda #$80
	sta TICKDIV
	lda #$01
	sta TICKDIV+1

; optimize OK (MIDFILES), line = 395

	lda #$20
	sta MS_PER_QNOTE
	lda #$A1
	sta MS_PER_QNOTE+1
	lda #$07
	sta MS_PER_QNOTE+2
	lda #$00
	sta MS_PER_QNOTE+3

; optimize OK (MIDFILES), line = 402

	sta _TIMERSTATUS

	lda VTIMR1
	sta OLDTIMERVEC
	lda VTIMR1+1
	sta OLDTIMERVEC+1

	rts

; ------------------------------------------------------------

F_COUNTER	= $80
F_TICK	= $40
F_FLAGS	= $C0
F_RATIO	= $0F
_TRKREGS	= $E0
MID_0	= $00
MID_1	= $01
ERR_UNSUPPORTED_FORMAT	= $64
ERR_NOT_ENOUGHT_MEMORY	= $65
MIDDATA	= DATAORIGIN+$0148
adr.MIDTRACKS	= [DATAORIGIN+$014A] .array [1]
.var MIDTRACKS	= adr.MIDTRACKS .word
FORMAT	= DATAORIGIN+$014B
NTRACKS	= DATAORIGIN+$014D
TICKDIV	= DATAORIGIN+$014F
MS_PER_QNOTE	= DATAORIGIN+$0151
OLDTIMERVEC	= DATAORIGIN+$0155
_TOTALTICKS	= $F0
_SUBCNT	= $F4
_TIMERSTATUS	= $F5
_DELTA	= $F6
_TMP	= $F6
_PTR	= $E0
_ADR	= $E0
_TRACKTIME	= $E2
_SKIPDELTA	= $E6
_EVENT	= $E7
TAG_MTHD	= $6468544D
TAG_MTRK	= $6B72544D
adr.BI	= [DATAORIGIN+$0157] .array [4]
.var BI	= adr.BI .word
adr.RBUF	= $0600
.var RBUF	= adr.RBUF .word

.endl							; UNIT MIDFILES

.local	RESET_MIDI					; PROCEDURE

; optimize OK (MIDICar Player.pas), line = 30

	lda GM_RESET
	sta MIDI_FIFO.FIFO_SEND.DATA
	lda GM_RESET+1
	sta MIDI_FIFO.FIFO_SEND.DATA+1
	lda #$06
	sta MIDI_FIFO.FIFO_SEND.LEN
	jsr MIDI_FIFO.FIFO_SEND
	jsr MIDI_FIFO.FIFO_FLUSH
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_00CD

; optimize FAIL ('MIDI_FIFO.FIFO_RESET', MIDICar Player.pas), line = 39

	jsr MIDI_FIFO.FIFO_RESET

; optimize FAIL ('@print', MIDICar Player.pas), line = 44

	@printSTRING #CODEORIGIN+$0027
	@printEOL

; optimize OK (MIDICar Player.pas), line = 45

	lda #$00
	sta MIDFILES.MIDTRACKS
	lda #$40
	sta MIDFILES.MIDTRACKS+1

; optimize OK (MIDICar Player.pas), line = 46

	lda #$00
	sta MIDFILES.MIDDATA
	lda #$41
	sta MIDFILES.MIDDATA+1

; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 48

	jsr SYSTEM.PARAMCOUNT
	lda SYSTEM.PARAMCOUNT.RESULT
	cmp #$01
	jne l_0745
@

; optimize OK (MIDICar Player.pas), line = 50

	lda #$01
	jsr SYSTEM.PARAMSTR
	lda SYSTEM.PARAMSTR.RESULT
	sta FN
	lda SYSTEM.PARAMSTR.RESULT+1
	sta FN+1

; optimize OK (MIDICar Player.pas), line = 51

	lda FN
	sta MIDFILES.LOADMID.FN
	lda FN+1
	sta MIDFILES.LOADMID.FN+1
	jsr MIDFILES.LOADMID
	lda MIDFILES.LOADMID.RESULT
	sta V

; optimize FAIL ('@print', MIDICar Player.pas), line = 52

	@print #$9B

; optimize OK (MIDICar Player.pas), line = 53

	lda V
	jeq l_0763

; optimize OK (MIDICar Player.pas), line = 55

	sta @CASETMP_0007
	cmp #$64
	jne l_076F
@

; optimize FAIL ('@print', MIDICar Player.pas), line = 56

	@printSTRING #CODEORIGIN+$004C
	@printEOL

	jmp a_0007
l_076F
	cmp #$65
	jne l_077B
@

; optimize FAIL ('@print', MIDICar Player.pas), line = 57

	@printSTRING #CODEORIGIN+$0060
	@printEOL

	jmp a_0007
l_077B
	bmi @+
	jmp l_0787
@

; optimize FAIL ('@print', MIDICar Player.pas), line = 58

	@printSTRING #CODEORIGIN+$0074
	lda V
	jsr @printBYTE._a
	@printEOL

l_0787
a_0007
	lda #$00
	jmp @halt
l_0763
	jmp l_07A6
l_0745

; optimize FAIL ('@print', MIDICar Player.pas), line = 65

	@printSTRING #CODEORIGIN+$0081
	@printEOL

; optimize OK (MIDICar Player.pas), line = 66

	lda #$01
	sta MIDFILES.NTRACKS
	lda #$00
	sta MIDFILES.NTRACKS+1

; optimize FAIL ('@print', MIDICar Player.pas), line = 67

	@printSTRING #CODEORIGIN+$00AD
	@printEOL
l_07A6

; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 73

	jsr MC6850.MC6850_RESET

; optimize OK (MIDICar Player.pas), line = 74

	lda #$96
	jsr MC6850.MC6850_INIT

; optimize FAIL ('@print', MIDICar Player.pas), line = 79

	@printSTRING #CODEORIGIN+$00BA

; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 81

	jsr RESET_MIDI

; optimize OK (MIDICar Player.pas), line = 82

	lda #$00
	sta MIDFILES._TOTALTICKS
	sta MIDFILES._TOTALTICKS+1
	sta MIDFILES._TOTALTICKS+2
	sta MIDFILES._TOTALTICKS+3

; optimize FAIL ('MIDFILES.SETTEMPO', MIDICar Player.pas), line = 84

	jsr MIDFILES.SETTEMPO

; optimize OK (MIDICar Player.pas), line = 88

	lda MIDFILES.NTRACKS
	sta CTRK

; --- RepeatUntilProlog
l_07C2

; optimize OK (MIDICar Player.pas), line = 91

	lda #$00
	cmp MIDFILES.NTRACKS+1
	bne @+
	lda CTRK
	cmp MIDFILES.NTRACKS
@
	jne l_07D5

; optimize OK (MIDICar Player.pas), line = 93

	lda #$00
	sta CURTRACKOFS
	lda #$01
	sta CTRK

; optimize OK (MIDICar Player.pas), line = 94

	lda MIDFILES.NTRACKS
	sta PLAYINGTRACKS
	jmp l_07EC
l_07D5

; optimize OK (MIDICar Player.pas), line = 98

	lda CURTRACKOFS
	add #$08
	sta CURTRACKOFS

; optimize FAIL (0, MIDICar Player.pas), line = 99

	inc CTRK
l_07EC

; optimize OK (MIDICar Player.pas), line = 102

	lda MIDFILES.MIDTRACKS
	add CURTRACKOFS
	sta :bp2
	lda MIDFILES.MIDTRACKS+1
	adc #$00
	sta :bp2+1
	ldy #$07
	mva:rpl (:bp2),y $00E0,y-

; optimize OK (MIDICar Player.pas), line = 104

	lda MIDFILES._TRACKTIME+3
	jmi l_0807

; optimize OK (MIDICar Player.pas), line = 106

	.LOCAL
	lda MIDFILES._TOTALTICKS+3
	sub MIDFILES._TRACKTIME+3
	bne L4
	lda MIDFILES._TOTALTICKS+2
	cmp MIDFILES._TRACKTIME+2
	bne L1
	lda MIDFILES._TOTALTICKS+1
	cmp MIDFILES._TRACKTIME+1
	bne L1
	lda MIDFILES._TOTALTICKS
	cmp MIDFILES._TRACKTIME
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_0818

; optimize OK (MIDICar Player.pas), line = 108

	lda MIDFILES._TIMERSTATUS
	ora #$80
	sta MIDFILES._TIMERSTATUS

; optimize OK (MIDICar Player.pas), line = 110

	lda MIDFILES._TOTALTICKS
	sub MIDFILES._TRACKTIME
	sta DTM
	lda MIDFILES._TOTALTICKS+1
	sbc MIDFILES._TRACKTIME+1
	sta DTM+1

; optimize FAIL ('MIDFILES.PROCESSTRACK', MIDICar Player.pas), line = 111

	jsr MIDFILES.PROCESSTRACK
	lda MIDFILES.PROCESSTRACK.RESULT
	sta DELTATIME
	lda MIDFILES.PROCESSTRACK.RESULT+1
	sta DELTATIME+1
	lda MIDFILES.PROCESSTRACK.RESULT+2
	sta DELTATIME+2
	lda MIDFILES.PROCESSTRACK.RESULT+3
	sta DELTATIME+3

; optimize OK (MIDICar Player.pas), line = 112

	jmi l_083F
	ora DELTATIME+2
	ora DELTATIME+1
	ora DELTATIME
	jeq l_083F

; optimize OK (MIDICar Player.pas), line = 113

	lda MIDFILES._TOTALTICKS
	add DELTATIME
	sta :STACKORIGIN+9
	lda MIDFILES._TOTALTICKS+1
	adc DELTATIME+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda MIDFILES._TOTALTICKS+2
	adc DELTATIME+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda MIDFILES._TOTALTICKS+3
	adc DELTATIME+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub DTM
	sta MIDFILES._TRACKTIME
	lda :STACKORIGIN+STACKWIDTH+9
	sbc DTM+1
	sta MIDFILES._TRACKTIME+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc #$00
	sta MIDFILES._TRACKTIME+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc #$00
	sta MIDFILES._TRACKTIME+3
	jmp l_0856
l_083F

; optimize OK (MIDICar Player.pas), line = 115

	lda #$FF
	sta MIDFILES._TRACKTIME
	sta MIDFILES._TRACKTIME+1
	sta MIDFILES._TRACKTIME+2
	sta MIDFILES._TRACKTIME+3
l_0856

; optimize OK (MIDICar Player.pas), line = 117

	lda MIDFILES._TIMERSTATUS
	and #$7F
	sta MIDFILES._TIMERSTATUS
l_0818
	jmp l_086F
l_0807

; optimize FAIL (0, MIDICar Player.pas), line = 121

	dec PLAYINGTRACKS
l_086F

; optimize OK (MIDICar Player.pas), line = 122

	lda MIDFILES.MIDTRACKS
	add CURTRACKOFS
	sta :bp2
	lda MIDFILES.MIDTRACKS+1
	adc #$00
	sta :bp2+1
	ldy #$07
	mva:rpl $00E0,y (:bp2),y-

; optimize OK (MIDICar Player.pas), line = 125

	lda MC6850.MC6850_CNTRREG
	and #$02
	jeq l_088F

; optimize OK (MIDICar Player.pas), line = 126

	lda MIDI_FIFO.FIFO_TAIL
	cmp MIDI_FIFO.FIFO_HEAD
	jeq l_08A4

; optimize FAIL ('MIDI_FIFO.FIFO_READBYTE', MIDICar Player.pas), line = 129

	jsr MIDI_FIFO.FIFO_READBYTE

; optimize OK (MIDICar Player.pas), line = 130

	lda MIDI_FIFO.FIFO_BYTE
	sta MC6850.MC6850_BUFFER
l_08A4
l_088F

; optimize OK (MIDICar Player.pas), line = 135

	lda PLAYINGTRACKS
	jeq l_07C2x
	lda $02FC
	cmp #$FF
	jeq l_07C2
l_07C2x

; optimize FAIL ('@print', MIDICar Player.pas), line = 137

	@print #$9C

; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 144

	jsr RESET_MIDI

; optimize OK (MIDICar Player.pas), line = 150

	sei
	mva MIDFILES.OLDTIMERVEC VTIMR1
	mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
	lda irqens
	and #$fe
	sta irqens
	sta irqen
	cli

; ------------------------------------------------------------

TRACK_DATA_ADDR	= $4000
MIDI_DATA_ADDR	= $4100
adr.GM_RESET	= CODEORIGIN+$00C6
.var GM_RESET	= adr.GM_RESET .word
FN	= DATAORIGIN+$01A8
TRKPTR	= DATAORIGIN+$01AA
TRKPTR.PTR	= DATAORIGIN+$0000
TRKPTR.TRACKTIME	= DATAORIGIN+$0002
TRKPTR.SKIPDELTA	= DATAORIGIN+$0006
TRKPTR._EVENT	= DATAORIGIN+$0007
CURTRACKOFS	= DATAORIGIN+$01AC
DELTATIME	= DATAORIGIN+$01AD
DTM	= DATAORIGIN+$01B1
CTRK	= DATAORIGIN+$01B3
PLAYINGTRACKS	= DATAORIGIN+$01B4
V	= DATAORIGIN+$01B5
@CASETMP_0007	= DATAORIGIN+$01B6
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
USE_FIFO
ROMOFF
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.MC6850.@UnitInit
	jsr MAIN.MC6850.@UnitInit
	.fi

	.ifdef MAIN.DOS.@UnitInit
	jsr MAIN.DOS.@UnitInit
	.fi

	.ifdef MAIN.STRUTILS.@UnitInit
	jsr MAIN.STRUTILS.@UnitInit
	.fi

	.ifdef MAIN.SYSUTILS.@UnitInit
	jsr MAIN.SYSUTILS.@UnitInit
	.fi

	.ifdef MAIN.MIDI_FIFO.@UnitInit
	jsr MAIN.MIDI_FIFO.@UnitInit
	.fi

	.ifdef MAIN.MIDFILES.@UnitInit
	jsr MAIN.MIDFILES.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.MC6850) > 0
	.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
	eif

	ift .SIZEOF(MAIN.DOS) > 0
	.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
	eif

	ift .SIZEOF(MAIN.STRUTILS) > 0
	.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
	eif

	ift .SIZEOF(MAIN.SYSUTILS) > 0
	.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
	eif

	ift .SIZEOF(MAIN.MIDI_FIFO) > 0
	.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
	eif

	ift .SIZEOF(MAIN.MIDFILES) > 0
	.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 439

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $0A $4F $70  $65 $6E $20 $66 $69 $6C $65 $20
.by  $00 $07 $54 $72 $61 $63 $6B $3A  $20 $00 $03 $2E $2E $2E $00 $23  $4D $49 $44 $20 $50 $6C $61 $79
.by  $65 $72 $20 $66 $6F $72 $20 $4D  $49 $44 $49 $43 $61 $72 $20 $52  $43 $31 $20 $32 $30 $32 $32 $20
.by  $47 $53 $44 $00 $12 $55 $6E $73  $75 $70 $70 $6F $72 $74 $65 $64  $20 $66 $6F $72 $6D $61 $74 $00
.by  $12 $4E $6F $74 $20 $65 $6E $6F  $75 $67 $68 $74 $20 $6D $65 $6D  $6F $72 $79 $00 $0B $49 $2F $4F
.by  $20 $45 $72 $72 $6F $72 $20 $23  $00 $2A $54 $79 $70 $65 $20 $22  $50 $20 $64 $65 $76 $69 $63 $65
.by  $3A $66 $69 $6C $65 $6E $61 $6D  $65 $2E $4D $49 $44 $22 $20 $74  $6F $20 $70 $6C $61 $79 $20 $66
.by  $69 $6C $65 $2E $00 $0B $53 $65  $6C $66 $74 $65 $73 $74 $2E $2E  $2E $00 $0A $50 $6C $61 $79 $69
.by  $6E $67 $2E $2E $2E $00 $F0 $7E  $7F $09 $01 $F7
.endm

	end
