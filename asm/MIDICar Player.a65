; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/03/17] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_006B

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	FILEPOS						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000011  -------------------

	txa:pha

	mwa f :bp2

	ldy #s@file.chanel
	lda (:bp2),y
	tax
	lda #38
	sta iccmd,x

	m@call	ciov

	sty IOResult

	mva icax3,x :eax
	mva icax4,x :eax+1
	mva icax5,x :eax+2

	mva #$00 :eax+3
	sta :ecx+2
	sta :ecx+3

	ldy #s@file.record
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1

	jsr idivEAX_ECX.main

	mva :eax Result
	mva :eax+1 Result+1
	mva :eax+2 Result+2
	mva :eax+3 Result+3

	pla:tax

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000D

@VarData	= F
@VarDataSize	= 2

	rts						; ret
.endl

.local	SEEK						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000012  -------------------

	txa:pha

	mwa f :bp2

	ldy #s@file.chanel
	lda (:bp2),y
	tax
	lda #37
	sta iccmd,x

	ldy #s@file.record
	lda (:bp2),y
	sta :eax
	iny
	lda (:bp2),y
	sta :eax+1
	lda #$00
	sta :eax+2
	sta :eax+3

	mva a :ecx
	mva a+1 :ecx+1
	mva a+2 :ecx+2
	mva a+3 :ecx+3

	jsr imulECX

	mva :eax icax3,x
	mva :eax+1 icax4,x
	mva :eax+2 icax5,x

	m@call	ciov

	sty IOResult

	pla:tax

; ------------------------------------------------------------

F	= DATAORIGIN+$0011
A	= DATAORIGIN+$0013

@VarData	= F
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EOF						; FUNCTION

; optimize OK (SYSTEM), line = 1151

	lda F
	sta FILEPOS.F
	lda F+1
	sta FILEPOS.F+1
	jsr FILEPOS
	lda FILEPOS.RESULT
	sta I
	lda FILEPOS.RESULT+1
	sta I+1
	lda FILEPOS.RESULT+2
	sta I+2
	lda FILEPOS.RESULT+3
	sta I+3
; BlockRead

; optimize OK (SYSTEM), line = 1153

	mwy F :bp2
	ldy #s@file.buffer
	lda BF
	sta (:bp2),y
	iny
	lda BF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (SYSTEM), line = 1155

	lda F
	sta SEEK.F
	lda F+1
	sta SEEK.F+1
	lda I
	sta SEEK.A
	lda I+1
	sta SEEK.A+1
	lda I+2
	sta SEEK.A+2
	lda I+3
	sta SEEK.A+3
	jsr SEEK

; -------------------  ASM Block 00000013  -------------------

	mwa f :bp2

	ldy #s@file.status
	lda (:bp2),y
	and #e@file.eof
	sta Result

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$0017
RESULT	= DATAORIGIN+$0019
I	= DATAORIGIN+$001A
adr.BF	= [DATAORIGIN+$001E] .array [256]
.var BF	= adr.BF .word

@VarData	= F
@VarDataSize	= 262

	rts						; ret
.endl

.local	FILLCHAR_00C0					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000021  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	SETLENGTH					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000033  -------------------

	ldy #0
	mva Len (:edx),y

; ------------------------------------------------------------

S	= :EDX
LEN	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	MC6850						; UNIT

.local	MC6850_RESET					; PROCEDURE

; optimize OK (MC6850), line = 68

	lda #$03
	sta MC6850_CNTRREG
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MC6850_INIT					; PROCEDURE
	sta SETUP

; optimize OK (MC6850), line = 73

	sta MC6850_CNTRREG

; ------------------------------------------------------------

SETUP	= DATAORIGIN+$011E

@VarData	= SETUP
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

MC6850_BASE	= $D500
ADDR_MC6850_CNTRREG	= $D500
ADDR_MC6850_BUFFER	= $D501
ADDR_MC6850_STATREG	= $D500
CR0	= $01
CR1	= $02
CR2	= $04
CR3	= $08
CR4	= $10
CR5	= $20
CR6	= $40
CR7	= $80
CD_1	= $00
CD_16	= $01
CD_64	= $02
MASTERRESET	= $03
WS_7BITS	= $00
WS_8BITS	= $10
WS_2BITSTOP	= $00
WS_1BITSTOP	= $08
WS_EVENPARITY	= $00
WS_ODDPARITY	= $04
TC_RTSLOW_NOTIRQ	= $00
TC_RTSLOW_TIRQ	= $20
TC_RTSHIGH_NOTIRQ	= $40
TC_BREAKLEVEL	= $60
NOIRQ_RECEIVE	= $00
IRQ_RECEIVE	= $80
RDRF	= $01
TDRE	= $02
DCD	= $04
CTS	= $08
FE	= $10
OVRN	= $20
PE	= $40
IRQ	= $80
MC6850_CNTRREG	= $D500
MC6850_BUFFER	= $D501
MC6850_STATREG	= $D500

.endl							; UNIT MC6850

; ------------------------------------------------------------

.local	MIDI_FIFO					; UNIT

.local	FIFO_RESET					; PROCEDURE

; optimize OK (MIDI_FIFO), line = 31

	lda #$00
	sta FIFO_HEAD

; optimize OK (MIDI_FIFO), line = 32

	sta FIFO_TAIL

; optimize OK (MIDI_FIFO), line = 33

	sta SYSTEM.FILLCHAR_00C0.A
	lda #$06
	sta SYSTEM.FILLCHAR_00C0.A+1
	lda #$FF
	sta SYSTEM.FILLCHAR_00C0.COUNT
	lda #$00
	sta SYSTEM.FILLCHAR_00C0.COUNT+1
	sta SYSTEM.FILLCHAR_00C0.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_00C0
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

ZP_DATA	= $FF
FIFO_SIZE	= $FF
FIFO_ADDR	= $0600
adr.FIFO_BUF	= $0600
.var FIFO_BUF	= adr.FIFO_BUF .word
FIFO_HEAD	= $F0
FIFO_TAIL	= $F1

.endl							; UNIT MIDI_FIFO

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$011F
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	MIDFILES					; UNIT

.local	READWORDBI					; FUNCTION

; BlockRead

; optimize OK (MIDFILES), line = 37

	mwy F :bp2
	ldy #s@file.buffer
	lda BI
	sta (:bp2),y
	iny
	lda BI+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$02
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (MIDFILES), line = 38

	lda <RESULT
	sta RESULTPTR
	lda >RESULT
	sta RESULTPTR+1

; optimize OK (MIDFILES), line = 39

	lda adr.BI+$01
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y
	inc RESULTPTR
	sne
	inc RESULTPTR+1

; optimize OK (MIDFILES), line = 40

	lda adr.BI+$00
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y
@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$012E
RESULT	= DATAORIGIN+$0130
RESULTPTR	= DATAORIGIN+$0132

@VarData	= F
@VarDataSize	= 4

	rts						; ret
.endl

.local	READLONGBI					; FUNCTION

; BlockRead

; optimize OK (MIDFILES), line = 49

	mwy F :bp2
	ldy #s@file.buffer
	lda BI
	sta (:bp2),y
	iny
	lda BI+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (MIDFILES), line = 50

	lda <RESULT
	sta RESULTPTR
	lda >RESULT
	sta RESULTPTR+1

; optimize OK (MIDFILES), line = 51

	lda #$03
	sta I

l_0152
; --- ForToDoCondition

; optimize OK (MIDFILES), line = 53

	ldy I
	lda adr.BI,y
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y

; optimize FAIL (0, MIDFILES), line = 54

	inc RESULTPTR
	sne
	inc RESULTPTR+1

; --- ForToDoEpilog
	dec I
	jpl l_0152
l_0160
@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$0134
RESULT	= DATAORIGIN+$0136
RESULTPTR	= DATAORIGIN+$013A
I	= DATAORIGIN+$013C

@VarData	= F
@VarDataSize	= 5

	rts						; ret
.endl

.local	LOADMID						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.FN,y+
	mwa #adr.FN FN
	dex
@main

; optimize OK (MIDFILES), line = 72

	lda MIDTRACKS
	sta NTRKREC
	lda MIDTRACKS+1
	sta NTRKREC+1

; optimize FAIL ('@print', MIDFILES), line = 74

	@printSTRING #CODEORIGIN+$0000
	@printSTRING FN
	@printEOL
; AssignFile

; optimize OK (MIDFILES), line = 76

	mwy F :bp2
	ldy #s@file.pfname
	lda FN
	sta (:bp2),y
	iny
	lda FN+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Reset
	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@openfile F, MAIN.SYSTEM.FileMode
	pla:tax

; optimize OK (MIDFILES), line = 77

	lda #$00
	sta TRACKCOUNT
	sta TRACKCOUNT+1
	sta DATAPOS
	sta DATAPOS+1
	lda #$FF
	sta NTRACKS
	lda #$00
	sta NTRACKS+1

; optimize OK (MIDFILES), line = 78

	lda CHUNKHEAD
	sta SYSTEM.SETLENGTH.S
	lda CHUNKHEAD+1
	sta SYSTEM.SETLENGTH.S+1
	lda #$04
	sta SYSTEM.SETLENGTH.LEN
	jsr SYSTEM.SETLENGTH

; --- WhileProlog
	jmp l_01A6
l_01A7
; BlockRead

; optimize OK (MIDFILES), line = 81

	mwy F :bp2
	ldy #s@file.buffer
	lda <adr.CHUNKHEAD
	add #$01
	sta (:bp2),y
	iny
	lda >adr.CHUNKHEAD
	adc #$00
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
	ldy #s@file.numread
	lda <V
	sta (:bp2),y
	iny
	lda >V
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #135
	pla:tax

; optimize OK (MIDFILES), line = 82

	lda V+1
	bne @+
	lda V
	cmp #$04
@
	jeq l_01C4
	jmp b_01A7					; break
l_01C4

; optimize OK (MIDFILES), line = 83

	lda F
	sta READLONGBI.F
	lda F+1
	sta READLONGBI.F+1
	jsr READLONGBI
	lda READLONGBI.RESULT
	sta LEN
	lda READLONGBI.RESULT+1
	sta LEN+1
	lda READLONGBI.RESULT+2
	sta LEN+2
	lda READLONGBI.RESULT+3
	sta LEN+3

; optimize FAIL ('@print', MIDFILES), line = 84

	@print #$2D
	@printSTRING CHUNKHEAD
	@print #$28
	inx
	mva LEN :STACKORIGIN,x
	mva LEN+1 :STACKORIGIN+STACKWIDTH,x
	mva LEN+2 :STACKORIGIN+STACKWIDTH*2,x
	mva LEN+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @printINT
	dex
	@printSTRING #CODEORIGIN+$000C

; optimize FAIL ('cmpSTRING', MIDFILES), line = 85

	inx
	mva CHUNKHEAD :STACKORIGIN,x
	mva CHUNKHEAD+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$10 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	ldy #1
	jsr cmpSTRING
	beq @+
	dey
@
	dex
	dex
	tya
	jeq l_01ED

; optimize OK (MIDFILES), line = 87

	lda F
	sta READWORDBI.F
	lda F+1
	sta READWORDBI.F+1
	jsr READWORDBI
	lda READWORDBI.RESULT
	sta FORMAT
	lda READWORDBI.RESULT+1
	sta FORMAT+1

; optimize OK (MIDFILES), line = 88

	lda F
	sta READWORDBI.F
	lda F+1
	sta READWORDBI.F+1
	jsr READWORDBI
	lda READWORDBI.RESULT
	sta NTRACKS
	lda READWORDBI.RESULT+1
	sta NTRACKS+1

; optimize OK (MIDFILES), line = 89

	lda F
	sta READWORDBI.F
	lda F+1
	sta READWORDBI.F+1
	jsr READWORDBI
	lda READWORDBI.RESULT
	sta V
	lda READWORDBI.RESULT+1
	sta V+1

; optimize FAIL ('@print', MIDFILES), line = 91

	@printSTRING #CODEORIGIN+$0016
	lda FORMAT
	ldy FORMAT+1
	jsr @printWORD._ay
	@printEOL

; optimize FAIL ('@print', MIDFILES), line = 92

	@printSTRING #CODEORIGIN+$0020
	lda NTRACKS
	ldy NTRACKS+1
	jsr @printWORD._ay
	@printEOL

; optimize OK (MIDFILES), line = 94

	lda V+1
	jpl l_0229

; optimize OK (MIDFILES), line = 96

	and #$7F
	sta FPS

; optimize OK (MIDFILES), line = 97

	sta @CASETMP_0003
	cmp #$E8
	jne l_0242
@

; optimize OK (MIDFILES), line = 98

	lda #$18
	sta FPS

	jmp a_0003
l_0242
	cmp #$E7
	jne l_024F
@

; optimize OK (MIDFILES), line = 99

	lda #$19
	sta FPS

	jmp a_0003
l_024F
	cmp #$E3
	jne l_025C
@

; optimize OK (MIDFILES), line = 100

	lda #$1D
	sta FPS

	jmp a_0003
l_025C
	cmp #$E2
	jne l_0269
@

; optimize OK (MIDFILES), line = 101

	lda #$1E
	sta FPS

l_0269
a_0003

; optimize FAIL ('@print', MIDFILES), line = 104

	@printSTRING #CODEORIGIN+$002A
	lda FPS
	jsr @printBYTE._a
	@printEOL
	jmp l_0289
l_0229

; optimize FAIL ('@print', MIDFILES), line = 110

	@printSTRING #CODEORIGIN+$0031
	lda V
	ldy V+1
	jsr @printWORD._ay
	@printEOL
l_0289
	jmp l_029C
l_01ED

; optimize FAIL ('cmpSTRING', MIDFILES), line = 114

	inx
	mva CHUNKHEAD :STACKORIGIN,x
	mva CHUNKHEAD+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$3C :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	ldy #1
	jsr cmpSTRING
	beq @+
	dey
@
	dex
	dex
	tya
	jeq l_02AD

; optimize FAIL (0, MIDFILES), line = 116

	inc TRACKCOUNT
	sne
	inc TRACKCOUNT+1

; optimize FAIL ('@print', MIDFILES), line = 118

	@printSTRING #CODEORIGIN+$0042
	lda TRACKCOUNT
	ldy TRACKCOUNT+1
	jsr @printWORD._ay
	@print #$2F
	lda NTRACKS
	ldy NTRACKS+1
	jsr @printWORD._ay
	@printEOL

; optimize FAIL ('@print', MIDFILES), line = 119

	@printSTRING #CODEORIGIN+$004B
	inx
	mva LEN :STACKORIGIN,x
	mva LEN+1 :STACKORIGIN+STACKWIDTH,x
	mva LEN+2 :STACKORIGIN+STACKWIDTH*2,x
	mva LEN+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @printINT
	dex
	@printEOL
; BlockRead

; optimize OK (MIDFILES), line = 121

	mwy F :bp2
	ldy #s@file.buffer
	lda MIDDATA
	add DATAPOS
	sta (:bp2),y
	iny
	lda MIDDATA+1
	adc DATAPOS+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda LEN
	sta (:bp2),y
	iny
	lda LEN+1
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (MIDFILES), line = 122

	mwy NTRKREC :bp2
	ldy #$00
	lda MIDDATA
	add DATAPOS
	sta (:bp2),y
	iny
	lda MIDDATA+1
	adc DATAPOS+1
	sta (:bp2),y

; optimize OK (MIDFILES), line = 123

	iny
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (MIDFILES), line = 124

	lda NTRKREC
	add #$06
	sta NTRKREC
	scc
	inc NTRKREC+1

; optimize OK (MIDFILES), line = 125

	lda DATAPOS
	add LEN
	sta DATAPOS
	lda DATAPOS+1
	adc LEN+1
	sta DATAPOS+1
l_02AD
l_029C
l_01A6

; optimize OK (MIDFILES), line = 79

	lda F
	sta SYSTEM.EOF.F
	lda F+1
	sta SYSTEM.EOF.F+1
	jsr SYSTEM.EOF
	inx
	mva SYSTEM.EOF.RESULT :STACKORIGIN,x
	jsr notBOOLEAN
	inx
	ldy #1
	lda TRACKCOUNT+1
	cmp NTRACKS+1
	bne @+
	lda TRACKCOUNT
	cmp NTRACKS
@
	bcc @+
	dey
@
	dex
	dex
	tya
	and :STACKORIGIN+1,x
	sta :STACKORIGIN+1,x
	jne l_01A7
b_01A7
; CloseFile

	txa:pha
	sec
	@closefile F
	pla:tax

; ------------------------------------------------------------

adr.FN	= [DATAORIGIN+$013D] .array [256]
.var FN	= adr.FN .word
.var F	= DATAORIGIN+$023D .word
TRACKCOUNT	= DATAORIGIN+$0249
adr.CHUNKHEAD	= [DATAORIGIN+$024B] .array [5]
.var CHUNKHEAD	= adr.CHUNKHEAD .word
V	= DATAORIGIN+$0250
DATAPOS	= DATAORIGIN+$0252
LEN	= DATAORIGIN+$0254
NTRKREC	= DATAORIGIN+$0258
NTRKREC.PTR	= DATAORIGIN+$0000
NTRKREC.DELTATIME	= DATAORIGIN+$0002
@CASETMP_0003	= DATAORIGIN+$025A

@VarData	= FN
@VarDataSize	= 286

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

adr.MIDDATA	= [DATAORIGIN+$0120] .array [1]
.var MIDDATA	= adr.MIDDATA .word
adr.MIDTRACKS	= [DATAORIGIN+$0121] .array [1]
.var MIDTRACKS	= adr.MIDTRACKS .word
FORMAT	= DATAORIGIN+$0122
NTRACKS	= DATAORIGIN+$0124
FPS	= DATAORIGIN+$0126
FSD	= DATAORIGIN+$0127
TIMING	= DATAORIGIN+$0128
adr.BI	= [DATAORIGIN+$012A] .array [4]
.var BI	= adr.BI .word

.endl							; UNIT MIDFILES
l_006B

; optimize FAIL ('MIDI_FIFO.FIFO_RESET', MIDICar Player.pas), line = 14

	jsr MIDI_FIFO.FIFO_RESET

; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 15

	jsr MC6850.MC6850_RESET

; optimize OK (MIDICar Player.pas), line = 16

	lda #$16
	jsr MC6850.MC6850_INIT

; optimize OK (MIDICar Player.pas), line = 18

	lda #$00
	sta MIDFILES.MIDDATA
	lda #$60
	sta MIDFILES.MIDDATA+1

; optimize OK (MIDICar Player.pas), line = 19

	lda #$00
	sta MIDFILES.MIDTRACKS
	lda #$5F
	sta MIDFILES.MIDTRACKS+1

; optimize FAIL ('MIDFILES.LOADMID', MIDICar Player.pas), line = 20

	inx
	mva #$53 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	jsr MIDFILES.LOADMID

; ------------------------------------------------------------

@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
DEBUG
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.MC6850.@UnitInit
	jsr MAIN.MC6850.@UnitInit
	.fi

	.ifdef MAIN.MIDI_FIFO.@UnitInit
	jsr MAIN.MIDI_FIFO.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.MIDFILES.@UnitInit
	jsr MAIN.MIDFILES.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.MC6850) > 0
	.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
	eif

	ift .SIZEOF(MAIN.MIDI_FIFO) > 0
	.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.MIDFILES) > 0
	.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 603

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $0A $4F $70 $65 $6E $20 $66 $69  $6C $65 $20 $00 $02 $29 $20 $00  $04 $4D $54 $68 $64 $00 $08 $46
.by  $6F $72 $6D $61 $74 $3A $20 $00  $08 $54 $72 $61 $63 $6B $73 $3A  $20 $00 $05 $46 $50 $53 $3A $20
.by  $00 $09 $54 $69 $63 $6B $44 $69  $76 $3A $20 $00 $04 $4D $54 $72  $6B $00 $07 $54 $72 $61 $63 $6B
.by  $3A $20 $00 $06 $53 $69 $7A $65  $3A $20 $00 $0F $44 $32 $3A $4F  $56 $45 $52 $57 $4F $52 $4C $2E
.by  $4D $49 $44 $00
.endm

	end
