; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $8000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'resources/font_s.fnt' CHARS_ADDR 0 0 0 0 0 0 0 0
	RCASM 'resources/dlist.asm' DLIST_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'resources/header.obj' SCREEN_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'resources/uvmeter.obj' UVMETER_ADDR 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_00A6

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	FILEPOS						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000011  -------------------

	txa:pha

	mwa f :bp2

	ldy #s@file.chanel
	lda (:bp2),y
	tax
	lda #38
	sta iccmd,x

	m@call	ciov

	sty IOResult

	mva icax3,x :eax
	mva icax4,x :eax+1
	mva icax5,x :eax+2

	mva #$00 :eax+3
	sta :ecx+2
	sta :ecx+3

	ldy #s@file.record
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1

	jsr idivEAX_ECX.main

	mva :eax Result
	mva :eax+1 Result+1
	mva :eax+2 Result+2
	mva :eax+3 Result+3

	pla:tax

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000D

@VarData	= F
@VarDataSize	= 2

	rts						; ret
.endl

.local	SEEK						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000012  -------------------

	txa:pha

	mwa f :bp2

	ldy #s@file.chanel
	lda (:bp2),y
	tax
	lda #37
	sta iccmd,x

	ldy #s@file.record
	lda (:bp2),y
	sta :eax
	iny
	lda (:bp2),y
	sta :eax+1
	lda #$00
	sta :eax+2
	sta :eax+3

	mva a :ecx
	mva a+1 :ecx+1
	mva a+2 :ecx+2
	mva a+3 :ecx+3

	jsr imulECX

	mva :eax icax3,x
	mva :eax+1 icax4,x
	mva :eax+2 icax5,x

	m@call	ciov

	sty IOResult

	pla:tax

; ------------------------------------------------------------

F	= DATAORIGIN+$0011
A	= DATAORIGIN+$0013

@VarData	= F
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EOF						; FUNCTION

; optimize OK (SYSTEM), line = 1163

	lda F
	sta FILEPOS.F
	lda F+1
	sta FILEPOS.F+1
	jsr FILEPOS
	lda FILEPOS.RESULT
	sta I
	lda FILEPOS.RESULT+1
	sta I+1
	lda FILEPOS.RESULT+2
	sta I+2
	lda FILEPOS.RESULT+3
	sta I+3
; BlockRead

; optimize OK (SYSTEM), line = 1165

	mwy F :bp2
	ldy #s@file.buffer
	lda BF
	sta (:bp2),y
	iny
	lda BF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (SYSTEM), line = 1167

	lda F
	sta SEEK.F
	lda F+1
	sta SEEK.F+1
	lda I
	sta SEEK.A
	lda I+1
	sta SEEK.A+1
	lda I+2
	sta SEEK.A+2
	lda I+3
	sta SEEK.A+3
	jsr SEEK

; -------------------  ASM Block 00000013  -------------------

	mwa f :bp2

	ldy #s@file.status
	lda (:bp2),y
	and #e@file.eof
	sta Result

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$0017
RESULT	= DATAORIGIN+$0019
I	= DATAORIGIN+$001A
adr.BF	= [DATAORIGIN+$001E] .array [256]
.var BF	= adr.BF .word

@VarData	= F
@VarDataSize	= 262

	rts						; ret
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000018  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	lda :STACKORIGIN+STACKWIDTH,x
	sta VALUE+1
	dex
@main

; -------------------  ASM Block 00000019  -------------------

	ldy #0
	mva value (:edx),y
	iny
	mva value+1 (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLCHAR_0109					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000021  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	MOVE_010A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000028  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	PARAMCOUNT					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000044  -------------------

	@cmdline #255
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$011E
	rts						; ret
.endl

.local	PARAMSTR					; FUNCTION | ASSEMBLER
	sta I

; -------------------  ASM Block 00000045  -------------------

	@cmdline i

;	@move #@buf Result #33
	ldy #256-33
	mva:rne @buf+33-256,y adr.Result+33-256,y+

@exit

; ------------------------------------------------------------

I	= DATAORIGIN+$011F
adr.RESULT	= [DATAORIGIN+$0120] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= I
@VarDataSize	= 34

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	MC6850						; UNIT

.local	MC6850_RESET					; PROCEDURE

; optimize OK (MC6850), line = 70

	lda #$03
	sta MC6850_CNTRREG
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MC6850_INIT					; PROCEDURE
	sta SETUP

; optimize OK (MC6850), line = 75

	sta MC6850_CNTRREG

; ------------------------------------------------------------

SETUP	= DATAORIGIN+$0141

@VarData	= SETUP
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

MC6850_BASE	= $D500
ADDR_MC6850_CNTRREG	= $D500
ADDR_MC6850_BUFFER	= $D501
ADDR_MC6850_STATREG	= $D500
CR0	= $01
CR1	= $02
CR2	= $04
CR3	= $08
CR4	= $10
CR5	= $20
CR6	= $40
CR7	= $80
CD_1	= $00
CD_16	= $01
CD_64	= $02
MASTERRESET	= $03
WS_7BITS	= $00
WS_8BITS	= $10
WS_2BITSTOP	= $00
WS_1BITSTOP	= $08
WS_EVENPARITY	= $00
WS_ODDPARITY	= $04
TC_RTSLOW_NOTIRQ	= $00
TC_RTSLOW_TIRQ	= $20
TC_RTSHIGH_NOTIRQ	= $40
TC_BREAKLEVEL	= $60
NOIRQ_RECEIVE	= $00
IRQ_RECEIVE	= $80
RDRF	= $01
TDRE	= $02
DCD	= $04
CTS	= $08
FE	= $10
OVRN	= $20
PE	= $40
IRQ	= $80
MC6850_CNTRREG	= $D500
MC6850_BUFFER	= $D501
MC6850_STATREG	= $D500
MC_BYTE	= $FF

.endl							; UNIT MC6850

; ------------------------------------------------------------

.local	MIDI_FIFO					; UNIT

.local	FIFO_RESET					; PROCEDURE

; optimize OK (MIDI_FIFO), line = 30

	lda #$00
	sta FIFO_HEAD

; optimize OK (MIDI_FIFO), line = 31

	sta FIFO_TAIL
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_PUSHDIRECT2MC6850				; PROCEDURE

; optimize OK (MIDI_FIFO), line = 36

	lda MC6850.MC6850_CNTRREG
	and #$02
	jeq l_0170

; optimize OK (MIDI_FIFO), line = 37

	ldy FIFO_TAIL
	cpy FIFO_HEAD
	jeq l_0185

; optimize OK (MIDI_FIFO), line = 39

	lda adr.FIFO_BUF,y
	sta MC6850.MC6850_BUFFER

; optimize FAIL (0, MIDI_FIFO), line = 40

	inc FIFO_TAIL
l_0185
l_0170
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000052  -------------------

  lda FIFO_Head
  clc
  adc #1
  cmp FIFO_Tail
  bne storeInFIFO

  lda $d01a
  eor #$47
  sta $d01a
  jsr FIFO_Flush
  lda $d01a
  eor #$47
  sta $d01a

storeInFIFO:
  ldy FIFO_Head
  lda FIFO_Byte
  sta FIFO_ADDR,y
  inc FIFO_Head

  jsr FIFO_PushDirect2MC6850
exitWrite:

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_SEND					; PROCEDURE

; optimize OK (MIDI_FIFO), line = 85

	lda DATA
	sta P
	lda DATA+1
	sta P+1

; --- WhileProlog
	jmp l_01A4
l_01A5

; optimize OK (MIDI_FIFO), line = 88

	mwy P :bp2
	ldy #$00
	lda (:bp2),y
	sta FIFO_BYTE
	jsr FIFO_WRITEBYTE

; optimize FAIL (0, MIDI_FIFO), line = 89

	inc P
	sne
	inc P+1
	dec LEN
l_01A4

; optimize OK (MIDI_FIFO), line = 86

	lda LEN
	jne l_01A5

; ------------------------------------------------------------

DATA	= DATAORIGIN+$0143
LEN	= DATAORIGIN+$0145
P	= DATAORIGIN+$0146

@VarData	= DATA
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_FLUSH					; PROCEDURE

; optimize OK (MIDI_FIFO), line = 126

	lda _TIMERSTATUS
	eor #$80
	sta _TIMERSTATUS

; --- WhileProlog
	jmp l_01D0
l_01D1

; optimize OK (MIDI_FIFO), line = 129

	lda MC6850.MC6850_CNTRREG
	and #$02
	jeq l_01E7

; optimize OK (MIDI_FIFO), line = 131

	ldy FIFO_TAIL
	lda adr.FIFO_BUF,y
	sta MC6850.MC6850_BUFFER

; optimize FAIL (0, MIDI_FIFO), line = 132

	inc FIFO_TAIL
l_01E7
l_01D0

; optimize OK (MIDI_FIFO), line = 127

	lda FIFO_TAIL
	cmp FIFO_HEAD
	jne l_01D1

; optimize OK (MIDI_FIFO), line = 135

	lda _TIMERSTATUS
	eor #$80
	sta _TIMERSTATUS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

FIFO_HEAD	= $FD
FIFO_TAIL	= $FE
FIFO_BYTE	= $FF
FIFO2NULL	= DATAORIGIN+$0142
FIFO_ADDR	= $0600
adr.FIFO_BUF	= $0600
.var FIFO_BUF	= adr.FIFO_BUF .word
_TIMERSTATUS	= $F5

.endl							; UNIT MIDI_FIFO

; ------------------------------------------------------------

.local	MIDFILES					; UNIT

.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000053  -------------------

    lda _timerStatus
    bmi skip

doSubTick:
    and #f_ratio
    cmp _subCnt
    beq doMainTick

    inc _subCnt
    bvs skip

doMainTick:
    lda #1
    sta _subCnt

    lda _timerStatus
    ora #f_tick
    sta _timerStatus

    inc _totalTicks
    bne skip
    inc _totalTicks+1
    bne skip
    inc _totalTicks+2
    // bne skip
    // inc _totalTicks+3

skip:

//   sty regy

//   ldy MIDI_FIFO.FIFO_Tail
//   cpy MIDI_FIFO.FIFO_Head
//   beq fifo_end

//   lda MC6850.MC6850_CNTRREG
//   and #MC6850.TDRE
//   beq fifo_end

//   lda MIDI_FIFO.FIFO_ADDR,y
//   sta MC6850.MC6850_BUFFER

//   inc MIDI_FIFO.FIFO_Tail

// fifo_end:
//   ldy regy:#$00

  pla

	rti						; ret
.endl

.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000054  -------------------

  lda _adr            // get LSB of address
  beq checkMemType    // zero means, we crossing the page. Check block bounds
  rts

checkMemType
  lda _adr+1          // get MSB of address
  ldy _bank           // get current bank index
  bne checkXMSBound   // zero, means we checking bounds in base memory
                      // otherwise, we checking bound of extended memory

// base memory bounds check
// 1st, memory under ROM
check1Bound:
  cmp #$d0
  bne check2Bound

  lda #$d8
  sta _adr+1
  rts

check2bound
  cmp #$ff
  bne check3Bound

  lda #$40
  sta _adr+1
  rts

// 2nd, $4000..$8000
check3Bound
  cmp #$80
  beq outOfMem
  rts

// extended memory bound check

checkXMSBound         // extender memory window $4000..$7fff
  cmp #$80            // the bank's memory area ends at $7fff
  beq switchXMSBank   // if MSB addres is out of this address, we need switch bank

  rts

switchXMSBank:
  dey             // decrement current bank index
  beq switch2Conv // if zero, meand we back to conventional memory

  lda $100,y      // get bank set
  sty _bank       // store current bank index
  sta PORTB       // set PORTB (switch bank)
  lda #$40        // set MSB address to the begining of bank
  sta _adr+1
  rts

switch2Conv:
  lda #$fe        // switch to conventional memory and turn off ROM
  sty _bank
  sta PORTB
  lda #$a8        // set MSB address
  sta _adr+1
  rts

outOfMem:
  lda #ERR_NOT_ENOUGHT_MEMORY
  sta SYSTEM.IOResult

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADMID						; FUNCTION

	jmp l_0215

.local	READWORDBI					; FUNCTION

; BlockRead

; optimize OK (bigendian.inc), line = 3

	mwy F :bp2
	ldy #s@file.buffer
	lda <RESULT
	sta (:bp2),y
	iny
	lda >RESULT
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$02
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; -------------------  ASM Block 00000055  -------------------

    ldx result
    ldy result+1
    stx result+1
    sty result
  
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$018D
	rts						; ret
.endl

.local	READLONGBI					; FUNCTION

; BlockRead

; optimize OK (bigendian.inc), line = 15

	mwy F :bp2
	ldy #s@file.buffer
	lda <RESULT
	sta (:bp2),y
	iny
	lda >RESULT
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; -------------------  ASM Block 00000056  -------------------

    ldx result
    ldy result+3
    stx result+3
    sty result

    ldx result+1
    ldy result+2
    stx result+2
    sty result+1
  
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$018F
	rts						; ret
.endl

.local	BGET						; PROCEDURE

; BlockRead

; optimize OK (loadmid.inc), line = 18

	mwy F :bp2
	ldy #s@file.buffer
	lda DEST
	sta (:bp2),y
	iny
	lda DEST+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda LOADSIZE
	sta (:bp2),y
	iny
	lda LOADSIZE+1
	sta (:bp2),y
	ldy #s@file.numread
	lda <V
	sta (:bp2),y
	iny
	lda >V
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #135
	pla:tax

; ------------------------------------------------------------

DEST	= DATAORIGIN+$0193

@VarData	= DEST
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0215
; AssignFile

; optimize OK (loadmid.inc), line = 23

	mwy F :bp2
	ldy #s@file.pfname
	lda FN
	sta (:bp2),y
	iny
	lda FN+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Reset

; optimize OK (loadmid.inc), line = 24

	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@openfile F, MAIN.SYSTEM.FileMode
	pla:tax

; optimize OK (loadmid.inc), line = 25

	lda SYSTEM.IORESULT
	jpl l_025E

; optimize OK (loadmid.inc), line = 27

	sta RESULT
; CloseFile

	txa:pha
	clc
	@closefile F
	pla:tax

	jmp @exit					; exit
l_025E

; optimize OK (loadmid.inc), line = 32

	lda MIDTRACKS
	sta TRKDATA
	lda MIDTRACKS+1
	sta TRKDATA+1

; optimize OK (loadmid.inc), line = 33

	lda #$00
	sta TRACKCOUNT

; optimize OK (loadmid.inc), line = 34

	lda #$FF
	sta TOTALTRACKS

; --- WhileProlog
	jmp l_0276
l_0277
; BlockRead

; optimize OK (loadmid.inc), line = 38

	mwy F :bp2
	ldy #s@file.buffer
	lda <CHUNKTAG
	sta (:bp2),y
	iny
	lda >CHUNKTAG
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
	ldy #s@file.numread
	lda <V
	sta (:bp2),y
	iny
	lda >V
	sta (:bp2),y

	txa:pha
	clc
	@readfile F, #135
	pla:tax

; optimize OK (loadmid.inc), line = 39

	lda V+1
	bne @+
	lda V
	cmp #$04
@
	jeq l_0294
	jmp b_0277					; break
l_0294

; optimize FAIL ('READLONGBI', loadmid.inc), line = 40

	jsr READLONGBI
	lda READLONGBI.RESULT
	sta LEN
	lda READLONGBI.RESULT+1
	sta LEN+1
	lda READLONGBI.RESULT+2
	sta LEN+2
	lda READLONGBI.RESULT+3
	sta LEN+3

; optimize OK (loadmid.inc), line = 41

	lda CHUNKTAG+3
	eor #$64
	jne l_02AB
	lda CHUNKTAG+2
	eor #$68
	jne l_02AB
	lda CHUNKTAG+1
	eor #$54
	jne l_02AB
	lda CHUNKTAG
	eor #$4D
	jne l_02AB

; optimize FAIL ('READWORDBI', loadmid.inc), line = 43

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta FORMAT

; optimize OK (loadmid.inc), line = 44

	jeq l_02CE
	cmp #$01
	jeq l_02CE
	lda #$64
	sta RESULT
	jmp @exit					; exit
l_02CE

; optimize FAIL ('READWORDBI', loadmid.inc), line = 45

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta TOTALTRACKS

; optimize FAIL ('READWORDBI', loadmid.inc), line = 46

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta V
	lda READWORDBI.RESULT+1
	sta V+1

; optimize OK (loadmid.inc), line = 47

	jmi l_02F2

; optimize OK (loadmid.inc), line = 48

	lda V
	sta TICKDIV
	lda V+1
	sta TICKDIV+1
l_02F2
	jmp l_0303
l_02AB

; optimize OK (loadmid.inc), line = 63

	lda CHUNKTAG+3
	eor #$6B
	jne l_0313
	lda CHUNKTAG+2
	eor #$72
	jne l_0313
	lda CHUNKTAG+1
	eor #$54
	jne l_0313
	lda CHUNKTAG
	eor #$4D
	jne l_0313

; optimize FAIL (0, loadmid.inc), line = 65

	inc TRACKCOUNT

; optimize OK (loadmid.inc), line = 67

	mwy TRKDATA :bp2
	ldy #$00
	tya
	sta (:bp2),y

; optimize OK (loadmid.inc), line = 68

	ldy #$04
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (loadmid.inc), line = 69

	ldy #$01
	lda _BANK
	sta (:bp2),y

; optimize OK (loadmid.inc), line = 70

	iny
	lda _ADR
	sta (:bp2),y
	iny
	lda _ADR+1
	sta (:bp2),y

; -------------------  ASM Block 00000057  -------------------

 ldy _bank \ lda $100,y \ sta PORTB 
; --- WhileProlog
	jmp l_032D
l_032E

; optimize FAIL (':TMP', loadmid.inc), line = 76

	lda LOADPROCESS
	sta :TMP+1
	lda LOADPROCESS+1
	sta :TMP+2
	lda #$4C
	sta :TMP
	inx
	mva TRACKCOUNT :STACKORIGIN,x
	jsr :TMP

; optimize FAIL ('MEMBOUNDCHECK', loadmid.inc), line = 77

	jsr MEMBOUNDCHECK
	lda SYSTEM.IORESULT
	cmp #$01
	jeq l_0345
	lda #$65
	sta RESULT
	jmp @exit					; exit
l_0345

; optimize OK (loadmid.inc), line = 79

	lda _ADR+1
	cmp #$D8
	jcc l_035D
	lda #$00
	sta LOADSIZE
	lda #$FF
	sta LOADSIZE+1
	jmp l_036B
l_035D

; optimize OK (loadmid.inc), line = 80

	lda _ADR+1
	cmp #$C0
	jcc l_037C
	lda #$00
	sta LOADSIZE
	lda #$D0
	sta LOADSIZE+1
	jmp l_038A
l_037C

; optimize OK (loadmid.inc), line = 81

	lda _ADR+1
	cmp #$A8
	jcc l_039B
	lda #$00
	sta LOADSIZE
	lda #$C0
	sta LOADSIZE+1
	jmp l_03A9
l_039B

; optimize OK (loadmid.inc), line = 82

	lda _ADR+1
	cmp #$40
	jcc l_03BA
	lda #$00
	sta LOADSIZE
	lda #$80
	sta LOADSIZE+1
l_03BA
l_03A9
l_038A
l_036B

; optimize OK (loadmid.inc), line = 83

	lda LOADSIZE
	sub _ADR
	sta LOADSIZE
	lda LOADSIZE+1
	sbc _ADR+1
	sta LOADSIZE+1

; optimize OK (loadmid.inc), line = 84

	ora LOADSIZE
	jne l_03D4
	jmp c_032E					; continue
l_03D4

; optimize OK (loadmid.inc), line = 85

	.LOCAL
	lda #$00
	sub LEN+3
	bne L4
	lda #$00
	cmp LEN+2
	bne L1
	lda LOADSIZE+1
	cmp LEN+1
	bne L1
	lda LOADSIZE
	cmp LEN
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_03E8
	jeq l_03E8
	lda LEN
	sta LOADSIZE
	lda LEN+1
	sta LOADSIZE+1
l_03E8

; optimize OK (loadmid.inc), line = 87

	lda _ADR+1
	cmp #$C0
	jcc l_0400

; optimize OK (loadmid.inc), line = 89

	lda RBUF
	sta BGET.DEST
	lda RBUF+1
	sta BGET.DEST+1
	jsr BGET

; optimize OK (loadmid.inc), line = 90

	lda RBUF
	sta SYSTEM.MOVE_010A.SOURCE
	lda RBUF+1
	sta SYSTEM.MOVE_010A.SOURCE+1
	lda _PTR
	sta SYSTEM.MOVE_010A.DEST
	lda _PTR+1
	sta SYSTEM.MOVE_010A.DEST+1
	lda V
	sta SYSTEM.MOVE_010A.COUNT
	lda V+1
	sta SYSTEM.MOVE_010A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_010A
	m@INLINE
	.endl
	jmp l_0414
l_0400

; optimize OK (loadmid.inc), line = 93

	lda _PTR
	sta BGET.DEST
	lda _PTR+1
	sta BGET.DEST+1
	jsr BGET
l_0414

; optimize OK (loadmid.inc), line = 95

	lda V+1
	cmp LOADSIZE+1
	bne @+
	lda V
	cmp LOADSIZE
@
	jeq l_0429
	lda SYSTEM.IORESULT
	sta RESULT
	jmp @exit					; exit
l_0429

; optimize OK (loadmid.inc), line = 97

	lda _ADR
	add V
	sta _ADR
	lda _ADR+1
	adc V+1
	sta _ADR+1

; optimize OK (loadmid.inc), line = 98

	lda LEN
	sub V
	sta LEN
	lda LEN+1
	sbc V+1
	sta LEN+1
	lda LEN+2
	sbc #$00
	sta LEN+2
	lda LEN+3
	sbc #$00
	sta LEN+3
c_032E
l_032D

; optimize OK (loadmid.inc), line = 74

	lda LEN+3
	bmi @+
	ora LEN+2
	ora LEN+1
	ora LEN
	jne l_032E
@

; optimize OK (loadmid.inc), line = 101

	lda TRKDATA
	add #$09
	sta TRKDATA
	scc
	inc TRKDATA+1
l_0313
l_0303
l_0276

; optimize FAIL (1, loadmid.inc), line = 36

	inx
	ldy #1
	lda SYSTEM.IORESULT
	cmp #$01
	beq @+
	dey
@
	sty :STACKORIGIN,x
	lda F
	sta SYSTEM.EOF.F
	lda F+1
	sta SYSTEM.EOF.F+1
	jsr SYSTEM.EOF
	inx
	mva SYSTEM.EOF.RESULT :STACKORIGIN,x
	jsr notBOOLEAN
	jsr andAL_CL
	dex
	dex
	ldy #1
	lda TRACKCOUNT
	cmp TOTALTRACKS
	bcc @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	sta :STACKORIGIN+1,x
	jne l_0277
b_0277
; CloseFile

	txa:pha
	clc
	@closefile F
	pla:tax

; optimize OK (loadmid.inc), line = 105

	lda #$00
	sta RESULT
@exit

; ------------------------------------------------------------

FN	= DATAORIGIN+$016B
RESULT	= DATAORIGIN+$016D
LOADBUF_SIZE	= $4000
.var F	= DATAORIGIN+$016E .word
TRACKCOUNT	= DATAORIGIN+$017A
CHUNKTAG	= DATAORIGIN+$017B
V	= DATAORIGIN+$017F
TOP	= DATAORIGIN+$0181
ENDADR	= DATAORIGIN+$0183
LOADSIZE	= DATAORIGIN+$0185
LEN	= DATAORIGIN+$0187
TRKDATA	= DATAORIGIN+$018B
TRKDATA.STATUS	= DATAORIGIN+$0000
TRKDATA.BANK	= DATAORIGIN+$0001
TRKDATA.PTR	= DATAORIGIN+$0002
TRKDATA.TRACKTIME	= DATAORIGIN+$0004
TRKDATA._EVENT	= DATAORIGIN+$0008
adr.RBUF	= $4000
.var RBUF	= adr.RBUF .word

@VarData	= FN
@VarDataSize	= 32

	rts						; ret
.endl

.local	SETTEMPO					; PROCEDURE

; optimize OK (settempo.inc), line = 10

	lda _TIMERSTATUS
	eor #$80
	sta _TIMERSTATUS

; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 13

	inx
	mva MS_PER_QNOTE :STACKORIGIN,x
	mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
	mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
	mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva TEMPOSHIFT :STACKORIGIN,x
	mva TEMPOSHIFT+1 :STACKORIGIN+STACKWIDTH,x
	mva TEMPOSHIFT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva TEMPOSHIFT+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr addEAX_ECX
	mva TICKDIV :STACKORIGIN,x
	mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr divmulINT.DIV
	dex
	lda :STACKORIGIN,x
	sta _FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta _FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta _FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta _FREQ+3

; optimize FAIL ('@I2F_m', settempo.inc), line = 14

	mva _FREQ :STACKORIGIN,x
	mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$24 :STACKORIGIN+STACKWIDTH,x
	mva #$74 :STACKORIGIN+STACKWIDTH*2,x
	mva #$49 :STACKORIGIN+STACKWIDTH*3,x
	jsr @I2F_m
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta FREQ+3

; optimize FAIL ('@FDIV', settempo.inc), line = 15

	mva #$00 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$80 :STACKORIGIN+STACKWIDTH*2,x
	mva #$3F :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta FREQ+3

; optimize FAIL ('@FDIV', settempo.inc), line = 24

	mva #$F5 :STACKORIGIN,x
	mva #$FA :STACKORIGIN+STACKWIDTH,x
	mva #$7A :STACKORIGIN+STACKWIDTH*2,x
	mva #$43 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta RATIO
	lda :STACKORIGIN+STACKWIDTH,x
	sta RATIO+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta RATIO+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta RATIO+3

; optimize FAIL ('@F2I', settempo.inc), line = 25

	mva #$01 :STACKORIGIN,x
	inx
	mva RATIO :STACKORIGIN,x
	mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
	mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
	mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @F2I
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
	lda :STACKORIGIN-1,x
	add :STACKORIGIN,x
	sta _RATIO
	dex
	dex

; optimize OK (settempo.inc), line = 26

	lda _RATIO
	cmp #$10
	jcc l_04C2
	lda #$00
	sta RATIO
	sta RATIO+1
	lda #$70
	sta RATIO+2
	lda #$41
	sta RATIO+3
l_04C2

; optimize OK (settempo.inc), line = 29

	lda _TIMERSTATUS
	and #$C0
	ora _RATIO
	sta _TIMERSTATUS

; optimize OK (settempo.inc), line = 30

	lda #$01
	sta _SUBCNT

; optimize FAIL ('@I2F', settempo.inc), line = 32

	inx
	mva #$00 :STACKORIGIN,x
	mva #$FA :STACKORIGIN+STACKWIDTH,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva _RATIO :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr @I2F
	jsr @FMUL
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @I2F_m
	jsr @FDIV
	dex
	jsr @FROUND
	jsr @F2I
	lda :STACKORIGIN,x
	sta FDIV
	dex

; optimize OK (settempo.inc), line = 39

	lda _TIMERSTATUS
	eor #$80
	sta _TIMERSTATUS

; -------------------  ASM Block 00000058  -------------------

    sei  // disable IRQ
  // reset POKEY
    lda #$00
    ldy #$03
    sta AUDCTL
    sta AUDC1
    sty SKCTL
  // setup TIMER1
    sta AUDCTL
    mva FDIV AUDF1
  // initialize IRQ for TIMER1
    // lda irqens
    // ora #$01
    // sta irqens
    // sta irqen
  // start timer strobe
    sta stimer

    cli  // enable IRQ
  
; ------------------------------------------------------------

FREQ	= DATAORIGIN+$0195
_FREQ	= DATAORIGIN+$0199
FDIV	= DATAORIGIN+$019D
RATIO	= DATAORIGIN+$019E
_RATIO	= DATAORIGIN+$01A2

@VarData	= FREQ
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PROCESSTRACK					; PROCEDURE | KEEP

	jmp l_04FC

.local	READB						; PROCEDURE | INLINE

	.MACRO m@INLINE

; optimize OK (processtrack.inc), line = 11

	ldy #$00
	lda (_PTR),y
	sta EVENT

; optimize FAIL (0, processtrack.inc), line = 12

	inc _ADR
	sne
	inc _ADR+1

; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 13

	jsr MEMBOUNDCHECK
	.ENDM
@exit
.endl

.local	READVARL					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000059  -------------------

    icl 'midfile/asms/readvar.asm'
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READ24						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000060  -------------------

    icl 'midfile/asms/read24bigendian.pas'
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTMIDI3					; PROCEDURE

; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 4

	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize FAIL ('m@INLINE', events.inc), line = 5

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl
	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize FAIL ('m@INLINE', events.inc), line = 6

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl
	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize OK (events.inc), line = 15

	lda EVENT
	jeq l_0537
	lda _EVENT
	and #$F0
	cmp #$90
	jne l_0537

; optimize OK (events.inc), line = 16

	lda _EVENT
	and #$0F
	tay
	lda MC6850.MC_BYTE
	sta adr.CHNVOLUME,y
l_0537
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTMIDI2					; PROCEDURE

; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 22

	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize FAIL ('m@INLINE', events.inc), line = 23

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl
	jsr MIDI_FIFO.FIFO_WRITEBYTE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTSYSEX					; PROCEDURE

; optimize FAIL ('READVARL', events.inc), line = 32

	jsr READVARL

; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 34

	jsr MIDI_FIFO.FIFO_WRITEBYTE

; --- WhileProlog
	jmp l_0556
l_0557

; optimize FAIL ('m@INLINE', events.inc), line = 40

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl

; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 42

	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize FAIL (0, events.inc), line = 46

	dec _TMP
l_0556

; optimize OK (events.inc), line = 38

	lda _TMP
	jne l_0557
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTMETA					; PROCEDURE

; optimize FAIL ('m@INLINE', events.inc), line = 58

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl

; optimize FAIL ('READVARL', events.inc), line = 59

	jsr READVARL

; optimize OK (events.inc), line = 61

	lda EVENT
	cmp #$2F
	jne l_0581

; optimize FAIL (0, events.inc), line = 63

	dec PLAYINGTRACKS

; optimize OK (events.inc), line = 64

	lda _STATUS
	ora #$40
	sta _STATUS
	jmp l_0599
l_0581

; optimize OK (events.inc), line = 66

	lda EVENT
	cmp #$51
	jne l_05AB

; optimize FAIL ('READ24', events.inc), line = 68

	jsr READ24

; optimize OK (events.inc), line = 69

	lda _DELTA
	sta MS_PER_QNOTE
	lda _DELTA+1
	sta MS_PER_QNOTE+1
	lda _DELTA+2
	sta MS_PER_QNOTE+2
	lda _DELTA+3
	sta MS_PER_QNOTE+3

; optimize FAIL ('SETTEMPO', events.inc), line = 70

	jsr SETTEMPO
	jmp l_05BB
l_05AB

; --- WhileProlog
	jmp l_05BD
l_05BE

; optimize FAIL (0, events.inc), line = 85

	dec _TMP

; optimize FAIL (0, events.inc), line = 86

	inc _ADR
	sne
	inc _ADR+1

; optimize FAIL ('MEMBOUNDCHECK', events.inc), line = 87

	jsr MEMBOUNDCHECK
l_05BD

; optimize OK (events.inc), line = 83

	lda _TMP
	jne l_05BE
l_05BB
l_0599
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_04FC

; -------------------  ASM Block 00000061  -------------------

 ldy _bank \ lda $100,y \ sta PORTB 
; --- RepeatUntilProlog
l_05D5

; optimize OK (processtrack.inc), line = 33

	lda _STATUS
	jmi l_05EB

; optimize FAIL ('READVARL', processtrack.inc), line = 35

	jsr READVARL

; optimize OK (processtrack.inc), line = 36

	lda _DELTA+3
	jmi l_05FD
	ora _DELTA+2
	ora _DELTA+1
	ora _DELTA
	jeq l_05FD

; optimize OK (processtrack.inc), line = 38

	lda _TRACKTIME
	add _DELTA
	sta _TRACKTIME
	lda _TRACKTIME+1
	adc _DELTA+1
	sta _TRACKTIME+1
	lda _TRACKTIME+2
	adc _DELTA+2
	sta _TRACKTIME+2
	lda _TRACKTIME+3
	adc _DELTA+3
	sta _TRACKTIME+3
	jmp b_05D5					; break
l_05FD
	jmp l_0611
l_05EB

; optimize OK (processtrack.inc), line = 43

	lda _STATUS
	and #$7F
	sta _STATUS
l_0611

; optimize OK (processtrack.inc), line = 45

	ldy #$00
	lda (_PTR),y
	jpl l_0634

; optimize FAIL ('m@INLINE', processtrack.inc), line = 47

	.local READB
	m@INLINE
	.endl
	lda EVENT
	sta _EVENT
	jmp l_0645
l_0634

; optimize OK (processtrack.inc), line = 50

	lda _EVENT
	sta EVENT
l_0645

; optimize OK (processtrack.inc), line = 52

	lda #$BF
	cmp _EVENT
	jcc l_065D

; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 54

	jsr EVENTMIDI3
	jmp l_0668
l_065D
	lda #$DF
	cmp _EVENT
	jcc l_067A

; optimize FAIL ('EVENTMIDI2', processtrack.inc), line = 56

	jsr EVENTMIDI2
	jmp l_0685
l_067A
	lda #$EF
	cmp _EVENT
	jcc l_0697

; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 58

	jsr EVENTMIDI3
	jmp l_06A2
l_0697
	lda #$F7
	cmp _EVENT
	jcc l_06B4

; optimize FAIL ('EVENTSYSEX', processtrack.inc), line = 60

	jsr EVENTSYSEX
	jmp l_06BF
l_06B4
	lda _EVENT
	cmp #$FF
	jne l_06D1

; optimize FAIL ('EVENTMETA', processtrack.inc), line = 61

	jsr EVENTMETA
l_06D1
l_06BF
l_06A2
l_0685
l_0668

; optimize OK (processtrack.inc), line = 63

	lda _STATUS
	and #$40
	jeq l_05D5
b_05D5

; optimize OK (processtrack.inc), line = 65

	lda _STATUS
	ora #$80
	sta _STATUS

; ------------------------------------------------------------

EVENT	= $FF
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PROCESSMIDI					; PROCEDURE

; optimize FAIL ('MIDI_FIFO.FIFO_PUSHDIRECT2MC6850', processmidi.inc), line = 29

	jsr MIDI_FIFO.FIFO_PUSHDIRECT2MC6850

; optimize OK (processmidi.inc), line = 31

	lda _TIMERSTATUS
	jpl l_070B
	jmp @exit					; exit
l_070B

; optimize OK (processmidi.inc), line = 32

	lda CTRK
	cmp TOTALTRACKS
	jne l_0722

; optimize OK (processmidi.inc), line = 34

	lda #$01
	sta CTRK

; optimize OK (processmidi.inc), line = 35

	lda MIDTRACKS
	sta CURTRACKPTR
	lda MIDTRACKS+1
	sta CURTRACKPTR+1
	jmp l_0735
l_0722

; optimize FAIL (0, processmidi.inc), line = 39

	inc CTRK

; optimize OK (processmidi.inc), line = 40

	lda CURTRACKPTR
	add #$09
	sta CURTRACKPTR
	scc
	inc CURTRACKPTR+1
l_0735

; -------------------  ASM Block 00000062  -------------------

// if _status and f_stop=0 then
    ldy #0
    lda (curTrackPtr),y
    and #f_stop
    bne skipProcessTrack

// if _totalTicks>=_trackTime then ProcessTrack;
    ldy #7
    lda _totalTicks+3
    sub (curTrackPtr),y
    bne L4
    lda _totalTicks+2
    dey
    sub (curTrackPtr),y
    bne L1
    lda _totalTicks+1
    dey
    sub (curTrackPtr),y
    bne L1
    lda _totalTicks
    dey
    sub (curTrackPtr),y
  L1:
    beq L5
    bcs L3
    lda #$ff
    bne L5
  L3:
    lda #$01
    bne L5
  L4:
    bvc L5
    eor #$ff
    ora #$01
  L5:
    jmi skipProcessTrack

  // copy current track data to work registers
    ldy #sizeOf_TMIDTrack-1
  loop:
    lda (curTrackPtr),y
    sta _trkRegs,y
    dey
    bpl loop

  
; optimize FAIL ('PROCESSTRACK', processmidi.inc), line = 92

	jsr PROCESSTRACK

; -------------------  ASM Block 00000063  -------------------

// store work registers in track data
    ldy #sizeOf_TMIDTrack-1
  loop2:
    lda _trkRegs,y
    sta (curTrackPtr),y
    dey
    bpl loop2

  skipProcessTrack:
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITTIMER					; PROCEDURE

; optimize OK (MIDFILES), line = 74

	lda #$00
	sta _TOTALTICKS
	sta _TOTALTICKS+1
	sta _TOTALTICKS+2
	sta _TOTALTICKS+3

; optimize OK (MIDFILES), line = 75

	sta TEMPOSHIFT
	sta TEMPOSHIFT+1
	sta TEMPOSHIFT+2
	sta TEMPOSHIFT+3

; optimize OK (MIDFILES), line = 76

	lda #$01
	sta _TIMERSTATUS

; optimize OK (MIDFILES), line = 77

	lda TOTALTRACKS
	sta CTRK

; optimize OK (MIDFILES), line = 78

	sta PLAYINGTRACKS

; -------------------  ASM Block 00000064  -------------------

    sei
    mva <INT_TIMER VTIMR1
    mva >INT_TIMER VTIMR1+1
  // reset POKEY
    lda #$00
    ldy #$03
    sta AUDCTL
    sta AUDC1
    sty SKCTL
  // setup TIMER1
    sta AUDCTL
    mva 83 AUDF1
  // initialize IRQ for TIMER1
    lda irqens
    ora #$01
    sta irqens
    sta irqen
  // start timer strobe
    sta stimer

    cli  // enable IRQ
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NULLLOADPRCS					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize OK (MIDFILES), line = 111

	lda #$00
	sta OLDTIMERVEC
	sta OLDTIMERVEC+1

; optimize OK (MIDFILES), line = 112

	lda <NULLLOADPRCS
	sta LOADPROCESS
	lda >NULLLOADPRCS
	sta LOADPROCESS+1

; optimize OK (MIDFILES), line = 113

	lda #$80
	sta TICKDIV
	lda #$01
	sta TICKDIV+1

; optimize OK (MIDFILES), line = 114

	lda #$20
	sta MS_PER_QNOTE
	lda #$A1
	sta MS_PER_QNOTE+1
	lda #$07
	sta MS_PER_QNOTE+2
	lda #$00
	sta MS_PER_QNOTE+3

; optimize OK (MIDFILES), line = 115

	sta TOTALTRACKS

; optimize OK (MIDFILES), line = 116

	sta CTRK

; optimize OK (MIDFILES), line = 117

	lda #$80
	sta _TIMERSTATUS

	lda VTIMR1
	sta OLDTIMERVEC
	lda VTIMR1+1
	sta OLDTIMERVEC+1

	rts

; ------------------------------------------------------------

F_COUNTER	= $80
F_TICK	= $40
F_FLAGS	= $C0
F_RATIO	= $0F
F_SKIPDELTA	= $80
F_STOP	= $40
_TRKREGS	= $E0
MID_0	= $00
MID_1	= $01
ERR_UNSUPPORTED_FORMAT	= $64
ERR_NOT_ENOUGHT_MEMORY	= $65
TAG_MTHD	= $6468544D
TAG_MTRK	= $6B72544D
SIZEOF_TMIDTRACK	= $09
CURTRACKPTR	= $DC
CTRK	= $DE
PLAYINGTRACKS	= $DF
_TOTALTICKS	= $F0
_SUBCNT	= $F4
_TIMERSTATUS	= $F5
_DELTA	= $F6
_TMP	= $F6
_STATUS	= $E0
_BANK	= $E1
_PTR	= $E2
_ADR	= $E2
_TRACKTIME	= $E4
_EVENT	= $E8
MIDDATA	= DATAORIGIN+$0148
adr.MIDTRACKS	= [DATAORIGIN+$014A] .array [1]
.var MIDTRACKS	= adr.MIDTRACKS .word
FORMAT	= DATAORIGIN+$014B
TOTALTRACKS	= DATAORIGIN+$014C
TICKDIV	= DATAORIGIN+$014D
MS_PER_QNOTE	= DATAORIGIN+$014F
adr.CHNVOLUME	= [DATAORIGIN+$0153] .array [16]
.var CHNVOLUME	= adr.CHNVOLUME .word
OLDTIMERVEC	= DATAORIGIN+$0163
LOADPROCESS	= DATAORIGIN+$0165
TEMPOSHIFT	= DATAORIGIN+$0167

.endl							; UNIT MIDFILES

; ------------------------------------------------------------

.local	MISC						; UNIT

.local	DETECTMEM					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000072  -------------------

	txa:pha

bsav	= @buf

ext_b	= $4000		;cokolwiek z zakresu $4000-$7FFF

	ldy #0
mov	mva copy,y detect,y
	iny
	cpy #.sizeof(detect)
	bne mov

	jsr detect

	jmp stop

copy

.local	detect,$0600

	lda portb
	pha

	lda:rne vcount

;	lda #$ff
;	sta portb

	lda ext_b
	pha

	ldx #$0f	;zapamiętanie bajtów ext (z 16 bloków po 64k)
_p0	jsr setpb
	lda ext_b
	sta bsav,x
	dex
	bpl _p0

	ldx #$0f	;wyzerowanie ich (w oddzielnej pętli, bo nie wiadomo
_p1	jsr setpb	;które kombinacje bitów PORTB wybierają te same banki)
	lda #$00
	sta ext_b
	dex
	bpl _p1

	stx portb	;eliminacja pamięci podstawowej
	stx ext_b
	stx $00		;niezbędne dla niektórych rozszerzeń do 256k

	ldy #$00	;pętla zliczająca bloki 64k
	ldx #$0f
_p2	jsr setpb
	lda ext_b	;jeśli ext_b jest różne od zera, blok 64k już zliczony
	bne _n2

	dec ext_b	;w przeciwnym wypadku zaznacz jako zliczony

	lda ext_b	;sprawdz, czy sie zaznaczyl; jesli nie -> cos nie tak ze sprzetem
	bpl _n2

	lda portb	;wpisz wartość PORTB do tablicy dla banku 0

	and #$fe

	sta adr.banks,y
	eor #%00000100	;uzupełnij wartości dla banków 1, 2, 3
	sta adr.banks+1,y
	eor #%00001100
	sta adr.banks+2,y
	eor #%00000100
	sta adr.banks+3,y
	iny
	iny
	iny
	iny

_n2	dex
	bpl _p2

	ldx #$0f	;przywrócenie zawartości ext
_p3	jsr setpb
	lda bsav,x
	sta ext_b
	dex
	bpl _p3

	stx portb	;X=$FF

	pla
	sta ext_b

	pla
	sta portb

	sty Result

	rts

; podprogramy
setpb	txa		;zmiana kolejności bitów: %0000dcba -> %cba000d0
	lsr
	ror
	ror
	ror
	adc #$01	;ustawienie bitu nr 1 w zaleznosci od stanu C
	ora #$01	;ustawienie bitu sterującego OS ROM na wartosc domyslna
	sta portb
	rts

.endl

stop	pla:tax


@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01A3
	rts						; ret
.endl

; ------------------------------------------------------------

adr.BANKS	= $0101
.var BANKS	= adr.BANKS .word
DETECTOS	= $FFF7

.endl							; UNIT MISC

; ------------------------------------------------------------

.local	CIO						; UNIT

.local	OPN						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000075  -------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #$03		;komenda: OPEN
	sta iccmd,x

	inw device		;omin bajt z dlugoscia STRING-a

	lda device		;adres nazwy pliku
	sta icbufa,x
	lda device+1
	sta icbufa+1,x

	lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
	sta icax1,x

	lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
	sta icax2,x

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	pla:tax

; ------------------------------------------------------------

CHN	= DATAORIGIN+$01A4
AX1	= DATAORIGIN+$01A5
AX2	= DATAORIGIN+$01A6
DEVICE	= DATAORIGIN+$01A7

@VarData	= CHN
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLS						; PROCEDURE | ASSEMBLER
	sta CHN

; -------------------  ASM Block 00000076  -------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #$0c		;komenda: CLOSE
	sta iccmd,x

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	pla:tax

; ------------------------------------------------------------

CHN	= DATAORIGIN+$01A9

@VarData	= CHN
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

.endl							; UNIT CIO

.local	SETCOLORS					; PROCEDURE

; optimize OK (helpers.inc), line = 35

	lda PLAYERSTATUS
	and #$01
	sta :STACKORIGIN+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$01
	beq @+
	dey
@
	sty :STACKORIGIN+9
	lda #$05
	sta :ecx
	lda :STACKORIGIN+9
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda <adr.COLORS
	add :eax
	sta P
	lda >adr.COLORS
	adc :eax+1
	sta P+1

; optimize OK (helpers.inc), line = 36

	lda P
	sta :bp2
	lda P+1
	sta :bp2+1
	ldy #$04
	mva:rpl (:bp2),y $D016,y-

; optimize OK (helpers.inc), line = 37

	lda P
	sta :bp2
	lda P+1
	sta :bp2+1
	ldy #$04
	mva:rpl (:bp2),y $02C4,y-

; ------------------------------------------------------------

P	= DATAORIGIN+$01DD

@VarData	= P
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTTEXT						; PROCEDURE

; optimize OK (helpers.inc), line = 45

	mwy S :bp2
	ldy #$00
	lda (:bp2),y
	sta L

; --- WhileProlog
	jmp l_07B0
l_07B1

; optimize OK (helpers.inc), line = 48

	inc S
	sne
	inc S+1

; optimize OK (helpers.inc), line = 49

	mwy S :bp2
	ldy #$00
	lda (:bp2),y
	sta C

; optimize OK (helpers.inc), line = 50

	cmp #$20
	jcs l_07CA
	add #$40
	sta C
	jmp l_07D5
l_07CA

; optimize OK (helpers.inc), line = 51

	lda C
	cmp #$60
	jcs l_07E7
	sub #$20
	sta C
l_07E7
l_07D5

; optimize OK (helpers.inc), line = 52

	lda C
	ora PUTTEXTINVERT
	ldy SCRADR+1
	sty :bp+1
	ldy SCRADR
	sta (:bp),y

; optimize FAIL (0, helpers.inc), line = 53

	inc SCRADR
	sne
	inc SCRADR+1

; optimize FAIL (0, helpers.inc), line = 54

	dec L
l_07B0

; optimize OK (helpers.inc), line = 46

	jne l_07B1

; ------------------------------------------------------------

S	= DATAORIGIN+$01DF
L	= DATAORIGIN+$01E1
C	= DATAORIGIN+$01E2

@VarData	= S
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTHEX						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000085  -------------------

  icl 'asms/puthex.a65'

; ------------------------------------------------------------

V	= DATAORIGIN+$01E3
N	= DATAORIGIN+$01E5

@VarData	= V
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTINT						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000086  -------------------

  icl 'asms/int2str.a65'

; ------------------------------------------------------------

VALUE	= DATAORIGIN+$01E6

@VarData	= VALUE
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RESET_MIDI					; PROCEDURE

; optimize OK (helpers.inc), line = 77

	lda GM_RESET
	sta MIDI_FIFO.FIFO_SEND.DATA
	lda GM_RESET+1
	sta MIDI_FIFO.FIFO_SEND.DATA+1
	lda #$06
	sta MIDI_FIFO.FIFO_SEND.LEN
	jsr MIDI_FIFO.FIFO_SEND
	jsr MIDI_FIFO.FIFO_FLUSH
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARWORKAREA					; PROCEDURE

; optimize OK (helpers.inc), line = 82

	lda #$72
	sta SYSTEM.FILLCHAR_0109.A
	lda #$34
	sta SYSTEM.FILLCHAR_0109.A+1
	lda #$48
	sta SYSTEM.FILLCHAR_0109.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR_0109.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_0109.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_0109
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ISLOOPED					; PROCEDURE

; optimize OK (helpers.inc), line = 87

	lda #$BA
	sta SCRADR
	lda #$37
	sta SCRADR+1

; optimize OK (helpers.inc), line = 88

	lda PLAYERSTATUS
	and #$04
	jeq l_083C

; optimize OK (helpers.inc), line = 89

	lda #$02
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT
	jmp l_0848
l_083C

; optimize OK (helpers.inc), line = 91

	lda #$08
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT
l_0848
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARSTATUS					; PROCEDURE

; optimize OK (helpers.inc), line = 96

	lda #$00
	ldy #$3B
	sta:rpl $37BA,y-

; optimize FAIL ('ISLOOPED', helpers.inc), line = 97

	jsr ISLOOPED

; optimize OK (helpers.inc), line = 98

	ldy FN+1
	sty :bp+1
	ldy FN
	lda (:bp),y
	cmp #$11
	jcc l_0862
	mwy FN :bp2
	ldy #$00
	lda #$10
	sta (:bp2),y
l_0862

; optimize OK (helpers.inc), line = 99

	mwy FN :bp2
	ldy #$00
	lda #$F6
	sub (:bp2),y
	sta SCRADR
	lda #$37
	sbc #$00
	sta SCRADR+1
	lda FN
	sta PUTTEXT.S
	lda FN+1
	sta PUTTEXT.S+1
	jsr PUTTEXT
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARUVMETERS					; PROCEDURE

; optimize OK (helpers.inc), line = 104

	lda PLAYERSTATUS
	and #$02
	jeq l_0896

; optimize OK (helpers.inc), line = 106

	lda #$00
	sta CHN

; --- RepeatUntilProlog
l_089C

; optimize OK (helpers.inc), line = 108

	lda CHN
	asl @
	tay
	lda adr.CHANNELSCRADR,y
	sta SCRADR
	lda adr.CHANNELSCRADR+1,y
	sta SCRADR+1

; optimize OK (helpers.inc), line = 109

	lda SCRADR
	sta :bp2
	lda SCRADR+1
	sta :bp2+1
	lda #$40
	ldy #$03
	sta:rpl (:bp2),y-

; optimize FAIL (0, helpers.inc), line = 110

	inc CHN

; optimize OK (helpers.inc), line = 111

	lda CHN
	cmp #$10
	jne l_089C
l_0896
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EXIT2DOS					; PROCEDURE

; optimize OK (helpers.inc), line = 118

	lda #$00
	jsr CIO.CLS
	lda #$00
	sta CIO.OPN.CHN
	lda #$0C
	sta CIO.OPN.AX1
	lda #$00
	sta CIO.OPN.AX2
	lda #$0E
	sta CIO.OPN.DEVICE
	lda #$80
	sta CIO.OPN.DEVICE+1
	jsr CIO.OPN
	lda #$01
	sta SOUNDR
	lda #$00
	jmp @halt
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSPLAYING					; PROCEDURE

; optimize OK (status.inc), line = 3

	lda #$CE
	sta SCRADR
	lda #$37
	sta SCRADR+1

; optimize OK (status.inc), line = 4

	lda MIDFILES.TOTALTRACKS
	jeq l_08E7

; optimize OK (status.inc), line = 6

	lda #$12
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (status.inc), line = 7

	lda ISSTOPPED
	jeq l_08F6

; optimize FAIL ('MIDFILES.INITTIMER', status.inc), line = 9

	jsr MIDFILES.INITTIMER

; optimize OK (status.inc), line = 10

	lda #$00
	sta ISSTOPPED
	jmp l_0905
l_08F6

; optimize OK (status.inc), line = 13

	lda MIDFILES._TIMERSTATUS
	and #$7F
	sta MIDFILES._TIMERSTATUS
l_0905
	jmp l_091B
l_08E7

; optimize OK (status.inc), line = 17

	lda #$1D
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT
l_091B
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSPAUSE					; PROCEDURE

; optimize OK (status.inc), line = 23

	lda ISSTOPPED
	jeq l_092D
	jmp @exit					; exit
l_092D

; optimize OK (status.inc), line = 24

	lda #$CE
	sta SCRADR
	lda #$37
	sta SCRADR+1

; optimize OK (status.inc), line = 25

	lda #$28
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (status.inc), line = 26

	lda MIDFILES._TIMERSTATUS
	ora #$80
	sta MIDFILES._TIMERSTATUS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSSTOPPED					; PROCEDURE

; optimize OK (status.inc), line = 31

	lda #$01
	sta ISSTOPPED

; optimize OK (status.inc), line = 32

	lda #$CE
	sta SCRADR
	lda #$37
	sta SCRADR+1

; optimize OK (status.inc), line = 33

	lda #$33
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (status.inc), line = 34

	lda MIDFILES._TIMERSTATUS
	ora #$80
	sta MIDFILES._TIMERSTATUS

; optimize OK (status.inc), line = 35

	lda #$00
	sta MIDFILES._TOTALTICKS
	sta MIDFILES._TOTALTICKS+1
	sta MIDFILES._TOTALTICKS+2
	sta MIDFILES._TOTALTICKS+3
	lda #$01
	sta MIDFILES._SUBCNT

; optimize OK (status.inc), line = 36

	sei
	mva MIDFILES.OLDTIMERVEC VTIMR1
	mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
	lda irqens
	and #$fe
	sta irqens
	sta irqen
	cli

; optimize FAIL ('RESET_MIDI', status.inc), line = 37

	jsr RESET_MIDI

; optimize OK (status.inc), line = 38

	lda #$00
	sta SYSTEM.MOVE_010A.SOURCE
	lda #$3C
	sta SYSTEM.MOVE_010A.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_010A.DEST
	lda #$3E
	sta SYSTEM.MOVE_010A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_010A.COUNT
	lda #$02
	sta SYSTEM.MOVE_010A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_010A
	m@INLINE
	.endl

; optimize OK (status.inc), line = 39

	lda #$00
	sta CHN

; optimize FAIL ('CLEARUVMETERS', status.inc), line = 40

	jsr CLEARUVMETERS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSLOADING					; PROCEDURE

; optimize OK (status.inc), line = 45

	lda #$D0
	sta SCRADR
	lda #$37
	sta SCRADR+1

; optimize OK (status.inc), line = 46

	lda #$3E
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYNMI						; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000087  -------------------

  icl 'asms/nmi.a65'

	rti						; ret
.endl

.local	INIT						; PROCEDURE

; optimize FAIL ('MC6850.MC6850_RESET', init.inc), line = 13

	jsr MC6850.MC6850_RESET

; optimize OK (init.inc), line = 14

	lda #$96
	jsr MC6850.MC6850_INIT

; optimize OK (init.inc), line = 16

	lda #$00
	sta DMACTL

; optimize FAIL ('MIDI_FIFO.FIFO_RESET', init.inc), line = 18

	jsr MIDI_FIFO.FIFO_RESET

; optimize OK (init.inc), line = 21

	lda #$30
	sta CHBASE

; optimize FAIL ('CLEARWORKAREA', init.inc), line = 22

	jsr CLEARWORKAREA

; optimize OK (init.inc), line = 23

	lda #$00
	sta $0230
	lda #$34
	sta $0230+1

; optimize OK (init.inc), line = 24

	lda #$00
	sta FN
	lda #$80
	sta FN+1

; optimize OK (init.inc), line = 26

	lda #$9E
	sta SCRADR
	lda #$37
	sta SCRADR+1
	lda #$47
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize FAIL ('CLEARSTATUS', init.inc), line = 27

	jsr CLEARSTATUS

; -------------------  ASM Block 00000088  -------------------

 lda #$fe \ sta $100 
; optimize FAIL ('MISC.DETECTMEM', init.inc), line = 31

	jsr MISC.DETECTMEM
	lda MISC.DETECTMEM.RESULT
	sta TOTALXMS

; optimize OK (init.inc), line = 32

	lda #$10
	sta :ecx
	lda TOTALXMS
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add #$21
	sta MEMAVAILABLE
	lda :eax+1
	adc #$00
	sta MEMAVAILABLE+1

; optimize OK (init.inc), line = 33

	lda #$EC
	sta SCRADR
	lda #$37
	sta SCRADR+1

; optimize OK (init.inc), line = 34

	lda #$59
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (init.inc), line = 35

	lda MEMAVAILABLE
	sta PUTINT.VALUE
	lda MEMAVAILABLE+1
	sta PUTINT.VALUE+1
	jsr PUTINT

; optimize OK (init.inc), line = 36

	lda #$60
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (init.inc), line = 38

	lda #$00
	sta MIDFILES.MIDTRACKS
	lda #$3E
	sta MIDFILES.MIDTRACKS+1

; optimize OK (init.inc), line = 39

	lda #$00
	sta MIDFILES.MIDDATA
	lda #$40
	sta MIDFILES.MIDDATA+1

; optimize OK (init.inc), line = 41

	lda #$00
	sta MIDFILES.CTRK

l_09C5
; --- ForToDoCondition
	lda MIDFILES.CTRK
	cmp #$10
	jcs l_09D3

; optimize OK (init.inc), line = 42

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$9A
	sta :STACKORIGIN+10
	lda #$34
	sta :STACKORIGIN+STACKWIDTH+10
	lda MIDFILES.CTRK
	jsr @mul40
	add :STACKORIGIN+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc :eax+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+10
	sta adr.CHANNELSCRADR,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.CHANNELSCRADR+1,y

; --- ForToDoEpilog
	inc MIDFILES.CTRK
	jne l_09C5
l_09D3

; optimize OK (init.inc), line = 44

	lda NMIVEC
	sta OLDNMIVEC
	lda NMIVEC+1
	sta OLDNMIVEC+1

; optimize OK (init.inc), line = 45

	lda #$00
	sta NMIEN
	lda <MYNMI
	sta NMIVEC
	lda >MYNMI
	sta NMIVEC+1
	lda #$40
	sta NMIEN

; optimize OK (init.inc), line = 47

	lda _TM
	sta OTM

; optimize FAIL ('SETCOLORS', init.inc), line = 48

	jsr SETCOLORS
	lda #$22
	sta DMACTL

; optimize OK (init.inc), line = 49

	lda #$01
	sta ISSTOPPED

; ------------------------------------------------------------

MEMAVAILABLE	= DATAORIGIN+$01E8

@VarData	= MEMAVAILABLE
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADSONG					; PROCEDURE

	jmp l_0A10

.local	LOADPRC						; PROCEDURE
	sta V

; optimize OK (load.inc), line = 8

	lda #$59
	add T
	sta $37CE

; optimize FAIL (0, load.inc), line = 9

	inc T
	lda T
	cmp #$04
	jne l_0A32
	lda #$00
	sta T
l_0A32

; optimize OK (load.inc), line = 10

	lda V
	jeq l_0A4B

; optimize OK (load.inc), line = 12

	lda #$D8
	sta SCRADR
	lda #$37
	sta SCRADR+1

; optimize OK (load.inc), line = 13

	lda V
	sub #$01
	sta PUTINT.VALUE
	lda #$00
	sbc #$00
	sta PUTINT.VALUE+1
	jsr PUTINT
	ldy SCRADR+1
	sty :bp+1
	ldy SCRADR
	lda #$0F
	sta (:bp),y
	inc SCRADR
	sne
	inc SCRADR+1

; optimize OK (load.inc), line = 14

	lda MIDFILES.TOTALTRACKS
	sta PUTINT.VALUE
	lda #$00
	sta PUTINT.VALUE+1
	jsr PUTINT
	inc SCRADR
	sne
	inc SCRADR+1
l_0A4B

; ------------------------------------------------------------

V	= DATAORIGIN+$01EC

@VarData	= V
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0A10

; optimize OK (load.inc), line = 19

	lda #$BA
	sta SCRADR
	lda #$37
	sta SCRADR+1
	lda FN
	sta PUTTEXT.S
	lda FN+1
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize FAIL ('STATUSLOADING', load.inc), line = 20

	jsr STATUSLOADING

; optimize OK (load.inc), line = 21

	lda <LOADPRC
	sta MIDFILES.LOADPROCESS
	lda >LOADPRC
	sta MIDFILES.LOADPROCESS+1
	lda #$00
	sta T

; optimize OK (load.inc), line = 22

	lda FN
	sta MIDFILES.LOADMID.FN
	lda FN+1
	sta MIDFILES.LOADMID.FN+1
	jsr MIDFILES.LOADMID
	lda MIDFILES.LOADMID.RESULT
	sta ERR

; optimize OK (load.inc), line = 23

	jeq l_0A92

; optimize OK (load.inc), line = 25

	lda #$CE
	sta SCRADR
	lda #$37
	sta SCRADR+1
	lda #$80
	sta PUTTEXTINVERT

; optimize OK (load.inc), line = 26

	lda ERR
	jmi l_0AAD

; optimize OK (load.inc), line = 27

	sta @CASETMP_0003
	cmp #$64
	jne l_0AB9
@

; optimize OK (load.inc), line = 28

	lda #$64
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

	jmp a_0003
l_0AB9
	cmp #$65
	jne l_0AC4
@

; optimize OK (load.inc), line = 29

	lda #$7A
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

l_0AC4
a_0003
	jmp l_0AD5
l_0AAD

; optimize OK (load.inc), line = 33

	lda #$90
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT
	lda ERR
	sta PUTINT.VALUE
	lda #$00
	sta PUTINT.VALUE+1
	jsr PUTINT
l_0AD5

; --- WhileProlog
l_0ADE

; optimize OK (load.inc), line = 35

	lda KEYB
	cmp #$FF
	jeq l_0ADE

; optimize OK (load.inc), line = 36

	lda #$00
	sta PUTTEXTINVERT

; optimize OK (load.inc), line = 37

	sta MIDFILES.TOTALTRACKS
	jmp @exit					; exit
l_0A92

; optimize OK (load.inc), line = 39

	lda #$00
	sta SYSTEM.MOVE_010A.SOURCE
	lda #$3E
	sta SYSTEM.MOVE_010A.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_010A.DEST
	lda #$3C
	sta SYSTEM.MOVE_010A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_010A.COUNT
	lda #$02
	sta SYSTEM.MOVE_010A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_010A
	m@INLINE
	.endl

; ------------------------------------------------------------

ERR	= DATAORIGIN+$01EA
T	= DATAORIGIN+$01EB
@CASETMP_0003	= DATAORIGIN+$01ED

@VarData	= ERR
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_00A6

; optimize FAIL ('INIT', MIDICar Player.pas), line = 56

	jsr INIT

; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 58

	jsr SYSTEM.PARAMCOUNT
	lda #$00
	cmp SYSTEM.PARAMCOUNT.RESULT
	jcs l_0B0A
@

; optimize OK (MIDICar Player.pas), line = 60

	lda #$01
	jsr SYSTEM.PARAMSTR
	lda SYSTEM.PARAMSTR.RESULT
	sta FN
	lda SYSTEM.PARAMSTR.RESULT+1
	sta FN+1

; optimize OK (MIDICar Player.pas), line = 61

	lda TOTALXMS
	sta MIDFILES._BANK

; optimize OK (MIDICar Player.pas), line = 62

	lda #$00
	sta MIDFILES._ADR
	lda #$40
	sta MIDFILES._ADR+1

; optimize FAIL ('LOADSONG', MIDICar Player.pas), line = 63

	jsr LOADSONG
l_0B0A

; optimize FAIL ('CLEARSTATUS', MIDICar Player.pas), line = 66

	jsr CLEARSTATUS

; optimize FAIL ('CLEARUVMETERS', MIDICar Player.pas), line = 67

	jsr CLEARUVMETERS

; optimize OK (MIDICar Player.pas), line = 70

	lda #$80
	sta PUTTEXTINVERT

; --- RepeatUntilProlog
l_0B24

; optimize FAIL ('MIDFILES.PROCESSMIDI', MIDICar Player.pas), line = 72

	jsr MIDFILES.PROCESSMIDI

; optimize OK (MIDICar Player.pas), line = 73

	lda ISSTOPPED
	jne l_0B40
	lda MIDFILES.PLAYINGTRACKS
	jne l_0B40

; optimize FAIL ('STATUSSTOPPED', MIDICar Player.pas), line = 75

	jsr STATUSSTOPPED

; optimize OK (MIDICar Player.pas), line = 76

	lda PLAYERSTATUS
	and #$04
	jeq l_0B58

; optimize FAIL ('STATUSPLAYING', MIDICar Player.pas), line = 77

	jsr STATUSPLAYING
l_0B58
l_0B40

; optimize OK (MIDICar Player.pas), line = 80

	lda _TM
	cmp OTM
	jeq l_0B72

; optimize OK (MIDICar Player.pas), line = 82

	sta OTM

; optimize OK (MIDICar Player.pas), line = 83

	lda #$C0
	sta SCRADR
	lda #$37
	sta SCRADR+1
	lda <MIDFILES._TOTALTICKS
	sta PUTHEX.V
	lda >MIDFILES._TOTALTICKS
	sta PUTHEX.V+1
	lda #$08
	sta PUTHEX.N
	jsr PUTHEX

; optimize OK (uvmeters.inc), line = 1

	lda PLAYERSTATUS
	and #$02
	jeq l_0B96

; optimize OK (uvmeters.inc), line = 3

	lda #$00
	sta CHN

; --- RepeatUntilProlog
l_0B9C

; optimize OK (uvmeters.inc), line = 5

	lda CHN
	asl @
	tay
	lda adr.CHANNELSCRADR,y
	sta SCRADR
	lda adr.CHANNELSCRADR+1,y
	sta SCRADR+1

; optimize OK (uvmeters.inc), line = 6

	ldy CHN
	lda MIDFILES.adr.CHNVOLUME,y
	sta C

; optimize OK (uvmeters.inc), line = 7

	jeq l_0BBF

; optimize OK (uvmeters.inc), line = 9

	cmp #$05
	jcc l_0BD2
	sub #$04
	sta C
	jmp l_0BDD
l_0BD2
	lda #$00
	sta C
l_0BDD

; optimize OK (uvmeters.inc), line = 10

	ldy CHN
	lda C
	sta MIDFILES.adr.CHNVOLUME,y

; optimize OK (uvmeters.inc), line = 11

	lsr @
	and #$3C
	sta V

; -------------------  ASM Block 00000089  -------------------

        clc
        lda #<UVMETER_ADDR
        adc v
        sta $d6
        lda #>UVMETER_ADDR
        sta $d7
        ldy #3
      loop:
        lda ($d6),y
        sta ($d4),y
        dey
        bpl loop
      
l_0BBF

; optimize FAIL (0, uvmeters.inc), line = 29

	inc CHN

; optimize OK (uvmeters.inc), line = 30

	lda CHN
	cmp #$10
	jne l_0B9C
l_0B96
l_0B72

; optimize OK (keyboard.inc), line = 1

	lda KEYB
	cmp #$FF
	jeq l_0C21

; optimize OK (keyboard.inc), line = 3

	sta @CASETMP_0004
	cmp #$1C
	jne l_0C2D
@
	jmp b_0B24					; break

	jmp a_0004
l_0C2D
	cmp #$00
	jne l_0C36
@

; optimize OK (keyboard.inc), line = 7

	lda PLAYERSTATUS
	eor #$04
	sta PLAYERSTATUS

; optimize FAIL ('ISLOOPED', keyboard.inc), line = 8

	jsr ISLOOPED

	jmp a_0004
l_0C36
	cmp #$25
	jne l_0C4A
@

; optimize OK (keyboard.inc), line = 12

	lda PLAYERSTATUS
	eor #$02
	sta PLAYERSTATUS

; optimize OK (keyboard.inc), line = 13

	lda #$72
	sta SYSTEM.FILLCHAR_0109.A
	lda #$34
	sta SYSTEM.FILLCHAR_0109.A+1
	lda #$20
	sta SYSTEM.FILLCHAR_0109.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR_0109.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_0109.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_0109
	m@INLINE
	.endl

; optimize OK (keyboard.inc), line = 14

	lda PLAYERSTATUS
	and #$02
	jeq l_0C6E

; optimize FAIL ('CLEARUVMETERS', keyboard.inc), line = 15

	jsr CLEARUVMETERS
l_0C6E

	jmp a_0004
l_0C4A
	cmp #$27
	jne l_0C7B
@

; optimize OK (keyboard.inc), line = 19

	lda PLAYERSTATUS
	eor #$01
	sta PLAYERSTATUS

; optimize FAIL ('SETCOLORS', keyboard.inc), line = 20

	jsr SETCOLORS

	jmp a_0004
l_0C7B
	cmp #$0A
	jne l_0C8F
@

; optimize OK (keyboard.inc), line = 24

	lda MIDFILES._TIMERSTATUS
	jpl l_0CA5

; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 26

	jsr STATUSPLAYING
	jmp l_0CB0
l_0CA5

; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 27

	jsr STATUSPAUSE
l_0CB0

	jmp a_0004
l_0C8F
	cmp #$3E
	jne l_0CBA
@

; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 29

	jsr STATUSSTOPPED
	jmp a_0004
l_0CBA
	cmp #$0E
	beq @+
	cmp #$06
	beq @+
	cmp #$0F
	jne l_0CC8
@

; optimize OK (keyboard.inc), line = 32

	lda KEYB
	cmp #$0E
	jne l_0CDA
	lda MIDFILES.TEMPOSHIFT
	add #$20
	sta MIDFILES.TEMPOSHIFT
	lda MIDFILES.TEMPOSHIFT+1
	adc #$4E
	sta MIDFILES.TEMPOSHIFT+1
	lda MIDFILES.TEMPOSHIFT+2
	adc #$00
	sta MIDFILES.TEMPOSHIFT+2
	lda MIDFILES.TEMPOSHIFT+3
	adc #$00
	sta MIDFILES.TEMPOSHIFT+3
l_0CDA

; optimize OK (keyboard.inc), line = 33

	lda KEYB
	cmp #$06
	jne l_0CF0
	lda MIDFILES.TEMPOSHIFT
	sub #$20
	sta MIDFILES.TEMPOSHIFT
	lda MIDFILES.TEMPOSHIFT+1
	sbc #$4E
	sta MIDFILES.TEMPOSHIFT+1
	lda MIDFILES.TEMPOSHIFT+2
	sbc #$00
	sta MIDFILES.TEMPOSHIFT+2
	lda MIDFILES.TEMPOSHIFT+3
	sbc #$00
	sta MIDFILES.TEMPOSHIFT+3
l_0CF0

; optimize OK (keyboard.inc), line = 34

	lda KEYB
	cmp #$0F
	jne l_0D06
	lda #$00
	sta MIDFILES.TEMPOSHIFT
	sta MIDFILES.TEMPOSHIFT+1
	sta MIDFILES.TEMPOSHIFT+2
	sta MIDFILES.TEMPOSHIFT+3
l_0D06

; optimize FAIL ('MIDFILES.SETTEMPO', keyboard.inc), line = 35

	jsr MIDFILES.SETTEMPO

l_0CC8
a_0004

; optimize OK (keyboard.inc), line = 38

	lda #$FF
	sta KEYB
l_0C21

; optimize OK (MIDICar Player.pas), line = 89

	jmp l_0B24
b_0B24

; optimize FAIL ('STATUSSTOPPED', MIDICar Player.pas), line = 93

	jsr STATUSSTOPPED

; optimize OK (MIDICar Player.pas), line = 94

	lda #$00
	sta NMIEN
	lda OLDNMIVEC
	sta NMIVEC
	lda OLDNMIVEC+1
	sta NMIVEC+1
	lda #$40
	sta NMIEN

; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 95

	jsr EXIT2DOS

; ------------------------------------------------------------

CHARS_ADDR	= $3000
DLIST_ADDR	= $3400
SCREEN_ADDR	= $3422
SCREEN_TIME	= $37BA
SCREEN_STATUS	= $37CE
UVMETER_ADDR	= $3880
START_INFO_ADDR	= $3C00
TRACK_DATA_ADDR	= $3E00
MIDI_DATA_ADDR	= $4000
FREE_MEM	= $21
F_CLEAR	= $20
PS_COLORSET	= $01
PS_VIEW	= $02
PS_LOOP	= $04
adr.CHANNELSCRADR	= [DATAORIGIN+$01AA] .array [16] .word
.var CHANNELSCRADR	= adr.CHANNELSCRADR .word
SCRADR	= $D4
_TM	= $14
OTM	= DATAORIGIN+$01CA
CHN	= DATAORIGIN+$01CB
TPTR	= DATAORIGIN+$01CC
TPS	= DATAORIGIN+$01CE
SEC	= DATAORIGIN+$01D0
TRKSTAT	= DATAORIGIN+$01D1
V	= DATAORIGIN+$01D2
I	= DATAORIGIN+$01D3
C	= DATAORIGIN+$01D4
ISSTOPPED	= DATAORIGIN+$01D5
FN	= DATAORIGIN+$01D6
OLDNMIVEC	= DATAORIGIN+$01D8
PLAYERSTATUS	= $4A
TOTALXMS	= DATAORIGIN+$01DA
adr.COLORS	= CODEORIGIN+$009F
.var COLORS	= adr.COLORS .word
adr.GM_RESET	= CODEORIGIN+$00A9
.var GM_RESET	= adr.GM_RESET .word
K_L	= $00
K_PLUS	= $06
K_P	= $0A
K_MINUS	= $0E
K_EQ	= $0F
K_ESC	= $1C
K_SPACE	= $21
K_M	= $25
K_INVERS	= $27
K_S	= $3E
KEYB	= $02FC
PUTTEXTINVERT	= DATAORIGIN+$01DB
NMIEN	= $D40E
NMIVEC	= $FFFA
SDMACTL	= DATAORIGIN+$01DC
DMACTL	= $D400
CHBASE	= $02F4
SOUNDR	= $41
@CASETMP_0004	= DATAORIGIN+$01EE
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
USE_FIFO
ROMOFF
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.MC6850.@UnitInit
	jsr MAIN.MC6850.@UnitInit
	.fi

	.ifdef MAIN.MIDI_FIFO.@UnitInit
	jsr MAIN.MIDI_FIFO.@UnitInit
	.fi

	.ifdef MAIN.MIDFILES.@UnitInit
	jsr MAIN.MIDFILES.@UnitInit
	.fi

	.ifdef MAIN.MISC.@UnitInit
	jsr MAIN.MISC.@UnitInit
	.fi

	.ifdef MAIN.CIO.@UnitInit
	jsr MAIN.CIO.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.MC6850) > 0
	.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
	eif

	ift .SIZEOF(MAIN.MIDI_FIFO) > 0
	.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
	eif

	ift .SIZEOF(MAIN.MIDFILES) > 0
	.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
	eif

	ift .SIZEOF(MAIN.MISC) > 0
	.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
	eif

	ift .SIZEOF(MAIN.CIO) > 0
	.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	org $2000

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 495

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $00 $00 $04 $4C $4F $4F $50 $00  $04 $20 $20 $20 $20 $00 $02 $45  $3A $00 $09 $20 $50 $6C $61 $79
.by  $69 $6E $67 $20 $00 $09 $20 $4E  $6F $20 $73 $6F $6E $67 $20 $00  $09 $20 $20 $50 $61 $75 $73 $65
.by  $20 $20 $00 $09 $20 $53 $74 $6F  $70 $70 $65 $64 $20 $00 $07 $4C  $6F $61 $64 $69 $6E $67 $00 $10
.by  $05 $12 $12 $12 $12 $12 $54 $49  $4D $45 $12 $12 $12 $12 $12 $17  $00 $05 $4D $65 $6D $3A $20 $00
.by  $02 $4B $42 $00 $14 $20 $55 $6E  $73 $75 $70 $70 $6F $72 $74 $65  $64 $20 $66 $6F $72 $6D $61 $74
.by  $20 $00 $14 $20 $4E $6F $74 $20  $65 $6E $6F $75 $67 $68 $74 $20  $6D $65 $6D $6F $72 $79 $20 $00
.by  $0D $20 $49 $2F $4F $20 $45 $72  $72 $6F $72 $20 $23 $20 $00 $00  $00 $0A $00 $0A $0A $0A $00 $00
.by  $00 $F0 $7E $7F $09 $01 $F7
.endm

	end
