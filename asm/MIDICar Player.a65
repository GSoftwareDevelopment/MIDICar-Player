; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/05/02] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $1E00

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_006D

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000002  -------------------

	ldy #0
	mva (:edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	FILEPOS						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000011  -------------------

	txa:pha

	mwa f :bp2

	ldy #s@file.chanel
	lda (:bp2),y
	tax
	lda #38
	sta iccmd,x

	m@call	ciov

	sty IOResult

	mva icax3,x :eax
	mva icax4,x :eax+1
	mva icax5,x :eax+2

	mva #$00 :eax+3
	sta :ecx+2
	sta :ecx+3

	ldy #s@file.record
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1

	jsr idivEAX_ECX.main

	mva :eax Result
	mva :eax+1 Result+1
	mva :eax+2 Result+2
	mva :eax+3 Result+3

	pla:tax

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000D

@VarData	= F
@VarDataSize	= 2

	rts						; ret
.endl

.local	SEEK						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000012  -------------------

	txa:pha

	mwa f :bp2

	ldy #s@file.chanel
	lda (:bp2),y
	tax
	lda #37
	sta iccmd,x

	ldy #s@file.record
	lda (:bp2),y
	sta :eax
	iny
	lda (:bp2),y
	sta :eax+1
	lda #$00
	sta :eax+2
	sta :eax+3

	mva a :ecx
	mva a+1 :ecx+1
	mva a+2 :ecx+2
	mva a+3 :ecx+3

	jsr imulECX

	mva :eax icax3,x
	mva :eax+1 icax4,x
	mva :eax+2 icax5,x

	m@call	ciov

	sty IOResult

	pla:tax

; ------------------------------------------------------------

F	= DATAORIGIN+$0011
A	= DATAORIGIN+$0013

@VarData	= F
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EOF						; FUNCTION

; optimize OK (SYSTEM), line = 1163

	lda F
	sta FILEPOS.F
	lda F+1
	sta FILEPOS.F+1
	jsr FILEPOS
	lda FILEPOS.RESULT
	sta I
	lda FILEPOS.RESULT+1
	sta I+1
	lda FILEPOS.RESULT+2
	sta I+2
	lda FILEPOS.RESULT+3
	sta I+3
; BlockRead

; optimize OK (SYSTEM), line = 1165

	mwy F :bp2
	ldy #s@file.buffer
	lda BF
	sta (:bp2),y
	iny
	lda BF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (SYSTEM), line = 1167

	lda F
	sta SEEK.F
	lda F+1
	sta SEEK.F+1
	lda I
	sta SEEK.A
	lda I+1
	sta SEEK.A+1
	lda I+2
	sta SEEK.A+2
	lda I+3
	sta SEEK.A+3
	jsr SEEK

; -------------------  ASM Block 00000013  -------------------

	mwa f :bp2

	ldy #s@file.status
	lda (:bp2),y
	and #e@file.eof
	sta Result

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$0017
RESULT	= DATAORIGIN+$0019
I	= DATAORIGIN+$001A
adr.BF	= [DATAORIGIN+$001E] .array [256]
.var BF	= adr.BF .word

@VarData	= F
@VarDataSize	= 262

	rts						; ret
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000018  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_00D0					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000028  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	PARAMCOUNT					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000044  -------------------

	@cmdline #255
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$011E
	rts						; ret
.endl

.local	PARAMSTR					; FUNCTION | ASSEMBLER
	sta I

; -------------------  ASM Block 00000045  -------------------

	@cmdline i

;	@move #@buf Result #33
	ldy #256-33
	mva:rne @buf+33-256,y adr.Result+33-256,y+

@exit

; ------------------------------------------------------------

I	= DATAORIGIN+$011F
adr.RESULT	= [DATAORIGIN+$0120] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= I
@VarDataSize	= 34

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	MC6850						; UNIT

.local	MC6850_RESET					; PROCEDURE

; optimize OK (MC6850), line = 68

	lda #$03
	sta MC6850_CNTRREG
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MC6850_INIT					; PROCEDURE
	sta SETUP

; optimize OK (MC6850), line = 73

	sta MC6850_CNTRREG

; ------------------------------------------------------------

SETUP	= DATAORIGIN+$0141

@VarData	= SETUP
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MC6850_SEND					; PROCEDURE
	sta DATA

; --- RepeatUntilProlog
l_0113

; optimize OK (MC6850), line = 85

	lda MC6850_CNTRREG
	and #$02
	jeq l_0113

; optimize OK (MC6850), line = 86

	lda DATA
	sta MC6850_BUFFER

; ------------------------------------------------------------

DATA	= DATAORIGIN+$0142

@VarData	= DATA
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

MC6850_BASE	= $D500
ADDR_MC6850_CNTRREG	= $D500
ADDR_MC6850_BUFFER	= $D501
ADDR_MC6850_STATREG	= $D500
CR0	= $01
CR1	= $02
CR2	= $04
CR3	= $08
CR4	= $10
CR5	= $20
CR6	= $40
CR7	= $80
CD_1	= $00
CD_16	= $01
CD_64	= $02
MASTERRESET	= $03
WS_7BITS	= $00
WS_8BITS	= $10
WS_2BITSTOP	= $00
WS_1BITSTOP	= $08
WS_EVENPARITY	= $00
WS_ODDPARITY	= $04
TC_RTSLOW_NOTIRQ	= $00
TC_RTSLOW_TIRQ	= $20
TC_RTSHIGH_NOTIRQ	= $40
TC_BREAKLEVEL	= $60
NOIRQ_RECEIVE	= $00
IRQ_RECEIVE	= $80
RDRF	= $01
TDRE	= $02
DCD	= $04
CTS	= $08
FE	= $10
OVRN	= $20
PE	= $40
IRQ	= $80
MC6850_CNTRREG	= $D500
MC6850_BUFFER	= $D501
MC6850_STATREG	= $D500

.endl							; UNIT MC6850

; ------------------------------------------------------------

.local	DOS						; UNIT

; ------------------------------------------------------------

PALNTSC	= $D014

.endl							; UNIT DOS

; ------------------------------------------------------------

.local	STRUTILS					; UNIT

; ------------------------------------------------------------

.endl							; UNIT STRUTILS

; ------------------------------------------------------------

.local	SYSUTILS					; UNIT

; ------------------------------------------------------------

FAREADONLY	= $01
FAHIDDEN	= $02
FASYSFILE	= $04
FAVOLUMEID	= $08
FADIRECTORY	= $10
FAARCHIVE	= $20
FAANYFILE	= $3F

.endl							; UNIT SYSUTILS

; ------------------------------------------------------------

.local	MIDI_FIFO					; UNIT

.local	FIFO_READBYTE					; FUNCTION

; optimize OK (MIDI_FIFO), line = 39

	ldy FIFO_TAIL
	cpy FIFO_HEAD
	jeq l_0174

; optimize OK (MIDI_FIFO), line = 41

	lda adr.FIFO_BUF,y
	mvy DATA+1 :bp+1
	ldy DATA
	sta (:bp),y

; optimize FAIL (0, MIDI_FIFO), line = 42

	inc FIFO_TAIL

; optimize OK (MIDI_FIFO), line = 43

	lda FIFO_TAIL
	cmp #$FF
	jne l_0194
	lda #$00
	sta FIFO_TAIL
l_0194

; optimize OK (MIDI_FIFO), line = 44

	lda #$01
	sta RESULT
	jmp l_01A8
l_0174

; optimize OK (MIDI_FIFO), line = 47

	lda #$00
	sta RESULT
l_01A8
@exit

; ------------------------------------------------------------

DATA	= DATAORIGIN+$0143
RESULT	= DATAORIGIN+$0145

@VarData	= DATA
@VarDataSize	= 2

	rts						; ret
.endl

.local	FIFO_WRITEBYTE					; FUNCTION
	sta DATA

; optimize OK (MIDI_FIFO), line = 52

	lda FIFO_HEAD
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	ldy #1
	lda :STACKORIGIN+STACKWIDTH*3+9
	cmp #$00
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp #$00
	bne @+
	lda :STACKORIGIN+STACKWIDTH+9
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp FIFO_TAIL
@
	beq @+
	dey
@
	sty :STACKORIGIN+9
	lda FIFO_HEAD
	add #$01
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH*3+10
	cmp #$00
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp #$00
	bne @+
	lda :STACKORIGIN+STACKWIDTH+10
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp #$FF
@
	beq @+
	dey
@
	sty :STACKORIGIN+10
	ldy #1
	lda FIFO_TAIL
	beq @+
	dey
@
	tya
	and :STACKORIGIN+10
	ora :STACKORIGIN+9
	jeq l_01E4

; optimize OK (MIDI_FIFO), line = 54

	lda #$00
	sta RESULT
	jmp @exit					; exit
l_01E4

; optimize OK (MIDI_FIFO), line = 57

	ldy FIFO_HEAD
	lda DATA
	sta adr.FIFO_BUF,y

; optimize FAIL (0, MIDI_FIFO), line = 61

	inc FIFO_HEAD

; optimize OK (MIDI_FIFO), line = 62

	lda FIFO_HEAD
	cmp #$FF
	jne l_0211
	lda #$00
	sta FIFO_HEAD
l_0211
l_01F2

; optimize OK (MIDI_FIFO), line = 64

	lda #$01
	sta RESULT
@exit

; ------------------------------------------------------------

DATA	= DATAORIGIN+$0146
RESULT	= DATAORIGIN+$0147

@VarData	= DATA
@VarDataSize	= 1

	rts						; ret
.endl

.local	FIFO_SEND					; FUNCTION

; optimize OK (MIDI_FIFO), line = 72

	lda DATA
	sta P
	lda DATA+1
	sta P+1

; --- WhileProlog
	jmp l_0227
l_0228

; optimize OK (MIDI_FIFO), line = 75

	mwy P :bp2
	ldy #$00
	lda (:bp2),y
	jsr FIFO_WRITEBYTE
	lda FIFO_WRITEBYTE.RESULT
	jne l_0238
	lda #$00
	sta RESULT
	jmp @exit					; exit
l_0238

; optimize FAIL (0, MIDI_FIFO), line = 76

	inc P
	sne
	inc P+1
	dec LEN
l_0227

; optimize OK (MIDI_FIFO), line = 73

	lda LEN
	jne l_0228

; optimize OK (MIDI_FIFO), line = 78

	lda #$01
	sta RESULT
@exit

; ------------------------------------------------------------

DATA	= DATAORIGIN+$0148
LEN	= DATAORIGIN+$014A
RESULT	= DATAORIGIN+$014B
P	= DATAORIGIN+$014C

@VarData	= DATA
@VarDataSize	= 5

	rts						; ret
.endl

.local	FIFO_FLUSH					; PROCEDURE

; --- WhileProlog
	jmp l_025D
l_025E

; optimize OK (MIDI_FIFO), line = 85

	lda ZP_DATA
	sta $D01A

; optimize OK (MIDI_FIFO), line = 86

	jsr MC6850.MC6850_SEND
l_025D

; optimize OK (MIDI_FIFO), line = 83

	lda <ZP_DATA
	sta FIFO_READBYTE.DATA
	lda >ZP_DATA
	sta FIFO_READBYTE.DATA+1
	jsr FIFO_READBYTE
	lda FIFO_READBYTE.RESULT
	jne l_025E

; optimize OK (MIDI_FIFO), line = 88

	lda #$00
	sta $D01A
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

ZP_DATA	= $FF
FIFO_HEAD	= $F0
FIFO_TAIL	= $F1
FIFO_SIZE	= $FF
FIFO_ADDR	= $0600
adr.FIFO_BUF	= $0600
.var FIFO_BUF	= adr.FIFO_BUF .word

.endl							; UNIT MIDI_FIFO

; ------------------------------------------------------------

.local	MIDFILES					; UNIT

.local	WORDBI						; FUNCTION

; optimize OK (MIDFILES), line = 80

	lda <RESULT
	sta RESULTPTR
	lda >RESULT
	sta RESULTPTR+1

; optimize OK (MIDFILES), line = 81

	mwy BI :bp2
	ldy #$01
	lda (:bp2),y
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y
	inc RESULTPTR
	sne
	inc RESULTPTR+1

; optimize OK (MIDFILES), line = 82

	ldy #$00
	lda (:bp2),y
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y
@exit

; ------------------------------------------------------------

BI	= DATAORIGIN+$0169
RESULT	= DATAORIGIN+$016B
RESULTPTR	= DATAORIGIN+$016D

@VarData	= BI
@VarDataSize	= 4

	rts						; ret
.endl

.local	LONGBI						; FUNCTION

; optimize OK (MIDFILES), line = 91

	lda <RESULT
	sta RESULTPTR
	lda >RESULT
	sta RESULTPTR+1

; optimize OK (MIDFILES), line = 92

	lda #$03
	sta I

l_029A
; --- ForToDoCondition

; optimize OK (MIDFILES), line = 94

	mwy BI :bp2
	ldy I
	lda (:bp2),y
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y

; optimize FAIL (0, MIDFILES), line = 95

	inc RESULTPTR
	sne
	inc RESULTPTR+1

; --- ForToDoEpilog
	dec I
	jpl l_029A
l_02A8
@exit

; ------------------------------------------------------------

BI	= DATAORIGIN+$016F
RESULT	= DATAORIGIN+$0171
RESULTPTR	= DATAORIGIN+$0175
I	= DATAORIGIN+$0177

@VarData	= BI
@VarDataSize	= 5

	rts						; ret
.endl

.local	MEMBOUNDCHECK					; PROCEDURE

; optimize OK (MIDFILES), line = 125

	mwy ADR :bp2
	ldy #$00+$01
	lda (:bp2),y
	cmp #$9C
	bne @+
	dey
	lda (:bp2),y
@
	jne l_02CF

; optimize OK (MIDFILES), line = 126

	ldy #$00
	tya
	sta (:bp2),y
	iny
	lda #$A0
	sta (:bp2),y
	jmp l_02DD
l_02CF

; optimize OK (MIDFILES), line = 127

	mwy ADR :bp2
	ldy #$00+$01
	lda (:bp2),y
	cmp #$D0
	bne @+
	dey
	lda (:bp2),y
@
	jne l_02EE

; optimize OK (MIDFILES), line = 128

	ldy #$00
	tya
	sta (:bp2),y
	iny
	lda #$D8
	sta (:bp2),y
	jmp l_02FC
l_02EE

; optimize OK (MIDFILES), line = 129

	mwy ADR :bp2
	ldy #$00+$01
	lda (:bp2),y
	cmp #$E0
	bne @+
	dey
	lda (:bp2),y
@
	jne l_030D

; optimize OK (MIDFILES), line = 130

	ldy #$00
	tya
	sta (:bp2),y
	iny
	lda #$E4
	sta (:bp2),y
	jmp l_031B
l_030D

; optimize OK (MIDFILES), line = 131

	mwy ADR :bp2
	ldy #$00+$01
	lda (:bp2),y
	cmp #$FF
	bne @+
	dey
	lda (:bp2),y
@
	jne l_032C

; optimize FAIL ('@print', MIDFILES), line = 133

	@printSTRING #CODEORIGIN+$000D
	@printEOL
	lda #$02
	jmp @halt
l_032C
l_031B
l_02FC
l_02DD

; ------------------------------------------------------------

ADR	= DATAORIGIN+$0178

@VarData	= ADR
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADMID						; FUNCTION

	jmp l_0338

.local	READWORDBI					; FUNCTION

; BlockRead

; optimize OK (MIDFILES), line = 154

	mwy F :bp2
	ldy #s@file.buffer
	lda BI
	sta (:bp2),y
	iny
	lda BI+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$02
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (MIDFILES), line = 155

	lda BI
	sta WORDBI.BI
	lda BI+1
	sta WORDBI.BI+1
	jsr WORDBI
	lda WORDBI.RESULT
	sta RESULT
	lda WORDBI.RESULT+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$019E
	rts						; ret
.endl

.local	READLONGBI					; FUNCTION

; BlockRead

; optimize OK (MIDFILES), line = 160

	mwy F :bp2
	ldy #s@file.buffer
	lda BI
	sta (:bp2),y
	iny
	lda BI+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (MIDFILES), line = 161

	lda BI
	sta LONGBI.BI
	lda BI+1
	sta LONGBI.BI+1
	jsr LONGBI
	lda LONGBI.RESULT
	sta RESULT
	lda LONGBI.RESULT+1
	sta RESULT+1
	lda LONGBI.RESULT+2
	sta RESULT+2
	lda LONGBI.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01A0
	rts						; ret
.endl
l_0338

; optimize OK (MIDFILES), line = 165

	lda MIDTRACKS
	sta NTRKREC
	lda MIDTRACKS+1
	sta NTRKREC+1

; optimize FAIL ('@print', MIDFILES), line = 166

	@printSTRING #CODEORIGIN+$0022
	@printSTRING FN
	@printEOL
; AssignFile

; optimize OK (MIDFILES), line = 168

	mwy F :bp2
	ldy #s@file.pfname
	lda FN
	sta (:bp2),y
	iny
	lda FN+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Reset

; optimize OK (MIDFILES), line = 169

	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@openfile F, MAIN.SYSTEM.FileMode
	pla:tax

; optimize OK (MIDFILES), line = 170

	lda SYSTEM.IORESULT
	jpl l_038B

; optimize FAIL ('@print', MIDFILES), line = 172

	@print #$9B
	@printSTRING #CODEORIGIN+$002E
	lda SYSTEM.IORESULT
	jsr @printBYTE._a
	@printEOL
; CloseFile

	txa:pha
	clc
	@closefile F
	pla:tax

; optimize OK (MIDFILES), line = 174

	lda #$00
	sta RESULT
	jmp @exit					; exit
l_038B

; optimize OK (MIDFILES), line = 176

	lda #$00
	sta TRACKCOUNT
	sta TRACKCOUNT+1
	lda #$FF
	sta NTRACKS
	lda #$00
	sta NTRACKS+1

; --- WhileProlog
	jmp l_03A7
l_03A8
; BlockRead

; optimize OK (MIDFILES), line = 179

	mwy F :bp2
	ldy #s@file.buffer
	lda <CHUNKTAG
	sta (:bp2),y
	iny
	lda >CHUNKTAG
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
	ldy #s@file.numread
	lda <V
	sta (:bp2),y
	iny
	lda >V
	sta (:bp2),y

	txa:pha
	clc
	@readfile F, #135
	pla:tax

; optimize OK (MIDFILES), line = 180

	lda V+1
	bne @+
	lda V
	cmp #$04
@
	jeq l_03C5
	jmp b_03A8					; break
l_03C5

; optimize FAIL ('READLONGBI', MIDFILES), line = 181

	jsr READLONGBI
	lda READLONGBI.RESULT
	sta LEN
	lda READLONGBI.RESULT+1
	sta LEN+1
	lda READLONGBI.RESULT+2
	sta LEN+2
	lda READLONGBI.RESULT+3
	sta LEN+3

; optimize OK (MIDFILES), line = 182

	lda CHUNKTAG+3
	eor #$64
	jne l_03DC
	lda CHUNKTAG+2
	eor #$68
	jne l_03DC
	lda CHUNKTAG+1
	eor #$54
	jne l_03DC
	lda CHUNKTAG
	eor #$4D
	jne l_03DC

; optimize FAIL ('READWORDBI', MIDFILES), line = 184

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta FORMAT
	lda READWORDBI.RESULT+1
	sta FORMAT+1

; optimize FAIL ('READWORDBI', MIDFILES), line = 185

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta NTRACKS
	lda READWORDBI.RESULT+1
	sta NTRACKS+1

; optimize FAIL ('READWORDBI', MIDFILES), line = 186

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta V
	lda READWORDBI.RESULT+1
	sta V+1

; optimize OK (MIDFILES), line = 187

	jpl l_03FE

; optimize OK (MIDFILES), line = 189

	and #$7F
	sta FPS

; optimize OK (MIDFILES), line = 190

	sta @CASETMP_0005
	cmp #$E8
	jne l_0417
@

; optimize OK (MIDFILES), line = 191

	lda #$18
	sta FPS

	jmp a_0005
l_0417
	cmp #$E7
	jne l_0424
@

; optimize OK (MIDFILES), line = 192

	lda #$19
	sta FPS

	jmp a_0005
l_0424
	cmp #$E3
	jne l_0431
@

; optimize OK (MIDFILES), line = 193

	lda #$1D
	sta FPS

	jmp a_0005
l_0431
	cmp #$E2
	jne l_043E
@

; optimize OK (MIDFILES), line = 194

	lda #$1E
	sta FPS

l_043E
a_0005

; optimize OK (MIDFILES), line = 196

	lda V
	sta FSD
	jmp l_045C
l_03FE

; optimize OK (MIDFILES), line = 204

	lda V
	sta TICKDIV
	lda V+1
	and #$7F
	sta TICKDIV+1
l_045C
	jmp l_046E
l_03DC

; optimize OK (MIDFILES), line = 210

	lda CHUNKTAG+3
	eor #$6B
	jne l_047E
	lda CHUNKTAG+2
	eor #$72
	jne l_047E
	lda CHUNKTAG+1
	eor #$54
	jne l_047E
	lda CHUNKTAG
	eor #$4D
	jne l_047E

; optimize FAIL (0, MIDFILES), line = 212

	inc TRACKCOUNT
	sne
	inc TRACKCOUNT+1

; optimize FAIL ('@print', MIDFILES), line = 213

	@printSTRING #CODEORIGIN+$003B
	lda TRACKCOUNT
	ldy TRACKCOUNT+1
	jsr @printWORD._ay
	@print #$2F
	lda NTRACKS
	ldy NTRACKS+1
	jsr @printWORD._ay
	@printSTRING #CODEORIGIN+$0044

; optimize OK (MIDFILES), line = 215

	mwy NTRKREC :bp2
	ldy #$00
	lda MIDDATA
	sta (:bp2),y
	iny
	lda MIDDATA+1
	sta (:bp2),y

; optimize OK (MIDFILES), line = 216

	iny
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (MIDFILES), line = 217

	iny
	sta (:bp2),y

; optimize OK (MIDFILES), line = 218

	iny
	sta (:bp2),y

; --- WhileProlog
	jmp l_04AA
l_04AB

; optimize OK (MIDFILES), line = 222

	lda MIDDATA
	sta LOADADR
	lda MIDDATA+1
	sta LOADADR+1

; optimize OK (MIDFILES), line = 223

	lda <LOADADR
	sta MEMBOUNDCHECK.ADR
	lda >LOADADR
	sta MEMBOUNDCHECK.ADR+1
	jsr MEMBOUNDCHECK

; optimize OK (MIDFILES), line = 224

	lda LOADADR
	sta MIDDATA
	lda LOADADR+1
	sta MIDDATA+1

; optimize OK (MIDFILES), line = 225

	.LOCAL
	lda LEN+3
	sub #$00
	bne L4
	lda LEN+2
	cmp #$00
	bne L1
	lda LEN+1
	cmp #$00
	bne L1
	lda LEN
	cmp #$80
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_04C7
	jeq l_04C7
	lda #$80
	sta LOADSIZE
	jmp l_04D5
l_04C7
	lda LEN
	sta LOADSIZE
l_04D5

; optimize OK (MIDFILES), line = 226

	lda LOADADR
	add LOADSIZE
	sta ENDADR
	lda LOADADR+1
	adc #$00
	sta ENDADR+1

; optimize OK (MIDFILES), line = 227

	cmp #$9C
	jcc l_0500
	bne @+
	lda ENDADR
	jcc l_0500
@
	lda ENDADR+1
	cmp #$A0
	bne @+
	lda ENDADR
	cmp #$00
@
	jcs l_0500

; optimize OK (MIDFILES), line = 228

	lda #$00
	sta TOP
	lda #$9C
	sta TOP+1
	jmp l_050E
l_0500

; optimize OK (MIDFILES), line = 229

	lda ENDADR+1
	cmp #$D0
	jcc l_052A
	bne @+
	lda ENDADR
	jcc l_052A
@
	lda ENDADR+1
	cmp #$D8
	bne @+
	lda ENDADR
	cmp #$00
@
	jcs l_052A

; optimize OK (MIDFILES), line = 230

	lda #$00
	sta TOP
	lda #$D0
	sta TOP+1
	jmp l_0538
l_052A

; optimize OK (MIDFILES), line = 231

	lda ENDADR+1
	cmp #$E0
	jcc l_0554
	bne @+
	lda ENDADR
	jcc l_0554
@
	lda ENDADR+1
	cmp #$E4
	bne @+
	lda ENDADR
	cmp #$00
@
	jcs l_0554

; optimize OK (MIDFILES), line = 232

	lda #$00
	sta TOP
	lda #$E0
	sta TOP+1
	jmp l_0562
l_0554

; optimize OK (MIDFILES), line = 233

	lda #$00
	sta TOP
	sta TOP+1
l_0562
l_0538
l_050E

; optimize OK (MIDFILES), line = 234

	lda TOP+1
	ora TOP
	jeq l_0577

; optimize OK (MIDFILES), line = 235

	lda TOP
	sub LOADADR
	sta LOADSIZE
l_0577

; optimize OK (MIDFILES), line = 236

	lda LOADSIZE
	jne l_0596
	jmp c_04AB					; continue
l_0596
; BlockRead

; optimize OK (MIDFILES), line = 239

	mwy F :bp2
	ldy #s@file.buffer
	lda RBUF
	sta (:bp2),y
	iny
	lda RBUF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda LOADSIZE
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
	ldy #s@file.numread
	lda <V
	sta (:bp2),y
	iny
	lda >V
	sta (:bp2),y

	txa:pha
	clc
	@readfile F, #135
	pla:tax

; optimize OK (MIDFILES), line = 240

	lda V+1
	bne @+
	lda V
	cmp LOADSIZE
@
	jeq l_05BB
	lda #$01
	jmp @halt
l_05BB

; optimize OK (MIDFILES), line = 241

	lda #$00
	sta SYSTEM.MOVE_00D0.SOURCE
	lda #$06
	sta SYSTEM.MOVE_00D0.SOURCE+1
	lda MIDDATA
	sta SYSTEM.MOVE_00D0.DEST
	lda MIDDATA+1
	sta SYSTEM.MOVE_00D0.DEST+1
	lda LOADSIZE
	sta SYSTEM.MOVE_00D0.COUNT
	lda #$00
	sta SYSTEM.MOVE_00D0.COUNT+1
	.local +MAIN.SYSTEM.MOVE_00D0
	m@INLINE
	.endl

; optimize OK (MIDFILES), line = 242

	lda MIDDATA
	add V
	sta MIDDATA
	lda MIDDATA+1
	adc V+1
	sta MIDDATA+1

; optimize OK (MIDFILES), line = 243

	lda LEN
	sub V
	sta LEN
	lda LEN+1
	sbc V+1
	sta LEN+1
	lda LEN+2
	sbc #$00
	sta LEN+2
	lda LEN+3
	sbc #$00
	sta LEN+3
c_04AB
l_04AA

; optimize OK (MIDFILES), line = 220

	lda LEN+3
	bmi @+
	ora LEN+2
	ora LEN+1
	ora LEN
	jne l_04AB
@

; optimize OK (MIDFILES), line = 246

	lda NTRKREC
	add #$07
	sta NTRKREC
	scc
	inc NTRKREC+1
l_047E
l_046E

; optimize FAIL ('@print', MIDFILES), line = 248

	@print #$9C
l_03A7

; optimize FAIL (1, MIDFILES), line = 177

	inx
	ldy #1
	lda SYSTEM.IORESULT
	cmp #$80
	bcc @+
	dey
@
	sty :STACKORIGIN,x
	lda F
	sta SYSTEM.EOF.F
	lda F+1
	sta SYSTEM.EOF.F+1
	jsr SYSTEM.EOF
	inx
	mva SYSTEM.EOF.RESULT :STACKORIGIN,x
	jsr notBOOLEAN
	jsr andAL_CL
	mva TRACKCOUNT :STACKORIGIN,x
	mva TRACKCOUNT+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva NTRACKS :STACKORIGIN,x
	mva NTRACKS+1 :STACKORIGIN+STACKWIDTH,x
	ldy #1
	jsr cmpEAX_ECX.AX_CX
	bcc @+
	dey
@
	sty :STACKORIGIN-1,x
	dex
	jsr andAL_CL
	dex
	dex
	lda :STACKORIGIN+1,x
	jne l_03A8
b_03A8
; CloseFile

	txa:pha
	clc
	@closefile F
	pla:tax

; optimize OK (MIDFILES), line = 251

	lda #$01
	sta RESULT
@exit

; ------------------------------------------------------------

FN	= DATAORIGIN+$017A
RESULT	= DATAORIGIN+$017C
.var F	= DATAORIGIN+$017D .word
TRACKCOUNT	= DATAORIGIN+$0189
CHUNKTAG	= DATAORIGIN+$018B
V	= DATAORIGIN+$018F
TOP	= DATAORIGIN+$0191
LOADADR	= DATAORIGIN+$0193
ENDADR	= DATAORIGIN+$0195
LEN	= DATAORIGIN+$0197
LOADSIZE	= DATAORIGIN+$019B
NTRKREC	= DATAORIGIN+$019C
NTRKREC.PTR	= DATAORIGIN+$0000
NTRKREC.DELTATIME	= DATAORIGIN+$0002
NTRKREC.SKIPDELTA	= DATAORIGIN+$0004
NTRKREC.EOT	= DATAORIGIN+$0005
NTRKREC._EVENT	= DATAORIGIN+$0006
@CASETMP_0005	= DATAORIGIN+$01A4

@VarData	= FN
@VarDataSize	= 36

	rts						; ret
.endl

.local	GETTRACKDATA					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta TRACK
	lda :STACKORIGIN+STACKWIDTH,x
	sta TRACK+1
	dex
@main

	jmp l_0604

.local	READB						; FUNCTION

; optimize OK (MIDFILES), line = 264

	lda TRACKDATA
	sta ADR
	lda TRACKDATA+1
	sta ADR+1

; optimize OK (MIDFILES), line = 265

	lda <ADR
	sta MEMBOUNDCHECK.ADR
	lda >ADR
	sta MEMBOUNDCHECK.ADR+1
	jsr MEMBOUNDCHECK

; optimize OK (MIDFILES), line = 266

	lda ADR
	sta TRACKDATA
	lda ADR+1
	sta TRACKDATA+1

; optimize OK (MIDFILES), line = 267

	ldy #$00
	lda (TRACKDATA),y
	sta RESULT

; optimize FAIL (0, MIDFILES), line = 268

	inc TRACKDATA
	sne
	inc TRACKDATA+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01BF
	rts						; ret
.endl

.local	GETDATA						; PROCEDURE

; optimize OK (MIDFILES), line = 276

	lda #$00
	sta I

; --- WhileProlog
	jmp l_0627
l_0628

; optimize OK (MIDFILES), line = 279

	lda TRACKDATA
	sta ADR
	lda TRACKDATA+1
	sta ADR+1

; optimize OK (MIDFILES), line = 280

	lda <ADR
	sta MEMBOUNDCHECK.ADR
	lda >ADR
	sta MEMBOUNDCHECK.ADR+1
	jsr MEMBOUNDCHECK

; optimize OK (MIDFILES), line = 281

	lda ADR
	sta TRACKDATA
	lda ADR+1
	sta TRACKDATA+1

; optimize OK (MIDFILES), line = 282

	ldy #$00
	lda (TRACKDATA),y
	mwy BUF :bp2
	ldy I
	sta (:bp2),y

; optimize FAIL (0, MIDFILES), line = 283

	inc TRACKDATA
	sne
	inc TRACKDATA+1

; optimize FAIL (0, MIDFILES), line = 284

	inc I

; optimize FAIL (0, MIDFILES), line = 285

	dec SIZE
l_0627

; optimize OK (MIDFILES), line = 277

	lda SIZE
	jne l_0628

; ------------------------------------------------------------

BUF	= DATAORIGIN+$01C0
SIZE	= DATAORIGIN+$01C2
I	= DATAORIGIN+$01C3

@VarData	= BUF
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SKIP						; PROCEDURE
	sta N

; --- WhileProlog
	jmp l_065B
l_065C

; optimize OK (MIDFILES), line = 293

	lda TRACKDATA
	sta ADR
	lda TRACKDATA+1
	sta ADR+1

; optimize OK (MIDFILES), line = 294

	lda <ADR
	sta MEMBOUNDCHECK.ADR
	lda >ADR
	sta MEMBOUNDCHECK.ADR+1
	jsr MEMBOUNDCHECK

; optimize OK (MIDFILES), line = 295

	lda ADR
	sta TRACKDATA
	lda ADR+1
	sta TRACKDATA+1

; optimize FAIL (0, MIDFILES), line = 296

	dec N

; optimize FAIL (0, MIDFILES), line = 297

	inc TRACKDATA
	sne
	inc TRACKDATA+1
l_065B

; optimize OK (MIDFILES), line = 291

	lda N
	jne l_065C

; ------------------------------------------------------------

N	= DATAORIGIN+$01C4

@VarData	= N
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETVARLONG					; FUNCTION

; optimize OK (MIDFILES), line = 306

	lda #$00
	sta RESULT
	sta RESULT+1

; --- RepeatUntilProlog
l_0685

; optimize FAIL ('READB', MIDFILES), line = 308

	jsr READB
	lda READB.RESULT
	sta V

; optimize OK (MIDFILES), line = 309

	lda RESULT+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda RESULT
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta RESULT
	lda :STACKORIGIN+STACKWIDTH+9
	sta RESULT+1

; optimize OK (MIDFILES), line = 310

	lda V
	and #$7F
	ora RESULT
	sta RESULT

; optimize OK (MIDFILES), line = 311

	lda V
	jmi l_0685
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01C5
	rts						; ret
.endl

.local	GET24BITVAL					; FUNCTION

; optimize OK (MIDFILES), line = 320

	lda <RESULT
	sta RESULTPTR
	lda >RESULT
	sta RESULTPTR+1

; optimize OK (MIDFILES), line = 321

	lda BI
	sta GETDATA.BUF
	lda BI+1
	sta GETDATA.BUF+1
	lda #$03
	sta GETDATA.SIZE
	jsr GETDATA

; optimize OK (MIDFILES), line = 322

	lda adr.BI+$02
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y
	inc RESULTPTR
	sne
	inc RESULTPTR+1

; optimize OK (MIDFILES), line = 323

	lda adr.BI+$01
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y
	inc RESULTPTR
	sne
	inc RESULTPTR+1

; optimize OK (MIDFILES), line = 324

	lda adr.BI+$00
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01C7
RESULTPTR	= DATAORIGIN+$01CB

@VarData	= RESULTPTR
@VarDataSize	= 2

	rts						; ret
.endl
l_0604

; optimize OK (MIDFILES), line = 334

	mwy TRACK :bp2
	ldy #$00
	lda (:bp2),y
	sta TRACKDATA
	iny
	lda (:bp2),y
	sta TRACKDATA+1

; optimize OK (MIDFILES), line = 335

	ldy #$06
	lda (:bp2),y
	sta EVENT

; --- RepeatUntilProlog
l_06E8

; optimize OK (MIDFILES), line = 337

	mwy TRACK :bp2
	ldy #$04
	lda (:bp2),y
	jne l_06F7

; optimize FAIL ('GETVARLONG', MIDFILES), line = 339

	jsr GETVARLONG
	lda GETVARLONG.RESULT
	sta DELTATIME
	lda GETVARLONG.RESULT+1
	sta DELTATIME+1

; optimize OK (MIDFILES), line = 340

	ora DELTATIME
	jeq l_070D
	jmp b_06E8					; break
l_070D
	jmp l_0719
l_06F7

; optimize OK (MIDFILES), line = 344

	mwy TRACK :bp2
	ldy #$04
	lda #$00
	sta (:bp2),y
l_0719

; optimize OK (MIDFILES), line = 346

	ldy #$00
	lda (TRACKDATA),y
	jpl l_0733

; optimize FAIL ('READB', MIDFILES), line = 347

	jsr READB
	lda READB.RESULT
	sta EVENT
l_0733

; optimize OK (MIDFILES), line = 349

	lda EVENT
	sta @CASETMP_0006
	clc						; clear carry for add
	adc #$FF-$BF					; make m = $FF
	adc #$BF-$80+1					; carry set if in range n to m
	bcs @+
	lda @CASETMP_0006
	clc						; clear carry for add
	adc #$FF-$EF					; make m = $FF
	adc #$EF-$E0+1					; carry set if in range n to m
	jcc l_0747
@

; optimize OK (MIDFILES), line = 358

	lda EVENT
	jsr MC6850.MC6850_SEND

; optimize FAIL ('READB', MIDFILES), line = 359

	jsr READB
	lda READB.RESULT
	jsr MC6850.MC6850_SEND

; optimize FAIL ('READB', MIDFILES), line = 360

	jsr READB
	lda READB.RESULT
	jsr MC6850.MC6850_SEND

	jmp a_0006
l_0747
	lda @CASETMP_0006
	clc						; clear carry for add
	adc #$FF-$DF					; make m = $FF
	adc #$DF-$C0+1					; carry set if in range n to m
	jcc l_0758
@

; optimize OK (MIDFILES), line = 369

	lda EVENT
	jsr MC6850.MC6850_SEND

; optimize FAIL ('READB', MIDFILES), line = 370

	jsr READB
	lda READB.RESULT
	jsr MC6850.MC6850_SEND

	jmp a_0006
l_0758
	lda @CASETMP_0006
	clc						; clear carry for add
	adc #$FF-$F7					; make m = $FF
	adc #$F7-$F0+1					; carry set if in range n to m
	jcc l_0767
@

; optimize FAIL ('GETVARLONG', MIDFILES), line = 375

	jsr GETVARLONG
	lda GETVARLONG.RESULT
	sta MSGLEN
	lda GETVARLONG.RESULT+1
	sta MSGLEN+1

; optimize OK (MIDFILES), line = 379

	lda EVENT
	jsr MC6850.MC6850_SEND

; --- WhileProlog
	jmp l_0771
l_0772

; optimize FAIL ('READB', MIDFILES), line = 383

	jsr READB
	lda READB.RESULT
	sta V

; optimize OK (MIDFILES), line = 387

	jsr MC6850.MC6850_SEND

; optimize FAIL (0, MIDFILES), line = 389

	lda MSGLEN
	bne @+
	dec MSGLEN+1
@
	dec MSGLEN
l_0771

; optimize OK (MIDFILES), line = 381

	lda MSGLEN+1
	ora MSGLEN
	jne l_0772

; optimize OK (MIDFILES), line = 391

	lda V
	cmp #$F7
	jne l_079B
	lda #$00
	sta FLAGSYSEX
	jmp l_07A9
l_079B
	lda #$01
	sta FLAGSYSEX
l_07A9

	jmp a_0006
l_0767
	lda @CASETMP_0006
	cmp #$FF
	jne l_07B6
@

; optimize FAIL ('READB', MIDFILES), line = 395

	jsr READB
	lda READB.RESULT
	sta META

; optimize FAIL ('GETVARLONG', MIDFILES), line = 396

	jsr GETVARLONG
	lda GETVARLONG.RESULT
	sta MSGLEN
	lda GETVARLONG.RESULT+1
	sta MSGLEN+1

; optimize OK (MIDFILES), line = 397

	lda META
	sta @CASETMP_0007
	cmp #$2F
	jne l_07C9
@

; optimize OK (MIDFILES), line = 400

	mwy TRACK :bp2
	ldy #$05
	lda #$01
	sta (:bp2),y

	jmp a_0007
l_07C9
	cmp #$51
	jne l_07D6
@

; optimize FAIL ('GET24BITVAL', MIDFILES), line = 404

	jsr GET24BITVAL
	lda GET24BITVAL.RESULT
	sta MS_PER_QNOTE
	lda GET24BITVAL.RESULT+1
	sta MS_PER_QNOTE+1
	lda GET24BITVAL.RESULT+2
	sta MS_PER_QNOTE+2
	lda GET24BITVAL.RESULT+3
	sta MS_PER_QNOTE+3

; optimize OK (MIDFILES), line = 405

	lda MS_PER_QNOTE
	sta SETTEMPO.NTEMPO
	lda MS_PER_QNOTE+1
	sta SETTEMPO.NTEMPO+1
	lda MS_PER_QNOTE+2
	sta SETTEMPO.NTEMPO+2
	lda MS_PER_QNOTE+3
	sta SETTEMPO.NTEMPO+3
	jsr SETTEMPO

	jmp a_0007
l_07D6
	cmp #$58
	jne l_07E5
@

; optimize FAIL ('READB', MIDFILES), line = 409

	jsr READB
	lda READB.RESULT
	sta TACTNUM

; optimize FAIL ('READB', MIDFILES), line = 410

	jsr READB
	lda READB.RESULT
	sta TACTDENUM

; optimize FAIL ('READB', MIDFILES), line = 411

	jsr READB
	lda READB.RESULT
	sta TICKS_PER_QNOTE

; optimize FAIL ('READB', MIDFILES), line = 412

	jsr READB
	lda READB.RESULT
	sta TICKS_PER_32ND

; optimize OK (MIDFILES), line = 413

	lda MS_PER_QNOTE
	sta SETTEMPO.NTEMPO
	lda MS_PER_QNOTE+1
	sta SETTEMPO.NTEMPO+1
	lda MS_PER_QNOTE+2
	sta SETTEMPO.NTEMPO+2
	lda MS_PER_QNOTE+3
	sta SETTEMPO.NTEMPO+3
	jsr SETTEMPO

	jmp a_0007
l_07E5

; optimize OK (MIDFILES), line = 416

	lda MSGLEN
	jsr SKIP
a_0007

l_07B6
a_0006

; optimize OK (MIDFILES), line = 420

	mwy TRACK :bp2
	ldy #$05
	lda (:bp2),y
	jeq l_06E8
b_06E8

; optimize OK (MIDFILES), line = 421

	mwy TRACK :bp2
	ldy #$00
	lda TRACKDATA
	sta (:bp2),y
	iny
	lda TRACKDATA+1
	sta (:bp2),y

; optimize OK (MIDFILES), line = 422

	ldy #$04
	lda #$01
	sta (:bp2),y

; optimize OK (MIDFILES), line = 423

	ldy #$06
	lda EVENT
	sta (:bp2),y

; optimize OK (MIDFILES), line = 424

	lda DELTATIME
	sta RESULT
	lda DELTATIME+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

TRACK	= DATAORIGIN+$01A5
TRACK.PTR	= DATAORIGIN+$0000
TRACK.DELTATIME	= DATAORIGIN+$0002
TRACK.SKIPDELTA	= DATAORIGIN+$0004
TRACK.EOT	= DATAORIGIN+$0005
TRACK._EVENT	= DATAORIGIN+$0006
RESULT	= DATAORIGIN+$01B3
FLAGSYSEX	= DATAORIGIN+$01B5
DELTATIME	= DATAORIGIN+$01B6
MSGLEN	= DATAORIGIN+$01B8
V	= DATAORIGIN+$01BA
EVENT	= DATAORIGIN+$01BB
META	= DATAORIGIN+$01BC
ADR	= DATAORIGIN+$01BD
@CASETMP_0006	= DATAORIGIN+$01CD
@CASETMP_0007	= DATAORIGIN+$01CE

@VarData	= TRACK
@VarDataSize	= 26

	rts						; ret
.endl

.local	INT_PLAY					; PROCEDURE | INTERRUPT

; optimize OK (MIDFILES), line = 430

	lda _TIMERSTATUS
	jmi l_083E

; optimize FAIL (0, MIDFILES), line = 432

	inc _SUBCNT

; optimize OK (MIDFILES), line = 433

	lda _SUBCNT
	cmp #$02
	jcc l_0855

; optimize OK (MIDFILES), line = 435

	lda #$00
	sta _SUBCNT

; optimize FAIL (0, MIDFILES), line = 436

	ind TOTALTICKS

; optimize OK (MIDFILES), line = 437

	lda _TIMERSTATUS
	ora #$40
	sta _TIMERSTATUS
l_0855
l_083E

; -------------------  ASM Block 00000070  -------------------

    pla
  
	rti						; ret
.endl

.local	SETTEMPO					; PROCEDURE

; optimize OK (MIDFILES), line = 452

	sei
	mva OLDTIMERVEC VTIMR1
	mva OLDTIMERVEC+1 VTIMR1+1
	lda irqens
	and #$fe
	sta irqens
	sta irqen
	cli

; optimize FAIL ('@I2F_m', MIDFILES), line = 453

	inx
	mva NTEMPO :STACKORIGIN,x
	mva NTEMPO+1 :STACKORIGIN+STACKWIDTH,x
	mva NTEMPO+2 :STACKORIGIN+STACKWIDTH*2,x
	mva NTEMPO+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$24 :STACKORIGIN+STACKWIDTH,x
	mva #$74 :STACKORIGIN+STACKWIDTH*2,x
	mva #$49 :STACKORIGIN+STACKWIDTH*3,x
	jsr @I2F_m
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta FREQ+3

; optimize FAIL ('@I2F', MIDFILES), line = 454

	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva TICKDIV :STACKORIGIN,x
	mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr @I2F
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta FREQ+3

; optimize FAIL ('@FDIV', MIDFILES), line = 455

	mva #$00 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$80 :STACKORIGIN+STACKWIDTH*2,x
	mva #$3F :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta FREQ+3

; optimize FAIL ('@FMUL', MIDFILES), line = 457

	mva #$00 :STACKORIGIN,x
	mva #$FA :STACKORIGIN+STACKWIDTH,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$40 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @I2F_m
	jsr @FDIV
	dex
	jsr @FROUND
	jsr @F2I
	lda :STACKORIGIN,x
	sta FDIV

; optimize FAIL ('divmulINT.DIV', MIDFILES), line = 458

	mva #$00 :STACKORIGIN,x
	mva #$87 :STACKORIGIN+STACKWIDTH,x
	mva #$93 :STACKORIGIN+STACKWIDTH*2,x
	mva #$03 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva NTEMPO :STACKORIGIN,x
	mva NTEMPO+1 :STACKORIGIN+STACKWIDTH,x
	mva NTEMPO+2 :STACKORIGIN+STACKWIDTH*2,x
	mva NTEMPO+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr divmulINT.DIV
	dex
	lda :STACKORIGIN,x
	sta BPM
	lda :STACKORIGIN+STACKWIDTH,x
	sta BPM+1
	dex

; optimize OK (MIDFILES), line = 460

	sei
	mva <INT_PLAY VTIMR1
	mva >INT_PLAY VTIMR1+1
	lda #$00
	ldy #$03
	sta AUDCTL
	sta AUDC1
	sty SKCTL
	sta AUDCTL
	mva FDIV AUDF1
	lda irqens
	ora #$01
	sta irqens
	sta irqen
	sta stimer
	cli

; ------------------------------------------------------------

NTEMPO	= DATAORIGIN+$01CF
FREQ	= DATAORIGIN+$01D3
FDIV	= DATAORIGIN+$01D7

@VarData	= NTEMPO
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize OK (MIDFILES), line = 464

	lda #$00
	sta OLDTIMERVEC
	sta OLDTIMERVEC+1

; optimize OK (MIDFILES), line = 465

	lda #$80
	sta TICKDIV
	lda #$01
	sta TICKDIV+1

; optimize OK (MIDFILES), line = 466

	lda #$04
	sta TACTNUM

; optimize OK (MIDFILES), line = 467

	sta TACTDENUM

; optimize OK (MIDFILES), line = 468

	lda #$18
	sta TICKS_PER_QNOTE

; optimize OK (MIDFILES), line = 469

	lda #$08
	sta TICKS_PER_32ND

; optimize OK (MIDFILES), line = 470

	lda #$20
	sta MS_PER_QNOTE
	lda #$A1
	sta MS_PER_QNOTE+1
	lda #$07
	sta MS_PER_QNOTE+2
	lda #$00
	sta MS_PER_QNOTE+3

; optimize OK (MIDFILES), line = 471

	sta _TIMERSTATUS

	lda VTIMR1
	sta OLDTIMERVEC
	lda VTIMR1+1
	sta OLDTIMERVEC+1

	rts

; ------------------------------------------------------------

FREQ_RATIO	= $02
F_COUNTER	= $80
F_TICK	= $40
MIDDATA	= DATAORIGIN+$014E
adr.MIDTRACKS	= [DATAORIGIN+$0150] .array [1]
.var MIDTRACKS	= adr.MIDTRACKS .word
FORMAT	= DATAORIGIN+$0151
NTRACKS	= DATAORIGIN+$0153
FPS	= DATAORIGIN+$0155
FSD	= DATAORIGIN+$0156
TICKDIV	= DATAORIGIN+$0157
MS_PER_QNOTE	= DATAORIGIN+$0159
TACTNUM	= DATAORIGIN+$015D
TACTDENUM	= DATAORIGIN+$015E
TICKS_PER_QNOTE	= DATAORIGIN+$015F
TICKS_PER_32ND	= DATAORIGIN+$0160
BPM	= DATAORIGIN+$0161
OLDTIMERVEC	= DATAORIGIN+$0163
_TIMERSTATUS	= $DF
_SUBCNT	= $F2
TOTALTICKS	= $F3
TAG_MTHD	= $6468544D
TAG_MTRK	= $6B72544D
adr.BI	= [DATAORIGIN+$0165] .array [4]
.var BI	= adr.BI .word
adr.RBUF	= $0600
.var RBUF	= adr.RBUF .word
TRACKDATA	= $F7

.endl							; UNIT MIDFILES

.local	RESET_MIDI					; PROCEDURE

; optimize OK (MIDICar Player.pas), line = 25

	lda GM_RESET
	sta MIDI_FIFO.FIFO_SEND.DATA
	lda GM_RESET+1
	sta MIDI_FIFO.FIFO_SEND.DATA+1
	lda #$06
	sta MIDI_FIFO.FIFO_SEND.LEN
	jsr MIDI_FIFO.FIFO_SEND
	mva MIDI_FIFO.FIFO_SEND.RESULT :STACKORIGIN+1,x
	jsr MIDI_FIFO.FIFO_FLUSH
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_006D

; optimize OK (MIDICar Player.pas), line = 33

	lda #$00
	sta MIDFILES.MIDTRACKS
	lda #$42
	sta MIDFILES.MIDTRACKS+1

; optimize OK (MIDICar Player.pas), line = 34

	lda #$00
	sta MIDFILES.MIDDATA
	lda #$43
	sta MIDFILES.MIDDATA+1

; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 36

	jsr SYSTEM.PARAMCOUNT
	lda SYSTEM.PARAMCOUNT.RESULT
	cmp #$01
	jne l_08F4
@

; optimize OK (MIDICar Player.pas), line = 37

	lda #$01
	jsr SYSTEM.PARAMSTR
	lda SYSTEM.PARAMSTR.RESULT
	sta FN
	lda SYSTEM.PARAMSTR.RESULT+1
	sta FN+1
	jmp l_0903
l_08F4

; optimize OK (MIDICar Player.pas), line = 42

	lda #$49
	sta FN
	lda #$1E
	sta FN+1
l_0903

; optimize OK (MIDICar Player.pas), line = 45

	lda FN
	sta MIDFILES.LOADMID.FN
	lda FN+1
	sta MIDFILES.LOADMID.FN+1
	jsr MIDFILES.LOADMID
	lda MIDFILES.LOADMID.RESULT
	jne l_0916
	lda #$01
	jmp @halt
l_0916

; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 50

	jsr MC6850.MC6850_RESET

; optimize OK (MIDICar Player.pas), line = 51

	lda #$96
	jsr MC6850.MC6850_INIT

; optimize OK (MIDICar Player.pas), line = 56

	lda #$00
	sta MIDFILES.TOTALTICKS
	sta MIDFILES.TOTALTICKS+1
	sta MIDFILES.TOTALTICKS+2
	sta MIDFILES.TOTALTICKS+3

; optimize OK (MIDICar Player.pas), line = 57

	lda #$20
	sta MIDFILES.SETTEMPO.NTEMPO
	lda #$A1
	sta MIDFILES.SETTEMPO.NTEMPO+1
	lda #$07
	sta MIDFILES.SETTEMPO.NTEMPO+2
	lda #$00
	sta MIDFILES.SETTEMPO.NTEMPO+3
	jsr MIDFILES.SETTEMPO

; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 58

	jsr RESET_MIDI

; optimize FAIL ('@print', MIDICar Player.pas), line = 61

	@printSTRING #CODEORIGIN+$005A

; --- RepeatUntilProlog
l_0929

; optimize OK (MIDICar Player.pas), line = 64

	lda MIDFILES.NTRACKS
	sta PLAYINGTRACKS

; optimize OK (MIDICar Player.pas), line = 65

	lda #$00
	sta CURTRACKOFS

; optimize OK (MIDICar Player.pas), line = 66

	lda #$01
	sta CTRK

l_093C
; --- ForToDoCondition
	lda CTRK
	cmp MIDFILES.NTRACKS
	scc
	jne l_0949

; optimize OK (MIDICar Player.pas), line = 68

	lda MIDFILES.MIDTRACKS
	add CURTRACKOFS
	sta TRACK
	lda MIDFILES.MIDTRACKS+1
	adc #$00
	sta TRACK+1

; optimize OK (MIDICar Player.pas), line = 69

	lda CURTRACKOFS
	add #$07
	sta CURTRACKOFS

; optimize OK (MIDICar Player.pas), line = 70

	mwy TRACK :bp2
	ldy #$05
	lda (:bp2),y
	jne l_095F

; optimize OK (MIDICar Player.pas), line = 72

	ldy #$02
	lda (:bp2),y
	sta TRACKTIME
	iny
	lda (:bp2),y
	sta TRACKTIME+1

; optimize OK (MIDICar Player.pas), line = 73

	.LOCAL
	lda MIDFILES.TOTALTICKS+3
	sub #$00
	bne L4
	lda MIDFILES.TOTALTICKS+2
	cmp #$00
	bne L1
	lda MIDFILES.TOTALTICKS+1
	cmp TRACKTIME+1
	bne L1
	lda MIDFILES.TOTALTICKS
	cmp TRACKTIME
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_0976

; optimize OK (MIDICar Player.pas), line = 75

	lda MIDFILES._TIMERSTATUS
	ora #$80
	sta MIDFILES._TIMERSTATUS

; optimize OK (MIDICar Player.pas), line = 77

	lda MIDFILES.TOTALTICKS
	sub TRACKTIME
	sta DTM
	lda MIDFILES.TOTALTICKS+1
	sbc TRACKTIME+1
	sta DTM+1

; optimize FAIL ('MIDFILES.GETTRACKDATA', MIDICar Player.pas), line = 78

	inx
	mva TRACK :STACKORIGIN,x
	mva TRACK+1 :STACKORIGIN+STACKWIDTH,x
	jsr MIDFILES.GETTRACKDATA
	lda MIDFILES.GETTRACKDATA.RESULT
	sta TRACKTIME
	lda MIDFILES.GETTRACKDATA.RESULT+1
	sta TRACKTIME+1

; optimize OK (MIDICar Player.pas), line = 79

	lda MIDFILES.TOTALTICKS
	add TRACKTIME
	sta :STACKORIGIN+9
	lda MIDFILES.TOTALTICKS+1
	adc TRACKTIME+1
	sta :STACKORIGIN+STACKWIDTH+9
	mwy TRACK :bp2
	ldy #$02
	lda :STACKORIGIN+9
	sub DTM
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sbc DTM+1
	sta (:bp2),y

; optimize OK (MIDICar Player.pas), line = 81

	lda MIDFILES._TIMERSTATUS
	and #$7F
	sta MIDFILES._TIMERSTATUS
l_0976
	jmp l_09B3
l_095F

; optimize FAIL (0, MIDICar Player.pas), line = 86

	dec PLAYINGTRACKS
	jmp c_093C					; continue
l_09B3

; --- ForToDoEpilog
c_093C
	inc CTRK
	jne l_093C
l_0949

; optimize OK (MIDICar Player.pas), line = 103

	lda PLAYINGTRACKS
	jeq l_0929x
	lda $02FC
	cmp #$FF
	jeq l_0929
l_0929x

; optimize FAIL ('@print', MIDICar Player.pas), line = 105

	@print #$9C

; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 112

	jsr RESET_MIDI

; optimize OK (MIDICar Player.pas), line = 118

	sei
	mva MIDFILES.OLDTIMERVEC VTIMR1
	mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
	lda irqens
	and #$fe
	sta irqens
	sta irqen
	cli

; ------------------------------------------------------------

adr.GM_RESET	= CODEORIGIN+$0066
.var GM_RESET	= adr.GM_RESET .word
FN	= DATAORIGIN+$01D8
TRACK	= DATAORIGIN+$01DA
TRACK.PTR	= DATAORIGIN+$0000
TRACK.DELTATIME	= DATAORIGIN+$0002
TRACK.SKIPDELTA	= DATAORIGIN+$0004
TRACK.EOT	= DATAORIGIN+$0005
TRACK._EVENT	= DATAORIGIN+$0006
CURTRACKOFS	= DATAORIGIN+$01DC
TRACKTIME	= DATAORIGIN+$01DD
DTM	= DATAORIGIN+$01DF
CTRK	= DATAORIGIN+$01E1
PLAYINGTRACKS	= DATAORIGIN+$01E2
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
ROMOFF
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.MC6850.@UnitInit
	jsr MAIN.MC6850.@UnitInit
	.fi

	.ifdef MAIN.DOS.@UnitInit
	jsr MAIN.DOS.@UnitInit
	.fi

	.ifdef MAIN.STRUTILS.@UnitInit
	jsr MAIN.STRUTILS.@UnitInit
	.fi

	.ifdef MAIN.SYSUTILS.@UnitInit
	jsr MAIN.SYSUTILS.@UnitInit
	.fi

	.ifdef MAIN.MIDI_FIFO.@UnitInit
	jsr MAIN.MIDI_FIFO.@UnitInit
	.fi

	.ifdef MAIN.MIDFILES.@UnitInit
	jsr MAIN.MIDFILES.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.MC6850) > 0
	.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
	eif

	ift .SIZEOF(MAIN.DOS) > 0
	.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
	eif

	ift .SIZEOF(MAIN.STRUTILS) > 0
	.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
	eif

	ift .SIZEOF(MAIN.SYSUTILS) > 0
	.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
	eif

	ift .SIZEOF(MAIN.MIDI_FIFO) > 0
	.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
	eif

	ift .SIZEOF(MAIN.MIDFILES) > 0
	.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 483

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $13 $4E $6F  $74 $20 $65 $6E $6F $75 $67 $68
.by  $74 $20 $6D $65 $6D $6F $72 $79  $2E $00 $0A $4F $70 $65 $6E $20  $66 $69 $6C $65 $20 $00 $0B $49
.by  $2F $4F $20 $45 $72 $72 $6F $72  $20 $23 $00 $07 $54 $72 $61 $63  $6B $3A $20 $00 $03 $2E $2E $2E
.by  $00 $0F $44 $32 $3A $53 $45 $4C  $46 $54 $45 $53 $54 $2E $4D $49  $44 $00 $0A $50 $6C $61 $79 $69
.by  $6E $67 $2E $2E $2E $00 $F0 $7E  $7F $09 $01 $F7
.endm

	end
