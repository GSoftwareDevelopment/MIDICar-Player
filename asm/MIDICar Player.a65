; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $8000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'resources/selftest.mti' TRACK_DATA_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'resources/selftest.rmd' MIDI_DATA_ADDR 0 0 0 0 0 0 0 0
	RCASM 'resources/dlist.asm' DLIST_ADDR 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0088

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	FILEPOS						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000011  -------------------

	txa:pha

	mwa f :bp2

	ldy #s@file.chanel
	lda (:bp2),y
	tax
	lda #38
	sta iccmd,x

	m@call	ciov

	sty IOResult

	mva icax3,x :eax
	mva icax4,x :eax+1
	mva icax5,x :eax+2

	mva #$00 :eax+3
	sta :ecx+2
	sta :ecx+3

	ldy #s@file.record
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1

	jsr idivEAX_ECX.main

	mva :eax Result
	mva :eax+1 Result+1
	mva :eax+2 Result+2
	mva :eax+3 Result+3

	pla:tax

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000D

@VarData	= F
@VarDataSize	= 2

	rts						; ret
.endl

.local	SEEK						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000012  -------------------

	txa:pha

	mwa f :bp2

	ldy #s@file.chanel
	lda (:bp2),y
	tax
	lda #37
	sta iccmd,x

	ldy #s@file.record
	lda (:bp2),y
	sta :eax
	iny
	lda (:bp2),y
	sta :eax+1
	lda #$00
	sta :eax+2
	sta :eax+3

	mva a :ecx
	mva a+1 :ecx+1
	mva a+2 :ecx+2
	mva a+3 :ecx+3

	jsr imulECX

	mva :eax icax3,x
	mva :eax+1 icax4,x
	mva :eax+2 icax5,x

	m@call	ciov

	sty IOResult

	pla:tax

; ------------------------------------------------------------

F	= DATAORIGIN+$0011
A	= DATAORIGIN+$0013

@VarData	= F
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EOF						; FUNCTION

; optimize OK (SYSTEM), line = 1163

	lda F
	sta FILEPOS.F
	lda F+1
	sta FILEPOS.F+1
	jsr FILEPOS
	lda FILEPOS.RESULT
	sta I
	lda FILEPOS.RESULT+1
	sta I+1
	lda FILEPOS.RESULT+2
	sta I+2
	lda FILEPOS.RESULT+3
	sta I+3
; BlockRead

; optimize OK (SYSTEM), line = 1165

	mwy F :bp2
	ldy #s@file.buffer
	lda BF
	sta (:bp2),y
	iny
	lda BF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (SYSTEM), line = 1167

	lda F
	sta SEEK.F
	lda F+1
	sta SEEK.F+1
	lda I
	sta SEEK.A
	lda I+1
	sta SEEK.A+1
	lda I+2
	sta SEEK.A+2
	lda I+3
	sta SEEK.A+3
	jsr SEEK

; -------------------  ASM Block 00000013  -------------------

	mwa f :bp2

	ldy #s@file.status
	lda (:bp2),y
	and #e@file.eof
	sta Result

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$0017
RESULT	= DATAORIGIN+$0019
I	= DATAORIGIN+$001A
adr.BF	= [DATAORIGIN+$001E] .array [256]
.var BF	= adr.BF .word

@VarData	= F
@VarDataSize	= 262

	rts						; ret
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000018  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	lda :STACKORIGIN+STACKWIDTH,x
	sta VALUE+1
	dex
@main

; -------------------  ASM Block 00000019  -------------------

	ldy #0
	mva value (:edx),y
	iny
	mva value+1 (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLCHAR_00EB					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000021  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	MOVE_00EC					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000028  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	MOVE_00ED					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000030  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	PARAMCOUNT					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000044  -------------------

	@cmdline #255
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$011E
	rts						; ret
.endl

.local	PARAMSTR					; FUNCTION | ASSEMBLER
	sta I

; -------------------  ASM Block 00000045  -------------------

	@cmdline i

;	@move #@buf Result #33
	ldy #256-33
	mva:rne @buf+33-256,y adr.Result+33-256,y+

@exit

; ------------------------------------------------------------

I	= DATAORIGIN+$011F
adr.RESULT	= [DATAORIGIN+$0120] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= I
@VarDataSize	= 34

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	MC6850						; UNIT

.local	MC6850_RESET					; PROCEDURE

; optimize OK (MC6850), line = 70

	lda #$03
	sta MC6850_CNTRREG
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MC6850_INIT					; PROCEDURE
	sta SETUP

; optimize OK (MC6850), line = 75

	sta MC6850_CNTRREG

; ------------------------------------------------------------

SETUP	= DATAORIGIN+$0141

@VarData	= SETUP
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

MC6850_BASE	= $D500
ADDR_MC6850_CNTRREG	= $D500
ADDR_MC6850_BUFFER	= $D501
ADDR_MC6850_STATREG	= $D500
CR0	= $01
CR1	= $02
CR2	= $04
CR3	= $08
CR4	= $10
CR5	= $20
CR6	= $40
CR7	= $80
CD_1	= $00
CD_16	= $01
CD_64	= $02
MASTERRESET	= $03
WS_7BITS	= $00
WS_8BITS	= $10
WS_2BITSTOP	= $00
WS_1BITSTOP	= $08
WS_EVENPARITY	= $00
WS_ODDPARITY	= $04
TC_RTSLOW_NOTIRQ	= $00
TC_RTSLOW_TIRQ	= $20
TC_RTSHIGH_NOTIRQ	= $40
TC_BREAKLEVEL	= $60
NOIRQ_RECEIVE	= $00
IRQ_RECEIVE	= $80
RDRF	= $01
TDRE	= $02
DCD	= $04
CTS	= $08
FE	= $10
OVRN	= $20
PE	= $40
IRQ	= $80
MC6850_CNTRREG	= $D500
MC6850_BUFFER	= $D501
MC6850_STATREG	= $D500
MC_BYTE	= $FF

.endl							; UNIT MC6850

; ------------------------------------------------------------

.local	DOS						; UNIT

; ------------------------------------------------------------

PALNTSC	= $D014

.endl							; UNIT DOS

; ------------------------------------------------------------

.local	STRUTILS					; UNIT

; ------------------------------------------------------------

.endl							; UNIT STRUTILS

; ------------------------------------------------------------

.local	SYSUTILS					; UNIT

; ------------------------------------------------------------

FAREADONLY	= $01
FAHIDDEN	= $02
FASYSFILE	= $04
FAVOLUMEID	= $08
FADIRECTORY	= $10
FAARCHIVE	= $20
FAANYFILE	= $3F

.endl							; UNIT SYSUTILS

; ------------------------------------------------------------

.local	MIDI_FIFO					; UNIT

.local	FIFO_RESET					; PROCEDURE

; optimize OK (MIDI_FIFO), line = 28

	lda #$00
	sta FIFO_HEAD

; optimize OK (MIDI_FIFO), line = 29

	sta FIFO_TAIL

; optimize OK (MIDI_FIFO), line = 30

	sta SYSTEM.FILLCHAR_00EB.A
	lda #$06
	sta SYSTEM.FILLCHAR_00EB.A+1
	lda #$00
	sta SYSTEM.FILLCHAR_00EB.COUNT
	lda #$01
	sta SYSTEM.FILLCHAR_00EB.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_00EB.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_00EB
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_PUSHDIRECT2MC6850				; PROCEDURE | INLINE

	.MACRO m@INLINE

; optimize OK (MIDI_FIFO), line = 35

	lda MC6850.MC6850_CNTRREG
	and #$02
	jeq l_0189

; optimize OK (MIDI_FIFO), line = 36

	ldy FIFO_TAIL
	cpy FIFO_HEAD
	jeq l_019E

; optimize OK (MIDI_FIFO), line = 38

	lda adr.FIFO_BUF,y
	sta MC6850.MC6850_BUFFER

; optimize FAIL (0, MIDI_FIFO), line = 39

	inc FIFO_TAIL
l_019E
l_0189
	.ENDM
@exit
.endl

.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000070  -------------------

  lda FIFO_Head
  clc
  adc #1
  cmp FIFO_Tail
  bne storeInFIFO
  jsr FIFO_Flush

storeInFIFO:
  ldy FIFO_Head
  lda FIFO_Byte
  sta FIFO_ADDR,y
  inc FIFO_Head
exitWrite:

	.ENDM
@exit
.endl

.local	FIFO_SEND					; PROCEDURE

; optimize OK (MIDI_FIFO), line = 75

	lda DATA
	sta P
	lda DATA+1
	sta P+1

; --- WhileProlog
	jmp l_01BD
l_01BE

; optimize OK (MIDI_FIFO), line = 78

	mwy P :bp2
	ldy #$00
	lda (:bp2),y
	sta FIFO_BYTE
	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl

; optimize FAIL (0, MIDI_FIFO), line = 79

	inc P
	sne
	inc P+1
	dec LEN
l_01BD

; optimize OK (MIDI_FIFO), line = 76

	lda LEN
	jne l_01BE

; ------------------------------------------------------------

DATA	= DATAORIGIN+$0142
LEN	= DATAORIGIN+$0144
P	= DATAORIGIN+$0145

@VarData	= DATA
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_FLUSH					; PROCEDURE

; --- WhileProlog
	jmp l_01DF
l_01E0

; optimize OK (MIDI_FIFO), line = 87

	lda MC6850.MC6850_CNTRREG
	and #$02
	jeq l_01F6

; optimize OK (MIDI_FIFO), line = 89

	ldy FIFO_TAIL
	lda adr.FIFO_BUF,y
	sta MC6850.MC6850_BUFFER

; optimize FAIL (0, MIDI_FIFO), line = 90

	inc FIFO_TAIL
l_01F6
l_01DF

; optimize OK (MIDI_FIFO), line = 85

	lda FIFO_TAIL
	cmp FIFO_HEAD
	jne l_01E0
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

FIFO_HEAD	= $FD
FIFO_TAIL	= $FE
FIFO_BYTE	= $FF
FIFO_ADDR	= $0600
adr.FIFO_BUF	= $0600
.var FIFO_BUF	= adr.FIFO_BUF .word

.endl							; UNIT MIDI_FIFO

; ------------------------------------------------------------

.local	MIDFILES					; UNIT

.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000071  -------------------

    lda _timerStatus
    bpl doSubTick
    pla
    rti

doSubTick:
    and #f_ratio
    cmp _subCnt
    beq doMainTick

    inc _subCnt
    pla
    rti

doMainTick:
    lda #1
    sta _subCnt

    inc _totalTicks
    bne skip
    inc _totalTicks+1
    bne skip
    inc _totalTicks+2
    bne skip
    inc _totalTicks+3
    bne skip

skip:

  pla

	rti						; ret
.endl

.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000072  -------------------

  lda _adr            // get LSB of address
  beq checkMemType    // zero means, we crossing the page. Check block bounds
  rts

checkMemType
  lda _adr+1          // get MSB of address
  ldy _bank           // get current bank index
  bne checkXMSBound   // zero, means we checking bounds in base memory
                      // otherwise, we checking bound of extended memory

// base memory bounds check
check1Bound           // 1st boundary $8000..$a3ff - program area
  cmp #$80
  bne check2Bound

  lda #$a4
  sta _adr+1
  rts

check2Bound:          // 2nd boundary $bc00..$bfff - DL $ Screen (BASIC OFF!)

  // cmp #$bc
  // bne check3Bound

  // lda #$c0
  // sta _adr+1
  // rts

check3Bound:          // 3rd boundary $d000..$d7ff - I/O area
  cmp #$d0
  bne check4Bound

  lda #$d8
  sta _adr+1
  rts

check4bound           // 4th boundary $ff00..$ffff
  cmp #$ff
  beq switchXMSBank
  rts

// extended memory bound check

checkXMSBound         // extender memory window $4000..$7fff
  cmp #$80            // the bank's memory area ends at $7fff
  beq switchXMSBank   // if MSB addres is out of this address, we need switch bank

  rts

switchXMSBank:
  iny             // increase current bank index
  lda $100,y      // get bank set
  beq outOfMem    // if zero, means Out Of Memory

  sty _bank       // store current bank index

  sta PORTB       // set PORTB (switch bank)

  lda #$40        // set MSB address to the begining of bank
  sta _adr+1
  rts

outOfMem:
  lda #ERR_NOT_ENOUGHT_MEMORY
  sta SYSTEM.IOResult

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADMID						; FUNCTION

	jmp l_021A

.local	READWORDBI					; FUNCTION

; BlockRead

; optimize OK (bigindian.inc), line = 3

	mwy F :bp2
	ldy #s@file.buffer
	lda <RESULT
	sta (:bp2),y
	iny
	lda >RESULT
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$02
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; -------------------  ASM Block 00000073  -------------------

    ldx result
    ldy result+1
    stx result+1
    sty result
  
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0181
	rts						; ret
.endl

.local	READLONGBI					; FUNCTION

; BlockRead

; optimize OK (bigindian.inc), line = 15

	mwy F :bp2
	ldy #s@file.buffer
	lda <RESULT
	sta (:bp2),y
	iny
	lda >RESULT
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; -------------------  ASM Block 00000074  -------------------

    ldx result
    ldy result+3
    stx result+3
    sty result

    ldx result+1
    ldy result+2
    stx result+2
    sty result+1
  
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0183
	rts						; ret
.endl
l_021A
; AssignFile

; optimize OK (loadmid.inc), line = 18

	mwy F :bp2
	ldy #s@file.pfname
	lda FN
	sta (:bp2),y
	iny
	lda FN+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Reset

; optimize OK (loadmid.inc), line = 19

	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@openfile F, MAIN.SYSTEM.FileMode
	pla:tax

; optimize OK (loadmid.inc), line = 20

	lda SYSTEM.IORESULT
	jpl l_0251

; optimize OK (loadmid.inc), line = 22

	sta RESULT
; CloseFile

	txa:pha
	clc
	@closefile F
	pla:tax

	jmp @exit					; exit
l_0251

; optimize OK (loadmid.inc), line = 27

	lda #$00
	sta _BANK

; optimize OK (loadmid.inc), line = 28

	lda MIDDATA
	sta _PTR
	lda MIDDATA+1
	sta _PTR+1

; optimize OK (loadmid.inc), line = 29

	lda MIDTRACKS
	sta TRKDATA
	lda MIDTRACKS+1
	sta TRKDATA+1

; optimize OK (loadmid.inc), line = 30

	lda #$00
	sta TRACKCOUNT

; optimize OK (loadmid.inc), line = 31

	lda #$FF
	sta TOTALTRACKS

; --- WhileProlog
	jmp l_0272
l_0273
; BlockRead

; optimize OK (loadmid.inc), line = 35

	mwy F :bp2
	ldy #s@file.buffer
	lda <CHUNKTAG
	sta (:bp2),y
	iny
	lda >CHUNKTAG
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
	ldy #s@file.numread
	lda <V
	sta (:bp2),y
	iny
	lda >V
	sta (:bp2),y

	txa:pha
	clc
	@readfile F, #135
	pla:tax

; optimize OK (loadmid.inc), line = 36

	lda V+1
	bne @+
	lda V
	cmp #$04
@
	jeq l_0290
	jmp b_0273					; break
l_0290

; optimize FAIL ('READLONGBI', loadmid.inc), line = 37

	jsr READLONGBI
	lda READLONGBI.RESULT
	sta LEN
	lda READLONGBI.RESULT+1
	sta LEN+1
	lda READLONGBI.RESULT+2
	sta LEN+2
	lda READLONGBI.RESULT+3
	sta LEN+3

; optimize OK (loadmid.inc), line = 38

	lda CHUNKTAG+3
	eor #$64
	jne l_02A7
	lda CHUNKTAG+2
	eor #$68
	jne l_02A7
	lda CHUNKTAG+1
	eor #$54
	jne l_02A7
	lda CHUNKTAG
	eor #$4D
	jne l_02A7

; optimize FAIL ('READWORDBI', loadmid.inc), line = 40

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta FORMAT

; optimize OK (loadmid.inc), line = 41

	jeq l_02CA
	cmp #$01
	jeq l_02CA
	lda #$64
	sta RESULT
	jmp @exit					; exit
l_02CA

; optimize FAIL ('READWORDBI', loadmid.inc), line = 42

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta TOTALTRACKS

; optimize FAIL ('READWORDBI', loadmid.inc), line = 43

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta V
	lda READWORDBI.RESULT+1
	sta V+1

; optimize OK (loadmid.inc), line = 44

	jmi l_02EE

; optimize OK (loadmid.inc), line = 45

	lda V
	sta TICKDIV
	lda V+1
	sta TICKDIV+1
l_02EE
	jmp l_02FF
l_02A7

; optimize OK (loadmid.inc), line = 60

	lda CHUNKTAG+3
	eor #$6B
	jne l_030F
	lda CHUNKTAG+2
	eor #$72
	jne l_030F
	lda CHUNKTAG+1
	eor #$54
	jne l_030F
	lda CHUNKTAG
	eor #$4D
	jne l_030F

; optimize FAIL (0, loadmid.inc), line = 62

	inc TRACKCOUNT

; optimize FAIL (':TMP', loadmid.inc), line = 63

	lda LOADPROCESS
	sta :TMP+1
	lda LOADPROCESS+1
	sta :TMP+2
	lda #$4C
	sta :TMP
	inx
	mva TRACKCOUNT :STACKORIGIN,x
	jsr :TMP

; optimize OK (loadmid.inc), line = 65

	mwy TRKDATA :bp2
	ldy #$00
	lda _BANK
	sta (:bp2),y

; optimize OK (loadmid.inc), line = 66

	iny
	lda _ADR
	sta (:bp2),y
	iny
	lda _ADR+1
	sta (:bp2),y

; optimize OK (loadmid.inc), line = 67

	iny
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (loadmid.inc), line = 68

	iny
	sta (:bp2),y

; --- WhileProlog
	jmp l_032D
l_032E

; optimize FAIL ('MEMBOUNDCHECK', loadmid.inc), line = 72

	jsr MEMBOUNDCHECK
	lda SYSTEM.IORESULT
	cmp #$01
	jeq l_0341
	lda #$65
	sta RESULT
	jmp @exit					; exit
l_0341

; optimize OK (loadmid.inc), line = 74

	.LOCAL
	lda LEN+3
	sub #$00
	bne L4
	lda LEN+2
	cmp #$00
	bne L1
	lda LEN+1
	cmp #$00
	bne L1
	lda LEN
	cmp #$FF
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_0358
	jeq l_0358
	lda #$FF
	sta LOADSIZE
	jmp l_0366
l_0358
	lda LEN
	sta LOADSIZE
l_0366

; optimize OK (loadmid.inc), line = 75

	lda _ADR
	add LOADSIZE
	sta ENDADR
	lda _ADR+1
	adc #$00
	sta ENDADR+1

; optimize OK (loadmid.inc), line = 76

	lda _BANK
	jne l_0387

; optimize OK (loadmid.inc), line = 78

	lda ENDADR+1
	jpl l_03A4
	cmp #$A4
	jcs l_03A4

; optimize OK (loadmid.inc), line = 79

	lda #$00
	sub _ADR
	sta LOADSIZE
	jmp l_03B7
l_03A4

; optimize OK (loadmid.inc), line = 80

	lda ENDADR+1
	cmp #$D0
	jcc l_03D3
	cmp #$D8
	jcs l_03D3

; optimize OK (loadmid.inc), line = 81

	lda #$00
	sub _ADR
	sta LOADSIZE
	jmp l_03E6
l_03D3

; optimize OK (loadmid.inc), line = 82

	lda ENDADR+1
	cmp #$FF
	jcc l_03F7

; optimize OK (loadmid.inc), line = 83

	lda #$00
	sub _ADR
	sta LOADSIZE
l_03F7
l_03E6
l_03B7
	jmp l_040C
l_0387

; optimize OK (loadmid.inc), line = 86

	lda ENDADR+1
	jpl l_041D

; optimize OK (loadmid.inc), line = 87

	lda #$00
	sub _ADR
	sta LOADSIZE
l_041D
l_040C

; optimize OK (loadmid.inc), line = 89

	lda LOADSIZE
	jne l_043B
	jmp c_032E					; continue
l_043B
; BlockRead

; optimize OK (loadmid.inc), line = 91

	mwy F :bp2
	ldy #s@file.buffer
	lda RBUF
	sta (:bp2),y
	iny
	lda RBUF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda LOADSIZE
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
	ldy #s@file.numread
	lda <V
	sta (:bp2),y
	iny
	lda >V
	sta (:bp2),y

	txa:pha
	clc
	@readfile F, #135
	pla:tax

; optimize OK (loadmid.inc), line = 92

	lda V+1
	bne @+
	lda V
	cmp LOADSIZE
@
	jeq l_0460
	lda SYSTEM.IORESULT
	sta RESULT
	jmp @exit					; exit
l_0460

; optimize OK (loadmid.inc), line = 94

	lda #$00
	sta SYSTEM.MOVE_00EC.SOURCE
	lda #$06
	sta SYSTEM.MOVE_00EC.SOURCE+1
	lda _PTR
	sta SYSTEM.MOVE_00EC.DEST
	lda _PTR+1
	sta SYSTEM.MOVE_00EC.DEST+1
	lda LOADSIZE
	sta SYSTEM.MOVE_00EC.COUNT
	lda #$00
	sta SYSTEM.MOVE_00EC.COUNT+1
	.local +MAIN.SYSTEM.MOVE_00EC
	m@INLINE
	.endl

; optimize OK (loadmid.inc), line = 95

	lda _ADR
	add V
	sta _ADR
	lda _ADR+1
	adc V+1
	sta _ADR+1

; optimize OK (loadmid.inc), line = 96

	lda LEN
	sub V
	sta LEN
	lda LEN+1
	sbc V+1
	sta LEN+1
	lda LEN+2
	sbc #$00
	sta LEN+2
	lda LEN+3
	sbc #$00
	sta LEN+3
c_032E
l_032D

; optimize OK (loadmid.inc), line = 70

	lda LEN+3
	bmi @+
	ora LEN+2
	ora LEN+1
	ora LEN
	jne l_032E
@

; optimize OK (loadmid.inc), line = 99

	lda TRKDATA
	add #$09
	sta TRKDATA
	scc
	inc TRKDATA+1
l_030F
l_02FF
l_0272

; optimize FAIL (1, loadmid.inc), line = 33

	inx
	ldy #1
	lda SYSTEM.IORESULT
	cmp #$01
	beq @+
	dey
@
	sty :STACKORIGIN,x
	lda F
	sta SYSTEM.EOF.F
	lda F+1
	sta SYSTEM.EOF.F+1
	jsr SYSTEM.EOF
	inx
	mva SYSTEM.EOF.RESULT :STACKORIGIN,x
	jsr notBOOLEAN
	jsr andAL_CL
	dex
	dex
	ldy #1
	lda TRACKCOUNT
	cmp TOTALTRACKS
	bcc @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	sta :STACKORIGIN+1,x
	jne l_0273
b_0273
; CloseFile

	txa:pha
	clc
	@closefile F
	pla:tax

; optimize OK (loadmid.inc), line = 103

	lda #$00
	sta RESULT
@exit

; ------------------------------------------------------------

FN	= DATAORIGIN+$0160
RESULT	= DATAORIGIN+$0162
LOADBUF_SIZE	= $FF
.var F	= DATAORIGIN+$0163 .word
TRACKCOUNT	= DATAORIGIN+$016F
CHUNKTAG	= DATAORIGIN+$0170
V	= DATAORIGIN+$0174
TOP	= DATAORIGIN+$0176
ENDADR	= DATAORIGIN+$0178
LEN	= DATAORIGIN+$017A
LOADSIZE	= DATAORIGIN+$017E
TRKDATA	= DATAORIGIN+$017F
TRKDATA.BANK	= DATAORIGIN+$0000
TRKDATA.PTR	= DATAORIGIN+$0001
TRKDATA.TRACKTIME	= DATAORIGIN+$0003
TRKDATA.STATUS	= DATAORIGIN+$0007
TRKDATA._EVENT	= DATAORIGIN+$0008

@VarData	= FN
@VarDataSize	= 32

	rts						; ret
.endl

.local	PROCESSTRACK					; PROCEDURE

	jmp l_04AC

.local	READB						; PROCEDURE | INLINE

	.MACRO m@INLINE

; optimize OK (processtrack.inc), line = 12

	ldy #$00
	lda (_PTR),y
	sta _TMP

; optimize FAIL (0, processtrack.inc), line = 13

	inc _ADR
	sne
	inc _ADR+1

; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 14

	jsr MEMBOUNDCHECK
	.ENDM
@exit
.endl

.local	READB2FB					; PROCEDURE | INLINE

	.MACRO m@INLINE

; optimize OK (processtrack.inc), line = 20

	ldy #$00
	lda (_PTR),y
	sta MIDI_FIFO.FIFO_BYTE

; optimize FAIL (0, processtrack.inc), line = 24

	inc _ADR
	sne
	inc _ADR+1

; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 25

	jsr MEMBOUNDCHECK
	.ENDM
@exit
.endl

.local	READVARL					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000075  -------------------

A equ _delta;
B equ _delta+1;
C equ _delta+2;
D equ _delta+3;

  .MACRO m@read2A
    ldy #0
    lda (_PTR),y
    sta A
    inc _ADR
    sne
    inc _ADR+1
    jsr MEMBOUNDCHECK
    lda A
  .ENDM

  ldy #0
  sty A
  sty B
  sty C
  sty D

// read block

// read 1st byte to A
  m@read2A

  bpl endRead

// move A to B and read 2nd byte to A
// B <- A = 4th readed byte
	and #$7F
	sta B

// read 2nd byte
  m@read2A

  bpl endRead

// mova B to C, A to B and read 3rd byte to A
// C <- B <- A = 4th readed byte
	lda B
	sta C
	lda A
	and #$7F
	sta B

// read 3rd
  m@read2A

  bpl endRead

// move C to D, B to C, A to B and read 4th byte to A
// D <- C <- B <- A = 4th readed byte
	lda C
	sta D
	lda B
	sta C
	lda A
	and #$7F
	sta B

// read 4th
  m@read2A

// end read block
endRead:

// decode block
// 'A' stays as it is

// 'B' if geather than zero, lets decode
  lda B
  beq decodeC

// 76543210
// 0bbbbbbb and %1
// 0000000b
//        |
// +------+ 7:asl
// v
// b0000000 ora A
// baaaaaaa

  lsr B
  bcc decodeC

  lda A
  ora #$80
  sta A

decodeC:
// 'C' if geather than zero, lets decode
  lda C
  beq decodeD

// 76543210
// 0ccccccc and %11
// 000000cc
//       ||
// +-----+| 6:asl
// |+-----+
// vv
// cc000000 ora B
// ccbbbbbb
  and #%11    // 2
  beq noOrC   // 2**
  tay         // 2
  lda OrC,y   // 4*
  ora B       // 3
  sta B       // 3

noOrC:
  lda C       // 3
  lsr @       // 2
  lsr @       // 2
  sta C       // 3
              //=26*+**

decodeD:
// 'D' if geather than zero, lets decode
  lda D
  beq endDecode

// 76543210
// 0ddddddd and %111
// 00000ddd
//      |||
// +----+||
// |+----+| 5:asl
// ||+----+
// vvv
// ddd00000 ora C
// dddccccc

  and #%111   // 2
  beq noOrD   // 2**
  tay         // 2
  lda OrD,y   // 4*
  ora C       // 3
  sta C       // 3

noOrD:
  lda D       // 3
  lsr @       // 2
  lsr @       // 2
  lsr @       // 2
  sta D       // 3
              //=28*+**
endDecode:
  rts

OrC:
  dta %00000000
  dta %01000000
  dta %10000000
  dta %11000000

OrD:
  dta %00000000
  dta %00100000
  dta %01000000
  dta %01100000
  dta %10000000
  dta %10100000
  dta %11000000
  dta %11100000

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READ24						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000076  -------------------

  .MACRO m@readByte
    ldy #0
    lda (_PTR),y
    sta _TMP
    inc _ADR
    sne
    inc _ADR+1
    jsr MEMBOUNDCHECK
    lda _TMP
  .ENDM

  m@readByte
  sta _delta+2

  m@readByte
  sta _delta+1

  m@readByte
  sta _delta+0

  lda #0
  sta _delta+3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTMIDI3					; PROCEDURE

; optimize OK (events.inc), line = 4

	lda _EVENT
	sta MIDI_FIFO.FIFO_BYTE
	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl

; optimize FAIL ('m@INLINE', events.inc), line = 5

	.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
	m@INLINE
	.endl
	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl

; optimize FAIL ('m@INLINE', events.inc), line = 6

	.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
	m@INLINE
	.endl
	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTMIDI2					; PROCEDURE

; optimize OK (events.inc), line = 17

	lda _EVENT
	sta MIDI_FIFO.FIFO_BYTE
	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl

; optimize FAIL ('m@INLINE', events.inc), line = 18

	.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
	m@INLINE
	.endl
	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTSYSEX					; PROCEDURE

; optimize FAIL ('READVARL', events.inc), line = 27

	jsr READVARL

; optimize OK (events.inc), line = 29

	lda _EVENT
	sta MIDI_FIFO.FIFO_BYTE
	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl

; --- WhileProlog
	jmp l_04F5
l_04F6

; optimize FAIL ('m@INLINE', events.inc), line = 35

	.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
	m@INLINE
	.endl

; optimize FAIL ('m@INLINE', events.inc), line = 37

	.local +MAIN.MIDI_FIFO.FIFO_WRITEBYTE
	m@INLINE
	.endl

; optimize FAIL (0, events.inc), line = 41

	dec _TMP
l_04F5

; optimize OK (events.inc), line = 33

	lda _TMP
	jne l_04F6
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTMETA					; PROCEDURE

; optimize FAIL ('m@INLINE', events.inc), line = 53

	.local +MAIN.MIDFILES.PROCESSTRACK.READB2FB
	m@INLINE
	.endl

; optimize FAIL ('READVARL', events.inc), line = 54

	jsr READVARL

; optimize OK (events.inc), line = 59

	lda MIDI_FIFO.FIFO_BYTE
	cmp #$2F
	jne l_0520

; optimize OK (events.inc), line = 61

	lda _STATUS
	ora #$40
	sta _STATUS
	jmp l_0534
l_0520

; optimize OK (events.inc), line = 63

	lda MIDI_FIFO.FIFO_BYTE
	cmp #$51
	jne l_0546

; optimize FAIL ('READ24', events.inc), line = 65

	jsr READ24

; optimize OK (events.inc), line = 66

	lda _DELTA+3
	cmp MS_PER_QNOTE+3
	bne @+
	lda _DELTA+2
	cmp MS_PER_QNOTE+2
	bne @+
	lda _DELTA+1
	cmp MS_PER_QNOTE+1
	bne @+
	lda _DELTA
	cmp MS_PER_QNOTE
	jeq l_0558
@

; optimize OK (events.inc), line = 68

	lda _DELTA
	sta MS_PER_QNOTE
	lda _DELTA+1
	sta MS_PER_QNOTE+1
	lda _DELTA+2
	sta MS_PER_QNOTE+2
	lda _DELTA+3
	sta MS_PER_QNOTE+3

; optimize FAIL ('SETTEMPO', events.inc), line = 69

	jsr SETTEMPO
l_0558
	jmp l_0569
l_0546

; --- WhileProlog
	jmp l_056B
l_056C

; optimize FAIL (0, events.inc), line = 85

	dec _TMP

; optimize FAIL (0, events.inc), line = 86

	inc _ADR
	sne
	inc _ADR+1

; optimize FAIL ('MEMBOUNDCHECK', events.inc), line = 87

	jsr MEMBOUNDCHECK
l_056B

; optimize OK (events.inc), line = 83

	lda _TMP
	jne l_056C
l_0569
l_0534
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_04AC

; optimize OK (processtrack.inc), line = 33

	lda _TIMERSTATUS
	eor #$80
	sta _TIMERSTATUS

; optimize OK (processtrack.inc), line = 34

	lda _TOTALTICKS
	sub _TRACKTIME
	sta DTM
	lda _TOTALTICKS+1
	sbc _TRACKTIME+1
	sta DTM+1

; -------------------  ASM Block 00000077  -------------------

 ldy _bank \ lda $100,y \ sta PORTB 
; optimize OK (processtrack.inc), line = 37

	lda #$00
	sta _DELTA
	sta _DELTA+1
	sta _DELTA+2
	sta _DELTA+3

; --- RepeatUntilProlog
l_0599

; optimize OK (processtrack.inc), line = 39

	lda _STATUS
	jmi l_05AF

; optimize FAIL ('READVARL', processtrack.inc), line = 41

	jsr READVARL

; optimize OK (processtrack.inc), line = 42

	lda _DELTA+3
	jmi l_05C1
	ora _DELTA+2
	ora _DELTA+1
	ora _DELTA
	jeq l_05C1

; optimize OK (processtrack.inc), line = 44

	lda _TOTALTICKS
	add _DELTA
	sta :STACKORIGIN+9
	lda _TOTALTICKS+1
	adc _DELTA+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda _TOTALTICKS+2
	adc _DELTA+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda _TOTALTICKS+3
	adc _DELTA+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub DTM
	sta _TRACKTIME
	lda :STACKORIGIN+STACKWIDTH+9
	sbc DTM+1
	sta _TRACKTIME+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc #$00
	sta _TRACKTIME+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc #$00
	sta _TRACKTIME+3
	jmp b_0599					; break
l_05C1
	jmp l_05DA
l_05AF

; optimize OK (processtrack.inc), line = 49

	lda _STATUS
	and #$7F
	sta _STATUS
l_05DA

; optimize OK (processtrack.inc), line = 51

	ldy #$00
	lda (_PTR),y
	jpl l_05FD

; optimize FAIL ('m@INLINE', processtrack.inc), line = 53

	.local READB
	m@INLINE
	.endl
	lda _TMP
	sta _EVENT
l_05FD

; optimize OK (processtrack.inc), line = 56

	lda #$BF
	cmp _EVENT
	jcc l_0619

; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 58

	jsr EVENTMIDI3
	jmp l_0624
l_0619
	lda #$DF
	cmp _EVENT
	jcc l_0636

; optimize FAIL ('EVENTMIDI2', processtrack.inc), line = 60

	jsr EVENTMIDI2
	jmp l_0641
l_0636
	lda #$EF
	cmp _EVENT
	jcc l_0653

; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 62

	jsr EVENTMIDI3
	jmp l_065E
l_0653
	lda #$F7
	cmp _EVENT
	jcc l_0670

; optimize FAIL ('EVENTSYSEX', processtrack.inc), line = 64

	jsr EVENTSYSEX
	jmp l_067B
l_0670
	lda _EVENT
	cmp #$FF
	jne l_068D

; optimize FAIL ('EVENTMETA', processtrack.inc), line = 65

	jsr EVENTMETA
l_068D
l_067B
l_065E
l_0641
l_0624

; optimize OK (processtrack.inc), line = 67

	lda _STATUS
	and #$40
	jeq l_0599
b_0599

; optimize OK (processtrack.inc), line = 69

	lda _STATUS
	ora #$80
	sta _STATUS

; optimize OK (processtrack.inc), line = 70

	lda _TIMERSTATUS
	eor #$80
	sta _TIMERSTATUS

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PROCESSMIDI					; PROCEDURE

; optimize OK (processmidi.inc), line = 7

	lda CTRK
	cmp TOTALTRACKS
	jne l_06CE

; optimize OK (processmidi.inc), line = 9

	lda #$01
	sta CTRK

; optimize OK (processmidi.inc), line = 10

	lda MIDTRACKS
	sta CURTRACKPTR
	lda MIDTRACKS+1
	sta CURTRACKPTR+1

; optimize OK (processmidi.inc), line = 11

	lda TOTALTRACKS
	sta PLAYINGTRACKS
	jmp l_06E7
l_06CE

; optimize FAIL (0, processmidi.inc), line = 15

	inc CTRK

; optimize OK (processmidi.inc), line = 16

	lda CURTRACKPTR
	add #$09
	sta CURTRACKPTR
	scc
	inc CURTRACKPTR+1
l_06E7

; optimize OK (processmidi.inc), line = 19

	lda CURTRACKPTR
	sta :bp2
	lda CURTRACKPTR+1
	sta :bp2+1
	ldy #$08
	mva:rpl (:bp2),y $00E0,y-

; optimize OK (processmidi.inc), line = 21

	lda _STATUS
	and #$40
	jne l_0707

; optimize OK (processmidi.inc), line = 23

	.LOCAL
	lda _TOTALTICKS+3
	sub _TRACKTIME+3
	bne L4
	lda _TOTALTICKS+2
	cmp _TRACKTIME+2
	bne L1
	lda _TOTALTICKS+1
	cmp _TRACKTIME+1
	bne L1
	lda _TOTALTICKS
	cmp _TRACKTIME
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_0718
	jsr PROCESSTRACK
l_0718
	jmp l_0725
l_0707

; optimize FAIL (0, processmidi.inc), line = 26

	dec PLAYINGTRACKS
l_0725

; optimize OK (processmidi.inc), line = 28

	lda #$E0
	sta SYSTEM.MOVE_00EC.SOURCE
	lda #$00
	sta SYSTEM.MOVE_00EC.SOURCE+1
	lda CURTRACKPTR
	sta SYSTEM.MOVE_00EC.DEST
	lda CURTRACKPTR+1
	sta SYSTEM.MOVE_00EC.DEST+1
	lda #$09
	sta SYSTEM.MOVE_00EC.COUNT
	lda #$00
	sta SYSTEM.MOVE_00EC.COUNT+1
	.local +MAIN.SYSTEM.MOVE_00EC
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETTEMPO					; PROCEDURE

; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 10

	inx
	mva MS_PER_QNOTE :STACKORIGIN,x
	mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
	mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
	mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva TICKDIV :STACKORIGIN,x
	mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr divmulINT.DIV
	dex
	lda :STACKORIGIN,x
	sta _FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta _FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta _FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta _FREQ+3

; optimize FAIL ('@I2F_m', settempo.inc), line = 11

	mva _FREQ :STACKORIGIN,x
	mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$24 :STACKORIGIN+STACKWIDTH,x
	mva #$74 :STACKORIGIN+STACKWIDTH*2,x
	mva #$49 :STACKORIGIN+STACKWIDTH*3,x
	jsr @I2F_m
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta FREQ+3

; optimize FAIL ('@FDIV', settempo.inc), line = 12

	mva #$00 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$80 :STACKORIGIN+STACKWIDTH*2,x
	mva #$3F :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta FREQ+3

; optimize FAIL ('@FDIV', settempo.inc), line = 15

	mva #$F5 :STACKORIGIN,x
	mva #$FA :STACKORIGIN+STACKWIDTH,x
	mva #$7A :STACKORIGIN+STACKWIDTH*2,x
	mva #$43 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta RATIO
	lda :STACKORIGIN+STACKWIDTH,x
	sta RATIO+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta RATIO+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta RATIO+3

; optimize FAIL ('@F2I', settempo.inc), line = 16

	mva #$01 :STACKORIGIN,x
	inx
	mva RATIO :STACKORIGIN,x
	mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
	mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
	mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @F2I
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
	lda :STACKORIGIN-1,x
	add :STACKORIGIN,x
	sta _RATIO
	dex
	dex

; optimize OK (settempo.inc), line = 17

	lda _RATIO
	cmp #$10
	jcc l_0778
	lda #$00
	sta RATIO
	sta RATIO+1
	lda #$70
	sta RATIO+2
	lda #$41
	sta RATIO+3
l_0778

; optimize OK (settempo.inc), line = 20

	lda _TIMERSTATUS
	and #$C0
	ora _RATIO
	sta _TIMERSTATUS

; optimize FAIL ('@I2F', settempo.inc), line = 23

	inx
	mva #$00 :STACKORIGIN,x
	mva #$FA :STACKORIGIN+STACKWIDTH,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva _RATIO :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr @I2F
	jsr @FMUL
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @I2F_m
	jsr @FDIV
	dex
	jsr @FROUND
	jsr @F2I
	lda :STACKORIGIN,x
	sta FDIV
	dex

; optimize OK (settempo.inc), line = 29

	sei
	mva <INT_TIMER VTIMR1
	mva >INT_TIMER VTIMR1+1
	lda #$00
	ldy #$03
	sta AUDCTL
	sta AUDC1
	sty SKCTL
	sta AUDCTL
	mva FDIV AUDF1
	lda irqens
	ora #$01
	sta irqens
	sta irqen
	sta stimer
	cli

; ------------------------------------------------------------

FREQ	= DATAORIGIN+$0187
_FREQ	= DATAORIGIN+$018B
FDIV	= DATAORIGIN+$018F
RATIO	= DATAORIGIN+$0190
_RATIO	= DATAORIGIN+$0194

@VarData	= FREQ
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NULLLOADPRCS					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize OK (MIDFILES), line = 79

	lda #$00
	sta OLDTIMERVEC
	sta OLDTIMERVEC+1

; optimize OK (MIDFILES), line = 80

	lda <NULLLOADPRCS
	sta LOADPROCESS
	lda >NULLLOADPRCS
	sta LOADPROCESS+1

; optimize OK (MIDFILES), line = 81

	lda #$80
	sta TICKDIV
	lda #$01
	sta TICKDIV+1

; optimize OK (MIDFILES), line = 82

	lda #$20
	sta MS_PER_QNOTE
	lda #$A1
	sta MS_PER_QNOTE+1
	lda #$07
	sta MS_PER_QNOTE+2
	lda #$00
	sta MS_PER_QNOTE+3

; optimize OK (MIDFILES), line = 89

	sta _TIMERSTATUS

	lda VTIMR1
	sta OLDTIMERVEC
	lda VTIMR1+1
	sta OLDTIMERVEC+1

	rts

; ------------------------------------------------------------

F_COUNTER	= $80
F_TICK	= $40
F_FLAGS	= $C0
F_RATIO	= $0F
F_SKIPDELTA	= $80
F_STOP	= $40
_TRKREGS	= $E0
MID_0	= $00
MID_1	= $01
ERR_UNSUPPORTED_FORMAT	= $64
ERR_NOT_ENOUGHT_MEMORY	= $65
TAG_MTHD	= $6468544D
TAG_MTRK	= $6B72544D
_TOTALTICKS	= $F0
_SUBCNT	= $F4
_TIMERSTATUS	= $F5
_DELTA	= $F6
_TMP	= $F6
_BANK	= $E0
_PTR	= $E1
_ADR	= $E1
_TRACKTIME	= $E3
_STATUS	= $E7
_EVENT	= $E8
MIDDATA	= DATAORIGIN+$0147
adr.MIDTRACKS	= [DATAORIGIN+$0149] .array [1]
.var MIDTRACKS	= adr.MIDTRACKS .word
FORMAT	= DATAORIGIN+$014A
TOTALTRACKS	= DATAORIGIN+$014B
TICKDIV	= DATAORIGIN+$014C
MS_PER_QNOTE	= DATAORIGIN+$014E
OLDTIMERVEC	= DATAORIGIN+$0152
CURTRACKPTR	= DATAORIGIN+$0154
DELTATIME	= DATAORIGIN+$0156
DTM	= DATAORIGIN+$015A
CTRK	= DATAORIGIN+$015C
PLAYINGTRACKS	= DATAORIGIN+$015D
LOADPROCESS	= DATAORIGIN+$015E
adr.RBUF	= $0600
.var RBUF	= adr.RBUF .word

.endl							; UNIT MIDFILES

; ------------------------------------------------------------

.local	MISC						; UNIT

.local	DETECTMEM					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000085  -------------------

	txa:pha

bsav	= @buf

ext_b	= $4000		;cokolwiek z zakresu $4000-$7FFF

	ldy #0
mov	mva copy,y detect,y
	iny
	cpy #.sizeof(detect)
	bne mov

	jsr detect

	jmp stop

copy

.local	detect,$0600

	lda portb
	pha

	lda:rne vcount

;	lda #$ff
;	sta portb

	lda ext_b
	pha

	ldx #$0f	;zapamiętanie bajtów ext (z 16 bloków po 64k)
_p0	jsr setpb
	lda ext_b
	sta bsav,x
	dex
	bpl _p0

	ldx #$0f	;wyzerowanie ich (w oddzielnej pętli, bo nie wiadomo
_p1	jsr setpb	;które kombinacje bitów PORTB wybierają te same banki)
	lda #$00
	sta ext_b
	dex
	bpl _p1

	stx portb	;eliminacja pamięci podstawowej
	stx ext_b
	stx $00		;niezbędne dla niektórych rozszerzeń do 256k

	ldy #$00	;pętla zliczająca bloki 64k
	ldx #$0f
_p2	jsr setpb
	lda ext_b	;jeśli ext_b jest różne od zera, blok 64k już zliczony
	bne _n2

	dec ext_b	;w przeciwnym wypadku zaznacz jako zliczony

	lda ext_b	;sprawdz, czy sie zaznaczyl; jesli nie -> cos nie tak ze sprzetem
	bpl _n2

	lda portb	;wpisz wartość PORTB do tablicy dla banku 0

	and #$fe

	sta adr.banks,y
	eor #%00000100	;uzupełnij wartości dla banków 1, 2, 3
	sta adr.banks+1,y
	eor #%00001100
	sta adr.banks+2,y
	eor #%00000100
	sta adr.banks+3,y
	iny
	iny
	iny
	iny

_n2	dex
	bpl _p2

	ldx #$0f	;przywrócenie zawartości ext
_p3	jsr setpb
	lda bsav,x
	sta ext_b
	dex
	bpl _p3

	stx portb	;X=$FF

	pla
	sta ext_b

	pla
	sta portb

	sty Result

	rts

; podprogramy
setpb	txa		;zmiana kolejności bitów: %0000dcba -> %cba000d0
	lsr
	ror
	ror
	ror
	adc #$01	;ustawienie bitu nr 1 w zaleznosci od stanu C
	ora #$01	;ustawienie bitu sterującego OS ROM na wartosc domyslna
	sta portb
	rts

.endl

stop	pla:tax


@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0195
	rts						; ret
.endl

; ------------------------------------------------------------

adr.BANKS	= $0101
.var BANKS	= adr.BANKS .word
DETECTOS	= $FFF7

.endl							; UNIT MISC

; ------------------------------------------------------------

.local	CIO						; UNIT

.local	OPN						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000088  -------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #$03		;komenda: OPEN
	sta iccmd,x

	inw device		;omin bajt z dlugoscia STRING-a

	lda device		;adres nazwy pliku
	sta icbufa,x
	lda device+1
	sta icbufa+1,x

	lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
	sta icax1,x

	lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
	sta icax2,x

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	pla:tax

; ------------------------------------------------------------

CHN	= DATAORIGIN+$0196
AX1	= DATAORIGIN+$0197
AX2	= DATAORIGIN+$0198
DEVICE	= DATAORIGIN+$0199

@VarData	= CHN
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLS						; PROCEDURE | ASSEMBLER
	sta CHN

; -------------------  ASM Block 00000089  -------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #$0c		;komenda: CLOSE
	sta iccmd,x

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	pla:tax

; ------------------------------------------------------------

CHN	= DATAORIGIN+$019B

@VarData	= CHN
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

.endl							; UNIT CIO

.local	PUTTEXT						; PROCEDURE

; optimize OK (helpers.inc), line = 21

	mwy S :bp2
	ldy #$00
	lda (:bp2),y
	sta L
	inc S
	sne
	inc S+1

; optimize OK (helpers.inc), line = 22

	lda S
	sta SYSTEM.MOVE_00ED.SOURCE
	lda S+1
	sta SYSTEM.MOVE_00ED.SOURCE+1
	lda SCRADR
	sta SYSTEM.MOVE_00ED.DEST
	lda SCRADR+1
	sta SYSTEM.MOVE_00ED.DEST+1
	lda L
	sta SYSTEM.MOVE_00ED.COUNT
	lda #$00
	sta SYSTEM.MOVE_00ED.COUNT+1
	.local +MAIN.SYSTEM.MOVE_00ED
	m@INLINE
	.endl

; optimize OK (helpers.inc), line = 23

	lda SCRADR
	add L
	sta SCRADR
	scc
	inc SCRADR+1

; ------------------------------------------------------------

S	= DATAORIGIN+$01EF
L	= DATAORIGIN+$01F1

@VarData	= S
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTINT						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000098  -------------------

EOL = 0

    lda scradr
    sta screen1
    sta screen2
    lda scradr+1
    sta screen1+1
    sta screen2+1

INT2STR:
    ldy #0
    sty _cnt
ITSNEXT:
    ldx #0
ITSSLP:
    lda value
    sec
    sbc Pow10Tab,Y
    sta value
    lda value+1
    iny
    sbc Pow10Tab,Y
    bcc ITSADD
    sta value+1
    inx
    dey
    clc
    bcc ITSSLP
ITSADD:
    dey
    lda value
    adc Pow10Tab,Y
    sta value
    txa
    ora #$10
    ldx _cnt
    bne storeDigit
    cmp #$10
    beq skipDigit
storeDigit:
    ora puttextinvert
    sta screen1:$f000,X
    inc _cnt
skipDigit:
    iny
    iny
    cpy #8
    bcc ITSNEXT
    lda value
    ora #$10
    ldx _cnt
    ora puttextinvert
    sta screen2:$f000,X
    inx

// set screen addres to the end of value
    txa
    clc
    adc scradr
    sta scradr
    bcc stop
    inc scradr+1

stop:
    rts

_cnt
    .by 0
Pow10Tab
    .wo 10000
    .wo 1000
    .wo 100
    .wo 10

; ------------------------------------------------------------

VALUE	= DATAORIGIN+$01F2

@VarData	= VALUE
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RESET_MIDI					; PROCEDURE

; optimize OK (helpers.inc), line = 168

	lda GM_RESET
	sta MIDI_FIFO.FIFO_SEND.DATA
	lda GM_RESET+1
	sta MIDI_FIFO.FIFO_SEND.DATA+1
	lda #$06
	sta MIDI_FIFO.FIFO_SEND.LEN
	jsr MIDI_FIFO.FIFO_SEND
	jsr MIDI_FIFO.FIFO_FLUSH
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EXIT2DOS					; PROCEDURE

; optimize OK (helpers.inc), line = 173

	lda #$00
	jsr CIO.CLS
	lda #$00
	sta CIO.OPN.CHN
	lda #$0C
	sta CIO.OPN.AX1
	lda #$00
	sta CIO.OPN.AX2
	lda #$0F
	sta CIO.OPN.DEVICE
	lda #$80
	sta CIO.OPN.DEVICE+1
	jsr CIO.OPN
	lda #$00
	jmp @halt
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARSTATUS					; PROCEDURE

; optimize OK (MIDICar Player.pas), line = 31

	lda #$80
	ldy #$27
	sta:rpl $3818,y-
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT						; PROCEDURE

; optimize FAIL ('MIDI_FIFO.FIFO_RESET', MIDICar Player.pas), line = 41

	jsr MIDI_FIFO.FIFO_RESET

; optimize OK (MIDICar Player.pas), line = 44

	lda #$00
	sta SYSTEM.MOVE_00EC.SOURCE
	lda #$E0
	sta SYSTEM.MOVE_00EC.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_00EC.DEST
	lda #$30
	sta SYSTEM.MOVE_00EC.DEST+1
	lda #$00
	sta SYSTEM.MOVE_00EC.COUNT
	lda #$04
	sta SYSTEM.MOVE_00EC.COUNT+1
	.local +MAIN.SYSTEM.MOVE_00EC
	m@INLINE
	.endl

; optimize OK (MIDICar Player.pas), line = 45

	lda #$0F
	sta $02C5
	lda #$00
	sta $02C6

; optimize OK (MIDICar Player.pas), line = 46

	lda #$30
	sta $02F4

; optimize OK (MIDICar Player.pas), line = 47

	sta SYSTEM.FILLCHAR_00EB.A
	lda #$34
	sta SYSTEM.FILLCHAR_00EB.A+1
	lda #$10
	sta SYSTEM.FILLCHAR_00EB.COUNT
	lda #$04
	sta SYSTEM.FILLCHAR_00EB.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_00EB.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_00EB
	m@INLINE
	.endl

; optimize OK (MIDICar Player.pas), line = 48

	lda #$00
	sta $0230
	lda #$34
	sta $0230+1

; optimize OK (MIDICar Player.pas), line = 50

	lda #$80
	ldy #$27
	sta:rpl $3430,y-

; optimize OK (MIDICar Player.pas), line = 51

	lda #$31
	sta SCRADR
	lda #$34
	sta SCRADR+1
	lda #$13
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (MIDICar Player.pas), line = 52

	lda #$4F
	sta SCRADR
	lda #$34
	sta SCRADR+1
	lda #$27
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize FAIL ('CLEARSTATUS', MIDICar Player.pas), line = 53

	jsr CLEARSTATUS

; optimize FAIL ('MISC.DETECTMEM', MIDICar Player.pas), line = 56

	jsr MISC.DETECTMEM
	inx
	lda MISC.DETECTMEM.RESULT
	:4 asl @
	sta TOTALXMS
	lda :STACKORIGIN+STACKWIDTH,x
	sta TOTALXMS+1
	dex

; -------------------  ASM Block 00000099  -------------------

 lda #$fe \ sta $100 
; optimize OK (MIDICar Player.pas), line = 60

	lda #$00
	sta MIDFILES.MIDTRACKS
	lda #$3E
	sta MIDFILES.MIDTRACKS+1

; optimize OK (MIDICar Player.pas), line = 61

	lda #$00
	sta MIDFILES.MIDDATA
	lda #$40
	sta MIDFILES.MIDDATA+1

; optimize OK (MIDICar Player.pas), line = 63

	lda #$00
	sta MIDFILES.CTRK

l_083F
; --- ForToDoCondition
	lda MIDFILES.CTRK
	cmp #$28
	jcs l_084D

; optimize OK (MIDICar Player.pas), line = 65

	lsr @
	lsr @
	sta :eax
	lsr @
	adc :eax
	ror @
	lsr @
	lsr @
	adc :eax
	ror @
	adc :eax
	ror @
	lsr @
	lsr @
	sta X
	lda MIDFILES.CTRK
	sta :al
	lda #$14
	sta :cl
	jsr idivAL_CL.MOD
	lda :ztmp8
	sta Y

; optimize OK (MIDICar Player.pas), line = 66

	lda MIDFILES.CTRK
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$D0
	sta :STACKORIGIN+10
	lda #$34
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$14
	sta :ecx
	lda X
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :STACKORIGIN+10
	add :eax
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc :eax+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda Y
	jsr @mul40
	add :STACKORIGIN+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc :eax+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+10
	sta adr.CHPTR,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.CHPTR+1,y

; --- ForToDoEpilog
	inc MIDFILES.CTRK
	jne l_083F
l_084D

; ------------------------------------------------------------

TOTALXMS	= DATAORIGIN+$01F4
X	= DATAORIGIN+$01F6
Y	= DATAORIGIN+$01F7

@VarData	= TOTALXMS
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADPRC						; PROCEDURE
	sta V

; optimize OK (MIDICar Player.pas), line = 75

	lda #$22
	sta SCRADR
	lda #$38
	sta SCRADR+1

; optimize OK (MIDICar Player.pas), line = 76

	lda V
	sub #$01
	sta PUTINT.VALUE
	lda #$00
	sbc #$00
	sta PUTINT.VALUE+1
	jsr PUTINT
	ldy SCRADR+1
	sty :bp+1
	ldy SCRADR
	lda #$8F
	sta (:bp),y
	inc SCRADR
	sne
	inc SCRADR+1

; optimize OK (MIDICar Player.pas), line = 77

	lda MIDFILES.TOTALTRACKS
	sta PUTINT.VALUE
	lda #$00
	sta PUTINT.VALUE+1
	jsr PUTINT

; ------------------------------------------------------------

V	= DATAORIGIN+$01F8
I	= DATAORIGIN+$01F9

@VarData	= V
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKPARAMS					; PROCEDURE

; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 86

	jsr SYSTEM.PARAMCOUNT
	lda SYSTEM.PARAMCOUNT.RESULT
	cmp #$01
	jne l_08C0
@

; optimize OK (MIDICar Player.pas), line = 88

	lda #$01
	jsr SYSTEM.PARAMSTR
	lda SYSTEM.PARAMSTR.RESULT
	sta FN
	lda SYSTEM.PARAMSTR.RESULT+1
	sta FN+1

; optimize OK (MIDICar Player.pas), line = 89

	lda #$19
	sta SCRADR
	lda #$38
	sta SCRADR+1
	lda #$31
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (MIDICar Player.pas), line = 90

	lda #$80
	sta PUTTEXTINVERT

; optimize OK (MIDICar Player.pas), line = 91

	lda <LOADPRC
	sta MIDFILES.LOADPROCESS
	lda >LOADPRC
	sta MIDFILES.LOADPROCESS+1

; optimize OK (MIDICar Player.pas), line = 92

	lda FN
	sta MIDFILES.LOADMID.FN
	lda FN+1
	sta MIDFILES.LOADMID.FN+1
	jsr MIDFILES.LOADMID
	lda MIDFILES.LOADMID.RESULT
	sta ERR

; optimize OK (MIDICar Player.pas), line = 93

	jeq l_08EB

; optimize OK (MIDICar Player.pas), line = 95

	lda #$19
	sta SCRADR
	lda #$38
	sta SCRADR+1

; optimize OK (MIDICar Player.pas), line = 96

	lda ERR
	jmi l_0902
	jeq l_0902

; optimize OK (MIDICar Player.pas), line = 97

	lda ERR
	sta @CASETMP_0005
	cmp #$64
	jne l_090E
@

; optimize OK (MIDICar Player.pas), line = 98

	lda #$3A
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

	jmp a_0005
l_090E
	cmp #$65
	jne l_0919
@

; optimize OK (MIDICar Player.pas), line = 99

	lda #$4E
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

l_0919
a_0005
	jmp l_092A
l_0902

; optimize OK (MIDICar Player.pas), line = 103

	lda #$62
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT
	ldy #$00
	lda ERR
	spl
	dey
	sty PUTINT.VALUE+1
	sta PUTINT.VALUE
	jsr PUTINT
l_092A

; --- WhileProlog
l_0933

; optimize OK (MIDICar Player.pas), line = 105

	lda KEYB
	cmp #$FF
	jeq l_0933

; optimize OK (MIDICar Player.pas), line = 106

	lda #$FF
	sta KEYB

; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 107

	jsr EXIT2DOS
l_08EB
	jmp l_094F
l_08C0

; optimize OK (MIDICar Player.pas), line = 112

	lda #$01
	sta MIDFILES.TOTALTRACKS
l_094F

; ------------------------------------------------------------

FN	= DATAORIGIN+$01FA
ERR	= DATAORIGIN+$01FC
@CASETMP_0005	= DATAORIGIN+$01FD

@VarData	= FN
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0088

; optimize FAIL ('INIT', MIDICar Player.pas), line = 117

	jsr INIT

; optimize FAIL ('CHECKPARAMS', MIDICar Player.pas), line = 118

	jsr CHECKPARAMS

; optimize FAIL ('CLEARSTATUS', MIDICar Player.pas), line = 121

	jsr CLEARSTATUS

; optimize OK (MIDICar Player.pas), line = 122

	lda #$19
	sta SCRADR
	lda #$38
	sta SCRADR+1
	lda #$6F
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 125

	jsr MC6850.MC6850_RESET

; optimize OK (MIDICar Player.pas), line = 126

	lda #$96
	jsr MC6850.MC6850_INIT

; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 131

	jsr RESET_MIDI

; optimize OK (MIDICar Player.pas), line = 132

	lda #$00
	sta MIDFILES._TOTALTICKS
	sta MIDFILES._TOTALTICKS+1
	sta MIDFILES._TOTALTICKS+2
	sta MIDFILES._TOTALTICKS+3

; optimize FAIL ('MIDFILES.SETTEMPO', MIDICar Player.pas), line = 133

	jsr MIDFILES.SETTEMPO

; optimize OK (MIDICar Player.pas), line = 137

	lda MIDFILES.TOTALTRACKS
	sta MIDFILES.CTRK

; --- RepeatUntilProlog
l_096D

; optimize FAIL ('MIDFILES.PROCESSMIDI', MIDICar Player.pas), line = 140

	jsr MIDFILES.PROCESSMIDI

; optimize FAIL ('m@INLINE', MIDICar Player.pas), line = 148

	.local +MAIN.MIDI_FIFO.FIFO_PUSHDIRECT2MC6850
	m@INLINE
	.endl

; optimize OK (MIDICar Player.pas), line = 151

	lda KEYB
	cmp #$FF
	jeq l_0981

; optimize OK (MIDICar Player.pas), line = 153

	sta @CASETMP_0006
	cmp #$1C
	jne l_098D
@
	jmp b_096D					; break

	jmp a_0006
l_098D
	cmp #$0A
	jne l_0996
@

; optimize OK (MIDICar Player.pas), line = 157

	lda MIDFILES._TIMERSTATUS
	eor #$80
	sta MIDFILES._TIMERSTATUS

; optimize OK (MIDICar Player.pas), line = 158

	lda #$19
	sta SCRADR
	lda #$38
	sta SCRADR+1

; optimize OK (MIDICar Player.pas), line = 159

	lda MIDFILES._TIMERSTATUS
	jmi l_09BA

; optimize OK (MIDICar Player.pas), line = 160

	lda #$6F
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT
	jmp l_09C6
l_09BA

; optimize OK (MIDICar Player.pas), line = 162

	lda #$78
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT
l_09C6

l_0996
a_0006

; optimize OK (MIDICar Player.pas), line = 165

	lda #$FF
	sta KEYB
l_0981

; optimize OK (MIDICar Player.pas), line = 167

	lda MIDFILES.PLAYINGTRACKS
	jne l_096D
b_096D

; optimize FAIL ('RESET_MIDI', MIDICar Player.pas), line = 176

	jsr RESET_MIDI

; optimize OK (MIDICar Player.pas), line = 182

	sei
	mva MIDFILES.OLDTIMERVEC VTIMR1
	mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
	lda irqens
	and #$fe
	sta irqens
	sta irqen
	cli

; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 183

	jsr EXIT2DOS

; ------------------------------------------------------------

DLIST_ADDR	= $3400
SCREEN_ADDR	= $3430
SCREEN_STATUS	= $3818
TRACK_DATA_ADDR	= $3E00
MIDI_DATA_ADDR	= $4000
FREE_MEM	= $23
adr.CHPTR	= [DATAORIGIN+$019C] .array [40] .word
.var CHPTR	= adr.CHPTR .word
SCRADR	= DATAORIGIN+$01EC
adr.GM_RESET	= CODEORIGIN+$0081
.var GM_RESET	= adr.GM_RESET .word
adr.HEX	= CODEORIGIN+$0087
.var HEX	= adr.HEX .word
K_ESC	= $1C
K_SPACE	= $21
K_P	= $0A
KEYB	= $02FC
PUTTEXTINVERT	= DATAORIGIN+$01EE
@CASETMP_0006	= DATAORIGIN+$01FE
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
USE_FIFO
ROMOFF
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.MC6850.@UnitInit
	jsr MAIN.MC6850.@UnitInit
	.fi

	.ifdef MAIN.DOS.@UnitInit
	jsr MAIN.DOS.@UnitInit
	.fi

	.ifdef MAIN.STRUTILS.@UnitInit
	jsr MAIN.STRUTILS.@UnitInit
	.fi

	.ifdef MAIN.SYSUTILS.@UnitInit
	jsr MAIN.SYSUTILS.@UnitInit
	.fi

	.ifdef MAIN.MIDI_FIFO.@UnitInit
	jsr MAIN.MIDI_FIFO.@UnitInit
	.fi

	.ifdef MAIN.MIDFILES.@UnitInit
	jsr MAIN.MIDFILES.@UnitInit
	.fi

	.ifdef MAIN.MISC.@UnitInit
	jsr MAIN.MISC.@UnitInit
	.fi

	.ifdef MAIN.CIO.@UnitInit
	jsr MAIN.CIO.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.MC6850) > 0
	.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
	eif

	ift .SIZEOF(MAIN.DOS) > 0
	.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
	eif

	ift .SIZEOF(MAIN.STRUTILS) > 0
	.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
	eif

	ift .SIZEOF(MAIN.SYSUTILS) > 0
	.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
	eif

	ift .SIZEOF(MAIN.MIDI_FIFO) > 0
	.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
	eif

	ift .SIZEOF(MAIN.MIDFILES) > 0
	.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
	eif

	ift .SIZEOF(MAIN.MISC) > 0
	.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
	eif

	ift .SIZEOF(MAIN.CIO) > 0
	.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 511

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $02  $45 $3A $00 $12 $AD $A9 $A4 $A9
.by  $A3 $E1 $F2 $80 $B0 $EC $E1 $F9  $E5 $F2 $80 $B2 $A3 $91 $00 $08  $92 $90 $92 $92 $80 $A7 $B3 $A4
.by  $00 $07 $AC $EF $E1 $E4 $E9 $EE  $E7 $00 $12 $B5 $EE $F3 $F5 $F0  $F0 $EF $F2 $F4 $E5 $E4 $80 $E6
.by  $EF $F2 $ED $E1 $F4 $00 $12 $AE  $EF $F4 $80 $E5 $EE $EF $F5 $E7  $E8 $F4 $80 $ED $E5 $ED $EF $F2
.by  $F9 $00 $0B $A9 $8F $AF $80 $A5  $F2 $F2 $EF $F2 $80 $83 $00 $07  $B0 $EC $E1 $F9 $E9 $EE $E7 $00
.by  $07 $B0 $E1 $F5 $F3 $E5 $80 $80  $00 $F0 $7E $7F $09 $01 $F7 $10  $11 $12 $13 $14 $15 $16 $17 $18
.by  $19 $61 $62 $63 $64 $65 $66
.endm

	end
