; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/03/17] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_003F

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	FILEPOS						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000011  -------------------

	txa:pha

	mwa f :bp2

	ldy #s@file.chanel
	lda (:bp2),y
	tax
	lda #38
	sta iccmd,x

	m@call	ciov

	sty IOResult

	mva icax3,x :eax
	mva icax4,x :eax+1
	mva icax5,x :eax+2

	mva #$00 :eax+3
	sta :ecx+2
	sta :ecx+3

	ldy #s@file.record
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1

	jsr idivEAX_ECX.main

	mva :eax Result
	mva :eax+1 Result+1
	mva :eax+2 Result+2
	mva :eax+3 Result+3

	pla:tax

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000D

@VarData	= F
@VarDataSize	= 2

	rts						; ret
.endl

.local	SEEK						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000012  -------------------

	txa:pha

	mwa f :bp2

	ldy #s@file.chanel
	lda (:bp2),y
	tax
	lda #37
	sta iccmd,x

	ldy #s@file.record
	lda (:bp2),y
	sta :eax
	iny
	lda (:bp2),y
	sta :eax+1
	lda #$00
	sta :eax+2
	sta :eax+3

	mva a :ecx
	mva a+1 :ecx+1
	mva a+2 :ecx+2
	mva a+3 :ecx+3

	jsr imulECX

	mva :eax icax3,x
	mva :eax+1 icax4,x
	mva :eax+2 icax5,x

	m@call	ciov

	sty IOResult

	pla:tax

; ------------------------------------------------------------

F	= DATAORIGIN+$0011
A	= DATAORIGIN+$0013

@VarData	= F
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EOF						; FUNCTION

; optimize OK (SYSTEM), line = 1151

	lda F
	sta FILEPOS.F
	lda F+1
	sta FILEPOS.F+1
	jsr FILEPOS
	lda FILEPOS.RESULT
	sta I
	lda FILEPOS.RESULT+1
	sta I+1
	lda FILEPOS.RESULT+2
	sta I+2
	lda FILEPOS.RESULT+3
	sta I+3
; BlockRead

; optimize OK (SYSTEM), line = 1153

	mwy F :bp2
	ldy #s@file.buffer
	lda BF
	sta (:bp2),y
	iny
	lda BF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (SYSTEM), line = 1155

	lda F
	sta SEEK.F
	lda F+1
	sta SEEK.F+1
	lda I
	sta SEEK.A
	lda I+1
	sta SEEK.A+1
	lda I+2
	sta SEEK.A+2
	lda I+3
	sta SEEK.A+3
	jsr SEEK

; -------------------  ASM Block 00000013  -------------------

	mwa f :bp2

	ldy #s@file.status
	lda (:bp2),y
	and #e@file.eof
	sta Result

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$0017
RESULT	= DATAORIGIN+$0019
I	= DATAORIGIN+$001A
adr.BF	= [DATAORIGIN+$001E] .array [256]
.var BF	= adr.BF .word

@VarData	= F
@VarDataSize	= 262

	rts						; ret
.endl

.local	PARAMCOUNT					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000044  -------------------

	@cmdline #255
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$011E
	rts						; ret
.endl

.local	PARAMSTR					; FUNCTION | ASSEMBLER
	sta I

; -------------------  ASM Block 00000045  -------------------

	@cmdline i

;	@move #@buf Result #33
	ldy #256-33
	mva:rne @buf+33-256,y adr.Result+33-256,y+

@exit

; ------------------------------------------------------------

I	= DATAORIGIN+$011F
adr.RESULT	= [DATAORIGIN+$0120] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= I
@VarDataSize	= 34

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	MC6850						; UNIT

.local	MC6850_RESET					; PROCEDURE

; optimize OK (MC6850), line = 68

	lda #$03
	sta MC6850_CNTRREG
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MC6850_INIT					; PROCEDURE
	sta SETUP

; optimize OK (MC6850), line = 73

	sta MC6850_CNTRREG

; ------------------------------------------------------------

SETUP	= DATAORIGIN+$0141

@VarData	= SETUP
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MC6850_SEND					; PROCEDURE
	sta DATA

; --- RepeatUntilProlog
l_00D6

; optimize OK (MC6850), line = 84

	lda MC6850_CNTRREG
	and #$02
	jeq l_00D6

; optimize OK (MC6850), line = 85

	lda DATA
	sta MC6850_BUFFER

; ------------------------------------------------------------

DATA	= DATAORIGIN+$0142

@VarData	= DATA
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

MC6850_BASE	= $D500
ADDR_MC6850_CNTRREG	= $D500
ADDR_MC6850_BUFFER	= $D501
ADDR_MC6850_STATREG	= $D500
CR0	= $01
CR1	= $02
CR2	= $04
CR3	= $08
CR4	= $10
CR5	= $20
CR6	= $40
CR7	= $80
CD_1	= $00
CD_16	= $01
CD_64	= $02
MASTERRESET	= $03
WS_7BITS	= $00
WS_8BITS	= $10
WS_2BITSTOP	= $00
WS_1BITSTOP	= $08
WS_EVENPARITY	= $00
WS_ODDPARITY	= $04
TC_RTSLOW_NOTIRQ	= $00
TC_RTSLOW_TIRQ	= $20
TC_RTSHIGH_NOTIRQ	= $40
TC_BREAKLEVEL	= $60
NOIRQ_RECEIVE	= $00
IRQ_RECEIVE	= $80
RDRF	= $01
TDRE	= $02
DCD	= $04
CTS	= $08
FE	= $10
OVRN	= $20
PE	= $40
IRQ	= $80
MC6850_CNTRREG	= $D500
MC6850_BUFFER	= $D501
MC6850_STATREG	= $D500

.endl							; UNIT MC6850

; ------------------------------------------------------------

.local	MIDFILES					; UNIT

.local	WORDBI						; FUNCTION

; optimize OK (MIDFILES), line = 68

	lda <RESULT
	sta RESULTPTR
	lda >RESULT
	sta RESULTPTR+1

; optimize OK (MIDFILES), line = 69

	mwy BI :bp2
	ldy #$01
	lda (:bp2),y
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y
	inc RESULTPTR
	sne
	inc RESULTPTR+1

; optimize OK (MIDFILES), line = 70

	ldy #$00
	lda (:bp2),y
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y
@exit

; ------------------------------------------------------------

BI	= DATAORIGIN+$0163
RESULT	= DATAORIGIN+$0165
RESULTPTR	= DATAORIGIN+$0167

@VarData	= BI
@VarDataSize	= 4

	rts						; ret
.endl

.local	LONGBI						; FUNCTION

; optimize OK (MIDFILES), line = 79

	lda <RESULT
	sta RESULTPTR
	lda >RESULT
	sta RESULTPTR+1

; optimize OK (MIDFILES), line = 80

	lda #$03
	sta I

l_0118
; --- ForToDoCondition

; optimize OK (MIDFILES), line = 82

	mwy BI :bp2
	ldy I
	lda (:bp2),y
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y

; optimize FAIL (0, MIDFILES), line = 83

	inc RESULTPTR
	sne
	inc RESULTPTR+1

; --- ForToDoEpilog
	dec I
	jpl l_0118
l_0126
@exit

; ------------------------------------------------------------

BI	= DATAORIGIN+$0169
RESULT	= DATAORIGIN+$016B
RESULTPTR	= DATAORIGIN+$016F
I	= DATAORIGIN+$0171

@VarData	= BI
@VarDataSize	= 5

	rts						; ret
.endl

.local	LOADMID						; FUNCTION

	jmp l_013C

.local	READWORDBI					; FUNCTION

; BlockRead

; optimize OK (MIDFILES), line = 102

	mwy F :bp2
	ldy #s@file.buffer
	lda BI
	sta (:bp2),y
	iny
	lda BI+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$02
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (MIDFILES), line = 103

	lda BI
	sta WORDBI.BI
	lda BI+1
	sta WORDBI.BI+1
	jsr WORDBI
	lda WORDBI.RESULT
	sta RESULT
	lda WORDBI.RESULT+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0191
	rts						; ret
.endl

.local	READLONGBI					; FUNCTION

; BlockRead

; optimize OK (MIDFILES), line = 108

	mwy F :bp2
	ldy #s@file.buffer
	lda BI
	sta (:bp2),y
	iny
	lda BI+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (MIDFILES), line = 109

	lda BI
	sta LONGBI.BI
	lda BI+1
	sta LONGBI.BI+1
	jsr LONGBI
	lda LONGBI.RESULT
	sta RESULT
	lda LONGBI.RESULT+1
	sta RESULT+1
	lda LONGBI.RESULT+2
	sta RESULT+2
	lda LONGBI.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0193
	rts						; ret
.endl
l_013C

; optimize OK (MIDFILES), line = 113

	lda MIDTRACKS
	sta NTRKREC
	lda MIDTRACKS+1
	sta NTRKREC+1

; optimize FAIL ('@print', MIDFILES), line = 114

	@printSTRING #CODEORIGIN+$0000
	@printSTRING FN
	@printEOL
; AssignFile

; optimize OK (MIDFILES), line = 116

	mwy F :bp2
	ldy #s@file.pfname
	lda FN
	sta (:bp2),y
	iny
	lda FN+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Reset

; optimize OK (MIDFILES), line = 117

	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@openfile F, MAIN.SYSTEM.FileMode
	pla:tax

; optimize OK (MIDFILES), line = 118

	lda SYSTEM.IORESULT
	jpl l_018F

; optimize FAIL ('@print', MIDFILES), line = 120

	@print #$9B
	@printSTRING #CODEORIGIN+$000C
	lda SYSTEM.IORESULT
	jsr @printBYTE._a
	@printEOL
; CloseFile

	txa:pha
	clc
	@closefile F
	pla:tax

; optimize OK (MIDFILES), line = 122

	lda #$00
	sta RESULT
	jmp @exit					; exit
l_018F

; optimize OK (MIDFILES), line = 124

	lda #$00
	sta TRACKCOUNT
	sta TRACKCOUNT+1
	sta DATAPOS
	sta DATAPOS+1
	lda #$FF
	sta NTRACKS
	lda #$00
	sta NTRACKS+1

; --- WhileProlog
	jmp l_01AF
l_01B0
; BlockRead

; optimize OK (MIDFILES), line = 127

	mwy F :bp2
	ldy #s@file.buffer
	lda <CHUNKTAG
	sta (:bp2),y
	iny
	lda >CHUNKTAG
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
	ldy #s@file.numread
	lda <V
	sta (:bp2),y
	iny
	lda >V
	sta (:bp2),y

	txa:pha
	clc
	@readfile F, #135
	pla:tax

; optimize OK (MIDFILES), line = 128

	lda V+1
	bne @+
	lda V
	cmp #$04
@
	jeq l_01CD
	jmp b_01B0					; break
l_01CD

; optimize FAIL ('READLONGBI', MIDFILES), line = 129

	jsr READLONGBI
	lda READLONGBI.RESULT
	sta LEN
	lda READLONGBI.RESULT+1
	sta LEN+1
	lda READLONGBI.RESULT+2
	sta LEN+2
	lda READLONGBI.RESULT+3
	sta LEN+3

; optimize OK (MIDFILES), line = 130

	lda CHUNKTAG+3
	eor #$64
	jne l_01E4
	lda CHUNKTAG+2
	eor #$68
	jne l_01E4
	lda CHUNKTAG+1
	eor #$54
	jne l_01E4
	lda CHUNKTAG
	eor #$4D
	jne l_01E4

; optimize FAIL ('READWORDBI', MIDFILES), line = 132

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta FORMAT
	lda READWORDBI.RESULT+1
	sta FORMAT+1

; optimize FAIL ('READWORDBI', MIDFILES), line = 133

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta NTRACKS
	lda READWORDBI.RESULT+1
	sta NTRACKS+1

; optimize FAIL ('READWORDBI', MIDFILES), line = 134

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta V
	lda READWORDBI.RESULT+1
	sta V+1

; optimize OK (MIDFILES), line = 135

	jpl l_0206

; optimize OK (MIDFILES), line = 137

	and #$7F
	sta FPS

; optimize OK (MIDFILES), line = 138

	sta @CASETMP_0003
	cmp #$E8
	jne l_021F
@

; optimize OK (MIDFILES), line = 139

	lda #$18
	sta FPS

	jmp a_0003
l_021F
	cmp #$E7
	jne l_022C
@

; optimize OK (MIDFILES), line = 140

	lda #$19
	sta FPS

	jmp a_0003
l_022C
	cmp #$E3
	jne l_0239
@

; optimize OK (MIDFILES), line = 141

	lda #$1D
	sta FPS

	jmp a_0003
l_0239
	cmp #$E2
	jne l_0246
@

; optimize OK (MIDFILES), line = 142

	lda #$1E
	sta FPS

l_0246
a_0003

; optimize OK (MIDFILES), line = 144

	lda V
	sta FSD
	jmp l_0264
l_0206

; optimize OK (MIDFILES), line = 152

	lda V
	sta TICKDIV
	lda V+1
	and #$7F
	sta TICKDIV+1
l_0264
	jmp l_0276
l_01E4

; optimize OK (MIDFILES), line = 158

	lda CHUNKTAG+3
	eor #$6B
	jne l_0286
	lda CHUNKTAG+2
	eor #$72
	jne l_0286
	lda CHUNKTAG+1
	eor #$54
	jne l_0286
	lda CHUNKTAG
	eor #$4D
	jne l_0286

; optimize FAIL (0, MIDFILES), line = 160

	inc TRACKCOUNT
	sne
	inc TRACKCOUNT+1

; optimize FAIL ('@print', MIDFILES), line = 161

	@printSTRING #CODEORIGIN+$0019
	lda TRACKCOUNT
	ldy TRACKCOUNT+1
	jsr @printWORD._ay
	@print #$2F
	lda NTRACKS
	ldy NTRACKS+1
	jsr @printWORD._ay
	@printSTRING #CODEORIGIN+$0022
; BlockRead

; optimize OK (MIDFILES), line = 162

	mwy F :bp2
	ldy #s@file.buffer
	lda MIDDATA
	add DATAPOS
	sta (:bp2),y
	iny
	lda MIDDATA+1
	adc DATAPOS+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda LEN
	sta (:bp2),y
	iny
	lda LEN+1
	sta (:bp2),y

	txa:pha
	clc
	@readfile F, #7
	pla:tax

; optimize OK (MIDFILES), line = 163

	mwy NTRKREC :bp2
	ldy #$00
	lda MIDDATA
	add DATAPOS
	sta (:bp2),y
	iny
	lda MIDDATA+1
	adc DATAPOS+1
	sta (:bp2),y

; optimize OK (MIDFILES), line = 164

	iny
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (MIDFILES), line = 165

	iny
	sta (:bp2),y

; optimize OK (MIDFILES), line = 166

	iny
	sta (:bp2),y

; optimize OK (MIDFILES), line = 167

	lda NTRKREC
	add #$09
	sta NTRKREC
	scc
	inc NTRKREC+1

; optimize OK (MIDFILES), line = 168

	lda DATAPOS
	add LEN
	sta DATAPOS
	lda DATAPOS+1
	adc LEN+1
	sta DATAPOS+1
l_0286
l_0276

; optimize FAIL ('@print', MIDFILES), line = 170

	@print #$9C
l_01AF

; optimize FAIL (1, MIDFILES), line = 125

	inx
	ldy #1
	lda SYSTEM.IORESULT
	cmp #$80
	bcc @+
	dey
@
	sty :STACKORIGIN,x
	lda F
	sta SYSTEM.EOF.F
	lda F+1
	sta SYSTEM.EOF.F+1
	jsr SYSTEM.EOF
	inx
	mva SYSTEM.EOF.RESULT :STACKORIGIN,x
	jsr notBOOLEAN
	jsr andAL_CL
	mva TRACKCOUNT :STACKORIGIN,x
	mva TRACKCOUNT+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva NTRACKS :STACKORIGIN,x
	mva NTRACKS+1 :STACKORIGIN+STACKWIDTH,x
	ldy #1
	jsr cmpEAX_ECX.AX_CX
	bcc @+
	dey
@
	sty :STACKORIGIN-1,x
	dex
	jsr andAL_CL
	dex
	dex
	lda :STACKORIGIN+1,x
	jne l_01B0
b_01B0
; CloseFile

	txa:pha
	clc
	@closefile F
	pla:tax

; optimize OK (MIDFILES), line = 173

	lda #$01
	sta RESULT
@exit

; ------------------------------------------------------------

FN	= DATAORIGIN+$0172
RESULT	= DATAORIGIN+$0174
.var F	= DATAORIGIN+$0175 .word
TRACKCOUNT	= DATAORIGIN+$0181
CHUNKTAG	= DATAORIGIN+$0183
V	= DATAORIGIN+$0187
DATAPOS	= DATAORIGIN+$0189
LEN	= DATAORIGIN+$018B
NTRKREC	= DATAORIGIN+$018F
NTRKREC.PTR	= DATAORIGIN+$0000
NTRKREC.DELTATIME	= DATAORIGIN+$0002
NTRKREC.SKIPDELTA	= DATAORIGIN+$0006
NTRKREC.EOT	= DATAORIGIN+$0007
NTRKREC._EVENT	= DATAORIGIN+$0008
@CASETMP_0003	= DATAORIGIN+$0197

@VarData	= FN
@VarDataSize	= 29

	rts						; ret
.endl

.local	GETTRACKDATA					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta TRACK
	lda :STACKORIGIN+STACKWIDTH,x
	sta TRACK+1
	dex
@main

	jmp l_02E9

.local	GETVARLONG					; FUNCTION

; optimize OK (MIDFILES), line = 188

	lda #$00
	sta RESULT
	sta RESULT+1
	sta RESULT+2
	sta RESULT+3

; --- RepeatUntilProlog
l_02F1

; optimize OK (MIDFILES), line = 190

	mwy TRACKDATA :bp2
	ldy #$00
	lda (:bp2),y
	sta V
	inc TRACKDATA
	sne
	inc TRACKDATA+1

; optimize OK (MIDFILES), line = 191

	lda RESULT
	sta :STACKORIGIN+9
	lda RESULT+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda RESULT+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda RESULT+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sta RESULT
	lda :STACKORIGIN+STACKWIDTH+9
	sta RESULT+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta RESULT+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sta RESULT+3

; optimize OK (MIDFILES), line = 192

	lda V
	and #$7F
	ora RESULT
	sta RESULT

; optimize OK (MIDFILES), line = 193

	lda V
	jmi l_02F1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01B5
V	= DATAORIGIN+$01B9

@VarData	= V
@VarDataSize	= 1

	rts						; ret
.endl

.local	GETBYTE						; FUNCTION

; optimize OK (MIDFILES), line = 198

	mwy TRACKDATA :bp2
	ldy #$00
	lda (:bp2),y
	sta RESULT
	inc TRACKDATA
	sne
	inc TRACKDATA+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01BA
	rts						; ret
.endl

.local	GET24BITVAL					; FUNCTION

; optimize OK (MIDFILES), line = 207

	lda <RESULT
	sta RESULTPTR
	lda >RESULT
	sta RESULTPTR+1

; optimize OK (MIDFILES), line = 208

	mwy TRACKDATA :bp2
	ldy #$00
	lda (:bp2),y
	sta A
	inc TRACKDATA
	sne
	inc TRACKDATA+1

; optimize OK (MIDFILES), line = 209

	mwy TRACKDATA :bp2
	ldy #$00
	lda (:bp2),y
	sta B
	inc TRACKDATA
	sne
	inc TRACKDATA+1

; optimize OK (MIDFILES), line = 210

	mwy TRACKDATA :bp2
	ldy #$00
	lda (:bp2),y
	sta C
	inc TRACKDATA
	sne
	inc TRACKDATA+1

; optimize OK (MIDFILES), line = 211

	mwy RESULTPTR :bp2
	ldy #$00
	lda C
	sta (:bp2),y

; optimize FAIL (0, MIDFILES), line = 212

	inc RESULTPTR
	sne
	inc RESULTPTR+1
	mwy RESULTPTR :bp2
	ldy #$00
	lda B
	sta (:bp2),y

; optimize FAIL (0, MIDFILES), line = 213

	inc RESULTPTR
	sne
	inc RESULTPTR+1
	mwy RESULTPTR :bp2
	ldy #$00
	lda A
	sta (:bp2),y
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01BB
RESULTPTR	= DATAORIGIN+$01BF
A	= DATAORIGIN+$01C1
B	= DATAORIGIN+$01C2
C	= DATAORIGIN+$01C3

@VarData	= RESULTPTR
@VarDataSize	= 5

	rts						; ret
.endl
l_02E9

; optimize OK (MIDFILES), line = 217

	mwy TRACK :bp2
	ldy #$00
	lda (:bp2),y
	sta TRACKDATA
	iny
	lda (:bp2),y
	sta TRACKDATA+1

; optimize OK (MIDFILES), line = 218

	ldy #$08
	lda (:bp2),y
	sta EVENT

; --- RepeatUntilProlog
l_037D

; optimize OK (MIDFILES), line = 220

	mwy TRACK :bp2
	ldy #$06
	lda (:bp2),y
	jne l_038C

; optimize FAIL ('GETVARLONG', MIDFILES), line = 222

	jsr GETVARLONG
	lda GETVARLONG.RESULT
	sta DELTATIME
	lda GETVARLONG.RESULT+1
	sta DELTATIME+1
	lda GETVARLONG.RESULT+2
	sta DELTATIME+2
	lda GETVARLONG.RESULT+3
	sta DELTATIME+3

; optimize OK (MIDFILES), line = 223

	jmi l_03A1
	ora DELTATIME+2
	ora DELTATIME+1
	ora DELTATIME
	jeq l_03A1
	jmp b_037D					; break
l_03A1
	jmp l_03AD
l_038C

; optimize OK (MIDFILES), line = 227

	mwy TRACK :bp2
	ldy #$06
	lda #$00
	sta (:bp2),y
l_03AD

; optimize OK (MIDFILES), line = 229

	mwy TRACKDATA :bp2
	ldy #$00
	lda (:bp2),y
	jpl l_03C7

; optimize FAIL ('GETBYTE', MIDFILES), line = 230

	jsr GETBYTE
	lda GETBYTE.RESULT
	sta EVENT
l_03C7

; optimize OK (MIDFILES), line = 232

	lda EVENT
	sta @CASETMP_0004
	clc						; clear carry for add
	adc #$FF-$BF					; make m = $FF
	adc #$BF-$80+1					; carry set if in range n to m
	bcs @+
	lda @CASETMP_0004
	clc						; clear carry for add
	adc #$FF-$EF					; make m = $FF
	adc #$EF-$E0+1					; carry set if in range n to m
	jcc l_03DB
@

; optimize OK (MIDFILES), line = 241

	lda EVENT
	jsr MC6850.MC6850_SEND

; optimize FAIL ('GETBYTE', MIDFILES), line = 242

	jsr GETBYTE
	lda GETBYTE.RESULT
	jsr MC6850.MC6850_SEND

; optimize FAIL ('GETBYTE', MIDFILES), line = 243

	jsr GETBYTE
	lda GETBYTE.RESULT
	jsr MC6850.MC6850_SEND

	jmp a_0004
l_03DB
	lda @CASETMP_0004
	clc						; clear carry for add
	adc #$FF-$DF					; make m = $FF
	adc #$DF-$C0+1					; carry set if in range n to m
	jcc l_03EC
@

; optimize OK (MIDFILES), line = 252

	lda EVENT
	jsr MC6850.MC6850_SEND

; optimize FAIL ('GETBYTE', MIDFILES), line = 253

	jsr GETBYTE
	lda GETBYTE.RESULT
	jsr MC6850.MC6850_SEND

	jmp a_0004
l_03EC
	lda @CASETMP_0004
	clc						; clear carry for add
	adc #$FF-$F7					; make m = $FF
	adc #$F7-$F0+1					; carry set if in range n to m
	jcc l_03FB
@

; optimize FAIL ('GETVARLONG', MIDFILES), line = 258

	jsr GETVARLONG
	lda GETVARLONG.RESULT
	sta MSGLEN
	lda GETVARLONG.RESULT+1
	sta MSGLEN+1
	lda GETVARLONG.RESULT+2
	sta MSGLEN+2
	lda GETVARLONG.RESULT+3
	sta MSGLEN+3

; optimize OK (MIDFILES), line = 262

	lda EVENT
	jsr MC6850.MC6850_SEND

; --- WhileProlog
	jmp l_0405
l_0406

; optimize FAIL ('GETBYTE', MIDFILES), line = 266

	jsr GETBYTE
	lda GETBYTE.RESULT
	sta V

; optimize OK (MIDFILES), line = 270

	jsr MC6850.MC6850_SEND

; optimize FAIL (0, MIDFILES), line = 272

	ded MSGLEN
l_0405

; optimize OK (MIDFILES), line = 264

	lda MSGLEN+3
	bmi @+
	ora MSGLEN+2
	ora MSGLEN+1
	ora MSGLEN
	jne l_0406
@

; optimize OK (MIDFILES), line = 274

	lda V
	cmp #$F7
	jne l_042F
	lda #$00
	sta FLAGSYSEX
	jmp l_043D
l_042F
	lda #$01
	sta FLAGSYSEX
l_043D

	jmp a_0004
l_03FB
	lda @CASETMP_0004
	cmp #$FF
	jne l_044A
@

; optimize FAIL ('GETBYTE', MIDFILES), line = 278

	jsr GETBYTE
	lda GETBYTE.RESULT
	sta EVENT

; optimize FAIL ('GETVARLONG', MIDFILES), line = 279

	jsr GETVARLONG
	lda GETVARLONG.RESULT
	sta MSGLEN
	lda GETVARLONG.RESULT+1
	sta MSGLEN+1
	lda GETVARLONG.RESULT+2
	sta MSGLEN+2
	lda GETVARLONG.RESULT+3
	sta MSGLEN+3

; optimize OK (MIDFILES), line = 280

	lda EVENT
	sta @CASETMP_0005
	cmp #$2F
	jne l_045D
@

; optimize OK (MIDFILES), line = 282

	mwy TRACK :bp2
	ldy #$07
	lda #$01
	sta (:bp2),y

	jmp a_0005
l_045D
	cmp #$51
	jne l_046A
@

; optimize FAIL ('GET24BITVAL', MIDFILES), line = 285

	jsr GET24BITVAL
	lda GET24BITVAL.RESULT
	sta MS_PER_QNOTE
	lda GET24BITVAL.RESULT+1
	sta MS_PER_QNOTE+1
	lda GET24BITVAL.RESULT+2
	sta MS_PER_QNOTE+2
	lda GET24BITVAL.RESULT+3
	sta MS_PER_QNOTE+3

; optimize OK (MIDFILES), line = 286

	lda MS_PER_QNOTE
	sta SETTEMPO.NTEMPO
	lda MS_PER_QNOTE+1
	sta SETTEMPO.NTEMPO+1
	lda MS_PER_QNOTE+2
	sta SETTEMPO.NTEMPO+2
	lda MS_PER_QNOTE+3
	sta SETTEMPO.NTEMPO+3
	jsr SETTEMPO

	jmp a_0005
l_046A
	cmp #$58
	jne l_0479
@

; optimize FAIL ('GETBYTE', MIDFILES), line = 290

	jsr GETBYTE
	lda GETBYTE.RESULT
	sta TACTNUM

; optimize FAIL ('GETBYTE', MIDFILES), line = 291

	jsr GETBYTE
	lda GETBYTE.RESULT
	sta TACTDENUM

; optimize FAIL ('GETBYTE', MIDFILES), line = 292

	jsr GETBYTE
	lda GETBYTE.RESULT
	sta TICKS_PER_QNOTE

; optimize FAIL ('GETBYTE', MIDFILES), line = 293

	jsr GETBYTE
	lda GETBYTE.RESULT
	sta TICKS_PER_32ND

	jmp a_0005
l_0479

; optimize OK (MIDFILES), line = 297

	lda TRACKDATA
	add MSGLEN
	sta TRACKDATA
	lda TRACKDATA+1
	adc MSGLEN+1
	sta TRACKDATA+1
a_0005

l_044A
a_0004

; optimize OK (MIDFILES), line = 301

	mwy TRACK :bp2
	ldy #$07
	lda (:bp2),y
	jeq l_037D
b_037D

; optimize OK (MIDFILES), line = 302

	mwy TRACK :bp2
	ldy #$00
	lda TRACKDATA
	sta (:bp2),y
	iny
	lda TRACKDATA+1
	sta (:bp2),y

; optimize OK (MIDFILES), line = 303

	ldy #$06
	lda #$01
	sta (:bp2),y

; optimize OK (MIDFILES), line = 304

	ldy #$08
	lda EVENT
	sta (:bp2),y

; optimize OK (MIDFILES), line = 305

	lda DELTATIME
	sta RESULT
	lda DELTATIME+1
	sta RESULT+1
	lda DELTATIME+2
	sta RESULT+2
	lda DELTATIME+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

TRACK	= DATAORIGIN+$0198
RESULT	= DATAORIGIN+$01A4
TRACKDATA	= DATAORIGIN+$01A8
FLAGSYSEX	= DATAORIGIN+$01AA
DELTATIME	= DATAORIGIN+$01AB
MSGLEN	= DATAORIGIN+$01AF
V	= DATAORIGIN+$01B3
EVENT	= DATAORIGIN+$01B4
@CASETMP_0004	= DATAORIGIN+$01C4
@CASETMP_0005	= DATAORIGIN+$01C5

@VarData	= TRACK
@VarDataSize	= 27

	rts						; ret
.endl

.local	INT_PLAY					; PROCEDURE | INTERRUPT

; optimize OK (MIDFILES), line = 311

	lda _PAUSECOUNT
	jne l_04C6

; optimize FAIL (0, MIDFILES), line = 313

	inc _SUBCNT

; optimize OK (MIDFILES), line = 314

	lda _SUBCNT
	cmp #$02
	jcc l_04DD

; optimize OK (MIDFILES), line = 316

	lda #$00
	sta _SUBCNT

; optimize FAIL (0, MIDFILES), line = 317

	ind TOTALTICKS
l_04DD
l_04C6

; -------------------  ASM Block 00000052  -------------------

    pla
  
	rti						; ret
.endl

.local	SETTEMPO					; PROCEDURE

; optimize OK (MIDFILES), line = 332

	sei
	mva OLDVEC VTIMR1
	mva OLDVEC+1 VTIMR1+1
	lda irqens
	and #$fe
	sta irqens
	sta irqen
	cli

; optimize FAIL ('I2F', MIDFILES), line = 334

	inx
	mva #$00 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$80 :STACKORIGIN+STACKWIDTH*2,x
	mva #$3F :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva NTEMPO :STACKORIGIN,x
	mva NTEMPO+1 :STACKORIGIN+STACKWIDTH,x
	mva NTEMPO+2 :STACKORIGIN+STACKWIDTH*2,x
	mva NTEMPO+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva TICKDIV :STACKORIGIN,x
	mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr I2F
	jsr I2F_m
	jsr FDIV
	mva #$00 :STACKORIGIN,x
	mva #$24 :STACKORIGIN+STACKWIDTH,x
	mva #$74 :STACKORIGIN+STACKWIDTH*2,x
	mva #$49 :STACKORIGIN+STACKWIDTH*3,x
	jsr FDIV
	dex
	jsr FDIV
	mva #$00 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$40 :STACKORIGIN+STACKWIDTH*3,x
	jsr FMUL
	dex
	lda :STACKORIGIN,x
	sta FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta FREQ+3

; optimize FAIL ('I2F_m', MIDFILES), line = 335

	mva #$00 :STACKORIGIN,x
	mva #$FA :STACKORIGIN+STACKWIDTH,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
	jsr I2F_m
	jsr FDIV
	dex
	jsr FROUND
	jsr F2I
	lda :STACKORIGIN,x
	sta _FDIV

; optimize FAIL ('divmulINT.REAL', MIDFILES), line = 336

	mva #$00 :STACKORIGIN,x
	mva #$87 :STACKORIGIN+STACKWIDTH,x
	mva #$93 :STACKORIGIN+STACKWIDTH*2,x
	mva #$03 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva NTEMPO :STACKORIGIN,x
	mva NTEMPO+1 :STACKORIGIN+STACKWIDTH,x
	mva NTEMPO+2 :STACKORIGIN+STACKWIDTH*2,x
	mva NTEMPO+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @expandToREAL
	jsr @expandToREAL1
	jsr divmulINT.REAL
	dex
	lda :STACKORIGIN,x
	sta @REAL_ROUND.A
	lda :STACKORIGIN+STACKWIDTH,x
	sta @REAL_ROUND.A+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta @REAL_ROUND.A+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta @REAL_ROUND.A+3
	jsr @REAL_ROUND
	lda @REAL_ROUND.RESULT
	sta BPM
	lda @REAL_ROUND.RESULT+1
	sta BPM+1
	dex

; optimize OK (MIDFILES), line = 337

	sei
	mva <INT_PLAY VTIMR1
	mva >INT_PLAY VTIMR1+1
	lda #$00
	ldy #$03
	sta AUDCTL
	sta AUDC1
	sty SKCTL
	sta AUDCTL
	mva _FDIV AUDF1
	lda irqens
	ora #$01
	sta irqens
	sta irqen
	sta stimer
	cli

; ------------------------------------------------------------

NTEMPO	= DATAORIGIN+$01C6
FREQ	= DATAORIGIN+$01CA
_FDIV	= DATAORIGIN+$01CE

@VarData	= NTEMPO
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize OK (MIDFILES), line = 341

	lda #$04
	sta TACTNUM

; optimize OK (MIDFILES), line = 342

	sta TACTDENUM

; optimize OK (MIDFILES), line = 343

	lda #$18
	sta TICKS_PER_QNOTE

; optimize OK (MIDFILES), line = 344

	lda #$08
	sta TICKS_PER_32ND

; optimize OK (MIDFILES), line = 345

	lda #$20
	sta MS_PER_QNOTE
	lda #$A1
	sta MS_PER_QNOTE+1
	lda #$07
	sta MS_PER_QNOTE+2
	lda #$00
	sta MS_PER_QNOTE+3

	lda VTIMR1
	sta OLDVEC
	lda VTIMR1+1
	sta OLDVEC+1

	rts

; ------------------------------------------------------------

FREQ_RATIO	= $02
adr.MIDDATA	= [DATAORIGIN+$0143] .array [1]
.var MIDDATA	= adr.MIDDATA .word
adr.MIDTRACKS	= [DATAORIGIN+$0144] .array [1]
.var MIDTRACKS	= adr.MIDTRACKS .word
FORMAT	= DATAORIGIN+$0145
NTRACKS	= DATAORIGIN+$0147
FPS	= DATAORIGIN+$0149
FSD	= DATAORIGIN+$014A
TICKDIV	= DATAORIGIN+$014B
TOTALTICKS	= DATAORIGIN+$014D
MS_PER_QNOTE	= DATAORIGIN+$0151
TACTNUM	= DATAORIGIN+$0155
TACTDENUM	= DATAORIGIN+$0156
TICKS_PER_QNOTE	= DATAORIGIN+$0157
TICKS_PER_32ND	= DATAORIGIN+$0158
BPM	= DATAORIGIN+$0159
OLDVEC	= DATAORIGIN+$015B
_PAUSECOUNT	= DATAORIGIN+$015D
_SUBCNT	= DATAORIGIN+$015E
TAG_MTHD	= $6468544D
TAG_MTRK	= $6B72544D
adr.BI	= [DATAORIGIN+$015F] .array [4]
.var BI	= adr.BI .word
adr.RBUF	= $0600
.var RBUF	= adr.RBUF .word

.endl							; UNIT MIDFILES
l_003F

; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 18

	jsr MC6850.MC6850_RESET

; optimize OK (MIDICar Player.pas), line = 19

	lda #$16
	jsr MC6850.MC6850_INIT

; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 21

	jsr SYSTEM.PARAMCOUNT
	lda SYSTEM.PARAMCOUNT.RESULT
	cmp #$01
	jne l_0551
@

; optimize OK (MIDICar Player.pas), line = 22

	lda #$01
	jsr SYSTEM.PARAMSTR
	lda SYSTEM.PARAMSTR.RESULT
	sta FN
	lda SYSTEM.PARAMSTR.RESULT+1
	sta FN+1
	jmp l_0560
l_0551

; optimize OK (MIDICar Player.pas), line = 24

	lda #$27
	sta FN
	lda #$20
	sta FN+1
l_0560

; optimize OK (MIDICar Player.pas), line = 26

	lda #$00
	sta MIDFILES.MIDTRACKS
	lda #$40
	sta MIDFILES.MIDTRACKS+1

; optimize OK (MIDICar Player.pas), line = 27

	lda #$00
	sta MIDFILES.MIDDATA
	lda #$41
	sta MIDFILES.MIDDATA+1

; optimize OK (MIDICar Player.pas), line = 28

	lda FN
	sta MIDFILES.LOADMID.FN
	lda FN+1
	sta MIDFILES.LOADMID.FN+1
	jsr MIDFILES.LOADMID
	lda MIDFILES.LOADMID.RESULT
	jne l_057B
	lda #$01
	jmp @halt
l_057B

; optimize OK (MIDICar Player.pas), line = 29

	lda #$00
	sta MIDFILES.TOTALTICKS
	sta MIDFILES.TOTALTICKS+1
	sta MIDFILES.TOTALTICKS+2
	sta MIDFILES.TOTALTICKS+3

; optimize OK (MIDICar Player.pas), line = 31

	lda #$20
	sta MIDFILES.SETTEMPO.NTEMPO
	lda #$A1
	sta MIDFILES.SETTEMPO.NTEMPO+1
	lda #$07
	sta MIDFILES.SETTEMPO.NTEMPO+2
	lda #$00
	sta MIDFILES.SETTEMPO.NTEMPO+3
	jsr MIDFILES.SETTEMPO

; --- RepeatUntilProlog
l_0587

; optimize OK (MIDICar Player.pas), line = 34

	lda MIDFILES.NTRACKS
	sta PLAYINGTRACKS
	lda #$00
	sta CURTRACKOFS

; optimize OK (MIDICar Player.pas), line = 35

	sta CTRK
	ldy MIDFILES.NTRACKS
	dey
	sty @FORTMP_059B_0

l_059E
; --- ForToDoCondition
	lda @FORTMP_059B_0:#$00
	cmp CTRK
	jcc l_05AC

; optimize OK (MIDICar Player.pas), line = 37

	lda MIDFILES.MIDTRACKS
	add CURTRACKOFS
	sta TRACK
	lda MIDFILES.MIDTRACKS+1
	adc #$00
	sta TRACK+1

; optimize OK (MIDICar Player.pas), line = 38

	lda CURTRACKOFS
	add #$09
	sta CURTRACKOFS

; optimize OK (MIDICar Player.pas), line = 39

	mwy TRACK :bp2
	ldy #$07
	lda (:bp2),y
	jne l_05C2

; optimize OK (MIDICar Player.pas), line = 41

	ldy #$02
	lda (:bp2),y
	sta TRACKTIME
	iny
	lda (:bp2),y
	sta TRACKTIME+1
	iny
	lda (:bp2),y
	sta TRACKTIME+2
	iny
	lda (:bp2),y
	sta TRACKTIME+3

; optimize OK (MIDICar Player.pas), line = 42

	.LOCAL
	lda MIDFILES.TOTALTICKS+3
	sub TRACKTIME+3
	bne L4
	lda MIDFILES.TOTALTICKS+2
	cmp TRACKTIME+2
	bne L1
	lda MIDFILES.TOTALTICKS+1
	cmp TRACKTIME+1
	bne L1
	lda MIDFILES.TOTALTICKS
	cmp TRACKTIME
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_05D7

; optimize OK (MIDICar Player.pas), line = 44

	lda #$01
	sta MIDFILES._PAUSECOUNT

; optimize OK (MIDICar Player.pas), line = 45

	lda MIDFILES.TOTALTICKS
	sub TRACKTIME
	sta DTM
	lda MIDFILES.TOTALTICKS+1
	sbc TRACKTIME+1
	sta DTM+1
	lda MIDFILES.TOTALTICKS+2
	sbc TRACKTIME+2
	sta DTM+2
	lda MIDFILES.TOTALTICKS+3
	sbc TRACKTIME+3
	sta DTM+3

; optimize FAIL ('MIDFILES.GETTRACKDATA', MIDICar Player.pas), line = 46

	inx
	mva TRACK :STACKORIGIN,x
	mva TRACK+1 :STACKORIGIN+STACKWIDTH,x
	jsr MIDFILES.GETTRACKDATA
	lda MIDFILES.GETTRACKDATA.RESULT
	sta TRACKTIME
	lda MIDFILES.GETTRACKDATA.RESULT+1
	sta TRACKTIME+1
	lda MIDFILES.GETTRACKDATA.RESULT+2
	sta TRACKTIME+2
	lda MIDFILES.GETTRACKDATA.RESULT+3
	sta TRACKTIME+3

; optimize OK (MIDICar Player.pas), line = 47

	lda MIDFILES.TOTALTICKS
	add TRACKTIME
	sta :STACKORIGIN+9
	lda MIDFILES.TOTALTICKS+1
	adc TRACKTIME+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda MIDFILES.TOTALTICKS+2
	adc TRACKTIME+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda MIDFILES.TOTALTICKS+3
	adc TRACKTIME+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub DTM
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc DTM+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc DTM+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc DTM+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	mwy TRACK :bp2
	ldy #$02
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH*3+9
	sta (:bp2),y

; optimize OK (MIDICar Player.pas), line = 48

	lda #$00
	sta MIDFILES._PAUSECOUNT
l_05D7
	jmp l_0605
l_05C2

; optimize FAIL (0, MIDICar Player.pas), line = 53

	dec PLAYINGTRACKS
	jmp c_059E					; continue
l_0605

; --- ForToDoEpilog
c_059E
	inc CTRK
	jne l_059E
l_05AC

; optimize OK (MIDICar Player.pas), line = 64

	lda PLAYINGTRACKS
	jne l_0587

; optimize OK (MIDICar Player.pas), line = 66

	sei
	mva MIDFILES.OLDVEC VTIMR1
	mva MIDFILES.OLDVEC+1 VTIMR1+1
	lda irqens
	and #$fe
	sta irqens
	sta irqen
	cli

; ------------------------------------------------------------

FN	= DATAORIGIN+$01CF
TRACK	= DATAORIGIN+$01D1
TRACK.PTR	= DATAORIGIN+$0000
TRACK.DELTATIME	= DATAORIGIN+$0002
TRACK.SKIPDELTA	= DATAORIGIN+$0006
TRACK.EOT	= DATAORIGIN+$0007
TRACK._EVENT	= DATAORIGIN+$0008
CURTRACKOFS	= DATAORIGIN+$01D3
TRACKTIME	= DATAORIGIN+$01D4
DTM	= DATAORIGIN+$01D8
CTRK	= DATAORIGIN+$01DC
PLAYINGTRACKS	= DATAORIGIN+$01DD
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.MC6850.@UnitInit
	jsr MAIN.MC6850.@UnitInit
	.fi

	.ifdef MAIN.MIDFILES.@UnitInit
	jsr MAIN.MIDFILES.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.MC6850) > 0
	.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
	eif

	ift .SIZEOF(MAIN.MIDFILES) > 0
	.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 479

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $0A $4F $70 $65 $6E $20 $66 $69  $6C $65 $20 $00 $0B $49 $2F $4F  $20 $45 $72 $72 $6F $72 $20 $23
.by  $00 $07 $54 $72 $61 $63 $6B $3A  $20 $00 $03 $2E $2E $2E $00 $0F  $44 $32 $3A $53 $45 $4C $46 $54
.by  $45 $53 $54 $2E $4D $49 $44 $00
.endm

	end
