; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $8000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'resources/screen_addresses.obj' SCREEN_ADRSES 0 0 0 0 0 0 0 0
	RCDATA 'resources/font_blk.fnt' CHARS_ADDR 0 0 0 0 0 0 0 0
	RCASM 'resources/dlist.asm' DLIST_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'resources/header-gr8.obj' SCREEN_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'resources/footer-gr8-3.obj' SCREEN_FOOT 0 0 0 0 0 0 0 0
	RCDATA 'resources/uvmeter.obj' UVMETER_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'resources/help.obj' HELPSCR_ADDR 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0107

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000018  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	lda :STACKORIGIN+STACKWIDTH,x
	sta VALUE+1
	dex
@main

; -------------------  ASM Block 00000019  -------------------

	ldy #0
	mva value (:edx),y
	iny
	mva value+1 (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLCHAR_0151					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000021  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	FILLCHAR_0152					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000024  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

X	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	MOVE_0153					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000028  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	RANDOM_0172					; FUNCTION | ASSEMBLER | OVERLOAD
	sta RANGE

; -------------------  ASM Block 00000042  -------------------


;BYTE FUNC Rand(BYTE range)
; returns random number between 0 and
; range-1.  If range=0, then a random
; number between 0 and 255 is returned

  ldy $d20a   ; RANDOM

  lda range
  beq stop

  sta :ecx
  sty :eax

  jsr imulCL
  tay

stop  sty Result


@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000C

@VarData	= RANGE
@VarDataSize	= 1

	rts						; ret
.endl

.local	PARAMSTR					; FUNCTION | ASSEMBLER
	sta I

; -------------------  ASM Block 00000045  -------------------

	@cmdline i

;	@move #@buf Result #33
	ldy #256-33
	mva:rne @buf+33-256,y adr.Result+33-256,y+

@exit

; ------------------------------------------------------------

I	= DATAORIGIN+$000D
adr.RESULT	= [DATAORIGIN+$000E] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= I
@VarDataSize	= 34

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	MC6850						; UNIT

.local	MC6850_INIT					; PROCEDURE | ASSEMBLER | KEEP
	sta SETUP

; -------------------  ASM Block 00000052  -------------------

    lda setup
    sta MCBaseState:$d500

; ------------------------------------------------------------

SETUP	= DATAORIGIN+$002F

@VarData	= SETUP
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MC6850_SEND2					; PROCEDURE | ASSEMBLER | KEEP

; -------------------  ASM Block 00000053  -------------------

wait:
    lda MCBaseState:$d500
    and #TDRE
    bne wait

    lda MC_Byte
    sta MCBaseBuf:$d500

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

CR0	= $01
CR1	= $02
CR2	= $04
CR3	= $08
CR4	= $10
CR5	= $20
CR6	= $40
CR7	= $80
CD_1	= $00
CD_16	= $01
CD_64	= $02
MASTERRESET	= $03
WS_7BITS	= $00
WS_8BITS	= $10
WS_2BITSTOP	= $00
WS_1BITSTOP	= $08
WS_EVENPARITY	= $00
WS_ODDPARITY	= $04
TC_RTSLOW_NOTIRQ	= $00
TC_RTSLOW_TIRQ	= $20
TC_RTSHIGH_NOTIRQ	= $40
TC_BREAKLEVEL	= $60
NOIRQ_RECEIVE	= $00
IRQ_RECEIVE	= $80
RDRF	= $01
TDRE	= $02
DCD	= $04
CTS	= $08
FE	= $10
OVRN	= $20
PE	= $40
IRQ	= $80
MC_BYTE	= $FF

.endl							; UNIT MC6850

; ------------------------------------------------------------

.local	MIDI_FIFO					; UNIT

.local	FIFO_RESET					; PROCEDURE

; optimize OK (MIDI_FIFO), line = 30

	lda #$00
	sta FIFO_HEAD

; optimize OK (MIDI_FIFO), line = 31

	sta FIFO_TAIL
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_PUSHDIRECT2MC6850				; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000054  -------------------

  lda MCBaseState:$d500 // MC6850.MC6850_CNTRREG
  and #MC6850.TDRE
  beq exitPush

  ldy FIFO_Tail
  cpy FIFO_Head
  beq exitPush

  lda FIFO_ADDR,y
  sta MCBaseBuf:$d500  //MC6850.MC6850_BUFFER
  inc FIFO_Tail

exitPush:

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000055  -------------------

  lda FIFO_Head
  clc
  adc #1
  cmp FIFO_Tail
  bne storeInFIFO

  jsr FIFO_Flush

storeInFIFO:
  ldy FIFO_Head
  lda FIFO_Byte
  sta FIFO_ADDR,y
  inc FIFO_Head

  jsr FIFO_PushDirect2MC6850
exitWrite:

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_FLUSH					; PROCEDURE | ASSEMBLER | KEEP

; -------------------  ASM Block 00000056  -------------------

  sei
  // lda _timerStatus
  // eor #$80
  // sta _timerStatus

  ldy FIFO_Tail
flushLoop:
  cpy FIFO_Head
  beq endFlush

waitOnMC:
  lda MCBaseState:$d500 // MC6850.MC6850_CNTRReg
  and #MC6850.TDRE
  beq waitOnMc

  lda FIFO_ADDR,y
  sta MCBaseBuf:$d500   // MC6850.MC6850_BUFFER

  iny
  jmp flushLoop

endFlush:
  sty FIFO_Tail

  cli
  // lda _timerStatus
  // eor #$80
  // sta _timerStatus

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

FIFO_HEAD	= $FD
FIFO_TAIL	= $FE
FIFO_BYTE	= $FF
FIFO2NULL	= DATAORIGIN+$0030
FIFO_ADDR	= $0600
adr.FIFO_BUF	= $0600
.var FIFO_BUF	= adr.FIFO_BUF .word
_TIMERSTATUS	= $F5

.endl							; UNIT MIDI_FIFO

; ------------------------------------------------------------

.local	CIO						; UNIT

.local	OPN						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000057  -------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #$03		;komenda: OPEN
	sta iccmd,x

	inw device		;omin bajt z dlugoscia STRING-a

	lda device		;adres nazwy pliku
	sta icbufa,x
	lda device+1
	sta icbufa+1,x

	lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
	sta icax1,x

	lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
	sta icax2,x

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	pla:tax

; ------------------------------------------------------------

CHN	= DATAORIGIN+$0031
AX1	= DATAORIGIN+$0032
AX2	= DATAORIGIN+$0033
DEVICE	= DATAORIGIN+$0034

@VarData	= CHN
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLS						; PROCEDURE | ASSEMBLER
	sta CHN

; -------------------  ASM Block 00000058  -------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #$0c		;komenda: CLOSE
	sta iccmd,x

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	pla:tax

; ------------------------------------------------------------

CHN	= DATAORIGIN+$0036

@VarData	= CHN
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BGET						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000060  -------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #7		;get char/s command
	sta iccmd,x

	lda buf
	sta icbufa,x
	lda buf+1
	sta icbufa+1,x

	lda cnt
	sta icbufl,x
	lda cnt+1
	sta icbufh,x

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	pla:tax

; ------------------------------------------------------------

CHN	= :EDX
BUF	= :ECX
CNT	= :EAX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

.endl							; UNIT CIO

; ------------------------------------------------------------

.local	MIDFILES					; UNIT

.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000067  -------------------

  icl 'midfile/asms/int_timer.a65'

	rti						; ret
.endl

.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000068  -------------------

  icl 'midfile/asms/memory_bound_check.a65'

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADMID						; FUNCTION

	jmp l_019B

.local	READWORDBI					; FUNCTION

; optimize OK (bigendian.inc), line = 3

	lda #$01
	sta CIO.BGET.CHN
	lda <RESULT
	sta CIO.BGET.BUF
	lda >RESULT
	sta CIO.BGET.BUF+1
	lda #$02
	sta CIO.BGET.CNT
	lda #$00
	sta CIO.BGET.CNT+1
	jsr CIO.BGET

; -------------------  ASM Block 00000069  -------------------

    ldx result
    ldy result+1
    stx result+1
    sty result
  
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0070
	rts						; ret
.endl

.local	READLONGBI					; FUNCTION

; optimize OK (bigendian.inc), line = 15

	lda #$01
	sta CIO.BGET.CHN
	lda <RESULT
	sta CIO.BGET.BUF
	lda >RESULT
	sta CIO.BGET.BUF+1
	lda #$04
	sta CIO.BGET.CNT
	lda #$00
	sta CIO.BGET.CNT+1
	jsr CIO.BGET

; -------------------  ASM Block 00000070  -------------------

    ldx result
    ldy result+3
    stx result+3
    sty result

    ldx result+1
    ldy result+2
    stx result+2
    sty result+1
  
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0072
	rts						; ret
.endl

.local	_BGET						; PROCEDURE

; optimize OK (loadmid.inc), line = 21

	lda #$01
	sta CIO.BGET.CHN
	lda DEST
	sta CIO.BGET.BUF
	lda DEST+1
	sta CIO.BGET.BUF+1
	lda LOADSIZE
	sta CIO.BGET.CNT
	lda LOADSIZE+1
	sta CIO.BGET.CNT+1
	jsr CIO.BGET

; ------------------------------------------------------------

DEST	= DATAORIGIN+$0076

@VarData	= DEST
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKLOADSIZE					; PROCEDURE

; optimize OK (loadmid.inc), line = 26

	lda #$00
	sta LOADSIZE
	sta LOADSIZE+1

; --- RepeatUntilProlog
l_01BD

; optimize FAIL ('MEMBOUNDCHECK', loadmid.inc), line = 28

	jsr MEMBOUNDCHECK

; optimize OK (loadmid.inc), line = 29

	lda SYSTEM.IORESULT
	cmp #$01
	jeq l_01D0
	jmp @exit					; exit
l_01D0

; optimize OK (loadmid.inc), line = 31

	lda _ADR+1
	cmp #$D8
	jcc l_01E4
	lda #$00
	sta LOADSIZE
	lda #$FF
	sta LOADSIZE+1
	jmp l_01F2
l_01E4

; optimize OK (loadmid.inc), line = 32

	lda _ADR+1
	cmp #$C0
	jcc l_0203
	lda #$00
	sta LOADSIZE
	lda #$D0
	sta LOADSIZE+1
	jmp l_0211
l_0203

; optimize OK (loadmid.inc), line = 33

	lda _ADR+1
	cmp #$A8
	jcc l_0222
	lda #$00
	sta LOADSIZE
	lda #$C0
	sta LOADSIZE+1
	jmp l_0230
l_0222

; optimize OK (loadmid.inc), line = 34

	lda _ADR+1
	cmp #$40
	jcc l_0241
	lda #$00
	sta LOADSIZE
	lda #$80
	sta LOADSIZE+1
l_0241
l_0230
l_0211
l_01F2

; optimize OK (loadmid.inc), line = 35

	lda LOADSIZE
	sub _ADR
	sta LOADSIZE
	lda LOADSIZE+1
	sbc _ADR+1
	sta LOADSIZE+1

; optimize OK (loadmid.inc), line = 36

	.LOCAL
	lda #$00
	sub LEN+3
	bne L4
	lda #$00
	cmp LEN+2
	bne L1
	lda LOADSIZE+1
	cmp LEN+1
	bne L1
	lda LOADSIZE
	cmp LEN
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_025B
	jeq l_025B
	lda LEN
	sta LOADSIZE
	lda LEN+1
	sta LOADSIZE+1
l_025B

; optimize OK (loadmid.inc), line = 37

	lda LOADSIZE+1
	ora LOADSIZE
	jeq l_01BD
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_019B

; optimize OK (loadmid.inc), line = 41

	lda #$01
	sta CIO.OPN.CHN
	lda #$04
	sta CIO.OPN.AX1
	lda #$00
	sta CIO.OPN.AX2
	lda FN
	sta CIO.OPN.DEVICE
	lda FN+1
	sta CIO.OPN.DEVICE+1
	jsr CIO.OPN

; optimize OK (loadmid.inc), line = 42

	lda SYSTEM.IORESULT
	jpl l_0287

; optimize OK (loadmid.inc), line = 44

	sta RESULT

; optimize OK (loadmid.inc), line = 45

	lda #$01
	jsr CIO.CLS
	jmp @exit					; exit
l_0287

; optimize OK (loadmid.inc), line = 49

	lda MIDTRACKS
	sta TRKDATA
	lda MIDTRACKS+1
	sta TRKDATA+1

; optimize OK (loadmid.inc), line = 50

	lda #$00
	sta TRACKCOUNT

; optimize OK (loadmid.inc), line = 51

	lda #$FF
	sta TOTALTRACKS

; --- WhileProlog
	jmp l_02A1
l_02A2

; optimize OK (loadmid.inc), line = 55

	lda #$01
	sta CIO.BGET.CHN
	lda <CHUNKTAG
	sta CIO.BGET.BUF
	lda >CHUNKTAG
	sta CIO.BGET.BUF+1
	lda #$04
	sta CIO.BGET.CNT
	lda #$00
	sta CIO.BGET.CNT+1
	jsr CIO.BGET

; optimize FAIL ('READLONGBI', loadmid.inc), line = 56

	jsr READLONGBI
	lda READLONGBI.RESULT
	sta LEN
	lda READLONGBI.RESULT+1
	sta LEN+1
	lda READLONGBI.RESULT+2
	sta LEN+2
	lda READLONGBI.RESULT+3
	sta LEN+3

; optimize OK (loadmid.inc), line = 57

	lda CHUNKTAG+3
	eor #$64
	jne l_02BA
	lda CHUNKTAG+2
	eor #$68
	jne l_02BA
	lda CHUNKTAG+1
	eor #$54
	jne l_02BA
	lda CHUNKTAG
	eor #$4D
	jne l_02BA

; optimize FAIL ('READWORDBI', loadmid.inc), line = 59

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta FORMAT

; optimize OK (loadmid.inc), line = 60

	jeq l_02DD
	cmp #$01
	jeq l_02DD

; optimize OK (loadmid.inc), line = 62

	lda #$64
	sta SYSTEM.IORESULT
	jmp b_02A2					; break
l_02DD

; optimize FAIL ('READWORDBI', loadmid.inc), line = 65

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta TOTALTRACKS

; optimize FAIL ('READWORDBI', loadmid.inc), line = 66

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta V
	lda READWORDBI.RESULT+1
	sta V+1

; optimize OK (loadmid.inc), line = 67

	jmi l_0301

; optimize OK (loadmid.inc), line = 68

	lda V
	sta TICKDIV
	lda V+1
	sta TICKDIV+1
l_0301
	jmp l_0312
l_02BA

; optimize OK (loadmid.inc), line = 83

	lda CHUNKTAG+3
	eor #$6B
	jne l_0322
	lda CHUNKTAG+2
	eor #$72
	jne l_0322
	lda CHUNKTAG+1
	eor #$54
	jne l_0322
	lda CHUNKTAG
	eor #$4D
	jne l_0322

; optimize FAIL (0, loadmid.inc), line = 85

	inc TRACKCOUNT

; optimize OK (loadmid.inc), line = 87

	mwy TRKDATA :bp2
	ldy #$00
	tya
	sta (:bp2),y

; optimize OK (loadmid.inc), line = 88

	ldy #$04
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (loadmid.inc), line = 89

	ldy #$01
	lda _BANK
	sta (:bp2),y

; optimize OK (loadmid.inc), line = 90

	iny
	lda _ADR
	sta (:bp2),y
	iny
	lda _ADR+1
	sta (:bp2),y

; -------------------  ASM Block 00000071  -------------------

 ldy _bank \ lda $100,y \ sta PORTB 
; --- WhileProlog
	jmp l_033C
l_033D

; optimize FAIL (':TMP', loadmid.inc), line = 96

	lda LOADPROCESS
	sta :TMP+1
	lda LOADPROCESS+1
	sta :TMP+2
	lda #$4C
	sta :TMP
	inx
	mva TRACKCOUNT :STACKORIGIN,x
	jsr :TMP

; optimize FAIL ('CHECKLOADSIZE', loadmid.inc), line = 97

	jsr CHECKLOADSIZE

; optimize OK (loadmid.inc), line = 98

	lda SYSTEM.IORESULT
	cmp #$01
	jeq l_0354
	jmp b_033D					; break
l_0354

; optimize OK (loadmid.inc), line = 100

	lda _ADR+1
	cmp #$C0
	jcc l_0368

; optimize OK (loadmid.inc), line = 102

	lda #$00
	sta _BGET.DEST
	lda #$40
	sta _BGET.DEST+1
	jsr _BGET

; optimize OK (loadmid.inc), line = 103

	lda RBUF
	sta SYSTEM.MOVE_0153.SOURCE
	lda RBUF+1
	sta SYSTEM.MOVE_0153.SOURCE+1
	lda _PTR
	sta SYSTEM.MOVE_0153.DEST
	lda _PTR+1
	sta SYSTEM.MOVE_0153.DEST+1
	lda LOADSIZE
	sta SYSTEM.MOVE_0153.COUNT
	lda LOADSIZE+1
	sta SYSTEM.MOVE_0153.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0153
	m@INLINE
	.endl
	jmp l_037B
l_0368

; optimize OK (loadmid.inc), line = 106

	lda _PTR
	sta _BGET.DEST
	lda _PTR+1
	sta _BGET.DEST+1
	jsr _BGET
l_037B

; optimize OK (loadmid.inc), line = 108

	lda SYSTEM.IORESULT
	cmp #$01
	jeq l_0390
	jmp b_033D					; break
l_0390

; optimize OK (loadmid.inc), line = 110

	lda _ADR
	add LOADSIZE
	sta _ADR
	lda _ADR+1
	adc LOADSIZE+1
	sta _ADR+1

; optimize OK (loadmid.inc), line = 111

	lda LEN
	sub LOADSIZE
	sta LEN
	lda LEN+1
	sbc LOADSIZE+1
	sta LEN+1
	lda LEN+2
	sbc #$00
	sta LEN+2
	lda LEN+3
	sbc #$00
	sta LEN+3
l_033C

; optimize OK (loadmid.inc), line = 94

	lda LEN+3
	bmi @+
	ora LEN+2
	ora LEN+1
	ora LEN
	jne l_033D
@
b_033D

; optimize OK (loadmid.inc), line = 113

	lda TRKDATA
	add #$09
	sta TRKDATA
	scc
	inc TRKDATA+1
	jmp l_03AB
l_0322

; optimize OK (loadmid.inc), line = 115

	lda #$66
	sta SYSTEM.IORESULT
l_03AB
l_0312
l_02A1

; optimize OK (loadmid.inc), line = 53

	lda SYSTEM.IORESULT
	cmp #$01
	jne l_02A2w
	lda TRACKCOUNT
	cmp TOTALTRACKS
	jcc l_02A2
l_02A2w
b_02A2

; optimize OK (loadmid.inc), line = 117

	lda SYSTEM.IORESULT
	sta RESULT

; optimize OK (loadmid.inc), line = 118

	lda #$01
	jsr CIO.CLS
@exit

; ------------------------------------------------------------

FN	= DATAORIGIN+$005A
RESULT	= DATAORIGIN+$005C
LOADBUF_SIZE	= $4000
CIO_CHN	= $01
TRACKCOUNT	= DATAORIGIN+$005D
CHUNKTAG	= DATAORIGIN+$005E
V	= DATAORIGIN+$0062
TOP	= DATAORIGIN+$0064
ENDADR	= DATAORIGIN+$0066
LOADSIZE	= DATAORIGIN+$0068
LEN	= DATAORIGIN+$006A
TRKDATA	= DATAORIGIN+$006E
TRKDATA.STATUS	= DATAORIGIN+$0000
TRKDATA.BANK	= DATAORIGIN+$0001
TRKDATA.PTR	= DATAORIGIN+$0002
TRKDATA.TRACKTIME	= DATAORIGIN+$0004
TRKDATA._EVENT	= DATAORIGIN+$0008
adr.RBUF	= $4000
.var RBUF	= adr.RBUF .word

@VarData	= FN
@VarDataSize	= 32

	rts						; ret
.endl

.local	SETTEMPO					; PROCEDURE

; optimize OK (settempo.inc), line = 10

	lda _TIMERSTATUS
	eor #$80
	sta _TIMERSTATUS

; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 13

	inx
	mva MS_PER_QNOTE :STACKORIGIN,x
	mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
	mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
	mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva TEMPOSHIFT :STACKORIGIN,x
	mva TEMPOSHIFT+1 :STACKORIGIN+STACKWIDTH,x
	mva TEMPOSHIFT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva TEMPOSHIFT+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr addEAX_ECX
	mva TICKDIV :STACKORIGIN,x
	mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr divmulINT.DIV
	dex
	lda :STACKORIGIN,x
	sta _FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta _FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta _FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta _FREQ+3

; optimize FAIL ('@I2F_m', settempo.inc), line = 14

	mva _FREQ :STACKORIGIN,x
	mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$24 :STACKORIGIN+STACKWIDTH,x
	mva #$74 :STACKORIGIN+STACKWIDTH*2,x
	mva #$49 :STACKORIGIN+STACKWIDTH*3,x
	jsr @I2F_m
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta FREQ+3

; optimize FAIL ('@FDIV', settempo.inc), line = 15

	mva #$00 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$80 :STACKORIGIN+STACKWIDTH*2,x
	mva #$3F :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta FREQ+3

; optimize FAIL ('@FDIV', settempo.inc), line = 24

	mva #$F5 :STACKORIGIN,x
	mva #$FA :STACKORIGIN+STACKWIDTH,x
	mva #$7A :STACKORIGIN+STACKWIDTH*2,x
	mva #$43 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta RATIO
	lda :STACKORIGIN+STACKWIDTH,x
	sta RATIO+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta RATIO+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta RATIO+3

; optimize FAIL ('@F2I', settempo.inc), line = 25

	mva #$01 :STACKORIGIN,x
	inx
	mva RATIO :STACKORIGIN,x
	mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
	mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
	mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @F2I
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
	lda :STACKORIGIN-1,x
	add :STACKORIGIN,x
	sta _RATIO
	dex
	dex

; optimize OK (settempo.inc), line = 26

	lda _RATIO
	cmp #$10
	jcc l_0429
	lda #$00
	sta RATIO
	sta RATIO+1
	lda #$70
	sta RATIO+2
	lda #$41
	sta RATIO+3
l_0429

; optimize OK (settempo.inc), line = 29

	lda _TIMERSTATUS
	and #$C0
	ora _RATIO
	sta _TIMERSTATUS

; optimize OK (settempo.inc), line = 30

	lda #$01
	sta _SUBCNT

; optimize FAIL ('@I2F', settempo.inc), line = 32

	inx
	mva #$00 :STACKORIGIN,x
	mva #$FA :STACKORIGIN+STACKWIDTH,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva _RATIO :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr @I2F
	jsr @FMUL
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @I2F_m
	jsr @FDIV
	dex
	jsr @FROUND
	jsr @F2I
	lda :STACKORIGIN,x
	sta FDIV
	dex

; optimize OK (settempo.inc), line = 39

	lda _TIMERSTATUS
	eor #$80
	sta _TIMERSTATUS

; -------------------  ASM Block 00000072  -------------------

    sei  // disable IRQ
  // reset POKEY
    lda #$00
    ldy #$03
    sta AUDCTL
    sta AUDC1
    sty SKCTL
  // setup TIMER1
    sta AUDCTL
    mva FDIV AUDF1
  // initialize IRQ for TIMER1
    // lda irqens
    // ora #$01
    // sta irqens
    // sta irqen
  // start timer strobe
    sta stimer

    cli  // enable IRQ
  
; ------------------------------------------------------------

FREQ	= DATAORIGIN+$0078
_FREQ	= DATAORIGIN+$007C
FDIV	= DATAORIGIN+$0080
RATIO	= DATAORIGIN+$0081
_RATIO	= DATAORIGIN+$0085

@VarData	= FREQ
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PROCESSTRACK					; PROCEDURE | KEEP

	jmp l_0463

.local	READB						; PROCEDURE | INLINE

	.MACRO m@INLINE

; optimize OK (processtrack.inc), line = 11

	ldy #$00
	lda (_PTR),y
	sta EVENT

; optimize FAIL (0, processtrack.inc), line = 12

	inc _ADR
	sne
	inc _ADR+1

; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 13

	jsr MEMBOUNDCHECK
	.ENDM
@exit
.endl

.local	READVARL					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000073  -------------------

    icl 'midfile/asms/readvar.asm'
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READ24						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000074  -------------------

    icl 'midfile/asms/read24bigendian.pas'
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTMIDI3					; PROCEDURE

; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 4

	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize FAIL ('m@INLINE', events.inc), line = 5

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl
	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize FAIL ('m@INLINE', events.inc), line = 6

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl
	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize OK (events.inc), line = 15

	lda EVENT
	jeq l_049E
	lda _EVENT
	and #$F0
	cmp #$90
	jne l_049E

; optimize OK (events.inc), line = 16

	lda _EVENT
	and #$0F
	tay
	lda MC6850.MC_BYTE
	sta adr.CHNVOLUME,y
l_049E
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTMIDI2					; PROCEDURE

; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 22

	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize FAIL ('m@INLINE', events.inc), line = 23

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl
	jsr MIDI_FIFO.FIFO_WRITEBYTE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTSYSEX					; PROCEDURE

; optimize FAIL ('READVARL', events.inc), line = 32

	jsr READVARL

; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 34

	jsr MIDI_FIFO.FIFO_WRITEBYTE

; --- WhileProlog
	jmp l_04BD
l_04BE

; optimize FAIL ('m@INLINE', events.inc), line = 40

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl

; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 42

	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize FAIL (0, events.inc), line = 46

	dec _TMP
l_04BD

; optimize OK (events.inc), line = 38

	lda _TMP
	jne l_04BE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTMETA					; PROCEDURE

; optimize FAIL ('m@INLINE', events.inc), line = 58

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl

; optimize FAIL ('READVARL', events.inc), line = 59

	jsr READVARL

; optimize OK (events.inc), line = 61

	lda EVENT
	cmp #$2F
	jne l_04E8

; optimize FAIL (0, events.inc), line = 63

	dec PLAYINGTRACKS

; optimize OK (events.inc), line = 64

	lda _STATUS
	ora #$40
	sta _STATUS
	jmp l_0500
l_04E8

; optimize OK (events.inc), line = 66

	lda EVENT
	cmp #$51
	jne l_0512

; optimize FAIL ('READ24', events.inc), line = 68

	jsr READ24

; optimize OK (events.inc), line = 69

	lda _DELTA
	sta MS_PER_QNOTE
	lda _DELTA+1
	sta MS_PER_QNOTE+1
	lda _DELTA+2
	sta MS_PER_QNOTE+2
	lda _DELTA+3
	sta MS_PER_QNOTE+3

; optimize FAIL ('SETTEMPO', events.inc), line = 70

	jsr SETTEMPO
	jmp l_0522
l_0512

; --- WhileProlog
	jmp l_0524
l_0525

; optimize FAIL (0, events.inc), line = 85

	dec _TMP

; optimize FAIL (0, events.inc), line = 86

	inc _ADR
	sne
	inc _ADR+1

; optimize FAIL ('MEMBOUNDCHECK', events.inc), line = 87

	jsr MEMBOUNDCHECK
l_0524

; optimize OK (events.inc), line = 83

	lda _TMP
	jne l_0525
l_0522
l_0500
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0463

; -------------------  ASM Block 00000075  -------------------

 ldy _bank \ lda $100,y \ sta PORTB 
; --- RepeatUntilProlog
l_053C

; optimize OK (processtrack.inc), line = 33

	lda _STATUS
	jmi l_0552

; optimize FAIL ('READVARL', processtrack.inc), line = 35

	jsr READVARL

; optimize OK (processtrack.inc), line = 36

	lda _DELTA+3
	jmi l_0564
	ora _DELTA+2
	ora _DELTA+1
	ora _DELTA
	jeq l_0564

; optimize OK (processtrack.inc), line = 38

	lda _TRACKTIME
	add _DELTA
	sta _TRACKTIME
	lda _TRACKTIME+1
	adc _DELTA+1
	sta _TRACKTIME+1
	lda _TRACKTIME+2
	adc _DELTA+2
	sta _TRACKTIME+2
	lda _TRACKTIME+3
	adc _DELTA+3
	sta _TRACKTIME+3
	jmp b_053C					; break
l_0564
	jmp l_0578
l_0552

; optimize OK (processtrack.inc), line = 43

	lda _STATUS
	and #$7F
	sta _STATUS
l_0578

; optimize OK (processtrack.inc), line = 45

	ldy #$00
	lda (_PTR),y
	jpl l_059B

; optimize FAIL ('m@INLINE', processtrack.inc), line = 47

	.local READB
	m@INLINE
	.endl
	lda EVENT
	sta _EVENT
	jmp l_05AC
l_059B

; optimize OK (processtrack.inc), line = 50

	lda _EVENT
	sta EVENT
l_05AC

; optimize OK (processtrack.inc), line = 52

	lda #$BF
	cmp _EVENT
	jcc l_05C4

; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 54

	jsr EVENTMIDI3
	jmp l_05CF
l_05C4
	lda #$DF
	cmp _EVENT
	jcc l_05E1

; optimize FAIL ('EVENTMIDI2', processtrack.inc), line = 56

	jsr EVENTMIDI2
	jmp l_05EC
l_05E1
	lda #$EF
	cmp _EVENT
	jcc l_05FE

; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 58

	jsr EVENTMIDI3
	jmp l_0609
l_05FE
	lda #$F7
	cmp _EVENT
	jcc l_061B

; optimize FAIL ('EVENTSYSEX', processtrack.inc), line = 60

	jsr EVENTSYSEX
	jmp l_0626
l_061B
	lda _EVENT
	cmp #$FF
	jne l_0638

; optimize FAIL ('EVENTMETA', processtrack.inc), line = 61

	jsr EVENTMETA
l_0638
l_0626
l_0609
l_05EC
l_05CF

; optimize OK (processtrack.inc), line = 63

	lda _STATUS
	and #$40
	jeq l_053C
b_053C

; optimize OK (processtrack.inc), line = 65

	lda _STATUS
	ora #$80
	sta _STATUS

; ------------------------------------------------------------

EVENT	= $FF
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PROCESSMIDI					; PROCEDURE

; optimize FAIL ('MIDI_FIFO.FIFO_PUSHDIRECT2MC6850', processmidi.inc), line = 29

	jsr MIDI_FIFO.FIFO_PUSHDIRECT2MC6850

; optimize OK (processmidi.inc), line = 31

	lda _TIMERSTATUS
	jpl l_0672
	jmp @exit					; exit
l_0672

; optimize OK (processmidi.inc), line = 32

	lda CTRK
	cmp TOTALTRACKS
	jne l_0689

; optimize OK (processmidi.inc), line = 34

	lda #$01
	sta CTRK

; optimize OK (processmidi.inc), line = 35

	lda MIDTRACKS
	sta CURTRACKPTR
	lda MIDTRACKS+1
	sta CURTRACKPTR+1
	jmp l_069C
l_0689

; optimize FAIL (0, processmidi.inc), line = 39

	inc CTRK

; optimize OK (processmidi.inc), line = 40

	lda CURTRACKPTR
	add #$09
	sta CURTRACKPTR
	scc
	inc CURTRACKPTR+1
l_069C

; -------------------  ASM Block 00000076  -------------------

// if _status and f_stop=0 then
    ldy #0
    lda (curTrackPtr),y
    and #f_stop
    bne skipProcessTrack

// if _totalTicks>=_trackTime then ProcessTrack;
    ldy #7
    lda _totalTicks+3
    sub (curTrackPtr),y
    bne L4
    lda _totalTicks+2
    dey
    sub (curTrackPtr),y
    bne L1
    lda _totalTicks+1
    dey
    sub (curTrackPtr),y
    bne L1
    lda _totalTicks
    dey
    sub (curTrackPtr),y
  L1:
    beq L5
    bcs L3
    lda #$ff
    bne L5
  L3:
    lda #$01
    bne L5
  L4:
    bvc L5
    eor #$ff
    ora #$01
  L5:
    jmi skipProcessTrack

  // copy current track data to work registers
    ldy #sizeOf_TMIDTrack-1
  loop:
    lda (curTrackPtr),y
    sta _trkRegs,y
    dey
    bpl loop

  
; optimize FAIL ('PROCESSTRACK', processmidi.inc), line = 92

	jsr PROCESSTRACK

; -------------------  ASM Block 00000077  -------------------

// store work registers in track data
    ldy #sizeOf_TMIDTrack-1
  loop2:
    lda _trkRegs,y
    sta (curTrackPtr),y
    dey
    bpl loop2

  skipProcessTrack:
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITTIMER					; PROCEDURE

; optimize OK (MIDFILES), line = 84

	lda #$00
	sta _TOTALTICKS
	sta _TOTALTICKS+1
	sta _TOTALTICKS+2
	sta _TOTALTICKS+3

; optimize OK (MIDFILES), line = 85

	sta TEMPOSHIFT
	sta TEMPOSHIFT+1
	sta TEMPOSHIFT+2
	sta TEMPOSHIFT+3

; optimize OK (MIDFILES), line = 86

	lda #$01
	sta _TIMERSTATUS

; optimize OK (MIDFILES), line = 87

	lda TOTALTRACKS
	sta CTRK

; optimize OK (MIDFILES), line = 88

	sta PLAYINGTRACKS

; -------------------  ASM Block 00000078  -------------------

    sei
    mva <INT_TIMER VTIMR1
    mva >INT_TIMER VTIMR1+1
  // reset POKEY
    lda #$00
    ldy #$03
    sta AUDCTL
    sta AUDC1
    sty SKCTL
  // setup TIMER1
    sta AUDCTL
    mva 83 AUDF1
  // initialize IRQ for TIMER1
    lda irqens
    ora #$01
    sta irqens
    sta irqen
  // start timer strobe
    sta stimer

    cli  // enable IRQ
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NULLLOADPRCS					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize OK (MIDFILES), line = 121

	lda #$00
	sta OLDTIMERVEC
	sta OLDTIMERVEC+1

; optimize OK (MIDFILES), line = 122

	lda <NULLLOADPRCS
	sta LOADPROCESS
	lda >NULLLOADPRCS
	sta LOADPROCESS+1

; optimize OK (MIDFILES), line = 123

	lda #$80
	sta TICKDIV
	lda #$01
	sta TICKDIV+1

; optimize OK (MIDFILES), line = 124

	lda #$20
	sta MS_PER_QNOTE
	lda #$A1
	sta MS_PER_QNOTE+1
	lda #$07
	sta MS_PER_QNOTE+2
	lda #$00
	sta MS_PER_QNOTE+3

; optimize OK (MIDFILES), line = 125

	sta TOTALTRACKS

; optimize OK (MIDFILES), line = 126

	sta CTRK

; optimize OK (MIDFILES), line = 127

	lda #$80
	sta _TIMERSTATUS

	lda VTIMR1
	sta OLDTIMERVEC
	lda VTIMR1+1
	sta OLDTIMERVEC+1

	rts

; ------------------------------------------------------------

F_COUNTER	= $80
F_TICK	= $40
F_FLAGS	= $C0
F_RATIO	= $0F
F_SKIPDELTA	= $80
F_STOP	= $40
_TRKREGS	= $E0
MID_0	= $00
MID_1	= $01
ERR_UNSUPPORTED_FORMAT	= $64
ERR_NOT_ENOUGHT_MEMORY	= $65
ERR_NOT_A_MIDI_FILE	= $66
TAG_MTHD	= $6468544D
TAG_MTRK	= $6B72544D
SIZEOF_TMIDTRACK	= $09
CURTRACKPTR	= $DC
CTRK	= $DE
PLAYINGTRACKS	= $DF
_TOTALTICKS	= $F0
_SUBCNT	= $F4
_TIMERSTATUS	= $F5
_DELTA	= $F6
_TMP	= $F6
_STATUS	= $E0
_BANK	= $E1
_PTR	= $E2
_ADR	= $E2
_TRACKTIME	= $E4
_EVENT	= $E8
MIDDATA	= DATAORIGIN+$0037
adr.MIDTRACKS	= [DATAORIGIN+$0039] .array [1]
.var MIDTRACKS	= adr.MIDTRACKS .word
FORMAT	= DATAORIGIN+$003A
TOTALTRACKS	= DATAORIGIN+$003B
TICKDIV	= DATAORIGIN+$003C
MS_PER_QNOTE	= DATAORIGIN+$003E
adr.CHNVOLUME	= [DATAORIGIN+$0042] .array [16]
.var CHNVOLUME	= adr.CHNVOLUME .word
OLDTIMERVEC	= DATAORIGIN+$0052
LOADPROCESS	= DATAORIGIN+$0054
TEMPOSHIFT	= DATAORIGIN+$0056

.endl							; UNIT MIDFILES

; ------------------------------------------------------------

.local	MISC						; UNIT

; ------------------------------------------------------------

adr.BANKS	= $0101
.var BANKS	= adr.BANKS .word
DETECTOS	= $FFF7

.endl							; UNIT MISC

.local	SETCOLORS					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000089  -------------------

  icl 'asms/setColors.a65'

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INVERS						; PROCEDURE | ASSEMBLER | REGISTER
	sta CHARS

; -------------------  ASM Block 00000090  -------------------

  icl 'asms/invers.a65'

; ------------------------------------------------------------

CHARS	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTSPACES					; PROCEDURE | ASSEMBLER | REGISTER
	sta SPACES

; -------------------  ASM Block 00000091  -------------------

  icl 'asms/put_spaces.a65'

; ------------------------------------------------------------

SPACES	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTINTTEXT					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000092  -------------------

  icl 'asms/putinttext.a65'

; ------------------------------------------------------------

S	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTASCTEXT					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000093  -------------------

  icl 'asms/putasctext.a65'

; ------------------------------------------------------------

S	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTHEX						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000094  -------------------

  icl 'asms/puthex.a65'

; ------------------------------------------------------------

V	= DATAORIGIN+$008A
N	= DATAORIGIN+$008C

@VarData	= V
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTINT						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000095  -------------------

  icl 'asms/int2str.a65'

; ------------------------------------------------------------

VALUE	= DATAORIGIN+$008D

@VarData	= VALUE
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	HLINE						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000096  -------------------

  icl 'asms/hline.a65'

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARWORKAREA					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000097  -------------------

  icl 'asms/clear_workarea.a65'

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETFILEEXT					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000098  -------------------

  icl 'asms/get_file_ext.a65'

; ------------------------------------------------------------

FN	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REDUCEFILENAME					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000099  -------------------

  icl 'asms/reduce_filename.a65'

; ------------------------------------------------------------

INFN	= :EDX
OUTFN	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETDEVICESPEC					; FUNCTION | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000101  -------------------

  icl 'asms/getDeviceSpec.a65'

@exit

; ------------------------------------------------------------

FN	= :EDX
SPEC	= :ECX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	JOINSTRINGS					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000102  -------------------

  icl 'asms/joinStrings.a65'

; ------------------------------------------------------------

S1	= :EDX
S2	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETLN						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000103  -------------------

  icl 'asms/get_line.a65'

; ------------------------------------------------------------

CHN	= :EDX
BUF	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYNMI						; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000104  -------------------

  icl 'asms/nmi.a65'

	rti						; ret
.endl

.local	IMMEDIATEVBLK					; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000105  -------------------

RTCLOK = $12
JSYSVB = $E45F

  // pha
  // txa:pha

  lda RTCLOK+2
  and #%11
  bne skipTHI

  ldx thi
  bmi skipTHI
  lda thumblr,x
  sta SCREEN_STATUS
  dex
  spl:ldx #3
  stx thi

skipTHI:
  // pla:tax
  // pla

  JMP OLD_VBLKI:0000
  // jmp JSYSVB

thumblr:
    .byte $29,$1c,$1d,$1e

	rti						; ret
.endl

.local	SETNMI						; PROCEDURE

; optimize OK (mynmi.inc), line = 48

	lda NMIVEC
	sta OLDNMIVEC
	lda NMIVEC+1
	sta OLDNMIVEC+1

; optimize OK (mynmi.inc), line = 49

	lda VVBLKI
	sta OLDVVBLKI
	lda VVBLKI+1
	sta OLDVVBLKI+1

; optimize OK (mynmi.inc), line = 50

	lda #$00
	sta NMIEN

; -------------------  ASM Block 00000106  -------------------

    txa:pha
    lda VVBLKI
    sta ImmediateVBLK.OLD_VBLKI
    lda VVBLKI+1
    sta ImmediateVBLK.OLD_VBLKI+1
    inc PORTB
    lda #6
    ldy #<ImmediateVBLK
    ldx #>ImmediateVBLK
    jsr $e45c
    dec PORTB
    pla:tax
  
; optimize OK (mynmi.inc), line = 66

	lda <MYNMI
	sta NMIVEC
	lda >MYNMI
	sta NMIVEC+1

; optimize OK (mynmi.inc), line = 67

	lda #$40
	sta NMIEN
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UNSETNMI					; PROCEDURE

; optimize OK (mynmi.inc), line = 72

	lda #$00
	sta NMIEN

; optimize OK (mynmi.inc), line = 73

	lda OLDVVBLKI
	sta VVBLKI
	lda OLDVVBLKI+1
	sta VVBLKI+1

; optimize OK (mynmi.inc), line = 74

	lda OLDNMIVEC
	sta NMIVEC
	lda OLDNMIVEC+1
	sta NMIVEC+1

; optimize OK (mynmi.inc), line = 75

	lda #$40
	sta NMIEN
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	KEYSCAN2ASC					; FUNCTION | ASSEMBLER
	sta KEYSCAN

; -------------------  ASM Block 00000107  -------------------

  icl 'asms/keyscan2asc.a65'

@exit

; ------------------------------------------------------------

KEYSCAN	= DATAORIGIN+$0093
RESULT	= DATAORIGIN+$0094

@VarData	= KEYSCAN
@VarDataSize	= 1

	rts						; ret
.endl

.local	RESET_MIDI					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000108  -------------------

  txa:pha
  ldx #0
sendData:
  lda GM_RESET,x
  sta MAIN.MIDI_FIFO.FIFO_Byte
  jsr MAIN.MIDI_FIFO.FIFO_WriteByte
  inx
  cpx #6
  bne sendData
  jsr MAIN.MIDI_FIFO.FIFO_Flush
  pla:tax
  rts
GM_RESET:
  .byte $f0, $7e, $7f, $09, $01, $f7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STOPMIDI					; PROCEDURE

; optimize OK (helpers.inc), line = 33

	lda MIDFILES._TIMERSTATUS
	ora #$80
	sta MIDFILES._TIMERSTATUS

; optimize OK (helpers.inc), line = 34

	lda #$00
	sta MIDFILES._TOTALTICKS
	sta MIDFILES._TOTALTICKS+1
	sta MIDFILES._TOTALTICKS+2
	sta MIDFILES._TOTALTICKS+3
	lda #$01
	sta MIDFILES._SUBCNT

; optimize OK (helpers.inc), line = 35

	sei
	mva MIDFILES.OLDTIMERVEC VTIMR1
	mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
	lda irqens
	and #$fe
	sta irqens
	sta irqen
	cli

; optimize FAIL ('RESET_MIDI', helpers.inc), line = 36

	jsr RESET_MIDI
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RESETMEMORYPTR					; PROCEDURE

; optimize OK (helpers.inc), line = 41

	lda TOTALXMS
	sta LAST_BANK

; optimize OK (helpers.inc), line = 42

	lda TOTALXMS
	jeq l_0754

; optimize OK (helpers.inc), line = 43

	lda #$00
	sta LAST_ADR
	lda #$40
	sta LAST_ADR+1
	jmp l_0762
l_0754

; optimize OK (helpers.inc), line = 45

	lda #$00
	sta LAST_ADR
	lda #$D8
	sta LAST_ADR+1
l_0762
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARSTATUS					; PROCEDURE

; optimize OK (helpers.inc), line = 55

	lda #$00
	ldy #$3B
	sta:rpl $39C8,y-

; optimize OK (helpers.inc), line = 56

	lda #$C8
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$02
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize FAIL ('STATUSLOOP', helpers.inc), line = 57

	jsr STATUSLOOP

; optimize OK (helpers.inc), line = 58

	lda #$DC
	sta SCRADR
	lda #$39
	sta SCRADR+1
	jsr HLINE

; optimize OK (helpers.inc), line = 59

	lda #$10
	sta :ecx
	lda TOTALXMS
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add #$23
	sta MEMAVAILABLE
	lda :eax+1
	adc #$00
	sta MEMAVAILABLE+1

; optimize OK (helpers.inc), line = 60

	cmp #$27
	bne @+
	lda MEMAVAILABLE
	cmp #$10
@
	jcs l_0799
	lda #$F9
	sta SCRADR
	lda #$39
	sta SCRADR+1
l_0799

; optimize OK (helpers.inc), line = 61

	lda MEMAVAILABLE+1
	cmp #$03
	bne @+
	lda MEMAVAILABLE
	cmp #$E8
@
	jcs l_07B1
	lda #$FA
	sta SCRADR
	lda #$39
	sta SCRADR+1
l_07B1

; optimize OK (helpers.inc), line = 62

	lda MEMAVAILABLE+1
	jne l_07C9
	lda MEMAVAILABLE
	cmp #$64
	jcs l_07C9
	lda #$FB
	sta SCRADR
	lda #$39
	sta SCRADR+1
l_07C9

; optimize OK (helpers.inc), line = 63

	lda MEMAVAILABLE+1
	jne l_07E1
	lda MEMAVAILABLE
	cmp #$0A
	jcs l_07E1
	lda #$FC
	sta SCRADR
	lda #$39
	sta SCRADR+1
l_07E1

; optimize OK (helpers.inc), line = 64

	lda SCRADR
	sta OSCRADR
	lda SCRADR+1
	sta OSCRADR+1

; optimize OK (helpers.inc), line = 65

	lda #$09
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT
	lda MEMAVAILABLE
	sta PUTINT.VALUE
	lda MEMAVAILABLE+1
	sta PUTINT.VALUE+1
	jsr PUTINT
	lda #$0F
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (helpers.inc), line = 66

	lda adr.FN
	sta L

; optimize OK (helpers.inc), line = 67

	jne l_0809
	jmp @exit					; exit
l_0809

; optimize OK (helpers.inc), line = 68

	lda L
	cmp #$11
	jcc l_081E
	lda #$10
	sta adr.FN+$00
l_081E

; optimize OK (helpers.inc), line = 69

	lda OSCRADR
	ldy OSCRADR+1
	sub L
	scs
	dey
	sub #$01
	sta SCRADR
	scs
	dey
	sty SCRADR+1
	lda FN
	sta PUTASCTEXT.S
	lda FN+1
	sta PUTASCTEXT.S+1
	jsr PUTASCTEXT

; ------------------------------------------------------------

L	= DATAORIGIN+$0095
OSCRADR	= DATAORIGIN+$0096
MEMAVAILABLE	= DATAORIGIN+$0098

@VarData	= L
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARUVMETERS					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000109  -------------------

  icl 'asms/uvmeters_clear.a65'

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EXIT2DOS					; PROCEDURE

; optimize FAIL ('STOPMIDI', helpers.inc), line = 80

	jsr STOPMIDI

; optimize OK (helpers.inc), line = 81

	lda #$00
	jsr CIO.CLS
	lda #$00
	sta CIO.OPN.CHN
	lda #$0C
	sta CIO.OPN.AX1
	lda #$00
	sta CIO.OPN.AX2
	lda #$13
	sta CIO.OPN.DEVICE
	lda #$80
	sta CIO.OPN.DEVICE+1
	jsr CIO.OPN
	lda #$01
	sta SOUNDR
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSLOOP					; PROCEDURE

; optimize OK (status.inc), line = 11

	lda #$CE
	sta SCRADR
	lda #$39
	sta SCRADR+1

; optimize OK (status.inc), line = 12

	lda PLAYERSTATUS
	and #$0C
	lsr @
	lsr @
	sta V

; optimize OK (status.inc), line = 13

	asl @
	tay
	lda adr.SLOOP,y
	sta PUTINTTEXT.S
	lda adr.SLOOP+1,y
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; ------------------------------------------------------------

adr.SLOOP	= CODEORIGIN+$010A
.var SLOOP	= adr.SLOOP .word
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSPLAYING					; PROCEDURE

; optimize OK (status.inc), line = 18

	lda #$C8
	sta SCRADR
	lda #$39
	sta SCRADR+1

; optimize OK (status.inc), line = 19

	lda MIDFILES.TOTALTRACKS
	jeq l_087F

; optimize OK (status.inc), line = 21

	lda #$27
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (status.inc), line = 22

	lda #$DD
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$2E
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (status.inc), line = 23

	lda PLAYERSTATUS
	and #$40
	jeq l_089E

; optimize FAIL ('MIDFILES.INITTIMER', status.inc), line = 25

	jsr MIDFILES.INITTIMER

; optimize OK (status.inc), line = 26

	lda PLAYERSTATUS
	eor #$40
	sta PLAYERSTATUS
	jmp l_08B3
l_089E

; optimize OK (status.inc), line = 29

	lda MIDFILES._TIMERSTATUS
	and #$7F
	sta MIDFILES._TIMERSTATUS
l_08B3
	jmp l_08C9
l_087F

; optimize OK (status.inc), line = 33

	lda #$02
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (status.inc), line = 34

	lda #$DD
	sta SCRADR
	lda #$39
	sta SCRADR+1
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT
l_08C9
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSPAUSE					; PROCEDURE

; optimize OK (status.inc), line = 40

	lda PLAYERSTATUS
	and #$40
	jeq l_08EB
	jmp @exit					; exit
l_08EB

; optimize OK (status.inc), line = 41

	lda #$C8
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$44
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (status.inc), line = 42

	lda #$DD
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$4B
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (status.inc), line = 43

	lda MIDFILES._TIMERSTATUS
	ora #$80
	sta MIDFILES._TIMERSTATUS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSSTOPPED					; PROCEDURE

; optimize OK (status.inc), line = 48

	lda MIDFILES.TOTALTRACKS
	jne l_091A
	jmp @exit					; exit
l_091A

; optimize OK (status.inc), line = 49

	lda PLAYERSTATUS
	and #$40
	jeq l_0933
	jmp @exit					; exit
l_0933

; optimize OK (status.inc), line = 50

	lda PLAYERSTATUS
	ora #$40
	sta PLAYERSTATUS

; optimize OK (status.inc), line = 51

	lda #$C8
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$56
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (status.inc), line = 52

	lda #$DD
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$5D
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize FAIL ('STOPMIDI', status.inc), line = 53

	jsr STOPMIDI

; optimize OK (status.inc), line = 54

	lda #$00
	sta SYSTEM.MOVE_0153.SOURCE
	lda #$2C
	sta SYSTEM.MOVE_0153.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_0153.DEST
	lda #$2E
	sta SYSTEM.MOVE_0153.DEST+1
	lda #$00
	sta SYSTEM.MOVE_0153.COUNT
	lda #$02
	sta SYSTEM.MOVE_0153.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0153
	m@INLINE
	.endl

; optimize OK (status.inc), line = 55

	lda #$00
	sta CHN

; optimize FAIL ('CLEARUVMETERS', status.inc), line = 56

	jsr CLEARUVMETERS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSLOADING					; PROCEDURE

; optimize OK (status.inc), line = 61

	lda #$DD
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$68
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSREADDIRECTORY				; PROCEDURE

; optimize OK (status.inc), line = 66

	lda #$DD
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$73
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSERROR					; PROCEDURE
	sta ERR

; optimize OK (status.inc), line = 76

	lda #$FF
	sta KEYB

; optimize OK (status.inc), line = 77

	lda #$DD
	sta SCRADR
	lda #$39
	sta SCRADR+1

; optimize OK (status.inc), line = 78

	lda ERR
	sta @CASETMP_0003
	cmp #$64
	jne l_0981
@

; optimize OK (status.inc), line = 79

	lda #$88
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

	jmp a_0003
l_0981
	cmp #$65
	jne l_098C
@

; optimize OK (status.inc), line = 80

	lda #$9E
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

	jmp a_0003
l_098C
	cmp #$66
	jne l_0997
@

; optimize OK (status.inc), line = 81

	lda #$B4
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

	jmp a_0003
l_0997

; optimize OK (status.inc), line = 83

	lda #$80
	sta PUTTEXTINVERT

; optimize OK (status.inc), line = 84

	lda #$C7
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT
	lda ERR
	sta PUTINT.VALUE
	lda #$00
	sta PUTINT.VALUE+1
	jsr PUTINT
	ldy SCRADR+1
	sty :bp+1
	ldy SCRADR
	lda #$CE
	sta (:bp),y

; optimize OK (status.inc), line = 85

	lda #$00
	sta PUTTEXTINVERT
a_0003

; --- WhileProlog
l_09B5

; optimize OK (status.inc), line = 87

	lda KEYB
	cmp #$FF
	jeq l_09B5

; optimize FAIL ('CLEARSTATUS', status.inc), line = 88

	jsr CLEARSTATUS

; ------------------------------------------------------------

ERR	= DATAORIGIN+$009A
@CASETMP_0003	= DATAORIGIN+$009B

@VarData	= ERR
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADSONG					; FUNCTION

	jmp l_09C6

.local	LOADPRC						; PROCEDURE
	sta V

; optimize OK (load.inc), line = 7

	jeq l_09DB

; optimize OK (load.inc), line = 9

	lda #$80
	sta PUTTEXTINVERT

; optimize OK (load.inc), line = 10

	lda #$E6
	sta SCRADR
	lda #$39
	sta SCRADR+1

; optimize OK (load.inc), line = 11

	lda V
	sub #$01
	sta PUTINT.VALUE
	lda #$00
	sbc #$00
	sta PUTINT.VALUE+1
	jsr PUTINT
	ldy SCRADR+1
	sty :bp+1
	ldy SCRADR
	lda #$8F
	sta (:bp),y
	inc SCRADR
	sne
	inc SCRADR+1

; optimize OK (load.inc), line = 12

	lda MIDFILES.TOTALTRACKS
	sta PUTINT.VALUE
	lda #$00
	sta PUTINT.VALUE+1
	jsr PUTINT

; optimize OK (load.inc), line = 13

	ldy SCRADR+1
	sty :bp+1
	ldy SCRADR
	lda #$CE
	sta (:bp),y

; optimize OK (load.inc), line = 14

	lda #$00
	sta PUTTEXTINVERT
l_09DB

; ------------------------------------------------------------

V	= DATAORIGIN+$009F

@VarData	= V
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_09C6

; optimize OK (load.inc), line = 19

	lda LAST_BANK
	sta MIDFILES._BANK
	lda LAST_ADR
	sta MIDFILES._ADR
	lda LAST_ADR+1
	sta MIDFILES._ADR+1

; optimize FAIL ('CLEARSTATUS', load.inc), line = 20

	jsr CLEARSTATUS

; optimize FAIL ('STATUSLOADING', load.inc), line = 21

	jsr STATUSLOADING

; optimize OK (load.inc), line = 22

	lda <LOADPRC
	sta MIDFILES.LOADPROCESS
	lda >LOADPRC
	sta MIDFILES.LOADPROCESS+1
	lda #$00
	sta THI

; optimize OK (load.inc), line = 23

	lda FILENAME
	sta MIDFILES.LOADMID.FN
	lda FILENAME+1
	sta MIDFILES.LOADMID.FN+1
	jsr MIDFILES.LOADMID
	lda MIDFILES.LOADMID.RESULT
	sta RESULT

; optimize OK (load.inc), line = 24

	lda #$FF
	sta THI

; optimize FAIL ('CLEARSTATUS', load.inc), line = 25

	jsr CLEARSTATUS

; optimize OK (load.inc), line = 26

	lda RESULT
	and #$FC
	jeq l_0A38

; optimize OK (load.inc), line = 28

	lda #$FF
	sta CURPLAY
	lda #$00
	sta MIDFILES.TOTALTRACKS
	jmp l_0A4A
l_0A38

; optimize OK (load.inc), line = 32

	lda #$00
	sta SYSTEM.MOVE_0153.SOURCE
	lda #$2E
	sta SYSTEM.MOVE_0153.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_0153.DEST
	lda #$2C
	sta SYSTEM.MOVE_0153.DEST+1
	lda #$00
	sta SYSTEM.MOVE_0153.COUNT
	lda #$02
	sta SYSTEM.MOVE_0153.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0153
	m@INLINE
	.endl

; optimize OK (load.inc), line = 33

	lda CURFILE
	sta CURPLAY
l_0A4A
@exit

; ------------------------------------------------------------

FILENAME	= DATAORIGIN+$009C
RESULT	= DATAORIGIN+$009E

@VarData	= FILENAME
@VarDataSize	= 2

	rts						; ret
.endl

.local	GETENTRY					; FUNCTION | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000110  -------------------

  icl 'asms/list_getEntry.a65'

@exit

; ------------------------------------------------------------

FN	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	GETENTRYSETS					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000111  -------------------

  icl 'asms/list_getEntrySets.a65'

; ------------------------------------------------------------

PTR	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETENTRYSETS					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000112  -------------------

  icl 'asms/list_setEntrySets.a65'

; ------------------------------------------------------------

PTR	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NEXTENTRY					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000113  -------------------

  icl 'asms/list_nextEntry.a65'

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$00A0
	rts						; ret
.endl

.local	GOTONENTRY					; PROCEDURE | ASSEMBLER
	sta NENTRY

; -------------------  ASM Block 00000114  -------------------

  icl 'asms/list_gotoNEntry.a65'

; ------------------------------------------------------------

NENTRY	= DATAORIGIN+$00A1

@VarData	= NENTRY
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ADDTOLIST					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000115  -------------------

  icl 'asms/list_addToList.a65'

; ------------------------------------------------------------

ENTRY	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARLIST					; PROCEDURE

; optimize FAIL ('RESETMEMORYPTR', list_asm.inc), line = 39

	jsr RESETMEMORYPTR

; optimize OK (list_asm.inc), line = 40

	lda #$00
	sta FILELIST
	lda #$20
	sta FILELIST+1

; optimize OK (list_asm.inc), line = 41

	lda #$00
	sta TOTALFILES
	sta CURFILE
	sta YFILE
	sta SHFILE

; optimize OK (list_asm.inc), line = 42

	sta CHN

; --- WhileProlog
	jmp l_0A79
l_0A7A

; optimize OK (list_asm.inc), line = 45

	lda CHN
	asl @
	tay
	lda adr.PLAYLISTSCRADR,y
	sta SCRADR
	lda adr.PLAYLISTSCRADR+1,y
	sta SCRADR+1

; optimize OK (list_asm.inc), line = 46

	lda #$20
	jsr PUTSPACES

; optimize FAIL (0, list_asm.inc), line = 47

	inc CHN
l_0A79

; optimize OK (list_asm.inc), line = 43

	lda CHN
	cmp #$10
	jcc l_0A7A

; optimize OK (list_asm.inc), line = 49

	lda FILELIST
	sta SYSTEM.FILLCHAR_0151.A
	lda FILELIST+1
	sta SYSTEM.FILLCHAR_0151.A+1
	lda #$00
	sta SYSTEM.FILLCHAR_0151.COUNT
	lda #$0C
	sta SYSTEM.FILLCHAR_0151.COUNT+1
	lda #$9B
	sta SYSTEM.FILLCHAR_0151.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_0151
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILESELECT					; FUNCTION

; optimize OK (fileselect.inc), line = 10

	lda #$F8
	sta SCRADR
	lda #$36
	sta SCRADR+1
	jsr HLINE

; optimize OK (fileselect.inc), line = 11

	lda #$14
	sta SCRADR
	lda #$37
	sta SCRADR+1
	lda #$D5
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize FAIL ('CLEARLIST', fileselect.inc), line = 13

	jsr CLEARLIST

; optimize OK (fileselect.inc), line = 14

	lda #$FF
	sta MIDFILES._ADR
	sta MIDFILES._ADR+1
	lda #$FE
	sta MIDFILES._BANK
	lda PATH
	sta ADDTOLIST.ENTRY
	lda PATH+1
	sta ADDTOLIST.ENTRY+1
	jsr ADDTOLIST

; optimize FAIL ('STATUSSTOPPED', fileselect.inc), line = 15

	jsr STATUSSTOPPED

; optimize FAIL ('STATUSREADDIRECTORY', fileselect.inc), line = 16

	jsr STATUSREADDIRECTORY

; optimize OK (fileselect.inc), line = 18

	lda #$02
	sta CIO.OPN.CHN
	lda #$06
	sta CIO.OPN.AX1
	lda #$00
	sta CIO.OPN.AX2
	lda PATH
	sta CIO.OPN.DEVICE
	lda PATH+1
	sta CIO.OPN.DEVICE+1
	jsr CIO.OPN

; --- WhileProlog
	jmp l_0ABE
l_0ABF

; optimize OK (fileselect.inc), line = 21

	lda #$FC
	sta MIDFILES._BANK

; optimize OK (fileselect.inc), line = 22

	lda #$02
	sta GETLN.CHN
	lda FN
	sta GETLN.BUF
	lda FN+1
	sta GETLN.BUF+1
	jsr GETLN

; optimize OK (fileselect.inc), line = 23

	lda adr.FN+$01
	cmp #$30
	jcc l_0ADA
	jmp b_0ABF					; break
l_0ADA

; optimize OK (fileselect.inc), line = 24

	lda FN
	sta REDUCEFILENAME.INFN
	lda FN+1
	sta REDUCEFILENAME.INFN+1
	lda OUTSTR
	sta REDUCEFILENAME.OUTFN
	lda OUTSTR+1
	sta REDUCEFILENAME.OUTFN+1
	jsr REDUCEFILENAME

; optimize OK (fileselect.inc), line = 25

	lda OUTSTR
	sta GETFILEEXT.FN
	lda OUTSTR+1
	sta GETFILEEXT.FN+1
	jsr GETFILEEXT

; optimize OK (fileselect.inc), line = 26

	lda adr.FN+$02
	cmp #$3A
	jne l_0AF8
	jmp c_0ABF					; continue
l_0AF8

; optimize OK (fileselect.inc), line = 27

	lda adr.FN+$12
	cmp #$3E
	jne l_0B0E
	jmp c_0ABF					; continue
l_0B0E

; optimize OK (fileselect.inc), line = 28

	lda EXT+3
	cmp #$A4
	bne @+
	lda EXT+2
	cmp #$A9
	bne @+
	lda EXT+1
	cmp #$B2
	bne @+
	lda EXT
@
	jne l_0B21
	jmp c_0ABF					; continue
l_0B21

; optimize OK (fileselect.inc), line = 29

	lda EXT+3
	cmp #$4D
	bne @+
	lda EXT+2
	cmp #$49
	bne @+
	lda EXT+1
	cmp #$44
	bne @+
	lda EXT
@
	jne l_0B34
	lda #$FF
	sta MIDFILES._BANK
l_0B34

; optimize OK (fileselect.inc), line = 32

	lda OUTSTR
	sta ADDTOLIST.ENTRY
	lda OUTSTR+1
	sta ADDTOLIST.ENTRY+1
	jsr ADDTOLIST
c_0ABF
l_0ABE

; optimize OK (fileselect.inc), line = 19

	lda SYSTEM.IORESULT
	cmp #$01
	jeq l_0ABF
b_0ABF

; optimize FAIL ('CLEARSTATUS', fileselect.inc), line = 34

	jsr CLEARSTATUS

; optimize OK (fileselect.inc), line = 35

	lda SYSTEM.IORESULT
	sta RESULT

; optimize OK (fileselect.inc), line = 36

	lda #$02
	jsr CIO.CLS
@exit

; ------------------------------------------------------------

PATH	= DATAORIGIN+$00A2
RESULT	= DATAORIGIN+$00A4
CIO_CHN	= $02
EXT	= $04F8

@VarData	= PATH
@VarDataSize	= 2

	rts						; ret
.endl

.local	SHOW_INPUTLINE					; PROCEDURE

; optimize OK (inputline.inc), line = 4

	lda ILPOS
	sta adr.OUTSTR+$00

; optimize OK (inputline.inc), line = 5

	lda ILSCRADR
	sta SCRADR
	lda ILSCRADR+1
	sta SCRADR+1

; optimize OK (inputline.inc), line = 6

	lda OUTSTR
	sta PUTASCTEXT.S
	lda OUTSTR+1
	sta PUTASCTEXT.S+1
	jsr PUTASCTEXT

; optimize OK (inputline.inc), line = 7

	lda ILVCRS
	jeq l_0B72
	lda #$3F
	sta ILCH
	jmp l_0B80
l_0B72
	lda #$00
	sta ILCH
l_0B80

; optimize OK (inputline.inc), line = 8

	ldy SCRADR+1
	sty :bp+1
	ldy SCRADR
	lda ILCH
	sta (:bp),y

; optimize FAIL (0, inputline.inc), line = 9

	inc SCRADR
	sne
	inc SCRADR+1
	lda #$1F
	sub ILPOS
	jsr PUTSPACES
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT_INPUTLINE					; PROCEDURE

; optimize OK (inputline.inc), line = 14

	lda adr.OUTSTR
	sta ILPOS

; optimize OK (inputline.inc), line = 15

	lda #$7F
	sub ILPOS
	sta SYSTEM.FILLCHAR_0152.COUNT
	lda #$00
	sbc #$00
	sta SYSTEM.FILLCHAR_0152.COUNT+1
	lda ILPOS
	add #$01
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda <adr.OUTSTR
	add :STACKORIGIN+11
	sta SYSTEM.FILLCHAR_0152.X
	lda >adr.OUTSTR
	adc :STACKORIGIN+STACKWIDTH+11
	sta SYSTEM.FILLCHAR_0152.X+1
	lda #$9B
	sta SYSTEM.FILLCHAR_0152.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_0152
	m@INLINE
	.endl

; optimize OK (inputline.inc), line = 16

	lda #$FF
	sta KEYB
	lda #$01
	sta ILVCRS

; optimize OK (inputline.inc), line = 17

	lda YFILE
	asl @
	tay
	lda adr.PLAYLISTSCRADR,y
	add #$02
	sta ILSCRADR
	lda adr.PLAYLISTSCRADR+1,y
	adc #$00
	sta ILSCRADR+1

; optimize FAIL ('SHOW_INPUTLINE', inputline.inc), line = 18

	jsr SHOW_INPUTLINE
	lda _TM
	sta CTM

; optimize OK (inputline.inc), line = 19

	lda #$01
	sta STATEINPUTLINE

; optimize OK (inputline.inc), line = 20

	lda #$00
	sta RESULTINPUTLINE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DO_INPUTLINE					; PROCEDURE

; optimize OK (inputline.inc), line = 25

	lda ILPOS
	jeq l_0BE6

; optimize OK (inputline.inc), line = 27

	lda KEYB
	cmp #$1C
	jeq l_0C05x
	cmp #$0C
	jne l_0C05
l_0C05x

; optimize OK (inputline.inc), line = 29

	lda KEYB
	cmp #$1C
	jne l_0C18

; optimize OK (inputline.inc), line = 31

	lda adr.FN+$00
	sta ILPOS

; optimize OK (inputline.inc), line = 32

	lda FN
	sta @move.src
	lda FN+1
	sta @move.src+1
	@moveSTRING OUTSTR #128
l_0C18

; optimize OK (inputline.inc), line = 34

	lda #$00
	sta ILVCRS
	jsr SHOW_INPUTLINE

; optimize OK (inputline.inc), line = 35

	lda #$02
	sta STATEINPUTLINE

; optimize OK (inputline.inc), line = 36

	ldy #1
	lda KEYB
	cmp #$0C
	beq @+
	dey
@
	tya
	sta RESULTINPUTLINE

; optimize OK (inputline.inc), line = 37

	lda #$0C
	sta KEYB
	jmp @exit					; exit
l_0C05

; optimize OK (inputline.inc), line = 39

	lda KEYB
	cmp #$34
	jne l_0C51

; optimize OK (inputline.inc), line = 41

	ldy ILPOS
	lda #$9B
	sta adr.OUTSTR,y

; optimize FAIL (0, inputline.inc), line = 42

	dec ILPOS
l_0C51
l_0BE6

; optimize OK (inputline.inc), line = 45

	lda ILPOS
	cmp #$1E
	jcs l_0C73

; optimize OK (inputline.inc), line = 47

	lda KEYB
	jsr KEYSCAN2ASC
	lda KEYSCAN2ASC.RESULT
	sta ILCH

; optimize OK (inputline.inc), line = 48

	jeq l_0C8D

; optimize FAIL (0, inputline.inc), line = 50

	inc ILPOS

; optimize OK (inputline.inc), line = 51

	ldy ILPOS
	sta adr.OUTSTR,y
l_0C8D
l_0C73

; optimize FAIL ('SHOW_INPUTLINE', inputline.inc), line = 54

	jsr SHOW_INPUTLINE

; optimize OK (inputline.inc), line = 55

	lda #$FF
	sta KEYB
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DRAWLISTSELECTION				; PROCEDURE

; optimize OK (list.inc), line = 7

	lda YFILE
	asl @
	tay
	lda adr.PLAYLISTSCRADR,y
	sta SCRADR
	lda adr.PLAYLISTSCRADR+1,y
	sta SCRADR+1
	lda #$20
	jsr INVERS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWENTRY					; PROCEDURE

; optimize OK (list.inc), line = 16

	lda <P_BANK
	sta GETENTRYSETS.PTR
	lda >P_BANK
	sta GETENTRYSETS.PTR+1
	jsr GETENTRYSETS

; optimize OK (list.inc), line = 17

	lda #$00
	sta V

; optimize OK (list.inc), line = 19

	lda P_BANK
	cmp #$FE
	jne l_0CCE
	lda #$1E
	sta V
l_0CCE

; optimize OK (list.inc), line = 20

	lda P_BANK
	cmp #$FF
	jne l_0CE7
	lda #$5A
	sta V
l_0CE7

; optimize OK (list.inc), line = 21

	lda P_BANK
	cmp #$40
	jcs l_0D00

; optimize OK (list.inc), line = 22

	lda P_ADR+1
	ora P_ADR
	jne l_0D12

; optimize OK (list.inc), line = 23

	lda #$4D
	sta V
	jmp l_0D20
l_0D12

; optimize OK (list.inc), line = 25

	lda #$5A
	sta V
l_0D20
l_0D00

; optimize OK (list.inc), line = 27

	ldy SCRADR+1
	sty :bp+1
	ldy SCRADR
	lda V
	sta (:bp),y
	tya
	add #$02
	sta SCRADR
	scc
	inc SCRADR+1

; optimize OK (list.inc), line = 29

	lda adr.OUTSTR+$00
	cmp #$1F
	jcc l_0D40
	lda #$1E
	sta adr.OUTSTR+$00
l_0D40

; optimize OK (list.inc), line = 30

	lda OUTSTR
	sta PUTASCTEXT.S
	lda OUTSTR+1
	sta PUTASCTEXT.S+1
	jsr PUTASCTEXT

; optimize OK (list.inc), line = 31

	lda #$1E
	sub adr.OUTSTR+$00
	jsr PUTSPACES

; ------------------------------------------------------------

P_BANK	= DATAORIGIN+$00A5
P_ADR	= DATAORIGIN+$00A6

@VarData	= P_BANK
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWLIST					; PROCEDURE

; optimize OK (list.inc), line = 36

	lda SHFILE
	jsr GOTONENTRY
	lda #$00
	sta CHN

; --- WhileProlog
	jmp l_0D62
l_0D63

; optimize OK (list.inc), line = 39

	lda CHN
	asl @
	tay
	lda adr.PLAYLISTSCRADR,y
	sta SCRADR
	lda adr.PLAYLISTSCRADR+1,y
	sta SCRADR+1

; optimize OK (list.inc), line = 40

	lda OUTSTR
	sta GETENTRY.FN
	lda OUTSTR+1
	sta GETENTRY.FN+1
	jsr GETENTRY
	lda GETENTRY.RESULT
	jeq l_0D77

; optimize FAIL ('SHOWENTRY', list.inc), line = 42

	jsr SHOWENTRY
	jmp l_0D82
l_0D77
	jmp b_0D63					; break
l_0D82

; optimize FAIL (0, list.inc), line = 44

	inc CHN

; optimize FAIL ('NEXTENTRY', list.inc), line = 45

	jsr NEXTENTRY
	mva NEXTENTRY.RESULT :STACKORIGIN+1,x
l_0D62

; optimize OK (list.inc), line = 37

	lda CHN
	cmp #$10
	jcc l_0D63
b_0D63
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHOICELISTFILE					; FUNCTION

; optimize OK (list.inc), line = 54

	lda STATEINPUTLINE
	jne l_0DA9

; optimize OK (list.inc), line = 56

	lda CURFILE
	jsr GOTONENTRY

; optimize OK (list.inc), line = 57

	lda FN
	sta GETENTRY.FN
	lda FN+1
	sta GETENTRY.FN+1
	jsr GETENTRY
	lda GETENTRY.RESULT
	sta RESULT

; optimize OK (list.inc), line = 58

	jeq l_0DC0

; optimize OK (list.inc), line = 60

	lda <P_BANK
	sta GETENTRYSETS.PTR
	lda >P_BANK
	sta GETENTRYSETS.PTR+1
	jsr GETENTRYSETS

; optimize OK (list.inc), line = 62

	lda FN
	sta GETDEVICESPEC.FN
	lda FN+1
	sta GETDEVICESPEC.FN+1
	lda DEV
	sta GETDEVICESPEC.SPEC
	lda DEV+1
	sta GETDEVICESPEC.SPEC+1
	jsr GETDEVICESPEC
	lda GETDEVICESPEC.RESULT
	jne l_0DD4

; optimize OK (list.inc), line = 63

	lda CURDEV
	sta JOINSTRINGS.S1
	lda CURDEV+1
	sta JOINSTRINGS.S1+1
	lda FN
	sta JOINSTRINGS.S2
	lda FN+1
	sta JOINSTRINGS.S2+1
	jsr JOINSTRINGS
	jmp l_0DE3
l_0DD4

; optimize OK (list.inc), line = 65

	lda FN
	sta @move.src
	lda FN+1
	sta @move.src+1
	@moveSTRING OUTSTR #128
l_0DE3
l_0DC0
	jmp l_0DF0
l_0DA9

; optimize OK (list.inc), line = 69

	lda #$00
	sta RESULT
l_0DF0
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$00A8
adr.DEV	= $04F4
.var DEV	= adr.DEV .word

@VarData	= DEV
@VarDataSize	= 4

	rts						; ret
.endl

.local	INIT						; PROCEDURE

	jmp l_0DF8

.local	SETMCBASEADDRESS				; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000116  -------------------

    icl 'asms/setMCBaseAddr.a65'
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0DF8

; optimize FAIL ('SETMCBASEADDRESS', init.inc), line = 10

	jsr SETMCBASEADDRESS

; optimize OK (init.inc), line = 13

	lda #$03
	jsr MC6850.MC6850_INIT

; optimize OK (init.inc), line = 14

	lda #$16
	jsr MC6850.MC6850_INIT

; optimize OK (init.inc), line = 16

	lda #$00
	sta DMACTL

; optimize OK (init.inc), line = 17

	lda #$32
	sta CHBASE

; optimize OK (init.inc), line = 18

	lda #$B3
	sta SDLST
	lda #$3F
	sta SDLST+1

; optimize FAIL ('MIDI_FIFO.FIFO_RESET', init.inc), line = 20

	jsr MIDI_FIFO.FIFO_RESET

; optimize FAIL (1, init.inc), line = 22

	inx
	mva CURDEV :STACKORIGIN,x
	mva CURDEV+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	jsr SYSTEM.PARAMSTR
	lda SYSTEM.PARAMSTR.RESULT
	sta GETDEVICESPEC.FN
	lda SYSTEM.PARAMSTR.RESULT+1
	sta GETDEVICESPEC.FN+1
	lda :STACKORIGIN,x
	sta GETDEVICESPEC.SPEC
	lda :STACKORIGIN+STACKWIDTH,x
	sta GETDEVICESPEC.SPEC+1
	dex
	jsr GETDEVICESPEC
	lda GETDEVICESPEC.RESULT
	jne l_0E1C
	ldy #256-3
	mva:rne CODEORIGIN+$00E2+3-256,y adr.CURDEV+3-256,y+
l_0E1C
	mva #$00 adr.FN

; optimize FAIL ('CLEARWORKAREA', init.inc), line = 25

	jsr CLEARWORKAREA

; optimize FAIL ('CLEARSTATUS', init.inc), line = 26

	jsr CLEARSTATUS

; optimize OK (init.inc), line = 27

	lda #$A0
	sta SCRADR
	lda #$39
	sta SCRADR+1
	jsr HLINE

; optimize OK (init.inc), line = 28

	lda #$A1
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$E6
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (init.inc), line = 29

	lda #$BE
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$F0
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (init.inc), line = 31

	lda #$00
	sta MIDFILES.MIDTRACKS
	lda #$2E
	sta MIDFILES.MIDTRACKS+1

; -------------------  ASM Block 00000117  -------------------

    lda $14
    cmp $14
    beq *-2
  
; optimize FAIL ('RESETMEMORYPTR', init.inc), line = 47

	jsr RESETMEMORYPTR

; optimize OK (init.inc), line = 48

	lda _TM
	sta OTM

; optimize FAIL ('SETCOLORS', init.inc), line = 49

	jsr SETCOLORS
	lda #$22
	sta DMACTL
	lda #$00
	sta SOUNDR
	lda #$01
	sta PLAYDIR

; optimize OK (init.inc), line = 50

	lda PLAYERSTATUS
	and #$0F
	ora #$40
	sta PLAYERSTATUS

; optimize OK (init.inc), line = 53

	lda #$FF
	sta THI

; optimize OK (init.inc), line = 54

	lda #$00
	sta STATEINPUTLINE

; optimize OK (init.inc), line = 55

	sta RESULTINPUTLINE

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0107

; optimize FAIL ('INIT', MIDICar Player.pas), line = 68

	jsr INIT

; optimize FAIL ('CLEARUVMETERS', MIDICar Player.pas), line = 69

	jsr CLEARUVMETERS

; optimize OK (MIDICar Player.pas), line = 78

	lda CURDEV
	sta JOINSTRINGS.S1
	lda CURDEV+1
	sta JOINSTRINGS.S1+1
	lda #$FB
	sta JOINSTRINGS.S2
	lda #$80
	sta JOINSTRINGS.S2+1
	jsr JOINSTRINGS

; optimize OK (MIDICar Player.pas), line = 79

	lda #$00
	jsr GOTONENTRY

; optimize OK (MIDICar Player.pas), line = 80

	lda #$FF
	sta MIDFILES._ADR
	sta MIDFILES._ADR+1
	lda #$FE
	sta MIDFILES._BANK
	lda OUTSTR
	sta ADDTOLIST.ENTRY
	lda OUTSTR+1
	sta ADDTOLIST.ENTRY+1
	jsr ADDTOLIST

; optimize OK (MIDICar Player.pas), line = 81

	lda #$00
	sta SHFILE
	sta YFILE
	sta CURFILE

; optimize FAIL ('CHOICELISTFILE', MIDICar Player.pas), line = 82

	jsr CHOICELISTFILE
	mva CHOICELISTFILE.RESULT :STACKORIGIN+1,x
	lda #$02
	sta STATEINPUTLINE
	lda #$01
	sta RESULTINPUTLINE
	lda #$0C
	sta KEYB

; optimize FAIL ('SETNMI', MIDICar Player.pas), line = 85

	jsr SETNMI

; --- RepeatUntilProlog
l_0E93

; optimize FAIL ('MIDFILES.PROCESSMIDI', MIDICar Player.pas), line = 89

	jsr MIDFILES.PROCESSMIDI

; optimize OK (MIDICar Player.pas), line = 90

	lda PLAYERSTATUS
	and #$40
	jne l_0EB6
	lda MIDFILES.PLAYINGTRACKS
	jne l_0EB6

; optimize OK (MIDICar Player.pas), line = 92

	lda PLAYERSTATUS
	and #$0C
	sta V

; optimize FAIL ('STATUSSTOPPED', MIDICar Player.pas), line = 93

	jsr STATUSSTOPPED

; optimize OK (MIDICar Player.pas), line = 94

	lda V
	jeq l_0ED4

; optimize OK (MIDICar Player.pas), line = 96

	sub #$05
	svc
	eor #$80
	jmi l_0EE7

; optimize OK (MIDICar Player.pas), line = 97

	lda CURPLAY
	cmp #$FF
	jeq l_0EFA

; --- RepeatUntilProlog
l_0EFC

; optimize OK (MIDICar Player.pas), line = 100

	lda CURPLAY
	cmp #$FF
	jne l_0F0E
	lda CURFILE
	sta CURPLAY
l_0F0E

; optimize OK (MIDICar Player.pas), line = 101

	lda V
	cmp #$0C
	jne l_0F29

; optimize OK (MIDICar Player.pas), line = 102

	lda TOTALFILES
	jsr SYSTEM.RANDOM_0172
	lda SYSTEM.RANDOM_0172.RESULT
	sta CURPLAY
	jmp l_0F3A
l_0F29

; optimize OK (MIDICar Player.pas), line = 105

	lda CURPLAY
	add PLAYDIR
	sta CURPLAY

; optimize OK (MIDICar Player.pas), line = 106

	cmp #$01
	jne l_0F4F
	lda TOTALFILES
	sta CURPLAY
l_0F4F

; optimize OK (MIDICar Player.pas), line = 107

	lda CURPLAY
	cmp TOTALFILES
	jne l_0F6C
	lda #$01
	sta CURPLAY
l_0F6C
l_0F3A

; optimize OK (MIDICar Player.pas), line = 109

	lda CURPLAY
	sta CURFILE

; optimize FAIL ('CHOICELISTFILE', MIDICar Player.pas), line = 110

	jsr CHOICELISTFILE
	mva CHOICELISTFILE.RESULT :STACKORIGIN+1,x

; optimize OK (MIDICar Player.pas), line = 111

	lda P_BANK
	cmp #$FF
	jne l_0F8C

; optimize OK (MIDICar Player.pas), line = 112

	lda OUTSTR
	sta LOADSONG.FILENAME
	lda OUTSTR+1
	sta LOADSONG.FILENAME+1
	jsr LOADSONG
	lda LOADSONG.RESULT
	sta SYSTEM.IORESULT
	jmp l_0F9C
l_0F8C
	jmp c_0EFC					; continue
l_0F9C

; optimize OK (MIDICar Player.pas), line = 115

	ldy #1
	lda SYSTEM.IORESULT
	cmp #$01
	bne @+
	dey
@
	tya
	bne *+5
c_0EFC
	jmp l_0EFC

; optimize FAIL ('CLEARSTATUS', MIDICar Player.pas), line = 116

	jsr CLEARSTATUS

; optimize OK (MIDICar Player.pas), line = 117

	lda SYSTEM.IORESULT
	and #$FC
	jeq l_0FC0
	lda SYSTEM.IORESULT
	jsr STATUSERROR
l_0FC0

; optimize OK (MIDICar Player.pas), line = 118

	lda MIDFILES.TOTALTRACKS
	jeq l_0FD9

; optimize FAIL ('STATUSPLAYING', MIDICar Player.pas), line = 119

	jsr STATUSPLAYING
l_0FD9

; optimize OK (MIDICar Player.pas), line = 120

	lda #$01
	sta PLAYDIR
l_0EFA
l_0EE7
l_0ED4
l_0EB6

; optimize OK (MIDICar Player.pas), line = 125

	lda _TM
	cmp OTM
	jeq l_0FFD

; optimize OK (MIDICar Player.pas), line = 127

	sta OTM

; optimize OK (MIDICar Player.pas), line = 128

	lda PLAYERSTATUS
	jpl l_101A

; optimize OK (MIDICar Player.pas), line = 130

	eor #$80
	sta PLAYERSTATUS

; optimize FAIL ('SHOWLIST', MIDICar Player.pas), line = 131

	jsr SHOWLIST

; optimize FAIL ('DRAWLISTSELECTION', MIDICar Player.pas), line = 132

	jsr DRAWLISTSELECTION
l_101A

; optimize OK (MIDICar Player.pas), line = 134

	lda #$D4
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda <MIDFILES._TOTALTICKS
	sta PUTHEX.V
	lda >MIDFILES._TOTALTICKS
	sta PUTHEX.V+1
	lda #$08
	sta PUTHEX.N
	jsr PUTHEX

; -------------------  ASM Block 00000118  -------------------

  icl 'asms/uvmeters.a65' 
; optimize OK (MIDICar Player.pas), line = 137

	lda STATEINPUTLINE
	cmp #$01
	jne l_1042

; optimize OK (MIDICar Player.pas), line = 138

	lda _TM
	sub CTM
	cmp #$0A
	jcc l_105B
	jeq l_105B

; optimize OK (MIDICar Player.pas), line = 140

	lda _TM
	sta CTM

; optimize OK (MIDICar Player.pas), line = 141

	ldy #1
	lda ILVCRS
	beq @+
	dey
@
	tya
	sta ILVCRS

; optimize FAIL ('SHOW_INPUTLINE', MIDICar Player.pas), line = 142

	jsr SHOW_INPUTLINE
l_105B
l_1042
l_0FFD

; optimize OK (keyboard.inc), line = 1

	lda KEYB
	cmp #$FF
	jeq l_1084

; optimize OK (keyboard.inc), line = 3

	lda PLAYERSTATUS
	and #$20
	jeq l_109B

; optimize OK (keyboard.inc), line = 5

	lda PLAYERSTATUS
	eor #$20
	sta PLAYERSTATUS

; optimize OK (keyboard.inc), line = 6

	lda #$F8
	sta $3FCC
	lda #$36
	sta $3FCC+1

; optimize OK (keyboard.inc), line = 7

	lda #$FF
	sta KEYB
l_109B

; optimize OK (keyboard.inc), line = 9

	lda STATEINPUTLINE
	cmp #$01
	jne l_10C1

; optimize FAIL ('DO_INPUTLINE', keyboard.inc), line = 11

	jsr DO_INPUTLINE
	jmp l_10CC
l_10C1

; optimize OK (keyboard.inc), line = 12

	lda KEYB
	cmp #$1C
	jne l_10DE
	jmp b_0E93					; break
l_10DE
l_10CC

; optimize OK (keyboard.inc), line = 14

	lda KEYB
	sta @CASETMP_0004
	cmp #$39
	jne l_10EC
@

; optimize OK (keyboard.inc), line = 17

	lda PLAYERSTATUS
	eor #$20
	sta PLAYERSTATUS

; optimize OK (keyboard.inc), line = 18

	lda #$40
	sta $3FCC
	lda #$3B
	sta $3FCC+1

	jmp a_0004
l_10EC
	cmp #$0C
	jne l_1102
@

; optimize FAIL ('CHOICELISTFILE', keyboard.inc), line = 22

	jsr CHOICELISTFILE
	lda CHOICELISTFILE.RESULT
	jeq l_110C

; optimize OK (keyboard.inc), line = 25

	lda P_BANK
	cmp #$FE
	jne l_111F

; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 27

	jsr DRAWLISTSELECTION

; optimize FAIL ('INIT_INPUTLINE', keyboard.inc), line = 28

	jsr INIT_INPUTLINE
l_111F

; optimize OK (keyboard.inc), line = 30

	lda P_BANK
	cmp #$FF
	jne l_1136

; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 32

	jsr STATUSSTOPPED

; optimize OK (keyboard.inc), line = 33

	lda OUTSTR
	sta LOADSONG.FILENAME
	lda OUTSTR+1
	sta LOADSONG.FILENAME+1
	jsr LOADSONG
	lda LOADSONG.RESULT
	sta SYSTEM.IORESULT

; optimize OK (keyboard.inc), line = 34

	lda #$02
	sta STATEINPUTLINE
l_1136
l_110C

; optimize OK (keyboard.inc), line = 37

	lda STATEINPUTLINE
	cmp #$02
	jne l_1158

; optimize OK (keyboard.inc), line = 39

	lda P_BANK
	cmp #$FE
	jne l_116B

; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 41

	jsr DRAWLISTSELECTION

; optimize OK (keyboard.inc), line = 42

	lda RESULTINPUTLINE
	jeq l_1179

; optimize OK (keyboard.inc), line = 44

	lda OUTSTR
	sta @move.src
	lda OUTSTR+1
	sta @move.src+1
	@moveSTRING FN #128

; optimize OK (keyboard.inc), line = 45

	lda OUTSTR
	sta GETDEVICESPEC.FN
	lda OUTSTR+1
	sta GETDEVICESPEC.FN+1
	lda CURDEV
	sta GETDEVICESPEC.SPEC
	lda CURDEV+1
	sta GETDEVICESPEC.SPEC+1
	jsr GETDEVICESPEC
	lda GETDEVICESPEC.RESULT
	jne l_118D
	lda CURDEV
	sta JOINSTRINGS.S1
	lda CURDEV+1
	sta JOINSTRINGS.S1+1
	lda FN
	sta JOINSTRINGS.S2
	lda FN+1
	sta JOINSTRINGS.S2+1
	jsr JOINSTRINGS
l_118D

; optimize OK (keyboard.inc), line = 46

	lda OUTSTR
	sta FILESELECT.PATH
	lda OUTSTR+1
	sta FILESELECT.PATH+1
	jsr FILESELECT
	lda FILESELECT.RESULT
	sta SYSTEM.IORESULT

; optimize OK (keyboard.inc), line = 47

	lda PLAYERSTATUS
	ora #$80
	sta PLAYERSTATUS
l_1179
l_116B

; optimize OK (keyboard.inc), line = 50

	lda SYSTEM.IORESULT
	and #$FC
	jeq l_11BF
	lda SYSTEM.IORESULT
	jsr STATUSERROR
l_11BF

; optimize OK (keyboard.inc), line = 51

	lda P_BANK
	cmp #$FF
	jne l_11D8
	jsr STATUSPLAYING
l_11D8

; optimize OK (keyboard.inc), line = 52

	lda #$00
	sta STATEINPUTLINE
l_1158

	jmp a_0004
l_1102
	cmp #$21
	jne l_11EB
@

; optimize OK (keyboard.inc), line = 57

	lda CURFILE
	jsr GOTONENTRY

; optimize OK (keyboard.inc), line = 58

	lda OUTSTR
	sta GETENTRY.FN
	lda OUTSTR+1
	sta GETENTRY.FN+1
	jsr GETENTRY
	mva GETENTRY.RESULT :STACKORIGIN+1,x

; optimize OK (keyboard.inc), line = 59

	lda <P_BANK
	sta GETENTRYSETS.PTR
	lda >P_BANK
	sta GETENTRYSETS.PTR+1
	jsr GETENTRYSETS

; optimize OK (keyboard.inc), line = 60

	lda P_BANK
	cmp #$FE
	jeq l_1216
	and #$7F
	jeq l_1216

; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 62

	jsr DRAWLISTSELECTION

; optimize OK (keyboard.inc), line = 63

	lda P_BANK
	eor #$80
	sta P_BANK

; optimize OK (keyboard.inc), line = 64

	lda <P_BANK
	sta SETENTRYSETS.PTR
	lda >P_BANK
	sta SETENTRYSETS.PTR+1
	jsr SETENTRYSETS

; optimize FAIL ('SHOWENTRY', keyboard.inc), line = 65

	jsr SHOWENTRY

; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 66

	jsr DRAWLISTSELECTION
l_1216

	jmp a_0004
l_11EB
	cmp #$0E
	beq @+
	cmp #$0F
	jne l_1233
@

; optimize OK (keyboard.inc), line = 71

	lda PLAYERSTATUS
	jmi l_1249
	jsr DRAWLISTSELECTION
l_1249

; optimize OK (keyboard.inc), line = 72

	lda #$00
	sta V

; optimize OK (keyboard.inc), line = 73

	lda KEYB
	cmp #$0E
	jne l_1263

; optimize OK (keyboard.inc), line = 75

	lda YFILE
	jeq l_1276

; optimize FAIL (0, keyboard.inc), line = 76

	dec YFILE
	jmp l_1284
l_1276

; optimize OK (keyboard.inc), line = 78

	lda SHFILE
	jeq l_1296
	lda #$FF
	sta V
l_1296
l_1284
l_1263

; optimize OK (keyboard.inc), line = 80

	lda KEYB
	cmp #$0F
	jne l_12B1

; optimize OK (keyboard.inc), line = 82

	lda YFILE
	cmp #$0F
	jcs l_12C4

; optimize FAIL (0, keyboard.inc), line = 83

	inc YFILE
	jmp l_12D2
l_12C4

; optimize OK (keyboard.inc), line = 85

	lda TOTALFILES
	sub YFILE
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	sub #$01
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	sbc #$00
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+10
	bne @+
	lda :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda SHFILE
	cmp :STACKORIGIN+10
@
	jcs l_12F0
	lda #$01
	sta V
l_12F0
l_12D2
l_12B1

; optimize OK (keyboard.inc), line = 87

	lda V
	jeq l_130B

; optimize OK (keyboard.inc), line = 89

	lda SHFILE
	add V
	sta SHFILE

; optimize OK (keyboard.inc), line = 90

	lda PLAYERSTATUS
	ora #$80
	sta PLAYERSTATUS
l_130B

; optimize OK (keyboard.inc), line = 93

	lda SHFILE
	add YFILE
	sta CURFILE

; optimize OK (keyboard.inc), line = 94

	cmp TOTALFILES
	jcc l_133B
	ldy TOTALFILES
	dey
	sty CURFILE
l_133B

; optimize OK (keyboard.inc), line = 95

	lda PLAYERSTATUS
	jmi l_135E
	jsr DRAWLISTSELECTION
l_135E

	jmp a_0004
l_1233
	cmp #$00
	jne l_136B
@

; optimize OK (keyboard.inc), line = 99

	lda PLAYERSTATUS
	add #$04
	and #$0C
	sta V

; optimize OK (keyboard.inc), line = 100

	lda PLAYERSTATUS
	and #$F3
	ora V
	sta PLAYERSTATUS

; optimize FAIL ('STATUSLOOP', keyboard.inc), line = 101

	jsr STATUSLOOP

	jmp a_0004
l_136B
	cmp #$25
	jne l_1393
@

; optimize FAIL ('CLEARUVMETERS', keyboard.inc), line = 105

	jsr CLEARUVMETERS

; optimize OK (keyboard.inc), line = 106

	lda PLAYERSTATUS
	eor #$02
	sta PLAYERSTATUS

	jmp a_0004
l_1393
	cmp #$27
	jne l_13A7
@

; optimize OK (keyboard.inc), line = 110

	lda PLAYERSTATUS
	eor #$01
	sta PLAYERSTATUS

; optimize FAIL ('SETCOLORS', keyboard.inc), line = 111

	jsr SETCOLORS

	jmp a_0004
l_13A7
	cmp #$17
	beq @+
	cmp #$15
	jne l_13BD
@

; optimize OK (keyboard.inc), line = 115

	lda KEYB
	cmp #$17
	jne l_13CF
	lda #$FF
	sta PLAYDIR
l_13CF

; optimize OK (keyboard.inc), line = 116

	lda KEYB
	cmp #$15
	jne l_13E8
	lda #$01
	sta PLAYDIR
l_13E8

; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 117

	jsr STATUSPAUSE

; optimize OK (keyboard.inc), line = 118

	lda #$00
	sta MIDFILES.PLAYINGTRACKS

	jmp a_0004
l_13BD
	cmp #$16
	jne l_13FD
@

; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 122

	jsr STATUSSTOPPED

; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 123

	jsr STATUSPLAYING

	jmp a_0004
l_13FD
	cmp #$12
	jne l_1408
@

; optimize OK (keyboard.inc), line = 127

	lda MIDFILES._TIMERSTATUS
	jpl l_141E

; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 129

	jsr STATUSPLAYING
	jmp l_1429
l_141E

; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 130

	jsr STATUSPAUSE
l_1429

	jmp a_0004
l_1408
	cmp #$10
	jne l_1433
@

; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 132

	jsr STATUSSTOPPED
	jmp a_0004
l_1433
	cmp #$34
	beq @+
	cmp #$36
	beq @+
	cmp #$37
	jne l_1441
@

; optimize OK (keyboard.inc), line = 135

	lda KEYB
	cmp #$36
	jne l_1453
	lda MIDFILES.TEMPOSHIFT
	add #$20
	sta MIDFILES.TEMPOSHIFT
	lda MIDFILES.TEMPOSHIFT+1
	adc #$4E
	sta MIDFILES.TEMPOSHIFT+1
	lda MIDFILES.TEMPOSHIFT+2
	adc #$00
	sta MIDFILES.TEMPOSHIFT+2
	lda MIDFILES.TEMPOSHIFT+3
	adc #$00
	sta MIDFILES.TEMPOSHIFT+3
l_1453

; optimize OK (keyboard.inc), line = 136

	lda KEYB
	cmp #$37
	jne l_1469
	lda MIDFILES.TEMPOSHIFT
	sub #$20
	sta MIDFILES.TEMPOSHIFT
	lda MIDFILES.TEMPOSHIFT+1
	sbc #$4E
	sta MIDFILES.TEMPOSHIFT+1
	lda MIDFILES.TEMPOSHIFT+2
	sbc #$00
	sta MIDFILES.TEMPOSHIFT+2
	lda MIDFILES.TEMPOSHIFT+3
	sbc #$00
	sta MIDFILES.TEMPOSHIFT+3
l_1469

; optimize OK (keyboard.inc), line = 137

	lda KEYB
	cmp #$34
	jne l_147F
	lda #$00
	sta MIDFILES.TEMPOSHIFT
	sta MIDFILES.TEMPOSHIFT+1
	sta MIDFILES.TEMPOSHIFT+2
	sta MIDFILES.TEMPOSHIFT+3
l_147F

; optimize FAIL ('MIDFILES.SETTEMPO', keyboard.inc), line = 138

	jsr MIDFILES.SETTEMPO

l_1441
a_0004

; optimize OK (keyboard.inc), line = 141

	lda #$FF
	sta KEYB
l_1084

; optimize OK (MIDICar Player.pas), line = 148

	jmp l_0E93
b_0E93

; optimize FAIL ('UNSETNMI', MIDICar Player.pas), line = 151

	jsr UNSETNMI

; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 153

	jsr EXIT2DOS

; ------------------------------------------------------------

SCREEN_ADRSES	= $0410
CHARS_ADDR	= $3000
SCREEN_ADDR	= $3400
SCREEN_WORK	= $36F8
SCREEN_TIME	= $39C8
SCREEN_STATUS	= $39DC
SCREEN_FOOT	= $3A04
UVMETER_ADDR	= $3B00
HELPSCR_ADDR	= $3B40
DLIST_ADDR	= $3FB3
SCREEN_CHANNELS	= $3722
PLAYLIST_ADDR	= $2000
START_INFO_ADDR	= $2C00
TRACK_DATA_ADDR	= $2E00
MIDI_DATA_ADDR	= $4000
FREE_MEM	= $23
F_CLEAR	= $20
PS_COLORSET	= $01
PS_VIEW	= $02
PS_LOOP	= $0C
PS_PLAYONCE	= $00
PS_REPEATONE	= $04
PS_REPEATALL	= $08
PS_SHUFFLE	= $0C
PS_ISREFRESH	= $80
PS_ISSTOPPED	= $40
PS_ISHELP	= $20
LIST_VISIBLE_CHARS	= $1E
LIST_VISIBLE_ITEMS	= $10
FE_DIR	= $A4A9B200
FE_MID	= $4D494400
PLAYERSTATUS	= $4A
TOTALXMS	= $4B
SCRADR	= $D4
MCBASEADDR	= $D8
_TM	= $14
OTM	= $13
CTM	= $12
CHN	= $D6
V	= $D7
FILELIST	= $DA
YFILE	= $0400
SHFILE	= $0401
CURFILE	= $0402
TOTALFILES	= $0403
CURPLAY	= $0404
PLAYDIR	= $0405
LAST_BANK	= $040A
LAST_ADR	= $040B
adr.PLAYLISTSCRADR	= $0410
.var PLAYLISTSCRADR	= adr.PLAYLISTSCRADR .word
adr.CURDEV	= $04FC
.var CURDEV	= adr.CURDEV .word
adr.FN	= $0500
.var FN	= adr.FN .word
adr.OUTSTR	= $0580
.var OUTSTR	= adr.OUTSTR .word
ILCH	= $D6
ILPOS	= $0450
ILSCRADR	= $0451
ILVCRS	= $0453
RESULTINPUTLINE	= DATAORIGIN+$0086
STATEINPUTLINE	= DATAORIGIN+$0087
adr.COLORS	= CODEORIGIN+$0100
.var COLORS	= adr.COLORS .word
PUTTEXTINVERT	= DATAORIGIN+$0088
SDMACTL	= DATAORIGIN+$0089
DMACTL	= $D400
SDLST	= $0230
CHBASE	= $02F4
VVBLKI	= $0222
NMIEN	= $D40E
NMIVEC	= $FFFA
OLDVVBLKI	= DATAORIGIN+$008F
OLDNMIVEC	= DATAORIGIN+$0091
THI	= $1F
K_L	= $00
K_LEFT	= $06
K_RIGHT	= $07
K_P	= $0A
K_RETURN	= $0C
K_UP	= $0E
K_DOWN	= $0F
K_V	= $10
K_HELP	= $11
K_C	= $12
K_B	= $15
K_X	= $16
K_Z	= $17
K_ESC	= $1C
K_SPACE	= $21
K_M	= $25
K_INVERS	= $27
K_TAB	= $2C
K_DELETE	= $34
K_CLEAR	= $36
K_INSERT	= $37
K_H	= $39
K_CAPS	= $3C
K_S	= $3E
KEYB	= $02FC
SOUNDR	= $41
P_BANK	= $040D
P_ADR	= $040E
@CASETMP_0004	= DATAORIGIN+$00A9
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
USE_FIFO
ROMOFF
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.MC6850.@UnitInit
	jsr MAIN.MC6850.@UnitInit
	.fi

	.ifdef MAIN.MIDI_FIFO.@UnitInit
	jsr MAIN.MIDI_FIFO.@UnitInit
	.fi

	.ifdef MAIN.CIO.@UnitInit
	jsr MAIN.CIO.@UnitInit
	.fi

	.ifdef MAIN.MIDFILES.@UnitInit
	jsr MAIN.MIDFILES.@UnitInit
	.fi

	.ifdef MAIN.MISC.@UnitInit
	jsr MAIN.MISC.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.MC6850) > 0
	.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
	eif

	ift .SIZEOF(MAIN.MIDI_FIFO) > 0
	.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
	eif

	ift .SIZEOF(MAIN.CIO) > 0
	.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
	eif

	ift .SIZEOF(MAIN.MIDFILES) > 0
	.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
	eif

	ift .SIZEOF(MAIN.MISC) > 0
	.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	org $3E80

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 170

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $00 $00 $05 $FB $00 $FC $00 $FD  $00 $04 $2D $65 $6D $1A $00 $02  $2B $22 $00 $02 $45 $3A $00 $02
.by  $00 $00 $00 $02 $7E $7F $00 $02  $5C $5D $00 $02 $5E $5F $00 $05  $3B $00 $FC $00 $FD $00 $09 $4E
.by  $B0 $EC $E1 $F9 $E9 $EE $E7 $CE  $00 $09 $4E $AE $EF $80 $F3 $EF  $EE $E7 $CE $00 $05 $FB $00 $3C
.by  $00 $FD $00 $09 $4E $80 $B0 $E1  $F5 $F3 $E5 $80 $CE $00 $05 $FB  $00 $FC $00 $3D $00 $09 $4E $B3
.by  $F4 $EF $F0 $F0 $E5 $E4 $CE $00  $09 $4E $AC $EF $E1 $E4 $E9 $EE  $E7 $80 $00 $13 $4E $B2 $E5 $E1
.by  $E4 $E9 $EE $E7 $80 $E4 $E9 $F2  $E5 $E3 $F4 $EF $F2 $F9 $80 $00  $14 $4E $B5 $EE $F3 $F5 $F0 $F0
.by  $EF $F2 $F4 $E5 $E4 $80 $E6 $EF  $F2 $ED $E1 $F4 $CE $00 $14 $4E  $AE $EF $F4 $80 $E5 $EE $EF $F5
.by  $E7 $E8 $F4 $80 $ED $E5 $ED $EF  $F2 $F9 $CE $00 $11 $4E $AE $EF  $F4 $80 $E1 $80 $AD $A9 $A4 $A9
.by  $80 $E6 $E9 $EC $E5 $CE $00 $0C  $4E $A9 $8F $AF $80 $A5 $F2 $F2  $EF $F2 $80 $83 $00 $0B $4E $A4
.by  $E9 $F2 $E5 $E3 $F4 $EF $F2 $F9  $CE $00 $02 $44 $3A $00 $08 $4E  $B3 $F4 $E1 $F4 $F5 $F3 $CE $00
.by  $09 $4E $A3 $EF $F5 $EE $F4 $E5  $F2 $CE $00 $03 $2A $2E $2A $00  $A8 $00 $0A $08 $0A $A8 $0A $00
.by  $02 $00 $17 $80 $1B $80 $1F $80  $23 $80
.endm

	end
