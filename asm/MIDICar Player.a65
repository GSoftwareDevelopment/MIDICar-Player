; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/05/06] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $8000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'resources/font_blk.fnt' CHARS_ADDR 0 0 0 0 0 0 0 0
	RCASM 'resources/dlist.asm' DLIST_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'resources/header-gr8.obj' SCREEN_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'resources/footer-gr8-3.obj' SCREEN_FOOT 0 0 0 0 0 0 0 0
	RCDATA 'resources/uvmeter.obj' UVMETER_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'resources/help.obj' HELPSCR_ADDR 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0107

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000018  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	lda :STACKORIGIN+STACKWIDTH,x
	sta VALUE+1
	dex
@main

; -------------------  ASM Block 00000019  -------------------

	ldy #0
	mva value (:edx),y
	iny
	mva value+1 (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLCHAR_0151					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000021  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	FILLCHAR_0152					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000024  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

X	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	MOVE_0153					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000028  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	RANDOM_0172					; FUNCTION | ASSEMBLER | OVERLOAD
	sta RANGE

; -------------------  ASM Block 00000042  -------------------


;BYTE FUNC Rand(BYTE range)
; returns random number between 0 and
; range-1.  If range=0, then a random
; number between 0 and 255 is returned

  ldy $d20a   ; RANDOM

  lda range
  beq stop

  sta :ecx
  sty :eax

  jsr imulCL
  tay

stop  sty Result


@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000C

@VarData	= RANGE
@VarDataSize	= 1

	rts						; ret
.endl

.local	PARAMSTR					; FUNCTION | ASSEMBLER
	sta I

; -------------------  ASM Block 00000045  -------------------

	@cmdline i

;	@move #@buf Result #33
	ldy #256-33
	mva:rne @buf+33-256,y adr.Result+33-256,y+

@exit

; ------------------------------------------------------------

I	= DATAORIGIN+$000D
adr.RESULT	= [DATAORIGIN+$000E] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= I
@VarDataSize	= 34

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	MC6850						; UNIT

.local	MC6850_INIT					; PROCEDURE | ASSEMBLER | KEEP
	sta SETUP

; -------------------  ASM Block 00000052  -------------------

    lda setup
    sta MCBaseState:$d500

; ------------------------------------------------------------

SETUP	= DATAORIGIN+$002F

@VarData	= SETUP
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MC6850_SEND2					; PROCEDURE | ASSEMBLER | KEEP

; -------------------  ASM Block 00000053  -------------------

wait:
    lda MCBaseState:$d500
    and #TDRE
    bne wait

    lda MC_Byte
    sta MCBaseBuf:$d500

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

CR0	= $01
CR1	= $02
CR2	= $04
CR3	= $08
CR4	= $10
CR5	= $20
CR6	= $40
CR7	= $80
CD_1	= $00
CD_16	= $01
CD_64	= $02
MASTERRESET	= $03
WS_7BITS	= $00
WS_8BITS	= $10
WS_2BITSTOP	= $00
WS_1BITSTOP	= $08
WS_EVENPARITY	= $00
WS_ODDPARITY	= $04
TC_RTSLOW_NOTIRQ	= $00
TC_RTSLOW_TIRQ	= $20
TC_RTSHIGH_NOTIRQ	= $40
TC_BREAKLEVEL	= $60
NOIRQ_RECEIVE	= $00
IRQ_RECEIVE	= $80
RDRF	= $01
TDRE	= $02
DCD	= $04
CTS	= $08
FE	= $10
OVRN	= $20
PE	= $40
IRQ	= $80
MC_BYTE	= $FF

.endl							; UNIT MC6850

; ------------------------------------------------------------

.local	MIDI_FIFO					; UNIT

.local	FIFO_RESET					; PROCEDURE

; optimize OK (MIDI_FIFO), line = 30

	lda #$00
	sta FIFO_HEAD

; optimize OK (MIDI_FIFO), line = 31

	sta FIFO_TAIL
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_PUSHDIRECT2MC6850				; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000054  -------------------

  lda MCBaseState:$d500 // MC6850.MC6850_CNTRREG
  and #MC6850.TDRE
  beq exitPush

  ldy FIFO_Tail
  cpy FIFO_Head
  beq exitPush

  lda FIFO_ADDR,y
  sta MCBaseBuf:$d500  //MC6850.MC6850_BUFFER
  inc FIFO_Tail

exitPush:

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_WRITEBYTE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000055  -------------------

  lda FIFO_Head
  clc
  adc #1
  cmp FIFO_Tail
  bne storeInFIFO

  jsr FIFO_Flush

storeInFIFO:
  ldy FIFO_Head
  lda FIFO_Byte
  sta FIFO_ADDR,y
  inc FIFO_Head

  jsr FIFO_PushDirect2MC6850
exitWrite:

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_FLUSH					; PROCEDURE | ASSEMBLER | KEEP

; -------------------  ASM Block 00000056  -------------------

  sei
  // lda _timerStatus
  // eor #$80
  // sta _timerStatus

  ldy FIFO_Tail
flushLoop:
  cpy FIFO_Head
  beq endFlush

waitOnMC:
  lda MCBaseState:$d500 // MC6850.MC6850_CNTRReg
  and #MC6850.TDRE
  beq waitOnMc

  lda FIFO_ADDR,y
  sta MCBaseBuf:$d500   // MC6850.MC6850_BUFFER

  iny
  jmp flushLoop

endFlush:
  sty FIFO_Tail

  cli
  // lda _timerStatus
  // eor #$80
  // sta _timerStatus

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

FIFO_HEAD	= $FD
FIFO_TAIL	= $FE
FIFO_BYTE	= $FF
FIFO2NULL	= DATAORIGIN+$0030
FIFO_ADDR	= $0600
adr.FIFO_BUF	= $0600
.var FIFO_BUF	= adr.FIFO_BUF .word
_TIMERSTATUS	= $F5

.endl							; UNIT MIDI_FIFO

; ------------------------------------------------------------

.local	CIO						; UNIT

.local	OPN						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000057  -------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #$03		;komenda: OPEN
	sta iccmd,x

	inw device		;omin bajt z dlugoscia STRING-a

	lda device		;adres nazwy pliku
	sta icbufa,x
	lda device+1
	sta icbufa+1,x

	lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
	sta icax1,x

	lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
	sta icax2,x

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	pla:tax

; ------------------------------------------------------------

CHN	= DATAORIGIN+$0031
AX1	= DATAORIGIN+$0032
AX2	= DATAORIGIN+$0033
DEVICE	= DATAORIGIN+$0034

@VarData	= CHN
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLS						; PROCEDURE | ASSEMBLER
	sta CHN

; -------------------  ASM Block 00000058  -------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #$0c		;komenda: CLOSE
	sta iccmd,x

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	pla:tax

; ------------------------------------------------------------

CHN	= DATAORIGIN+$0036

@VarData	= CHN
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BGET						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000060  -------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #7		;get char/s command
	sta iccmd,x

	lda buf
	sta icbufa,x
	lda buf+1
	sta icbufa+1,x

	lda cnt
	sta icbufl,x
	lda cnt+1
	sta icbufh,x

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	pla:tax

; ------------------------------------------------------------

CHN	= :EDX
BUF	= :ECX
CNT	= :EAX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

.endl							; UNIT CIO

; ------------------------------------------------------------

.local	MIDFILES					; UNIT

.local	INT_TIMER					; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000067  -------------------

  icl 'midfile/asms/int_timer.a65'

	rti						; ret
.endl

.local	MEMBOUNDCHECK					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000068  -------------------

  icl 'midfile/asms/memory_bound_check.a65'

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADMID						; FUNCTION

	jmp l_019B

.local	READWORDBI					; FUNCTION

; optimize OK (bigendian.inc), line = 3

	lda #$01
	sta CIO.BGET.CHN
	lda <RESULT
	sta CIO.BGET.BUF
	lda >RESULT
	sta CIO.BGET.BUF+1
	lda #$02
	sta CIO.BGET.CNT
	lda #$00
	sta CIO.BGET.CNT+1
	jsr CIO.BGET

; -------------------  ASM Block 00000069  -------------------

    ldx result
    ldy result+1
    stx result+1
    sty result
  
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0078
	rts						; ret
.endl

.local	READLONGBI					; FUNCTION

; optimize OK (bigendian.inc), line = 15

	lda #$01
	sta CIO.BGET.CHN
	lda <RESULT
	sta CIO.BGET.BUF
	lda >RESULT
	sta CIO.BGET.BUF+1
	lda #$04
	sta CIO.BGET.CNT
	lda #$00
	sta CIO.BGET.CNT+1
	jsr CIO.BGET

; -------------------  ASM Block 00000070  -------------------

    ldx result
    ldy result+3
    stx result+3
    sty result

    ldx result+1
    ldy result+2
    stx result+2
    sty result+1
  
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$007A
	rts						; ret
.endl

.local	_BGET						; PROCEDURE

; optimize OK (loadmid.inc), line = 21

	lda #$01
	sta CIO.BGET.CHN
	lda DEST
	sta CIO.BGET.BUF
	lda DEST+1
	sta CIO.BGET.BUF+1
	lda LOADSIZE
	sta CIO.BGET.CNT
	lda LOADSIZE+1
	sta CIO.BGET.CNT+1
	jsr CIO.BGET

; ------------------------------------------------------------

DEST	= DATAORIGIN+$007E

@VarData	= DEST
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKLOADSIZE					; PROCEDURE

; optimize OK (loadmid.inc), line = 26

	lda #$00
	sta LOADSIZE
	sta LOADSIZE+1

; --- RepeatUntilProlog
l_01BD

; optimize FAIL ('MEMBOUNDCHECK', loadmid.inc), line = 28

	jsr MEMBOUNDCHECK

; optimize OK (loadmid.inc), line = 29

	lda SYSTEM.IORESULT
	cmp #$01
	jeq l_01D0
	jmp @exit					; exit
l_01D0

; optimize OK (loadmid.inc), line = 31

	lda _ADR+1
	cmp #$D8
	jcc l_01E4
	lda #$00
	sta LOADSIZE
	lda #$FF
	sta LOADSIZE+1
	jmp l_01F2
l_01E4

; optimize OK (loadmid.inc), line = 32

	lda _ADR+1
	cmp #$C0
	jcc l_0203
	lda #$00
	sta LOADSIZE
	lda #$D0
	sta LOADSIZE+1
	jmp l_0211
l_0203

; optimize OK (loadmid.inc), line = 33

	lda _ADR+1
	cmp #$A8
	jcc l_0222
	lda #$00
	sta LOADSIZE
	lda #$C0
	sta LOADSIZE+1
	jmp l_0230
l_0222

; optimize OK (loadmid.inc), line = 34

	lda _ADR+1
	cmp #$40
	jcc l_0241
	lda #$00
	sta LOADSIZE
	lda #$80
	sta LOADSIZE+1
l_0241
l_0230
l_0211
l_01F2

; optimize OK (loadmid.inc), line = 35

	lda LOADSIZE
	sub _ADR
	sta LOADSIZE
	lda LOADSIZE+1
	sbc _ADR+1
	sta LOADSIZE+1

; optimize OK (loadmid.inc), line = 36

	.LOCAL
	lda #$00
	sub LEN+3
	bne L4
	lda #$00
	cmp LEN+2
	bne L1
	lda LOADSIZE+1
	cmp LEN+1
	bne L1
	lda LOADSIZE
	cmp LEN
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_025B
	jeq l_025B
	lda LEN
	sta LOADSIZE
	lda LEN+1
	sta LOADSIZE+1
l_025B

; optimize OK (loadmid.inc), line = 37

	lda LOADSIZE+1
	ora LOADSIZE
	jeq l_01BD
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_019B

; optimize OK (loadmid.inc), line = 41

	lda #$01
	sta CIO.OPN.CHN
	lda #$04
	sta CIO.OPN.AX1
	lda #$00
	sta CIO.OPN.AX2
	lda FN
	sta CIO.OPN.DEVICE
	lda FN+1
	sta CIO.OPN.DEVICE+1
	jsr CIO.OPN

; optimize OK (loadmid.inc), line = 42

	lda SYSTEM.IORESULT
	jpl l_0287

; optimize OK (loadmid.inc), line = 44

	sta RESULT

; optimize OK (loadmid.inc), line = 45

	lda #$01
	jsr CIO.CLS
	jmp @exit					; exit
l_0287

; optimize OK (loadmid.inc), line = 49

	lda MIDTRACKS
	sta TRKDATA
	lda MIDTRACKS+1
	sta TRKDATA+1

; optimize OK (loadmid.inc), line = 50

	lda #$00
	sta TRACKCOUNT

; optimize OK (loadmid.inc), line = 51

	lda #$FF
	sta TOTALTRACKS

; --- WhileProlog
	jmp l_02A1
l_02A2

; optimize OK (loadmid.inc), line = 55

	lda #$01
	sta CIO.BGET.CHN
	lda <CHUNKTAG
	sta CIO.BGET.BUF
	lda >CHUNKTAG
	sta CIO.BGET.BUF+1
	lda #$04
	sta CIO.BGET.CNT
	lda #$00
	sta CIO.BGET.CNT+1
	jsr CIO.BGET

; optimize FAIL ('READLONGBI', loadmid.inc), line = 56

	jsr READLONGBI
	lda READLONGBI.RESULT
	sta LEN
	lda READLONGBI.RESULT+1
	sta LEN+1
	lda READLONGBI.RESULT+2
	sta LEN+2
	lda READLONGBI.RESULT+3
	sta LEN+3

; optimize OK (loadmid.inc), line = 57

	lda CHUNKTAG+3
	eor #$64
	jne l_02BA
	lda CHUNKTAG+2
	eor #$68
	jne l_02BA
	lda CHUNKTAG+1
	eor #$54
	jne l_02BA
	lda CHUNKTAG
	eor #$4D
	jne l_02BA

; optimize FAIL ('READWORDBI', loadmid.inc), line = 59

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta FORMAT

; optimize OK (loadmid.inc), line = 60

	jeq l_02DD
	cmp #$01
	jeq l_02DD

; optimize OK (loadmid.inc), line = 62

	lda #$64
	sta SYSTEM.IORESULT
	jmp b_02A2					; break
l_02DD

; optimize FAIL ('READWORDBI', loadmid.inc), line = 65

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta TOTALTRACKS

; optimize FAIL ('READWORDBI', loadmid.inc), line = 66

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta V
	lda READWORDBI.RESULT+1
	sta V+1

; optimize OK (loadmid.inc), line = 67

	jmi l_0301

; optimize OK (loadmid.inc), line = 68

	lda V
	sta TICKDIV
	lda V+1
	sta TICKDIV+1
	jmp l_0310
l_0301

; optimize OK (loadmid.inc), line = 72

	lda V+1
	and #$7F
	sta FPS

; optimize OK (loadmid.inc), line = 73

	sta @CASETMP_0003
	cmp #$E8
	jne l_0328
@

; optimize OK (loadmid.inc), line = 74

	lda #$18
	sta FPS

	jmp a_0003
l_0328
	cmp #$E7
	jne l_0335
@

; optimize OK (loadmid.inc), line = 75

	lda #$19
	sta FPS

	jmp a_0003
l_0335
	cmp #$E3
	jne l_0342
@

; optimize OK (loadmid.inc), line = 76

	lda #$1D
	sta FPS

	jmp a_0003
l_0342
	cmp #$E2
	jne l_034F
@

; optimize OK (loadmid.inc), line = 77

	lda #$1E
	sta FPS

l_034F
a_0003

; optimize OK (loadmid.inc), line = 79

	lda V
	sta FSD
l_0310
	jmp l_036D
l_02BA

; optimize OK (loadmid.inc), line = 83

	lda CHUNKTAG+3
	eor #$6B
	jne l_037D
	lda CHUNKTAG+2
	eor #$72
	jne l_037D
	lda CHUNKTAG+1
	eor #$54
	jne l_037D
	lda CHUNKTAG
	eor #$4D
	jne l_037D

; optimize FAIL (0, loadmid.inc), line = 85

	inc TRACKCOUNT

; optimize OK (loadmid.inc), line = 87

	mwy TRKDATA :bp2
	ldy #$00
	tya
	sta (:bp2),y

; optimize OK (loadmid.inc), line = 88

	ldy #$04
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (loadmid.inc), line = 89

	ldy #$01
	lda _BANK
	sta (:bp2),y

; optimize OK (loadmid.inc), line = 90

	iny
	lda _ADR
	sta (:bp2),y
	iny
	lda _ADR+1
	sta (:bp2),y

; -------------------  ASM Block 00000071  -------------------

 ldy _bank \ lda $100,y \ sta PORTB 
; --- WhileProlog
	jmp l_0397
l_0398

; optimize FAIL (':TMP', loadmid.inc), line = 96

	lda LOADPROCESS
	sta :TMP+1
	lda LOADPROCESS+1
	sta :TMP+2
	lda #$4C
	sta :TMP
	inx
	mva TRACKCOUNT :STACKORIGIN,x
	jsr :TMP

; optimize FAIL ('CHECKLOADSIZE', loadmid.inc), line = 97

	jsr CHECKLOADSIZE

; optimize OK (loadmid.inc), line = 98

	lda SYSTEM.IORESULT
	cmp #$01
	jeq l_03AF
	jmp b_0398					; break
l_03AF

; optimize OK (loadmid.inc), line = 100

	lda _ADR+1
	cmp #$C0
	jcc l_03C3

; optimize OK (loadmid.inc), line = 102

	lda #$00
	sta _BGET.DEST
	lda #$40
	sta _BGET.DEST+1
	jsr _BGET

; optimize OK (loadmid.inc), line = 103

	lda RBUF
	sta SYSTEM.MOVE_0153.SOURCE
	lda RBUF+1
	sta SYSTEM.MOVE_0153.SOURCE+1
	lda _PTR
	sta SYSTEM.MOVE_0153.DEST
	lda _PTR+1
	sta SYSTEM.MOVE_0153.DEST+1
	lda LOADSIZE
	sta SYSTEM.MOVE_0153.COUNT
	lda LOADSIZE+1
	sta SYSTEM.MOVE_0153.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0153
	m@INLINE
	.endl
	jmp l_03D6
l_03C3

; optimize OK (loadmid.inc), line = 106

	lda _PTR
	sta _BGET.DEST
	lda _PTR+1
	sta _BGET.DEST+1
	jsr _BGET
l_03D6

; optimize OK (loadmid.inc), line = 108

	lda SYSTEM.IORESULT
	cmp #$01
	jeq l_03EB
	jmp b_0398					; break
l_03EB

; optimize OK (loadmid.inc), line = 110

	lda _ADR
	add LOADSIZE
	sta _ADR
	lda _ADR+1
	adc LOADSIZE+1
	sta _ADR+1

; optimize OK (loadmid.inc), line = 111

	lda LEN
	sub LOADSIZE
	sta LEN
	lda LEN+1
	sbc LOADSIZE+1
	sta LEN+1
	lda LEN+2
	sbc #$00
	sta LEN+2
	lda LEN+3
	sbc #$00
	sta LEN+3
l_0397

; optimize OK (loadmid.inc), line = 94

	lda LEN+3
	bmi @+
	ora LEN+2
	ora LEN+1
	ora LEN
	jne l_0398
@
b_0398

; optimize OK (loadmid.inc), line = 113

	lda TRKDATA
	add #$09
	sta TRKDATA
	scc
	inc TRKDATA+1
	jmp l_0406
l_037D

; optimize OK (loadmid.inc), line = 115

	lda #$66
	sta SYSTEM.IORESULT
l_0406
l_036D
l_02A1

; optimize OK (loadmid.inc), line = 53

	lda SYSTEM.IORESULT
	cmp #$01
	jne l_02A2w
	lda TRACKCOUNT
	cmp TOTALTRACKS
	jcc l_02A2
l_02A2w
b_02A2

; optimize OK (loadmid.inc), line = 117

	lda SYSTEM.IORESULT
	sta RESULT

; optimize OK (loadmid.inc), line = 118

	lda #$01
	jsr CIO.CLS
@exit

; ------------------------------------------------------------

FN	= DATAORIGIN+$0062
RESULT	= DATAORIGIN+$0064
LOADBUF_SIZE	= $4000
CIO_CHN	= $01
TRACKCOUNT	= DATAORIGIN+$0065
CHUNKTAG	= DATAORIGIN+$0066
V	= DATAORIGIN+$006A
TOP	= DATAORIGIN+$006C
ENDADR	= DATAORIGIN+$006E
LOADSIZE	= DATAORIGIN+$0070
LEN	= DATAORIGIN+$0072
TRKDATA	= DATAORIGIN+$0076
TRKDATA.STATUS	= DATAORIGIN+$0000
TRKDATA.BANK	= DATAORIGIN+$0001
TRKDATA.PTR	= DATAORIGIN+$0002
TRKDATA.TRACKTIME	= DATAORIGIN+$0004
TRKDATA._EVENT	= DATAORIGIN+$0008
adr.RBUF	= $4000
.var RBUF	= adr.RBUF .word
@CASETMP_0003	= DATAORIGIN+$0080

@VarData	= FN
@VarDataSize	= 33

	rts						; ret
.endl

.local	SETTEMPO					; PROCEDURE

; optimize OK (settempo.inc), line = 10

	lda _TIMERSTATUS
	eor #$80
	sta _TIMERSTATUS

; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 13

	inx
	mva MS_PER_QNOTE :STACKORIGIN,x
	mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
	mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
	mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva TEMPOSHIFT :STACKORIGIN,x
	mva TEMPOSHIFT+1 :STACKORIGIN+STACKWIDTH,x
	mva TEMPOSHIFT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva TEMPOSHIFT+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr addEAX_ECX
	mva TICKDIV :STACKORIGIN,x
	mva TICKDIV+1 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr divmulINT.DIV
	dex
	lda :STACKORIGIN,x
	sta _FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta _FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta _FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta _FREQ+3

; optimize FAIL ('@I2F_m', settempo.inc), line = 14

	mva _FREQ :STACKORIGIN,x
	mva _FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva _FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva _FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$24 :STACKORIGIN+STACKWIDTH,x
	mva #$74 :STACKORIGIN+STACKWIDTH*2,x
	mva #$49 :STACKORIGIN+STACKWIDTH*3,x
	jsr @I2F_m
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta FREQ+3

; optimize FAIL ('@FDIV', settempo.inc), line = 15

	mva #$00 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$80 :STACKORIGIN+STACKWIDTH*2,x
	mva #$3F :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta FREQ
	lda :STACKORIGIN+STACKWIDTH,x
	sta FREQ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta FREQ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta FREQ+3

; optimize FAIL ('@FDIV', settempo.inc), line = 24

	mva #$F5 :STACKORIGIN,x
	mva #$FA :STACKORIGIN+STACKWIDTH,x
	mva #$7A :STACKORIGIN+STACKWIDTH*2,x
	mva #$43 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta RATIO
	lda :STACKORIGIN+STACKWIDTH,x
	sta RATIO+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta RATIO+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta RATIO+3

; optimize FAIL ('@F2I', settempo.inc), line = 25

	mva #$01 :STACKORIGIN,x
	inx
	mva RATIO :STACKORIGIN,x
	mva RATIO+1 :STACKORIGIN+STACKWIDTH,x
	mva RATIO+2 :STACKORIGIN+STACKWIDTH*2,x
	mva RATIO+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @F2I
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
	lda :STACKORIGIN-1,x
	add :STACKORIGIN,x
	sta _RATIO
	dex
	dex

; optimize OK (settempo.inc), line = 26

	lda _RATIO
	cmp #$10
	jcc l_0484
	lda #$00
	sta RATIO
	sta RATIO+1
	lda #$70
	sta RATIO+2
	lda #$41
	sta RATIO+3
l_0484

; optimize OK (settempo.inc), line = 29

	lda _TIMERSTATUS
	and #$C0
	ora _RATIO
	sta _TIMERSTATUS

; optimize OK (settempo.inc), line = 30

	lda #$01
	sta _SUBCNT

; optimize FAIL ('@I2F', settempo.inc), line = 32

	inx
	mva #$00 :STACKORIGIN,x
	mva #$FA :STACKORIGIN+STACKWIDTH,x
	inx
	mva FREQ :STACKORIGIN,x
	mva FREQ+1 :STACKORIGIN+STACKWIDTH,x
	mva FREQ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva FREQ+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva _RATIO :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr @I2F
	jsr @FMUL
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @I2F_m
	jsr @FDIV
	dex
	jsr @FROUND
	jsr @F2I
	lda :STACKORIGIN,x
	sta FDIV

; optimize FAIL ('divmulINT.DIV', settempo.inc), line = 36

	mva #$00 :STACKORIGIN,x
	mva #$87 :STACKORIGIN+STACKWIDTH,x
	mva #$93 :STACKORIGIN+STACKWIDTH*2,x
	mva #$03 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva MS_PER_QNOTE :STACKORIGIN,x
	mva MS_PER_QNOTE+1 :STACKORIGIN+STACKWIDTH,x
	mva MS_PER_QNOTE+2 :STACKORIGIN+STACKWIDTH*2,x
	mva MS_PER_QNOTE+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr divmulINT.DIV
	dex
	lda :STACKORIGIN,x
	sta BPM
	lda :STACKORIGIN+STACKWIDTH,x
	sta BPM+1
	dex

; optimize OK (settempo.inc), line = 39

	lda _TIMERSTATUS
	eor #$80
	sta _TIMERSTATUS

; -------------------  ASM Block 00000072  -------------------

    sei  // disable IRQ
  // reset POKEY
    lda #$00
    ldy #$03
    sta AUDCTL
    sta AUDC1
    sty SKCTL
  // setup TIMER1
    sta AUDCTL
    mva FDIV AUDF1
  // initialize IRQ for TIMER1
    // lda irqens
    // ora #$01
    // sta irqens
    // sta irqen
  // start timer strobe
    sta stimer

    cli  // enable IRQ
  
; ------------------------------------------------------------

FREQ	= DATAORIGIN+$0081
_FREQ	= DATAORIGIN+$0085
FDIV	= DATAORIGIN+$0089
RATIO	= DATAORIGIN+$008A
_RATIO	= DATAORIGIN+$008E

@VarData	= FREQ
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PROCESSTRACK					; PROCEDURE | KEEP

	jmp l_04C8

.local	READB						; PROCEDURE | INLINE

	.MACRO m@INLINE

; optimize OK (processtrack.inc), line = 11

	ldy #$00
	lda (_PTR),y
	sta EVENT

; optimize FAIL (0, processtrack.inc), line = 12

	inc _ADR
	sne
	inc _ADR+1

; optimize FAIL ('MEMBOUNDCHECK', processtrack.inc), line = 13

	jsr MEMBOUNDCHECK
	.ENDM
@exit
.endl

.local	READVARL					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000073  -------------------

    icl 'midfile/asms/readvar.asm'
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READ24						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000074  -------------------

    icl 'midfile/asms/read24bigendian.pas'
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTMIDI3					; PROCEDURE

; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 4

	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize FAIL ('m@INLINE', events.inc), line = 5

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl
	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize FAIL ('m@INLINE', events.inc), line = 6

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl
	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize OK (events.inc), line = 15

	lda EVENT
	jeq l_0503
	lda _EVENT
	and #$F0
	cmp #$90
	jne l_0503

; optimize OK (events.inc), line = 16

	lda _EVENT
	and #$0F
	tay
	lda MC6850.MC_BYTE
	sta adr.CHNVOLUME,y
l_0503
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTMIDI2					; PROCEDURE

; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 22

	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize FAIL ('m@INLINE', events.inc), line = 23

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl
	jsr MIDI_FIFO.FIFO_WRITEBYTE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTSYSEX					; PROCEDURE

; optimize FAIL ('READVARL', events.inc), line = 32

	jsr READVARL

; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 34

	jsr MIDI_FIFO.FIFO_WRITEBYTE

; --- WhileProlog
	jmp l_0522
l_0523

; optimize FAIL ('m@INLINE', events.inc), line = 40

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl

; optimize FAIL ('MIDI_FIFO.FIFO_WRITEBYTE', events.inc), line = 42

	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize FAIL (0, events.inc), line = 46

	dec _TMP
l_0522

; optimize OK (events.inc), line = 38

	lda _TMP
	jne l_0523
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EVENTMETA					; PROCEDURE

; optimize FAIL ('m@INLINE', events.inc), line = 58

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl

; optimize FAIL ('READVARL', events.inc), line = 59

	jsr READVARL

; optimize OK (events.inc), line = 61

	lda EVENT
	cmp #$2F
	jne l_054D

; optimize FAIL (0, events.inc), line = 63

	dec PLAYINGTRACKS

; optimize OK (events.inc), line = 64

	lda _STATUS
	ora #$40
	sta _STATUS
	jmp l_0565
l_054D

; optimize OK (events.inc), line = 66

	lda EVENT
	cmp #$51
	jne l_0577

; optimize FAIL ('READ24', events.inc), line = 68

	jsr READ24

; optimize OK (events.inc), line = 69

	lda _DELTA
	sta MS_PER_QNOTE
	lda _DELTA+1
	sta MS_PER_QNOTE+1
	lda _DELTA+2
	sta MS_PER_QNOTE+2
	lda _DELTA+3
	sta MS_PER_QNOTE+3

; optimize FAIL ('SETTEMPO', events.inc), line = 70

	jsr SETTEMPO
	jmp l_0587
l_0577

; optimize OK (events.inc), line = 73

	lda EVENT
	cmp #$58
	jne l_0599

; optimize FAIL ('m@INLINE', events.inc), line = 75

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl
	lda EVENT
	sta TACTNUM

; optimize FAIL ('m@INLINE', events.inc), line = 76

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl
	lda EVENT
	sta TACTDENUM

; optimize FAIL ('m@INLINE', events.inc), line = 77

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl
	lda EVENT
	sta TICKS_PER_QNOTE

; optimize FAIL ('m@INLINE', events.inc), line = 78

	.local +MAIN.MIDFILES.PROCESSTRACK.READB
	m@INLINE
	.endl
	lda EVENT
	sta TICKS_PER_32ND
	jmp l_05BF
l_0599

; --- WhileProlog
	jmp l_05C1
l_05C2

; optimize FAIL (0, events.inc), line = 85

	dec _TMP

; optimize FAIL (0, events.inc), line = 86

	inc _ADR
	sne
	inc _ADR+1

; optimize FAIL ('MEMBOUNDCHECK', events.inc), line = 87

	jsr MEMBOUNDCHECK
l_05C1

; optimize OK (events.inc), line = 83

	lda _TMP
	jne l_05C2
l_05BF
l_0587
l_0565
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_04C8

; -------------------  ASM Block 00000075  -------------------

 ldy _bank \ lda $100,y \ sta PORTB 
; --- RepeatUntilProlog
l_05D9

; optimize OK (processtrack.inc), line = 33

	lda _STATUS
	jmi l_05EF

; optimize FAIL ('READVARL', processtrack.inc), line = 35

	jsr READVARL

; optimize OK (processtrack.inc), line = 36

	lda _DELTA+3
	jmi l_0601
	ora _DELTA+2
	ora _DELTA+1
	ora _DELTA
	jeq l_0601

; optimize OK (processtrack.inc), line = 38

	lda _TRACKTIME
	add _DELTA
	sta _TRACKTIME
	lda _TRACKTIME+1
	adc _DELTA+1
	sta _TRACKTIME+1
	lda _TRACKTIME+2
	adc _DELTA+2
	sta _TRACKTIME+2
	lda _TRACKTIME+3
	adc _DELTA+3
	sta _TRACKTIME+3
	jmp b_05D9					; break
l_0601
	jmp l_0615
l_05EF

; optimize OK (processtrack.inc), line = 43

	lda _STATUS
	and #$7F
	sta _STATUS
l_0615

; optimize OK (processtrack.inc), line = 45

	ldy #$00
	lda (_PTR),y
	jpl l_0638

; optimize FAIL ('m@INLINE', processtrack.inc), line = 47

	.local READB
	m@INLINE
	.endl
	lda EVENT
	sta _EVENT
	jmp l_0649
l_0638

; optimize OK (processtrack.inc), line = 50

	lda _EVENT
	sta EVENT
l_0649

; optimize OK (processtrack.inc), line = 52

	lda #$BF
	cmp _EVENT
	jcc l_0661

; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 54

	jsr EVENTMIDI3
	jmp l_066C
l_0661
	lda #$DF
	cmp _EVENT
	jcc l_067E

; optimize FAIL ('EVENTMIDI2', processtrack.inc), line = 56

	jsr EVENTMIDI2
	jmp l_0689
l_067E
	lda #$EF
	cmp _EVENT
	jcc l_069B

; optimize FAIL ('EVENTMIDI3', processtrack.inc), line = 58

	jsr EVENTMIDI3
	jmp l_06A6
l_069B
	lda #$F7
	cmp _EVENT
	jcc l_06B8

; optimize FAIL ('EVENTSYSEX', processtrack.inc), line = 60

	jsr EVENTSYSEX
	jmp l_06C3
l_06B8
	lda _EVENT
	cmp #$FF
	jne l_06D5

; optimize FAIL ('EVENTMETA', processtrack.inc), line = 61

	jsr EVENTMETA
l_06D5
l_06C3
l_06A6
l_0689
l_066C

; optimize OK (processtrack.inc), line = 63

	lda _STATUS
	and #$40
	jeq l_05D9
b_05D9

; optimize OK (processtrack.inc), line = 65

	lda _STATUS
	ora #$80
	sta _STATUS

; ------------------------------------------------------------

EVENT	= $FF
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PROCESSMIDI					; PROCEDURE

; optimize FAIL ('MIDI_FIFO.FIFO_PUSHDIRECT2MC6850', processmidi.inc), line = 29

	jsr MIDI_FIFO.FIFO_PUSHDIRECT2MC6850

; optimize OK (processmidi.inc), line = 31

	lda _TIMERSTATUS
	jpl l_070F
	jmp @exit					; exit
l_070F

; optimize OK (processmidi.inc), line = 32

	lda CTRK
	cmp TOTALTRACKS
	jne l_0726

; optimize OK (processmidi.inc), line = 34

	lda #$01
	sta CTRK

; optimize OK (processmidi.inc), line = 35

	lda MIDTRACKS
	sta CURTRACKPTR
	lda MIDTRACKS+1
	sta CURTRACKPTR+1
	jmp l_0739
l_0726

; optimize FAIL (0, processmidi.inc), line = 39

	inc CTRK

; optimize OK (processmidi.inc), line = 40

	lda CURTRACKPTR
	add #$09
	sta CURTRACKPTR
	scc
	inc CURTRACKPTR+1
l_0739

; -------------------  ASM Block 00000076  -------------------

// if _status and f_stop=0 then
    ldy #0
    lda (curTrackPtr),y
    and #f_stop
    bne skipProcessTrack

// if _totalTicks>=_trackTime then ProcessTrack;
    ldy #7
    lda _totalTicks+3
    sub (curTrackPtr),y
    bne L4
    lda _totalTicks+2
    dey
    sub (curTrackPtr),y
    bne L1
    lda _totalTicks+1
    dey
    sub (curTrackPtr),y
    bne L1
    lda _totalTicks
    dey
    sub (curTrackPtr),y
  L1:
    beq L5
    bcs L3
    lda #$ff
    bne L5
  L3:
    lda #$01
    bne L5
  L4:
    bvc L5
    eor #$ff
    ora #$01
  L5:
    jmi skipProcessTrack

  // copy current track data to work registers
    ldy #sizeOf_TMIDTrack-1
  loop:
    lda (curTrackPtr),y
    sta _trkRegs,y
    dey
    bpl loop

  
; optimize FAIL ('PROCESSTRACK', processmidi.inc), line = 92

	jsr PROCESSTRACK

; -------------------  ASM Block 00000077  -------------------

// store work registers in track data
    ldy #sizeOf_TMIDTrack-1
  loop2:
    lda _trkRegs,y
    sta (curTrackPtr),y
    dey
    bpl loop2

  skipProcessTrack:
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITTIMER					; PROCEDURE

; optimize OK (MIDFILES), line = 84

	lda #$00
	sta _TOTALTICKS
	sta _TOTALTICKS+1
	sta _TOTALTICKS+2
	sta _TOTALTICKS+3

; optimize OK (MIDFILES), line = 85

	sta TEMPOSHIFT
	sta TEMPOSHIFT+1
	sta TEMPOSHIFT+2
	sta TEMPOSHIFT+3

; optimize OK (MIDFILES), line = 86

	lda #$01
	sta _TIMERSTATUS

; optimize OK (MIDFILES), line = 87

	lda TOTALTRACKS
	sta CTRK

; optimize OK (MIDFILES), line = 88

	sta PLAYINGTRACKS

; -------------------  ASM Block 00000078  -------------------

    sei
    mva <INT_TIMER VTIMR1
    mva >INT_TIMER VTIMR1+1
  // reset POKEY
    lda #$00
    ldy #$03
    sta AUDCTL
    sta AUDC1
    sty SKCTL
  // setup TIMER1
    sta AUDCTL
    mva 83 AUDF1
  // initialize IRQ for TIMER1
    lda irqens
    ora #$01
    sta irqens
    sta irqen
  // start timer strobe
    sta stimer

    cli  // enable IRQ
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NULLLOADPRCS					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize OK (MIDFILES), line = 121

	lda #$00
	sta OLDTIMERVEC
	sta OLDTIMERVEC+1

; optimize OK (MIDFILES), line = 122

	lda <NULLLOADPRCS
	sta LOADPROCESS
	lda >NULLLOADPRCS
	sta LOADPROCESS+1

; optimize OK (MIDFILES), line = 123

	lda #$80
	sta TICKDIV
	lda #$01
	sta TICKDIV+1

; optimize OK (MIDFILES), line = 124

	lda #$20
	sta MS_PER_QNOTE
	lda #$A1
	sta MS_PER_QNOTE+1
	lda #$07
	sta MS_PER_QNOTE+2
	lda #$00
	sta MS_PER_QNOTE+3

; optimize OK (MIDFILES), line = 125

	sta TOTALTRACKS

; optimize OK (MIDFILES), line = 126

	sta CTRK

; optimize OK (MIDFILES), line = 127

	lda #$80
	sta _TIMERSTATUS

; optimize OK (MIDFILES), line = 129

	lda #$04
	sta TACTNUM

; optimize OK (MIDFILES), line = 130

	sta TACTDENUM

; optimize OK (MIDFILES), line = 131

	lda #$18
	sta TICKS_PER_QNOTE

; optimize OK (MIDFILES), line = 132

	lda #$08
	sta TICKS_PER_32ND

	lda VTIMR1
	sta OLDTIMERVEC
	lda VTIMR1+1
	sta OLDTIMERVEC+1

	rts

; ------------------------------------------------------------

F_COUNTER	= $80
F_TICK	= $40
F_FLAGS	= $C0
F_RATIO	= $0F
F_SKIPDELTA	= $80
F_STOP	= $40
_TRKREGS	= $E0
MID_0	= $00
MID_1	= $01
ERR_UNSUPPORTED_FORMAT	= $64
ERR_NOT_ENOUGHT_MEMORY	= $65
ERR_NOT_A_MIDI_FILE	= $66
TAG_MTHD	= $6468544D
TAG_MTRK	= $6B72544D
SIZEOF_TMIDTRACK	= $09
CURTRACKPTR	= $DC
CTRK	= $DE
PLAYINGTRACKS	= $DF
_TOTALTICKS	= $F0
_SUBCNT	= $F4
_TIMERSTATUS	= $F5
_DELTA	= $F6
_TMP	= $F6
_STATUS	= $E0
_BANK	= $E1
_PTR	= $E2
_ADR	= $E2
_TRACKTIME	= $E4
_EVENT	= $E8
MIDDATA	= DATAORIGIN+$0037
adr.MIDTRACKS	= [DATAORIGIN+$0039] .array [1]
.var MIDTRACKS	= adr.MIDTRACKS .word
FORMAT	= DATAORIGIN+$003A
TOTALTRACKS	= DATAORIGIN+$003B
TICKDIV	= DATAORIGIN+$003C
MS_PER_QNOTE	= DATAORIGIN+$003E
FPS	= DATAORIGIN+$0042
FSD	= DATAORIGIN+$0043
TACTNUM	= DATAORIGIN+$0044
TACTDENUM	= DATAORIGIN+$0045
TICKS_PER_QNOTE	= DATAORIGIN+$0046
TICKS_PER_32ND	= DATAORIGIN+$0047
BPM	= DATAORIGIN+$0048
adr.CHNVOLUME	= [DATAORIGIN+$004A] .array [16]
.var CHNVOLUME	= adr.CHNVOLUME .word
OLDTIMERVEC	= DATAORIGIN+$005A
LOADPROCESS	= DATAORIGIN+$005C
TEMPOSHIFT	= DATAORIGIN+$005E

.endl							; UNIT MIDFILES

; ------------------------------------------------------------

.local	MISC						; UNIT

; ------------------------------------------------------------

adr.BANKS	= $0101
.var BANKS	= adr.BANKS .word
DETECTOS	= $FFF7

.endl							; UNIT MISC

.local	GETFILEEXT					; FUNCTION | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000089  -------------------

  icl 'asms/get_file_ext.a65'

@exit

; ------------------------------------------------------------

FN	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	REDUCEFILENAME					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000090  -------------------

  icl 'asms/reduce_filename.a65'

; ------------------------------------------------------------

INFN	= :EDX
OUTFN	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETDEVICESPEC					; FUNCTION | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000092  -------------------

  icl 'asms/getDeviceSpec.a65'

@exit

; ------------------------------------------------------------

FN	= :EDX
SPEC	= :ECX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	JOINSTRINGS					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000093  -------------------

  icl 'asms/joinStrings.a65'

; ------------------------------------------------------------

S1	= :EDX
S2	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETLN						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000094  -------------------

  icl 'asms/get_line.a65'

; ------------------------------------------------------------

CHN	= :EDX
BUF	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYNMI						; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000095  -------------------

  icl 'asms/nmi.a65'

	rti						; ret
.endl

.local	SETNMI						; PROCEDURE

; optimize OK (mynmi.inc), line = 14

	lda NMIVEC
	sta OLDNMIVEC
	lda NMIVEC+1
	sta OLDNMIVEC+1

; optimize OK (mynmi.inc), line = 15

	lda #$00
	sta NMIEN
	lda <MYNMI
	sta NMIVEC
	lda >MYNMI
	sta NMIVEC+1
	lda #$40
	sta NMIEN
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UNSETNMI					; PROCEDURE

; optimize OK (mynmi.inc), line = 20

	lda #$00
	sta NMIEN
	lda OLDNMIVEC
	sta NMIVEC
	lda OLDNMIVEC+1
	sta NMIVEC+1
	lda #$40
	sta NMIEN
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	KEYSCAN2ASC					; FUNCTION | ASSEMBLER
	sta KEYSCAN

; -------------------  ASM Block 00000096  -------------------

  icl 'asms/keyscan2asc.a65'

@exit

; ------------------------------------------------------------

KEYSCAN	= DATAORIGIN+$00E4
RESULT	= DATAORIGIN+$00E5

@VarData	= KEYSCAN
@VarDataSize	= 1

	rts						; ret
.endl

.local	SETCOLORS					; PROCEDURE

; optimize OK (helpers.inc), line = 25

	lda PLAYERSTATUS
	and #$01
	sta :STACKORIGIN+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$01
	beq @+
	dey
@
	sty :STACKORIGIN+9
	lda #$05
	sta :ecx
	lda :STACKORIGIN+9
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda <adr.COLORS
	add :eax
	sta P
	lda >adr.COLORS
	adc :eax+1
	sta P+1

; optimize OK (helpers.inc), line = 26

	lda P
	sta :bp2
	lda P+1
	sta :bp2+1
	ldy #$04
	mva:rpl (:bp2),y $D016,y-

; optimize OK (helpers.inc), line = 27

	lda P
	sta :bp2
	lda P+1
	sta :bp2+1
	ldy #$04
	mva:rpl (:bp2),y $02C4,y-

; ------------------------------------------------------------

P	= DATAORIGIN+$00E8

@VarData	= P
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INVERS						; PROCEDURE | ASSEMBLER | REGISTER
	sta CHARS

; -------------------  ASM Block 00000097  -------------------

  icl 'asms/invers.a65'

; ------------------------------------------------------------

CHARS	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTSPACES					; PROCEDURE | ASSEMBLER | REGISTER
	sta SPACES

; -------------------  ASM Block 00000098  -------------------

  icl 'asms/put_spaces.a65'

; ------------------------------------------------------------

SPACES	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTINTTEXT					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000099  -------------------

  icl 'asms/putinttext.a65'

; ------------------------------------------------------------

S	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTASCTEXT					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000100  -------------------

  icl 'asms/putasctext.a65'

; ------------------------------------------------------------

S	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTHEX						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000101  -------------------

  icl 'asms/puthex.a65'

; ------------------------------------------------------------

V	= DATAORIGIN+$00EA
N	= DATAORIGIN+$00EC

@VarData	= V
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTINT						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000102  -------------------

  icl 'asms/int2str.a65'

; ------------------------------------------------------------

VALUE	= DATAORIGIN+$00ED

@VarData	= VALUE
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RESET_MIDI					; PROCEDURE

; optimize OK (helpers.inc), line = 71

	lda #$00
	sta I

; --- WhileProlog
	jmp l_07ED
l_07EE

; optimize OK (helpers.inc), line = 74

	ldy I
	lda adr.GM_RESET,y
	sta MIDI_FIFO.FIFO_BYTE
	jsr MIDI_FIFO.FIFO_WRITEBYTE

; optimize FAIL (0, helpers.inc), line = 75

	inc I
l_07ED

; optimize OK (helpers.inc), line = 72

	lda I
	cmp #$06
	jcc l_07EE

; optimize FAIL ('MIDI_FIFO.FIFO_FLUSH', helpers.inc), line = 77

	jsr MIDI_FIFO.FIFO_FLUSH

; ------------------------------------------------------------

I	= DATAORIGIN+$00EF

@VarData	= I
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STOPMIDI					; PROCEDURE

; optimize OK (helpers.inc), line = 82

	lda MIDFILES._TIMERSTATUS
	ora #$80
	sta MIDFILES._TIMERSTATUS

; optimize OK (helpers.inc), line = 83

	lda #$00
	sta MIDFILES._TOTALTICKS
	sta MIDFILES._TOTALTICKS+1
	sta MIDFILES._TOTALTICKS+2
	sta MIDFILES._TOTALTICKS+3
	lda #$01
	sta MIDFILES._SUBCNT

; optimize OK (helpers.inc), line = 84

	sei
	mva MIDFILES.OLDTIMERVEC VTIMR1
	mva MIDFILES.OLDTIMERVEC+1 VTIMR1+1
	lda irqens
	and #$fe
	sta irqens
	sta irqen
	cli

; optimize FAIL ('RESET_MIDI', helpers.inc), line = 85

	jsr RESET_MIDI
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	HLINE						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000103  -------------------

  icl 'asms/hline.a65'

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARWORKAREA					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000104  -------------------

  icl 'asms/clear_workarea.a65'

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RESETMEMORYPTR					; PROCEDURE

; optimize OK (helpers.inc), line = 102

	lda TOTALXMS
	sta LAST_BANK

; optimize OK (helpers.inc), line = 103

	lda TOTALXMS
	jeq l_0840

; optimize OK (helpers.inc), line = 104

	lda #$00
	sta LAST_ADR
	lda #$40
	sta LAST_ADR+1
	jmp l_084E
l_0840

; optimize OK (helpers.inc), line = 106

	lda #$00
	sta LAST_ADR
	lda #$D8
	sta LAST_ADR+1
l_084E
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARSTATUS					; PROCEDURE

; optimize OK (helpers.inc), line = 115

	lda #$00
	ldy #$3B
	sta:rpl $39C8,y-

; optimize OK (helpers.inc), line = 116

	lda #$C8
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$02
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize FAIL ('STATUSLOOP', helpers.inc), line = 117

	jsr STATUSLOOP

; optimize OK (helpers.inc), line = 118

	lda #$DC
	sta SCRADR
	lda #$39
	sta SCRADR+1
	jsr HLINE

; optimize OK (helpers.inc), line = 119

	lda #$10
	sta :ecx
	lda TOTALXMS
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add #$23
	sta MEMAVAILABLE
	lda :eax+1
	adc #$00
	sta MEMAVAILABLE+1

; optimize OK (helpers.inc), line = 120

	cmp #$27
	bne @+
	lda MEMAVAILABLE
	cmp #$10
@
	jcs l_0885
	lda #$F9
	sta SCRADR
	lda #$39
	sta SCRADR+1
l_0885

; optimize OK (helpers.inc), line = 121

	lda MEMAVAILABLE+1
	cmp #$03
	bne @+
	lda MEMAVAILABLE
	cmp #$E8
@
	jcs l_089D
	lda #$FA
	sta SCRADR
	lda #$39
	sta SCRADR+1
l_089D

; optimize OK (helpers.inc), line = 122

	lda MEMAVAILABLE+1
	jne l_08B5
	lda MEMAVAILABLE
	cmp #$64
	jcs l_08B5
	lda #$FB
	sta SCRADR
	lda #$39
	sta SCRADR+1
l_08B5

; optimize OK (helpers.inc), line = 123

	lda MEMAVAILABLE+1
	jne l_08CD
	lda MEMAVAILABLE
	cmp #$0A
	jcs l_08CD
	lda #$FC
	sta SCRADR
	lda #$39
	sta SCRADR+1
l_08CD

; optimize OK (helpers.inc), line = 124

	lda SCRADR
	sta OSCRADR
	lda SCRADR+1
	sta OSCRADR+1

; optimize OK (helpers.inc), line = 125

	lda #$09
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT
	lda MEMAVAILABLE
	sta PUTINT.VALUE
	lda MEMAVAILABLE+1
	sta PUTINT.VALUE+1
	jsr PUTINT
	lda #$0F
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (helpers.inc), line = 126

	lda adr.FN
	sta L

; optimize OK (helpers.inc), line = 127

	jne l_08F5
	jmp @exit					; exit
l_08F5

; optimize OK (helpers.inc), line = 128

	lda L
	cmp #$11
	jcc l_090A
	lda #$10
	sta adr.FN+$00
l_090A

; optimize OK (helpers.inc), line = 129

	lda OSCRADR
	ldy OSCRADR+1
	sub L
	scs
	dey
	sub #$01
	sta SCRADR
	scs
	dey
	sty SCRADR+1
	lda FN
	sta PUTASCTEXT.S
	lda FN+1
	sta PUTASCTEXT.S+1
	jsr PUTASCTEXT

; ------------------------------------------------------------

L	= DATAORIGIN+$00F0
OSCRADR	= DATAORIGIN+$00F1
MEMAVAILABLE	= DATAORIGIN+$00F3

@VarData	= L
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARUVMETERS					; PROCEDURE

; optimize OK (helpers.inc), line = 134

	lda PLAYERSTATUS
	ldy #1
	and #$02
	beq @+
	dey
@
	tya
	ora FIRSTTIME
	jeq l_0944

; optimize OK (helpers.inc), line = 136

	lda #$00
	sta CHN

; --- RepeatUntilProlog
l_094A

; optimize OK (helpers.inc), line = 138

	lda CHN
	asl @
	tay
	lda adr.CHANNELSCRADR,y
	sta SCRADR
	lda adr.CHANNELSCRADR+1,y
	sta SCRADR+1

; -------------------  ASM Block 00000105  -------------------

        ldy #3
        lda #$41
      VClr:
        sta (scradr),y
        dey
        bpl VClr
      
; optimize FAIL (0, helpers.inc), line = 148

	inc CHN

; optimize OK (helpers.inc), line = 149

	lda CHN
	cmp #$10
	jne l_094A
l_0944
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EXIT2DOS					; PROCEDURE

; optimize FAIL ('STOPMIDI', helpers.inc), line = 155

	jsr STOPMIDI

; optimize OK (helpers.inc), line = 156

	lda #$00
	jsr CIO.CLS
	lda #$00
	sta CIO.OPN.CHN
	lda #$0C
	sta CIO.OPN.AX1
	lda #$00
	sta CIO.OPN.AX2
	lda #$13
	sta CIO.OPN.DEVICE
	lda #$80
	sta CIO.OPN.DEVICE+1
	jsr CIO.OPN
	lda #$01
	sta SOUNDR
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSLOOP					; PROCEDURE

; optimize OK (status.inc), line = 11

	lda #$CE
	sta SCRADR
	lda #$39
	sta SCRADR+1

; optimize OK (status.inc), line = 12

	lda PLAYERSTATUS
	and #$0C
	lsr @
	lsr @
	sta V

; optimize OK (status.inc), line = 13

	asl @
	tay
	lda adr.SLOOP,y
	sta PUTINTTEXT.S
	lda adr.SLOOP+1,y
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; ------------------------------------------------------------

adr.SLOOP	= CODEORIGIN+$0110
.var SLOOP	= adr.SLOOP .word
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSPLAYING					; PROCEDURE

; optimize OK (status.inc), line = 18

	lda MIDFILES.TOTALTRACKS
	jeq l_09A7

; optimize OK (status.inc), line = 20

	lda #$C8
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$27
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (status.inc), line = 21

	lda #$DD
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$2E
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (status.inc), line = 22

	lda ISSTOPPED
	jeq l_09C0

; optimize FAIL ('MIDFILES.INITTIMER', status.inc), line = 24

	jsr MIDFILES.INITTIMER

; optimize OK (status.inc), line = 25

	lda #$00
	sta ISSTOPPED
	jmp l_09CF
l_09C0

; optimize OK (status.inc), line = 28

	lda MIDFILES._TIMERSTATUS
	and #$7F
	sta MIDFILES._TIMERSTATUS
l_09CF
	jmp l_09E5
l_09A7

; optimize OK (status.inc), line = 32

	lda #$C8
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$02
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (status.inc), line = 33

	lda #$DD
	sta SCRADR
	lda #$39
	sta SCRADR+1
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT
l_09E5
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSPAUSE					; PROCEDURE

; optimize OK (status.inc), line = 39

	lda ISSTOPPED
	jeq l_0A01
	jmp @exit					; exit
l_0A01

; optimize OK (status.inc), line = 40

	lda #$C8
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$44
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (status.inc), line = 41

	lda #$DD
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$4B
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (status.inc), line = 42

	lda MIDFILES._TIMERSTATUS
	ora #$80
	sta MIDFILES._TIMERSTATUS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSSTOPPED					; PROCEDURE

; optimize OK (status.inc), line = 47

	lda MIDFILES.TOTALTRACKS
	jne l_0A30
	jmp @exit					; exit
l_0A30

; optimize OK (status.inc), line = 48

	lda ISSTOPPED
	jeq l_0A3F
	jmp @exit					; exit
l_0A3F

; optimize OK (status.inc), line = 49

	lda #$01
	sta ISSTOPPED

; optimize OK (status.inc), line = 50

	lda #$C8
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$56
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (status.inc), line = 51

	lda #$DD
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$5D
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize FAIL ('STOPMIDI', status.inc), line = 52

	jsr STOPMIDI

; optimize OK (status.inc), line = 53

	lda #$00
	sta SYSTEM.MOVE_0153.SOURCE
	lda #$2C
	sta SYSTEM.MOVE_0153.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_0153.DEST
	lda #$2E
	sta SYSTEM.MOVE_0153.DEST+1
	lda #$00
	sta SYSTEM.MOVE_0153.COUNT
	lda #$02
	sta SYSTEM.MOVE_0153.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0153
	m@INLINE
	.endl

; optimize OK (status.inc), line = 54

	lda #$00
	sta CHN

; optimize FAIL ('CLEARUVMETERS', status.inc), line = 55

	jsr CLEARUVMETERS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSLOADING					; PROCEDURE

; optimize OK (status.inc), line = 60

	lda #$DD
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$68
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSREADDIRECTORY				; PROCEDURE

; optimize OK (status.inc), line = 65

	lda #$DD
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$73
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STATUSERROR					; PROCEDURE
	sta ERR

; optimize OK (status.inc), line = 75

	lda #$FF
	sta KEYB

; optimize OK (status.inc), line = 76

	lda #$DC
	sta SCRADR
	lda #$39
	sta SCRADR+1

; optimize OK (status.inc), line = 77

	lda ERR
	sta @CASETMP_0004
	cmp #$64
	jne l_0A87
@

; optimize OK (status.inc), line = 78

	lda #$88
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

	jmp a_0004
l_0A87
	cmp #$65
	jne l_0A92
@

; optimize OK (status.inc), line = 79

	lda #$9E
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

	jmp a_0004
l_0A92
	cmp #$66
	jne l_0A9D
@

; optimize OK (status.inc), line = 80

	lda #$B4
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

	jmp a_0004
l_0A9D

; optimize OK (status.inc), line = 82

	lda #$80
	sta PUTTEXTINVERT

; optimize OK (status.inc), line = 83

	lda #$C7
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT
	lda ERR
	sta PUTINT.VALUE
	lda #$00
	sta PUTINT.VALUE+1
	jsr PUTINT
	ldy SCRADR+1
	sty :bp+1
	ldy SCRADR
	lda #$CE
	sta (:bp),y

; optimize OK (status.inc), line = 84

	lda #$00
	sta PUTTEXTINVERT
a_0004

; --- WhileProlog
l_0ABB

; optimize OK (status.inc), line = 86

	lda KEYB
	cmp #$FF
	jeq l_0ABB

; optimize FAIL ('CLEARSTATUS', status.inc), line = 87

	jsr CLEARSTATUS

; ------------------------------------------------------------

ERR	= DATAORIGIN+$00F5
@CASETMP_0004	= DATAORIGIN+$00F6

@VarData	= ERR
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADSONG					; FUNCTION

	jmp l_0ACC

.local	LOADPRC						; PROCEDURE
	sta V

; optimize OK (load.inc), line = 10

	ldy THI
	lda adr.TH,y
	sta $39DC

; optimize FAIL (0, load.inc), line = 11

	inc THI
	lda THI
	cmp #$04
	jne l_0AED
	lda #$00
	sta THI
l_0AED

; optimize OK (load.inc), line = 12

	lda V
	jeq l_0B06

; optimize OK (load.inc), line = 14

	lda #$80
	sta PUTTEXTINVERT

; optimize OK (load.inc), line = 15

	lda #$E6
	sta SCRADR
	lda #$39
	sta SCRADR+1

; optimize OK (load.inc), line = 16

	lda V
	sub #$01
	sta PUTINT.VALUE
	lda #$00
	sbc #$00
	sta PUTINT.VALUE+1
	jsr PUTINT
	ldy SCRADR+1
	sty :bp+1
	ldy SCRADR
	lda #$8F
	sta (:bp),y
	inc SCRADR
	sne
	inc SCRADR+1

; optimize OK (load.inc), line = 17

	lda MIDFILES.TOTALTRACKS
	sta PUTINT.VALUE
	lda #$00
	sta PUTINT.VALUE+1
	jsr PUTINT

; optimize OK (load.inc), line = 18

	ldy SCRADR+1
	sty :bp+1
	ldy SCRADR
	lda #$CE
	sta (:bp),y

; optimize OK (load.inc), line = 19

	lda #$00
	sta PUTTEXTINVERT
l_0B06

; ------------------------------------------------------------

V	= DATAORIGIN+$00FB

@VarData	= V
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0ACC

; optimize FAIL ('CLEARSTATUS', load.inc), line = 24

	jsr CLEARSTATUS

; optimize FAIL ('STATUSLOADING', load.inc), line = 25

	jsr STATUSLOADING

; optimize OK (load.inc), line = 26

	lda <LOADPRC
	sta MIDFILES.LOADPROCESS
	lda >LOADPRC
	sta MIDFILES.LOADPROCESS+1
	lda #$00
	sta THI

; optimize OK (load.inc), line = 27

	lda FILENAME
	sta MIDFILES.LOADMID.FN
	lda FILENAME+1
	sta MIDFILES.LOADMID.FN+1
	jsr MIDFILES.LOADMID
	lda MIDFILES.LOADMID.RESULT
	sta RESULT

; optimize FAIL ('CLEARSTATUS', load.inc), line = 28

	jsr CLEARSTATUS

; optimize OK (load.inc), line = 29

	lda RESULT
	and #$FC
	jeq l_0B54

; optimize OK (load.inc), line = 30

	lda #$00
	sta MIDFILES.TOTALTRACKS
	jmp l_0B62
l_0B54

; optimize OK (load.inc), line = 32

	lda #$00
	sta SYSTEM.MOVE_0153.SOURCE
	lda #$2E
	sta SYSTEM.MOVE_0153.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_0153.DEST
	lda #$2C
	sta SYSTEM.MOVE_0153.DEST+1
	lda #$00
	sta SYSTEM.MOVE_0153.COUNT
	lda #$02
	sta SYSTEM.MOVE_0153.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0153
	m@INLINE
	.endl
l_0B62
@exit

; ------------------------------------------------------------

FILENAME	= DATAORIGIN+$00F7
RESULT	= DATAORIGIN+$00F9
adr.TH	= CODEORIGIN+$0118
.var TH	= adr.TH .word
THI	= DATAORIGIN+$00FA

@VarData	= FILENAME
@VarDataSize	= 3

	rts						; ret
.endl

.local	GETENTRY					; FUNCTION | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000106  -------------------

  icl 'asms/list_getEntry.a65'

@exit

; ------------------------------------------------------------

FN	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	GETENTRYSETS					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000107  -------------------

  icl 'asms/list_getEntrySets.a65'

; ------------------------------------------------------------

PTR	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETENTRYSETS					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000108  -------------------

  icl 'asms/list_setEntrySets.a65'

; ------------------------------------------------------------

PTR	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NEXTENTRY					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000109  -------------------

  icl 'asms/list_nextEntry.a65'

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$00FC
	rts						; ret
.endl

.local	GOTONENTRY					; PROCEDURE | ASSEMBLER
	sta NENTRY

; -------------------  ASM Block 00000110  -------------------

  icl 'asms/list_gotoNEntry.a65'

; ------------------------------------------------------------

NENTRY	= DATAORIGIN+$00FD

@VarData	= NENTRY
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ADDTOLIST					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000111  -------------------

  icl 'asms/list_addToList.a65'

; ------------------------------------------------------------

ENTRY	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARLIST					; PROCEDURE

; optimize FAIL ('RESETMEMORYPTR', list_asm.inc), line = 39

	jsr RESETMEMORYPTR

; optimize OK (list_asm.inc), line = 40

	lda #$00
	sta PLS
	lda #$20
	sta PLS+1

; optimize OK (list_asm.inc), line = 41

	lda #$00
	sta TOTALFILES
	sta CURFILE
	sta YFILE
	sta SHFILE

; optimize OK (list_asm.inc), line = 42

	sta CHN

; --- WhileProlog
	jmp l_0B8B
l_0B8C

; optimize OK (list_asm.inc), line = 45

	lda CHN
	asl @
	tay
	lda adr.PLAYLISTSCRADR,y
	sta SCRADR
	lda adr.PLAYLISTSCRADR+1,y
	sta SCRADR+1

; optimize OK (list_asm.inc), line = 46

	lda #$20
	jsr PUTSPACES

; optimize FAIL (0, list_asm.inc), line = 47

	inc CHN
l_0B8B

; optimize OK (list_asm.inc), line = 43

	lda CHN
	cmp #$10
	jcc l_0B8C

; optimize OK (list_asm.inc), line = 49

	lda PLS
	sta SYSTEM.FILLCHAR_0151.A
	lda PLS+1
	sta SYSTEM.FILLCHAR_0151.A+1
	lda #$00
	sta SYSTEM.FILLCHAR_0151.COUNT
	lda #$0C
	sta SYSTEM.FILLCHAR_0151.COUNT+1
	lda #$9B
	sta SYSTEM.FILLCHAR_0151.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_0151
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILESELECT					; FUNCTION

; optimize OK (fileselect.inc), line = 10

	lda #$F8
	sta SCRADR
	lda #$36
	sta SCRADR+1
	jsr HLINE

; optimize OK (fileselect.inc), line = 11

	lda #$14
	sta SCRADR
	lda #$37
	sta SCRADR+1
	lda #$D5
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize FAIL ('CLEARLIST', fileselect.inc), line = 13

	jsr CLEARLIST

; optimize OK (fileselect.inc), line = 14

	lda #$FF
	sta MIDFILES._ADR
	sta MIDFILES._ADR+1
	lda #$FE
	sta MIDFILES._BANK
	lda PATH
	sta ADDTOLIST.ENTRY
	lda PATH+1
	sta ADDTOLIST.ENTRY+1
	jsr ADDTOLIST

; optimize FAIL ('STATUSREADDIRECTORY', fileselect.inc), line = 15

	jsr STATUSREADDIRECTORY

; optimize OK (fileselect.inc), line = 17

	lda #$02
	sta CIO.OPN.CHN
	lda #$06
	sta CIO.OPN.AX1
	lda #$00
	sta CIO.OPN.AX2
	lda PATH
	sta CIO.OPN.DEVICE
	lda PATH+1
	sta CIO.OPN.DEVICE+1
	jsr CIO.OPN

; --- WhileProlog
	jmp l_0BCF
l_0BD0

; optimize OK (fileselect.inc), line = 20

	lda #$FC
	sta MIDFILES._BANK

; optimize OK (fileselect.inc), line = 21

	lda #$02
	sta GETLN.CHN
	lda DENTRY
	sta GETLN.BUF
	lda DENTRY+1
	sta GETLN.BUF+1
	jsr GETLN

; optimize OK (fileselect.inc), line = 22

	lda adr.DENTRY+$01
	cmp #$30
	jcc l_0BEB
	jmp b_0BD0					; break
l_0BEB

; optimize OK (fileselect.inc), line = 23

	lda DENTRY
	sta REDUCEFILENAME.INFN
	lda DENTRY+1
	sta REDUCEFILENAME.INFN+1
	lda OUTSTR
	sta REDUCEFILENAME.OUTFN
	lda OUTSTR+1
	sta REDUCEFILENAME.OUTFN+1
	jsr REDUCEFILENAME

; optimize OK (fileselect.inc), line = 24

	lda OUTSTR
	sta GETFILEEXT.FN
	lda OUTSTR+1
	sta GETFILEEXT.FN+1
	jsr GETFILEEXT
	lda GETFILEEXT.RESULT
	sta EXT
	lda GETFILEEXT.RESULT+1
	sta EXT+1
	lda GETFILEEXT.RESULT+2
	sta EXT+2
	lda GETFILEEXT.RESULT+3
	sta EXT+3

; optimize OK (fileselect.inc), line = 25

	lda adr.DENTRY+$02
	cmp #$3A
	jne l_0C0C
	jmp c_0BD0					; continue
l_0C0C

; optimize OK (fileselect.inc), line = 26

	lda adr.DENTRY+$12
	cmp #$3E
	jne l_0C22
	jmp c_0BD0					; continue
l_0C22

; optimize OK (fileselect.inc), line = 27

	lda EXT+3
	cmp #$A4
	bne @+
	lda EXT+2
	cmp #$A9
	bne @+
	lda EXT+1
	cmp #$B2
	bne @+
	lda EXT
@
	jne l_0C35
	jmp c_0BD0					; continue
l_0C35

; optimize OK (fileselect.inc), line = 28

	lda EXT+3
	cmp #$4D
	bne @+
	lda EXT+2
	cmp #$49
	bne @+
	lda EXT+1
	cmp #$44
	bne @+
	lda EXT
@
	jne l_0C48
	lda #$FF
	sta MIDFILES._BANK
l_0C48

; optimize OK (fileselect.inc), line = 31

	lda OUTSTR
	sta ADDTOLIST.ENTRY
	lda OUTSTR+1
	sta ADDTOLIST.ENTRY+1
	jsr ADDTOLIST
c_0BD0
l_0BCF

; optimize OK (fileselect.inc), line = 18

	lda SYSTEM.IORESULT
	cmp #$01
	jeq l_0BD0
b_0BD0

; optimize OK (fileselect.inc), line = 33

	lda SYSTEM.IORESULT
	sta RESULT

; optimize OK (fileselect.inc), line = 34

	lda #$02
	jsr CIO.CLS
@exit

; ------------------------------------------------------------

PATH	= DATAORIGIN+$00FE
RESULT	= DATAORIGIN+$0100
CIO_CHN	= $02
adr.DENTRY	= [DATAORIGIN+$0101] .array [21]
.var DENTRY	= adr.DENTRY .word
EXT	= DATAORIGIN+$0116

@VarData	= PATH
@VarDataSize	= 27

	rts						; ret
.endl

.local	INPUTLINE					; FUNCTION

	jmp l_0C6A

.local	SHOWLINE					; PROCEDURE

; optimize OK (inputline.inc), line = 10

	mwy LN :bp2
	ldy #$00
	lda POS
	sta (:bp2),y

; optimize OK (inputline.inc), line = 11

	lda OSCRADR
	sta SCRADR
	lda OSCRADR+1
	sta SCRADR+1

; optimize OK (inputline.inc), line = 12

	lda #$20
	jsr PUTSPACES
	inc SCRADR
	sne
	inc SCRADR+1

; optimize OK (inputline.inc), line = 13

	lda LN
	sta PUTASCTEXT.S
	lda LN+1
	sta PUTASCTEXT.S+1
	jsr PUTASCTEXT
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0C6A

; optimize OK (inputline.inc), line = 17

	ldy LN+1
	sty :bp+1
	ldy LN
	lda (:bp),y
	sta POS

; optimize OK (inputline.inc), line = 18

	lda #$7F
	sub POS
	sta SYSTEM.FILLCHAR_0152.COUNT
	lda #$00
	sbc #$00
	sta SYSTEM.FILLCHAR_0152.COUNT+1
	lda POS
	add #$01
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda LN
	add :STACKORIGIN+11
	sta SYSTEM.FILLCHAR_0152.X
	lda LN+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta SYSTEM.FILLCHAR_0152.X+1
	lda #$9B
	sta SYSTEM.FILLCHAR_0152.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_0152
	m@INLINE
	.endl

; optimize OK (inputline.inc), line = 19

	lda #$FF
	sta KEYB
	lda #$01
	sta VCRS

; optimize OK (inputline.inc), line = 20

	lda SCRADR
	sta OSCRADR
	lda SCRADR+1
	sta OSCRADR+1
	jsr SHOWLINE
	lda _TM
	sta OTM

; --- RepeatUntilProlog
l_0CAB

; optimize OK (inputline.inc), line = 22

	lda _TM
	sub OTM
	cmp #$0A
	jcc l_0CC3
	jeq l_0CC3

; optimize OK (inputline.inc), line = 24

	lda _TM
	sta OTM

; optimize OK (inputline.inc), line = 25

	lda VCRS
	jeq l_0CD6
	lda #$01
	jsr INVERS
l_0CD6

; optimize OK (inputline.inc), line = 26

	ldy #1
	lda VCRS
	beq @+
	dey
@
	tya
	sta VCRS
l_0CC3

; optimize OK (inputline.inc), line = 28

	lda KEYB
	cmp #$FF
	jne l_0CF8
	jmp c_0CAB					; continue
l_0CF8

; optimize OK (inputline.inc), line = 30

	lda KEYB
	cmp #$1C
	jne l_0D0D
	lda #$00
	sta RESULT
	jmp @exit					; exit
l_0D0D

; optimize OK (inputline.inc), line = 31

	lda POS
	jeq l_0D26

; optimize OK (inputline.inc), line = 33

	lda KEYB
	cmp #$0C
	jne l_0D39
	lda #$01
	sta RESULT
	jmp @exit					; exit
l_0D39

; optimize OK (inputline.inc), line = 34

	lda KEYB
	cmp #$34
	jne l_0D52

; optimize OK (inputline.inc), line = 36

	mwy LN :bp2
	ldy POS
	lda #$9B
	sta (:bp2),y

; optimize FAIL (0, inputline.inc), line = 37

	dec POS
l_0D52
l_0D26

; optimize OK (inputline.inc), line = 40

	lda POS
	cmp #$1E
	jcs l_0D74

; optimize OK (inputline.inc), line = 42

	lda KEYB
	jsr KEYSCAN2ASC
	lda KEYSCAN2ASC.RESULT
	sta CH

; optimize OK (inputline.inc), line = 43

	jeq l_0D8E

; optimize FAIL (0, inputline.inc), line = 45

	inc POS

; optimize OK (inputline.inc), line = 46

	mwy LN :bp2
	ldy POS
	sta (:bp2),y
l_0D8E
l_0D74

; optimize FAIL ('SHOWLINE', inputline.inc), line = 49

	jsr SHOWLINE

; optimize OK (inputline.inc), line = 50

	lda #$FF
	sta KEYB

; optimize OK (inputline.inc), line = 51

	lda #$00
	bne *+5
c_0CAB
	jmp l_0CAB
@exit

; ------------------------------------------------------------

LN	= DATAORIGIN+$011A
RESULT	= DATAORIGIN+$011C
POS	= DATAORIGIN+$011D
CH	= DATAORIGIN+$011E
OSCRADR	= DATAORIGIN+$011F
OTM	= DATAORIGIN+$0121
VCRS	= DATAORIGIN+$0122

@VarData	= LN
@VarDataSize	= 8

	rts						; ret
.endl

.local	DRAWLISTSELECTION				; PROCEDURE

; optimize OK (list.inc), line = 7

	lda YFILE
	asl @
	tay
	lda adr.PLAYLISTSCRADR,y
	sta SCRADR
	lda adr.PLAYLISTSCRADR+1,y
	sta SCRADR+1
	lda #$20
	jsr INVERS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWLIST					; PROCEDURE

; optimize OK (list.inc), line = 16

	lda SHFILE
	jsr GOTONENTRY
	lda #$00
	sta CHN

; --- WhileProlog
	jmp l_0DC6
l_0DC7

; optimize OK (list.inc), line = 19

	lda CHN
	asl @
	tay
	lda adr.PLAYLISTSCRADR,y
	sta SCRADR
	lda adr.PLAYLISTSCRADR+1,y
	sta SCRADR+1
	lda #$20
	jsr PUTSPACES

; optimize OK (list.inc), line = 20

	lda FN
	sta GETENTRY.FN
	lda FN+1
	sta GETENTRY.FN+1
	jsr GETENTRY
	lda GETENTRY.RESULT
	jeq l_0DDD

; optimize OK (list.inc), line = 22

	lda <P_BANK
	sta GETENTRYSETS.PTR
	lda >P_BANK
	sta GETENTRYSETS.PTR+1
	jsr GETENTRYSETS

; optimize OK (list.inc), line = 23

	lda #$00
	sta V

; optimize OK (list.inc), line = 25

	lda P_BANK
	cmp #$FE
	jne l_0DF6
	lda #$1E
	sta V
l_0DF6

; optimize OK (list.inc), line = 26

	lda P_BANK
	cmp #$FF
	jne l_0E0F
	lda #$5A
	sta V
l_0E0F

; optimize OK (list.inc), line = 27

	lda P_BANK
	cmp #$40
	jcs l_0E28

; optimize OK (list.inc), line = 28

	lda P_ADR+1
	ora P_ADR
	jne l_0E3A

; optimize OK (list.inc), line = 29

	lda #$4D
	sta V
	jmp l_0E48
l_0E3A

; optimize OK (list.inc), line = 31

	lda #$5A
	sta V
l_0E48
l_0E28

; optimize OK (list.inc), line = 33

	ldy SCRADR+1
	sty :bp+1
	ldy SCRADR
	lda V
	sta (:bp),y
	tya
	add #$02
	sta SCRADR
	scc
	inc SCRADR+1

; optimize OK (list.inc), line = 35

	lda adr.FN+$00
	cmp #$1F
	jcc l_0E68
	lda #$1E
	sta adr.FN+$00
l_0E68

; optimize OK (list.inc), line = 36

	lda FN
	sta PUTASCTEXT.S
	lda FN+1
	sta PUTASCTEXT.S+1
	jsr PUTASCTEXT
	jmp l_0E7C
l_0DDD
	jmp b_0DC7					; break
l_0E7C

; optimize FAIL (0, list.inc), line = 40

	inc CHN

; optimize FAIL ('NEXTENTRY', list.inc), line = 41

	jsr NEXTENTRY
	mva NEXTENTRY.RESULT :STACKORIGIN+1,x
l_0DC6

; optimize OK (list.inc), line = 17

	lda CHN
	cmp #$10
	jcc l_0DC7
b_0DC7

; ------------------------------------------------------------

P_BANK	= DATAORIGIN+$0126
P_ADR	= DATAORIGIN+$0127

@VarData	= P_BANK
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHANGEDEVICE					; FUNCTION

; optimize OK (list.inc), line = 47

	lda YFILE
	asl @
	tay
	lda adr.PLAYLISTSCRADR,y
	sta SCRADR
	lda adr.PLAYLISTSCRADR+1,y
	sta SCRADR+1

; -------------------  ASM Block 00000112  -------------------

    lda firstTime
    bne goFileSelector
  
; optimize OK (list.inc), line = 53

	lda OUTSTR
	sta INPUTLINE.LN
	lda OUTSTR+1
	sta INPUTLINE.LN+1
	jsr INPUTLINE
	mva INPUTLINE.RESULT :STACKORIGIN+1,x

; -------------------  ASM Block 00000113  -------------------

    lda MAIN.INPUTLINE.Result
    bne goFileSelector
    jmp skip
  goFileSelector:
  
; optimize OK (list.inc), line = 62

	lda OUTSTR
	sta @move.src
	lda OUTSTR+1
	sta @move.src+1
	@moveSTRING FN #128

; optimize OK (list.inc), line = 63

	lda OUTSTR
	sta GETDEVICESPEC.FN
	lda OUTSTR+1
	sta GETDEVICESPEC.FN+1
	lda CURDEV
	sta GETDEVICESPEC.SPEC
	lda CURDEV+1
	sta GETDEVICESPEC.SPEC+1
	jsr GETDEVICESPEC
	lda GETDEVICESPEC.RESULT
	jne l_0EAF
	lda CURDEV
	sta JOINSTRINGS.S1
	lda CURDEV+1
	sta JOINSTRINGS.S1+1
	lda FN
	sta JOINSTRINGS.S2
	lda FN+1
	sta JOINSTRINGS.S2+1
	jsr JOINSTRINGS
l_0EAF

; optimize OK (list.inc), line = 64

	lda OUTSTR
	sta FILESELECT.PATH
	lda OUTSTR+1
	sta FILESELECT.PATH+1
	jsr FILESELECT
	lda FILESELECT.RESULT
	sta RESULT

; -------------------  ASM Block 00000114  -------------------

    skip:
  
; optimize OK (list.inc), line = 69

	lda #$00
	sta FIRSTTIME
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0129
	rts						; ret
.endl

.local	CHOICELISTFILE					; PROCEDURE

; optimize OK (list.inc), line = 77

	lda #$FF
	sta CURPLAY

; optimize FAIL ('STATUSSTOPPED', list.inc), line = 78

	jsr STATUSSTOPPED

; optimize OK (list.inc), line = 79

	lda CURFILE
	jsr GOTONENTRY

; optimize OK (list.inc), line = 80

	lda FN
	sta GETENTRY.FN
	lda FN+1
	sta GETENTRY.FN+1
	jsr GETENTRY
	lda GETENTRY.RESULT
	jne l_0EDD
	jmp @exit					; exit
l_0EDD

; optimize OK (list.inc), line = 81

	lda <P_BANK
	sta GETENTRYSETS.PTR
	lda >P_BANK
	sta GETENTRYSETS.PTR+1
	jsr GETENTRYSETS

; optimize OK (list.inc), line = 83

	lda FN
	sta GETDEVICESPEC.FN
	lda FN+1
	sta GETDEVICESPEC.FN+1
	lda DEV
	sta GETDEVICESPEC.SPEC
	lda DEV+1
	sta GETDEVICESPEC.SPEC+1
	jsr GETDEVICESPEC
	lda GETDEVICESPEC.RESULT
	jne l_0EF3

; optimize OK (list.inc), line = 84

	lda CURDEV
	sta JOINSTRINGS.S1
	lda CURDEV+1
	sta JOINSTRINGS.S1+1
	lda FN
	sta JOINSTRINGS.S2
	lda FN+1
	sta JOINSTRINGS.S2+1
	jsr JOINSTRINGS
	jmp l_0F02
l_0EF3

; optimize OK (list.inc), line = 86

	lda FN
	sta @move.src
	lda FN+1
	sta @move.src+1
	@moveSTRING OUTSTR #128
l_0F02

; optimize OK (list.inc), line = 89

	lda P_BANK
	cmp #$FE
	jne l_0F16
	jsr CHANGEDEVICE
	lda CHANGEDEVICE.RESULT
	sta SYSTEM.IORESULT
l_0F16

; optimize OK (list.inc), line = 90

	lda P_BANK
	cmp #$FF
	jne l_0F2F

; optimize OK (list.inc), line = 92

	lda LAST_BANK
	sta MIDFILES._BANK

; optimize OK (list.inc), line = 93

	lda LAST_ADR
	sta MIDFILES._ADR
	lda LAST_ADR+1
	sta MIDFILES._ADR+1

; optimize OK (list.inc), line = 94

	lda CURFILE
	sta CURPLAY

; optimize OK (list.inc), line = 95

	lda OUTSTR
	sta LOADSONG.FILENAME
	lda OUTSTR+1
	sta LOADSONG.FILENAME+1
	jsr LOADSONG
	lda LOADSONG.RESULT
	sta SYSTEM.IORESULT
l_0F2F

; optimize OK (list.inc), line = 98

	lda #$FF
	sta KEYB

; optimize FAIL ('CLEARSTATUS', list.inc), line = 99

	jsr CLEARSTATUS

; optimize FAIL ('SHOWLIST', list.inc), line = 100

	jsr SHOWLIST

; optimize FAIL ('DRAWLISTSELECTION', list.inc), line = 101

	jsr DRAWLISTSELECTION

; optimize OK (list.inc), line = 102

	lda SYSTEM.IORESULT
	and #$FC
	jeq l_0F66
	lda SYSTEM.IORESULT
	jsr STATUSERROR
l_0F66

; optimize OK (list.inc), line = 103

	lda P_BANK
	cmp #$FF
	jne l_0F7F
	jsr STATUSPLAYING
l_0F7F

; ------------------------------------------------------------

adr.DEV	= [DATAORIGIN+$012A] .array [4]
.var DEV	= adr.DEV .word

@VarData	= DEV
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT						; PROCEDURE

	jmp l_0F87

.local	SETMCBASEADDRESS				; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000115  -------------------

    icl 'asms/setMCBaseAddr.a65'
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0F87

; optimize FAIL ('SETMCBASEADDRESS', init.inc), line = 10

	jsr SETMCBASEADDRESS

; optimize OK (init.inc), line = 13

	lda #$03
	jsr MC6850.MC6850_INIT

; optimize OK (init.inc), line = 14

	lda #$16
	jsr MC6850.MC6850_INIT

; optimize OK (init.inc), line = 16

	lda #$00
	sta DMACTL

; optimize OK (init.inc), line = 17

	lda #$32
	sta CHBASE

; optimize OK (init.inc), line = 18

	lda #$B4
	sta SDLST
	lda #$3F
	sta SDLST+1

; optimize FAIL ('MIDI_FIFO.FIFO_RESET', init.inc), line = 20

	jsr MIDI_FIFO.FIFO_RESET

; optimize FAIL (1, init.inc), line = 22

	inx
	mva CURDEV :STACKORIGIN,x
	mva CURDEV+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	jsr SYSTEM.PARAMSTR
	lda SYSTEM.PARAMSTR.RESULT
	sta GETDEVICESPEC.FN
	lda SYSTEM.PARAMSTR.RESULT+1
	sta GETDEVICESPEC.FN+1
	lda :STACKORIGIN,x
	sta GETDEVICESPEC.SPEC
	lda :STACKORIGIN+STACKWIDTH,x
	sta GETDEVICESPEC.SPEC+1
	dex
	jsr GETDEVICESPEC
	lda GETDEVICESPEC.RESULT
	jne l_0FAB
	ldy #256-3
	mva:rne CODEORIGIN+$00E2+3-256,y adr.CURDEV+3-256,y+
l_0FAB
	mva #$00 adr.FN

; optimize FAIL ('CLEARWORKAREA', init.inc), line = 25

	jsr CLEARWORKAREA

; optimize FAIL ('CLEARSTATUS', init.inc), line = 26

	jsr CLEARSTATUS

; optimize OK (init.inc), line = 27

	lda #$A0
	sta SCRADR
	lda #$39
	sta SCRADR+1
	jsr HLINE

; optimize OK (init.inc), line = 28

	lda #$A1
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$E6
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (init.inc), line = 29

	lda #$BE
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda #$F0
	sta PUTINTTEXT.S
	lda #$80
	sta PUTINTTEXT.S+1
	jsr PUTINTTEXT

; optimize OK (init.inc), line = 31

	lda #$00
	sta MIDFILES.MIDTRACKS
	lda #$2E
	sta MIDFILES.MIDTRACKS+1

; optimize OK (init.inc), line = 34

	lda #$00
	sta MIDFILES.CTRK

l_0FCE
; --- ForToDoCondition
	lda MIDFILES.CTRK
	cmp #$10
	jcs l_0FDC

; optimize OK (init.inc), line = 36

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$22
	sta :STACKORIGIN+10
	lda #$37
	sta :STACKORIGIN+STACKWIDTH+10
	lda MIDFILES.CTRK
	jsr @mul40
	add :STACKORIGIN+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc :eax+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+10
	sta adr.CHANNELSCRADR,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.CHANNELSCRADR+1,y

; optimize OK (init.inc), line = 37

	lda MIDFILES.CTRK
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$28
	sta :STACKORIGIN+10
	lda #$37
	sta :STACKORIGIN+STACKWIDTH+10
	lda MIDFILES.CTRK
	jsr @mul40
	add :STACKORIGIN+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc :eax+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+10
	sta adr.PLAYLISTSCRADR,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.PLAYLISTSCRADR+1,y

; --- ForToDoEpilog
	inc MIDFILES.CTRK
	jne l_0FCE
l_0FDC

; -------------------  ASM Block 00000116  -------------------

    lda $14
    cmp $14
    beq *-2
  
; optimize FAIL ('RESETMEMORYPTR', init.inc), line = 47

	jsr RESETMEMORYPTR

; optimize OK (init.inc), line = 48

	lda _TM
	sta OTM

; optimize FAIL ('SETCOLORS', init.inc), line = 49

	jsr SETCOLORS
	lda #$22
	sta DMACTL
	lda #$00
	sta SOUNDR
	lda #$01
	sta PLAYDIR

; optimize OK (init.inc), line = 50

	sta ISSTOPPED

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWHELP					; PROCEDURE

; optimize OK (help.inc), line = 3

	lda #$01
	sta ISHELP

; optimize OK (help.inc), line = 4

	lda #$40
	sta $3FCD
	lda #$3B
	sta $3FCD+1
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0107

; optimize FAIL ('INIT', MIDICar Player.pas), line = 56

	jsr INIT

; optimize FAIL ('CLEARUVMETERS', MIDICar Player.pas), line = 57

	jsr CLEARUVMETERS

; optimize OK (MIDICar Player.pas), line = 66

	lda CURDEV
	sta JOINSTRINGS.S1
	lda CURDEV+1
	sta JOINSTRINGS.S1+1
	lda #$FB
	sta JOINSTRINGS.S2
	lda #$80
	sta JOINSTRINGS.S2+1
	jsr JOINSTRINGS

; optimize OK (MIDICar Player.pas), line = 67

	lda #$00
	jsr GOTONENTRY

; optimize OK (MIDICar Player.pas), line = 68

	lda #$FF
	sta MIDFILES._ADR
	sta MIDFILES._ADR+1
	lda #$FE
	sta MIDFILES._BANK
	lda OUTSTR
	sta ADDTOLIST.ENTRY
	lda OUTSTR+1
	sta ADDTOLIST.ENTRY+1
	jsr ADDTOLIST

; optimize FAIL ('CHOICELISTFILE', MIDICar Player.pas), line = 69

	jsr CHOICELISTFILE

; optimize FAIL ('SETNMI', MIDICar Player.pas), line = 72

	jsr SETNMI

; --- RepeatUntilProlog
l_1045

; optimize FAIL ('MIDFILES.PROCESSMIDI', MIDICar Player.pas), line = 76

	jsr MIDFILES.PROCESSMIDI

; optimize OK (MIDICar Player.pas), line = 77

	lda ISSTOPPED
	jne l_1061
	lda MIDFILES.PLAYINGTRACKS
	jne l_1061

; optimize OK (MIDICar Player.pas), line = 79

	lda PLAYERSTATUS
	and #$0C
	sta V

; optimize FAIL ('STATUSSTOPPED', MIDICar Player.pas), line = 80

	jsr STATUSSTOPPED

; optimize OK (MIDICar Player.pas), line = 81

	lda V
	jeq l_107F

; optimize OK (MIDICar Player.pas), line = 83

	sub #$05
	svc
	eor #$80
	jmi l_1092

; optimize OK (MIDICar Player.pas), line = 84

	lda CURPLAY
	cmp #$FF
	jeq l_10A5

; --- RepeatUntilProlog
l_10A7

; optimize OK (MIDICar Player.pas), line = 87

	lda CURPLAY
	cmp #$FF
	jne l_10B9
	lda CURFILE
	sta CURPLAY
l_10B9

; optimize OK (MIDICar Player.pas), line = 88

	lda V
	cmp #$0C
	jne l_10D4

; optimize OK (MIDICar Player.pas), line = 89

	lda TOTALFILES
	jsr SYSTEM.RANDOM_0172
	lda SYSTEM.RANDOM_0172.RESULT
	sta CURPLAY
	jmp l_10E5
l_10D4

; optimize OK (MIDICar Player.pas), line = 92

	lda CURPLAY
	add PLAYDIR
	sta CURPLAY

; optimize OK (MIDICar Player.pas), line = 93

	cmp #$01
	jne l_10FA
	lda TOTALFILES
	sta CURPLAY
l_10FA

; optimize OK (MIDICar Player.pas), line = 94

	lda CURPLAY
	cmp TOTALFILES
	jne l_1117
	lda #$01
	sta CURPLAY
l_1117
l_10E5

; optimize OK (MIDICar Player.pas), line = 96

	lda CURPLAY
	sta CURFILE

; optimize FAIL ('CHOICELISTFILE', MIDICar Player.pas), line = 97

	jsr CHOICELISTFILE

; optimize OK (MIDICar Player.pas), line = 98

	lda CURPLAY
	cmp #$FF
	jeq l_10A7

; optimize OK (MIDICar Player.pas), line = 99

	lda #$01
	sta PLAYDIR
l_10A5
l_1092

; optimize OK (MIDICar Player.pas), line = 101

	lda MIDFILES.TOTALTRACKS
	jeq l_114C
	jsr STATUSPLAYING
l_114C
l_107F
l_1061

; optimize OK (MIDICar Player.pas), line = 105

	lda _TM
	cmp OTM
	jeq l_1168

; optimize OK (MIDICar Player.pas), line = 107

	sta OTM

; optimize OK (MIDICar Player.pas), line = 108

	lda #$D4
	sta SCRADR
	lda #$39
	sta SCRADR+1
	lda <MIDFILES._TOTALTICKS
	sta PUTHEX.V
	lda >MIDFILES._TOTALTICKS
	sta PUTHEX.V+1
	lda #$08
	sta PUTHEX.N
	jsr PUTHEX

; -------------------  ASM Block 00000117  -------------------

  icl 'asms/uvmeters.a65' 
l_1168

; optimize OK (keyboard.inc), line = 1

	lda KEYB
	cmp #$FF
	jeq l_118A

; optimize OK (keyboard.inc), line = 3

	lda ISHELP
	jeq l_1197

; optimize OK (keyboard.inc), line = 5

	lda #$00
	sta ISHELP

; optimize OK (keyboard.inc), line = 6

	lda #$F8
	sta $3FCD
	lda #$36
	sta $3FCD+1

; optimize OK (keyboard.inc), line = 7

	lda #$FF
	sta KEYB
l_1197

; optimize OK (keyboard.inc), line = 9

	lda KEYB
	sta @CASETMP_0005
	cmp #$1C
	jne l_11B0
@
	jmp b_1045					; break

	jmp a_0005
l_11B0
	cmp #$39
	jne l_11B9
@

; optimize FAIL ('SHOWHELP', keyboard.inc), line = 11

	jsr SHOWHELP
	jmp a_0005
l_11B9
	cmp #$0C
	jne l_11C3
@

; optimize FAIL ('CHOICELISTFILE', keyboard.inc), line = 12

	jsr CHOICELISTFILE
	jmp a_0005
l_11C3
	cmp #$21
	jne l_11CD
@

; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 15

	jsr DRAWLISTSELECTION

; optimize OK (keyboard.inc), line = 16

	lda CURFILE
	jsr GOTONENTRY

; optimize OK (keyboard.inc), line = 17

	lda <P_BANK
	sta GETENTRYSETS.PTR
	lda >P_BANK
	sta GETENTRYSETS.PTR+1
	jsr GETENTRYSETS

; optimize OK (keyboard.inc), line = 18

	lda P_BANK
	eor #$80
	sta P_BANK

; optimize OK (keyboard.inc), line = 19

	lda <P_BANK
	sta SETENTRYSETS.PTR
	lda >P_BANK
	sta SETENTRYSETS.PTR+1
	jsr SETENTRYSETS

; optimize FAIL ('SHOWLIST', keyboard.inc), line = 20

	jsr SHOWLIST

; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 21

	jsr DRAWLISTSELECTION

	jmp a_0005
l_11CD
	cmp #$0E
	beq @+
	cmp #$0F
	jne l_11ED
@

; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 25

	jsr DRAWLISTSELECTION

; optimize OK (keyboard.inc), line = 26

	lda #$00
	sta V

; optimize OK (keyboard.inc), line = 27

	lda KEYB
	cmp #$0E
	jne l_1204

; optimize OK (keyboard.inc), line = 29

	lda YFILE
	jeq l_1217

; optimize FAIL (0, keyboard.inc), line = 30

	dec YFILE
	jmp l_1225
l_1217

; optimize OK (keyboard.inc), line = 32

	lda SHFILE
	jeq l_1237
	lda #$FF
	sta V
l_1237
l_1225
l_1204

; optimize OK (keyboard.inc), line = 34

	lda KEYB
	cmp #$0F
	jne l_1252

; optimize OK (keyboard.inc), line = 36

	lda YFILE
	cmp #$0F
	jcs l_1265

; optimize FAIL (0, keyboard.inc), line = 37

	inc YFILE
	jmp l_1273
l_1265

; optimize OK (keyboard.inc), line = 39

	lda TOTALFILES
	sub YFILE
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	sub #$01
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	sbc #$00
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+10
	bne @+
	lda :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda SHFILE
	cmp :STACKORIGIN+10
@
	jcs l_1291
	lda #$01
	sta V
l_1291
l_1273
l_1252

; optimize OK (keyboard.inc), line = 41

	lda V
	jeq l_12AC

; optimize OK (keyboard.inc), line = 43

	lda SHFILE
	add V
	sta SHFILE

; optimize FAIL ('SHOWLIST', keyboard.inc), line = 44

	jsr SHOWLIST
l_12AC

; optimize OK (keyboard.inc), line = 46

	lda SHFILE
	add YFILE
	sta CURFILE

; optimize OK (keyboard.inc), line = 47

	cmp TOTALFILES
	jcc l_12D3
	ldy TOTALFILES
	dey
	sty CURFILE
l_12D3

; optimize FAIL ('DRAWLISTSELECTION', keyboard.inc), line = 48

	jsr DRAWLISTSELECTION

	jmp a_0005
l_11ED
	cmp #$00
	jne l_12EA
@

; optimize OK (keyboard.inc), line = 52

	lda PLAYERSTATUS
	add #$04
	and #$0C
	sta V

; optimize OK (keyboard.inc), line = 53

	lda PLAYERSTATUS
	and #$F3
	ora V
	sta PLAYERSTATUS

; optimize FAIL ('STATUSLOOP', keyboard.inc), line = 54

	jsr STATUSLOOP

	jmp a_0005
l_12EA
	cmp #$25
	jne l_1312
@

; optimize FAIL ('CLEARUVMETERS', keyboard.inc), line = 58

	jsr CLEARUVMETERS

; optimize OK (keyboard.inc), line = 59

	lda PLAYERSTATUS
	eor #$02
	sta PLAYERSTATUS

	jmp a_0005
l_1312
	cmp #$27
	jne l_1326
@

; optimize OK (keyboard.inc), line = 63

	lda PLAYERSTATUS
	eor #$01
	sta PLAYERSTATUS

; optimize FAIL ('SETCOLORS', keyboard.inc), line = 64

	jsr SETCOLORS

	jmp a_0005
l_1326
	cmp #$17
	beq @+
	cmp #$15
	jne l_133C
@

; optimize OK (keyboard.inc), line = 68

	lda KEYB
	cmp #$17
	jne l_134E
	lda #$FF
	sta PLAYDIR
l_134E

; optimize OK (keyboard.inc), line = 69

	lda KEYB
	cmp #$15
	jne l_1367
	lda #$01
	sta PLAYDIR
l_1367

; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 70

	jsr STATUSPAUSE

; optimize OK (keyboard.inc), line = 71

	lda #$00
	sta MIDFILES.PLAYINGTRACKS

	jmp a_0005
l_133C
	cmp #$16
	jne l_137C
@

; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 75

	jsr STATUSSTOPPED

; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 76

	jsr STATUSPLAYING

	jmp a_0005
l_137C
	cmp #$12
	jne l_1387
@

; optimize OK (keyboard.inc), line = 80

	lda MIDFILES._TIMERSTATUS
	jpl l_139D

; optimize FAIL ('STATUSPLAYING', keyboard.inc), line = 82

	jsr STATUSPLAYING
	jmp l_13A8
l_139D

; optimize FAIL ('STATUSPAUSE', keyboard.inc), line = 83

	jsr STATUSPAUSE
l_13A8

	jmp a_0005
l_1387
	cmp #$10
	jne l_13B2
@

; optimize FAIL ('STATUSSTOPPED', keyboard.inc), line = 85

	jsr STATUSSTOPPED
	jmp a_0005
l_13B2
	cmp #$34
	beq @+
	cmp #$36
	beq @+
	cmp #$37
	jne l_13C0
@

; optimize OK (keyboard.inc), line = 88

	lda KEYB
	cmp #$36
	jne l_13D2
	lda MIDFILES.TEMPOSHIFT
	add #$20
	sta MIDFILES.TEMPOSHIFT
	lda MIDFILES.TEMPOSHIFT+1
	adc #$4E
	sta MIDFILES.TEMPOSHIFT+1
	lda MIDFILES.TEMPOSHIFT+2
	adc #$00
	sta MIDFILES.TEMPOSHIFT+2
	lda MIDFILES.TEMPOSHIFT+3
	adc #$00
	sta MIDFILES.TEMPOSHIFT+3
l_13D2

; optimize OK (keyboard.inc), line = 89

	lda KEYB
	cmp #$37
	jne l_13E8
	lda MIDFILES.TEMPOSHIFT
	sub #$20
	sta MIDFILES.TEMPOSHIFT
	lda MIDFILES.TEMPOSHIFT+1
	sbc #$4E
	sta MIDFILES.TEMPOSHIFT+1
	lda MIDFILES.TEMPOSHIFT+2
	sbc #$00
	sta MIDFILES.TEMPOSHIFT+2
	lda MIDFILES.TEMPOSHIFT+3
	sbc #$00
	sta MIDFILES.TEMPOSHIFT+3
l_13E8

; optimize OK (keyboard.inc), line = 90

	lda KEYB
	cmp #$34
	jne l_13FE
	lda #$00
	sta MIDFILES.TEMPOSHIFT
	sta MIDFILES.TEMPOSHIFT+1
	sta MIDFILES.TEMPOSHIFT+2
	sta MIDFILES.TEMPOSHIFT+3
l_13FE

; optimize FAIL ('MIDFILES.SETTEMPO', keyboard.inc), line = 91

	jsr MIDFILES.SETTEMPO

l_13C0
a_0005

; optimize OK (keyboard.inc), line = 94

	lda #$FF
	sta KEYB
l_118A

; optimize OK (MIDICar Player.pas), line = 114

	jmp l_1045
b_1045

; optimize FAIL ('UNSETNMI', MIDICar Player.pas), line = 117

	jsr UNSETNMI

; optimize FAIL ('EXIT2DOS', MIDICar Player.pas), line = 119

	jsr EXIT2DOS

; ------------------------------------------------------------

CHARS_ADDR	= $3000
SCREEN_ADDR	= $3400
SCREEN_WORK	= $36F8
SCREEN_TIME	= $39C8
SCREEN_STATUS	= $39DC
SCREEN_FOOT	= $3A04
UVMETER_ADDR	= $3B00
HELPSCR_ADDR	= $3B40
DLIST_ADDR	= $3FB4
PLAYLIST_ADDR	= $2000
START_INFO_ADDR	= $2C00
TRACK_DATA_ADDR	= $2E00
MIDI_DATA_ADDR	= $4000
FREE_MEM	= $23
F_CLEAR	= $20
PS_COLORSET	= $01
PS_VIEW	= $02
PS_LOOP	= $0C
PS_PLAYONCE	= $00
PS_REPEATONE	= $04
PS_REPEATALL	= $08
PS_SHUFFLE	= $0C
LIST_VISIBLE_CHARS	= $1E
FE_DIR	= $A4A9B200
FE_MID	= $4D494400
adr.CHANNELSCRADR	= [DATAORIGIN+$008F] .array [16] .word
.var CHANNELSCRADR	= adr.CHANNELSCRADR .word
adr.PLAYLISTSCRADR	= [DATAORIGIN+$00AF] .array [16] .word
.var PLAYLISTSCRADR	= adr.PLAYLISTSCRADR .word
PLAYERSTATUS	= $4A
TOTALXMS	= $4B
SCRADR	= $D4
MCBASEADDR	= $D8
PLS	= $DA
_TM	= $14
OTM	= DATAORIGIN+$00CF
CHN	= DATAORIGIN+$00D0
YFILE	= DATAORIGIN+$00D1
SHFILE	= DATAORIGIN+$00D2
CURFILE	= DATAORIGIN+$00D3
TOTALFILES	= DATAORIGIN+$00D4
CURPLAY	= DATAORIGIN+$00D5
PLAYDIR	= DATAORIGIN+$00D6
V	= DATAORIGIN+$00D7
FIRSTTIME	= DATAORIGIN+$00D8
ISSTOPPED	= DATAORIGIN+$00D9
ISHELP	= DATAORIGIN+$00DA
adr.CURDEV	= [DATAORIGIN+$00DB] .array [4]
.var CURDEV	= adr.CURDEV .word
adr.FN	= $0500
.var FN	= adr.FN .word
adr.OUTSTR	= $0580
.var OUTSTR	= adr.OUTSTR .word
LAST_BANK	= DATAORIGIN+$00DF
LAST_ADR	= DATAORIGIN+$00E0
NMIEN	= $D40E
NMIVEC	= $FFFA
OLDNMIVEC	= DATAORIGIN+$00E2
adr.COLORS	= CODEORIGIN+$0100
.var COLORS	= adr.COLORS .word
adr.GM_RESET	= CODEORIGIN+$010A
.var GM_RESET	= adr.GM_RESET .word
K_L	= $00
K_LEFT	= $06
K_RIGHT	= $07
K_P	= $0A
K_RETURN	= $0C
K_UP	= $0E
K_DOWN	= $0F
K_V	= $10
K_HELP	= $11
K_C	= $12
K_B	= $15
K_X	= $16
K_Z	= $17
K_ESC	= $1C
K_SPACE	= $21
K_M	= $25
K_INVERS	= $27
K_TAB	= $2C
K_DELETE	= $34
K_CLEAR	= $36
K_INSERT	= $37
K_H	= $39
K_CAPS	= $3C
K_S	= $3E
KEYB	= $02FC
PUTTEXTINVERT	= DATAORIGIN+$00E6
SDMACTL	= DATAORIGIN+$00E7
DMACTL	= $D400
SDLST	= $0230
CHBASE	= $02F4
SOUNDR	= $41
P_BANK	= DATAORIGIN+$0123
P_ADR	= DATAORIGIN+$0124
@CASETMP_0005	= DATAORIGIN+$012E
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
USE_FIFO
USE_CIO
USE_SUPPORT_VARS
ROMOFF
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.MC6850.@UnitInit
	jsr MAIN.MC6850.@UnitInit
	.fi

	.ifdef MAIN.MIDI_FIFO.@UnitInit
	jsr MAIN.MIDI_FIFO.@UnitInit
	.fi

	.ifdef MAIN.CIO.@UnitInit
	jsr MAIN.CIO.@UnitInit
	.fi

	.ifdef MAIN.MIDFILES.@UnitInit
	jsr MAIN.MIDFILES.@UnitInit
	.fi

	.ifdef MAIN.MISC.@UnitInit
	jsr MAIN.MISC.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.MC6850) > 0
	.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
	eif

	ift .SIZEOF(MAIN.MIDI_FIFO) > 0
	.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
	eif

	ift .SIZEOF(MAIN.CIO) > 0
	.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
	eif

	ift .SIZEOF(MAIN.MIDFILES) > 0
	.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
	eif

	ift .SIZEOF(MAIN.MISC) > 0
	.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	org $3E80

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $01

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 303

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $00 $00 $05 $FB $00 $FC $00 $FD  $00 $04 $2D $65 $6D $1A $00 $02  $2B $22 $00 $02 $45 $3A $00 $02
.by  $00 $00 $00 $02 $7E $7F $00 $02  $5C $5D $00 $02 $5E $5F $00 $05  $3B $00 $FC $00 $FD $00 $09 $4E
.by  $B0 $EC $E1 $F9 $E9 $EE $E7 $CE  $00 $09 $4E $AE $EF $80 $F3 $EF  $EE $E7 $CE $00 $05 $FB $00 $3C
.by  $00 $FD $00 $09 $4E $80 $B0 $E1  $F5 $F3 $E5 $80 $CE $00 $05 $FB  $00 $FC $00 $3D $00 $09 $4E $B3
.by  $F4 $EF $F0 $F0 $E5 $E4 $CE $00  $09 $4E $AC $EF $E1 $E4 $E9 $EE  $E7 $80 $00 $13 $4E $B2 $E5 $E1
.by  $E4 $E9 $EE $E7 $80 $E4 $E9 $F2  $E5 $E3 $F4 $EF $F2 $F9 $80 $00  $14 $4E $B5 $EE $F3 $F5 $F0 $F0
.by  $EF $F2 $F4 $E5 $E4 $80 $E6 $EF  $F2 $ED $E1 $F4 $CE $00 $14 $4E  $AE $EF $F4 $80 $E5 $EE $EF $F5
.by  $E7 $E8 $F4 $80 $ED $E5 $ED $EF  $F2 $F9 $CE $00 $11 $4E $AE $EF  $F4 $80 $E1 $80 $AD $A9 $A4 $A9
.by  $80 $E6 $E9 $EC $E5 $CE $00 $0C  $4E $A9 $8F $AF $80 $A5 $F2 $F2  $EF $F2 $80 $83 $00 $0B $4E $A4
.by  $E9 $F2 $E5 $E3 $F4 $EF $F2 $F9  $CE $00 $02 $44 $3A $00 $08 $4E  $B3 $F4 $E1 $F4 $F5 $F3 $CE $00
.by  $09 $4E $A3 $EF $F5 $EE $F4 $E5  $F2 $CE $00 $03 $2A $2E $2A $00  $A8 $00 $0A $08 $0A $A8 $0A $00
.by  $02 $00 $F0 $7E $7F $09 $01 $F7  $17 $80 $1B $80 $1F $80 $23 $80  $29 $1C $1D $1E
.endm

	end
