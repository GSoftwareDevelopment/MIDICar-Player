; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/03/17] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_004A

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	FILEPOS						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000011  -------------------

	txa:pha

	mwa f :bp2

	ldy #s@file.chanel
	lda (:bp2),y
	tax
	lda #38
	sta iccmd,x

	m@call	ciov

	sty IOResult

	mva icax3,x :eax
	mva icax4,x :eax+1
	mva icax5,x :eax+2

	mva #$00 :eax+3
	sta :ecx+2
	sta :ecx+3

	ldy #s@file.record
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1

	jsr idivEAX_ECX.main

	mva :eax Result
	mva :eax+1 Result+1
	mva :eax+2 Result+2
	mva :eax+3 Result+3

	pla:tax

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000D

@VarData	= F
@VarDataSize	= 2

	rts						; ret
.endl

.local	SEEK						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000012  -------------------

	txa:pha

	mwa f :bp2

	ldy #s@file.chanel
	lda (:bp2),y
	tax
	lda #37
	sta iccmd,x

	ldy #s@file.record
	lda (:bp2),y
	sta :eax
	iny
	lda (:bp2),y
	sta :eax+1
	lda #$00
	sta :eax+2
	sta :eax+3

	mva a :ecx
	mva a+1 :ecx+1
	mva a+2 :ecx+2
	mva a+3 :ecx+3

	jsr imulECX

	mva :eax icax3,x
	mva :eax+1 icax4,x
	mva :eax+2 icax5,x

	m@call	ciov

	sty IOResult

	pla:tax

; ------------------------------------------------------------

F	= DATAORIGIN+$0011
A	= DATAORIGIN+$0013

@VarData	= F
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EOF						; FUNCTION

; optimize OK (SYSTEM), line = 1151

	lda F
	sta FILEPOS.F
	lda F+1
	sta FILEPOS.F+1
	jsr FILEPOS
	lda FILEPOS.RESULT
	sta I
	lda FILEPOS.RESULT+1
	sta I+1
	lda FILEPOS.RESULT+2
	sta I+2
	lda FILEPOS.RESULT+3
	sta I+3
; BlockRead

; optimize OK (SYSTEM), line = 1153

	mwy F :bp2
	ldy #s@file.buffer
	lda BF
	sta (:bp2),y
	iny
	lda BF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (SYSTEM), line = 1155

	lda F
	sta SEEK.F
	lda F+1
	sta SEEK.F+1
	lda I
	sta SEEK.A
	lda I+1
	sta SEEK.A+1
	lda I+2
	sta SEEK.A+2
	lda I+3
	sta SEEK.A+3
	jsr SEEK

; -------------------  ASM Block 00000013  -------------------

	mwa f :bp2

	ldy #s@file.status
	lda (:bp2),y
	and #e@file.eof
	sta Result

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$0017
RESULT	= DATAORIGIN+$0019
I	= DATAORIGIN+$001A
adr.BF	= [DATAORIGIN+$001E] .array [256]
.var BF	= adr.BF .word

@VarData	= F
@VarDataSize	= 262

	rts						; ret
.endl

.local	FILLCHAR_009F					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000021  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	SETLENGTH					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000033  -------------------

	ldy #0
	mva Len (:edx),y

; ------------------------------------------------------------

S	= :EDX
LEN	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PARAMCOUNT					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000044  -------------------

	@cmdline #255
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$011E
	rts						; ret
.endl

.local	PARAMSTR					; FUNCTION | ASSEMBLER
	sta I

; -------------------  ASM Block 00000045  -------------------

	@cmdline i

;	@move #@buf Result #33
	ldy #256-33
	mva:rne @buf+33-256,y adr.Result+33-256,y+

@exit

; ------------------------------------------------------------

I	= DATAORIGIN+$011F
adr.RESULT	= [DATAORIGIN+$0120] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= I
@VarDataSize	= 34

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	MC6850						; UNIT

.local	MC6850_RESET					; PROCEDURE

; optimize OK (MC6850), line = 68

	lda #$03
	sta MC6850_CNTRREG
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MC6850_INIT					; PROCEDURE
	sta SETUP

; optimize OK (MC6850), line = 73

	sta MC6850_CNTRREG

; ------------------------------------------------------------

SETUP	= DATAORIGIN+$0141

@VarData	= SETUP
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MC6850_SEND					; PROCEDURE
	sta DATA

; --- RepeatUntilProlog
l_00E3

; optimize OK (MC6850), line = 84

	lda MC6850_CNTRREG
	and #$02
	jeq l_00E3

; optimize OK (MC6850), line = 85

	lda DATA
	sta MC6850_BUFFER

; ------------------------------------------------------------

DATA	= DATAORIGIN+$0142

@VarData	= DATA
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

MC6850_BASE	= $D500
ADDR_MC6850_CNTRREG	= $D500
ADDR_MC6850_BUFFER	= $D501
ADDR_MC6850_STATREG	= $D500
CR0	= $01
CR1	= $02
CR2	= $04
CR3	= $08
CR4	= $10
CR5	= $20
CR6	= $40
CR7	= $80
CD_1	= $00
CD_16	= $01
CD_64	= $02
MASTERRESET	= $03
WS_7BITS	= $00
WS_8BITS	= $10
WS_2BITSTOP	= $00
WS_1BITSTOP	= $08
WS_EVENPARITY	= $00
WS_ODDPARITY	= $04
TC_RTSLOW_NOTIRQ	= $00
TC_RTSLOW_TIRQ	= $20
TC_RTSHIGH_NOTIRQ	= $40
TC_BREAKLEVEL	= $60
NOIRQ_RECEIVE	= $00
IRQ_RECEIVE	= $80
RDRF	= $01
TDRE	= $02
DCD	= $04
CTS	= $08
FE	= $10
OVRN	= $20
PE	= $40
IRQ	= $80
MC6850_CNTRREG	= $D500
MC6850_BUFFER	= $D501
MC6850_STATREG	= $D500

.endl							; UNIT MC6850

; ------------------------------------------------------------

.local	DOS						; UNIT

; ------------------------------------------------------------

PALNTSC	= $D014

.endl							; UNIT DOS

; ------------------------------------------------------------

.local	STRUTILS					; UNIT

; ------------------------------------------------------------

.endl							; UNIT STRUTILS

; ------------------------------------------------------------

.local	SYSUTILS					; UNIT

; ------------------------------------------------------------

FAREADONLY	= $01
FAHIDDEN	= $02
FASYSFILE	= $04
FAVOLUMEID	= $08
FADIRECTORY	= $10
FAARCHIVE	= $20
FAANYFILE	= $3F

.endl							; UNIT SYSUTILS

; ------------------------------------------------------------

.local	MIDI_FIFO					; UNIT

.local	FIFO_RESET					; PROCEDURE

; optimize OK (MIDI_FIFO), line = 31

	lda #$00
	sta FIFO_HEAD

; optimize OK (MIDI_FIFO), line = 32

	sta FIFO_TAIL

; optimize OK (MIDI_FIFO), line = 33

	sta SYSTEM.FILLCHAR_009F.A
	lda #$06
	sta SYSTEM.FILLCHAR_009F.A+1
	lda #$FF
	sta SYSTEM.FILLCHAR_009F.COUNT
	lda #$00
	sta SYSTEM.FILLCHAR_009F.COUNT+1
	sta SYSTEM.FILLCHAR_009F.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_009F
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIFO_READBYTE					; FUNCTION

; optimize OK (MIDI_FIFO), line = 38

	ldy FIFO_TAIL
	cpy FIFO_HEAD
	jeq l_0154

; optimize OK (MIDI_FIFO), line = 40

	lda adr.FIFO_BUF,y
	mvy DATA+1 :bp+1
	ldy DATA
	sta (:bp),y

; optimize FAIL (0, MIDI_FIFO), line = 41

	inc FIFO_TAIL

; optimize OK (MIDI_FIFO), line = 42

	lda FIFO_TAIL
	cmp #$FF
	jne l_0174
	lda #$00
	sta FIFO_TAIL
l_0174

; optimize OK (MIDI_FIFO), line = 43

	lda #$01
	sta RESULT
	jmp l_0188
l_0154

; optimize OK (MIDI_FIFO), line = 46

	lda #$00
	sta RESULT
l_0188
@exit

; ------------------------------------------------------------

DATA	= DATAORIGIN+$0143
RESULT	= DATAORIGIN+$0145

@VarData	= DATA
@VarDataSize	= 2

	rts						; ret
.endl

.local	FIFO_WRITEBYTE					; FUNCTION
	sta DATA

; optimize OK (MIDI_FIFO), line = 51

	lda FIFO_HEAD
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	ldy #1
	lda :STACKORIGIN+STACKWIDTH*3+9
	cmp #$00
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp #$00
	bne @+
	lda :STACKORIGIN+STACKWIDTH+9
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp FIFO_TAIL
@
	beq @+
	dey
@
	sty :STACKORIGIN+9
	lda FIFO_HEAD
	add #$01
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH*3+10
	cmp #$00
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp #$00
	bne @+
	lda :STACKORIGIN+STACKWIDTH+10
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp #$FF
@
	beq @+
	dey
@
	sty :STACKORIGIN+10
	ldy #1
	lda FIFO_TAIL
	beq @+
	dey
@
	tya
	and :STACKORIGIN+10
	ora :STACKORIGIN+9
	jeq l_01C4

; optimize OK (MIDI_FIFO), line = 53

	lda #$00
	sta RESULT
	jmp @exit					; exit
l_01C4

; optimize OK (MIDI_FIFO), line = 56

	ldy FIFO_HEAD
	lda DATA
	sta adr.FIFO_BUF,y

; optimize FAIL (0, MIDI_FIFO), line = 60

	inc FIFO_HEAD

; optimize OK (MIDI_FIFO), line = 61

	lda FIFO_HEAD
	cmp #$FF
	jne l_01F1
	lda #$00
	sta FIFO_HEAD
l_01F1
l_01D2

; optimize OK (MIDI_FIFO), line = 63

	lda #$01
	sta RESULT
@exit

; ------------------------------------------------------------

DATA	= DATAORIGIN+$0146
RESULT	= DATAORIGIN+$0147

@VarData	= DATA
@VarDataSize	= 1

	rts						; ret
.endl

.local	FIFO_FLUSH					; PROCEDURE

; --- WhileProlog
	jmp l_0202
l_0203

; optimize OK (MIDI_FIFO), line = 69

	lda ZP_DATA
	jsr MC6850.MC6850_SEND
l_0202

; optimize OK (MIDI_FIFO), line = 68

	lda <ZP_DATA
	sta FIFO_READBYTE.DATA
	lda >ZP_DATA
	sta FIFO_READBYTE.DATA+1
	jsr FIFO_READBYTE
	lda FIFO_READBYTE.RESULT
	jne l_0203
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

ZP_DATA	= $FF
FIFO_HEAD	= $F0
FIFO_TAIL	= $F1
FIFO_SIZE	= $FF
FIFO_ADDR	= $0600
adr.FIFO_BUF	= $0600
.var FIFO_BUF	= adr.FIFO_BUF .word

.endl							; UNIT MIDI_FIFO

; ------------------------------------------------------------

.local	MIDFILES					; UNIT

.local	WORDBI						; FUNCTION

; optimize OK (MIDFILES), line = 46

	lda <RESULT
	sta RESULTPTR
	lda >RESULT
	sta RESULTPTR+1

; optimize OK (MIDFILES), line = 47

	mwy BI :bp2
	ldy #$01
	lda (:bp2),y
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y
	inc RESULTPTR
	sne
	inc RESULTPTR+1

; optimize OK (MIDFILES), line = 48

	ldy #$00
	lda (:bp2),y
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y
@exit

; ------------------------------------------------------------

BI	= DATAORIGIN+$0156
RESULT	= DATAORIGIN+$0158
RESULTPTR	= DATAORIGIN+$015A

@VarData	= BI
@VarDataSize	= 4

	rts						; ret
.endl

.local	LONGBI						; FUNCTION

; optimize OK (MIDFILES), line = 57

	lda <RESULT
	sta RESULTPTR
	lda >RESULT
	sta RESULTPTR+1

; optimize OK (MIDFILES), line = 58

	lda #$03
	sta I

l_0237
; --- ForToDoCondition

; optimize OK (MIDFILES), line = 60

	mwy BI :bp2
	ldy I
	lda (:bp2),y
	mvy RESULTPTR+1 :bp+1
	ldy RESULTPTR
	sta (:bp),y

; optimize FAIL (0, MIDFILES), line = 61

	inc RESULTPTR
	sne
	inc RESULTPTR+1

; --- ForToDoEpilog
	dec I
	jpl l_0237
l_0245
@exit

; ------------------------------------------------------------

BI	= DATAORIGIN+$015C
RESULT	= DATAORIGIN+$015E
RESULTPTR	= DATAORIGIN+$0162
I	= DATAORIGIN+$0164

@VarData	= BI
@VarDataSize	= 5

	rts						; ret
.endl

.local	LOADMID						; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.FN,y+
	mwa #adr.FN FN
	dex
@main

	jmp l_025E

.local	READWORDBI					; FUNCTION

; BlockRead

; optimize OK (MIDFILES), line = 80

	mwy F :bp2
	ldy #s@file.buffer
	lda BI
	sta (:bp2),y
	iny
	lda BI+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$02
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (MIDFILES), line = 81

	lda BI
	sta WORDBI.BI
	lda BI+1
	sta WORDBI.BI+1
	jsr WORDBI
	lda WORDBI.RESULT
	sta RESULT
	lda WORDBI.RESULT+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0283
	rts						; ret
.endl

.local	READLONGBI					; FUNCTION

; BlockRead

; optimize OK (MIDFILES), line = 86

	mwy F :bp2
	ldy #s@file.buffer
	lda BI
	sta (:bp2),y
	iny
	lda BI+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (MIDFILES), line = 87

	lda BI
	sta LONGBI.BI
	lda BI+1
	sta LONGBI.BI+1
	jsr LONGBI
	lda LONGBI.RESULT
	sta RESULT
	lda LONGBI.RESULT+1
	sta RESULT+1
	lda LONGBI.RESULT+2
	sta RESULT+2
	lda LONGBI.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0285
	rts						; ret
.endl
l_025E

; optimize OK (MIDFILES), line = 91

	lda MIDTRACKS
	sta NTRKREC
	lda MIDTRACKS+1
	sta NTRKREC+1

; optimize FAIL ('@print', MIDFILES), line = 92

	@printSTRING #CODEORIGIN+$000D
	@printSTRING FN
	@printEOL
; AssignFile

; optimize OK (MIDFILES), line = 94

	mwy F :bp2
	ldy #s@file.pfname
	lda FN
	sta (:bp2),y
	iny
	lda FN+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Reset

; optimize OK (MIDFILES), line = 95

	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@openfile F, MAIN.SYSTEM.FileMode
	pla:tax

; optimize OK (MIDFILES), line = 96

	lda SYSTEM.IORESULT
	jpl l_02B1

; optimize FAIL ('@print', MIDFILES), line = 98

	@print #$9B
	@printSTRING #CODEORIGIN+$0019
	lda SYSTEM.IORESULT
	jsr @printBYTE._a
	@printEOL
; CloseFile

	txa:pha
	clc
	@closefile F
	pla:tax

; optimize OK (MIDFILES), line = 100

	lda #$00
	sta RESULT
	jmp @exit					; exit
l_02B1

; optimize OK (MIDFILES), line = 102

	lda #$00
	sta TRACKCOUNT
	sta TRACKCOUNT+1
	sta DATAPOS
	sta DATAPOS+1
	lda #$FF
	sta NTRACKS
	lda #$00
	sta NTRACKS+1

; optimize OK (MIDFILES), line = 103

	lda CHUNKHEAD
	sta SYSTEM.SETLENGTH.S
	lda CHUNKHEAD+1
	sta SYSTEM.SETLENGTH.S+1
	lda #$04
	sta SYSTEM.SETLENGTH.LEN
	jsr SYSTEM.SETLENGTH

; --- WhileProlog
	jmp l_02D5
l_02D6
; BlockRead

; optimize OK (MIDFILES), line = 106

	mwy F :bp2
	ldy #s@file.buffer
	lda <adr.CHUNKHEAD
	add #$01
	sta (:bp2),y
	iny
	lda >adr.CHUNKHEAD
	adc #$00
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
	ldy #s@file.numread
	lda <V
	sta (:bp2),y
	iny
	lda >V
	sta (:bp2),y

	txa:pha
	clc
	@readfile F, #135
	pla:tax

; optimize OK (MIDFILES), line = 107

	lda V+1
	bne @+
	lda V
	cmp #$04
@
	jeq l_02F3
	jmp b_02D6					; break
l_02F3

; optimize FAIL ('READLONGBI', MIDFILES), line = 108

	jsr READLONGBI
	lda READLONGBI.RESULT
	sta LEN
	lda READLONGBI.RESULT+1
	sta LEN+1
	lda READLONGBI.RESULT+2
	sta LEN+2
	lda READLONGBI.RESULT+3
	sta LEN+3

; optimize FAIL ('cmpSTRING', MIDFILES), line = 110

	inx
	mva CHUNKHEAD :STACKORIGIN,x
	mva CHUNKHEAD+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$26 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	ldy #1
	jsr cmpSTRING
	beq @+
	dey
@
	dex
	dex
	tya
	jeq l_030B

; optimize FAIL ('READWORDBI', MIDFILES), line = 112

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta FORMAT
	lda READWORDBI.RESULT+1
	sta FORMAT+1

; optimize FAIL ('READWORDBI', MIDFILES), line = 113

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta NTRACKS
	lda READWORDBI.RESULT+1
	sta NTRACKS+1

; optimize FAIL ('READWORDBI', MIDFILES), line = 114

	jsr READWORDBI
	lda READWORDBI.RESULT
	sta V
	lda READWORDBI.RESULT+1
	sta V+1

; optimize OK (MIDFILES), line = 119

	jpl l_032D

; optimize OK (MIDFILES), line = 121

	and #$7F
	sta FPS

; optimize OK (MIDFILES), line = 122

	sta @CASETMP_0005
	cmp #$E8
	jne l_0346
@

; optimize OK (MIDFILES), line = 123

	lda #$18
	sta FPS

	jmp a_0005
l_0346
	cmp #$E7
	jne l_0353
@

; optimize OK (MIDFILES), line = 124

	lda #$19
	sta FPS

	jmp a_0005
l_0353
	cmp #$E3
	jne l_0360
@

; optimize OK (MIDFILES), line = 125

	lda #$1D
	sta FPS

	jmp a_0005
l_0360
	cmp #$E2
	jne l_036D
@

; optimize OK (MIDFILES), line = 126

	lda #$1E
	sta FPS

l_036D
a_0005

; optimize OK (MIDFILES), line = 128

	lda V
	sta FSD
	jmp l_038B
l_032D

; optimize OK (MIDFILES), line = 136

	lda V
	sta TICKDIV
	lda V+1
	and #$7F
	sta TICKDIV+1
l_038B
	jmp l_039D
l_030B

; optimize FAIL ('cmpSTRING', MIDFILES), line = 142

	inx
	mva CHUNKHEAD :STACKORIGIN,x
	mva CHUNKHEAD+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$2C :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	ldy #1
	jsr cmpSTRING
	beq @+
	dey
@
	dex
	dex
	tya
	jeq l_03AE

; optimize FAIL (0, MIDFILES), line = 144

	inc TRACKCOUNT
	sne
	inc TRACKCOUNT+1

; optimize FAIL ('@print', MIDFILES), line = 145

	@print #$2E
; BlockRead

; optimize OK (MIDFILES), line = 146

	mwy F :bp2
	ldy #s@file.buffer
	lda MIDDATA
	add DATAPOS
	sta (:bp2),y
	iny
	lda MIDDATA+1
	adc DATAPOS+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda LEN
	sta (:bp2),y
	iny
	lda LEN+1
	sta (:bp2),y

	txa:pha
	clc
	@readfile F, #7
	pla:tax

; optimize OK (MIDFILES), line = 147

	mwy NTRKREC :bp2
	ldy #$00
	lda MIDDATA
	add DATAPOS
	sta (:bp2),y
	iny
	lda MIDDATA+1
	adc DATAPOS+1
	sta (:bp2),y

; optimize OK (MIDFILES), line = 148

	iny
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (MIDFILES), line = 149

	iny
	lda LEN
	sta (:bp2),y
	iny
	lda LEN+1
	sta (:bp2),y
	iny
	lda LEN+2
	sta (:bp2),y
	iny
	lda LEN+3
	sta (:bp2),y

; optimize OK (MIDFILES), line = 150

	iny
	lda #$00
	sta (:bp2),y

; optimize OK (MIDFILES), line = 151

	iny
	sta (:bp2),y

; optimize OK (MIDFILES), line = 152

	lda NTRKREC
	add #$0D
	sta NTRKREC
	scc
	inc NTRKREC+1

; optimize OK (MIDFILES), line = 153

	lda DATAPOS
	add LEN
	sta DATAPOS
	lda DATAPOS+1
	adc LEN+1
	sta DATAPOS+1
l_03AE
l_039D
l_02D5

; optimize FAIL (1, MIDFILES), line = 104

	inx
	ldy #1
	lda SYSTEM.IORESULT
	cmp #$80
	bcc @+
	dey
@
	sty :STACKORIGIN,x
	lda F
	sta SYSTEM.EOF.F
	lda F+1
	sta SYSTEM.EOF.F+1
	jsr SYSTEM.EOF
	inx
	mva SYSTEM.EOF.RESULT :STACKORIGIN,x
	jsr notBOOLEAN
	jsr andAL_CL
	mva TRACKCOUNT :STACKORIGIN,x
	mva TRACKCOUNT+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva NTRACKS :STACKORIGIN,x
	mva NTRACKS+1 :STACKORIGIN+STACKWIDTH,x
	ldy #1
	jsr cmpEAX_ECX.AX_CX
	bcc @+
	dey
@
	sty :STACKORIGIN-1,x
	dex
	jsr andAL_CL
	dex
	dex
	lda :STACKORIGIN+1,x
	jne l_02D6
b_02D6
; CloseFile

	txa:pha
	clc
	@closefile F
	pla:tax

; optimize OK (MIDFILES), line = 158

	lda #$01
	sta RESULT
@exit

; ------------------------------------------------------------

adr.FN	= [DATAORIGIN+$0165] .array [256]
.var FN	= adr.FN .word
RESULT	= DATAORIGIN+$0265
.var F	= DATAORIGIN+$0266 .word
TRACKCOUNT	= DATAORIGIN+$0272
adr.CHUNKHEAD	= [DATAORIGIN+$0274] .array [5]
.var CHUNKHEAD	= adr.CHUNKHEAD .word
V	= DATAORIGIN+$0279
DATAPOS	= DATAORIGIN+$027B
LEN	= DATAORIGIN+$027D
NTRKREC	= DATAORIGIN+$0281
NTRKREC.PTR	= DATAORIGIN+$0000
NTRKREC.DELTATIME	= DATAORIGIN+$0002
NTRKREC.SIZE	= DATAORIGIN+$0006
NTRKREC.SKIPDELTA	= DATAORIGIN+$000A
NTRKREC.EOT	= DATAORIGIN+$000B
NTRKREC._EVENT	= DATAORIGIN+$000C
@CASETMP_0005	= DATAORIGIN+$0289

@VarData	= FN
@VarDataSize	= 286

	rts						; ret
.endl

.local	GETTRACKDATA					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta TRACK
	lda :STACKORIGIN+STACKWIDTH,x
	sta TRACK+1
	dex
@main

	jmp l_0401

.local	DECODEDELTATIME					; FUNCTION

; optimize OK (MIDFILES), line = 173

	lda #$00
	sta RESULT
	sta RESULT+1
	sta RESULT+2
	sta RESULT+3

; --- RepeatUntilProlog
l_0409

; optimize OK (MIDFILES), line = 175

	mwy TRACKDATA :bp2
	ldy #$00
	lda (:bp2),y
	sta V
	inc TRACKDATA
	sne
	inc TRACKDATA+1

; optimize OK (MIDFILES), line = 176

	lda RESULT
	sta :STACKORIGIN+9
	lda RESULT+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda RESULT+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda RESULT+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sta RESULT
	lda :STACKORIGIN+STACKWIDTH+9
	sta RESULT+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta RESULT+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sta RESULT+3

; optimize OK (MIDFILES), line = 177

	lda V
	and #$7F
	ora RESULT
	sta RESULT

; optimize OK (MIDFILES), line = 178

	lda V
	jmi l_0409
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$02A9
V	= DATAORIGIN+$02AD

@VarData	= V
@VarDataSize	= 1

	rts						; ret
.endl

.local	GETBYTE						; FUNCTION

; optimize OK (MIDFILES), line = 183

	mwy TRACKDATA :bp2
	ldy #$00
	lda (:bp2),y
	sta RESULT
	inc TRACKDATA
	sne
	inc TRACKDATA+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$02AE
	rts						; ret
.endl
l_0401

; optimize OK (MIDFILES), line = 187

	mwy TRACK :bp2
	ldy #$00
	lda (:bp2),y
	sta TRACKDATA
	iny
	lda (:bp2),y
	sta TRACKDATA+1

; optimize OK (MIDFILES), line = 188

	ldy #$0C
	lda (:bp2),y
	sta EVENT

; --- RepeatUntilProlog
l_0455

; optimize OK (MIDFILES), line = 190

	mwy TRACK :bp2
	ldy #$0A
	lda (:bp2),y
	jne l_0464

; optimize FAIL ('DECODEDELTATIME', MIDFILES), line = 192

	jsr DECODEDELTATIME
	lda DECODEDELTATIME.RESULT
	sta DELTATIME
	lda DECODEDELTATIME.RESULT+1
	sta DELTATIME+1
	lda DECODEDELTATIME.RESULT+2
	sta DELTATIME+2
	lda DECODEDELTATIME.RESULT+3
	sta DELTATIME+3

; optimize OK (MIDFILES), line = 193

	jmi l_0479
	ora DELTATIME+2
	ora DELTATIME+1
	ora DELTATIME
	jeq l_0479
	jmp b_0455					; break
l_0479
	jmp l_0485
l_0464

; optimize OK (MIDFILES), line = 197

	mwy TRACK :bp2
	ldy #$0A
	lda #$00
	sta (:bp2),y
l_0485

; optimize OK (MIDFILES), line = 199

	mwy TRACKDATA :bp2
	ldy #$00
	lda (:bp2),y
	jpl l_049F

; optimize FAIL ('GETBYTE', MIDFILES), line = 200

	jsr GETBYTE
	lda GETBYTE.RESULT
	sta EVENT
l_049F

; optimize OK (MIDFILES), line = 202

	lda EVENT
	sta @CASETMP_0006
	clc						; clear carry for add
	adc #$FF-$BF					; make m = $FF
	adc #$BF-$80+1					; carry set if in range n to m
	bcs @+
	lda @CASETMP_0006
	clc						; clear carry for add
	adc #$FF-$EF					; make m = $FF
	adc #$EF-$E0+1					; carry set if in range n to m
	jcc l_04B3
@

; optimize OK (MIDFILES), line = 206

	lda EVENT
	jsr MIDI_FIFO.FIFO_WRITEBYTE
	mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x

; optimize FAIL ('GETBYTE', MIDFILES), line = 207

	jsr GETBYTE
	lda GETBYTE.RESULT
	jsr MIDI_FIFO.FIFO_WRITEBYTE
	mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x

; optimize FAIL ('GETBYTE', MIDFILES), line = 208

	jsr GETBYTE
	lda GETBYTE.RESULT
	jsr MIDI_FIFO.FIFO_WRITEBYTE
	mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x

	jmp a_0006
l_04B3
	lda @CASETMP_0006
	clc						; clear carry for add
	adc #$FF-$DF					; make m = $FF
	adc #$DF-$C0+1					; carry set if in range n to m
	jcc l_04C4
@

; optimize OK (MIDFILES), line = 212

	lda EVENT
	jsr MIDI_FIFO.FIFO_WRITEBYTE
	mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x

; optimize FAIL ('GETBYTE', MIDFILES), line = 213

	jsr GETBYTE
	lda GETBYTE.RESULT
	jsr MIDI_FIFO.FIFO_WRITEBYTE
	mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x

	jmp a_0006
l_04C4
	lda @CASETMP_0006
	clc						; clear carry for add
	adc #$FF-$F7					; make m = $FF
	adc #$F7-$F0+1					; carry set if in range n to m
	jcc l_04D3
@

; optimize FAIL ('DECODEDELTATIME', MIDFILES), line = 217

	jsr DECODEDELTATIME
	lda DECODEDELTATIME.RESULT
	sta MSGLEN
	lda DECODEDELTATIME.RESULT+1
	sta MSGLEN+1
	lda DECODEDELTATIME.RESULT+2
	sta MSGLEN+2
	lda DECODEDELTATIME.RESULT+3
	sta MSGLEN+3

; optimize OK (MIDFILES), line = 218

	lda EVENT
	jsr MIDI_FIFO.FIFO_WRITEBYTE
	mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x

; --- WhileProlog
	jmp l_04DD
l_04DE

; optimize FAIL ('GETBYTE', MIDFILES), line = 221

	jsr GETBYTE
	lda GETBYTE.RESULT
	sta V

; optimize OK (MIDFILES), line = 222

	jsr MIDI_FIFO.FIFO_WRITEBYTE
	mva MIDI_FIFO.FIFO_WRITEBYTE.RESULT :STACKORIGIN+1,x

; optimize FAIL (0, MIDFILES), line = 223

	ded MSGLEN
l_04DD

; optimize OK (MIDFILES), line = 219

	lda MSGLEN+3
	bmi @+
	ora MSGLEN+2
	ora MSGLEN+1
	ora MSGLEN
	jne l_04DE
@

; optimize OK (MIDFILES), line = 225

	lda V
	cmp #$F7
	jne l_0507
	lda #$00
	sta FLAGSYSEX
	jmp l_0515
l_0507
	lda #$01
	sta FLAGSYSEX
l_0515

	jmp a_0006
l_04D3
	lda @CASETMP_0006
	cmp #$FF
	jne l_0522
@

; optimize FAIL ('GETBYTE', MIDFILES), line = 229

	jsr GETBYTE
	lda GETBYTE.RESULT
	sta EVENT

; optimize FAIL ('DECODEDELTATIME', MIDFILES), line = 230

	jsr DECODEDELTATIME
	lda DECODEDELTATIME.RESULT
	sta MSGLEN
	lda DECODEDELTATIME.RESULT+1
	sta MSGLEN+1
	lda DECODEDELTATIME.RESULT+2
	sta MSGLEN+2
	lda DECODEDELTATIME.RESULT+3
	sta MSGLEN+3

; optimize OK (MIDFILES), line = 231

	lda EVENT
	cmp #$2F
	jne l_053C

; optimize OK (MIDFILES), line = 232

	mwy TRACK :bp2
	ldy #$0B
	lda #$01
	sta (:bp2),y
	jmp l_054A
l_053C

; optimize OK (MIDFILES), line = 234

	lda TRACKDATA
	add MSGLEN
	sta TRACKDATA
	lda TRACKDATA+1
	adc MSGLEN+1
	sta TRACKDATA+1
l_054A

l_0522
a_0006

; optimize OK (MIDFILES), line = 237

	mwy TRACK :bp2
	ldy #$0B
	lda (:bp2),y
	jeq l_0455
b_0455

; optimize OK (MIDFILES), line = 238

	mwy TRACK :bp2
	ldy #$00
	lda TRACKDATA
	sta (:bp2),y
	iny
	lda TRACKDATA+1
	sta (:bp2),y

; optimize OK (MIDFILES), line = 239

	ldy #$0A
	lda #$01
	sta (:bp2),y

; optimize OK (MIDFILES), line = 240

	ldy #$0C
	lda EVENT
	sta (:bp2),y

; optimize OK (MIDFILES), line = 241

	lda DELTATIME
	sta RESULT
	lda DELTATIME+1
	sta RESULT+1
	lda DELTATIME+2
	sta RESULT+2
	lda DELTATIME+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

TRACK	= DATAORIGIN+$028A
RESULT	= DATAORIGIN+$0298
TRACKDATA	= DATAORIGIN+$029C
FLAGSYSEX	= DATAORIGIN+$029E
DELTATIME	= DATAORIGIN+$029F
MSGLEN	= DATAORIGIN+$02A3
V	= DATAORIGIN+$02A7
EVENT	= DATAORIGIN+$02A8
@CASETMP_0006	= DATAORIGIN+$02AF

@VarData	= TRACK
@VarDataSize	= 28

	rts						; ret
.endl

; ------------------------------------------------------------

adr.MIDDATA	= [DATAORIGIN+$0148] .array [1]
.var MIDDATA	= adr.MIDDATA .word
adr.MIDTRACKS	= [DATAORIGIN+$0149] .array [1]
.var MIDTRACKS	= adr.MIDTRACKS .word
FORMAT	= DATAORIGIN+$014A
NTRACKS	= DATAORIGIN+$014C
FPS	= DATAORIGIN+$014E
FSD	= DATAORIGIN+$014F
TICKDIV	= DATAORIGIN+$0150
adr.BI	= [DATAORIGIN+$0152] .array [4]
.var BI	= adr.BI .word

.endl							; UNIT MIDFILES
l_004A

; optimize FAIL ('MIDI_FIFO.FIFO_RESET', MIDICar Player.pas), line = 24

	jsr MIDI_FIFO.FIFO_RESET

; optimize FAIL ('MC6850.MC6850_RESET', MIDICar Player.pas), line = 25

	jsr MC6850.MC6850_RESET

; optimize OK (MIDICar Player.pas), line = 26

	lda #$16
	jsr MC6850.MC6850_INIT

; optimize FAIL ('SYSTEM.PARAMCOUNT', MIDICar Player.pas), line = 28

	jsr SYSTEM.PARAMCOUNT
	lda SYSTEM.PARAMCOUNT.RESULT
	cmp #$01
	jne l_0582
@

; optimize OK (MIDICar Player.pas), line = 29

	lda #$01
	jsr SYSTEM.PARAMSTR
	inx
	lda SYSTEM.PARAMSTR.RESULT
	sta @move.src
	lda SYSTEM.PARAMSTR.RESULT+1
	sta @move.src+1
	mwy FN :bp2
	ldy #$00
	mva:rne (@move.src),y (:bp2),y+
	dex
	jmp l_058E
l_0582
	ldy #256-16
	mva:rne CODEORIGIN+$0032+16-256,y adr.FN+16-256,y+
l_058E

; optimize OK (MIDICar Player.pas), line = 33

	lda #$00
	sta MIDFILES.MIDDATA
	lda #$40
	sta MIDFILES.MIDDATA+1

; optimize OK (MIDICar Player.pas), line = 34

	lda #$00
	sta MIDFILES.MIDTRACKS
	lda #$3F
	sta MIDFILES.MIDTRACKS+1

; optimize FAIL ('MIDFILES.LOADMID', MIDICar Player.pas), line = 35

	inx
	mva FN :STACKORIGIN,x
	mva FN+1 :STACKORIGIN+STACKWIDTH,x
	jsr MIDFILES.LOADMID
	lda MIDFILES.LOADMID.RESULT
	jne l_05A5
	lda #$01
	jmp @halt
l_05A5

; optimize OK (MIDICar Player.pas), line = 36

	lda #$00
	sta TOTALTIME
	sta TOTALTIME+1
	sta TOTALTIME+2
	sta TOTALTIME+3

; --- RepeatUntilProlog
l_05AF

; optimize OK (MIDICar Player.pas), line = 39

	lda MIDFILES.NTRACKS
	sta PLAYINGTRACKS

; optimize OK (MIDICar Player.pas), line = 40

	lda #$00
	sta CTRK
	ldy MIDFILES.NTRACKS
	dey
	sty @FORTMP_05BF_0

l_05C2
; --- ForToDoCondition
	lda @FORTMP_05BF_0:#$00
	cmp CTRK
	jcc l_05D0

; optimize OK (MIDICar Player.pas), line = 42

	lda #$0D
	sta :ecx
	lda CTRK
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda MIDFILES.MIDTRACKS
	add :eax
	sta TRACK
	lda MIDFILES.MIDTRACKS+1
	adc :eax+1
	sta TRACK+1

; optimize OK (MIDICar Player.pas), line = 43

	mwy TRACK :bp2
	ldy #$0B
	lda (:bp2),y
	jeq l_05E6

; optimize FAIL (0, MIDICar Player.pas), line = 45

	dec PLAYINGTRACKS
	jmp c_05C2					; continue
l_05E6

; optimize OK (MIDICar Player.pas), line = 47

	mwy TRACK :bp2
	ldy #$02
	lda (:bp2),y
	sta DELTATIME
	iny
	lda (:bp2),y
	sta DELTATIME+1
	iny
	lda (:bp2),y
	sta DELTATIME+2
	iny
	lda (:bp2),y
	sta DELTATIME+3

; optimize OK (MIDICar Player.pas), line = 48

	ora DELTATIME+2
	ora DELTATIME+1
	ora DELTATIME
	jne l_0601

; optimize FAIL ('MIDFILES.GETTRACKDATA', MIDICar Player.pas), line = 49

	inx
	mva TRACK :STACKORIGIN,x
	mva TRACK+1 :STACKORIGIN+STACKWIDTH,x
	jsr MIDFILES.GETTRACKDATA
	lda MIDFILES.GETTRACKDATA.RESULT
	sta DELTATIME
	lda MIDFILES.GETTRACKDATA.RESULT+1
	sta DELTATIME+1
	lda MIDFILES.GETTRACKDATA.RESULT+2
	sta DELTATIME+2
	lda MIDFILES.GETTRACKDATA.RESULT+3
	sta DELTATIME+3
l_0601

; optimize OK (MIDICar Player.pas), line = 59

	lda DELTATIME+3
	jmi l_061A
	ora DELTATIME+2
	ora DELTATIME+1
	ora DELTATIME
	jeq l_061A

; optimize FAIL (0, MIDICar Player.pas), line = 61

	ded DELTATIME

; optimize OK (MIDICar Player.pas), line = 62

	mwy TRACK :bp2
	ldy #$02
	lda DELTATIME
	sta (:bp2),y
	iny
	lda DELTATIME+1
	sta (:bp2),y
	iny
	lda DELTATIME+2
	sta (:bp2),y
	iny
	lda DELTATIME+3
	sta (:bp2),y
l_061A

; --- ForToDoEpilog
c_05C2
	inc CTRK
	jne l_05C2
l_05D0

; optimize FAIL (0, MIDICar Player.pas), line = 65

	ind TOTALTIME

; optimize FAIL ('MIDI_FIFO.FIFO_FLUSH', MIDICar Player.pas), line = 66

	jsr MIDI_FIFO.FIFO_FLUSH

; optimize OK (MIDICar Player.pas), line = 67

	lda PLAYINGTRACKS
	jne l_05AF

; ------------------------------------------------------------

adr.FN	= [DATAORIGIN+$02B0] .array [256]
.var FN	= adr.FN .word
TRACK	= DATAORIGIN+$03B0
TRACK.PTR	= DATAORIGIN+$0000
TRACK.DELTATIME	= DATAORIGIN+$0002
TRACK.SIZE	= DATAORIGIN+$0006
TRACK.SKIPDELTA	= DATAORIGIN+$000A
TRACK.EOT	= DATAORIGIN+$000B
TRACK._EVENT	= DATAORIGIN+$000C
DELTATIME	= DATAORIGIN+$03B2
TOTALTIME	= DATAORIGIN+$03B6
CTRK	= DATAORIGIN+$03BA
PLAYINGTRACKS	= DATAORIGIN+$03BB
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.MC6850.@UnitInit
	jsr MAIN.MC6850.@UnitInit
	.fi

	.ifdef MAIN.DOS.@UnitInit
	jsr MAIN.DOS.@UnitInit
	.fi

	.ifdef MAIN.STRUTILS.@UnitInit
	jsr MAIN.STRUTILS.@UnitInit
	.fi

	.ifdef MAIN.SYSUTILS.@UnitInit
	jsr MAIN.SYSUTILS.@UnitInit
	.fi

	.ifdef MAIN.MIDI_FIFO.@UnitInit
	jsr MAIN.MIDI_FIFO.@UnitInit
	.fi

	.ifdef MAIN.MIDFILES.@UnitInit
	jsr MAIN.MIDFILES.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.MC6850) > 0
	.print 'MC6850: ',MAIN.MC6850,'..',MAIN.MC6850+.SIZEOF(MAIN.MC6850)-1
	eif

	ift .SIZEOF(MAIN.DOS) > 0
	.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
	eif

	ift .SIZEOF(MAIN.STRUTILS) > 0
	.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
	eif

	ift .SIZEOF(MAIN.SYSUTILS) > 0
	.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
	eif

	ift .SIZEOF(MAIN.MIDI_FIFO) > 0
	.print 'MIDI_FIFO: ',MAIN.MIDI_FIFO,'..',MAIN.MIDI_FIFO+.SIZEOF(MAIN.MIDI_FIFO)-1
	eif

	ift .SIZEOF(MAIN.MIDFILES) > 0
	.print 'MIDFILES: ',MAIN.MIDFILES,'..',MAIN.MIDFILES+.SIZEOF(MAIN.MIDFILES)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 957

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $0A $4F $70  $65 $6E $20 $66 $69 $6C $65 $20
.by  $00 $0B $49 $2F $4F $20 $45 $72  $72 $6F $72 $20 $23 $00 $04 $4D  $54 $68 $64 $00 $04 $4D $54 $72
.by  $6B $00 $0F $44 $32 $3A $4F $56  $45 $52 $57 $4F $52 $4C $2E $4D  $49 $44 $00
.endm

	end
