RTCLOK = $12
ATRACT = 77
DLIV   = $200
SDMACTL= $22f
SDLST  = $230
KBCODE = $d209
SKSTAT = $d20f
DMACTL = $d400
DLPTR  = $d402
NMIRES = $d40f

SRTIMR = $022b
KEYDIS = $026d
KEYREP = $02da
KEYDEL = $02f1

    bit NMIRES
    bpl VBL
    jmp (DLIV)

VBL:
    cld
// store registers
    sta rega
    stx regx
    sty regy
    STA NMIRES

// reset atract counter
    lda #0
    sta ATRACT

    lda SDMACTL
    sta DMACTL

// set displaylist
    lda SDLST
    sta DLPTR
    lda SDLST+1
    sta DLPTR+1

// RTCLOCK
    inc RTCLOK+2

// keyboard
    lda SKSTAT
    and #$04
    beq skip_keyDelay
    lda KEYDEL
    beq skip_keyDelay
    dec KEYDEL

skip_keyDelay:
    lda SRTIMR
    beq end_key

    lda SKSTAT
    and #$04
    bne skip_key

    dec SRTIMR
    bne end_key
    lda KEYREP
    sta SRTIMR

    lda KBCODE
    jsr MAIN.KEYS.keyConv ; this procedure change Y-reg!
    jmp end_key

skip_key:
    lda #$00
    sta SRTIMR

end_key:

; change displaylist interrupt
    lda lstY                // is current list Y position is
    cmp lstOldY             // not changed?
    beq skipDLChange        // true ... skip DL change

    sta lstOldY             // store new list Y position

    ldy #0                  // workarea line number
    ldx #26                 // display list offset
loop:
    lda DLIST_ADDR,x        // fetch DL value
    cpy lstY                // if workarea line number is the same ad current list Y position...
    bne clearDL
    ora #$80                // true ...set Interrupt
    bmi store
clearDL:
    and #$7f                // false ...clear Interrupt
store:
    sta DLIST_ADDR,x        // store DL value
next:
    inx
    txa
    and #1
    bne loop                // each two DL entry is modified
    iny                     // increase work line number
    cpy #LIST_VISIBLE_ITEMS // is it last line?
    bne loop

skipDLChange:

; set DisplayList Interrupt
    lda #<MAIN.MYDLI
    sta DLIV
    lda #>MAIN.MYDLI
    sta DLIV+1

; restore registers
    lda rega:#0
    ldx regx:#0
    ldy regy:#0
