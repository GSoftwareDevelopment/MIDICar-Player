mads 2.1.5
Source: main.asm
     1 				;  main.asm
     2 				;  
     3 				;  Copyright 2022 pancio <pancio@desktop>
     4 				;  
     5 				;  This program is free software; you can redistribute it and/or modify
     6 				;  it under the terms of the GNU General Public License as published by
     7 				;  the Free Software Foundation; either version 2 of the License, or
     8 				;  (at your option) any later version.
     9 				;  
    10 				;  This program is distributed in the hope that it will be useful,
    11 				;  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12 				;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13 				;  GNU General Public License for more details.
    14 				;  
    15 				;  You should have received a copy of the GNU General Public License
    16 				;  along with this program; if not, write to the Free Software
    17 				;  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
    18 				;  MA 02110-1301, USA.
    19 				;  
    20 				;
    21
    22 				;configuration:
    23 = D500			IOPORT_base_address equ $d500
    24
    25 				; variable in OS:
    26
    27 = 02FC			keycode equ $02fc
    28 = D20A			random  equ $d20a
    29
    30 				;ROM procedures
    31 = F1A4			putscreen   equ $f1a4
    32
    33
    34 				;variables on 0 page        
    35 				        org $80
    36 				        
    37 = 0080			zp_channel  .ds 1
    38 = 0081			zp_pitch    .ds 1
    39 = 0082			ZP_velocity .ds 1
    40
    41 = 0083			zp_buffer   .ds 1
    42
    43 = 0084			a       .ds 1
    44 				 
    45
    46
    47 				        org   $6000          
    48
    49 				;main program         
    50 				        
    51 				         
    52 				start:  
    53
    54 				init:
    55 FFFF> 6000-6065> 20 2E +         jsr mc6850_reset
    56 6003 20 34 60		        jsr mc6850_init          
    57
    58
    59
    60 6006 A9 00		        lda #$00    ;channel0
    61 6008 A2 3C		        ldx #$3c    ;note: middle C
    62 600A A0 7F		        ldy #$7f    ;max velocity  
    63 600C 20 52 60		        jsr MIDI_note_on
    64 				        
    65 600F A9 00		        lda #$00
    66 6011 69 01		?loop   adc #$01
    67 6013 D0 FC		        bne ?loop
    68 				           
    69 				        
    70 6015 A9 01		        lda #$01    ;channel1
    71 6017 A2 40		        ldx #$40    ;note: middle E
    72 6019 A0 7F		        ldy #$7f    ;max velocity  
    73 601B 20 52 60		        jsr MIDI_note_on
    74
    75 601E A9 00		        lda #$00
    76 6020 69 01		?loop   adc #$01
    77 6022 D0 FC		        bne ?loop        
    78 				        
    79 6024 A9 02		        lda #$02    ;channel2
    80 6026 A2 43		        ldx #$43    ;note: middle G
    81 6028 A0 7F		        ldy #$7f    ;max velocity  
    82 602A 20 52 60		        jsr MIDI_note_on
    83 				                
    84 602D 60			        rts              
    85 				   
    86
    87 				        
    88 				        
    89 602E			    ICL "mc6850.asm" 
Source: mc6850.asm
     1 				;  mc6850.asm
     2 				;  
     3 				;  Copyright 2022 pancio <pancio@desktop>
     4 				;  
     5 				;  This program is free software; you can redistribute it and/or modify
     6 				;  it under the terms of the GNU General Public License as published by
     7 				;  the Free Software Foundation; either version 2 of the License, or
     8 				;  (at your option) any later version.
     9 				;  
    10 				;  This program is distributed in the hope that it will be useful,
    11 				;  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12 				;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13 				;  GNU General Public License for more details.
    14 				;  
    15 				;  You should have received a copy of the GNU General Public License
    16 				;  along with this program; if not, write to the Free Software
    17 				;  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
    18 				;  MA 02110-1301, USA.
    19 				;  
    20 				;  
    21
    22 				; include definitions:
    23 602E			         ICL "mc6850.inc" 
Source: mc6850.inc
     1 				 //Please set base address for MC6850
     2 				//
     3 				// IOPORT_base_address - should be defined in main.asm  
     4 				//
     5
     6 = D500			MC6850BASE  equ IOPORT_base_address 
     7
     8 				;VIA6522 registers
     9 = D500			MC6850_CNTRREG  equ MC6850BASE + 0    ;    Control Register (wtite access)
    10 = D501			MC6850_BUFFER   equ MC6850BASE + 1    ;    Receive/Send Buffer
    11 = D500			MC6850_STATREG  equ MC6850BASE + 0    ;    Sratus Register (read access)
    12
    13
    14
    15 				//MC6850_CNTRREG Write Access
    16 = 0001			CR0 equ 1       ;   Counter Divide Select Bit0    00 = f/1      01 = f/16
    17 = 0002			CR1 equ 2       ;   Counter Divide Select Bit1    10 = f/64     11 = Master Reset
    18 = 0004			CR2 equ 4       ;   Word Select Bit0
    19 = 0008			CR3 equ 8       ;   Word Select Bit1
    20 = 0010			CR4 equ 16      ;   Word Select Bit2
    21 = 0020			CR5 equ 32      ;   Transmitter Control Bit0 
    22 = 0040			CR6 equ 64      ;   Transmitter Control Bit1
    23 = 0080			CR7 equ 128     ;   Receive Interrupt Enable
    24
    25 				//MC6850_CNTRREG Read Access
    26 = 0001			RDRF    equ 1       ;   Receive Data Register full - set to LOW when data read by CPU. Set HIGH when data ready to read from buffer.   
    27 = 0002			TDRE    equ 2       ;   Transmit Data Register Empty - set HIGH when send buffer capable to send next byte.  
    28 = 0004			DCD     equ 4       ;   Data Carrier Detect (LOW active)
    29 = 0008			CTS     equ 8       ;   Clear To Send (active LOW)
    30 = 0010			FE      equ 16      ;   Framming Error (active HIGH)
    31 = 0020			OVRN    equ 32      ;   Receiver Overrun(active HIGH)
    32 = 0040			PE      equ 64      ;   Parity Error (active HIGH)
    33 = 0080			IRQ     equ 128     ;   Interrupt Request - state of the /IRQ output, set HIGH when IRQ appeared. Crear automaticale when read/write to buffer.
    34
    35
    36
    37
    24
    25
    26 				; mc6850_reset:
    27 				; MC6850 Master Reset 
    28 602E			mc6850_reset
    29 602E A9 03		        lda #(CR0 + CR1)        ;   Master Reset
    30 6030 8D 00 D5		        sta MC6850_CNTRREG
    31 6033 60			        rts
    32
    33 				; mc6850_init:
    34 				; prepare MC6850 for MIDI transmission (31250hz). 
    35 				; Base clock 2MHz is divided by 64 
    36 6034			mc6850_init
    37 6034 A9 16		        lda #(CR1 + CR2 + CR4)  ;   f/64, 8 Bit + 1 stop Bit
    38 6036 8D 00 D5		        sta MC6850_CNTRREG          
    39 6039 60			        rts
    40
    41 				;mc6850_receive        
    42 				; A - returned byte from MC6850_BUFFER
    43 603A			mc6850_receive:
    44 603A A9 01		        lda #RDRF
    45 603C 2C 00 D5		?loop   bit MC6850_CNTRREG
    46 603F F0 FB		        beq ?loop
    47 6041 AD 01 D5		        lda MC6850_BUFFER
    48 6044 60			        rts
    49 				        
    50 				;mc6850 send
    51 				; A -  data to send to MC6850_BUFFER  
    52 6045			mc6850_send:
    53 6045 48			        pha
    54 6046 A9 02		        lda #TDRE
    55 6048 2C 00 D5		?loop   bit MC6850_CNTRREG
    56 604B F0 FB		        beq ?loop
    57 604D 68			        pla
    58 604E 8D 01 D5		        sta MC6850_BUFFER
    59 6051 60			        rts  
    60
    61
    62 				;MIDI_note_on
    63 				;A - channel (0-15)
    64 				;X - pitch value (note: 0-127)
    65 				;Y - volocity value(0-127)   
    66 6052			MIDI_note_on:
    67
    68 6052 29 0F		    and #%00001111
    69 6054 09 90		    ora #%10010000  ;   Status Byte and channel
    70 6056 20 45 60		    jsr mc6850_send
    71 				     
    72 6059 8A			    txa
    73 605A 29 7F		    and #%01111111  ;   pitch (note)
    74 605C 20 45 60		    jsr mc6850_send
    75 				    
    76 605F 98			    tya
    77 6060 29 7F		    and #%01111111  ;   velocity
    78 6062 20 45 60		    jsr mc6850_send
    79 				    
    80 6065 60			    rts
    81 				        
    82 				 
    83
    84
    90 				    
    91 				        
    92
